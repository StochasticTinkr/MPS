package jetbrains.mps.testbench.suite.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_IModuleRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITestRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_JUnit3TestCaseRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_JUnit4TestCaseRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModuleSuite = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_SolutionRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestCaseRef = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("d3c5a46f-b8c2-47db-ad0a-30b8f19c2055"), "jetbrains.mps.testbench.suite")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_IModuleRef;
      case 1:
        return props_ITestRef;
      case 2:
        return props_JUnit3TestCaseRef;
      case 3:
        return props_JUnit4TestCaseRef;
      case 4:
        return props_ModuleSuite;
      case 5:
        return props_SolutionRef;
      case 6:
        return props_TestCaseRef;
    }
    throw new IllegalStateException();
  }
}
