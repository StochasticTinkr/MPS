package jetbrains.mps.testbench.suite.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_IModuleRef = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ITestRef = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_JUnit3TestCaseRef = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_JUnit4TestCaseRef = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ModuleSuite = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_SolutionRef = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TestCaseRef = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0i.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_IModuleRef;
          }
          break;
        case 1:
          if (true) {
            return props_ITestRef;
          }
          break;
        case 2:
          if (true) {
            return props_JUnit3TestCaseRef;
          }
          break;
        case 3:
          if (true) {
            return props_JUnit4TestCaseRef;
          }
          break;
        case 4:
          if (true) {
            return props_ModuleSuite;
          }
          break;
        case 5:
          if (true) {
            return props_SolutionRef;
          }
          break;
        case 6:
          if (true) {
            return props_TestCaseRef;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0i = buildConceptIndices(MetaAdapterFactory.getInterfaceConcept(0xd3c5a46fb8c247dbL, 0xad0a30b8f19c2055L, 0x11c3fc56a6d1d7a3L, "IModuleRef"), MetaAdapterFactory.getInterfaceConcept(0xd3c5a46fb8c247dbL, 0xad0a30b8f19c2055L, 0x3e81ed1e2be77cbaL, "ITestRef"), MetaAdapterFactory.getConcept(0xd3c5a46fb8c247dbL, 0xad0a30b8f19c2055L, 0x3e81ed1e2be77cb9L, "JUnit3TestCaseRef"), MetaAdapterFactory.getConcept(0xd3c5a46fb8c247dbL, 0xad0a30b8f19c2055L, 0x3e81ed1e2be77cb8L, "JUnit4TestCaseRef"), MetaAdapterFactory.getConcept(0xd3c5a46fb8c247dbL, 0xad0a30b8f19c2055L, 0x3e81ed1e2be77cb5L, "ModuleSuite"), MetaAdapterFactory.getConcept(0xd3c5a46fb8c247dbL, 0xad0a30b8f19c2055L, 0x11c3fc56a6d1cbdcL, "SolutionRef"), MetaAdapterFactory.getConcept(0xd3c5a46fb8c247dbL, 0xad0a30b8f19c2055L, 0x3e81ed1e2be77cb7L, "TestCaseRef"));
}
