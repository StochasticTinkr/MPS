package jetbrains.mps.migration.test.tests;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.migration.wizard.MigrationsProgressWizardStep;
import jetbrains.mps.ide.project.ProjectHelper;
import java.util.List;
import com.intellij.history.core.changes.ChangeSet;
import com.intellij.history.integration.LocalHistoryImpl;
import junit.framework.Assert;
import jetbrains.mps.tool.environment.Environment;
import jetbrains.mps.tool.environment.IdeaEnvironment;
import java.io.File;
import jetbrains.mps.tool.environment.EnvironmentConfig;

public class MigrationLocalHistory_Test extends TestCase {
  private static final String MIGRATION_ASSISTANT_PLUGIN = "jetbrains.mps.ide.migration.assistant";
  private static final String PROJECT_PATH = "testbench/modules/migrationLocalHist";
  private Project project;
  public void test_test() throws Exception {
    MigrationsProgressWizardStep.runMigrationsInTests(ProjectHelper.toIdeaProject(project));

    List<ChangeSet> changes = LocalHistoryImpl.getInstanceImpl().getFacade().getChangeListInTests().getChangesInTests();

    int num = 6;
    Assert.assertEquals(changes.size(), num);
    Assert.assertEquals(changes.get(0).getLabel(), MigrationsProgressWizardStep.FINISH_LABEL_TEXT);
    Assert.assertEquals(changes.get(num - 1).getLabel(), MigrationsProgressWizardStep.START_LABEL_TEXT);
    for (int i = 1; i < num - 1; i++) {
      Assert.assertTrue(changes.get(i).getName().startsWith(MigrationsProgressWizardStep.APPLYING_MIG_LABEL));
    }
  }
  public void setUp() {
    Environment env = IdeaEnvironment.getOrCreate(createConfig());
    project = env.openProject(new File(PROJECT_PATH));
  }

  private EnvironmentConfig createConfig() {
    return EnvironmentConfig.defaultConfig().addPlugin("migrationAssistant", MIGRATION_ASSISTANT_PLUGIN);
  }
}
