package jetbrains.mps.ide.vcs.test.merge;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.junit.Before;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.smodel.ModelAccessHelper;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPointerOperations;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.persistence.PersistenceUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.junit.Assert;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import org.junit.Test;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.vcs.diff.changes.DeleteRootChange;
import jetbrains.mps.vcs.diff.changes.AddRootChange;
import jetbrains.mps.vcs.diff.changes.SetPropertyChange;
import jetbrains.mps.vcs.diff.changes.SetReferenceChange;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.vcs.diff.changes.NodeGroupChange;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import java.util.List;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.editor.runtime.impl.cellActions.CommentUtil;
import jetbrains.mps.vcs.diff.ChangeSetImpl;
import jetbrains.mps.vcs.diff.ModelChangeSet;
import jetbrains.mps.vcs.diff.ChangeSetBuilder;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.SReference;

/**
 * These tests check correctness of diff algorithm
 * todo: add tests for model metadata changes
 */
public class ChangesCalculationTest extends ChangesTestBase {
  /**
   * Detached clone of jetbrains.mps.ide.vcs.test.testModel model. We use it to match against changes in myTestMode
   */
  private SModel myReferenceModel;
  /**
   * Detached clone of jetbrains.mps.ide.vcs.test.testModel model, initially identical to myReferenceModel, and the one being modified by tests.
   */
  private SModel myTestModel;
  /**
   * A root node from myTestModel we deal with.
   */
  private SNode myRootNode;
  private SNodeId myRootNodeId;


  @Before
  public void prepareTestModel() {
    final SRepository repo = ourProject.getRepository();
    myTestModel = new ModelAccessHelper(repo).runReadAction(new Computable<SModel>() {
      public SModel compute() {
        SModel testModel = SPointerOperations.resolveModel(PersistenceFacade.getInstance().createModelReference("r:296ba97d-4b26-4d06-be61-297d86180cce(jetbrains.mps.ide.vcs.test.testModel)"), repo);
        // make an identical clone of original model, and keep it detached from a repository to avoid model access control 
        SModel detachedCopy = PersistenceUtil.loadModelFromXml(PersistenceUtil.saveModelToXml(testModel));
        // XXX can't save/load myTestModel out of this model read as there'd be no information about stub concepts (saveModelToXml needs to write that) 
        //     We can try to deal with that using MetaInfoLoadingOption.KEEP_READ option, but it's not easy to pass one into PersistenceUtil 
        myReferenceModel = PersistenceUtil.loadModelFromXml(PersistenceUtil.saveModelToXml(testModel));
        return detachedCopy;
      }
    });
    myRootNode = ListSequence.fromList(SModelOperations.roots(myTestModel, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"))).first();
    myRootNodeId = myRootNode.getNodeId();
    Assert.assertEquals("[sanity]", "Root", SPropertyOperations.getString(myRootNode, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
    Assert.assertEquals("[sanity]", new SNodePointer("r:296ba97d-4b26-4d06-be61-297d86180cce(jetbrains.mps.ide.vcs.test.testModel)", "5876208808348821705").getNodeId(), myRootNodeId);
  }

  @Test
  public void testRemoveRoot() {
    testDiffCorrectness(new Runnable() {
      public void run() {
        SNodeOperations.deleteNode(myRootNode);
      }
    }, new DeleteRootChange(createFakeChangeSet(), myRootNodeId));
  }

  @Test
  public void testAddRoot() {
    final SNodeId id = new jetbrains.mps.smodel.SNodeId.Regular(1);
    testDiffCorrectness(new Runnable() {
      public void run() {
        SNode newRoot = createClassConcept_7w1430_a0a0a0b0k();
        ((jetbrains.mps.smodel.SNode) newRoot).setId(id);
        SModelOperations.addRootNode(myTestModel, newRoot);
        assert newRoot.getNodeId().equals(id) : "this can't happen in universe's lifetime";
      }
    }, new AddRootChange(createFakeChangeSet(), id));
  }

  @Test
  public void testPropertyChange() {
    testDiffCorrectness(new Runnable() {
      public void run() {
        SPropertyOperations.assign(myRootNode, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "RenamedRoot");
      }
    }, new SetPropertyChange(createFakeChangeSet(), myRootNodeId, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "RenamedRoot"));
  }

  @Test
  public void changeReference() {
    SetReferenceChange change;
    final SNode method1 = Sequence.fromIterable(((Iterable<SNode>) BHReflection.invoke0(myRootNode, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"), SMethodTrimmedId.create("methods", MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"), "4_LVZ3pBKCn")))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Objects.equals(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), "method1");
      }
    }).first();
    change = new SetReferenceChange(createFakeChangeSet(), SLinkOperations.getTarget(method1, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType")).getNodeId(), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"), myTestModel.getReference(), myRootNodeId, "Root");
    testDiffCorrectness(new Runnable() {
      public void run() {
        SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(method1, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"), myRootNode);
      }
    }, change);
  }

  @Test
  public void addChild() {
    testDiffCorrectness(new _Adapters._return_P0_E0_to_Runnable_adapter(new _FunctionTypes._return_P0_E0<SNode>() {
      public SNode invoke() {
        return SLinkOperations.setTarget(myRootNode, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, 0x10f6353296dL, "superclass"), _quotation_createNode_7w1430_a0a0a0a0q());
      }
    }), new NodeGroupChange(createFakeChangeSet(), myRootNodeId, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, 0x10f6353296dL, "superclass"), 0, 0, 0, 1));
  }
  @Test
  public void addNodeAttribute() {
    testDiffCorrectness(new Runnable() {
      public void run() {
        AttributeOperations.createAndSetAttrbiute(myRootNode, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2274019e61e234c9L, "jetbrains.mps.lang.core.structure.ReviewMigration")), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2274019e61e234c9L, "jetbrains.mps.lang.core.structure.ReviewMigration"));
      }
    }, new NodeGroupChange(createFakeChangeSet(), myRootNodeId, MetaAdapterFactory.getContainmentLink(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x47bf8397520e5942L, "smodelAttribute"), 0, 0, 0, 1));
  }
  @Test
  public void addChildAttribute() {
    testDiffCorrectness(new Runnable() {
      public void run() {
        ChangesTestUtil.addCommentedMethod(myRootNode, ListSequence.fromList(SLinkOperations.getChildren(myRootNode, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"))).last());

      }
    }, new NodeGroupChange(createFakeChangeSet(), myRootNodeId, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"), 3, 3, 3, 4));
  }

  @Test
  public void addChildAttributeAndCheckItIsAboutRole() {
    List<ModelChange> changes = applyAndDiff(new Runnable() {
      public void run() {
        ChangesTestUtil.addCommentedMethod(myRootNode, ListSequence.fromList(SLinkOperations.getChildren(myRootNode, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"))).last());
      }
    });
    junit.framework.Assert.assertTrue(ListSequence.fromList(changes).count() == 1 && ListSequence.fromList(changes).first() instanceof NodeGroupChange && ((NodeGroupChange) ListSequence.fromList(changes).first()).isAbout(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member")));
  }

  @Test
  public void removeChild() {
    final SNode method1 = Sequence.fromIterable(((Iterable<SNode>) BHReflection.invoke0(myRootNode, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"), SMethodTrimmedId.create("methods", MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"), "4_LVZ3pBKCn")))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Objects.equals(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), "method1");
      }
    }).first();
    testDiffCorrectness(new Runnable() {
      public void run() {
        SNodeOperations.deleteNode(method1);
      }
    }, new NodeGroupChange(createFakeChangeSet(), myRootNodeId, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"), 0, 1, 0, 0));
  }

  @Test
  public void removeChildAttribute() {
    final SNode commented = Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.collect(AttributeOperations.getAttributeList(myRootNode, new IAttributeDescriptor.ChildAttribute(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3dcc194340c24debL, "jetbrains.mps.lang.core.structure.BaseCommentAttribute"), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"))), MetaAdapterFactory.getContainmentLink(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3dcc194340c24debL, 0x2ab99f0d2248e89dL, "commentedNode")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Objects.equals(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), "commented");
      }
    }).first();
    testDiffCorrectness(new Runnable() {
      public void run() {
        SNodeOperations.deleteNode(SNodeOperations.cast(SNodeOperations.getParent(commented), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3dcc194340c24debL, "jetbrains.mps.lang.core.structure.BaseCommentAttribute")));
      }
    }, new NodeGroupChange(createFakeChangeSet(), myRootNodeId, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"), 1, 2, 1, 1));
  }

  @Test
  public void replaceChild() {
    final SNode method1 = Sequence.fromIterable(((Iterable<SNode>) BHReflection.invoke0(myRootNode, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"), SMethodTrimmedId.create("methods", MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"), "4_LVZ3pBKCn")))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Objects.equals(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), "method1");
      }
    }).first();
    testDiffCorrectness(new Runnable() {
      public void run() {
        SNodeOperations.deleteNode(method1);
        ListSequence.fromList(SLinkOperations.getChildren(myRootNode, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"))).insertElement(0, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1458378889e6d166L, "jetbrains.mps.baseLanguage.structure.PlaceholderMember")));
      }
    }, new NodeGroupChange(createFakeChangeSet(), myRootNodeId, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"), 0, 1, 0, 1));
  }
  @Test
  public void commentChild() {
    final SNode method1 = Sequence.fromIterable(((Iterable<SNode>) BHReflection.invoke0(myRootNode, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"), SMethodTrimmedId.create("methods", MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"), "4_LVZ3pBKCn")))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return Objects.equals(SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), "method1");
      }
    }).first();
    testDiffCorrectness(new Runnable() {
      public void run() {
        CommentUtil.commentOut(method1);
      }
    }, new NodeGroupChange(createFakeChangeSet(), myRootNodeId, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"), 0, 1, 0, 1));
  }
  @Test
  public void uncommentChild() {
    testDiffCorrectness(new Runnable() {
      public void run() {
        ChangesTestUtil.uncommentFirstCommentedMethod(myRootNode);
      }
    }, new NodeGroupChange(createFakeChangeSet(), myRootNodeId, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"), 1, 2, 1, 2));
  }

  @Test
  public void moveChild() {
    // todo? 
  }

  private ChangeSetImpl createFakeChangeSet() {
    return new ChangeSetImpl(myReferenceModel, myTestModel);
  }

  private void testDiffCorrectness(Runnable todo, ModelChange... expectedChanges) {
    List<ModelChange> realChanges = applyAndDiff(todo);
    Assert.assertEquals(expectedChanges.length, ListSequence.fromList(realChanges).count());
    for (int i = 0; i < expectedChanges.length; i++) {
      ModelChange real = ListSequence.fromList(realChanges).getElement(i);
      ModelChange expected = expectedChanges[i];
      Assert.assertEquals(real.toString(), expected.toString());
    }
  }

  private List<ModelChange> applyAndDiff(final Runnable todo) {
    return new ModelAccessHelper(ourProject.getRepository()).runReadAction(new Computable<List<ModelChange>>() {
      public List<ModelChange> compute() {
        // the reason we have to modify detached model inside a model read is that some tests touch references, and our Root sample 
        // has references pointing outside. We'd rather fix this sample to be self-contained 
        todo.run();
        // FIXME the only reason buildChangeSet is wrapped into model read is that SProperty.getType() still goes 
        //     into getDeclarationNode(). Drop once there's generated support for property types. 
        ModelChangeSet diff = ChangeSetBuilder.buildChangeSet(myReferenceModel, myTestModel);
        return diff.getModelChanges();
      }
    });
  }
  private static SNode createClassConcept_7w1430_a0a0a0b0k() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), null, null, false);
    n1.setProperty(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "NewRoot");
    return n1;
  }
  private static SNode _quotation_createNode_7w1430_a0a0a0a0q() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0x101de48bf9eL, "ClassifierType"), null, null, false);
    quotedNode_1.setReference(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"), SReference.create(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"), quotedNode_1, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/java:java.lang(JDK/)"), facade.createNodeId("~Object")));
    return quotedNode_1;
  }
}
