package jetbrains.mps.ide.vcs.test.merge;

/*Generated by MPS */

import org.junit.Test;
import jetbrains.mps.editor.runtime.impl.cellActions.CommentUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.List;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.vcs.diff.changes.NodeCopier;
import junit.framework.Assert;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.vcs.diff.changes.NodeGroupChange;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.vcs.diff.ChangeSet;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.smodel.SReference;

/**
 * [Mihail Muhin] I'm not sure what these are about, these tests were just copied from old ChangesManagerTest
 */
public class ChangesRollbackTest extends ChangesTestBase {
  @Test
  public void rollbackAllSerially() {
    rollbackChangesSeriallyAndCheckNoDifference(new Runnable() {
      public void run() {
        makeAllChanges();
      }
    });
  }
  @Test
  public void addAndRollbackNodeAttribute() {
    rollbackChangesSeriallyAndCheckNoDifference(new Runnable() {
      public void run() {
        addNodeAttribute();
      }
    });
  }
  @Test
  public void addAndRollbackChildAttribute() {
    rollbackChangesSeriallyAndCheckNoDifference(new Runnable() {
      public void run() {
        addChildAttribute();
      }
    });
  }
  @Test
  public void deleteAndRollbackChildAttribute() {
    rollbackChangesSeriallyAndCheckNoDifference(new Runnable() {
      public void run() {
        deleteChildAttribute();
      }
    });
  }
  @Test
  public void commentChildAndRollback() {
    rollbackChangesSeriallyAndCheckNoDifference(new Runnable() {
      public void run() {
        CommentUtil.commentOut(SNodeOperations.getNode("r:296ba97d-4b26-4d06-be61-297d86180cce(jetbrains.mps.ide.vcs.test.testModel)", "6476988416338090461"));
      }
    });
  }
  @Test
  public void uncommentChildAndRollback() {
    rollbackChangesSeriallyAndCheckNoDifference(new Runnable() {
      public void run() {
        ChangesTestUtil.uncommentFirstCommentedMethod(SNodeOperations.getNode("r:296ba97d-4b26-4d06-be61-297d86180cce(jetbrains.mps.ide.vcs.test.testModel)", "5876208808348821705"));
      }
    });
  }
  @Test
  public void rollbackAllAtomically() {
    rollbackChangesAutomaticallyAndCheckNoDifference(new Runnable() {
      public void run() {
        makeAllChanges();
      }
    });
  }

  private void rollbackChangesSeriallyAndCheckNoDifference(final Runnable changesRunnable) {
    testChanges(new Runnable() {
      public void run() {
        changesRunnable.run();
      }
    });
    final SModel model = getTestModel();
    List<ModelChange> changes = ListSequence.fromListWithValues(new ArrayList<ModelChange>(), myDiff.getChangeSet().getModelChanges());
    ListSequence.fromList(changes).reversedList().visitAll(new IVisitor<ModelChange>() {
      public void visit(final ModelChange change) {
        testChanges(new Runnable() {
          public void run() {
            change.getOppositeChange().apply(model, new NodeCopier(model));
          }
        });
      }
    });
    Assert.assertTrue(ListSequence.fromList(myDiff.getChangeSet().getModelChanges()).isEmpty());
  }
  private void rollbackChangesAutomaticallyAndCheckNoDifference(final Runnable changesRunnable) {
    testChanges(new Runnable() {
      public void run() {
        changesRunnable.run();
      }
    });
    final SModel model = getTestModel();
    final List<ModelChange> oppositeChanges = ListSequence.fromList(check_p3cuek_a0a0c0j(myDiff.getChangeSet())).select(new ISelector<ModelChange, ModelChange>() {
      public ModelChange select(ModelChange ch) {
        return ch.getOppositeChange();
      }
    }).toListSequence();
    testChanges(new Runnable() {
      public void run() {
        final NodeCopier nc = new NodeCopier(model);
        ListSequence.fromList(oppositeChanges).where(new IWhereFilter<ModelChange>() {
          public boolean accept(ModelChange ch) {
            return ch instanceof NodeGroupChange;
          }
        }).visitAll(new IVisitor<ModelChange>() {
          public void visit(ModelChange ch) {
            ((NodeGroupChange) ch).prepare();
          }
        });
        ListSequence.fromList(oppositeChanges).visitAll(new IVisitor<ModelChange>() {
          public void visit(ModelChange ch) {
            ch.apply(model, nc);
          }
        });
        nc.restoreIds(true);
      }
    });
    Assert.assertTrue(ListSequence.fromList(myDiff.getChangeSet().getModelChanges()).isEmpty());
  }


  private void makeAllChanges() {
    SNode root = SNodeOperations.getNode("r:296ba97d-4b26-4d06-be61-297d86180cce(jetbrains.mps.ide.vcs.test.testModel)", "5876208808348821705");
    SPropertyOperations.set(root, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "newName");
    SLinkOperations.setTarget(root, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, 0x10f6353296dL, "superclass"), _quotation_createNode_p3cuek_a0c0m());
    addNodeAttribute();
    addChildAttribute();
    ListSequence.fromList(SLinkOperations.getChildren(root, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"))).addElement(createInstanceMethodDeclaration_p3cuek_a0a5a21());
  }
  private void addNodeAttribute() {
    AttributeOperations.createAndSetAttrbiute(SNodeOperations.getNode("r:296ba97d-4b26-4d06-be61-297d86180cce(jetbrains.mps.ide.vcs.test.testModel)", "5876208808348821705"), new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2274019e61e234c9L, "jetbrains.mps.lang.core.structure.ReviewMigration")), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2274019e61e234c9L, "jetbrains.mps.lang.core.structure.ReviewMigration"));
  }
  private void addChildAttribute() {
    ChangesTestUtil.addCommentedMethod(SNodeOperations.getNode("r:296ba97d-4b26-4d06-be61-297d86180cce(jetbrains.mps.ide.vcs.test.testModel)", "5876208808348821705"), ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.getNode("r:296ba97d-4b26-4d06-be61-297d86180cce(jetbrains.mps.ide.vcs.test.testModel)", "5876208808348821705"), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"))).first());
  }

  private void deleteChildAttribute() {
    SNodeOperations.deleteNode(SNodeOperations.cast(SNodeOperations.getParent(SNodeOperations.getNode("r:296ba97d-4b26-4d06-be61-297d86180cce(jetbrains.mps.ide.vcs.test.testModel)", "5297043982019668093")), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3dcc194340c24debL, "jetbrains.mps.lang.core.structure.BaseCommentAttribute")));
  }
  private static List<ModelChange> check_p3cuek_a0a0c0j(ChangeSet checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelChanges();
    }
    return null;
  }
  private static SNode _quotation_createNode_p3cuek_a0c0m() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0x101de48bf9eL, "ClassifierType"), null, null, false);
    quotedNode_1.setReference(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"), SReference.create(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"), quotedNode_1, facade.createModelReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/java:java.lang(JDK/)"), facade.createNodeId("~Object")));
    return quotedNode_1;
  }
  private static SNode createInstanceMethodDeclaration_p3cuek_a0a5a21() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"), null, null, false);
    {
      n1.setProperty(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "m1");
      SNode n2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, "jetbrains.mps.baseLanguage.structure.StatementList"), null, null, false);
      n1.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1ffL, "body"), n2);
      SNode n3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc6bf96dL, "jetbrains.mps.baseLanguage.structure.VoidType"), null, null, false);
      n1.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType"), n3);
    }
    return n1;
  }
}
