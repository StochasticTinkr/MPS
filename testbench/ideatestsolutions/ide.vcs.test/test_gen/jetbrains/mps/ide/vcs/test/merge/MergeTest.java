package jetbrains.mps.ide.vcs.test.merge;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import org.junit.Before;
import jetbrains.mps.vcs.diff.merge.MergeTemporaryModel;
import jetbrains.mps.persistence.PersistenceUtil;
import org.junit.BeforeClass;
import jetbrains.mps.RuntimeFlags;
import org.junit.AfterClass;
import org.junit.Test;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.editor.runtime.impl.cellActions.CommentUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import org.jetbrains.mps.openapi.model.SNodeId;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.vcs.diff.merge.MergeSession;
import junit.framework.Assert;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.vcs.diff.changes.ModelChange;
import jetbrains.mps.vcs.diff.ModelChangeSet;
import jetbrains.mps.vcs.diff.ChangeSetBuilder;
import jetbrains.mps.vcs.diff.ChangeSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

/**
 * Tests merge algorithm
 */
public class MergeTest extends ChangesTestBase {
  private static boolean ourMergeDriverModeWas;

  public MergeTest() {
  }

  private SModel myBaseModel;
  private SModel myMineModel;
  private SModel myTheirsModel;



  @Before
  @Override
  public void init() {
    super.init();
    // it's only test model we need read access for, then, we deal with a detached model and shall not care about model access any longer. 
    getProject().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        myBaseModel = MergeTemporaryModel.readonlyCloneOf(getTestModel());
      }
    });
    // FIXME is there real need to go through String when we can use MTM.writeableCloneOf()? 
    //       I left strings for now just to make sure persistance of a detached model doesn't need model access! 
    String baseString = PersistenceUtil.saveModel(myBaseModel, getDefaultExt());
    myMineModel = PersistenceUtil.loadModel(baseString);
    myTheirsModel = PersistenceUtil.loadModel(baseString);
  }

  @BeforeClass
  public static void setUpClass() {
    MergeTest.ourMergeDriverModeWas = RuntimeFlags.isMergeDriverMode();
    RuntimeFlags.setMergeDriverMode(true);
  }

  @AfterClass
  public static void tearDownClass() {
    RuntimeFlags.setMergeDriverMode(MergeTest.ourMergeDriverModeWas);
  }

  @Test
  public void testOnlyMineChanges() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelCreator() {
      public SModel createModel() {
        SPropertyOperations.assign(getMineClassRoot(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "ChangedName");
        return myMineModel;
      }
    });
  }

  @Test
  public void testOnlyTheirsChanges() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelCreator() {
      public SModel createModel() {
        SPropertyOperations.assign(getTheirsClassRoot(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "ChangedName");
        return myTheirsModel;
      }
    });
  }

  @Test
  public void testSymmetricChanges_AddRoot() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelCreator() {
      public SModel createModel() {
        SNode newRoot = createClassConcept_u0wfvp_a0a0a0a0u();
        SModelOperations.addRootNode(myTheirsModel, newRoot);
        SModelOperations.addRootNode(myMineModel, CopyUtil.copyAndPreserveId(newRoot));
        return myMineModel;
      }
    });
  }

  @Test
  public void testSymmetricChanges_DeleteRoot() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelCreator() {
      public SModel createModel() {
        SNodeOperations.deleteNode(getMineClassRoot());
        SNodeOperations.deleteNode(getTheirsClassRoot());
        return myMineModel;
      }
    });
  }

  @Test
  public void testSymmetricChanges_AddChild() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelCreator() {
      public SModel createModel() {
        SNode newChild = createInstanceMethodDeclaration_u0wfvp_a0a0a0a0y();
        insertMemberPreservingId(getMineClassRoot(), newChild, -1);
        insertMemberPreservingId(getTheirsClassRoot(), newChild, -1);
        return myMineModel;

      }
    });
  }
  @Test
  public void testSymmetricChanges_Comment() {
    testMergeNumberOfConflictingChanges(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        CommentUtil.commentOut(ListSequence.fromList(SLinkOperations.getChildren(getMineClassRoot(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"))).first());
        CommentUtil.commentOut(ListSequence.fromList(SLinkOperations.getChildren(getTheirsClassRoot(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"))).first());
      }
    }, 2);
  }
  @Test
  public void testSymmetricChanges_AddComment() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelCreator() {
      public SModel createModel() {
        SNode commentedMethod = ChangesTestUtil.createCommentedMethod();

        insertCommentPreservingId(getMineClassRoot(), commentedMethod, -1);
        insertCommentPreservingId(getTheirsClassRoot(), commentedMethod, -1);
        return myMineModel;
      }
    });
  }
  @Test
  public void testSymmetricChanges_Uncomment() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelCreator() {
      public SModel createModel() {
        ChangesTestUtil.uncommentFirstCommentedMethod(getMineClassRoot());
        ChangesTestUtil.uncommentFirstCommentedMethod(getTheirsClassRoot());
        return myMineModel;
      }
    });
  }

  @Test
  public void testSymmetricChanges_RemoveChildAttribute() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelCreator() {
      public SModel createModel() {
        SNodeOperations.deleteNode(SNodeOperations.getParent(ListSequence.fromList(AttributeOperations.getAttributeList(getMineClassRoot(), new IAttributeDescriptor.ChildAttribute(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3dcc194340c24debL, "jetbrains.mps.lang.core.structure.BaseCommentAttribute"), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member")))).first()));
        SNodeOperations.deleteNode(SNodeOperations.getParent(ListSequence.fromList(AttributeOperations.getAttributeList(getTheirsClassRoot(), new IAttributeDescriptor.ChildAttribute(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3dcc194340c24debL, "jetbrains.mps.lang.core.structure.BaseCommentAttribute"), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member")))).first()));
        return myMineModel;
      }
    });
  }


  @Test
  public void testSymmetricChanges_Property() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelCreator() {
      public SModel createModel() {
        SPropertyOperations.assign(getMineClassRoot(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "ChangedName");
        SPropertyOperations.assign(getTheirsClassRoot(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "ChangedName");
        return myMineModel;
      }
    });
  }

  @Test
  public void testSymmetricChanges_Link() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelCreator() {
      public SModel createModel() {
        SNodeReference method1Decl = new SNodePointer("r:296ba97d-4b26-4d06-be61-297d86180cce(jetbrains.mps.ide.vcs.test.testModel)", "8885850892994216610");
        SNodeId method1NodeId = method1Decl.getNodeId();
        SLinkOperations.setPointer(SNodeOperations.cast(SLinkOperations.getTarget(((SNode) myMineModel.getNode(method1NodeId)), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"), new SNodePointer("r:296ba97d-4b26-4d06-be61-297d86180cce(jetbrains.mps.ide.vcs.test.testModel)", "5876208808348821705"));
        SLinkOperations.setPointer(SNodeOperations.cast(SLinkOperations.getTarget(((SNode) myTheirsModel.getNode(method1NodeId)), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"), new SNodePointer("r:296ba97d-4b26-4d06-be61-297d86180cce(jetbrains.mps.ide.vcs.test.testModel)", "5876208808348821705"));
        return myMineModel;
      }
    });
  }


  @Test
  public void testAddChildAndAddChildAttributeOnDifferentPositionsDontConflict() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelChanger() {
      public void changeModel(SModel expectedModel) {
        SNode placeholder = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1458378889e6d166L, "jetbrains.mps.baseLanguage.structure.PlaceholderMember"));
        SNode commentedMethod = ChangesTestUtil.createCommentedMethod();

        insertMemberPreservingId(getMineClassRoot(), placeholder, 1);
        insertCommentPreservingId(getTheirsClassRoot(), commentedMethod, 0);


        insertMemberPreservingId(getClassRoot(expectedModel), placeholder, 1);
        insertCommentPreservingId(getClassRoot(expectedModel), commentedMethod, 0);
      }
    });
  }
  @Test
  public void testAddTwoChildAttributeOnDifferentPositionsDontConflict() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelChanger() {
      public void changeModel(SModel expectedModel) {

        SNode mineCommentedMethod = ChangesTestUtil.createCommentedMethod();
        SNode theirsCommentedMethod = ChangesTestUtil.createCommentedMethod();

        insertCommentPreservingId(getMineClassRoot(), mineCommentedMethod, -1);
        insertCommentPreservingId(getTheirsClassRoot(), theirsCommentedMethod, 0);

        insertCommentPreservingId(getClassRoot(expectedModel), mineCommentedMethod, -1);
        insertCommentPreservingId(getClassRoot(expectedModel), theirsCommentedMethod, 0);
      }
    });
  }

  @Test
  public void testAddChildAttributeAndNodeAttribute() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelChanger() {
      public void changeModel(SModel expectedModel) {

        SNode reviewMigration = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x78c7e79625a38e06L, "jetbrains.mps.lang.core.structure.ReviewMigration"));
        SNode commentedMethod = ChangesTestUtil.createCommentedMethod();

        AttributeOperations.setAttribute(getMineClassRoot(), new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x78c7e79625a38e06L, "jetbrains.mps.lang.core.structure.ReviewMigration")), reviewMigration);
        insertCommentPreservingId(getTheirsClassRoot(), commentedMethod, 0);

        AttributeOperations.setAttribute(getClassRoot(expectedModel), new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x53f7c33f069862f2L, "jetbrains.mps.baseLanguage.structure.JavaImports")), (SNode) CopyUtil.copyAndPreserveId(reviewMigration));
        insertCommentPreservingId(getClassRoot(expectedModel), commentedMethod, 0);
      }
    });
  }
  @Test
  public void testRemoveChildAndRemoveChildAttribute() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelChanger() {
      public void changeModel(SModel expectedModel) {
        SNodeOperations.deleteNode(SNodeOperations.getParent(ListSequence.fromList(SLinkOperations.getChildren(getMineClassRoot(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"))).first()));
        SNodeOperations.deleteNode(SNodeOperations.getParent(ListSequence.fromList(AttributeOperations.getAttributeList(getTheirsClassRoot(), new IAttributeDescriptor.ChildAttribute(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3dcc194340c24debL, "jetbrains.mps.lang.core.structure.BaseCommentAttribute"), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member")))).first()));


        SNodeOperations.deleteNode(SNodeOperations.getParent(ListSequence.fromList(AttributeOperations.getAttributeList(getClassRoot(expectedModel), new IAttributeDescriptor.ChildAttribute(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3dcc194340c24debL, "jetbrains.mps.lang.core.structure.BaseCommentAttribute"), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member")))).first()));
        SNodeOperations.deleteNode(SNodeOperations.getParent(ListSequence.fromList(SLinkOperations.getChildren(getClassRoot(expectedModel), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"))).first()));
      }
    });
  }

  @Test
  public void testAddChildAndChildAttributeAtSamePositionConflict() {
    testMergeNumberOfConflictingChanges(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        ListSequence.fromList(SLinkOperations.getChildren(getMineClassRoot(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"))).insertElement(0, SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1458378889e6d166L, "jetbrains.mps.baseLanguage.structure.PlaceholderMember")));
        ChangesTestUtil.addCommentedMethod(getTheirsClassRoot(), null);
      }
    }, 2);
  }
  @Test
  public void testAddTwoDifferentChildAttributeAtSamePositionConflict() {
    testMergeNumberOfConflictingChanges(new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        ChangesTestUtil.addCommentedMethod(getMineClassRoot(), null);
        ChangesTestUtil.addCommentedMethod(getTheirsClassRoot(), null);
      }
    }, 2);
  }


  @Test
  public void testAddChildAndCommentChildDontConflict() {
    testMergeNoConflictingChanges(new _FunctionTypes._void_P0_E0() {
      public void invoke() {

        ListSequence.fromList(SLinkOperations.getChildren(getMineClassRoot(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"))).addElement(SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1458378889e6d166L, "jetbrains.mps.baseLanguage.structure.PlaceholderMember")));
        CommentUtil.commentOut(ListSequence.fromList(SLinkOperations.getChildren(getTheirsClassRoot(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"))).first());

      }
    });
  }
  @Test
  public void testAddChildAndUncommentChildDontConflict() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelChanger() {
      public void changeModel(SModel expectedModel) {

        SNode placeholderMember = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1458378889e6d166L, "jetbrains.mps.baseLanguage.structure.PlaceholderMember"));

        insertMemberPreservingId(getMineClassRoot(), placeholderMember, 0);
        ChangesTestUtil.uncommentFirstCommentedMethod(getTheirsClassRoot());

        insertMemberPreservingId(getClassRoot(expectedModel), placeholderMember, 0);
        ChangesTestUtil.uncommentFirstCommentedMethod(getClassRoot(expectedModel));
      }
    });
  }


  @Test
  public void testAddChildAndSetPropertyDontConflict() {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelChanger() {
      public void changeModel(SModel expectedModel) {
        SNode newChild = createInstanceMethodDeclaration_u0wfvp_a0a0a0a0a0a15();
        SPropertyOperations.assign(getMineClassRoot(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "ChangedName");
        insertMemberPreservingId(getTheirsClassRoot(), newChild, -1);

        insertMemberPreservingId(getClassRoot(expectedModel), newChild, -1);
        SPropertyOperations.assign(getClassRoot(expectedModel), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "ChangedName");
      }
    });
  }

  private void insertPreservingId(SNode clazz, SNode member, int position, SContainmentLink link) {
    Iterable<SNode> members = AttributeOperations.getChildNodesAndAttributes(clazz, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"));
    if (position < -1 && position > Sequence.fromIterable(members).count()) {
      throw new IllegalArgumentException("Wrong position to insert: " + position + ". Number of members and child attributes: " + Sequence.fromIterable(members).count());
    }
    SNode memberCopy = (SNode) CopyUtil.copyAndPreserveId(member);
    SNode anchor;
    if (position == 0) {
      anchor = null;
    } else if (position == -1) {
      anchor = Sequence.fromIterable(members).last();
    } else {
      anchor = Sequence.fromIterable(members).toGenericArray(SNode.class)[position - 1];
    }
    clazz.insertChildAfter(link, memberCopy, anchor);

  }
  private void insertMemberPreservingId(SNode clazz, SNode member, int position) {
    insertPreservingId(clazz, member, position, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x4a9a46de59132803L, "member"));
  }
  private void insertCommentPreservingId(SNode clazz, SNode member, int position) {
    insertPreservingId(clazz, member, position, MetaAdapterFactory.getContainmentLink(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x47bf8397520e5942L, "smodelAttribute"));
  }


  private void testMergeNumberOfConflictingChanges(_FunctionTypes._void_P0_E0 change, int numberOfConflictingChanges) {
    change.invoke();
    final MergeSession session = MergeSession.createMergeSession(myBaseModel, myMineModel, myTheirsModel);

    Assert.assertSame(Sequence.fromIterable(session.getAllChanges()).where(new IWhereFilter<ModelChange>() {
      public boolean accept(ModelChange change) {
        return Sequence.fromIterable(session.getConflictedWith(change)).isNotEmpty();
      }
    }).count(), numberOfConflictingChanges);
  }

  private void testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(final MergeTest.ModelChanger changer) {
    testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(new MergeTest.ModelCreator() {
      public SModel createModel() {
        SModel expectedModel = MergeTemporaryModel.writableCloneOf(myBaseModel);
        changer.changeModel(expectedModel);
        return expectedModel;
      }
    });
  }
  private void testMergeNoConflictingChangesAndCheckNoDifferencesWithExpectedModel(MergeTest.ModelCreator creator) {
    SModel expectedModel = creator.createModel();

    final MergeSession session = MergeSession.createMergeSession(myBaseModel, myMineModel, myTheirsModel);

    org.junit.Assert.assertTrue(Sequence.fromIterable(session.getAllChanges()).all(new IWhereFilter<ModelChange>() {
      public boolean accept(ModelChange c) {
        return Sequence.fromIterable(session.getConflictedWith(c)).isEmpty();
      }
    }));

    session.applyChanges(Sequence.fromIterable(session.getAllChanges()).toListSequence());
    ModelChangeSet changes = ChangeSetBuilder.buildChangeSet(expectedModel, session.getResultModel());

    org.junit.Assert.assertTrue(dumpChangeSet(changes, session), ListSequence.fromList(changes.getModelChanges()).isEmpty());
  }

  private void testMergeNoConflictingChanges(_FunctionTypes._void_P0_E0 change) {
    testMergeNumberOfConflictingChanges(change, 0);
  }


  private SNode getClassRoot(SModel model) {
    return ListSequence.fromList(SModelOperations.roots(model, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"))).first();
  }
  private SNode getMineClassRoot() {
    return getClassRoot(myMineModel);
  }
  private SNode getTheirsClassRoot() {
    return getClassRoot(myTheirsModel);
  }


  private static String dumpChangeSet(ChangeSet changeSet, MergeSession session) {
    StringBuffer buf = new StringBuffer();
    for (ModelChange change : ListSequence.fromList(changeSet.getModelChanges()).sort(new ISelector<ModelChange, String>() {
      public String select(ModelChange c) {
        return c.toString();
      }
    }, true)) {
      buf.append(change).append("\n");
      for (ModelChange conflicting : Sequence.fromIterable(session.getConflictedWith(change)).sort(new ISelector<ModelChange, String>() {
        public String select(ModelChange c) {
          return c.toString();
        }
      }, true)) {
        buf.append("    ").append(conflicting).append("\n");
      }
    }
    return buf.toString();
  }

  /*package*/ interface ModelChanger {
    void changeModel(SModel model);
  }
  /*package*/ interface ModelCreator {
    SModel createModel();
  }
  private static SNode createClassConcept_u0wfvp_a0a0a0a0u() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), null, null, false);
    return n1;
  }
  private static SNode createInstanceMethodDeclaration_u0wfvp_a0a0a0a0y() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"), null, null, false);
    {
      n1.setProperty(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "newMethod");
      SNode n2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, "jetbrains.mps.baseLanguage.structure.StatementList"), null, null, false);
      n1.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1ffL, "body"), n2);
      SNode n3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc6bf96dL, "jetbrains.mps.baseLanguage.structure.VoidType"), null, null, false);
      n1.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType"), n3);
    }
    return n1;
  }
  private static SNode createInstanceMethodDeclaration_u0wfvp_a0a0a0a0a0a15() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"), null, null, false);
    {
      n1.setProperty(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "newMethod");
      SNode n2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, "jetbrains.mps.baseLanguage.structure.StatementList"), null, null, false);
      n1.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1ffL, "body"), n2);
      SNode n3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc6bf96dL, "jetbrains.mps.baseLanguage.structure.VoidType"), null, null, false);
      n1.addChild(MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType"), n3);
    }
    return n1;
  }
}
