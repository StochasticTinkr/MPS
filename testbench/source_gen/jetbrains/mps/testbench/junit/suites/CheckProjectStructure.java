package jetbrains.mps.testbench.junit.suites;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SModule;
import org.junit.ClassRule;
import jetbrains.mps.testbench.PerformanceMessenger;
import org.junit.Test;
import jetbrains.mps.testbench.junit.Order;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.checkers.IChecker;
import jetbrains.mps.errors.item.IssueKindReportItem;
import jetbrains.mps.checkers.ModuleChecker;
import jetbrains.mps.checkers.ModelPropertiesChecker;
import jetbrains.mps.checkers.AbstractNodeCheckerInEditor;
import jetbrains.mps.project.validation.StructureChecker;
import org.junit.Assume;
import java.util.List;
import jetbrains.mps.generator.impl.dependencies.GenerationDependenciesCache;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.generator.impl.dependencies.GenerationDependencies;
import jetbrains.mps.extapi.model.GeneratableSModel;
import org.junit.Assert;
import jetbrains.mps.checkers.ModelCheckerBuilder;
import jetbrains.mps.generator.GenerationFacade;

public class CheckProjectStructure extends BaseCheckerTest {
  public CheckProjectStructure(SModule module) {
    super(module);
  }

  @ClassRule
  public static final PerformanceMessenger ourStats = new PerformanceMessenger("checkProjectStructure");

  @Test
  @Order(value = 1)
  public void checkModuleProperties() {
    super.runCheck(ListSequence.fromListAndArray(new ArrayList<IChecker<?, ? extends IssueKindReportItem>>(), new ModuleChecker()), null, "Module property or dependency errors");
  }

  @Test
  @Order(value = 2)
  public void checkModels() {
    super.runCheck(ListSequence.fromListAndArray(new ArrayList<IChecker<?, ? extends IssueKindReportItem>>(), new ModelPropertiesChecker()), null, "Model errors");
  }

  @Test
  @Order(value = 3)
  public void checkStructure() {
    super.runCheck(ListSequence.fromListAndArray(new ArrayList<IChecker<?, ? extends IssueKindReportItem>>(), (AbstractNodeCheckerInEditor) (AbstractNodeCheckerInEditor) new StructureChecker(true, true, true, false)), null, "Structure errors:");
  }

  @Test
  @Order(value = 4)
  public void checkReferences() {
    super.runCheck(ListSequence.fromListAndArray(new ArrayList<IChecker<?, ? extends IssueKindReportItem>>(), (AbstractNodeCheckerInEditor) (AbstractNodeCheckerInEditor) new StructureChecker(false, false, false, true)), null, "Broken reference errors");
  }

  @Test
  @Order(value = 5)
  public void checkGenerationStatus() {
    Assume.assumeFalse("Generation status is meaningless for packaged modules", myModule.isPackaged());
    final List<String> errors = new ArrayList<String>();
    BaseCheckModulesTest.getContextProject().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        GenerationDependenciesCache genDeps = new GenerationDependenciesCache();
        for (SModel sm : new CheckProjectStructure.TestsModelExtractor().excludeDoNoGenerate().excludeGenerators().getModels(myModule)) {
          SModule module = sm.getModule();
          if (module == null) {
            errors.add("Model without a module: " + sm.getReference().toString());
            continue;
          }
          GenerationDependencies gd = genDeps.get(sm);
          String genHash = (gd == null ? null : gd.getModelHash());
          if (genHash == null) {
            errors.add("No generated hash for " + sm.getReference().toString());
            continue;
          }
          String realHash = ((GeneratableSModel) sm).getModelHash();
          if (realHash == null) {
            errors.add("cannot gen cache for " + sm.getReference().toString());
            continue;
          }
          if (!(realHash.equals(genHash))) {
            errors.add("model requires generation: " + sm.getReference().toString() + " last genHash:" + genHash + " modelHash:" + realHash);
          }
        }
      }
    });
    Assert.assertTrue("Try to regenerate models:\n" + formatErrors(errors), errors.isEmpty());
  }

  public static class TestsModelExtractor extends ModelCheckerBuilder.ModelsExtractorImpl {
    private boolean myIncludeDoNotGenerate = true;
    public ModelCheckerBuilder.ModelsExtractorImpl excludeDoNoGenerate() {
      myIncludeDoNotGenerate = false;
      return this;
    }
    @Override
    public boolean includeModel(SModel model) {
      return super.includeModel(model) && (myIncludeDoNotGenerate || GenerationFacade.canGenerate(model));
    }
  }

}
