package jetbrains.mps.testbench.junit.suites;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.checkers.ModelCheckerBuilder;
import jetbrains.mps.checkers.IChecker;
import jetbrains.mps.errors.item.NodeReportItem;
import java.util.ArrayList;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.mps.openapi.util.Consumer;
import jetbrains.mps.errors.item.IssueKindReportItem;
import jetbrains.mps.progress.EmptyProgressMonitor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.errors.MessageStatus;

public class CheckingTestsUtil {
  private final CheckingTestStatistic myStats;

  public CheckingTestsUtil(CheckingTestStatistic statistic) {
    myStats = statistic;
  }

  public List<String> applyChecker(SModule module, ModelCheckerBuilder.ModelExtractor modelExtractor, final List<? extends IChecker<?, ? extends NodeReportItem>> checkers) {
    final List<String> errors = new ArrayList<String>();
    final Set<NodeReportItem> reportItems = SetSequence.fromSet(new HashSet<NodeReportItem>());


    new ModelCheckerBuilder(modelExtractor).createChecker(checkers).check(ModelCheckerBuilder.ItemsToCheck.forSingleModule(module), module.getRepository(), new Consumer<IssueKindReportItem>() {
      public void consume(IssueKindReportItem reportItem) {
        SetSequence.fromSet(reportItems).addElement((NodeReportItem) reportItem);
      }
    }, new EmptyProgressMonitor());

    for (NodeReportItem reportItem : reportItems) {
      SNode node = reportItem.getNode().resolve(module.getRepository());
      if (reportItem.getSeverity().equals(MessageStatus.ERROR)) {
        myStats.reportError();
        errors.add("Error message: " + reportItem.getMessage() + "   model: " + node.getModel().getName().getValue() + " root: " + node.getContainingRoot() + " node: " + node);
      }
      if (reportItem.getSeverity().equals(MessageStatus.WARNING)) {
        myStats.reportWarning();
      }
    }
    return errors;
  }
  public static String formatErrors(List<String> errors) {
    StringBuilder sb = new StringBuilder();
    String sep = "";
    for (String er : errors) {
      sb.append(sep).append(er);
      sep = "\n";
    }
    return sb.toString();
  }
}
