package jetbrains.mps.execution.impl.configurations.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SRepository;
import java.util.List;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.ModelAccessHelper;
import jetbrains.mps.util.Computable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestNodeWrapperFactory;

public final class TestNodeWrapHelper {
  private final SRepository myRepo;

  public TestNodeWrapHelper(SRepository repo) {
    myRepo = repo;
  }

  public List<ITestNodeWrapper> discover(final SNodeReference... testNodes) {
    return new ModelAccessHelper(myRepo).runReadAction(new Computable<List<ITestNodeWrapper>>() {
      public List<ITestNodeWrapper> compute() {
        List<ITestNodeWrapper> result = ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
        for (SNodeReference nodeRef : testNodes) {
          SNode resolved = nodeRef.resolve(myRepo);
          ITestNodeWrapper wrap = TestNodeWrapperFactory.tryToWrap(resolved);
          if (wrap != null) {
            ListSequence.fromList(result).addElement(wrap);
          }
        }
        return result;
      }
    });
  }
}
