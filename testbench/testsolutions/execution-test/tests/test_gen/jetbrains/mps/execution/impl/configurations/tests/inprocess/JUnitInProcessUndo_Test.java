package jetbrains.mps.execution.impl.configurations.tests.inprocess;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import java.util.List;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import jetbrains.mps.execution.impl.configurations.util.TestNodeWrapHelper;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestRunState;
import jetbrains.mps.execution.configurations.implementation.plugin.plugin.Executor;
import jetbrains.mps.execution.configurations.implementation.plugin.plugin.JUnitInProcessExecutor;
import com.intellij.execution.process.ProcessHandler;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.execution.impl.configurations.tests.commands.CheckTestStateListener;
import jetbrains.mps.baseLanguage.unitTest.execution.client.UnitTestProcessListener;
import jetbrains.mps.execution.api.commands.ProcessHandlerBuilder;
import junit.framework.Assert;
import com.intellij.execution.ExecutionException;

@MPSLaunch
public class JUnitInProcessUndo_Test extends BaseTransformationTest {
  private static final Logger LOG = LogManager.getLogger(JUnitInProcessUndo_Test.class);
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(JUnitInProcessUndo_Test.class, "${mps_home}", "r:ff98d12f-bc65-4639-94c3-dee022b33791(jetbrains.mps.execution.impl.configurations.tests.inprocess@tests)", false);

  public JUnitInProcessUndo_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_startTrickyTestCase() throws Throwable {
    runTest("jetbrains.mps.execution.impl.configurations.tests.inprocess.JUnitInProcessUndo_Test$TestBody", "test_startTrickyTestCase", false);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_startTrickyTestCase() throws Exception {
      List<ITestNodeWrapper> wrappedTests = new TestNodeWrapHelper(myProject.getRepository()).discover(new SNodePointer("r:914ee49a-537d-44b2-a5fb-bac87a54743d(jetbrains.mps.editorTest@tests)", "4177017564823046256"));
      this.checkTests(wrappedTests, ListSequence.fromList(new ArrayList<ITestNodeWrapper>()));
    }


    public SModel getMyModel() {
      return PersistenceFacade.getInstance().createModelReference("r:914ee49a-537d-44b2-a5fb-bac87a54743d(jetbrains.mps.editorTest@tests)").resolve(myProject.getRepository());
    }
    public void checkTests(final List<ITestNodeWrapper> success, final List<ITestNodeWrapper> failure) {
      try {
        List<ITestNodeWrapper> testNodes = ListSequence.fromList(success).union(ListSequence.fromList(failure)).toListSequence();
        final TestRunState runState = new TestRunState(testNodes);

        Executor processExecutor = new JUnitInProcessExecutor(myProject, "testtest", testNodes);
        if (LOG.isInfoEnabled()) {
          LOG.info("Starting in-process-execution");
        }
        ProcessHandler process = processExecutor.execute();
        final Wrappers._T<CheckTestStateListener> checkListener = new Wrappers._T<CheckTestStateListener>();
        myProject.getModelAccess().runReadAction(new Runnable() {
          public void run() {
            checkListener.value = new CheckTestStateListener(success, failure);
            runState.addListener(checkListener.value);
          }
        });
        process.addProcessListener(new UnitTestProcessListener(runState));
        int exitcode = ProcessHandlerBuilder.startAndWait(process, 30 * 1000);
        if (exitcode != ListSequence.fromList(failure).count()) {
          Assert.fail("Exit code must be equal to " + ListSequence.fromList(failure).count() + ", not to " + exitcode);
        } else if (exitcode < 0) {
          Assert.fail("Process is running for too long");
        }
        if (!(checkListener.value.getMessages().equals(""))) {
          Assert.fail(checkListener.value.getMessages());
        }
      } catch (ExecutionException e) {
        Assert.fail(e.getMessage());
      }
    }
  }
}
