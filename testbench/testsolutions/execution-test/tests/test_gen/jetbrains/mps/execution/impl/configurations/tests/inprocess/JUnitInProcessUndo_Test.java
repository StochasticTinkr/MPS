package jetbrains.mps.execution.impl.configurations.tests.inprocess;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.smodel.ModelAccessHelper;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.execution.impl.configurations.util.JUnitUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import java.util.List;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestRunState;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestEventsDispatcher;
import jetbrains.mps.execution.configurations.implementation.plugin.plugin.Executor;
import jetbrains.mps.execution.configurations.implementation.plugin.plugin.JUnitLightExecutor;
import com.intellij.execution.process.ProcessHandler;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.execution.impl.configurations.tests.commands.CheckTestStateListener;
import jetbrains.mps.execution.api.commands.OutputRedirector;
import jetbrains.mps.baseLanguage.unitTest.execution.client.UnitTestProcessListener;
import jetbrains.mps.execution.api.commands.ProcessHandlerBuilder;
import junit.framework.Assert;
import com.intellij.execution.ExecutionException;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

@MPSLaunch
public class JUnitInProcessUndo_Test extends BaseTransformationTest {
  @Test
  public void test_startTrickyTestCase() throws Throwable {
    initTest("${mps_home}", "r:ff98d12f-bc65-4639-94c3-dee022b33791(jetbrains.mps.execution.impl.configurations.tests.inprocess@tests)", false);
    runTest("jetbrains.mps.execution.impl.configurations.tests.inprocess.JUnitInProcessUndo_Test$TestBody", "test_startTrickyTestCase", false);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_startTrickyTestCase() throws Exception {
      String testName = new ModelAccessHelper(myProject.getModelAccess()).runReadAction(new Computable<String>() {
        public String compute() {
          return SNodeOperations.getNode("r:914ee49a-537d-44b2-a5fb-bac87a54743d(jetbrains.mps.editorTest@tests)", "4177017564823046256").getName();
        }
      });
      this.checkTests(JUnitUtil.wrapTests(this.getMyModel(), Sequence.<String>singleton(testName)), ListSequence.fromList(new ArrayList<ITestNodeWrapper>()));
    }


    public SModel getMyModel() {
      return new ModuleRepositoryFacade(myProject.getRepository()).getModelByName("jetbrains.mps.editorTest@tests");
    }
    public void checkTests(final List<ITestNodeWrapper> success, final List<ITestNodeWrapper> failure) {
      try {
        List<ITestNodeWrapper> testNodes = ListSequence.fromList(success).union(ListSequence.fromList(failure)).toListSequence();
        final TestRunState runState = new TestRunState(testNodes);
        TestEventsDispatcher eventsDispatcher = new TestEventsDispatcher(runState);

        Executor processExecutor;
        processExecutor = new JUnitLightExecutor(testNodes, eventsDispatcher);
        if (LOG.isInfoEnabled()) {
          LOG.info("Starting in-process-execution");
        }
        ProcessHandler process = processExecutor.execute();
        final Wrappers._T<CheckTestStateListener> checkListener = new Wrappers._T<CheckTestStateListener>();
        myProject.getModelAccess().runReadAction(new Runnable() {
          public void run() {
            checkListener.value = new CheckTestStateListener(success, failure);
            runState.addListener(checkListener.value);
          }
        });
        OutputRedirector.redirect(process, new UnitTestProcessListener(eventsDispatcher));
        int exitcode = ProcessHandlerBuilder.startAndWait(process, 30 * 1000);
        if (exitcode != ListSequence.fromList(failure).count()) {
          Assert.fail("Exit code must be equal to " + ListSequence.fromList(failure).count() + ", but " + exitcode);
        } else if (exitcode < 0) {
          Assert.fail("Process is running for too long");
        }
        if (!(checkListener.value.getMessages().equals(""))) {
          Assert.fail(checkListener.value.getMessages());
        }
      } catch (ExecutionException e) {
        Assert.fail(e.getMessage());
      }
    }
  }
  protected static Logger LOG = LogManager.getLogger(JUnitInProcessUndo_Test.class);
}
