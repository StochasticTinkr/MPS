package jetbrains.mps.lang.editor.menus.contextAssistant.tests;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseEditorTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import javax.swing.SwingUtilities;
import jetbrains.mps.openapi.editor.assist.ContextAssistantManager;
import java.util.Set;
import jetbrains.mps.nodeEditor.EditorCell_WithComponent;
import junit.framework.Assert;
import jetbrains.mps.internal.collections.runtime.SetSequence;

@MPSLaunch
public class ContextAssistant_InitiallyCollapsedVisibility_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(ContextAssistant_InitiallyCollapsedVisibility_Test.class, "${mps_home}", "r:5a4d10fc-2567-46c5-982f-547e9102417b(jetbrains.mps.lang.editor.menus.contextAssistant.tests@tests)", false);

  public ContextAssistant_InitiallyCollapsedVisibility_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_ContextAssistant_InitiallyCollapsedVisibility() throws Throwable {
    new ContextAssistant_InitiallyCollapsedVisibility_Test.TestBody(this).testMethod();
  }

  /*package*/ static class TestBody extends BaseEditorTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    @Override
    public void testMethodImpl() throws Exception {
      initEditorComponent("379023083996637842", "");
      SwingUtilities.invokeAndWait(new Runnable() {
        public void run() {
          ContextAssistantManager contextAssistantManager = getEditorComponent().getEditorContext().getContextAssistantManager();
          contextAssistantManager.updateImmediately();
          Set<EditorCell_WithComponent> componentCells = getEditorComponent().getCellTracker().getComponentCells();
          Assert.assertFalse(componentCells.isEmpty());
          for (EditorCell_WithComponent cell : SetSequence.fromSet(componentCells)) {
            Assert.assertFalse(cell.getComponent().isVisible());
          }
        }
      });
    }
  }
}
