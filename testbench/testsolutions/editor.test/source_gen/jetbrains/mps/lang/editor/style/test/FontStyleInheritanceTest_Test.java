package jetbrains.mps.lang.editor.style.test;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseEditorTestBody;
import jetbrains.mps.smodel.ModelAccess;
import junit.framework.Assert;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.editor.runtime.style.StyleAttributes;

@MPSLaunch
public class FontStyleInheritanceTest_Test extends BaseTransformationTest {
  @Test
  public void test_FontStyleInheritanceTest() throws Throwable {
    initTest("${mps_home}", "r:e796bc79-24a8-4433-8903-c71c59526bf7(jetbrains.mps.lang.editor.style.test)");
    runTest("jetbrains.mps.lang.editor.style.test.FontStyleInheritanceTest_Test$TestBody", "testMethod", false);
  }

  @MPSLaunch
  public static class TestBody extends BaseEditorTestBody {
    @Override
    public void testMethodImpl() throws Exception {
      initEditorComponent("8545423393708629228", "");
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          Assert.assertEquals("Serif", getEditorComponent().findNodeCell(SNodeOperations.cast(getNodeById("8545423393708669280"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, "jetbrains.mps.lang.editor.styleTests"), 0x38990895c164873aL, "LeafNode")))).getStyle().get(StyleAttributes.FONT_FAMILY));
          Assert.assertEquals(50, (int) getEditorComponent().findNodeCell(SNodeOperations.cast(getNodeById("8545423393708669280"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, "jetbrains.mps.lang.editor.styleTests"), 0x38990895c164873aL, "LeafNode")))).getStyle().get(StyleAttributes.FONT_SIZE));

          Assert.assertEquals("Serif", getEditorComponent().findNodeCell(SNodeOperations.cast(getNodeById("8545423393708641683"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, "jetbrains.mps.lang.editor.styleTests"), 0x38990895c164873aL, "LeafNode")))).getStyle().get(StyleAttributes.FONT_FAMILY));
          Assert.assertEquals(30, (int) getEditorComponent().findNodeCell(SNodeOperations.cast(getNodeById("8545423393708641683"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, "jetbrains.mps.lang.editor.styleTests"), 0x38990895c164873aL, "LeafNode")))).getStyle().get(StyleAttributes.FONT_SIZE));

          Assert.assertEquals("SansSerif", getEditorComponent().findNodeCell(SNodeOperations.cast(getNodeById("8545423393708745749"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, "jetbrains.mps.lang.editor.styleTests"), 0x38990895c164873aL, "LeafNode")))).getStyle().get(StyleAttributes.FONT_FAMILY));
          Assert.assertEquals(25, (int) getEditorComponent().findNodeCell(SNodeOperations.cast(getNodeById("8545423393708745749"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, "jetbrains.mps.lang.editor.styleTests"), 0x38990895c164873aL, "LeafNode")))).getStyle().get(StyleAttributes.FONT_SIZE));
        }
      });
    }
  }
}
