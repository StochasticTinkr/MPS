package jetbrains.mps.lang.editor.menus.extras.tests;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseEditorTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.refactoring.framework.IRefactoring;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.nodeEditor.menus.transformation.DefaultTransformationMenuContext;
import jetbrains.mps.openapi.editor.menus.transformation.ActionItem;
import jetbrains.mps.lang.editor.menus.extras.runtime.RefactoringMenuItemBase;
import junit.framework.Assert;

@MPSLaunch
public class RefactoringMenuItemBase_InapplicableRefactoring_CannotExecute_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(RefactoringMenuItemBase_InapplicableRefactoring_CannotExecute_Test.class, "${mps_home}", "r:a1e8c439-e997-416b-a5dc-df7c3fd41b00(jetbrains.mps.lang.editor.menus.extras.tests@tests)", false);

  public RefactoringMenuItemBase_InapplicableRefactoring_CannotExecute_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_RefactoringMenuItemBase_InapplicableRefactoring_CannotExecute() throws Throwable {
    new RefactoringMenuItemBase_InapplicableRefactoring_CannotExecute_Test.TestBody(this).testMethod();
  }

  /*package*/ static class TestBody extends BaseEditorTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    @Override
    public void testMethodImpl() throws Exception {
      initEditorComponent("6820996345400829105", "");
      final SRepository repository = getEditorComponent().getEditorContext().getRepository();

      repository.getModelAccess().runReadAction(new Runnable() {
        public void run() {
          IRefactoring refactoring = ActionLookupUtils.getRefactoring(repository, new SNodePointer("r:2f49f947-e2b6-4dd2-87ae-7938deb42899(jetbrains.mps.lang.editor.menus.extras.testLanguage.refactorings)", "121597702824488195"));

          DefaultTransformationMenuContext context = DefaultTransformationMenuContext.createInitialContextForCell(getEditorComponent().getSelectedCell(), "irrelevant location");

          ActionItem item = new RefactoringMenuItemBase(context, refactoring);
          Assert.assertFalse(item.canExecute("irrelevant pattern"));
        }
      });
    }
  }
}
