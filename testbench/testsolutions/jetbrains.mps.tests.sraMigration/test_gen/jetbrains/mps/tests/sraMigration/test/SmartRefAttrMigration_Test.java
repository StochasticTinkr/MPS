package jetbrains.mps.tests.sraMigration.test;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.testbench.EnvironmentAwareTestCase;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.model.SNode;
import junit.framework.Assert;
import jetbrains.mps.lang.structure.util.SmartRefAttributeUtil;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.test.matcher.NodesMatcher;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.io.File;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.util.Reference;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.application.ModalityState;
import jetbrains.mps.smodel.SModelUtil_new;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

@MPSLaunch
public class SmartRefAttrMigration_Test extends EnvironmentAwareTestCase {
  private static final SModelReference modelref_editor = modelref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)");
  private static final SNodeReference ref_implicitAttr = ref("r:a989c2aa-03d7-4022-aa05-1be538539c8e(test.language.structure)/7273969254452446730");
  private static final SNodeReference ref_explicitAttr_OneCustom = ref("r:a989c2aa-03d7-4022-aa05-1be538539c8e(test.language.structure)/7273969254452446734");
  private static final SNodeReference ref_explicitAttr_OneCustom_characteristicRef = ref("r:a989c2aa-03d7-4022-aa05-1be538539c8e(test.language.structure)/7273969254452446735");
  private static final SNodeReference ref_explicitAttr_OneOfTwo = ref("r:a989c2aa-03d7-4022-aa05-1be538539c8e(test.language.structure)/7273969254452446738");
  private static final SNodeReference ref_explicitAttr_OneOfTwo_characteristicRef = ref("r:a989c2aa-03d7-4022-aa05-1be538539c8e(test.language.structure)/7273969254452446739");
  private static final SNodeReference ref_explicitAttr_OneNoReq = ref("r:a989c2aa-03d7-4022-aa05-1be538539c8e(test.language.structure)/7273969254452446768");
  private static final SNodeReference ref_explicitAttr_OneNoReq_characteristicRef = ref("r:a989c2aa-03d7-4022-aa05-1be538539c8e(test.language.structure)/7273969254452446769");
  private static final SNodeReference ref_explicitAttr_Specialized = ref("r:a989c2aa-03d7-4022-aa05-1be538539c8e(test.language.structure)/3787933655124578220");
  private static final SNodeReference ref_explicitAttr_Specialized_characteristicRef = ref("r:a989c2aa-03d7-4022-aa05-1be538539c8e(test.language.structure)/3787933655124578224");
  private static final SNodeReference ref_explicitMenu_Direct = ref("r:a989c2aa-03d7-4022-aa05-1be538539c8e(test.language.structure)/7273969254452446772");
  private static final SNodeReference ref_explicitMenu_Super = ref("r:a989c2aa-03d7-4022-aa05-1be538539c8e(test.language.structure)/7273969254452476935");
  private static final SNodeReference ref_explicitMenu_HasVisible = ref("r:a989c2aa-03d7-4022-aa05-1be538539c8e(test.language.structure)/3787933655125350636");
  private static final SNodeReference ref_explicitMenu_SCAUsage = ref("r:a989c2aa-03d7-4022-aa05-1be538539c8e(test.language.structure)/44712766210641587");
  private static final SNodeReference ref_explicitMenu_SCAUsage_usage = ref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)/44712766210641656");
  private static final SNodeReference ref_explicitMenu_SCAUsage_Ext = ref("r:a989c2aa-03d7-4022-aa05-1be538539c8e(test.language.structure)/44712766211104382");
  private static final SNodeReference ref_explicitMenu_SCAUsage_Ext_usage = ref("r:d166d7a3-9b9c-45fc-8d55-d3ca57bcda5b(test.language.ext.editor)/44712766211104412");
  private static final SNodeReference ref_explicitCellMenu_RefCell = ref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)/44712766211611496");
  private static final SNodeReference ref_explicitCellMenu_ExplicitReferentPrimary_RefCell = ref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)/44712766211611496");
  private static final SNodeReference ref_explicitCellMenu_RefPresentation_RefCell = ref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)/44712766211671977");
  private static final SNodeReference ref_explicitCellMenu_RefPresentation_RPCell = ref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)/44712766211671979");
  private static final SNodeReference ref_explicitCellMenu_RefPresentation_Custom_RefCell = ref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)/44712766211670318");
  private static final SNodeReference ref_explicitCellMenu_RefPresentation_Custom_RPCell = ref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)/44712766211670320");
  private static final SNodeReference ref_explicitCellMenu_HasInEditor_RefPresentation_RefCell = ref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)/44712766211668085");
  private static final SNodeReference ref_explicitCellMenu_HasInEditor_RefPresentation_RPCell = ref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)/44712766211668094");
  private static final SNodeReference ref_explicitCellMenu_HasInEditor_RefPresentation_Custom_RefCell = ref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)/44712766211671981");
  private static final SNodeReference ref_explicitCellMenu_HasInEditor_RefPresentation_Custom_RPCell = ref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)/44712766211671985");
  private static final SNodeReference ref_explicitCellMenu_HasVisible_RefCell = ref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)/44712766211671991");
  private static final SNodeReference ref_explicitCellMenu_HasVisible_RefPresentation_RefCell = ref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)/44712766211671999");
  private static final SNodeReference ref_explicitCellMenu_HasVisible_RefPresentation_RPCell = ref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)/44712766211672001");
  private static final SNodeReference ref_explicitCellMenu_Super_RPCell = ref("r:aeb637c7-e64d-4368-92d6-31aeade23002(test.language.editor)/44712766211689888");
  private static final String PROJECT_PATH = "testbench/modules/testSmartRefAttrMigration/";
  private MPSProject project;
  public void test_testImplicitAttr() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {
        SNode node_implicitAttr = resolveCD(ref_implicitAttr);

        Assert.assertTrue(SmartRefAttributeUtil.isAttributedImplicitly(node_implicitAttr));
      }
    });
  }
  public void test_testExplicitAttr_OneCustom() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {
        SNode node_explicitAttr_OneCustom = resolveCD(ref_explicitAttr_OneCustom);

        {
          List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), AttributeOperations.getAttribute(node_explicitAttr_OneCustom, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x7ab7b29c4d6297e8L, "jetbrains.mps.lang.structure.structure.SmartReferenceAttribute"))));
          List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), _quotation_createNode_m5qb0v_a0a0b0c0a0a0b0(resolveLD(ref_explicitAttr_OneCustom_characteristicRef)));
          Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
        }
      }
    });
  }
  public void test_testExpicitAttr_OneOfTwo() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {
        SNode node_explicitAttr_OneOfTwo = resolveCD(ref_explicitAttr_OneOfTwo);

        {
          List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), AttributeOperations.getAttribute(node_explicitAttr_OneOfTwo, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x7ab7b29c4d6297e8L, "jetbrains.mps.lang.structure.structure.SmartReferenceAttribute"))));
          List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), _quotation_createNode_m5qb0v_a0a0b0c0a0a0c0(resolveLD(ref_explicitAttr_OneOfTwo_characteristicRef)));
          Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
        }
      }
    });
  }
  public void test_testExpicitAttr_OneNoReq() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {
        SNode node_explicitAttr_OneNoReq = resolveCD(ref_explicitAttr_OneNoReq);

        {
          List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), AttributeOperations.getAttribute(node_explicitAttr_OneNoReq, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x7ab7b29c4d6297e8L, "jetbrains.mps.lang.structure.structure.SmartReferenceAttribute"))));
          List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), _quotation_createNode_m5qb0v_a0a0b0c0a0a0d0(resolveLD(ref_explicitAttr_OneNoReq_characteristicRef)));
          Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
        }
      }
    });
  }
  public void test_testExpicitAttr_Specialized() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {
        SNode node_explicitAttr_Specialized = resolveCD(ref_explicitAttr_Specialized);

        {
          List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), AttributeOperations.getAttribute(node_explicitAttr_Specialized, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x7ab7b29c4d6297e8L, "jetbrains.mps.lang.structure.structure.SmartReferenceAttribute"))));
          List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), _quotation_createNode_m5qb0v_a0a0b0c0a0a0e0(resolveLD(ref_explicitAttr_Specialized_characteristicRef)));
          Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
        }
      }
    });
  }
  public void test_testExplicitMenu_Direct() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {


        SNode explicitMenu_Direct = findGeneratedSMN(modelref_editor, ref_explicitMenu_Direct);
        Assert.assertNotNull(explicitMenu_Direct);
        SNode menuPart = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(explicitMenu_Direct, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1bc2c2df999a7727L, 0x5c03050cab44f64L, "parts"))).first(), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x74f6a88f89419d55L, "jetbrains.mps.lang.editor.structure.SubstituteMenuPart_ReferenceScope"));

        Assert.assertNotNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x74f6a88f89419d55L, 0x3bc83bac473451e5L, "matchingTextFunction")));
        Assert.assertNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x74f6a88f89419d55L, 0x1006e157e5b21db8L, "visibleMatchingTextFunction")));

        SNode defaultMenu = findSMD(modelref_editor, ref_explicitMenu_Direct);

        {
          List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), defaultMenu);
          List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), _quotation_createNode_m5qb0v_a0a0b0l0a0a0f0(resolveCD(ref_explicitMenu_Direct), explicitMenu_Direct));
          Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
        }
      }
    });
  }
  public void test_testExplicitMenu_Super() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {

        SNode explicitMenu_Super = findGeneratedSMN(modelref_editor, ref_explicitMenu_Super);
        Assert.assertNotNull(explicitMenu_Super);
        SNode menuPart = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(explicitMenu_Super, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1bc2c2df999a7727L, 0x5c03050cab44f64L, "parts"))).first(), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x74f6a88f89419d55L, "jetbrains.mps.lang.editor.structure.SubstituteMenuPart_ReferenceScope"));

        Assert.assertNotNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x74f6a88f89419d55L, 0x3bc83bac473451e5L, "matchingTextFunction")));
        Assert.assertNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x74f6a88f89419d55L, 0x1006e157e5b21db8L, "visibleMatchingTextFunction")));
      }
    });
  }
  public void test_testExplicitMenu_HasVisible() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {

        SNode explicitMenu_HasVisible = findGeneratedSMN(modelref_editor, ref_explicitMenu_HasVisible);
        Assert.assertNotNull(explicitMenu_HasVisible);
        SNode menuPart = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(explicitMenu_HasVisible, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1bc2c2df999a7727L, 0x5c03050cab44f64L, "parts"))).first(), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x74f6a88f89419d55L, "jetbrains.mps.lang.editor.structure.SubstituteMenuPart_ReferenceScope"));

        Assert.assertNotNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x74f6a88f89419d55L, 0x3bc83bac473451e5L, "matchingTextFunction")));
        Assert.assertNotNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x74f6a88f89419d55L, 0x1006e157e5b21db8L, "visibleMatchingTextFunction")));
      }
    });
  }
  public void test_testExplicitMenu_SCAUsage() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {

        SNode explicitMenu_SCAUsage = findGeneratedSMN(modelref_editor, ref_explicitMenu_SCAUsage);
        Assert.assertNotNull(explicitMenu_SCAUsage);
        SNode menuPart = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(explicitMenu_SCAUsage, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1bc2c2df999a7727L, 0x5c03050cab44f64L, "parts"))).first(), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x74f6a88f89419d55L, "jetbrains.mps.lang.editor.structure.SubstituteMenuPart_ReferenceScope"));

        Assert.assertNotNull(menuPart);

        SNode usage = resolveSMN(ref_explicitMenu_SCAUsage_usage);

        {
          List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), ListSequence.fromList(SLinkOperations.getChildren(usage, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1bc2c2df999a7727L, 0x5c03050cab44f64L, "parts"))).first());
          List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), _quotation_createNode_m5qb0v_a0a0b0j0a0a0i0(explicitMenu_SCAUsage));
          Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
        }
      }
    });
  }
  public void test_testExplicitMenu_SCAUsage_Ext() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {

        SNode explicitMenu_SCAUsage_Ext = findGeneratedSMN(modelref_editor, ref_explicitMenu_SCAUsage_Ext);
        Assert.assertNotNull(explicitMenu_SCAUsage_Ext);
        SNode menuPart = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(explicitMenu_SCAUsage_Ext, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1bc2c2df999a7727L, 0x5c03050cab44f64L, "parts"))).first(), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x74f6a88f89419d55L, "jetbrains.mps.lang.editor.structure.SubstituteMenuPart_ReferenceScope"));

        Assert.assertNotNull(menuPart);

        SNode usage = resolveSMN(ref_explicitMenu_SCAUsage_Ext_usage);

        {
          List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), ListSequence.fromList(SLinkOperations.getChildren(usage, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1bc2c2df999a7727L, 0x5c03050cab44f64L, "parts"))).first());
          List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), _quotation_createNode_m5qb0v_a0a0b0j0a0a0j0(explicitMenu_SCAUsage_Ext));
          Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
        }
      }
    });
  }
  public void test_testExplicitCellMenu() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {

        SNode refCell = resolveCMRef(ref_explicitCellMenu_RefCell);

        SNode menuPart = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(refCell, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L, 0x10f3514bb7cL, "menuDescriptor")), MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f34f6aaacL, 0x10f34f82910L, "cellMenuPart"))).getElement(0), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, "jetbrains.mps.lang.editor.structure.CellMenuPart_ReferentPrimary"));
        Assert.assertNotNull(menuPart);
        Assert.assertNotNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, 0x6001c76613d86514L, "matchingText")));
        Assert.assertNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, 0x5c3ee006520dfad6L, "visibleMatchingText")));
      }
    });
  }
  public void test_testExplicitCellMenu_ExplicitReferentPrimary() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {

        SNode refCell = resolveCMRef(ref_explicitCellMenu_ExplicitReferentPrimary_RefCell);

        SNode menuPart = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(refCell, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L, 0x10f3514bb7cL, "menuDescriptor")), MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f34f6aaacL, 0x10f34f82910L, "cellMenuPart"))).getElement(0), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, "jetbrains.mps.lang.editor.structure.CellMenuPart_ReferentPrimary"));
        Assert.assertNotNull(menuPart);
        Assert.assertNotNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, 0x6001c76613d86514L, "matchingText")));
        Assert.assertNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, 0x5c3ee006520dfad6L, "visibleMatchingText")));
      }
    });
  }
  public void test_testExplicitCellMenu_RefPresentation() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {

        SNode refCell = resolveCMRef(ref_explicitCellMenu_RefPresentation_RefCell);
        SNode rpCell = resolveCMRP(ref_explicitCellMenu_RefPresentation_RPCell);

        Assert.assertNull(SLinkOperations.getTarget(refCell, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L, 0x10f3514bb7cL, "menuDescriptor")));
        Assert.assertNotNull(SLinkOperations.getTarget(rpCell, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x8ace515f0191e6eL, 0x6c035fefdf050085L, "referentPresentation")));
      }
    });
  }
  public void test_testExplicitCellMenu_RefPresentation_Custom() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {

        SNode refCell = resolveCMRef(ref_explicitCellMenu_RefPresentation_Custom_RefCell);
        SNode rpCell = resolveCMRP(ref_explicitCellMenu_RefPresentation_Custom_RPCell);

        SNode menuPart = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(refCell, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L, 0x10f3514bb7cL, "menuDescriptor")), MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f34f6aaacL, 0x10f34f82910L, "cellMenuPart"))).getElement(0), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, "jetbrains.mps.lang.editor.structure.CellMenuPart_ReferentPrimary"));
        Assert.assertNotNull(menuPart);
        Assert.assertNotNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, 0x6001c76613d86514L, "matchingText")));
        Assert.assertNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, 0x5c3ee006520dfad6L, "visibleMatchingText")));

        Assert.assertNotNull(SLinkOperations.getTarget(rpCell, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x8ace515f0191e6eL, 0x6c035fefdf050085L, "referentPresentation")));
      }
    });
  }
  public void test_testExplicitCellMenu_HasVisible() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {

        SNode refCell = resolveCMRef(ref_explicitCellMenu_HasVisible_RefCell);

        SNode menuPart = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(refCell, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L, 0x10f3514bb7cL, "menuDescriptor")), MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f34f6aaacL, 0x10f34f82910L, "cellMenuPart"))).getElement(0), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, "jetbrains.mps.lang.editor.structure.CellMenuPart_ReferentPrimary"));
        Assert.assertNotNull(menuPart);
        Assert.assertNotNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, 0x6001c76613d86514L, "matchingText")));
        Assert.assertNotNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, 0x5c3ee006520dfad6L, "visibleMatchingText")));
      }
    });
  }
  public void test_testExplicitCellMenu_HasVisible_RefPresentation() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {

        SNode refCell = resolveCMRef(ref_explicitCellMenu_HasVisible_RefPresentation_RefCell);
        SNode rpCell = resolveCMRP(ref_explicitCellMenu_HasVisible_RefPresentation_RPCell);

        SNode menuPart = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(refCell, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L, 0x10f3514bb7cL, "menuDescriptor")), MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f34f6aaacL, 0x10f34f82910L, "cellMenuPart"))).getElement(0), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, "jetbrains.mps.lang.editor.structure.CellMenuPart_ReferentPrimary"));
        Assert.assertNotNull(menuPart);
        Assert.assertNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, 0x6001c76613d86514L, "matchingText")));
        Assert.assertNotNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, 0x5c3ee006520dfad6L, "visibleMatchingText")));

        Assert.assertNotNull(SLinkOperations.getTarget(rpCell, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x8ace515f0191e6eL, 0x6c035fefdf050085L, "referentPresentation")));
      }
    });
  }
  public void test_testExplicitCellMenu_HasInEditor_RefPresentation() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {

        SNode refCell = resolveCMRef(ref_explicitCellMenu_HasInEditor_RefPresentation_RefCell);
        SNode rpCell = resolveCMRP(ref_explicitCellMenu_HasInEditor_RefPresentation_RPCell);

        SNode menuPart = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(refCell, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L, 0x10f3514bb7cL, "menuDescriptor")), MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f34f6aaacL, 0x10f34f82910L, "cellMenuPart"))).getElement(0), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, "jetbrains.mps.lang.editor.structure.CellMenuPart_ReferentPrimary"));
        Assert.assertNotNull(menuPart);
        Assert.assertNotNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, 0x6001c76613d86514L, "matchingText")));
        Assert.assertNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, 0x5c3ee006520dfad6L, "visibleMatchingText")));

        Assert.assertNotNull(SLinkOperations.getTarget(rpCell, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x8ace515f0191e6eL, 0x6c035fefdf050085L, "referentPresentation")));
      }
    });
  }
  public void test_testExplicitCellMenu_HasInEditor_RefPresentation_Custom() throws Exception {
    executeUnderLock(new Runnable() {
      public void run() {

        SNode refCell = resolveCMRef(ref_explicitCellMenu_HasInEditor_RefPresentation_Custom_RefCell);
        SNode rpCell = resolveCMRP(ref_explicitCellMenu_HasInEditor_RefPresentation_Custom_RPCell);

        SNode menuPart = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(refCell, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L, 0x10f3514bb7cL, "menuDescriptor")), MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f34f6aaacL, 0x10f34f82910L, "cellMenuPart"))).getElement(0), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, "jetbrains.mps.lang.editor.structure.CellMenuPart_ReferentPrimary"));
        Assert.assertNotNull(menuPart);
        Assert.assertNotNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, 0x6001c76613d86514L, "matchingText")));
        Assert.assertNull(SLinkOperations.getTarget(menuPart, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL, 0x5c3ee006520dfad6L, "visibleMatchingText")));

        Assert.assertNotNull(SLinkOperations.getTarget(rpCell, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x8ace515f0191e6eL, 0x6c035fefdf050085L, "referentPresentation")));
      }
    });
  }
  public void setUp() {
    // I don't care to close the project (a) can do it on per-test basis in BTestCase (no BeforeClass), (b) there are too many tests in this class  
    //   (c) PushEnvironmentRunnerBuilder is not yet capable to invoke static setEnvironment (so that we could have static project field 
    //   (d) this test is executed from separate process (mpsSmartRefAttrMigration.xml) and nobody gets affected with the project left open. 
    project = ((MPSProject) myEnvironment.openProject(new File(PROJECT_PATH)));
  }

  private static SNodeReference ref(String str) {
    return PersistenceFacade.getInstance().createNodeReference(str);
  }

  private static SModelReference modelref(String str) {
    return PersistenceFacade.getInstance().createModelReference(str);
  }


  private SNode resolveCD(SNodeReference ref) {
    return (SNode) ref.resolve(project.getRepository());
  }

  private SNode resolveLD(SNodeReference ref) {
    return (SNode) ref.resolve(project.getRepository());
  }

  private SNode resolveSMN(SNodeReference ref) {
    return (SNode) ref.resolve(project.getRepository());
  }

  private SNode resolveCMRef(SNodeReference ref) {
    return (SNode) ref.resolve(project.getRepository());
  }

  private SNode resolveCMRP(SNodeReference ref) {
    return (SNode) ref.resolve(project.getRepository());
  }

  private SNode findGeneratedSMN(SModelReference modelRef, SNodeReference conceptRef) {
    final SNode concept = resolveCD(conceptRef);
    SModel model = modelRef.resolve(project.getRepository());
    return ListSequence.fromList(SModelOperations.roots(model, MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x33e0267905fba6fdL, "jetbrains.mps.lang.editor.structure.SubstituteMenu_Named"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1d5b104bd5525fa7L, "jetbrains.mps.lang.editor.structure.GeneratedSubstituteMenuAttribute"))) != null) && SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x169efbc9a9048c53L, 0x5b7b4c4d511049b4L, "conceptDeclaration")) == concept;
      }
    }).first();
  }

  private SNode findSMD(SModelReference modelRef, SNodeReference conceptRef) {
    final SNode concept = resolveCD(conceptRef);
    SModel model = modelRef.resolve(project.getRepository());
    return ListSequence.fromList(SModelOperations.roots(model, MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x2de9c932f4e5ab84L, "jetbrains.mps.lang.editor.structure.SubstituteMenu_Default"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x169efbc9a9048c53L, 0x5b7b4c4d511049b4L, "conceptDeclaration")) == concept;
      }
    }).first();
  }























  public void executeUnderLock(final Runnable runnable) {
    final Reference<Throwable> ref = new Reference<Throwable>();
    ApplicationManager.getApplication().invokeAndWait(new Runnable() {
      public void run() {
        project.getModelAccess().executeCommand(new Runnable() {
          public void run() {
            try {
              runnable.run();
            } catch (Throwable t) {
              ref.set(t);
            }

          }
        });
      }
    }, ModalityState.defaultModalityState());
    if (!(ref.isNull())) {
      throw new RuntimeException(ref.get());
    }
  }

  private static SNode _quotation_createNode_m5qb0v_a0a0b0c0a0a0b0(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, "jetbrains.mps.lang.structure"), 0x7ab7b29c4d6297e8L, "SmartReferenceAttribute"), null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x7ab7b29c4d6297e8L, 0x7ab7b29c4d6297edL, "charactersticReference"), (SNode) parameter_1);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, "jetbrains.mps.lang.structure"), 0x7ab7b29c4d66855eL, "RefPresentationTemplate"), null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_3, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x7ab7b29c4d66855eL, 0x3bc83bac475c4b59L, "prefix"), "custom ref [ ");
    SNodeAccessUtil.setProperty(quotedNode_3, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x7ab7b29c4d66855eL, 0x3bc83bac475c4b5cL, "suffix"), " ]");
    quotedNode_2.addChild(MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x7ab7b29c4d6297e8L, 0x7ab7b29c4d66ac37L, "refPresentationTemplate"), quotedNode_3);
    return quotedNode_2;
  }
  private static SNode _quotation_createNode_m5qb0v_a0a0b0c0a0a0c0(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, "jetbrains.mps.lang.structure"), 0x7ab7b29c4d6297e8L, "SmartReferenceAttribute"), null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x7ab7b29c4d6297e8L, 0x7ab7b29c4d6297edL, "charactersticReference"), (SNode) parameter_1);
    return quotedNode_2;
  }
  private static SNode _quotation_createNode_m5qb0v_a0a0b0c0a0a0d0(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, "jetbrains.mps.lang.structure"), 0x7ab7b29c4d6297e8L, "SmartReferenceAttribute"), null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x7ab7b29c4d6297e8L, 0x7ab7b29c4d6297edL, "charactersticReference"), (SNode) parameter_1);
    return quotedNode_2;
  }
  private static SNode _quotation_createNode_m5qb0v_a0a0b0c0a0a0e0(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, "jetbrains.mps.lang.structure"), 0x7ab7b29c4d6297e8L, "SmartReferenceAttribute"), null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_2, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x7ab7b29c4d6297e8L, 0x7ab7b29c4d6297edL, "charactersticReference"), (SNode) parameter_1);
    return quotedNode_2;
  }
  private static SNode _quotation_createNode_m5qb0v_a0a0b0l0a0a0f0(Object parameter_1, Object parameter_2) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    SNode quotedNode_5 = null;
    SNode quotedNode_6 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, "jetbrains.mps.lang.editor"), 0x2de9c932f4e5ab84L, "SubstituteMenu_Default"), null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_3, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x115eca8579fL, "virtualPackage"), "explicit_menu");
    SNodeAccessUtil.setReferenceTarget(quotedNode_3, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x169efbc9a9048c53L, 0x5b7b4c4d511049b4L, "conceptDeclaration"), (SNode) parameter_1);
    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, "jetbrains.mps.lang.editor"), 0xa22200b56b57990L, "SubstituteMenuPart_IncludeMenu"), null, null, false);
    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, "jetbrains.mps.lang.editor"), 0x5480a271c0d1df1fL, "SubstituteMenuReference_Named"), null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_6, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x5480a271c0d1df1fL, 0x5480a271c0d2a27eL, "menu"), (SNode) parameter_2);
    quotedNode_4.addChild(MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xa22200b56b57990L, 0xa22200b56b57993L, "menuReference"), quotedNode_6);
    quotedNode_3.addChild(MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1bc2c2df999a7727L, 0x5c03050cab44f64L, "parts"), quotedNode_4);
    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, "jetbrains.mps.lang.editor"), 0x88a6ffdb3b4f8c6L, "SubstituteMenuPart_Subconcepts"), null, null, false);
    quotedNode_3.addChild(MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1bc2c2df999a7727L, 0x5c03050cab44f64L, "parts"), quotedNode_5);
    return quotedNode_3;
  }
  private static SNode _quotation_createNode_m5qb0v_a0a0b0j0a0a0i0(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, "jetbrains.mps.lang.editor"), 0xa22200b56b57990L, "SubstituteMenuPart_IncludeMenu"), null, null, false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, "jetbrains.mps.lang.editor"), 0x5480a271c0d1df1fL, "SubstituteMenuReference_Named"), null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_3, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x5480a271c0d1df1fL, 0x5480a271c0d2a27eL, "menu"), (SNode) parameter_1);
    quotedNode_2.addChild(MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xa22200b56b57990L, 0xa22200b56b57993L, "menuReference"), quotedNode_3);
    return quotedNode_2;
  }
  private static SNode _quotation_createNode_m5qb0v_a0a0b0j0a0a0j0(Object parameter_1) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_2 = null;
    SNode quotedNode_3 = null;
    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, "jetbrains.mps.lang.editor"), 0xa22200b56b57990L, "SubstituteMenuPart_IncludeMenu"), null, null, false);
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, "jetbrains.mps.lang.editor"), 0x5480a271c0d1df1fL, "SubstituteMenuReference_Named"), null, null, false);
    SNodeAccessUtil.setReferenceTarget(quotedNode_3, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x5480a271c0d1df1fL, 0x5480a271c0d2a27eL, "menu"), (SNode) parameter_1);
    quotedNode_2.addChild(MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xa22200b56b57990L, 0xa22200b56b57993L, "menuReference"), quotedNode_3);
    return quotedNode_2;
  }
}
