package jetbrains.mps.lang.editor.styleTests.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_HugePriorityStyle = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LeafNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PriorityStyle = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PriorityStyleCopy = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestConceptWithStyleAttributes = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestInheritedAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestSimpleAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnapplyPriorityStyleCopy = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("a936c42c-cb2c-4d64-a1dc-12986579a998"), "jetbrains.mps.lang.editor.styleTests")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_HugePriorityStyle;
      case 1:
        return props_LeafNode;
      case 2:
        return props_NodeContainer;
      case 3:
        return props_PriorityStyle;
      case 4:
        return props_PriorityStyleCopy;
      case 5:
        return props_TestConceptWithStyleAttributes;
      case 6:
        return props_TestInheritedAttribute;
      case 7:
        return props_TestSimpleAttribute;
      case 8:
        return props_UnapplyPriorityStyleCopy;
    }
    throw new IllegalStateException();
  }
}
