package jetbrains.mps.lang.editor.styleTests.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.editor.runtime.style.AbstractStyleClass;
import jetbrains.mps.editor.runtime.style.StyleAttributes;

public class TestStylesheet_StyleSheet {
  /**
   * 
   * @deprecated Since MPS 3.5 use generated StyleClass
   */
  @Deprecated
  public static void apply_priorityStyle(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    new TestStylesheet_StyleSheet.priorityStyleStyleClass(editorContext, node).apply(style, editorCell);
  }
  /**
   * 
   * @deprecated Since MPS 3.5 use generated StyleClass
   */
  @Deprecated
  public static void apply_priorityStyleCopy(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    new TestStylesheet_StyleSheet.priorityStyleCopyStyleClass(editorContext, node).apply(style, editorCell);
  }
  /**
   * 
   * @deprecated Since MPS 3.5 use generated StyleClass
   */
  @Deprecated
  public static void apply_hugePriorityStyle(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    new TestStylesheet_StyleSheet.hugePriorityStyleStyleClass(editorContext, node).apply(style, editorCell);
  }
  /**
   * 
   * @deprecated Since MPS 3.5 use generated StyleClass
   */
  @Deprecated
  public static void apply_unapplyPriorityStyleCopy(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    new TestStylesheet_StyleSheet.unapplyPriorityStyleCopyStyleClass(editorContext, node).apply(style, editorCell);
  }

  public static class priorityStyleStyleClass extends AbstractStyleClass {
    public priorityStyleStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.getInstance().<String>getAttribute("jetbrains.mps.lang.editor.styleTests", "test-inherited-attribute"), 1, _StyleParameter_QueryFunction_mmtlxs_a0c(getEditorContext(), getNode()));
    }

    private static String _StyleParameter_QueryFunction_mmtlxs_a0c(EditorContext editorContext, SNode node) {
      return "Priority";
    }
  }
  public static class priorityStyleCopyStyleClass extends AbstractStyleClass {
    public priorityStyleCopyStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      new priorityStyleStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    }

  }
  public static class hugePriorityStyleStyleClass extends AbstractStyleClass {
    public hugePriorityStyleStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      style.set(StyleAttributes.getInstance().<String>getAttribute("jetbrains.mps.lang.editor.styleTests", "test-inherited-attribute"), 2, _StyleParameter_QueryFunction_mmtlxs_a0e(getEditorContext(), getNode()));
    }

    private static String _StyleParameter_QueryFunction_mmtlxs_a0e(EditorContext editorContext, SNode node) {
      return "Huge";
    }
  }
  public static class unapplyPriorityStyleCopyStyleClass extends AbstractStyleClass {
    public unapplyPriorityStyleCopyStyleClass(EditorContext editorContext, SNode node) {
      super(editorContext, node);
    }

    @Override
    public void apply(Style style, EditorCell editorCell) {
      new priorityStyleCopyStyleClass(getEditorContext(), getNode()).unapply(style, editorCell);
    }

  }
}
