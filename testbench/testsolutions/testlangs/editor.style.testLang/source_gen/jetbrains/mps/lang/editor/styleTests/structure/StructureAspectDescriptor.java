package jetbrains.mps.lang.editor.styleTests.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(9);
  /*package*/ final ConceptDescriptor myConceptHugePriorityStyle = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.styleTests.structure.HugePriorityStyle", MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x7bc02723c1a36a0aL)).super_("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer").super_(MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL)).parents("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer").parentIds(MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL)).alias("hugePriorityStyle", "").create();
  /*package*/ final ConceptDescriptor myConceptLeafNode = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.styleTests.structure.LeafNode", MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x38990895c164873aL)).super_("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer").super_(MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL)).parents("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer").parentIds(MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL)).alias("leaf", "").create();
  /*package*/ final ConceptDescriptor myConceptNodeContainer = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer", MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x74e28664f05605aeL, "node", MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL), true, true, false)).children(new String[]{"node"}, new boolean[]{true}).abstract_().alias("node container", "").create();
  /*package*/ final ConceptDescriptor myConceptPriorityStyle = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.styleTests.structure.PriorityStyle", MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x7bc02723c1a34c76L)).super_("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer").super_(MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL)).parents("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer").parentIds(MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL)).alias("priorityStyle", "").create();
  /*package*/ final ConceptDescriptor myConceptPriorityStyleCopy = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.styleTests.structure.PriorityStyleCopy", MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x7bc02723c1a3689eL)).super_("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer").super_(MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL)).parents("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer").parentIds(MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL)).alias("priorityStyleCopy", "").create();
  /*package*/ final ConceptDescriptor myConceptTestConceptWithStyleAttributes = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.styleTests.structure.TestConceptWithStyleAttributes", MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x5bb841570e741168L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).create();
  /*package*/ final ConceptDescriptor myConceptTestInheritedAttribute = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.styleTests.structure.TestInheritedAttribute", MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x7bc02723c1a35eddL)).super_("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer").super_(MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL)).parents("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer").parentIds(MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x7bc02723c1a35edeL, "value")).properties("value").alias("test-inherited-attribute", "").create();
  /*package*/ final ConceptDescriptor myConceptTestSimpleAttribute = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.styleTests.structure.TestSimpleAttribute", MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x7bc02723c1a3595dL)).super_("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer").super_(MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL)).parents("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer").parentIds(MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x7bc02723c1a35ed3L, "value")).properties("value").alias("test-simple-attribute", "").create();
  /*package*/ final ConceptDescriptor myConceptUnapplyPriorityStyleCopy = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.styleTests.structure.UnapplyPriorityStyleCopy", MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x7bc02723c1a36a0fL)).super_("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer").super_(MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL)).parents("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer").parentIds(MetaIdFactory.conceptId(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL)).alias("unapplyPriorityStyleCopy", "").create();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptHugePriorityStyle.getId(), 0);
    myIndexMap.put(myConceptLeafNode.getId(), 1);
    myIndexMap.put(myConceptNodeContainer.getId(), 2);
    myIndexMap.put(myConceptPriorityStyle.getId(), 3);
    myIndexMap.put(myConceptPriorityStyleCopy.getId(), 4);
    myIndexMap.put(myConceptTestConceptWithStyleAttributes.getId(), 5);
    myIndexMap.put(myConceptTestInheritedAttribute.getId(), 6);
    myIndexMap.put(myConceptTestSimpleAttribute.getId(), 7);
    myIndexMap.put(myConceptUnapplyPriorityStyleCopy.getId(), 8);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptHugePriorityStyle, myConceptLeafNode, myConceptNodeContainer, myConceptPriorityStyle, myConceptPriorityStyleCopy, myConceptTestConceptWithStyleAttributes, myConceptTestInheritedAttribute, myConceptTestSimpleAttribute, myConceptUnapplyPriorityStyleCopy);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptHugePriorityStyle;
      case 1:
        return myConceptLeafNode;
      case 2:
        return myConceptNodeContainer;
      case 3:
        return myConceptPriorityStyle;
      case 4:
        return myConceptPriorityStyleCopy;
      case 5:
        return myConceptTestConceptWithStyleAttributes;
      case 6:
        return myConceptTestInheritedAttribute;
      case 7:
        return myConceptTestSimpleAttribute;
      case 8:
        return myConceptUnapplyPriorityStyleCopy;
      default:
        throw new IllegalStateException();
    }
  }
}
