package jetbrains.mps.lang.editor.styleTests.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(9);
  /*package*/ final ConceptDescriptor myConceptHugePriorityStyle = createDescriptorForHugePriorityStyle();
  /*package*/ final ConceptDescriptor myConceptLeafNode = createDescriptorForLeafNode();
  /*package*/ final ConceptDescriptor myConceptNodeContainer = createDescriptorForNodeContainer();
  /*package*/ final ConceptDescriptor myConceptPriorityStyle = createDescriptorForPriorityStyle();
  /*package*/ final ConceptDescriptor myConceptPriorityStyleCopy = createDescriptorForPriorityStyleCopy();
  /*package*/ final ConceptDescriptor myConceptTestConceptWithStyleAttributes = createDescriptorForTestConceptWithStyleAttributes();
  /*package*/ final ConceptDescriptor myConceptTestInheritedAttribute = createDescriptorForTestInheritedAttribute();
  /*package*/ final ConceptDescriptor myConceptTestSimpleAttribute = createDescriptorForTestSimpleAttribute();
  /*package*/ final ConceptDescriptor myConceptUnapplyPriorityStyleCopy = createDescriptorForUnapplyPriorityStyleCopy();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptHugePriorityStyle.getId(), 0);
    myIndexMap.put(myConceptLeafNode.getId(), 1);
    myIndexMap.put(myConceptNodeContainer.getId(), 2);
    myIndexMap.put(myConceptPriorityStyle.getId(), 3);
    myIndexMap.put(myConceptPriorityStyleCopy.getId(), 4);
    myIndexMap.put(myConceptTestConceptWithStyleAttributes.getId(), 5);
    myIndexMap.put(myConceptTestInheritedAttribute.getId(), 6);
    myIndexMap.put(myConceptTestSimpleAttribute.getId(), 7);
    myIndexMap.put(myConceptUnapplyPriorityStyleCopy.getId(), 8);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptHugePriorityStyle, myConceptLeafNode, myConceptNodeContainer, myConceptPriorityStyle, myConceptPriorityStyleCopy, myConceptTestConceptWithStyleAttributes, myConceptTestInheritedAttribute, myConceptTestSimpleAttribute, myConceptUnapplyPriorityStyleCopy);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptHugePriorityStyle;
      case 1:
        return myConceptLeafNode;
      case 2:
        return myConceptNodeContainer;
      case 3:
        return myConceptPriorityStyle;
      case 4:
        return myConceptPriorityStyleCopy;
      case 5:
        return myConceptTestConceptWithStyleAttributes;
      case 6:
        return myConceptTestInheritedAttribute;
      case 7:
        return myConceptTestSimpleAttribute;
      case 8:
        return myConceptUnapplyPriorityStyleCopy;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForHugePriorityStyle() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.editor.styleTests", "HugePriorityStyle", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x7bc02723c1a36a0aL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL);
    b.origin("r:710d1207-58b1-4fe3-ba47-f417dc16c10c(jetbrains.mps.lang.editor.styleTests.structure)/8917170296719632906");
    b.alias("hugePriorityStyle");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLeafNode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.editor.styleTests", "LeafNode", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x38990895c164873aL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL);
    b.origin("r:710d1207-58b1-4fe3-ba47-f417dc16c10c(jetbrains.mps.lang.editor.styleTests.structure)/4078300376848435002");
    b.alias("leaf");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNodeContainer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.editor.styleTests", "NodeContainer", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL);
    b.class_(false, true, false);
    b.origin("r:710d1207-58b1-4fe3-ba47-f417dc16c10c(jetbrains.mps.lang.editor.styleTests.structure)/8422442021223268684");
    b.aggregate("node", 0x74e28664f05605aeL).target(0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL).optional(true).ordered(true).multiple(true).origin("8422442021223269806").done();
    b.alias("node container");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPriorityStyle() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.editor.styleTests", "PriorityStyle", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x7bc02723c1a34c76L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL);
    b.origin("r:710d1207-58b1-4fe3-ba47-f417dc16c10c(jetbrains.mps.lang.editor.styleTests.structure)/8917170296719625334");
    b.alias("priorityStyle");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPriorityStyleCopy() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.editor.styleTests", "PriorityStyleCopy", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x7bc02723c1a3689eL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL);
    b.origin("r:710d1207-58b1-4fe3-ba47-f417dc16c10c(jetbrains.mps.lang.editor.styleTests.structure)/8917170296719632542");
    b.alias("priorityStyleCopy");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTestConceptWithStyleAttributes() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.editor.styleTests", "TestConceptWithStyleAttributes", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x5bb841570e741168L);
    b.class_(false, false, false);
    b.origin("r:710d1207-58b1-4fe3-ba47-f417dc16c10c(jetbrains.mps.lang.editor.styleTests.structure)/6609104295326650728");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTestInheritedAttribute() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.editor.styleTests", "TestInheritedAttribute", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x7bc02723c1a35eddL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL);
    b.origin("r:710d1207-58b1-4fe3-ba47-f417dc16c10c(jetbrains.mps.lang.editor.styleTests.structure)/8917170296719630045");
    b.prop("value", 0x7bc02723c1a35edeL, "8917170296719630046");
    b.alias("test-inherited-attribute");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTestSimpleAttribute() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.editor.styleTests", "TestSimpleAttribute", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x7bc02723c1a3595dL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL);
    b.origin("r:710d1207-58b1-4fe3-ba47-f417dc16c10c(jetbrains.mps.lang.editor.styleTests.structure)/8917170296719628637");
    b.prop("value", 0x7bc02723c1a35ed3L, "8917170296719630035");
    b.alias("test-simple-attribute");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnapplyPriorityStyleCopy() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.editor.styleTests", "UnapplyPriorityStyleCopy", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x7bc02723c1a36a0fL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.editor.styleTests.structure.NodeContainer", 0xa936c42ccb2c4d64L, 0xa1dc12986579a998L, 0x74e28664f056014cL);
    b.origin("r:710d1207-58b1-4fe3-ba47-f417dc16c10c(jetbrains.mps.lang.editor.styleTests.structure)/8917170296719632911");
    b.alias("unapplyPriorityStyleCopy");
    return b.create();
  }
}
