package jetbrains.mps.lang.editor.tableTests.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myStateMachine__BehaviorDescriptor = new StateMachine__BehaviorDescriptor();
  private final BHDescriptor myTable__BehaviorDescriptor = new Table__BehaviorDescriptor();
  private final BHDescriptor myLightWeightDecisionTable__BehaviorDescriptor = new LightWeightDecisionTable__BehaviorDescriptor();
  private final BHDescriptor myAbstractStateMachineElement__BehaviorDescriptor = new AbstractStateMachineElement__BehaviorDescriptor();
  private final BHDescriptor myHierarchycalTable__BehaviorDescriptor = new HierarchycalTable__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt_a0i = concept;
    switch (index_846f5o_a0i.index(cncpt_a0i)) {
      case 0:
        return myAbstractStateMachineElement__BehaviorDescriptor;
      case 1:
        return myHierarchycalTable__BehaviorDescriptor;
      case 2:
        return myLightWeightDecisionTable__BehaviorDescriptor;
      case 3:
        return myStateMachine__BehaviorDescriptor;
      case 4:
        return myTable__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex index_846f5o_a0i = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0x6e3eaf7a54e76eeaL), MetaIdFactory.conceptId(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0x760c9302beb3e1d1L), MetaIdFactory.conceptId(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0x6a2febf37d11d3dfL), MetaIdFactory.conceptId(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0xa99ffe1c8456ba1L), MetaIdFactory.conceptId(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0x28004d411fa3bea0L)).seal();
}
