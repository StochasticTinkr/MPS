package jetbrains.mps.lang.editor.tableTests.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractStateMachineElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContentElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DataCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Event = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EventReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HierarchycalTable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LightWeightDecisionTable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Matrix = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Row = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_State = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StateMachine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StateReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Table = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Transition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UltimateContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_YElement = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_lpa09p_a0s.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractStateMachineElement;
          }
          break;
        case 1:
          if (true) {
            return props_ContentElement;
          }
          break;
        case 2:
          if (true) {
            return props_DataCell;
          }
          break;
        case 3:
          if (true) {
            return props_Event;
          }
          break;
        case 4:
          if (true) {
            return props_EventReference;
          }
          break;
        case 5:
          if (true) {
            return props_HierarchycalTable;
          }
          break;
        case 6:
          if (true) {
            return props_LightWeightDecisionTable;
          }
          break;
        case 7:
          if (true) {
            return props_Matrix;
          }
          break;
        case 8:
          if (true) {
            return props_Row;
          }
          break;
        case 9:
          if (true) {
            return props_State;
          }
          break;
        case 10:
          if (true) {
            return props_StateMachine;
          }
          break;
        case 11:
          if (true) {
            return props_StateReference;
          }
          break;
        case 12:
          if (true) {
            return props_Table;
          }
          break;
        case 13:
          if (true) {
            return props_Transition;
          }
          break;
        case 14:
          if (true) {
            return props_UltimateContainer;
          }
          break;
        case 15:
          if (true) {
            return props_XElement;
          }
          break;
        case 16:
          if (true) {
            return props_YElement;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_lpa09p_a0s = buildConceptIndices(MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0x6e3eaf7a54e76eeaL, "AbstractStateMachineElement"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0x3cc6bd99e23ef6a8L, "ContentElement"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0x28004d411fa3bea4L, "DataCell"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0xa99ffe1c845743bL, "Event"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0xa99ffe1c8457446L, "EventReference"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0x760c9302beb3e1d1L, "HierarchycalTable"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0x6a2febf37d11d3dfL, "LightWeightDecisionTable"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0x3cc6bd99e23e4590L, "Matrix"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0x28004d411fa3bea6L, "Row"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0xa99ffe1c8457442L, "State"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0xa99ffe1c8456ba1L, "StateMachine"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0xa99ffe1c8457444L, "StateReference"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0x28004d411fa3bea0L, "Table"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0xa99ffe1c845743dL, "Transition"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0x4c733427bdedcbd0L, "UltimateContainer"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0x3cc6bd99e23ef6a6L, "XElement"), MetaAdapterFactory.getConcept(0xdf8799e7254a406fL, 0xbd67f4cc27337152L, 0x3cc6bd99e23ef6a7L, "YElement"));
}
