package jetbrains.mps.lang.editor.multiple.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(9);
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestChild = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestChild", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x5c5c8f07ee282fa5L, "defaultProperty"), new ConceptDescriptorBuilder.Prop(0x5c5c8f07ee282fa7L, "richProperty"), new ConceptDescriptorBuilder.Prop(0x5293debe4ce168efL, "compactProperty")).properties("defaultProperty", "richProperty", "compactProperty").sourceNode(new SNodePointer("r:eb859fb0-1cb5-4829-a090-c7f47391d585(jetbrains.mps.lang.editor.multiple.testLanguage.structure)", "6655351613569889729")).create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestEditorComponentChild = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestEditorComponentChild", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x10e3b2b96584da79L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x10e3b2b9658523d3L, "defaultProperty"), new ConceptDescriptorBuilder.Prop(0x10e3b2b9658523d4L, "compactProperty"), new ConceptDescriptorBuilder.Prop(0x10e3b2b9658523d5L, "richProperty"), new ConceptDescriptorBuilder.Prop(0x10e3b2b9658523d6L, "richCompactProperty")).properties("defaultProperty", "compactProperty", "richProperty", "richCompactProperty").sourceNode(new SNodePointer("r:eb859fb0-1cb5-4829-a090-c7f47391d585(jetbrains.mps.lang.editor.multiple.testLanguage.structure)", "1217012833662065273")).create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestEditorComponentChildSubconcept = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestEditorComponentChildSubconcept", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x591b11eaedfa2868L)).super_("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestEditorComponentChild").super_(MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x10e3b2b96584da79L)).parents("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestEditorComponentChild").parentIds(MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x10e3b2b96584da79L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x591b11eaedfe237eL, "subconceptProperty")).properties("subconceptProperty").sourceNode(new SNodePointer("r:eb859fb0-1cb5-4829-a090-c7f47391d585(jetbrains.mps.lang.editor.multiple.testLanguage.structure)", "6420745394459388008")).create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestEditorComponentRoot = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestEditorComponentRoot", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x10e3b2b965847f13L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x10e3b2b96584e0beL, "defaultChildren", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x10e3b2b96584da79L), true, true, false), new ConceptDescriptorBuilder.Link(0x10e3b2b965850dc6L, "richChildren", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x10e3b2b96584da79L), true, true, false), new ConceptDescriptorBuilder.Link(0x10e3b2b965850dccL, "richCompactChildren", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x10e3b2b96584da79L), true, true, false), new ConceptDescriptorBuilder.Link(0x591b11eaedfa2504L, "childSubconcepts", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x591b11eaedfa2868L), true, true, false)).children(new String[]{"defaultChildren", "richChildren", "richCompactChildren", "childSubconcepts"}, new boolean[]{true, true, true, true}).sourceNode(new SNodePointer("r:eb859fb0-1cb5-4829-a090-c7f47391d585(jetbrains.mps.lang.editor.multiple.testLanguage.structure)", "1217012833662041875")).create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestMostSpecificChild = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestMostSpecificChild", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x76f70aa86b49610dL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x76f70aa86b49694bL, "defaultProperty"), new ConceptDescriptorBuilder.Prop(0x76f70aa86b496951L, "compactProperty"), new ConceptDescriptorBuilder.Prop(0x76f70aa86b496957L, "richProperty"), new ConceptDescriptorBuilder.Prop(0x76f70aa86b49695eL, "richCompactProperty")).properties("defaultProperty", "compactProperty", "richProperty", "richCompactProperty").sourceNode(new SNodePointer("r:eb859fb0-1cb5-4829-a090-c7f47391d585(jetbrains.mps.lang.editor.multiple.testLanguage.structure)", "8572332134193783053")).create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestMostSpecificRoot = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestMostSpecificRoot", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x76f70aa86b495d20L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x76f70aa86b496199L, "mostSpecificChildren", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x76f70aa86b49610dL), true, true, false)).children(new String[]{"mostSpecificChildren"}, new boolean[]{true}).sourceNode(new SNodePointer("r:eb859fb0-1cb5-4829-a090-c7f47391d585(jetbrains.mps.lang.editor.multiple.testLanguage.structure)", "8572332134193782048")).create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestRefNodeListRoot = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestRefNodeListRoot", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x650641cc62465f6cL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x4de57101fd1b39a6L, "projectionType"), new ConceptDescriptorBuilder.Prop(0x7b24bcecbf6315eL, "projectAsCompact")).properties("projectionType", "projectAsCompact").childDescriptors(new ConceptDescriptorBuilder.Link(0x650641cc6246fa1aL, "richChildren", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L), true, true, false), new ConceptDescriptorBuilder.Link(0x650641cc6246fa1bL, "compactChildren", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L), true, true, false), new ConceptDescriptorBuilder.Link(0x4de57101fd1b7a08L, "conditionallyProjectedChildren", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L), true, true, false), new ConceptDescriptorBuilder.Link(0x7b24bcecbf5b228L, "conditionallyRichOrCompactChildren", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L), true, true, false)).children(new String[]{"richChildren", "compactChildren", "conditionallyProjectedChildren", "conditionallyRichOrCompactChildren"}, new boolean[]{true, true, true, true}).sourceNode(new SNodePointer("r:eb859fb0-1cb5-4829-a090-c7f47391d585(jetbrains.mps.lang.editor.multiple.testLanguage.structure)", "7279578193768898412")).create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestRefNodeRoot = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestRefNodeRoot", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x51568a5db0cc3a79L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1b06bb955221551cL, "projectionType"), new ConceptDescriptorBuilder.Prop(0x1b06bb955221551dL, "projectAsCompact")).properties("projectionType", "projectAsCompact").childDescriptors(new ConceptDescriptorBuilder.Link(0x51568a5db0cc69beL, "richChild", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L), true, false, false), new ConceptDescriptorBuilder.Link(0x51568a5db0ccd482L, "compactChild", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L), true, false, false), new ConceptDescriptorBuilder.Link(0x1b06bb95522154c8L, "conditionallyProjectedChild", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L), true, false, false), new ConceptDescriptorBuilder.Link(0x1b06bb95522154c9L, "conditionallyRichOrCompactChild", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L), true, false, false)).children(new String[]{"richChild", "compactChild", "conditionallyProjectedChild", "conditionallyRichOrCompactChild"}, new boolean[]{false, false, false, false}).sourceNode(new SNodePointer("r:eb859fb0-1cb5-4829-a090-c7f47391d585(jetbrains.mps.lang.editor.multiple.testLanguage.structure)", "5861024100072045177")).create();
  /*package*/ final ConceptDescriptor myConceptMultipleEditorsTestRoot = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.multiple.testLanguage.structure.MultipleEditorsTestRoot", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27ef15L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x6aae07ffdad12101L, "projectionType"), new ConceptDescriptorBuilder.Prop(0x69f8aea9c55aac7aL, "projectAsCompact")).properties("projectionType", "projectAsCompact").childDescriptors(new ConceptDescriptorBuilder.Link(0x5c5c8f07ee28802cL, "richChild", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L), true, true, false), new ConceptDescriptorBuilder.Link(0x5eadaecad3ebbb92L, "compactChild", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L), true, true, false), new ConceptDescriptorBuilder.Link(0x5293debe4ce081eeL, "defaultChild", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L), true, true, false), new ConceptDescriptorBuilder.Link(0x6aae07ffdad1208fL, "conditionallyProjectedChild", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L), true, true, false), new ConceptDescriptorBuilder.Link(0x69f8aea9c55aac7dL, "conditionallyRichOrCompactChild", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L), true, true, false), new ConceptDescriptorBuilder.Link(0x241930fe874ab96aL, "notSupportedPresentation", MetaIdFactory.conceptId(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L), true, true, false)).children(new String[]{"richChild", "compactChild", "defaultChild", "conditionallyProjectedChild", "conditionallyRichOrCompactChild", "notSupportedPresentation"}, new boolean[]{true, true, true, true, true, true}).sourceNode(new SNodePointer("r:eb859fb0-1cb5-4829-a090-c7f47391d585(jetbrains.mps.lang.editor.multiple.testLanguage.structure)", "6655351613569888021")).create();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptMultipleEditorsTestChild.getId(), 0);
    myIndexMap.put(myConceptMultipleEditorsTestEditorComponentChild.getId(), 1);
    myIndexMap.put(myConceptMultipleEditorsTestEditorComponentChildSubconcept.getId(), 2);
    myIndexMap.put(myConceptMultipleEditorsTestEditorComponentRoot.getId(), 3);
    myIndexMap.put(myConceptMultipleEditorsTestMostSpecificChild.getId(), 4);
    myIndexMap.put(myConceptMultipleEditorsTestMostSpecificRoot.getId(), 5);
    myIndexMap.put(myConceptMultipleEditorsTestRefNodeListRoot.getId(), 6);
    myIndexMap.put(myConceptMultipleEditorsTestRefNodeRoot.getId(), 7);
    myIndexMap.put(myConceptMultipleEditorsTestRoot.getId(), 8);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptMultipleEditorsTestChild, myConceptMultipleEditorsTestEditorComponentChild, myConceptMultipleEditorsTestEditorComponentChildSubconcept, myConceptMultipleEditorsTestEditorComponentRoot, myConceptMultipleEditorsTestMostSpecificChild, myConceptMultipleEditorsTestMostSpecificRoot, myConceptMultipleEditorsTestRefNodeListRoot, myConceptMultipleEditorsTestRefNodeRoot, myConceptMultipleEditorsTestRoot);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptMultipleEditorsTestChild;
      case 1:
        return myConceptMultipleEditorsTestEditorComponentChild;
      case 2:
        return myConceptMultipleEditorsTestEditorComponentChildSubconcept;
      case 3:
        return myConceptMultipleEditorsTestEditorComponentRoot;
      case 4:
        return myConceptMultipleEditorsTestMostSpecificChild;
      case 5:
        return myConceptMultipleEditorsTestMostSpecificRoot;
      case 6:
        return myConceptMultipleEditorsTestRefNodeListRoot;
      case 7:
        return myConceptMultipleEditorsTestRefNodeRoot;
      case 8:
        return myConceptMultipleEditorsTestRoot;
      default:
        throw new IllegalStateException();
    }
  }
}
