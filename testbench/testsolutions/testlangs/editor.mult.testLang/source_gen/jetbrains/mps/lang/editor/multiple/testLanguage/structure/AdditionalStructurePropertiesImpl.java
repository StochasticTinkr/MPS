package jetbrains.mps.lang.editor.multiple.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_MultipleEditorsTestChild = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MultipleEditorsTestEditorComponentChild = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MultipleEditorsTestEditorComponentChildSubconcept = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MultipleEditorsTestEditorComponentRoot = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MultipleEditorsTestMostSpecificChild = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MultipleEditorsTestMostSpecificRoot = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MultipleEditorsTestRefNodeListRoot = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MultipleEditorsTestRefNodeRoot = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MultipleEditorsTestRoot = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0k.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_MultipleEditorsTestChild;
          }
          break;
        case 1:
          if (true) {
            return props_MultipleEditorsTestEditorComponentChild;
          }
          break;
        case 2:
          if (true) {
            return props_MultipleEditorsTestEditorComponentChildSubconcept;
          }
          break;
        case 3:
          if (true) {
            return props_MultipleEditorsTestEditorComponentRoot;
          }
          break;
        case 4:
          if (true) {
            return props_MultipleEditorsTestMostSpecificChild;
          }
          break;
        case 5:
          if (true) {
            return props_MultipleEditorsTestMostSpecificRoot;
          }
          break;
        case 6:
          if (true) {
            return props_MultipleEditorsTestRefNodeListRoot;
          }
          break;
        case 7:
          if (true) {
            return props_MultipleEditorsTestRefNodeRoot;
          }
          break;
        case 8:
          if (true) {
            return props_MultipleEditorsTestRoot;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0k = buildConceptIndices(MetaAdapterFactory.getConcept(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27f5c1L, "MultipleEditorsTestChild"), MetaAdapterFactory.getConcept(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x10e3b2b96584da79L, "MultipleEditorsTestEditorComponentChild"), MetaAdapterFactory.getConcept(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x591b11eaedfa2868L, "MultipleEditorsTestEditorComponentChildSubconcept"), MetaAdapterFactory.getConcept(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x10e3b2b965847f13L, "MultipleEditorsTestEditorComponentRoot"), MetaAdapterFactory.getConcept(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x76f70aa86b49610dL, "MultipleEditorsTestMostSpecificChild"), MetaAdapterFactory.getConcept(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x76f70aa86b495d20L, "MultipleEditorsTestMostSpecificRoot"), MetaAdapterFactory.getConcept(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x650641cc62465f6cL, "MultipleEditorsTestRefNodeListRoot"), MetaAdapterFactory.getConcept(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x51568a5db0cc3a79L, "MultipleEditorsTestRefNodeRoot"), MetaAdapterFactory.getConcept(0x7a80051c66e94bfcL, 0x9698b12adfed3d9fL, 0x5c5c8f07ee27ef15L, "MultipleEditorsTestRoot"));
}
