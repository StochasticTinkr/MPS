package jetbrains.mps.lang.editor.multiple.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_MultipleEditorsTestChild;
  private ConceptPresentation props_MultipleEditorsTestEditorComponentChild;
  private ConceptPresentation props_MultipleEditorsTestEditorComponentChildSubconcept;
  private ConceptPresentation props_MultipleEditorsTestEditorComponentRoot;
  private ConceptPresentation props_MultipleEditorsTestMostSpecificChild;
  private ConceptPresentation props_MultipleEditorsTestMostSpecificRoot;
  private ConceptPresentation props_MultipleEditorsTestRefNodeListRoot;
  private ConceptPresentation props_MultipleEditorsTestRefNodeRoot;
  private ConceptPresentation props_MultipleEditorsTestRoot;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.MultipleEditorsTestChild:
        if (props_MultipleEditorsTestChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MultipleEditorsTestChild = cpb.create();
        }
        return props_MultipleEditorsTestChild;
      case LanguageConceptSwitch.MultipleEditorsTestEditorComponentChild:
        if (props_MultipleEditorsTestEditorComponentChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MultipleEditorsTestEditorComponentChild = cpb.create();
        }
        return props_MultipleEditorsTestEditorComponentChild;
      case LanguageConceptSwitch.MultipleEditorsTestEditorComponentChildSubconcept:
        if (props_MultipleEditorsTestEditorComponentChildSubconcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MultipleEditorsTestEditorComponentChildSubconcept = cpb.create();
        }
        return props_MultipleEditorsTestEditorComponentChildSubconcept;
      case LanguageConceptSwitch.MultipleEditorsTestEditorComponentRoot:
        if (props_MultipleEditorsTestEditorComponentRoot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MultipleEditorsTestEditorComponentRoot = cpb.create();
        }
        return props_MultipleEditorsTestEditorComponentRoot;
      case LanguageConceptSwitch.MultipleEditorsTestMostSpecificChild:
        if (props_MultipleEditorsTestMostSpecificChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MultipleEditorsTestMostSpecificChild = cpb.create();
        }
        return props_MultipleEditorsTestMostSpecificChild;
      case LanguageConceptSwitch.MultipleEditorsTestMostSpecificRoot:
        if (props_MultipleEditorsTestMostSpecificRoot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MultipleEditorsTestMostSpecificRoot = cpb.create();
        }
        return props_MultipleEditorsTestMostSpecificRoot;
      case LanguageConceptSwitch.MultipleEditorsTestRefNodeListRoot:
        if (props_MultipleEditorsTestRefNodeListRoot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MultipleEditorsTestRefNodeListRoot = cpb.create();
        }
        return props_MultipleEditorsTestRefNodeListRoot;
      case LanguageConceptSwitch.MultipleEditorsTestRefNodeRoot:
        if (props_MultipleEditorsTestRefNodeRoot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MultipleEditorsTestRefNodeRoot = cpb.create();
        }
        return props_MultipleEditorsTestRefNodeRoot;
      case LanguageConceptSwitch.MultipleEditorsTestRoot:
        if (props_MultipleEditorsTestRoot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MultipleEditorsTestRoot = cpb.create();
        }
        return props_MultipleEditorsTestRoot;
    }
    return null;
  }
}
