package jetbrains.mps.lang.editor.multiple.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_MultipleEditorsTestChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultipleEditorsTestEditorComponentChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultipleEditorsTestEditorComponentChildSubconcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultipleEditorsTestEditorComponentRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultipleEditorsTestMostSpecificChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultipleEditorsTestMostSpecificRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultipleEditorsTestRefNodeListRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultipleEditorsTestRefNodeRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultipleEditorsTestRoot = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_MultipleEditorsTestChild;
      case 1:
        return props_MultipleEditorsTestEditorComponentChild;
      case 2:
        return props_MultipleEditorsTestEditorComponentChildSubconcept;
      case 3:
        return props_MultipleEditorsTestEditorComponentRoot;
      case 4:
        return props_MultipleEditorsTestMostSpecificChild;
      case 5:
        return props_MultipleEditorsTestMostSpecificRoot;
      case 6:
        return props_MultipleEditorsTestRefNodeListRoot;
      case 7:
        return props_MultipleEditorsTestRefNodeRoot;
      case 8:
        return props_MultipleEditorsTestRoot;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
