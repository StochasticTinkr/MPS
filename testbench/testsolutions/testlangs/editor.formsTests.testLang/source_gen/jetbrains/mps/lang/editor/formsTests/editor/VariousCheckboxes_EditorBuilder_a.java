package jetbrains.mps.lang.editor.formsTests.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Horizontal;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.baseLanguage.editor.BaseLanguageStyle_StyleSheet.UrlStyleClass;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.editor.runtime.EditorCell_Empty;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Image;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;

/*package*/ class VariousCheckboxes_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public VariousCheckboxes_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_0();
  }

  private EditorCell createCollection_0() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Vertical());
    editorCell.setCellId("Collection_3jyf1k_a");
    editorCell.setBig(true);
    setCellContext(editorCell);
    editorCell.addEditorCell(createConstant_0());
    editorCell.addEditorCell(createCollection_1());
    editorCell.addEditorCell(createCollection_2());
    editorCell.addEditorCell(createEmpty_0());
    editorCell.addEditorCell(createConstant_7());
    editorCell.addEditorCell(createCollection_3());
    editorCell.addEditorCell(createCollection_4());
    return editorCell;
  }
  private EditorCell createConstant_0() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "booleanProperty1:");
    editorCell.setCellId("Constant_3jyf1k_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_1() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_3jyf1k_b0");
    Checkbox_ActionMap_3jyf1k_b0.setCellActions(editorCell, myNode, getEditorContext());
    editorCell.addKeyMap(new Checkbox_KeyMap_3jyf1k_b0());
    editorCell.addEditorCell(createAlternation_0());
    editorCell.addEditorCell(createConstant_3());
    return editorCell;
  }
  private EditorCell createAlternation_0() {
    boolean alternationCondition = true;
    alternationCondition = nodeCondition_3jyf1k_a0b0();
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = createConstant_1();
    } else {
      editorCell = createConstant_2();
    }
    Style style = new StyleImpl();
    new UrlStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.BOLD);
    style.set(StyleAttributes.TEXT_COLOR, StyleRegistry.getInstance().getSimpleColor(MPSColors.pink));
    editorCell.getStyle().putAll(style);
    return editorCell;
  }
  private boolean nodeCondition_3jyf1k_a0b0() {
    return SPropertyOperations.getBoolean(myNode, MetaAdapterFactory.getProperty(0xafb9a5fdbc5d4169L, 0xa22542d8823d623aL, 0x455f8dda63d636dL, 0x455f8dda63d636eL, "booleanProperty1"));
  }
  private EditorCell createConstant_1() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "true");
    editorCell.setCellId("Constant_3jyf1k_a0b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_2() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "false");
    editorCell.setCellId("Constant_3jyf1k_a0b0_0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_3() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "booleanProperty1");
    editorCell.setCellId("Constant_3jyf1k_b1a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_2() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_3jyf1k_c0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.DRAW_BORDER, true);
    editorCell.getStyle().putAll(style);
    Checkbox_ActionMap_3jyf1k_c0.setCellActions(editorCell, myNode, getEditorContext());
    editorCell.addKeyMap(new Checkbox_KeyMap_3jyf1k_c0());
    editorCell.addEditorCell(createAlternation_1());
    editorCell.addEditorCell(createConstant_6());
    return editorCell;
  }
  private EditorCell createAlternation_1() {
    boolean alternationCondition = true;
    alternationCondition = nodeCondition_3jyf1k_a0c0();
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = createConstant_4();
    } else {
      editorCell = createConstant_5();
    }
    return editorCell;
  }
  private boolean nodeCondition_3jyf1k_a0c0() {
    return SPropertyOperations.getBoolean(myNode, MetaAdapterFactory.getProperty(0xafb9a5fdbc5d4169L, 0xa22542d8823d623aL, 0x455f8dda63d636dL, 0x455f8dda63d636eL, "booleanProperty1"));
  }
  private EditorCell createConstant_4() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "true");
    editorCell.setCellId("Constant_3jyf1k_a0c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_5() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "false");
    editorCell.setCellId("Constant_3jyf1k_a0c0_0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_6() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "with a style (border)");
    editorCell.setCellId("Constant_3jyf1k_b2a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createEmpty_0() {
    EditorCell_Empty editorCell = new EditorCell_Empty(getEditorContext(), myNode);
    editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(editorCell.getSNode(), CellAction_DeleteNode.DeleteDirection.FORWARD));
    editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(editorCell.getSNode(), CellAction_DeleteNode.DeleteDirection.BACKWARD));
    editorCell.setCellId("Empty_3jyf1k_d0");
    return editorCell;
  }
  private EditorCell createConstant_7() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "booleanProperty2:");
    editorCell.setCellId("Constant_3jyf1k_e0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_3() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_3jyf1k_f0");
    Checkbox_ActionMap_3jyf1k_f0.setCellActions(editorCell, myNode, getEditorContext());
    editorCell.addKeyMap(new Checkbox_KeyMap_3jyf1k_f0());
    editorCell.addEditorCell(createAlternation_2());
    editorCell.addEditorCell(createConstant_10());
    return editorCell;
  }
  private EditorCell createAlternation_2() {
    boolean alternationCondition = true;
    alternationCondition = nodeCondition_3jyf1k_a0f0();
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = createConstant_8();
    } else {
      editorCell = createConstant_9();
    }
    return editorCell;
  }
  private boolean nodeCondition_3jyf1k_a0f0() {
    return SPropertyOperations.getBoolean(myNode, MetaAdapterFactory.getProperty(0xafb9a5fdbc5d4169L, 0xa22542d8823d623aL, 0x455f8dda63d636dL, 0x3bf28179462bcb27L, "booleanProperty2"));
  }
  private EditorCell createConstant_8() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "[x]");
    editorCell.setCellId("Constant_3jyf1k_a0f0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_9() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "[ ]");
    editorCell.setCellId("Constant_3jyf1k_a0f0_0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_10() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "booleanProperty2");
    editorCell.setCellId("Constant_3jyf1k_b5a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.FONT_STYLE, MPSFonts.PLAIN);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_4() {
    EditorCell_Collection editorCell = new EditorCell_Collection(getEditorContext(), myNode, new CellLayout_Horizontal());
    editorCell.setCellId("Collection_3jyf1k_g0");
    Checkbox_ActionMap_3jyf1k_g0.setCellActions(editorCell, myNode, getEditorContext());
    editorCell.addKeyMap(new Checkbox_KeyMap_3jyf1k_g0());
    editorCell.addEditorCell(createAlternation_3());
    editorCell.addEditorCell(createConstant_11());
    return editorCell;
  }
  private EditorCell createAlternation_3() {
    boolean alternationCondition = true;
    alternationCondition = nodeCondition_3jyf1k_a0g0();
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = createImage_0();
    } else {
      editorCell = createImage_1();
    }
    return editorCell;
  }
  private boolean nodeCondition_3jyf1k_a0g0() {
    return SPropertyOperations.getBoolean(myNode, MetaAdapterFactory.getProperty(0xafb9a5fdbc5d4169L, 0xa22542d8823d623aL, 0x455f8dda63d636dL, 0x3bf28179462bcb27L, "booleanProperty2"));
  }
  private EditorCell createImage_0() {
    EditorCell_Image editorCell = fromImageCellProvider0();
    editorCell.setCellId("Image_3jyf1k_a0g0");
    editorCell.setDescent(-1);
    return editorCell;
  }
  private EditorCell_Image fromImageCellProvider0() {
    Tuples._2<SModule, String> modulePathPair = (new _FunctionTypes._return_P0_E0<Tuples._2<SModule, String>>() {
      public Tuples._2<SModule, String> invoke() {
        return MultiTuple.<SModule,String>from(ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("90966cb5-4f67-429a-b7ba-d0fded4ede71(jetbrains.mps.lang.editor.forms.runtime)")), "${module}/icons/checkBoxSelected.png");
      }
    }).invoke();
    return EditorCell_Image.createImageCell(getEditorContext(), myNode, modulePathPair._0(), modulePathPair._1());
  }
  private EditorCell createImage_1() {
    EditorCell_Image editorCell = fromImageCellProvider1();
    editorCell.setCellId("Image_3jyf1k_a0g0_0");
    editorCell.setDescent(-1);
    return editorCell;
  }
  private EditorCell_Image fromImageCellProvider1() {
    Tuples._2<SModule, String> modulePathPair = (new _FunctionTypes._return_P0_E0<Tuples._2<SModule, String>>() {
      public Tuples._2<SModule, String> invoke() {
        return MultiTuple.<SModule,String>from(ModuleRepositoryFacade.getInstance().getModule(PersistenceFacade.getInstance().createModuleReference("90966cb5-4f67-429a-b7ba-d0fded4ede71(jetbrains.mps.lang.editor.forms.runtime)")), "${module}/icons/checkBox.png");
      }
    }).invoke();
    return EditorCell_Image.createImageCell(getEditorContext(), myNode, modulePathPair._0(), modulePathPair._1());
  }
  private EditorCell createConstant_11() {
    EditorCell_Constant editorCell = new EditorCell_Constant(getEditorContext(), myNode, "platform checkbox");
    editorCell.setCellId("Constant_3jyf1k_b6a");
    editorCell.setDefaultText("");
    return editorCell;
  }
}
