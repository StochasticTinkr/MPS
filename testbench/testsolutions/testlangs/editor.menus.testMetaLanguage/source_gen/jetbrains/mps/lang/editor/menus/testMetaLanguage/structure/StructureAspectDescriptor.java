package jetbrains.mps.lang.editor.menus.testMetaLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(7);
  /*package*/ final ConceptDescriptor myConceptTransformationFeature_Optional = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.menus.testMetaLanguage.structure.TransformationFeature_Optional", MetaIdFactory.conceptId(0x69068b7cba1f47fbL, 0xa4864981f42606e9L, 0x41c8eff4cc3dfc1dL)).super_("jetbrains.mps.lang.editor.structure.TransformationFeature").version(1).super_(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa5L)).parents("jetbrains.mps.lang.editor.structure.TransformationFeature").parentIds(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa5L)).alias("optional", "optional feature").sourceNode(new SNodePointer("r:72a1f653-d94c-4c5e-9b1c-92f598e4fc7c(jetbrains.mps.lang.editor.menus.testMetaLanguage.structure)", "4740302442485120029")).create();
  /*package*/ final ConceptDescriptor myConceptTransformationFeature_Required = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.menus.testMetaLanguage.structure.TransformationFeature_Required", MetaIdFactory.conceptId(0x69068b7cba1f47fbL, 0xa4864981f42606e9L, 0x41c8eff4cc3e09d8L)).super_("jetbrains.mps.lang.editor.structure.TransformationFeature").version(1).super_(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa5L)).parents("jetbrains.mps.lang.editor.structure.TransformationFeature").parentIds(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa5L)).alias("required", "required feature").sourceNode(new SNodePointer("r:72a1f653-d94c-4c5e-9b1c-92f598e4fc7c(jetbrains.mps.lang.editor.menus.testMetaLanguage.structure)", "4740302442485123544")).create();
  /*package*/ final ConceptDescriptor myConceptTransformationFeature_Unavailable = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.menus.testMetaLanguage.structure.TransformationFeature_Unavailable", MetaIdFactory.conceptId(0x69068b7cba1f47fbL, 0xa4864981f42606e9L, 0x33f30f661f866f15L)).super_("jetbrains.mps.lang.editor.structure.TransformationFeature").version(1).super_(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa5L)).parents("jetbrains.mps.lang.editor.structure.TransformationFeature").parentIds(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa5L)).alias("unavailable", "unavailable feature").sourceNode(new SNodePointer("r:72a1f653-d94c-4c5e-9b1c-92f598e4fc7c(jetbrains.mps.lang.editor.menus.testMetaLanguage.structure)", "3743352646564998933")).create();
  /*package*/ final ConceptDescriptor myConceptTransformationLocation_Test = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.menus.testMetaLanguage.structure.TransformationLocation_Test", MetaIdFactory.conceptId(0x69068b7cba1f47fbL, 0xa4864981f42606e9L, 0x595469d6668817a2L)).super_("jetbrains.mps.lang.editor.structure.TransformationLocation").version(1).super_(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa6L)).parents("jetbrains.mps.lang.editor.structure.TransformationLocation").parentIds(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa6L)).alias("test location", "location for use in tests").sourceNode(new SNodePointer("r:72a1f653-d94c-4c5e-9b1c-92f598e4fc7c(jetbrains.mps.lang.editor.menus.testMetaLanguage.structure)", "6436886136983394210")).create();
  /*package*/ final ConceptDescriptor myConceptTransformationLocation_WithFeatures = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.menus.testMetaLanguage.structure.TransformationLocation_WithFeatures", MetaIdFactory.conceptId(0x69068b7cba1f47fbL, 0xa4864981f42606e9L, 0x33f30f661f7e88deL)).super_("jetbrains.mps.lang.editor.structure.TransformationLocation").version(1).super_(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa6L)).parents("jetbrains.mps.lang.editor.structure.TransformationLocation").parentIds(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa6L)).alias("location with a required and an optional feature", "").sourceNode(new SNodePointer("r:72a1f653-d94c-4c5e-9b1c-92f598e4fc7c(jetbrains.mps.lang.editor.menus.testMetaLanguage.structure)", "3743352646564481246")).create();
  /*package*/ final ConceptDescriptor myConceptTransformationLocation_WithoutFeatures = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.menus.testMetaLanguage.structure.TransformationLocation_WithoutFeatures", MetaIdFactory.conceptId(0x69068b7cba1f47fbL, 0xa4864981f42606e9L, 0x41c8eff4cc3eb92bL)).super_("jetbrains.mps.lang.editor.structure.TransformationLocation").version(1).super_(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa6L)).parents("jetbrains.mps.lang.editor.structure.TransformationLocation").parentIds(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa6L)).alias("location with no available features", "").sourceNode(new SNodePointer("r:72a1f653-d94c-4c5e-9b1c-92f598e4fc7c(jetbrains.mps.lang.editor.menus.testMetaLanguage.structure)", "4740302442485168427")).create();
  /*package*/ final ConceptDescriptor myConceptTransformationMenu_Test = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.menus.testMetaLanguage.structure.TransformationMenu_Test", MetaIdFactory.conceptId(0x69068b7cba1f47fbL, 0xa4864981f42606e9L, 0x259f3121f598017fL)).super_("jetbrains.mps.lang.editor.structure.TransformationMenu").version(1).super_(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x4e0f93d8a0ac3ebaL)).parents("jetbrains.mps.lang.editor.structure.TransformationMenu").parentIds(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x4e0f93d8a0ac3ebaL)).sourceNode(new SNodePointer("r:72a1f653-d94c-4c5e-9b1c-92f598e4fc7c(jetbrains.mps.lang.editor.menus.testMetaLanguage.structure)", "2710939522624389503")).create();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptTransformationFeature_Optional.getId(), 0);
    myIndexMap.put(myConceptTransformationFeature_Required.getId(), 1);
    myIndexMap.put(myConceptTransformationFeature_Unavailable.getId(), 2);
    myIndexMap.put(myConceptTransformationLocation_Test.getId(), 3);
    myIndexMap.put(myConceptTransformationLocation_WithFeatures.getId(), 4);
    myIndexMap.put(myConceptTransformationLocation_WithoutFeatures.getId(), 5);
    myIndexMap.put(myConceptTransformationMenu_Test.getId(), 6);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptTransformationFeature_Optional, myConceptTransformationFeature_Required, myConceptTransformationFeature_Unavailable, myConceptTransformationLocation_Test, myConceptTransformationLocation_WithFeatures, myConceptTransformationLocation_WithoutFeatures, myConceptTransformationMenu_Test);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptTransformationFeature_Optional;
      case 1:
        return myConceptTransformationFeature_Required;
      case 2:
        return myConceptTransformationFeature_Unavailable;
      case 3:
        return myConceptTransformationLocation_Test;
      case 4:
        return myConceptTransformationLocation_WithFeatures;
      case 5:
        return myConceptTransformationLocation_WithoutFeatures;
      case 6:
        return myConceptTransformationMenu_Test;
      default:
        throw new IllegalStateException();
    }
  }
}
