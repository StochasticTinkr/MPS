package jetbrains.mps.lang.editor.menus.testMetaLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_TransformationFeature_Optional = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationFeature_Required = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationFeature_Unavailable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationLocation_Test = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationLocation_WithFeatures = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationLocation_WithoutFeatures = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenu_Test = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_TransformationFeature_Optional;
      case 1:
        return props_TransformationFeature_Required;
      case 2:
        return props_TransformationFeature_Unavailable;
      case 3:
        return props_TransformationLocation_Test;
      case 4:
        return props_TransformationLocation_WithFeatures;
      case 5:
        return props_TransformationLocation_WithoutFeatures;
      case 6:
        return props_TransformationMenu_Test;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
