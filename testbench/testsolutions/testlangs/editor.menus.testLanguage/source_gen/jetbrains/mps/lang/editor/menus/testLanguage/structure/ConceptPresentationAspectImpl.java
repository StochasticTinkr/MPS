package jetbrains.mps.lang.editor.menus.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Base = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseWithNonEmptyMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ChildOfParentWithEmptyCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptWithoutDefaultMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Derived = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DerivedWithEmptyMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParentWithEmptyCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ScopesTestConceptBase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuTestConcept = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_Base;
      case 1:
        return props_BaseWithNonEmptyMenu;
      case 2:
        return props_ChildOfParentWithEmptyCell;
      case 3:
        return props_ConceptWithoutDefaultMenu;
      case 4:
        return props_Derived;
      case 5:
        return props_DerivedWithEmptyMenu;
      case 6:
        return props_NodeHolder;
      case 7:
        return props_ParentWithEmptyCell;
      case 8:
        return props_ScopesTestConceptBase;
      case 9:
        return props_TransformationMenuTestConcept;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
