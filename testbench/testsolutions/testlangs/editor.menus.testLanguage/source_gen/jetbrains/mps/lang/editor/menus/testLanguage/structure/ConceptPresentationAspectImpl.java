package jetbrains.mps.lang.editor.menus.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Base = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseWithNonEmptyMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ChildOfParentWithEmptyCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptWithoutDefaultMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Derived = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DerivedWithEmptyMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParentWithEmptyCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ScopesTestConceptBase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ScopesTestConceptChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ScopesTestConceptReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuTestConcept = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Base:
        return props_Base;
      case LanguageConceptSwitch.BaseWithNonEmptyMenu:
        return props_BaseWithNonEmptyMenu;
      case LanguageConceptSwitch.ChildOfParentWithEmptyCell:
        return props_ChildOfParentWithEmptyCell;
      case LanguageConceptSwitch.ConceptWithoutDefaultMenu:
        return props_ConceptWithoutDefaultMenu;
      case LanguageConceptSwitch.Derived:
        return props_Derived;
      case LanguageConceptSwitch.DerivedWithEmptyMenu:
        return props_DerivedWithEmptyMenu;
      case LanguageConceptSwitch.NodeHolder:
        return props_NodeHolder;
      case LanguageConceptSwitch.ParentWithEmptyCell:
        return props_ParentWithEmptyCell;
      case LanguageConceptSwitch.ScopesTestConceptBase:
        return props_ScopesTestConceptBase;
      case LanguageConceptSwitch.ScopesTestConceptChild:
        return props_ScopesTestConceptChild;
      case LanguageConceptSwitch.ScopesTestConceptReference:
        return props_ScopesTestConceptReference;
      case LanguageConceptSwitch.TransformationMenuTestConcept:
        return props_TransformationMenuTestConcept;
    }
    return null;
  }
}
