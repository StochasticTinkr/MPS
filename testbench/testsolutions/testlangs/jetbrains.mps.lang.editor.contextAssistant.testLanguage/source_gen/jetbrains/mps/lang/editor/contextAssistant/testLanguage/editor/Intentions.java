package jetbrains.mps.lang.editor.contextAssistant.testLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.transformation.TransformationMenuBase;
import java.util.List;
import jetbrains.mps.lang.editor.menus.transformation.MenuPart;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import java.util.ArrayList;
import jetbrains.mps.editor.contextActionsTool.runtime.MenuLocations;
import jetbrains.mps.lang.intentions.contextAssistant.runtime.IntentionMenuPartBase;
import jetbrains.mps.openapi.editor.menus.transformation.MenuItem;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.intentions.IntentionExecutable;
import jetbrains.mps.openapi.editor.menus.transformation.ActionItemBase;
import jetbrains.mps.editor.contextActionsTool.runtime.SidebarActionItem;
import org.jetbrains.annotations.Nullable;
import javax.swing.Icon;

public class Intentions extends TransformationMenuBase {
  @Override
  protected List<MenuPart> getParts(TransformationMenuContext _context) {
    List<MenuPart> result = new ArrayList<MenuPart>();
    if (MenuLocations.CONTEXT_ACTIONS_TOOL.equals(_context.getMenuLocation())) {
      result.add(new Intentions.TransformationMenuPart_Intention_2feb6b_a0());
    }
    return result;
  }

  public static class TransformationMenuPart_Intention_2feb6b_a0 extends IntentionMenuPartBase {
    public TransformationMenuPart_Intention_2feb6b_a0() {
      super("jetbrains.mps.lang.editor.contextAssistant.testLanguage.intentions.AddLetterToName_Intention");
    }

    @Override
    protected MenuItem createItem(@NotNull TransformationMenuContext context, @NotNull IntentionExecutable executable) {
      return new Intentions.TransformationMenuPart_Intention_2feb6b_a0.Item(context, executable);
    }

    private class Item extends ActionItemBase implements SidebarActionItem {
      private final TransformationMenuContext _context;
      private final IntentionExecutable myExecutable;

      private Item(TransformationMenuContext context, IntentionExecutable executable) {
        _context = context;
        myExecutable = executable;
      }

      @Nullable
      @Override
      public String getLabelText(@NotNull String pattern) {
        return myExecutable.getDescription(_context.getNode(), _context.getEditorContext());
      }

      @Override
      public void execute(@NotNull String pattern) {
        myExecutable.execute(_context.getNode(), _context.getEditorContext());
      }

      @Override
      public Icon getIcon() {
        return null;
      }
      @Override
      public String getTooltipText() {
        return myExecutable.getDescriptor().getPresentation();
      }
    }
  }
}
