package jetbrains.mps.lang.editor.contextAssistant.testLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.transformationMenus.TransformationMenuBase;
import java.util.List;
import jetbrains.mps.lang.editor.transformationMenus.MenuPart;
import java.util.Arrays;
import jetbrains.mps.lang.editor.transformationMenus.ConditionalMenuPart;
import jetbrains.mps.openapi.editor.transformationMenus.TransformationMenuContext;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.editor.transformationMenus.ActionItemMenuPart;
import jetbrains.mps.lang.editor.transformationMenus.SubMenuMenuPart;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.editor.transformationMenus.IncludeMenuMenuPart;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.transformationMenus.TransformationMenuLookup;
import jetbrains.mps.lang.editor.transformationMenus.NamedMenuLookup;
import jetbrains.mps.smodel.language.LanguageRegistry;

public class Child_ContextAssistantMenu extends TransformationMenuBase {
  @Override
  protected List<MenuPart> getParts() {
    return Arrays.<MenuPart>asList(new ConditionalMenuPart() {
      @Override
      protected boolean isApplicable(TransformationMenuContext context) {
        final EditorContext editorContext = context.getEditorContext();
        final SNode node = context.getNode();
        return new _FunctionTypes._return_P0_E0<Boolean>() {
          public Boolean invoke() {
            if ("error".equals(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")))) {
              throw new RuntimeException("Intentional exception - ignore this");
            }
            return true;
          }
        }.invoke();
      }

      @Override
      protected List<MenuPart> getParts() {
        return Arrays.<MenuPart>asList(new ActionItemMenuPart() {
          @Override
          protected String getText(TransformationMenuContext context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            return "exception 1";
          }

          @Override
          protected void execute(TransformationMenuContext context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
          }
        });
      }
    }, new ActionItemMenuPart() {
      @Override
      protected String getText(TransformationMenuContext context) {
        final EditorContext editorContext = context.getEditorContext();
        final SNode node = context.getNode();
        return "exception 2";
      }

      @Override
      protected void execute(TransformationMenuContext context) {
        final EditorContext editorContext = context.getEditorContext();
        final SNode node = context.getNode();
        throw new RuntimeException("Intentional exception from 'execute'");
      }
    }, new SubMenuMenuPart() {
      @Override
      protected String getText(EditorContext context, SNode node) {
        return "tree operations";
      }

      @Override
      protected List<MenuPart> getParts() {
        return Arrays.<MenuPart>asList(new MenuPart[]{new ActionItemMenuPart() {
          @Override
          protected String getText(TransformationMenuContext context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            return "delete node";
          }

          @Override
          protected void execute(TransformationMenuContext context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            SNodeOperations.deleteNode(node);
          }
        }, new ActionItemMenuPart() {
          @Override
          protected String getText(TransformationMenuContext context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            return "add sibling before";
          }

          @Override
          protected void execute(TransformationMenuContext context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            {
              SNode newNode = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x9a629f9aabc94c29L, 0xb1b8db7f349f7fbcL, 0x4d6a8b533e60aa32L, "jetbrains.mps.lang.editor.contextAssistant.testLanguage.structure.Child")), null);
              SNodeOperations.insertPrevSiblingChild(node, newNode);
              editorContext.selectWRTFocusPolicy(newNode);
            }
          }
        }});
      }
    }, new ConditionalMenuPart() {
      @Override
      protected boolean isApplicable(TransformationMenuContext context) {
        final EditorContext editorContext = context.getEditorContext();
        final SNode node = context.getNode();
        return SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).contains("a");
      }

      @Override
      protected List<MenuPart> getParts() {
        return Arrays.<MenuPart>asList(new ActionItemMenuPart() {
          @Override
          protected String getText(TransformationMenuContext context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            return "remove all 'a's";
          }

          @Override
          protected void execute(TransformationMenuContext context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).replaceAll("a", ""));
          }
        }, new ActionItemMenuPart() {
          @Override
          protected String getText(TransformationMenuContext context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            return "another ";
          }

          @Override
          protected void execute(TransformationMenuContext context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
          }
        });
      }
    }, new ConditionalMenuPart() {
      @Override
      protected boolean isApplicable(TransformationMenuContext context) {
        final EditorContext editorContext = context.getEditorContext();
        final SNode node = context.getNode();
        return !(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")).endsWith("a"));
      }

      @Override
      protected List<MenuPart> getParts() {
        return Arrays.<MenuPart>asList(new ActionItemMenuPart() {
          @Override
          protected String getText(TransformationMenuContext context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            return "ensure name ends with 'a'";
          }

          @Override
          protected void execute(TransformationMenuContext context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "a");
          }
        });
      }
    }, new IncludeMenuMenuPart() {
      @Nullable
      @Override
      protected TransformationMenuLookup getMenuLookup(TransformationMenuContext context) {
        final SNode node = context.getNode();
        final EditorContext editorContext = context.getEditorContext();

        return new NamedMenuLookup(LanguageRegistry.getInstance(editorContext.getRepository()), MetaAdapterFactory.getConcept(0x9a629f9aabc94c29L, 0xb1b8db7f349f7fbcL, 0x4d6a8b533e60aa32L, "jetbrains.mps.lang.editor.contextAssistant.testLanguage.structure.Child"), "jetbrains.mps.lang.editor.contextAssistant.testLanguage.editor.NamedMenu");
      }
    });
  }
}
