package jetbrains.mps.lang.actions.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ActionTestAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestAbstractChildWrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestChild1 = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0c).create();
  private final ConceptPresentation props_ActionTestChild1Child = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestChild1SubConcept = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0e).create();
  private final ConceptPresentation props_ActionTestChild2 = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0f).create();
  private final ConceptPresentation props_ActionTestChildToWrap1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestChildToWrap2 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestChildWrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestDefaultAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestDefaultChild1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestDefaultChild2 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformAddConceptAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformAddConceptChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformAnotherAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformAnotherChild1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformAnotherChild2 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformAnotherChildCommonSuperConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformChild1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformTestAncestor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformTestContainer = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("737ed1ff-fa63-4ebc-a834-435499b23c64"), "jetbrains.mps.lang.actions.testLanguage")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_ActionTestAbstractChild;
      case 1:
        return props_ActionTestAbstractChildWrapper;
      case 2:
        return props_ActionTestChild1;
      case 3:
        return props_ActionTestChild1Child;
      case 4:
        return props_ActionTestChild1SubConcept;
      case 5:
        return props_ActionTestChild2;
      case 6:
        return props_ActionTestChildToWrap1;
      case 7:
        return props_ActionTestChildToWrap2;
      case 8:
        return props_ActionTestChildWrapper;
      case 9:
        return props_ActionTestContainer;
      case 10:
        return props_ActionTestDefaultAbstractChild;
      case 11:
        return props_ActionTestDefaultChild1;
      case 12:
        return props_ActionTestDefaultChild2;
      case 13:
        return props_ActionTestSidetransformAbstractChild;
      case 14:
        return props_ActionTestSidetransformAddConceptAbstractChild;
      case 15:
        return props_ActionTestSidetransformAddConceptChild;
      case 16:
        return props_ActionTestSidetransformAnotherAbstractChild;
      case 17:
        return props_ActionTestSidetransformAnotherChild1;
      case 18:
        return props_ActionTestSidetransformAnotherChild2;
      case 19:
        return props_ActionTestSidetransformAnotherChildCommonSuperConcept;
      case 20:
        return props_ActionTestSidetransformChild1;
      case 21:
        return props_ActionTestSidetransformTestAncestor;
      case 22:
        return props_ActionTestSidetransformTestContainer;
    }
    throw new IllegalStateException();
  }
}
