package jetbrains.mps.lang.actions.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ActionTestAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestAbstractChildWrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestChild1 = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0c).create();
  private final ConceptPresentation props_ActionTestChild1Child = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestChild1SubConcept = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0e).create();
  private final ConceptPresentation props_ActionTestChild2 = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0f).create();
  private final ConceptPresentation props_ActionTestChildToWrap1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestChildToWrap2 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestChildWrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestDefaultAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestDefaultChild1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestDefaultChild2 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformAddConceptAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformAddConceptChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformAnotherAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformAnotherChild1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformAnotherChild2 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformAnotherChildCommonSuperConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformChild1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformTestAncestor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionTestSidetransformTestContainer = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ActionTestAbstractChild:
        return props_ActionTestAbstractChild;
      case LanguageConceptSwitch.ActionTestAbstractChildWrapper:
        return props_ActionTestAbstractChildWrapper;
      case LanguageConceptSwitch.ActionTestChild1:
        return props_ActionTestChild1;
      case LanguageConceptSwitch.ActionTestChild1Child:
        return props_ActionTestChild1Child;
      case LanguageConceptSwitch.ActionTestChild1SubConcept:
        return props_ActionTestChild1SubConcept;
      case LanguageConceptSwitch.ActionTestChild2:
        return props_ActionTestChild2;
      case LanguageConceptSwitch.ActionTestChildToWrap1:
        return props_ActionTestChildToWrap1;
      case LanguageConceptSwitch.ActionTestChildToWrap2:
        return props_ActionTestChildToWrap2;
      case LanguageConceptSwitch.ActionTestChildWrapper:
        return props_ActionTestChildWrapper;
      case LanguageConceptSwitch.ActionTestContainer:
        return props_ActionTestContainer;
      case LanguageConceptSwitch.ActionTestDefaultAbstractChild:
        return props_ActionTestDefaultAbstractChild;
      case LanguageConceptSwitch.ActionTestDefaultChild1:
        return props_ActionTestDefaultChild1;
      case LanguageConceptSwitch.ActionTestDefaultChild2:
        return props_ActionTestDefaultChild2;
      case LanguageConceptSwitch.ActionTestSidetransformAbstractChild:
        return props_ActionTestSidetransformAbstractChild;
      case LanguageConceptSwitch.ActionTestSidetransformAddConceptAbstractChild:
        return props_ActionTestSidetransformAddConceptAbstractChild;
      case LanguageConceptSwitch.ActionTestSidetransformAddConceptChild:
        return props_ActionTestSidetransformAddConceptChild;
      case LanguageConceptSwitch.ActionTestSidetransformAnotherAbstractChild:
        return props_ActionTestSidetransformAnotherAbstractChild;
      case LanguageConceptSwitch.ActionTestSidetransformAnotherChild1:
        return props_ActionTestSidetransformAnotherChild1;
      case LanguageConceptSwitch.ActionTestSidetransformAnotherChild2:
        return props_ActionTestSidetransformAnotherChild2;
      case LanguageConceptSwitch.ActionTestSidetransformAnotherChildCommonSuperConcept:
        return props_ActionTestSidetransformAnotherChildCommonSuperConcept;
      case LanguageConceptSwitch.ActionTestSidetransformChild1:
        return props_ActionTestSidetransformChild1;
      case LanguageConceptSwitch.ActionTestSidetransformTestAncestor:
        return props_ActionTestSidetransformTestAncestor;
      case LanguageConceptSwitch.ActionTestSidetransformTestContainer:
        return props_ActionTestSidetransformTestContainer;
    }
    return null;
  }
}
