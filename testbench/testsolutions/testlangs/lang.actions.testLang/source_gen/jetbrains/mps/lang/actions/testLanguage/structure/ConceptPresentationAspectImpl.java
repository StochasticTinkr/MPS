package jetbrains.mps.lang.actions.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ActionTestAbstractChild;
  private ConceptPresentation props_ActionTestAbstractChildWrapper;
  private ConceptPresentation props_ActionTestChild1;
  private ConceptPresentation props_ActionTestChild1Child;
  private ConceptPresentation props_ActionTestChild1SubConcept;
  private ConceptPresentation props_ActionTestChild2;
  private ConceptPresentation props_ActionTestChildToWrap1;
  private ConceptPresentation props_ActionTestChildToWrap2;
  private ConceptPresentation props_ActionTestChildWrapper;
  private ConceptPresentation props_ActionTestContainer;
  private ConceptPresentation props_ActionTestDefaultAbstractChild;
  private ConceptPresentation props_ActionTestDefaultChild1;
  private ConceptPresentation props_ActionTestDefaultChild2;
  private ConceptPresentation props_ActionTestSidetransformAbstractChild;
  private ConceptPresentation props_ActionTestSidetransformAddConceptAbstractChild;
  private ConceptPresentation props_ActionTestSidetransformAddConceptChild;
  private ConceptPresentation props_ActionTestSidetransformAnotherAbstractChild;
  private ConceptPresentation props_ActionTestSidetransformAnotherChild1;
  private ConceptPresentation props_ActionTestSidetransformAnotherChild2;
  private ConceptPresentation props_ActionTestSidetransformAnotherChildCommonSuperConcept;
  private ConceptPresentation props_ActionTestSidetransformChild1;
  private ConceptPresentation props_ActionTestSidetransformTestAncestor;
  private ConceptPresentation props_ActionTestSidetransformTestContainer;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ActionTestAbstractChild:
        if (props_ActionTestAbstractChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestAbstractChild = cpb.create();
        }
        return props_ActionTestAbstractChild;
      case LanguageConceptSwitch.ActionTestAbstractChildWrapper:
        if (props_ActionTestAbstractChildWrapper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestAbstractChildWrapper = cpb.create();
        }
        return props_ActionTestAbstractChildWrapper;
      case LanguageConceptSwitch.ActionTestChild1:
        if (props_ActionTestChild1 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.icon(IconContainer.RESOURCE_a0a1a0a2b0y);
          props_ActionTestChild1 = cpb.create();
        }
        return props_ActionTestChild1;
      case LanguageConceptSwitch.ActionTestChild1Child:
        if (props_ActionTestChild1Child == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestChild1Child = cpb.create();
        }
        return props_ActionTestChild1Child;
      case LanguageConceptSwitch.ActionTestChild1SubConcept:
        if (props_ActionTestChild1SubConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.icon(IconContainer.RESOURCE_a0a1a0a4b0y);
          props_ActionTestChild1SubConcept = cpb.create();
        }
        return props_ActionTestChild1SubConcept;
      case LanguageConceptSwitch.ActionTestChild2:
        if (props_ActionTestChild2 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.icon(IconContainer.RESOURCE_a0a1a0a5b0y);
          props_ActionTestChild2 = cpb.create();
        }
        return props_ActionTestChild2;
      case LanguageConceptSwitch.ActionTestChildToWrap1:
        if (props_ActionTestChildToWrap1 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestChildToWrap1 = cpb.create();
        }
        return props_ActionTestChildToWrap1;
      case LanguageConceptSwitch.ActionTestChildToWrap2:
        if (props_ActionTestChildToWrap2 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestChildToWrap2 = cpb.create();
        }
        return props_ActionTestChildToWrap2;
      case LanguageConceptSwitch.ActionTestChildWrapper:
        if (props_ActionTestChildWrapper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestChildWrapper = cpb.create();
        }
        return props_ActionTestChildWrapper;
      case LanguageConceptSwitch.ActionTestContainer:
        if (props_ActionTestContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestContainer = cpb.create();
        }
        return props_ActionTestContainer;
      case LanguageConceptSwitch.ActionTestDefaultAbstractChild:
        if (props_ActionTestDefaultAbstractChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestDefaultAbstractChild = cpb.create();
        }
        return props_ActionTestDefaultAbstractChild;
      case LanguageConceptSwitch.ActionTestDefaultChild1:
        if (props_ActionTestDefaultChild1 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestDefaultChild1 = cpb.create();
        }
        return props_ActionTestDefaultChild1;
      case LanguageConceptSwitch.ActionTestDefaultChild2:
        if (props_ActionTestDefaultChild2 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestDefaultChild2 = cpb.create();
        }
        return props_ActionTestDefaultChild2;
      case LanguageConceptSwitch.ActionTestSidetransformAbstractChild:
        if (props_ActionTestSidetransformAbstractChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestSidetransformAbstractChild = cpb.create();
        }
        return props_ActionTestSidetransformAbstractChild;
      case LanguageConceptSwitch.ActionTestSidetransformAddConceptAbstractChild:
        if (props_ActionTestSidetransformAddConceptAbstractChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestSidetransformAddConceptAbstractChild = cpb.create();
        }
        return props_ActionTestSidetransformAddConceptAbstractChild;
      case LanguageConceptSwitch.ActionTestSidetransformAddConceptChild:
        if (props_ActionTestSidetransformAddConceptChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestSidetransformAddConceptChild = cpb.create();
        }
        return props_ActionTestSidetransformAddConceptChild;
      case LanguageConceptSwitch.ActionTestSidetransformAnotherAbstractChild:
        if (props_ActionTestSidetransformAnotherAbstractChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestSidetransformAnotherAbstractChild = cpb.create();
        }
        return props_ActionTestSidetransformAnotherAbstractChild;
      case LanguageConceptSwitch.ActionTestSidetransformAnotherChild1:
        if (props_ActionTestSidetransformAnotherChild1 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestSidetransformAnotherChild1 = cpb.create();
        }
        return props_ActionTestSidetransformAnotherChild1;
      case LanguageConceptSwitch.ActionTestSidetransformAnotherChild2:
        if (props_ActionTestSidetransformAnotherChild2 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestSidetransformAnotherChild2 = cpb.create();
        }
        return props_ActionTestSidetransformAnotherChild2;
      case LanguageConceptSwitch.ActionTestSidetransformAnotherChildCommonSuperConcept:
        if (props_ActionTestSidetransformAnotherChildCommonSuperConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestSidetransformAnotherChildCommonSuperConcept = cpb.create();
        }
        return props_ActionTestSidetransformAnotherChildCommonSuperConcept;
      case LanguageConceptSwitch.ActionTestSidetransformChild1:
        if (props_ActionTestSidetransformChild1 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestSidetransformChild1 = cpb.create();
        }
        return props_ActionTestSidetransformChild1;
      case LanguageConceptSwitch.ActionTestSidetransformTestAncestor:
        if (props_ActionTestSidetransformTestAncestor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestSidetransformTestAncestor = cpb.create();
        }
        return props_ActionTestSidetransformTestAncestor;
      case LanguageConceptSwitch.ActionTestSidetransformTestContainer:
        if (props_ActionTestSidetransformTestContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ActionTestSidetransformTestContainer = cpb.create();
        }
        return props_ActionTestSidetransformTestContainer;
    }
    return null;
  }
}
