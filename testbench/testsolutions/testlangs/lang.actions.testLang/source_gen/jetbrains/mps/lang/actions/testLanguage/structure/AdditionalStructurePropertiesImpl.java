package jetbrains.mps.lang.actions.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_ActionTestAbstractChild = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestAbstractChildWrapper = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestChild1 = new ConceptPropsBuilder().icon("child1.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_ActionTestChild1Child = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestChild1SubConcept = new ConceptPropsBuilder().icon("child1subConcept.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_ActionTestChild2 = new ConceptPropsBuilder().icon("child2.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_ActionTestChildToWrap1 = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestChildToWrap2 = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestChildWrapper = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestContainer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestDefaultAbstractChild = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestDefaultChild1 = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestDefaultChild2 = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestSidetransformAbstractChild = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestSidetransformAddConceptAbstractChild = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestSidetransformAddConceptChild = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestSidetransformAnotherAbstractChild = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestSidetransformAnotherChild1 = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestSidetransformAnotherChild2 = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestSidetransformAnotherChildCommonSuperConcept = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestSidetransformChild1 = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestSidetransformTestAncestor = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionTestSidetransformTestContainer = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0y.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_ActionTestAbstractChild;
          }
          break;
        case 1:
          if (true) {
            return props_ActionTestAbstractChildWrapper;
          }
          break;
        case 2:
          if (true) {
            return props_ActionTestChild1;
          }
          break;
        case 3:
          if (true) {
            return props_ActionTestChild1Child;
          }
          break;
        case 4:
          if (true) {
            return props_ActionTestChild1SubConcept;
          }
          break;
        case 5:
          if (true) {
            return props_ActionTestChild2;
          }
          break;
        case 6:
          if (true) {
            return props_ActionTestChildToWrap1;
          }
          break;
        case 7:
          if (true) {
            return props_ActionTestChildToWrap2;
          }
          break;
        case 8:
          if (true) {
            return props_ActionTestChildWrapper;
          }
          break;
        case 9:
          if (true) {
            return props_ActionTestContainer;
          }
          break;
        case 10:
          if (true) {
            return props_ActionTestDefaultAbstractChild;
          }
          break;
        case 11:
          if (true) {
            return props_ActionTestDefaultChild1;
          }
          break;
        case 12:
          if (true) {
            return props_ActionTestDefaultChild2;
          }
          break;
        case 13:
          if (true) {
            return props_ActionTestSidetransformAbstractChild;
          }
          break;
        case 14:
          if (true) {
            return props_ActionTestSidetransformAddConceptAbstractChild;
          }
          break;
        case 15:
          if (true) {
            return props_ActionTestSidetransformAddConceptChild;
          }
          break;
        case 16:
          if (true) {
            return props_ActionTestSidetransformAnotherAbstractChild;
          }
          break;
        case 17:
          if (true) {
            return props_ActionTestSidetransformAnotherChild1;
          }
          break;
        case 18:
          if (true) {
            return props_ActionTestSidetransformAnotherChild2;
          }
          break;
        case 19:
          if (true) {
            return props_ActionTestSidetransformAnotherChildCommonSuperConcept;
          }
          break;
        case 20:
          if (true) {
            return props_ActionTestSidetransformChild1;
          }
          break;
        case 21:
          if (true) {
            return props_ActionTestSidetransformTestAncestor;
          }
          break;
        case 22:
          if (true) {
            return props_ActionTestSidetransformTestContainer;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0y = buildConceptIndices(MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x2365c14e1671a9caL, "ActionTestAbstractChild"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x47ad1fca2ec53f71L, "ActionTestAbstractChildWrapper"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x2365c14e167220f9L, "ActionTestChild1"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x7f805f0c2dd45b4eL, "ActionTestChild1Child"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x2c99ba4dd5ff2533L, "ActionTestChild1SubConcept"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x2365c14e1672224dL, "ActionTestChild2"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x47ad1fca2ee71badL, "ActionTestChildToWrap1"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x2622c47afd434fd2L, "ActionTestChildToWrap2"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x47ad1fca2ec9ad4dL, "ActionTestChildWrapper"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x2365c14e1671696fL, "ActionTestContainer"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x73dfe0fc25514b8dL, "ActionTestDefaultAbstractChild"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x73dfe0fc25516733L, "ActionTestDefaultChild1"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x73dfe0fc25516dd5L, "ActionTestDefaultChild2"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x179f28a7ade471f3L, "ActionTestSidetransformAbstractChild"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x43d1b15d415e8d80L, "ActionTestSidetransformAddConceptAbstractChild"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x43d1b15d4168a426L, "ActionTestSidetransformAddConceptChild"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x2c35cefefca54d96L, "ActionTestSidetransformAnotherAbstractChild"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x2c35cefefca55189L, "ActionTestSidetransformAnotherChild1"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x2c35cefefca551bdL, "ActionTestSidetransformAnotherChild2"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x2c35cefefcaa0dd0L, "ActionTestSidetransformAnotherChildCommonSuperConcept"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x44969b12b8c94c1bL, "ActionTestSidetransformChild1"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x2c35cefefc9cfa78L, "ActionTestSidetransformTestAncestor"), MetaAdapterFactory.getConcept(0x737ed1fffa634ebcL, 0xa834435499b23c64L, 0x179f28a7ade381e5L, "ActionTestSidetransformTestContainer"));
}
