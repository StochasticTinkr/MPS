package jetbrains.mps.lang.editor.menus.substitute.testLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.transformation.TransformationMenuBase;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.editor.menus.transformation.MenuLocations;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.editor.menus.MenuPart;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.editor.menus.transformation.ReferenceMenuTransformationMenuPart;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.lang.editor.menus.transformation.ReferenceTransformationMenuItem;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cellMenu.SubstituteCompletionActionItem;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Objects;
import jetbrains.mps.smodel.runtime.IconResource;

public class TestSubstituteParentPropertyAndReference_ReferenceMenuPart extends TransformationMenuBase {
  private final Set<String> myLocations = SetSequence.fromSetAndArray(new HashSet<String>(), MenuLocations.SUBSTITUTE);
  @Override
  public boolean isApplicableToLocation(@NotNull String location) {
    return SetSequence.fromSet(myLocations).contains(location);
  }

  @NotNull
  @Override
  public List<TransformationMenuItem> createMenuItems(@NotNull TransformationMenuContext context) {
    context.getEditorMenuTrace().pushTraceInfo();
    context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("named transformation menu " + "TestSubstituteParentPropertyAndReference_ReferenceMenuPart", new SNodePointer("r:d793eea9-8b7b-4c58-a7a2-62336f54dcce(jetbrains.mps.lang.editor.menus.substitute.testLanguage.editor)", "476103360382571677")));
    try {
      return super.createMenuItems(context);
    } finally {
      context.getEditorMenuTrace().popTraceInfo();
    }
  }

  @Override
  @NotNull
  protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts(TransformationMenuContext _context) {
    List<MenuPart<TransformationMenuItem, TransformationMenuContext>> result = new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>();
    if (ListSequence.fromListAndArray(new ArrayList<String>(), MenuLocations.SUBSTITUTE).contains(_context.getMenuLocation())) {
      result.add(new TestSubstituteParentPropertyAndReference_ReferenceMenuPart.TMP_Reference_17vnwe_a0());
    }
    return result;
  }

  public class TMP_Reference_17vnwe_a0 extends ReferenceMenuTransformationMenuPart {
    @NotNull
    @Override
    public List<TransformationMenuItem> createItems(@NotNull TransformationMenuContext context) {
      context.getEditorMenuTrace().pushTraceInfo();
      try {
        SReferenceLink referenceLink = getReferenceLink(context);
        String description = "Include menu for the reference";
        if (referenceLink != null) {
          description += ": " + referenceLink.getName();
        }
        context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase(description, new SNodePointer("r:d793eea9-8b7b-4c58-a7a2-62336f54dcce(jetbrains.mps.lang.editor.menus.substitute.testLanguage.editor)", "476103360382572733")));
        return super.createItems(context);
      } finally {
        context.getEditorMenuTrace().popTraceInfo();
      }
    }

    @NotNull
    @Override
    protected ReferenceTransformationMenuItem createItem(@NotNull TransformationMenuContext context, @NotNull SReferenceLink referenceLink, final SNode targetNode) {
      return new TestSubstituteParentPropertyAndReference_ReferenceMenuPart.TMP_Reference_17vnwe_a0.Item(referenceLink, targetNode, context);
    }
    private class Item extends ReferenceTransformationMenuItem implements SubstituteCompletionActionItem {
      private final TransformationMenuContext _context;
      private final SNode targetNode;
      private Item(SReferenceLink link, SNode _targetNode, TransformationMenuContext context) {
        super(link, _targetNode, context);
        targetNode = _targetNode;
        _context = context;
      }

      @Nullable
      @Override
      public String getLabelText(String pattern) {
        boolean val = _context.getEditorContext() != null && _context.getNode() != null && _context.getModel() != null && targetNode != null;
        return SPropertyOperations.getString(targetNode, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
      }
      @Nullable
      @Override
      public String getVisibleText(String pattern) {
        boolean val = _context.getEditorContext() != null && _context.getNode() != null && _context.getModel() != null && targetNode != null;
        return SPropertyOperations.getString(targetNode, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "()";
      }
      @Nullable
      @Override
      public boolean canExecute(String pattern) {
        boolean val = _context.getEditorContext() != null && _context.getNode() != null && _context.getModel() != null && targetNode != null;
        return Objects.equals(SPropertyOperations.getString(targetNode, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), "nodeToReference1");
      }

      public IconResource getIcon(String pattern) {
        boolean val = _context.getEditorContext() != null && _context.getNode() != null && _context.getModel() != null && targetNode != null;

        return IconContainer.RESOURCE_a2a8d7;
      }
      @Override
      public String getShortDescriptionText(@NotNull String pattern) {
        boolean val = _context.getEditorContext() != null && _context.getNode() != null && _context.getModel() != null && targetNode != null;

        return "custom reference action part";
      }
    }
    @Override
    protected SReferenceLink getReferenceLink(TransformationMenuContext context) {
      return MetaAdapterFactory.getReferenceLink(0xcb6d57037c8e46a9L, 0xb993c1373dc0942fL, 0x69b757bd7bd1801L, 0x70e6651a9408d373L, "referenceWithReferenceMenuPart");
    }
  }
}
