package jetbrains.mps.lang.editor.menus.substitute.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int TestConceptForMenuParameterizedByPrimitiveType = 0;
  public static final int TestSubstitituteAbstractChildAmbigousPosition = 1;
  public static final int TestSubstitituteAbstractSubChildAmbigousPosition = 2;
  public static final int TestSubstitituteChildAmbigousPosition1 = 3;
  public static final int TestSubstitituteChildAmbigousPosition2 = 4;
  public static final int TestSubstitituteChildOfWrapper = 5;
  public static final int TestSubstitituteParentOfWrapper = 6;
  public static final int TestSubstitituteSubChildAmbigousPosition1 = 7;
  public static final int TestSubstitituteSubChildAmbigousPosition2 = 8;
  public static final int TestSubstitituteWrapper = 9;
  public static final int TestSubstituteAbstractChildWithConstraints = 10;
  public static final int TestSubstituteChild = 11;
  public static final int TestSubstituteChildBrother = 12;
  public static final int TestSubstituteChildSuper = 13;
  public static final int TestSubstituteChildToSpecialize = 14;
  public static final int TestSubstituteChildWithConstraints1 = 15;
  public static final int TestSubstituteChildWithConstraints2 = 16;
  public static final int TestSubstituteChildWithConstraints3 = 17;
  public static final int TestSubstituteChildWithConstraintsAbstractWrapper = 18;
  public static final int TestSubstituteChildWithConstraintsToWrap = 19;
  public static final int TestSubstituteChildWithConstraintsWrapper1 = 20;
  public static final int TestSubstituteChildWithConstraintsWrapper2 = 21;
  public static final int TestSubstituteChildWithConstraintsWrapper3 = 22;
  public static final int TestSubstituteConceptChildToReference = 23;
  public static final int TestSubstituteConceptToWrap = 24;
  public static final int TestSubstituteGrandChildWithConstraints = 25;
  public static final int TestSubstituteGrandChildWithConstraintsProhibited = 26;
  public static final int TestSubstituteNotSubconceptOfChild = 27;
  public static final int TestSubstituteParent = 28;
  public static final int TestSubstituteParentToReference = 29;
  public static final int TestSubstituteParentWithConstraints = 30;
  public static final int TestSubstituteSpecialChild = 31;
  public static final int TestSubstituteSpecialChildAttribute = 32;
  public static final int TestSubstituteSpecialParent = 33;
  public static final int TestSubstituteSpecialSubChild = 34;
  public static final int TestSubstituteSubChild1 = 35;
  public static final int TestSubstituteSubChild2 = 36;
  public static final int TestSubstituteSubChildSmartReference = 37;
  public static final int TestSubstituteSubConceptToWrap = 38;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xcb6d57037c8e46a9L, 0xb993c1373dc0942fL);
    builder.put(0x75a761fb50351afbL, TestConceptForMenuParameterizedByPrimitiveType);
    builder.put(0x7f53d2199235476bL, TestSubstitituteAbstractChildAmbigousPosition);
    builder.put(0x7f53d21992362f22L, TestSubstitituteAbstractSubChildAmbigousPosition);
    builder.put(0x7f53d21992378bccL, TestSubstitituteChildAmbigousPosition1);
    builder.put(0x7f53d21992378f83L, TestSubstitituteChildAmbigousPosition2);
    builder.put(0x401156263ff3470cL, TestSubstitituteChildOfWrapper);
    builder.put(0x401156263ff2fe4cL, TestSubstitituteParentOfWrapper);
    builder.put(0x7f53d21992386b18L, TestSubstitituteSubChildAmbigousPosition1);
    builder.put(0x7f53d21992386b19L, TestSubstitituteSubChildAmbigousPosition2);
    builder.put(0x401156263ff3470bL, TestSubstitituteWrapper);
    builder.put(0x9c8de75f2cc6e9bL, TestSubstituteAbstractChildWithConstraints);
    builder.put(0x7ce1116e3a6fb0beL, TestSubstituteChild);
    builder.put(0x7f0007d60cfb69f5L, TestSubstituteChildBrother);
    builder.put(0x7f0007d60cfb698eL, TestSubstituteChildSuper);
    builder.put(0x38b257ae54d85a97L, TestSubstituteChildToSpecialize);
    builder.put(0x9c8de75f2ccf9b4L, TestSubstituteChildWithConstraints1);
    builder.put(0x9c8de75f2ccf9b3L, TestSubstituteChildWithConstraints2);
    builder.put(0x9c8de75f2ceddc8L, TestSubstituteChildWithConstraints3);
    builder.put(0x9c8de75f2d36adbL, TestSubstituteChildWithConstraintsAbstractWrapper);
    builder.put(0x9c8de75f2d21688L, TestSubstituteChildWithConstraintsToWrap);
    builder.put(0x9c8de75f2d21687L, TestSubstituteChildWithConstraintsWrapper1);
    builder.put(0x9c8de75f2d36ae2L, TestSubstituteChildWithConstraintsWrapper2);
    builder.put(0x9c8de75f2d41c8eL, TestSubstituteChildWithConstraintsWrapper3);
    builder.put(0x7ce1116e3a6ff2b0L, TestSubstituteConceptChildToReference);
    builder.put(0x7ce1116e3a6ff2aaL, TestSubstituteConceptToWrap);
    builder.put(0x2d4683aef72697c0L, TestSubstituteGrandChildWithConstraints);
    builder.put(0x73096e13d1e2b4e1L, TestSubstituteGrandChildWithConstraintsProhibited);
    builder.put(0x7f53d21992314d41L, TestSubstituteNotSubconceptOfChild);
    builder.put(0x7ce1116e3a6fb0bdL, TestSubstituteParent);
    builder.put(0x7ce1116e3aa7c75fL, TestSubstituteParentToReference);
    builder.put(0x9c8de75f2cc6e9aL, TestSubstituteParentWithConstraints);
    builder.put(0x38b257ae54d85a98L, TestSubstituteSpecialChild);
    builder.put(0x51ed57d5dc9c3b8L, TestSubstituteSpecialChildAttribute);
    builder.put(0x38b257ae54d85a99L, TestSubstituteSpecialParent);
    builder.put(0x77c1a85c9f90b75bL, TestSubstituteSpecialSubChild);
    builder.put(0x7ce1116e3a6ff2a8L, TestSubstituteSubChild1);
    builder.put(0x7ce1116e3a6ff2a9L, TestSubstituteSubChild2);
    builder.put(0x7ce1116e3a6ff2aeL, TestSubstituteSubChildSmartReference);
    builder.put(0x7ce1116e3a6ff2abL, TestSubstituteSubConceptToWrap);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
