package jetbrains.mps.lang.editor.menus.substitute.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_TestConceptForMenuParameterizedByPrimitiveType;
  private ConceptPresentation props_TestSubstitituteAbstractChildAmbigousPosition;
  private ConceptPresentation props_TestSubstitituteAbstractSubChildAmbigousPosition;
  private ConceptPresentation props_TestSubstitituteChildAmbigousPosition1;
  private ConceptPresentation props_TestSubstitituteChildAmbigousPosition2;
  private ConceptPresentation props_TestSubstitituteChildOfWrapper;
  private ConceptPresentation props_TestSubstitituteParentOfWrapper;
  private ConceptPresentation props_TestSubstitituteSubChildAmbigousPosition1;
  private ConceptPresentation props_TestSubstitituteSubChildAmbigousPosition2;
  private ConceptPresentation props_TestSubstitituteWrapper;
  private ConceptPresentation props_TestSubstituteAbstractChildWithConstraints;
  private ConceptPresentation props_TestSubstituteChild;
  private ConceptPresentation props_TestSubstituteChildBrother;
  private ConceptPresentation props_TestSubstituteChildSuper;
  private ConceptPresentation props_TestSubstituteChildToSpecialize;
  private ConceptPresentation props_TestSubstituteChildWithConstraints1;
  private ConceptPresentation props_TestSubstituteChildWithConstraints2;
  private ConceptPresentation props_TestSubstituteChildWithConstraints3;
  private ConceptPresentation props_TestSubstituteChildWithConstraintsAbstractWrapper;
  private ConceptPresentation props_TestSubstituteChildWithConstraintsToWrap;
  private ConceptPresentation props_TestSubstituteChildWithConstraintsWrapper1;
  private ConceptPresentation props_TestSubstituteChildWithConstraintsWrapper2;
  private ConceptPresentation props_TestSubstituteChildWithConstraintsWrapper3;
  private ConceptPresentation props_TestSubstituteConceptChildToReference;
  private ConceptPresentation props_TestSubstituteExceptionActionCanSubstituteChild;
  private ConceptPresentation props_TestSubstituteExceptionActionDescriptionTextChild;
  private ConceptPresentation props_TestSubstituteExceptionActionIconChild;
  private ConceptPresentation props_TestSubstituteExceptionActionMatchingTextChild;
  private ConceptPresentation props_TestSubstituteExceptionActionTypeChild;
  private ConceptPresentation props_TestSubstituteExceptionConceptListChild;
  private ConceptPresentation props_TestSubstituteExceptionGroupChild;
  private ConceptPresentation props_TestSubstituteExceptionIncludeMenuChild;
  private ConceptPresentation props_TestSubstituteExceptionParameterizedChild;
  private ConceptPresentation props_TestSubstituteExceptionParent;
  private ConceptPresentation props_TestSubstituteExceptionReferenceDescriptionTextChild;
  private ConceptPresentation props_TestSubstituteExceptionReferenceMatchingTextChild;
  private ConceptPresentation props_TestSubstituteExceptionReferenceVisibleMatchingTextChild;
  private ConceptPresentation props_TestSubstituteExceptionSubconceptsChild;
  private ConceptPresentation props_TestSubstituteExceptionSubconceptsSubChild;
  private ConceptPresentation props_TestSubstituteExceptionWrapMenuChild;
  private ConceptPresentation props_TestSubstituteGrandChildWithConstraints;
  private ConceptPresentation props_TestSubstituteGrandChildWithConstraintsProhibited;
  private ConceptPresentation props_TestSubstituteNotSubconceptOfChild;
  private ConceptPresentation props_TestSubstituteParent;
  private ConceptPresentation props_TestSubstituteParentToReference;
  private ConceptPresentation props_TestSubstituteParentWithConstraints;
  private ConceptPresentation props_TestSubstituteSpecialChild;
  private ConceptPresentation props_TestSubstituteSpecialChildAttribute;
  private ConceptPresentation props_TestSubstituteSpecialParent;
  private ConceptPresentation props_TestSubstituteSpecialSubChild;
  private ConceptPresentation props_TestSubstituteSubChild1;
  private ConceptPresentation props_TestSubstituteSubChild2;
  private ConceptPresentation props_TestSubstituteSubChildSmartReference;
  private ConceptPresentation props_TestSubstituteToWrapFromSubstituteMenu;
  private ConceptPresentation props_TestSubstituteToWrapFromTransformMenu;
  private ConceptPresentation props_TestSubstitute_DuplicationMenu_ChildIncludeDefaultAndNullMenu;
  private ConceptPresentation props_TestSubstitute_DuplicationMenu_ChildIncludeDiffernetMenus;
  private ConceptPresentation props_TestSubstitute_DuplicationMenu_ChildIncludeSameMenuTwice;
  private ConceptPresentation props_TestSubstitute_DuplicationMenu_ChildSubconcept;
  private ConceptPresentation props_TestSubstitute_DuplicationMenu_ChildWrapDifferentMenus;
  private ConceptPresentation props_TestSubstitute_DuplicationMenu_ChildWrapSameMenuTwice;
  private ConceptPresentation props_TestSubstitute_DuplicationMenu_Interface;
  private ConceptPresentation props_TestSubstitute_DuplicationMenu_Parent;
  private ConceptPresentation props_TestSubstitute_DuplicationMenu_SubInterface1;
  private ConceptPresentation props_TestSubstitute_DuplicationMenu_SubInterface2;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.TestConceptForMenuParameterizedByPrimitiveType:
        if (props_TestConceptForMenuParameterizedByPrimitiveType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestConceptForMenuParameterizedByPrimitiveType");
          props_TestConceptForMenuParameterizedByPrimitiveType = cpb.create();
        }
        return props_TestConceptForMenuParameterizedByPrimitiveType;
      case LanguageConceptSwitch.TestSubstitituteAbstractChildAmbigousPosition:
        if (props_TestSubstitituteAbstractChildAmbigousPosition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TestSubstitituteAbstractChildAmbigousPosition = cpb.create();
        }
        return props_TestSubstitituteAbstractChildAmbigousPosition;
      case LanguageConceptSwitch.TestSubstitituteAbstractSubChildAmbigousPosition:
        if (props_TestSubstitituteAbstractSubChildAmbigousPosition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TestSubstitituteAbstractSubChildAmbigousPosition = cpb.create();
        }
        return props_TestSubstitituteAbstractSubChildAmbigousPosition;
      case LanguageConceptSwitch.TestSubstitituteChildAmbigousPosition1:
        if (props_TestSubstitituteChildAmbigousPosition1 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ambigous");
          props_TestSubstitituteChildAmbigousPosition1 = cpb.create();
        }
        return props_TestSubstitituteChildAmbigousPosition1;
      case LanguageConceptSwitch.TestSubstitituteChildAmbigousPosition2:
        if (props_TestSubstitituteChildAmbigousPosition2 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ambigous");
          props_TestSubstitituteChildAmbigousPosition2 = cpb.create();
        }
        return props_TestSubstitituteChildAmbigousPosition2;
      case LanguageConceptSwitch.TestSubstitituteChildOfWrapper:
        if (props_TestSubstitituteChildOfWrapper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("test substitute child of wrapper");
          props_TestSubstitituteChildOfWrapper = cpb.create();
        }
        return props_TestSubstitituteChildOfWrapper;
      case LanguageConceptSwitch.TestSubstitituteParentOfWrapper:
        if (props_TestSubstitituteParentOfWrapper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstitituteParentOfWrapper");
          props_TestSubstitituteParentOfWrapper = cpb.create();
        }
        return props_TestSubstitituteParentOfWrapper;
      case LanguageConceptSwitch.TestSubstitituteSubChildAmbigousPosition1:
        if (props_TestSubstitituteSubChildAmbigousPosition1 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("subambigous");
          props_TestSubstitituteSubChildAmbigousPosition1 = cpb.create();
        }
        return props_TestSubstitituteSubChildAmbigousPosition1;
      case LanguageConceptSwitch.TestSubstitituteSubChildAmbigousPosition2:
        if (props_TestSubstitituteSubChildAmbigousPosition2 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("subambigous");
          props_TestSubstitituteSubChildAmbigousPosition2 = cpb.create();
        }
        return props_TestSubstitituteSubChildAmbigousPosition2;
      case LanguageConceptSwitch.TestSubstitituteWrapper:
        if (props_TestSubstitituteWrapper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstitituteWrapper");
          props_TestSubstitituteWrapper = cpb.create();
        }
        return props_TestSubstitituteWrapper;
      case LanguageConceptSwitch.TestSubstituteAbstractChildWithConstraints:
        if (props_TestSubstituteAbstractChildWithConstraints == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TestSubstituteAbstractChildWithConstraints = cpb.create();
        }
        return props_TestSubstituteAbstractChildWithConstraints;
      case LanguageConceptSwitch.TestSubstituteChild:
        if (props_TestSubstituteChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TestSubstituteChild = cpb.create();
        }
        return props_TestSubstituteChild;
      case LanguageConceptSwitch.TestSubstituteChildBrother:
        if (props_TestSubstituteChildBrother == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("brother child");
          props_TestSubstituteChildBrother = cpb.create();
        }
        return props_TestSubstituteChildBrother;
      case LanguageConceptSwitch.TestSubstituteChildSuper:
        if (props_TestSubstituteChildSuper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TestSubstituteChildSuper = cpb.create();
        }
        return props_TestSubstituteChildSuper;
      case LanguageConceptSwitch.TestSubstituteChildToSpecialize:
        if (props_TestSubstituteChildToSpecialize == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteChildToSpecialize");
          props_TestSubstituteChildToSpecialize = cpb.create();
        }
        return props_TestSubstituteChildToSpecialize;
      case LanguageConceptSwitch.TestSubstituteChildWithConstraints1:
        if (props_TestSubstituteChildWithConstraints1 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TestSubstituteChildWithConstraints1 = cpb.create();
        }
        return props_TestSubstituteChildWithConstraints1;
      case LanguageConceptSwitch.TestSubstituteChildWithConstraints2:
        if (props_TestSubstituteChildWithConstraints2 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TestSubstituteChildWithConstraints2 = cpb.create();
        }
        return props_TestSubstituteChildWithConstraints2;
      case LanguageConceptSwitch.TestSubstituteChildWithConstraints3:
        if (props_TestSubstituteChildWithConstraints3 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteChildWithConstraints3");
          props_TestSubstituteChildWithConstraints3 = cpb.create();
        }
        return props_TestSubstituteChildWithConstraints3;
      case LanguageConceptSwitch.TestSubstituteChildWithConstraintsAbstractWrapper:
        if (props_TestSubstituteChildWithConstraintsAbstractWrapper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TestSubstituteChildWithConstraintsAbstractWrapper = cpb.create();
        }
        return props_TestSubstituteChildWithConstraintsAbstractWrapper;
      case LanguageConceptSwitch.TestSubstituteChildWithConstraintsToWrap:
        if (props_TestSubstituteChildWithConstraintsToWrap == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteChildWithConstraintsToWrap");
          props_TestSubstituteChildWithConstraintsToWrap = cpb.create();
        }
        return props_TestSubstituteChildWithConstraintsToWrap;
      case LanguageConceptSwitch.TestSubstituteChildWithConstraintsWrapper1:
        if (props_TestSubstituteChildWithConstraintsWrapper1 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteChildWithConstraintsWrapper1");
          props_TestSubstituteChildWithConstraintsWrapper1 = cpb.create();
        }
        return props_TestSubstituteChildWithConstraintsWrapper1;
      case LanguageConceptSwitch.TestSubstituteChildWithConstraintsWrapper2:
        if (props_TestSubstituteChildWithConstraintsWrapper2 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteChildWithConstraintsWrapper2");
          props_TestSubstituteChildWithConstraintsWrapper2 = cpb.create();
        }
        return props_TestSubstituteChildWithConstraintsWrapper2;
      case LanguageConceptSwitch.TestSubstituteChildWithConstraintsWrapper3:
        if (props_TestSubstituteChildWithConstraintsWrapper3 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteChildWithConstraintsWrapper3");
          props_TestSubstituteChildWithConstraintsWrapper3 = cpb.create();
        }
        return props_TestSubstituteChildWithConstraintsWrapper3;
      case LanguageConceptSwitch.TestSubstituteConceptChildToReference:
        if (props_TestSubstituteConceptChildToReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TestSubstituteConceptChildToReference = cpb.create();
        }
        return props_TestSubstituteConceptChildToReference;
      case LanguageConceptSwitch.TestSubstituteExceptionActionCanSubstituteChild:
        if (props_TestSubstituteExceptionActionCanSubstituteChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionActionCanSubstituteChild");
          props_TestSubstituteExceptionActionCanSubstituteChild = cpb.create();
        }
        return props_TestSubstituteExceptionActionCanSubstituteChild;
      case LanguageConceptSwitch.TestSubstituteExceptionActionDescriptionTextChild:
        if (props_TestSubstituteExceptionActionDescriptionTextChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionActionDescriptionTextChild");
          props_TestSubstituteExceptionActionDescriptionTextChild = cpb.create();
        }
        return props_TestSubstituteExceptionActionDescriptionTextChild;
      case LanguageConceptSwitch.TestSubstituteExceptionActionIconChild:
        if (props_TestSubstituteExceptionActionIconChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionActionIconChild");
          props_TestSubstituteExceptionActionIconChild = cpb.create();
        }
        return props_TestSubstituteExceptionActionIconChild;
      case LanguageConceptSwitch.TestSubstituteExceptionActionMatchingTextChild:
        if (props_TestSubstituteExceptionActionMatchingTextChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionActionMatchingTextChild");
          props_TestSubstituteExceptionActionMatchingTextChild = cpb.create();
        }
        return props_TestSubstituteExceptionActionMatchingTextChild;
      case LanguageConceptSwitch.TestSubstituteExceptionActionTypeChild:
        if (props_TestSubstituteExceptionActionTypeChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionActionTypeChild");
          props_TestSubstituteExceptionActionTypeChild = cpb.create();
        }
        return props_TestSubstituteExceptionActionTypeChild;
      case LanguageConceptSwitch.TestSubstituteExceptionConceptListChild:
        if (props_TestSubstituteExceptionConceptListChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionConceptListChild");
          props_TestSubstituteExceptionConceptListChild = cpb.create();
        }
        return props_TestSubstituteExceptionConceptListChild;
      case LanguageConceptSwitch.TestSubstituteExceptionGroupChild:
        if (props_TestSubstituteExceptionGroupChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionGroupChild");
          props_TestSubstituteExceptionGroupChild = cpb.create();
        }
        return props_TestSubstituteExceptionGroupChild;
      case LanguageConceptSwitch.TestSubstituteExceptionIncludeMenuChild:
        if (props_TestSubstituteExceptionIncludeMenuChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionIncludeMenuChild");
          props_TestSubstituteExceptionIncludeMenuChild = cpb.create();
        }
        return props_TestSubstituteExceptionIncludeMenuChild;
      case LanguageConceptSwitch.TestSubstituteExceptionParameterizedChild:
        if (props_TestSubstituteExceptionParameterizedChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionParameterizedChild");
          props_TestSubstituteExceptionParameterizedChild = cpb.create();
        }
        return props_TestSubstituteExceptionParameterizedChild;
      case LanguageConceptSwitch.TestSubstituteExceptionParent:
        if (props_TestSubstituteExceptionParent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionParent");
          props_TestSubstituteExceptionParent = cpb.create();
        }
        return props_TestSubstituteExceptionParent;
      case LanguageConceptSwitch.TestSubstituteExceptionReferenceDescriptionTextChild:
        if (props_TestSubstituteExceptionReferenceDescriptionTextChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionReferenceDescriptionTextChild");
          props_TestSubstituteExceptionReferenceDescriptionTextChild = cpb.create();
        }
        return props_TestSubstituteExceptionReferenceDescriptionTextChild;
      case LanguageConceptSwitch.TestSubstituteExceptionReferenceMatchingTextChild:
        if (props_TestSubstituteExceptionReferenceMatchingTextChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionReferenceMatchingTextChild");
          props_TestSubstituteExceptionReferenceMatchingTextChild = cpb.create();
        }
        return props_TestSubstituteExceptionReferenceMatchingTextChild;
      case LanguageConceptSwitch.TestSubstituteExceptionReferenceVisibleMatchingTextChild:
        if (props_TestSubstituteExceptionReferenceVisibleMatchingTextChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionReferenceVisibleMatchingTextChild");
          props_TestSubstituteExceptionReferenceVisibleMatchingTextChild = cpb.create();
        }
        return props_TestSubstituteExceptionReferenceVisibleMatchingTextChild;
      case LanguageConceptSwitch.TestSubstituteExceptionSubconceptsChild:
        if (props_TestSubstituteExceptionSubconceptsChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionSubconceptsChild");
          props_TestSubstituteExceptionSubconceptsChild = cpb.create();
        }
        return props_TestSubstituteExceptionSubconceptsChild;
      case LanguageConceptSwitch.TestSubstituteExceptionSubconceptsSubChild:
        if (props_TestSubstituteExceptionSubconceptsSubChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionSubconceptsSubChild");
          props_TestSubstituteExceptionSubconceptsSubChild = cpb.create();
        }
        return props_TestSubstituteExceptionSubconceptsSubChild;
      case LanguageConceptSwitch.TestSubstituteExceptionWrapMenuChild:
        if (props_TestSubstituteExceptionWrapMenuChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteExceptionWrapMenuChild");
          props_TestSubstituteExceptionWrapMenuChild = cpb.create();
        }
        return props_TestSubstituteExceptionWrapMenuChild;
      case LanguageConceptSwitch.TestSubstituteGrandChildWithConstraints:
        if (props_TestSubstituteGrandChildWithConstraints == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteGrandChildWithConstraints");
          props_TestSubstituteGrandChildWithConstraints = cpb.create();
        }
        return props_TestSubstituteGrandChildWithConstraints;
      case LanguageConceptSwitch.TestSubstituteGrandChildWithConstraintsProhibited:
        if (props_TestSubstituteGrandChildWithConstraintsProhibited == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("see TestTransform_ChildWithConstraints_CanBeAncestor_GrandChild ");
          cpb.rawPresentation("TestSubstituteGrandChildWithConstraintsProhibited");
          props_TestSubstituteGrandChildWithConstraintsProhibited = cpb.create();
        }
        return props_TestSubstituteGrandChildWithConstraintsProhibited;
      case LanguageConceptSwitch.TestSubstituteNotSubconceptOfChild:
        if (props_TestSubstituteNotSubconceptOfChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteNotSubconceptOfChild");
          props_TestSubstituteNotSubconceptOfChild = cpb.create();
        }
        return props_TestSubstituteNotSubconceptOfChild;
      case LanguageConceptSwitch.TestSubstituteParent:
        if (props_TestSubstituteParent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteParent");
          props_TestSubstituteParent = cpb.create();
        }
        return props_TestSubstituteParent;
      case LanguageConceptSwitch.TestSubstituteParentToReference:
        if (props_TestSubstituteParentToReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TestSubstituteParentToReference = cpb.create();
        }
        return props_TestSubstituteParentToReference;
      case LanguageConceptSwitch.TestSubstituteParentWithConstraints:
        if (props_TestSubstituteParentWithConstraints == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteParentWithConstraints");
          props_TestSubstituteParentWithConstraints = cpb.create();
        }
        return props_TestSubstituteParentWithConstraints;
      case LanguageConceptSwitch.TestSubstituteSpecialChild:
        if (props_TestSubstituteSpecialChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("special");
          props_TestSubstituteSpecialChild = cpb.create();
        }
        return props_TestSubstituteSpecialChild;
      case LanguageConceptSwitch.TestSubstituteSpecialChildAttribute:
        if (props_TestSubstituteSpecialChildAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteSpecialChildAttribute");
          props_TestSubstituteSpecialChildAttribute = cpb.create();
        }
        return props_TestSubstituteSpecialChildAttribute;
      case LanguageConceptSwitch.TestSubstituteSpecialParent:
        if (props_TestSubstituteSpecialParent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstituteSpecialParent");
          props_TestSubstituteSpecialParent = cpb.create();
        }
        return props_TestSubstituteSpecialParent;
      case LanguageConceptSwitch.TestSubstituteSpecialSubChild:
        if (props_TestSubstituteSpecialSubChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("sub-child");
          props_TestSubstituteSpecialSubChild = cpb.create();
        }
        return props_TestSubstituteSpecialSubChild;
      case LanguageConceptSwitch.TestSubstituteSubChild1:
        if (props_TestSubstituteSubChild1 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TestSubstituteSubChild1 = cpb.create();
        }
        return props_TestSubstituteSubChild1;
      case LanguageConceptSwitch.TestSubstituteSubChild2:
        if (props_TestSubstituteSubChild2 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TestSubstituteSubChild2 = cpb.create();
        }
        return props_TestSubstituteSubChild2;
      case LanguageConceptSwitch.TestSubstituteSubChildSmartReference:
        if (props_TestSubstituteSubChildSmartReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TestSubstituteSubChildSmartReference = cpb.create();
        }
        return props_TestSubstituteSubChildSmartReference;
      case LanguageConceptSwitch.TestSubstituteToWrapFromSubstituteMenu:
        if (props_TestSubstituteToWrapFromSubstituteMenu == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("default");
          props_TestSubstituteToWrapFromSubstituteMenu = cpb.create();
        }
        return props_TestSubstituteToWrapFromSubstituteMenu;
      case LanguageConceptSwitch.TestSubstituteToWrapFromTransformMenu:
        if (props_TestSubstituteToWrapFromTransformMenu == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TestSubstituteToWrapFromTransformMenu = cpb.create();
        }
        return props_TestSubstituteToWrapFromTransformMenu;
      case LanguageConceptSwitch.TestSubstitute_DuplicationMenu_ChildIncludeDefaultAndNullMenu:
        if (props_TestSubstitute_DuplicationMenu_ChildIncludeDefaultAndNullMenu == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstitute_DuplicationMenu_ChildIncludeDefaultAndNullMenu");
          props_TestSubstitute_DuplicationMenu_ChildIncludeDefaultAndNullMenu = cpb.create();
        }
        return props_TestSubstitute_DuplicationMenu_ChildIncludeDefaultAndNullMenu;
      case LanguageConceptSwitch.TestSubstitute_DuplicationMenu_ChildIncludeDiffernetMenus:
        if (props_TestSubstitute_DuplicationMenu_ChildIncludeDiffernetMenus == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstitute_DuplicationMenu_ChildIncludeDiffernetMenus");
          props_TestSubstitute_DuplicationMenu_ChildIncludeDiffernetMenus = cpb.create();
        }
        return props_TestSubstitute_DuplicationMenu_ChildIncludeDiffernetMenus;
      case LanguageConceptSwitch.TestSubstitute_DuplicationMenu_ChildIncludeSameMenuTwice:
        if (props_TestSubstitute_DuplicationMenu_ChildIncludeSameMenuTwice == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstitute_DuplicationMenu_ChildIncludeSameMenuTwice");
          props_TestSubstitute_DuplicationMenu_ChildIncludeSameMenuTwice = cpb.create();
        }
        return props_TestSubstitute_DuplicationMenu_ChildIncludeSameMenuTwice;
      case LanguageConceptSwitch.TestSubstitute_DuplicationMenu_ChildSubconcept:
        if (props_TestSubstitute_DuplicationMenu_ChildSubconcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstitute_DuplicationMenu_ChildSubconcept");
          props_TestSubstitute_DuplicationMenu_ChildSubconcept = cpb.create();
        }
        return props_TestSubstitute_DuplicationMenu_ChildSubconcept;
      case LanguageConceptSwitch.TestSubstitute_DuplicationMenu_ChildWrapDifferentMenus:
        if (props_TestSubstitute_DuplicationMenu_ChildWrapDifferentMenus == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstitute_DuplicationMenu_ChildWrapDifferentMenus");
          props_TestSubstitute_DuplicationMenu_ChildWrapDifferentMenus = cpb.create();
        }
        return props_TestSubstitute_DuplicationMenu_ChildWrapDifferentMenus;
      case LanguageConceptSwitch.TestSubstitute_DuplicationMenu_ChildWrapSameMenuTwice:
        if (props_TestSubstitute_DuplicationMenu_ChildWrapSameMenuTwice == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstitute_DuplicationMenu_ChildWrapSameMenuTwice");
          props_TestSubstitute_DuplicationMenu_ChildWrapSameMenuTwice = cpb.create();
        }
        return props_TestSubstitute_DuplicationMenu_ChildWrapSameMenuTwice;
      case LanguageConceptSwitch.TestSubstitute_DuplicationMenu_Interface:
        if (props_TestSubstitute_DuplicationMenu_Interface == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TestSubstitute_DuplicationMenu_Interface = cpb.create();
        }
        return props_TestSubstitute_DuplicationMenu_Interface;
      case LanguageConceptSwitch.TestSubstitute_DuplicationMenu_Parent:
        if (props_TestSubstitute_DuplicationMenu_Parent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TestSubstitute_DuplicationMenu_Parent");
          props_TestSubstitute_DuplicationMenu_Parent = cpb.create();
        }
        return props_TestSubstitute_DuplicationMenu_Parent;
      case LanguageConceptSwitch.TestSubstitute_DuplicationMenu_SubInterface1:
        if (props_TestSubstitute_DuplicationMenu_SubInterface1 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TestSubstitute_DuplicationMenu_SubInterface1 = cpb.create();
        }
        return props_TestSubstitute_DuplicationMenu_SubInterface1;
      case LanguageConceptSwitch.TestSubstitute_DuplicationMenu_SubInterface2:
        if (props_TestSubstitute_DuplicationMenu_SubInterface2 == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TestSubstitute_DuplicationMenu_SubInterface2 = cpb.create();
        }
        return props_TestSubstitute_DuplicationMenu_SubInterface2;
    }
    return null;
  }
}
