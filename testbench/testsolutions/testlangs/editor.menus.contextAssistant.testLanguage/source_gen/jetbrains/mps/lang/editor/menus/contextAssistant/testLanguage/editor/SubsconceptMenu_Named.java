package jetbrains.mps.lang.editor.menus.contextAssistant.testLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.substitute.SubstituteMenuBase;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.menus.substitute.WrapperSubstituteMenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItemWrapper;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.openapi.editor.menus.transformation.MenuLookup;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuLookup;
import jetbrains.mps.smodel.language.LanguageRegistry;

public class SubsconceptMenu_Named extends SubstituteMenuBase {
  @Override
  protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts(SubstituteMenuContext _context) {
    List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> result = new ArrayList<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>();
    result.add(new SubsconceptMenu_Named.SubstituteMenuPart_Wrapper_ayj04n_a());
    return result;
  }
  private static class SubstituteMenuPart_Wrapper_ayj04n_a extends WrapperSubstituteMenuPart {
    protected SubstituteMenuItem wrapItem(SubstituteMenuItem item) {
      return new SubstituteMenuItemWrapper(item) {

        @Override
        public SAbstractConcept getOutputConcept() {
          return MetaAdapterFactory.getConcept(0x9a629f9aabc94c29L, 0xb1b8db7f349f7fbcL, 0x1b49c84ee1cc743bL, "jetbrains.mps.lang.editor.menus.contextAssistant.testLanguage.structure.SubconceptOfChild");

        }
        @Override
        public SNode createNode(String pattern) {
          SNode createdNode = super.createNode(pattern);
          SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x9a629f9aabc94c29L, 0xb1b8db7f349f7fbcL, 0x1b49c84ee1cc743bL, "jetbrains.mps.lang.editor.menus.contextAssistant.testLanguage.structure.SubconceptOfChild")));
          SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(createdNode, MetaAdapterFactory.getProperty(0x9a629f9aabc94c29L, 0xb1b8db7f349f7fbcL, 0x36f88ebb7cd00eb3L, 0x36f88ebb7cd00eb4L, "stringProperty")));
          return node;
        }
      };
    }
    protected MenuLookup<SubstituteMenu> getLookup(SubstituteMenuContext context) {
      SRepository repository = context.getEditorContext().getRepository();
      return new DefaultSubstituteMenuLookup(LanguageRegistry.getInstance(repository), MetaAdapterFactory.getConcept(0x9a629f9aabc94c29L, 0xb1b8db7f349f7fbcL, 0x36f88ebb7cd00eb3L, "jetbrains.mps.lang.editor.menus.contextAssistant.testLanguage.structure.StringHolder"));
    }
  }
}
