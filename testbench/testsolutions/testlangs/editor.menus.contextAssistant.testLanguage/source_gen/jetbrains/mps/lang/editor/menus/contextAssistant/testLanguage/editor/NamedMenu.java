package jetbrains.mps.lang.editor.menus.contextAssistant.testLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.transformation.TransformationMenuBase;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.lang.editor.menus.transformation.MenuLocations;
import jetbrains.mps.nodeEditor.cellActions.SideTransformSubstituteInfo;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.editor.menus.SingleItemMenuPart;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.menus.transformation.ActionItemBase;
import jetbrains.mps.editor.runtime.items.SideTransformCompletionActionItem;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.editor.menus.extras.runtime.IntentionMenuPartBase;
import jetbrains.mps.intentions.IntentionExecutable;

public class NamedMenu extends TransformationMenuBase {
  private final Set<String> myLocations = SetSequence.fromSetAndArray(new HashSet<String>(), MenuLocations.CONTEXT_ASSISTANT, SideTransformSubstituteInfo.Side.LEFT.myMenuLocation, SideTransformSubstituteInfo.Side.RIGHT.myMenuLocation);
  @Override
  public boolean isApplicableToLocation(@NotNull String location) {
    return SetSequence.fromSet(myLocations).contains(location);
  }

  @Override
  @NotNull
  protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts(TransformationMenuContext _context) {
    List<MenuPart<TransformationMenuItem, TransformationMenuContext>> result = new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>();
    if (ListSequence.fromListAndArray(new ArrayList<String>(), MenuLocations.CONTEXT_ASSISTANT).contains(_context.getMenuLocation())) {
      result.add(new NamedMenu.TransformationMenuPart_Action_qsw3kc_a0());
      result.add(new NamedMenu.TransformationMenuPart_Intention_qsw3kc_b0());
      result.add(new NamedMenu.TransformationMenuPart_Action_qsw3kc_c0());
    }
    if (ListSequence.fromListAndArray(new ArrayList<String>(), SideTransformSubstituteInfo.Side.LEFT.myMenuLocation, SideTransformSubstituteInfo.Side.RIGHT.myMenuLocation).contains(_context.getMenuLocation())) {
      result.add(new NamedMenu.TransformationMenuPart_Action_qsw3kc_a0());
      result.add(new NamedMenu.TransformationMenuPart_Intention_qsw3kc_b0());
      result.add(new NamedMenu.TransformationMenuPart_Action_qsw3kc_c0());
    }
    return result;
  }

  private class TransformationMenuPart_Action_qsw3kc_a0 extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
    @Nullable
    protected TransformationMenuItem createItem(TransformationMenuContext context) {
      return new NamedMenu.TransformationMenuPart_Action_qsw3kc_a0.Item(context);
    }

    private class Item extends ActionItemBase implements SideTransformCompletionActionItem {
      private final TransformationMenuContext _context;

      private Item(TransformationMenuContext context) {
        _context = context;
      }

      @Nullable
      @Override
      public String getLabelText(String pattern) {
        return pattern;
      }

      @Override
      public void execute(@NotNull String pattern) {
        SPropertyOperations.set(_context.getNode(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), pattern);
      }

      @Override
      public String getShortDescriptionText(String pattern) {
        return "set name to" + pattern;
      }
    }
  }
  public class TransformationMenuPart_Intention_qsw3kc_b0 extends IntentionMenuPartBase {
    public TransformationMenuPart_Intention_qsw3kc_b0() {
      super("jetbrains.mps.lang.editor.menus.contextAssistant.testLanguage.intentions.AddLetterToName_Intention");
    }

    @Override
    protected TransformationMenuItem createItem(@NotNull TransformationMenuContext context, @NotNull IntentionExecutable executable) {
      return new NamedMenu.TransformationMenuPart_Intention_qsw3kc_b0.Item(context, executable);
    }

    private class Item extends IntentionMenuPartBase.ItemBase implements SideTransformCompletionActionItem {
      private Item(TransformationMenuContext context, IntentionExecutable executable) {
        super(context, executable);
      }

      @Override
      public String getShortDescriptionText(String pattern) {
        return "Add Letter To name";
      }
    }
  }
  private class TransformationMenuPart_Action_qsw3kc_c0 extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
    @Nullable
    protected TransformationMenuItem createItem(TransformationMenuContext context) {
      return new NamedMenu.TransformationMenuPart_Action_qsw3kc_c0.Item(context);
    }

    private class Item extends ActionItemBase implements SideTransformCompletionActionItem {
      private final TransformationMenuContext _context;

      private Item(TransformationMenuContext context) {
        _context = context;
      }

      @Nullable
      @Override
      public String getLabelText(String pattern) {
        return "defined in named menu";
      }

      @Override
      public void execute(@NotNull String pattern) {
      }

    }
  }
}
