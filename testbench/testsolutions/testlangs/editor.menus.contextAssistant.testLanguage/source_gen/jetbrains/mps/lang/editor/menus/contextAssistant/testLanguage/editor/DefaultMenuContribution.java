package jetbrains.mps.lang.editor.menus.contextAssistant.testLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.transformation.TransformationMenuBase;
import java.util.List;
import jetbrains.mps.lang.editor.menus.transformation.MenuPart;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.editor.menus.transformation.MenuLocations;
import jetbrains.mps.lang.editor.menus.transformation.SingleItemMenuPart;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.menus.transformation.MenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.ActionItemBase;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.editor.contextActionsTool.lang.menus.runtime.SidebarActionItem;
import jetbrains.mps.smodel.runtime.IconResource;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class DefaultMenuContribution extends TransformationMenuBase {
  public DefaultMenuContribution() {
    super(true);
  }
  @Override
  protected List<MenuPart> getParts(TransformationMenuContext _context) {
    List<MenuPart> result = new ArrayList<MenuPart>();
    if (ListSequence.fromListAndArray(new ArrayList<String>(), MenuLocations.CONTEXT_ASSISTANT).contains(_context.getMenuLocation())) {
      result.add(new DefaultMenuContribution.TransformationMenuPart_Action_qwzmaw_a0());
    }
    if (ListSequence.fromListAndArray(new ArrayList<String>(), jetbrains.mps.editor.contextActionsTool.lang.menus.runtime.MenuLocations.CONTEXT_ACTIONS_TOOL).contains(_context.getMenuLocation())) {
      result.add(new DefaultMenuContribution.TransformationMenuPart_Action_qwzmaw_a1());
    }
    return result;
  }

  private static class TransformationMenuPart_Action_qwzmaw_a0 extends SingleItemMenuPart {
    @Nullable
    protected MenuItem createItem(TransformationMenuContext context) {
      return new DefaultMenuContribution.TransformationMenuPart_Action_qwzmaw_a0.Item(context);
    }

    private class Item extends ActionItemBase {
      private final TransformationMenuContext _context;

      private Item(TransformationMenuContext context) {
        _context = context;
      }

      @Nullable
      @Override
      public String getLabelText(String pattern) {
        return "contributed from same language";
      }

      @Override
      public void execute(@NotNull String pattern) {
      }

    }
  }
  private static class TransformationMenuPart_Action_qwzmaw_a1 extends SingleItemMenuPart {
    @Nullable
    protected MenuItem createItem(TransformationMenuContext context) {
      return new DefaultMenuContribution.TransformationMenuPart_Action_qwzmaw_a1.Item(context);
    }

    private class Item extends ActionItemBase implements SidebarActionItem {
      private final TransformationMenuContext _context;

      private Item(TransformationMenuContext context) {
        _context = context;
      }

      @Nullable
      @Override
      public String getLabelText(String pattern) {
        return "sidebar-only action";
      }

      @Override
      public void execute(@NotNull String pattern) {
        if (LOG.isInfoEnabled()) {
          LOG.info("sidebar-only action executed");
        }
      }

      @Override
      public IconResource getIcon() {
        return IconContainer.RESOURCE_a0a8c4;
      }
      @Override
      public String getTooltipText() {
        return "tooltip of sidebar-only action";
      }
    }
  }
  protected static Logger LOG = LogManager.getLogger(DefaultMenuContribution.class);
}
