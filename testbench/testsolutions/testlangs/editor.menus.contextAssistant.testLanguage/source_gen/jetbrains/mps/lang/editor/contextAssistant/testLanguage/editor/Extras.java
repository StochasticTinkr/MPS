package jetbrains.mps.lang.editor.contextAssistant.testLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.transformation.TransformationMenuBase;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.editor.contextActionsTool.lang.menus.runtime.MenuLocations;
import jetbrains.mps.lang.editor.menus.extras.runtime.RefactoringMenuPartBase;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.refactoring.framework.IRefactoring;
import jetbrains.mps.lang.editor.menus.extras.runtime.RefactoringMenuItemBase;
import jetbrains.mps.editor.contextActionsTool.lang.menus.runtime.SidebarActionItem;
import jetbrains.mps.smodel.runtime.IconResource;
import jetbrains.mps.lang.editor.menus.extras.runtime.PluginActionMenuPartBase;
import com.intellij.openapi.actionSystem.AnAction;
import jetbrains.mps.lang.editor.menus.extras.runtime.PluginActionMenuItemBase;
import jetbrains.mps.lang.editor.menus.extras.runtime.IntentionMenuPartBase;
import jetbrains.mps.intentions.IntentionExecutable;

public class Extras extends TransformationMenuBase {
  public Extras() {
    super(true);
  }
  @Override
  protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts(TransformationMenuContext _context) {
    List<MenuPart<TransformationMenuItem, TransformationMenuContext>> result = new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>();
    if (ListSequence.fromListAndArray(new ArrayList<String>(), MenuLocations.CONTEXT_ACTIONS_TOOL).contains(_context.getMenuLocation())) {
      result.add(new Extras.TransformationMenuPart_Refactoring_ha3uwx_a0());
      result.add(new Extras.TransformationMenuPart_PluginAction_ha3uwx_b0());
      result.add(new Extras.TransformationMenuPart_Intention_ha3uwx_c0());
    }
    return result;
  }

  public static class TransformationMenuPart_Refactoring_ha3uwx_a0 extends RefactoringMenuPartBase {
    public TransformationMenuPart_Refactoring_ha3uwx_a0() {
      super("jetbrains.mps.lang.editor.menus.contextAssistant.testLanguage.refactorings.AppendOneToName");
    }

    @Override
    protected TransformationMenuItem createItem(@NotNull TransformationMenuContext context, @NotNull IRefactoring refactoring) {
      return new Extras.TransformationMenuPart_Refactoring_ha3uwx_a0.Item(context, refactoring);
    }

    private static class Item extends RefactoringMenuItemBase implements SidebarActionItem {
      private Item(TransformationMenuContext context, IRefactoring refactoring) {
        super(context, refactoring);
      }

      @Override
      public IconResource getIcon() {
        return IconContainer.RESOURCE_a0a2e3;
      }
      @Override
      public String getTooltipText() {
        return "A refactoring";
      }
    }
  }
  public static class TransformationMenuPart_PluginAction_ha3uwx_b0 extends PluginActionMenuPartBase {
    public TransformationMenuPart_PluginAction_ha3uwx_b0() {
      super("jetbrains.mps.ide.actions.ShowBookmarksDialog_Action");
    }

    @Override
    protected TransformationMenuItem createItem(@NotNull TransformationMenuContext context, @NotNull AnAction action) {
      return new Extras.TransformationMenuPart_PluginAction_ha3uwx_b0.Item(context, action);
    }

    private static class Item extends PluginActionMenuItemBase implements SidebarActionItem {
      private Item(TransformationMenuContext context, AnAction action) {
        super(context, action);
      }

      @Override
      public IconResource getIcon() {
        return IconContainer.RESOURCE_a0a2e4;
      }
      @Override
      public String getTooltipText() {
        return "An action";
      }
    }
  }
  public static class TransformationMenuPart_Intention_ha3uwx_c0 extends IntentionMenuPartBase {
    public TransformationMenuPart_Intention_ha3uwx_c0() {
      super("jetbrains.mps.lang.editor.menus.contextAssistant.testLanguage.intentions.AddLetterToName_Intention");
    }

    @Override
    protected TransformationMenuItem createItem(@NotNull TransformationMenuContext context, @NotNull IntentionExecutable executable) {
      return new Extras.TransformationMenuPart_Intention_ha3uwx_c0.Item(context, executable);
    }

    private static class Item extends IntentionMenuPartBase.ItemBase implements SidebarActionItem {
      private Item(TransformationMenuContext context, IntentionExecutable executable) {
        super(context, executable);
      }

      @Override
      public IconResource getIcon() {
        return null;
      }
      @Override
      public String getTooltipText() {
        return myExecutable.getDescriptor().getPresentation();
      }
    }
  }
}
