package CloneModule.test.test;

/*Generated by MPS */

import junit.framework.TestCase;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.tool.environment.Environment;
import jetbrains.mps.tool.environment.IdeaEnvironment;
import jetbrains.mps.tool.environment.EnvironmentConfig;
import java.io.File;
import jetbrains.mps.vfs.IFileUtils;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.project.validation.MessageCollectProcessor;
import jetbrains.mps.project.validation.ValidationUtil;
import org.apache.log4j.Level;
import org.junit.Assert;
import jetbrains.mps.util.Reference;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.application.ModalityState;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.ide.newModuleDialogs.CopyModuleHelper;

public class CloneModule_Test extends TestCase {
  private static final String PROJECT_PATH = "testbench/modules/testCloneModule/";
  private static final String SUFFIX = "_testclone";
  private IFile clonedModulesDirectory;
  private MPSProject project;
  public void test_cloneXMLSolution() throws Exception {
    testModule(PersistenceFacade.getInstance().createModuleReference("04399201-cb79-4edc-8d1a-e2b946892642(XML)"), MPSExtentions.DOT_SOLUTION);
  }
  public void test_clonePerRootSolution() throws Exception {
    testModule(PersistenceFacade.getInstance().createModuleReference("1b06eede-ff4f-40f3-92e8-3cf27f8127bd(PER_ROOT)"), MPSExtentions.DOT_SOLUTION);
  }
  public void test_cloneBinarySolution() throws Exception {
    testModule(PersistenceFacade.getInstance().createModuleReference("6c080adc-7c51-4b56-a8e2-17397071f3cc(BINARY)"), MPSExtentions.DOT_SOLUTION);
  }
  public void test_cloneLanguage() throws Exception {
    testModule(PersistenceFacade.getInstance().createModuleReference("d1ea9b08-060f-4f7d-83b7-0f97f71cbbf7(TestLanguage)"), MPSExtentions.DOT_LANGUAGE);
  }
  public void setUp() {
    Environment env = IdeaEnvironment.getOrCreate(EnvironmentConfig.defaultConfig());
    project = ((MPSProject) env.openProject(new File(PROJECT_PATH)));

    executeUnderLock(new Runnable() {
      public void run() {
        clonedModulesDirectory = IFileUtils.createTmpDir();
      }
    });
  }
  public void tearDown() {
    executeUnderLock(new Runnable() {
      public void run() {
        clonedModulesDirectory.delete();
      }
    });
  }

  protected static Logger LOG = LogManager.getLogger(CloneModule_Test.class);
  public static void checkModule(AbstractModule module) {
    MessageCollectProcessor processor = new MessageCollectProcessor();
    ValidationUtil.validateModule(module, processor);
    if (!(processor.getErrors().isEmpty())) {
      for (String error : processor.getErrors()) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Error found while checking '" + module + "': " + error);
        }
      }
      Assert.fail();
    }
  }

  public void executeUnderLock(final Runnable runnable) {
    final Reference<Throwable> ref = new Reference();
    ApplicationManager.getApplication().invokeAndWait(new Runnable() {
      public void run() {
        project.getModelAccess().executeCommand(new Runnable() {
          public void run() {
            try {
              runnable.run();
            } catch (Throwable t) {
              ref.set(t);
            }

          }
        });
      }
    }, ModalityState.defaultModalityState());
    if (!(ref.isNull())) {
      throw new RuntimeException(ref.get());
    }
  }

  private void testModule(@NotNull final SModuleReference moduleRef, final String moduleFileNameExtension) {
    executeUnderLock(new Runnable() {
      public void run() {
        AbstractModule originalModule = as_i3fixg_a0a0a0a0a0a0q(moduleRef.resolve(project.getRepository()), AbstractModule.class);

        String clonedModuleName = originalModule.getModuleName() + SUFFIX;

        IFile copyLocation = clonedModulesDirectory.getDescendant(clonedModuleName + moduleFileNameExtension);
        CopyModuleHelper helper = new CopyModuleHelper(project, originalModule, clonedModuleName, copyLocation, "");
        AbstractModule clonedModule = helper.copy();

        junit.framework.Assert.assertEquals(clonedModule.getModuleName(), clonedModuleName);

        checkModule(originalModule);
        checkModule(clonedModule);
      }
    });
  }
  private static <T> T as_i3fixg_a0a0a0a0a0a0q(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
