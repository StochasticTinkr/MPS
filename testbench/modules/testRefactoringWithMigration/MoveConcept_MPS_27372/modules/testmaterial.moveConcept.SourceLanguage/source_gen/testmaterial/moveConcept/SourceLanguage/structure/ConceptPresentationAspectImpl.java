package testmaterial.moveConcept.SourceLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_MoveConcept_A;
  private ConceptPresentation props_MoveConcept_B;
  private ConceptPresentation props_MovePropertyContainer;
  private ConceptPresentation props_MovePropertyInstance;
  private ConceptPresentation props_MovePropertySupercontainer;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.MoveConcept_A:
        if (props_MoveConcept_A == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MoveConcept_A = cpb.create();
        }
        return props_MoveConcept_A;
      case LanguageConceptSwitch.MoveConcept_B:
        if (props_MoveConcept_B == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MoveConcept_B = cpb.create();
        }
        return props_MoveConcept_B;
      case LanguageConceptSwitch.MovePropertyContainer:
        if (props_MovePropertyContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MovePropertyContainer = cpb.create();
        }
        return props_MovePropertyContainer;
      case LanguageConceptSwitch.MovePropertyInstance:
        if (props_MovePropertyInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MovePropertyInstance = cpb.create();
        }
        return props_MovePropertyInstance;
      case LanguageConceptSwitch.MovePropertySupercontainer:
        if (props_MovePropertySupercontainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MovePropertySupercontainer = cpb.create();
        }
        return props_MovePropertySupercontainer;
    }
    return null;
  }
}
