package BHL7.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_A = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_B = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_C = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_D = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_E = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_F = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_G = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_H = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_I1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_I2 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_I3 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_K = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("4239359f-6457-4d2a-b1e0-14d3f948db39"), "BHL7")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_A;
      case 1:
        return props_B;
      case 2:
        return props_C;
      case 3:
        return props_D;
      case 4:
        return props_E;
      case 5:
        return props_F;
      case 6:
        return props_G;
      case 7:
        return props_H;
      case 8:
        return props_I1;
      case 9:
        return props_I2;
      case 10:
        return props_I3;
      case 11:
        return props_K;
    }
    throw new IllegalStateException();
  }
}
