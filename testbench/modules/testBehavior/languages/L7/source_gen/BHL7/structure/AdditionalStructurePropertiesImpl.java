package BHL7.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_A = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_B = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_C = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_D = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_E = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_F = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_G = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_H = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_I1 = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_I2 = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_I3 = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_K = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0n.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_A;
          }
          break;
        case 1:
          if (true) {
            return props_B;
          }
          break;
        case 2:
          if (true) {
            return props_C;
          }
          break;
        case 3:
          if (true) {
            return props_D;
          }
          break;
        case 4:
          if (true) {
            return props_E;
          }
          break;
        case 5:
          if (true) {
            return props_F;
          }
          break;
        case 6:
          if (true) {
            return props_G;
          }
          break;
        case 7:
          if (true) {
            return props_H;
          }
          break;
        case 8:
          if (true) {
            return props_I1;
          }
          break;
        case 9:
          if (true) {
            return props_I2;
          }
          break;
        case 10:
          if (true) {
            return props_I3;
          }
          break;
        case 11:
          if (true) {
            return props_K;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0n = buildConceptIndices(MetaAdapterFactory.getConcept(0x4239359f64574d2aL, 0xb1e014d3f948db39L, 0x559729dec0466d3cL, "A"), MetaAdapterFactory.getConcept(0x4239359f64574d2aL, 0xb1e014d3f948db39L, 0x559729dec0466d3dL, "B"), MetaAdapterFactory.getConcept(0x4239359f64574d2aL, 0xb1e014d3f948db39L, 0x4dcf589c68321a72L, "C"), MetaAdapterFactory.getConcept(0x4239359f64574d2aL, 0xb1e014d3f948db39L, 0x549fa4aa12af52b3L, "D"), MetaAdapterFactory.getConcept(0x4239359f64574d2aL, 0xb1e014d3f948db39L, 0x10b2a2acd7137351L, "E"), MetaAdapterFactory.getConcept(0x4239359f64574d2aL, 0xb1e014d3f948db39L, 0x75783c3114f90130L, "F"), MetaAdapterFactory.getConcept(0x4239359f64574d2aL, 0xb1e014d3f948db39L, 0x75783c3114f90190L, "G"), MetaAdapterFactory.getConcept(0x4239359f64574d2aL, 0xb1e014d3f948db39L, 0x3a674fdfabfcc7faL, "H"), MetaAdapterFactory.getInterfaceConcept(0x4239359f64574d2aL, 0xb1e014d3f948db39L, 0x549fa4aa12af5261L, "I1"), MetaAdapterFactory.getInterfaceConcept(0x4239359f64574d2aL, 0xb1e014d3f948db39L, 0x549fa4aa12af528cL, "I2"), MetaAdapterFactory.getInterfaceConcept(0x4239359f64574d2aL, 0xb1e014d3f948db39L, 0x10b2a2acd713731eL, "I3"), MetaAdapterFactory.getConcept(0x4239359f64574d2aL, 0xb1e014d3f948db39L, 0x66c9579bde227bd6L, "K"));
}
