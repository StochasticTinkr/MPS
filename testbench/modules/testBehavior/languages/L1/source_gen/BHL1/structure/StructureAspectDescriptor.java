package BHL1.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(4);
  /*package*/ final ConceptDescriptor myConceptA = createDescriptorForA();
  /*package*/ final ConceptDescriptor myConceptA1 = createDescriptorForA1();
  /*package*/ final ConceptDescriptor myConceptI = createDescriptorForI();
  /*package*/ final ConceptDescriptor myConceptI1 = createDescriptorForI1();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptA.getId(), 0);
    myIndexMap.put(myConceptA1.getId(), 1);
    myIndexMap.put(myConceptI.getId(), 2);
    myIndexMap.put(myConceptI1.getId(), 3);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptA, myConceptA1, myConceptI, myConceptI1);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptA;
      case 1:
        return myConceptA1;
      case 2:
        return myConceptI;
      case 3:
        return myConceptI1;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForA() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BHL1", "A", 0x43359135f67c4a3dL, 0x9fdda3d7dba50995L, 0x54fc4b17de4f24cbL);
    b.class_(false, false, false);
    b.parent(0x43359135f67c4a3dL, 0x9fdda3d7dba50995L, 0x54fc4b17de4f24ccL);
    b.origin("r:28855287-2116-4523-9c44-f18e3449e08d(BHL1.structure)/6123852159203091659");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForA1() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BHL1", "A1", 0x43359135f67c4a3dL, 0x9fdda3d7dba50995L, 0x7e5c09dfa07d591eL);
    b.class_(false, false, false);
    b.parent(0x43359135f67c4a3dL, 0x9fdda3d7dba50995L, 0x7e5c09dfa07d591fL);
    b.origin("r:28855287-2116-4523-9c44-f18e3449e08d(BHL1.structure)/9105163402711226654");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForI() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BHL1", "I", 0x43359135f67c4a3dL, 0x9fdda3d7dba50995L, 0x54fc4b17de4f24ccL);
    b.interface_();
    b.origin("r:28855287-2116-4523-9c44-f18e3449e08d(BHL1.structure)/6123852159203091660");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForI1() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BHL1", "I1", 0x43359135f67c4a3dL, 0x9fdda3d7dba50995L, 0x7e5c09dfa07d591fL);
    b.interface_();
    b.origin("r:28855287-2116-4523-9c44-f18e3449e08d(BHL1.structure)/9105163402711226655");
    b.prop("a", 0x7e5c09dfa07d59cbL, "9105163402711226827");
    return b.create();
  }
}
