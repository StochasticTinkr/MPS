package testMoveElements.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  /*package*/ final ConceptDescriptor myConceptDummyBlock = new ConceptDescriptorBuilder("testMoveElements.structure.DummyBlock", MetaIdFactory.conceptId(0xe228eea107ef499cL, 0x88269c47a7e369dbL, 0x679b7b3bff651415L)).super_("jetbrains.mps.baseLanguage.structure.Statement").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).childDescriptors(new ConceptDescriptorBuilder.Link(7465696304914830811L, "statement", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L), true, true, false)).children(new String[]{"statement"}, new boolean[]{true}).alias("dummy", "").create();
  /*package*/ final ConceptDescriptor myConceptManyStatements = new ConceptDescriptorBuilder("testMoveElements.structure.ManyStatements", MetaIdFactory.conceptId(0xe228eea107ef499cL, 0x88269c47a7e369dbL, 0x4cb3e593ffd97846L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(7130462290291946377L, "list", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L), false, false, false), new ConceptDescriptorBuilder.Link(5527013591529125961L, "list1", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L), false, false, false), new ConceptDescriptorBuilder.Link(5527013591529125963L, "list2", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L), false, false, false), new ConceptDescriptorBuilder.Link(5527013591529125966L, "statement", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L), true, true, false)).children(new String[]{"list", "list1", "list2", "statement"}, new boolean[]{false, false, false, true}).create();
  /*package*/ final ConceptDescriptor myConceptManyStatementsContainer = new ConceptDescriptorBuilder("testMoveElements.structure.ManyStatementsContainer", MetaIdFactory.conceptId(0xe228eea107ef499cL, 0x88269c47a7e369dbL, 0x2f0103435011b1f2L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(3386991982400352755L, "first", MetaIdFactory.conceptId(0xe228eea107ef499cL, 0x88269c47a7e369dbL, 0x4cb3e593ffd97846L), false, false, false), new ConceptDescriptorBuilder.Link(3386991982400352761L, "second", MetaIdFactory.conceptId(0xe228eea107ef499cL, 0x88269c47a7e369dbL, 0x4cb3e593ffd97846L), false, false, false)).children(new String[]{"first", "second"}, new boolean[]{false, false}).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptDummyBlock, myConceptManyStatements, myConceptManyStatementsContainer);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_1htk8d_a0h.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myConceptDummyBlock;
          }
          break;
        case 1:
          if (true) {
            return myConceptManyStatements;
          }
          break;
        case 2:
          if (true) {
            return myConceptManyStatementsContainer;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_1htk8d_a0h = buildConceptIndices(MetaAdapterFactory.getConcept(0xe228eea107ef499cL, 0x88269c47a7e369dbL, 0x679b7b3bff651415L, "testMoveElements.structure.DummyBlock"), MetaAdapterFactory.getConcept(0xe228eea107ef499cL, 0x88269c47a7e369dbL, 0x4cb3e593ffd97846L, "testMoveElements.structure.ManyStatements"), MetaAdapterFactory.getConcept(0xe228eea107ef499cL, 0x88269c47a7e369dbL, 0x2f0103435011b1f2L, "testMoveElements.structure.ManyStatementsContainer"));
}
