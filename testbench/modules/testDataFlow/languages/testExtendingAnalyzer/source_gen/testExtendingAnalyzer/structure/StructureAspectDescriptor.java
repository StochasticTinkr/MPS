package testExtendingAnalyzer.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(2);
  /*package*/ final ConceptDescriptor myConceptNullSafeDotExpression = createDescriptorForNullSafeDotExpression();
  /*package*/ final ConceptDescriptor myConceptNullUnsafeDotExpression = createDescriptorForNullUnsafeDotExpression();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptNullSafeDotExpression.getId(), 0);
    myIndexMap.put(myConceptNullUnsafeDotExpression.getId(), 1);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptNullSafeDotExpression, myConceptNullUnsafeDotExpression);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptNullSafeDotExpression;
      case 1:
        return myConceptNullUnsafeDotExpression;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForNullSafeDotExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("testExtendingAnalyzer", "NullSafeDotExpression", 0x3ac033a0bffa48e3L, 0xa843a40cbdd89859L, 0x13ac54c0e557dc29L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.DotExpression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L);
    b.origin("r:ceb05fbc-f573-4746-aba6-e6f7676be055(testExtendingAnalyzer.structure)/1417601170173058089");
    b.alias("safe");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNullUnsafeDotExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("testExtendingAnalyzer", "NullUnsafeDotExpression", 0x3ac033a0bffa48e3L, 0xa843a40cbdd89859L, 0x13ac54c0e557da2eL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.DotExpression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L);
    b.origin("r:ceb05fbc-f573-4746-aba6-e6f7676be055(testExtendingAnalyzer.structure)/1417601170173057582");
    b.alias("unsafe");
    return b.create();
  }
}
