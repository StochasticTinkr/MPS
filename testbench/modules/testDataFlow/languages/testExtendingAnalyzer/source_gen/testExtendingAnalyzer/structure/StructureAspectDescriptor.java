package testExtendingAnalyzer.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(2);
  /*package*/ final ConceptDescriptor myConceptNullSafeDotExpression = createDescriptorForNullSafeDotExpression();
  /*package*/ final ConceptDescriptor myConceptNullUnsafeDotExpression = createDescriptorForNullUnsafeDotExpression();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptNullSafeDotExpression.getId(), 0);
    myIndexMap.put(myConceptNullUnsafeDotExpression.getId(), 1);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptNullSafeDotExpression, myConceptNullUnsafeDotExpression);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptNullSafeDotExpression;
      case 1:
        return myConceptNullUnsafeDotExpression;
      default:
        throw new IllegalStateException();
    }
  }

  private static ConceptDescriptor createDescriptorForNullSafeDotExpression() {
    return new ConceptDescriptorBuilder("testExtendingAnalyzer.structure.NullSafeDotExpression", MetaIdFactory.conceptId(0x3ac033a0bffa48e3L, 0xa843a40cbdd89859L, 0x13ac54c0e557dc29L)).super_("jetbrains.mps.baseLanguage.structure.DotExpression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L)).parents("jetbrains.mps.baseLanguage.structure.DotExpression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L)).alias("safe", "").sourceNode(new SNodePointer("r:ceb05fbc-f573-4746-aba6-e6f7676be055(testExtendingAnalyzer.structure)", "1417601170173058089")).create();
  }
  private static ConceptDescriptor createDescriptorForNullUnsafeDotExpression() {
    return new ConceptDescriptorBuilder("testExtendingAnalyzer.structure.NullUnsafeDotExpression", MetaIdFactory.conceptId(0x3ac033a0bffa48e3L, 0xa843a40cbdd89859L, 0x13ac54c0e557da2eL)).super_("jetbrains.mps.baseLanguage.structure.DotExpression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L)).parents("jetbrains.mps.baseLanguage.structure.DotExpression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L)).alias("unsafe", "").sourceNode(new SNodePointer("r:ceb05fbc-f573-4746-aba6-e6f7676be055(testExtendingAnalyzer.structure)", "1417601170173057582")).create();
  }
}
