package jetbrains.mps.testCustomDataFlow.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(1);
  /*package*/ final ConceptDescriptor myConceptIntraProceduralSpecific_BuilderMode = createDescriptorForIntraProceduralSpecific_BuilderMode();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptIntraProceduralSpecific_BuilderMode.getId(), 0);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptIntraProceduralSpecific_BuilderMode);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptIntraProceduralSpecific_BuilderMode;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForIntraProceduralSpecific_BuilderMode() {
    return new ConceptDescriptorBuilder("jetbrains.mps.testCustomDataFlow.structure.IntraProceduralSpecific_BuilderMode", MetaIdFactory.conceptId(0xf1af2340221247ddL, 0xa65b2d6ee9427e3eL, 0x623d57b403fec45eL)).super_("jetbrains.mps.lang.dataFlow.structure.IntraProcedural_BuilderMode").version(1).super_(MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x6e8db6877fc9fed5L)).parents("jetbrains.mps.lang.dataFlow.structure.IntraProcedural_BuilderMode").parentIds(MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x6e8db6877fc9fed5L)).alias("intra-procedural-specific", "").sourceNode(new SNodePointer("r:1663047b-d6b3-4d14-9e65-e64dc6f64cac(jetbrains.mps.testCustomDataFlow.structure)", "7078910619969045598")).create();
  }
}
