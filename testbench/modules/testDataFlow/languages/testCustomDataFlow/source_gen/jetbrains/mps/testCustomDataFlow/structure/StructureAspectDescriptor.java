package jetbrains.mps.testCustomDataFlow.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptIntraProceduralSpecific_BuilderMode = createDescriptorForIntraProceduralSpecific_BuilderMode();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptIntraProceduralSpecific_BuilderMode);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.IntraProceduralSpecific_BuilderMode:
        return myConceptIntraProceduralSpecific_BuilderMode;
      default:
        return null;
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForIntraProceduralSpecific_BuilderMode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.testCustomDataFlow", "IntraProceduralSpecific_BuilderMode", 0xf1af2340221247ddL, 0xa65b2d6ee9427e3eL, 0x623d57b403fec45eL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.IntraProcedural_BuilderMode", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x6e8db6877fc9fed5L);
    b.origin("r:1663047b-d6b3-4d14-9e65-e64dc6f64cac(jetbrains.mps.testCustomDataFlow.structure)/7078910619969045598");
    b.version(2);
    b.alias("intra-procedural-specific");
    return b.create();
  }
}
