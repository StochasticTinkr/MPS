package testSpaceCompletion.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_ABC = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ABCDE = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ABCDEF = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ABCDEG = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ABCEEG = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BAC = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BCA = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0i.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_ABC;
          }
          break;
        case 1:
          if (true) {
            return props_ABCDE;
          }
          break;
        case 2:
          if (true) {
            return props_ABCDEF;
          }
          break;
        case 3:
          if (true) {
            return props_ABCDEG;
          }
          break;
        case 4:
          if (true) {
            return props_ABCEEG;
          }
          break;
        case 5:
          if (true) {
            return props_BAC;
          }
          break;
        case 6:
          if (true) {
            return props_BCA;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0i = buildConceptIndices(MetaAdapterFactory.getConcept(0x4dd3c558f0fc4807L, 0xbade5d6bcad6b3f1L, 0x31c4a809e6410e71L, "ABC"), MetaAdapterFactory.getConcept(0x4dd3c558f0fc4807L, 0xbade5d6bcad6b3f1L, 0x31c4a809e641174cL, "ABCDE"), MetaAdapterFactory.getConcept(0x4dd3c558f0fc4807L, 0xbade5d6bcad6b3f1L, 0x31c4a809e6411758L, "ABCDEF"), MetaAdapterFactory.getConcept(0x4dd3c558f0fc4807L, 0xbade5d6bcad6b3f1L, 0x31c4a809e6411754L, "ABCDEG"), MetaAdapterFactory.getConcept(0x4dd3c558f0fc4807L, 0xbade5d6bcad6b3f1L, 0x6a37442ca9969678L, "ABCEEG"), MetaAdapterFactory.getConcept(0x4dd3c558f0fc4807L, 0xbade5d6bcad6b3f1L, 0x7bf89c7591b82d85L, "BAC"), MetaAdapterFactory.getConcept(0x4dd3c558f0fc4807L, 0xbade5d6bcad6b3f1L, 0x7bf89c7591b848d3L, "BCA"));
}
