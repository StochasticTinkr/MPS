package testSpaceCompletion.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ABC;
  private ConceptPresentation props_ABCDE;
  private ConceptPresentation props_ABCDEF;
  private ConceptPresentation props_ABCDEG;
  private ConceptPresentation props_ABCEEG;
  private ConceptPresentation props_BAC;
  private ConceptPresentation props_BCA;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ABC:
        if (props_ABC == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ABC = cpb.create();
        }
        return props_ABC;
      case LanguageConceptSwitch.ABCDE:
        if (props_ABCDE == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ABCDE = cpb.create();
        }
        return props_ABCDE;
      case LanguageConceptSwitch.ABCDEF:
        if (props_ABCDEF == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ABCDEF = cpb.create();
        }
        return props_ABCDEF;
      case LanguageConceptSwitch.ABCDEG:
        if (props_ABCDEG == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ABCDEG = cpb.create();
        }
        return props_ABCDEG;
      case LanguageConceptSwitch.ABCEEG:
        if (props_ABCEEG == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ABCEEG = cpb.create();
        }
        return props_ABCEEG;
      case LanguageConceptSwitch.BAC:
        if (props_BAC == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BAC = cpb.create();
        }
        return props_BAC;
      case LanguageConceptSwitch.BCA:
        if (props_BCA == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BCA = cpb.create();
        }
        return props_BCA;
    }
    return null;
  }
}
