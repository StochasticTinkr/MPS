package testDefaultEditor.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractDeveloper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Canvas = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Company = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultNodeAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultPropertyAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultReferenceAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Developer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DummyMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Friend = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotSubstitutableDeveloper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Shape = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Team = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractDeveloper:
        return props_AbstractDeveloper;
      case LanguageConceptSwitch.Canvas:
        return props_Canvas;
      case LanguageConceptSwitch.Company:
        return props_Company;
      case LanguageConceptSwitch.DefaultNodeAttribute:
        return props_DefaultNodeAttribute;
      case LanguageConceptSwitch.DefaultPropertyAttribute:
        return props_DefaultPropertyAttribute;
      case LanguageConceptSwitch.DefaultReferenceAttribute:
        return props_DefaultReferenceAttribute;
      case LanguageConceptSwitch.Developer:
        return props_Developer;
      case LanguageConceptSwitch.DummyMethod:
        return props_DummyMethod;
      case LanguageConceptSwitch.Friend:
        return props_Friend;
      case LanguageConceptSwitch.NotSubstitutableDeveloper:
        return props_NotSubstitutableDeveloper;
      case LanguageConceptSwitch.Shape:
        return props_Shape;
      case LanguageConceptSwitch.Team:
        return props_Team;
    }
    return null;
  }
}
