package testDefaultEditor.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractChild;
  private ConceptPresentation props_AbstractDeveloper;
  private ConceptPresentation props_BaseChild;
  private ConceptPresentation props_Canvas;
  private ConceptPresentation props_Company;
  private ConceptPresentation props_ConcreteChild;
  private ConceptPresentation props_Container;
  private ConceptPresentation props_DefaultNodeAttribute;
  private ConceptPresentation props_DefaultPropertyAttribute;
  private ConceptPresentation props_DefaultReferenceAttribute;
  private ConceptPresentation props_Developer;
  private ConceptPresentation props_DummyMethod;
  private ConceptPresentation props_Friend;
  private ConceptPresentation props_IConcreteChild;
  private ConceptPresentation props_InterfaceChild;
  private ConceptPresentation props_NotSubstitutableDeveloper;
  private ConceptPresentation props_Parent;
  private ConceptPresentation props_Shape;
  private ConceptPresentation props_Team;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractChild:
        if (props_AbstractChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractChild = cpb.create();
        }
        return props_AbstractChild;
      case LanguageConceptSwitch.AbstractDeveloper:
        if (props_AbstractDeveloper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractDeveloper = cpb.create();
        }
        return props_AbstractDeveloper;
      case LanguageConceptSwitch.BaseChild:
        if (props_BaseChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BaseChild = cpb.create();
        }
        return props_BaseChild;
      case LanguageConceptSwitch.Canvas:
        if (props_Canvas == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Canvas = cpb.create();
        }
        return props_Canvas;
      case LanguageConceptSwitch.Company:
        if (props_Company == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Company = cpb.create();
        }
        return props_Company;
      case LanguageConceptSwitch.ConcreteChild:
        if (props_ConcreteChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ConcreteChild = cpb.create();
        }
        return props_ConcreteChild;
      case LanguageConceptSwitch.Container:
        if (props_Container == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Container = cpb.create();
        }
        return props_Container;
      case LanguageConceptSwitch.DefaultNodeAttribute:
        if (props_DefaultNodeAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DefaultNodeAttribute = cpb.create();
        }
        return props_DefaultNodeAttribute;
      case LanguageConceptSwitch.DefaultPropertyAttribute:
        if (props_DefaultPropertyAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DefaultPropertyAttribute = cpb.create();
        }
        return props_DefaultPropertyAttribute;
      case LanguageConceptSwitch.DefaultReferenceAttribute:
        if (props_DefaultReferenceAttribute == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DefaultReferenceAttribute = cpb.create();
        }
        return props_DefaultReferenceAttribute;
      case LanguageConceptSwitch.Developer:
        if (props_Developer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Developer = cpb.create();
        }
        return props_Developer;
      case LanguageConceptSwitch.DummyMethod:
        if (props_DummyMethod == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DummyMethod = cpb.create();
        }
        return props_DummyMethod;
      case LanguageConceptSwitch.Friend:
        if (props_Friend == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Friend = cpb.create();
        }
        return props_Friend;
      case LanguageConceptSwitch.IConcreteChild:
        if (props_IConcreteChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IConcreteChild = cpb.create();
        }
        return props_IConcreteChild;
      case LanguageConceptSwitch.InterfaceChild:
        if (props_InterfaceChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_InterfaceChild = cpb.create();
        }
        return props_InterfaceChild;
      case LanguageConceptSwitch.NotSubstitutableDeveloper:
        if (props_NotSubstitutableDeveloper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_NotSubstitutableDeveloper = cpb.create();
        }
        return props_NotSubstitutableDeveloper;
      case LanguageConceptSwitch.Parent:
        if (props_Parent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Parent = cpb.create();
        }
        return props_Parent;
      case LanguageConceptSwitch.Shape:
        if (props_Shape == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Shape = cpb.create();
        }
        return props_Shape;
      case LanguageConceptSwitch.Team:
        if (props_Team == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Team = cpb.create();
        }
        return props_Team;
    }
    return null;
  }
}
