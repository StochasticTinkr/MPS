package testDefaultEditor.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractDeveloper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Canvas = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Company = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultNodeAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultPropertyAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultReferenceAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Developer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DummyMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Friend = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotSubstitutableDeveloper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Shape = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Team = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0n.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractDeveloper;
          }
          break;
        case 1:
          if (true) {
            return props_Canvas;
          }
          break;
        case 2:
          if (true) {
            return props_Company;
          }
          break;
        case 3:
          if (true) {
            return props_DefaultNodeAttribute;
          }
          break;
        case 4:
          if (true) {
            return props_DefaultPropertyAttribute;
          }
          break;
        case 5:
          if (true) {
            return props_DefaultReferenceAttribute;
          }
          break;
        case 6:
          if (true) {
            return props_Developer;
          }
          break;
        case 7:
          if (true) {
            return props_DummyMethod;
          }
          break;
        case 8:
          if (true) {
            return props_Friend;
          }
          break;
        case 9:
          if (true) {
            return props_NotSubstitutableDeveloper;
          }
          break;
        case 10:
          if (true) {
            return props_Shape;
          }
          break;
        case 11:
          if (true) {
            return props_Team;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0n = buildConceptIndices(MetaAdapterFactory.getConcept(0xb5734616c4b04639L, 0x9c6af3a1cf5dc4dbL, 0x6903a6b9852e888L, "AbstractDeveloper"), MetaAdapterFactory.getConcept(0xb5734616c4b04639L, 0x9c6af3a1cf5dc4dbL, 0x5a79ee4e776cb5daL, "Canvas"), MetaAdapterFactory.getConcept(0xb5734616c4b04639L, 0x9c6af3a1cf5dc4dbL, 0xd0768d7cf12f723L, "Company"), MetaAdapterFactory.getConcept(0xb5734616c4b04639L, 0x9c6af3a1cf5dc4dbL, 0x27d5e845b8e8aee1L, "DefaultNodeAttribute"), MetaAdapterFactory.getConcept(0xb5734616c4b04639L, 0x9c6af3a1cf5dc4dbL, 0x27d5e845b8e8ae64L, "DefaultPropertyAttribute"), MetaAdapterFactory.getConcept(0xb5734616c4b04639L, 0x9c6af3a1cf5dc4dbL, 0x27d5e845b8e8aeb7L, "DefaultReferenceAttribute"), MetaAdapterFactory.getConcept(0xb5734616c4b04639L, 0x9c6af3a1cf5dc4dbL, 0xd0768d7cf132939L, "Developer"), MetaAdapterFactory.getConcept(0xb5734616c4b04639L, 0x9c6af3a1cf5dc4dbL, 0x535e489f8b62af67L, "DummyMethod"), MetaAdapterFactory.getConcept(0xb5734616c4b04639L, 0x9c6af3a1cf5dc4dbL, 0xd0768d7cf13be7aL, "Friend"), MetaAdapterFactory.getConcept(0xb5734616c4b04639L, 0x9c6af3a1cf5dc4dbL, 0x6903a6b9853b871L, "NotSubstitutableDeveloper"), MetaAdapterFactory.getConcept(0xb5734616c4b04639L, 0x9c6af3a1cf5dc4dbL, 0x5a79ee4e776cb5dbL, "Shape"), MetaAdapterFactory.getConcept(0xb5734616c4b04639L, 0x9c6af3a1cf5dc4dbL, 0xd0768d7cf12f792L, "Team"));
}
