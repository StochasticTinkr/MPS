package tests.testPersistence.test;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import org.jetbrains.mps.openapi.model.SModel;
import junit.framework.Assert;
import jetbrains.mps.smodel.DefaultSModelDescriptor;
import jetbrains.mps.smodel.persistence.def.ModelPersistence;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.persistence.PersistenceUtil;
import jetbrains.mps.util.FileUtil;
import java.io.IOException;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.java.stub.JavaPackageNameStub;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SNodeId;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.loading.ModelLoadResult;
import jetbrains.mps.smodel.SModelHeader;
import jetbrains.mps.smodel.loading.ModelLoadingState;
import jetbrains.mps.extapi.model.SModelBase;

@MPSLaunch
public class TestPersistence_Test extends BaseTransformationTest {
  @Test
  public void test_testPrecondition() throws Throwable {
    initTest("${mps_home}", "r:8ef4c1fc-fb61-4d5c-806c-7a971cfb9392(tests.testPersistence.test@tests)", false);
    runTest("tests.testPersistence.test.TestPersistence_Test$TestBody", "test_testPrecondition", true);
  }
  @Test
  public void test_testLastVersionIndexing() throws Throwable {
    initTest("${mps_home}", "r:8ef4c1fc-fb61-4d5c-806c-7a971cfb9392(tests.testPersistence.test@tests)", false);
    runTest("tests.testPersistence.test.TestPersistence_Test$TestBody", "test_testLastVersionIndexing", true);
  }
  @Test
  public void test_testPersistenceReadWrite() throws Throwable {
    initTest("${mps_home}", "r:8ef4c1fc-fb61-4d5c-806c-7a971cfb9392(tests.testPersistence.test@tests)", false);
    runTest("tests.testPersistence.test.TestPersistence_Test$TestBody", "test_testPersistenceReadWrite", true);
  }
  @Test
  public void test_testPersistenceUpgrade() throws Throwable {
    initTest("${mps_home}", "r:8ef4c1fc-fb61-4d5c-806c-7a971cfb9392(tests.testPersistence.test@tests)", false);
    runTest("tests.testPersistence.test.TestPersistence_Test$TestBody", "test_testPersistenceUpgrade", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_testPrecondition() throws Exception {
      TestPersistenceHelper helper = new TestPersistenceHelper();
      SModel model = helper.getTestModel();
      Assert.assertTrue(model instanceof DefaultSModelDescriptor);

      DefaultSModelDescriptor md = (DefaultSModelDescriptor) model;
      Assert.assertEquals(md.getPersistenceVersion(), ModelPersistence.LAST_VERSION);
    }
    public void test_testLastVersionIndexing() throws Exception {
      final TestPersistenceHelper helper = new TestPersistenceHelper();
      final CollectCallback c = new CollectCallback();
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          String serialized = PersistenceUtil.saveModel(helper.getTestModel(), helper.getDefaultExt());

          try {
            ModelPersistence.index(serialized.getBytes(FileUtil.DEFAULT_CHARSET), c);
          } catch (IOException e) {
            Assert.fail(e.getMessage());
          }
        }
      });

      Assert.assertTrue(c.myConcepts.contains(((SConceptAdapterById) MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept")).getId()));
      Assert.assertTrue(c.myImports.contains(new JavaPackageNameStub("java.io").asModelReference(PersistenceFacade.getInstance().createModuleReference("6354ebe7-c22a-4a0f-ac54-50b52ab9b065(JDK)"))));
      Assert.assertTrue(c.myExtRefs.contains(new SNodeId.Foreign("~System")));
      Assert.assertTrue(c.myLocalRefs.contains(new SNodePointer("r:b44bed60-e0f0-4d48-bb29-e0fdb2041a66(tests.testPersistence.testModel)", "3895553186365322355").getNodeId()));
    }
    public void test_testPersistenceReadWrite() throws Exception {
      // tests write and read in each supported persistence, check that model is not changed after write/read cycle 
      final TestPersistenceHelper helper = new TestPersistenceHelper();
      SModel model = helper.getTestModel();
      DefaultSModelDescriptor md = (DefaultSModelDescriptor) model;
      for (int i = TestPersistenceHelper.START_PERSISTENCE_TEST_VERSION; i <= ModelPersistence.LAST_VERSION; ++i) {
        PersistenceUtil.InMemoryStreamDataSource dataSource = new PersistenceUtil.InMemoryStreamDataSource();
        helper.saveModelInPersistence(md, dataSource, i);
        final ModelLoadResult result = ModelPersistence.readModel(SModelHeader.create(i), dataSource, ModelLoadingState.FULLY_LOADED);

        Assert.assertTrue(result.getState() == ModelLoadingState.FULLY_LOADED);
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            ModelAssert.assertDeepModelEquals(helper.getTestModel().getSModel(), result.getModel());
          }
        });
        result.getModel().dispose();
      }
    }
    public void test_testPersistenceUpgrade() throws Exception {
      TestPersistenceHelper helper = new TestPersistenceHelper();
      SModel model = helper.getTestModel();

      // tests that it's possible to upgrade to the latest persistence from any supported persistence 
      for (int fromVersion = TestPersistenceHelper.START_PERSISTENCE_TEST_VERSION; fromVersion < ModelPersistence.LAST_VERSION; fromVersion++) {
        // prepare data source in requested version 
        PersistenceUtil.InMemoryStreamDataSource notUpgradedData = new PersistenceUtil.InMemoryStreamDataSource();
        helper.saveModelInPersistence(((SModelBase) model), notUpgradedData, fromVersion);

        // load model from source version 
        String notUpgradedContent = notUpgradedData.getContent(FileUtil.DEFAULT_CHARSET_NAME);
        SModelBase notUpgradedModel = ((SModelBase) PersistenceUtil.loadModel(notUpgradedContent, helper.getDefaultExt()));

        // save model in last persistence 
        PersistenceUtil.InMemoryStreamDataSource upgradedData = new PersistenceUtil.InMemoryStreamDataSource();
        helper.saveModelInPersistence(notUpgradedModel, upgradedData, ModelPersistence.LAST_VERSION);

        // load model in last persistence from saved 
        String upgradedContent = upgradedData.getContent(FileUtil.DEFAULT_CHARSET_NAME);
        SModelBase upgradedModel = ((SModelBase) PersistenceUtil.loadModel(upgradedContent, helper.getDefaultExt()));

        // do test 
        ModelAssert.assertDeepModelEquals(notUpgradedModel.getSModel(), upgradedModel.getSModel());

        notUpgradedModel.getSModel().dispose();
        upgradedModel.getSModel().dispose();
      }
    }


  }
}
