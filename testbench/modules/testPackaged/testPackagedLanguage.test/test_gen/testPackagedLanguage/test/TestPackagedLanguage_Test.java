package testPackagedLanguage.test;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.testbench.EnvironmentAwareTestCase;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.module.SModule;
import junit.framework.Assert;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModuleOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import com.intellij.openapi.util.IconLoader;
import jetbrains.mps.ide.icons.GlobalIconManager;
import javax.swing.Icon;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SModelName;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.MPSModuleRepository;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;

@MPSLaunch
public class TestPackagedLanguage_Test extends EnvironmentAwareTestCase {
  /*package*/ SRepository projectRepository;
  public void test_testLanguagePresent() throws Exception {
    projectRepository.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        SModule language = testPackagedLanguageModule();
        Assert.assertNotNull(language);
        Assert.assertTrue(language instanceof Language);
      }
    });
  }
  public void test_testStructureModel() throws Exception {
    projectRepository.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        SModel struc = SModuleOperations.getAspect(testPackagedLanguageModule(), "structure");
        Assert.assertNotNull(struc);
        Assert.assertEquals(ListSequence.fromList(SModelOperations.roots(struc, null)).count(), 1);
      }
    });
  }
  public void test_testEditorModel() throws Exception {
    projectRepository.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        SModel editor = SModuleOperations.getAspect(testPackagedLanguageModule(), "editor");
        Assert.assertNotNull(editor);
        Assert.assertEquals(ListSequence.fromList(SModelOperations.roots(editor, null)).count(), 1);
      }
    });
  }
  public void test_testIcons() throws Exception {
    projectRepository.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        IconLoader.activate();
        GlobalIconManager iconManager = GlobalIconManager.getInstance();
        Icon icon = iconManager.getIconFor(MetaAdapterFactory.getConcept(0x2d9a25d302b84024L, 0xafe2bb9457a02cbfL, 0x6005c4080114d50fL, "testPackagedLanguage.structure.TestConcept"));
        Assert.assertNotNull(icon);
        Assert.assertEquals(icon.getIconWidth(), 16);
        Assert.assertEquals(icon.getIconHeight(), 16);
      }
    });
  }
  public void test_testStubs() throws Exception {
    projectRepository.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        SModel libraryModel = null;
        SModelName expected = new SModelName("dummy@java_stub");
        for (SModel m : testPackagedLanguageModule().getModels()) {
          if (expected.equals(m.getName())) {
            libraryModel = m;
            break;
          }
        }
        Assert.assertNotNull(libraryModel);
        Assert.assertEquals(ListSequence.fromList(SModelOperations.roots(libraryModel, null)).count(), 1);
        Assert.assertEquals(SPropertyOperations.getString(SNodeOperations.cast(ListSequence.fromList(SModelOperations.roots(libraryModel, null)).first(), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), "DummyLibraryClass");
      }
    });
  }
  public void setUp() {
    // FIXME in fact, shall access project instance MpsTestsSuite runnner has created from mps.test.modules list 
    projectRepository = myEnvironment.getPlatform().findComponent(MPSModuleRepository.class);
  }
  private SModule testPackagedLanguageModule() {
    return PersistenceFacade.getInstance().createModuleReference("2d9a25d3-02b8-4024-afe2-bb9457a02cbf(testPackagedLanguage)").resolve(projectRepository);
  }
}
