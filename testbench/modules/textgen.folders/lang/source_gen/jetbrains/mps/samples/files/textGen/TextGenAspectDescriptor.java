package jetbrains.mps.samples.files.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenAspectBase;
import jetbrains.mps.samples.files.structure.LanguageConceptSwitch;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.text.rt.TextGenDescriptor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.text.rt.TextGenModelOutline;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.util.FileUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class TextGenAspectDescriptor extends TextGenAspectBase {
  private final LanguageConceptSwitch myIndex = new LanguageConceptSwitch();

  public TextGenAspectDescriptor() {
  }

  @Nullable
  @Override
  public TextGenDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    switch (myIndex.index(concept)) {
      case LanguageConceptSwitch.File:
        return new File_TextGen();
      case LanguageConceptSwitch.File2:
        return new File2_TextGen();
    }
    return null;
  }

  @Override
  public void breakdownToUnits(@NotNull TextGenModelOutline outline) {
    for (SNode root : outline.getModel().getRootNodes()) {
      if (root.getConcept().equals(MetaAdapterFactory.getConcept(0x9e34de6fa11f4866L, 0xa52c3e2e545d3d90L, 0x3b29e241360a2058L, "jetbrains.mps.samples.files.structure.File"))) {
        String fname = getFileName_File(root);
        String ext = getFileExtension_File(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), root);
        continue;
      }
      if (root.getConcept().equals(MetaAdapterFactory.getConcept(0x9e34de6fa11f4866L, 0xa52c3e2e545d3d90L, 0x32e7e3e1f3d0e288L, "jetbrains.mps.samples.files.structure.File2"))) {
        String fname = getFileName_File2(root);
        String ext = getFileExtension_File2(root);
        outline.registerTextUnit((ext == null ? fname : (fname + '.' + ext)), getPath_File2(root), root);
        continue;
      }
    }
  }
  private static String getFileName_File(SNode node) {
    return node.getName();
  }
  private static String getFileName_File2(SNode node) {
    return FileUtil.getNameWithoutExtension(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
  }
  private static String getFileExtension_File(SNode node) {
    return null;
  }
  private static String getFileExtension_File2(SNode node) {
    return FileUtil.getExtension(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
  }
  private static String getPath_File2(SNode node) {
    return SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x9e34de6fa11f4866L, 0xa52c3e2e545d3d90L, 0x32e7e3e1f3d0e288L, 0x32e7e3e1f3d0e28bL, "path"));
  }
}
