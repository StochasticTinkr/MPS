package constraints.test.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseConstraintsAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class ConstraintsAspectDescriptor extends BaseConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }

  @Override
  public ConstraintsDescriptor getConstraints(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return new Base_Constraints();
      case 1:
        return new CanBeAncestorFail_Constraints();
      case 2:
        return new CanBeChildFail_Constraints();
      case 3:
        return new CanBeParentFail_Constraints();
      case 4:
        return new Derived1_Constrained_Constraints();
      case 5:
        return new Derived2_Constrained_Constraints();
      default:
    }
    return new BaseConstraintsDescriptor(concept);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x2b80057037584c14L, 0x86fb871266fb9d11L, 0x50b9acb92ed730ffL), MetaIdFactory.conceptId(0x2b80057037584c14L, 0x86fb871266fb9d11L, 0x7438d976714223ebL), MetaIdFactory.conceptId(0x2b80057037584c14L, 0x86fb871266fb9d11L, 0x7438d976714223eaL), MetaIdFactory.conceptId(0x2b80057037584c14L, 0x86fb871266fb9d11L, 0x7438d976714223ecL), MetaIdFactory.conceptId(0x2b80057037584c14L, 0x86fb871266fb9d11L, 0x50b9acb92ed73116L), MetaIdFactory.conceptId(0x2b80057037584c14L, 0x86fb871266fb9d11L, 0x50b9acb92ed73112L)).seal();
}
