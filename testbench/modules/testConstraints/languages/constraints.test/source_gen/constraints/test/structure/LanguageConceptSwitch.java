package constraints.test.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int TestConstraintsInheritance_Base = 0;
  public static final int TestConstraintsInheritance_Concept_CC = 1;
  public static final int TestConstraintsInheritance_Concept_CI = 2;
  public static final int TestConstraintsInheritance_Concept_II = 3;
  public static final int TestConstraintsInheritance_Container = 4;
  public static final int TestConstraintsInheritance_Derived1_Constrained = 5;
  public static final int TestConstraintsInheritance_Derived1_Inherited = 6;
  public static final int TestConstraintsInheritance_Derived2_Constrained = 7;
  public static final int TestConstraintsInheritance_Derived2_Inherited = 8;
  public static final int TestConstraintsInvocation_CanBeAncestorFail = 9;
  public static final int TestConstraintsInvocation_CanBeChildFail = 10;
  public static final int TestConstraintsInvocation_CanBeParentFail = 11;
  public static final int TestConstraintsInvocation_Child = 12;
  public static final int TestRefConstraints_BaseReference_Handler = 13;
  public static final int TestRefConstraints_BaseReference_Scoping = 14;
  public static final int TestRefConstraints_Container = 15;
  public static final int TestRefConstraints_SubReference_HandlerSuperHandler = 16;
  public static final int TestRefConstraints_SubReference_HandlerSuperScoping = 17;
  public static final int TestRefConstraints_SubReference_ScopingSuperHandler = 18;
  public static final int TestRefConstraints_SubReference_ScopingSuperScoping = 19;
  public static final int TestRefConstraints_Target = 20;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x2b80057037584c14L, 0x86fb871266fb9d11L);
    builder.put(0x50b9acb92ed730ffL, TestConstraintsInheritance_Base);
    builder.put(0x50b9acb92ed7a75fL, TestConstraintsInheritance_Concept_CC);
    builder.put(0x50b9acb92ed7a775L, TestConstraintsInheritance_Concept_CI);
    builder.put(0x50b9acb92ed7a785L, TestConstraintsInheritance_Concept_II);
    builder.put(0x50b9acb92ed730f4L, TestConstraintsInheritance_Container);
    builder.put(0x50b9acb92ed73116L, TestConstraintsInheritance_Derived1_Constrained);
    builder.put(0x50b9acb92ed7311cL, TestConstraintsInheritance_Derived1_Inherited);
    builder.put(0x50b9acb92ed73112L, TestConstraintsInheritance_Derived2_Constrained);
    builder.put(0x50b9acb92ed73124L, TestConstraintsInheritance_Derived2_Inherited);
    builder.put(0x7438d976714223ebL, TestConstraintsInvocation_CanBeAncestorFail);
    builder.put(0x7438d976714223eaL, TestConstraintsInvocation_CanBeChildFail);
    builder.put(0x7438d976714223ecL, TestConstraintsInvocation_CanBeParentFail);
    builder.put(0xa2290b8b60493a1L, TestConstraintsInvocation_Child);
    builder.put(0x244a30660588e212L, TestRefConstraints_BaseReference_Handler);
    builder.put(0x244a306605641c73L, TestRefConstraints_BaseReference_Scoping);
    builder.put(0x244a306605641cdfL, TestRefConstraints_Container);
    builder.put(0x244a3066058dc091L, TestRefConstraints_SubReference_HandlerSuperHandler);
    builder.put(0x244a306605641c7fL, TestRefConstraints_SubReference_HandlerSuperScoping);
    builder.put(0x244a3066058dc08eL, TestRefConstraints_SubReference_ScopingSuperHandler);
    builder.put(0x244a306605641c7eL, TestRefConstraints_SubReference_ScopingSuperScoping);
    builder.put(0x244a306605641c74L, TestRefConstraints_Target);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
