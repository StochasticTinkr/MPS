package jetbrains.mps.tool.environment;

/*Generated by MPS */

import com.intellij.idea.IdeaTestApplication;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.platform.watching.FSChangesWatcher;
import jetbrains.mps.ide.MPSCoreComponents;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.project.Project;
import java.io.File;
import com.intellij.openapi.util.Disposer;
import com.intellij.openapi.application.ModalityState;
import jetbrains.mps.util.FileUtil;
import java.io.InputStream;
import java.io.FileOutputStream;
import jetbrains.mps.util.ReadUtil;
import java.io.IOException;
import com.intellij.openapi.project.ex.ProjectManagerEx;
import com.intellij.openapi.vfs.VirtualFileManager;
import jetbrains.mps.project.MPSProject;
import java.util.concurrent.Semaphore;
import com.intellij.openapi.startup.StartupManager;
import com.intellij.ide.startup.StartupManagerEx;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.core.platform.Platform;
import org.jetbrains.annotations.Nullable;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

/**
 * Use #getOrCreate method to construct this kind of environment
 * TODO: fix dispose methods
 */
public class IdeaEnvironment extends EnvironmentBase {
  private static final String MISC_XML_URI = "/jetbrains/mps/testbench/junit/runners/misc.xml";

  private IdeaTestApplication myIdeaApplication;

  static {
    EnvironmentBase.initializeLog4j();
  }

  protected IdeaEnvironment(@NotNull EnvironmentConfig config) {
    super(config);
  }

  /**
   * creates a new IdeaEnvironment or returns the cached one
   */
  @NotNull
  public static Environment getOrCreate(@NotNull EnvironmentConfig config) {
    Environment currentEnv = EnvironmentContainer.get();
    if (currentEnv != null) {
      if (!(currentEnv instanceof IdeaEnvironment)) {
        throw new IllegalStateException("Still no support for interchanging lightweight and heavyweight environments");
      }
      currentEnv.retain();
      return currentEnv;
    } else {
      IdeaEnvironment ideaEnv = new IdeaEnvironment(config);
      ideaEnv.init();
      assert EnvironmentContainer.get() == ideaEnv;
      return ideaEnv;
    }
  }

  @Override
  public void init() {
    if (LOG.isInfoEnabled()) {
      LOG.info("Creating IDEA environment");
    }
    EnvironmentBase.setSystemProperties(true);
    EnvironmentBase.setIdeaPluginsToLoad(myConfig);

    myIdeaApplication = createIdeaTestApp();
    // Necessary to listen for FS changes notifications & notify MPS FS listeners to update repository/.. 
    // this code will work if on executing tests with "reuse caches" option 
    // TODO: should we modify FSChangesWatcher to always listen for FS notifications (even in tests)? 
    FSChangesWatcher.instance().initComponent(true);

    MPSCoreComponents coreComponents = getMPSCoreComponents();
    super.init(coreComponents.getLibraryInitializer());
  }

  private MPSCoreComponents getMPSCoreComponents() {
    return ApplicationManager.getApplication().getComponent(MPSCoreComponents.class);
  }

  private IdeaTestApplication createIdeaTestApp() {
    if (LOG.isInfoEnabled()) {
      LOG.info("Creating IdeaTestApplication");
    }
    return IdeaTestApplication.getInstance();
  }

  @Override
  @NotNull
  public Project doOpenProject(@NotNull File projectFile) {
    return openProjectInIdeaEnvironment(projectFile);
  }

  @NotNull
  @Override
  public Project createEmptyProject() {
    checkInitialized();
    if (LOG.isInfoEnabled()) {
      LOG.info("Creating an empty project");
    }
    File dummyProjectFile = createDummyProjectFile();
    Project dummyProject = openProject(dummyProjectFile);
    return dummyProject;
  }

  @Override
  public void doDispose() {
    ApplicationManager.getApplication().invokeAndWait(new Runnable() {
      @Override
      public void run() {
        ApplicationManager.getApplication().runWriteAction(new Runnable() {
          public void run() {
            Disposer.dispose(myIdeaApplication);
          }
        });
      }
    }, ModalityState.NON_MODAL);
  }

  private File createDummyProjectFile() {
    File dummyProjDir = FileUtil.createTmpDir();
    File dotMps = new File(dummyProjDir, ".mps");
    dotMps.mkdir();
    File projectFile = new File(dotMps, IdeaEnvironment.MISC_XML_URI.substring(IdeaEnvironment.MISC_XML_URI.lastIndexOf("/") + 1));
    try {
      projectFile.createNewFile();
      InputStream input = IdeaEnvironment.class.getResourceAsStream(IdeaEnvironment.MISC_XML_URI);
      FileOutputStream stream = new FileOutputStream(projectFile);
      stream.write(ReadUtil.read(input));
      stream.close();
      input.close();
    } catch (IOException e) {
      e.printStackTrace();
      return null;
    }
    dummyProjDir.deleteOnExit();
    return dummyProjDir;
  }

  @NotNull
  private Project openProjectInIdeaEnvironment(File projectFile) {
    if (!(projectFile.exists())) {
      throw new RuntimeException("Can't find project file " + projectFile.getAbsolutePath());
    }
    final ProjectManagerEx projectManager = ProjectManagerEx.getInstanceEx();
    final String filePath = projectFile.getAbsolutePath();
    // this is a workaround for MPS-8840 
    final com.intellij.openapi.project.Project[] project = new com.intellij.openapi.project.Project[1];
    final Exception[] exc = new Exception[]{null};
    ApplicationManager.getApplication().invokeAndWait(new Runnable() {
      public void run() {
        try {
          if (LOG.isInfoEnabled()) {
            LOG.info("Load and open the project with path '" + filePath + "'");
          }
          project[0] = projectManager.loadAndOpenProject(filePath);
          // calling sync refresh for FS in order to update all modules/models loaded from the project 
          // if unit-test is executed with the "reuse caches" option. 
          VirtualFileManager.getInstance().syncRefresh();
        } catch (Exception e) {
          exc[0] = e;
        }
      }
    }, ModalityState.NON_MODAL);
    if (exc[0] != null) {
      throw new RuntimeException("ProjectManager could not load project from " + projectFile.getAbsolutePath(), exc[0]);
    }
    waitForPostStartupActivities(project);

    return project[0].getComponent(MPSProject.class);
  }

  private void waitForPostStartupActivities(final com.intellij.openapi.project.Project[] project) {
    final Semaphore sem = new Semaphore(0);
    if (project[0] != null) {
      StartupManager.getInstance(project[0]).registerPostStartupActivity(new Runnable() {
        public void run() {
          sem.release();
        }
      });
    }
    try {
      sem.acquire();
    } catch (InterruptedException e) {
      throw new RuntimeException("Caught exception while waiting for the post startup activities", e);
    }
    assert StartupManagerEx.getInstanceEx(project[0]).postStartupActivityPassed();
  }

  @Override
  public void flushAllEvents() {
    checkInitialized();
    ApplicationManager.getApplication().invokeAndWait(new Runnable() {
      public void run() {
      }
    }, ModalityState.NON_MODAL);
    ModelAccess.instance().flushEventQueue();
  }


  @Override
  public Platform getPlatform() {
    return getMPSCoreComponents().getPlatform();
  }

  @Nullable
  @Override
  protected ClassLoader rootClassLoader() {
    return null;
  }
  protected static Logger LOG = LogManager.getLogger(IdeaEnvironment.class);
}
