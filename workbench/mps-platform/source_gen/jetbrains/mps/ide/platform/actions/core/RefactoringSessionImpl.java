package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import jetbrains.mps.lang.migration.runtime.base.RefactoringSession;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class RefactoringSessionImpl implements RefactoringSession {

  private List<Runnable> myChanges = ListSequence.fromList(new ArrayList<Runnable>());
  private List<Runnable> myClosingChanges = ListSequence.fromList(new ArrayList<Runnable>());

  private Map<String, Object> myObjects = MapSequence.fromMap(new HashMap<String, Object>());

  public void putObject(String id, Object object) {
    MapSequence.fromMap(myObjects).put(id, object);
  }
  public Object getObject(String id) {
    return MapSequence.fromMap(myObjects).get(id);
  }
  public void registerChange(Runnable change) {
    ListSequence.fromList(myChanges).addElement(change);
  }
  public void registerLast(Runnable change) {
    ListSequence.fromList(myClosingChanges).addElement(change);
  }

  public void close() {
    for (Runnable change : ListSequence.fromList(myChanges).concat(ListSequence.fromList(myClosingChanges))) {
      try {
        change.run();
      } catch (Throwable e) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Error executing change", e);
        }
      }
    }
  }
  protected static Logger LOG = LogManager.getLogger(RefactoringSessionImpl.class);
}
