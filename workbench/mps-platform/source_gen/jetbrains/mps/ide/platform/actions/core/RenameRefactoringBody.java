package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.Project;
import jetbrains.mps.refactoring.participant.RefactoringParticipant;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import jetbrains.mps.refactoring.participant.RenameNodeRefactoringParticipant;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.refactoring.participant.RefactoringSession;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class RenameRefactoringBody implements RefactoringProcessor.RefactoringBody<SNode, String> {
  public final String myName;
  public final SNode myNode;
  public final String myNewNodeName;
  public final Project myProject;
  public RenameRefactoringBody(String refactoringName, SNode node, String newNodeName, Project project) {
    myName = refactoringName;
    myNode = node;
    myNewNodeName = newNodeName;
    myProject = project;
  }
  public String getRefactoringName() {
    return myName;
  }
  public Iterable<? extends RefactoringParticipant<?, ?, SNode, String>> getAllAvailableParticipants() {
    return new ExtensionPoint<RenameNodeRefactoringParticipant<?, ?>>("jetbrains.mps.refactoring.participant.RenameNodeParticipantEP").getObjects();
  }
  public List<SNode> findInitialStates() {
    return ListSequence.fromListAndArray(new ArrayList<SNode>(), myNode);
  }
  public void doRefactor(Iterable<RefactoringParticipant.ParticipantApplied<?, ?, SNode, String, SNode, String>> participantStates, RefactoringSession refactoringSession) {
    myProject.getRepository().getModelAccess().executeCommand(new Runnable() {
      public void run() {
        SPropertyOperations.assign(myNode, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), myNewNodeName);
      }
    });
  }
  @Override
  public String getFinalStateFor(SNode initialState) {
    if (initialState == myNode) {
      return myNewNodeName;
    } else {
      throw new IllegalStateException("asked for: " + initialState.getReference() + ", known: " + myNode.getReference());
    }
  }
  public void doCleanup() {
    // do nothing 
  }


}
