package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.refactoring.framework.RefactoringUtil;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.apache.log4j.Level;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MoveNodes_Action extends BaseAction {
  private static final Icon ICON = null;
  public MoveNodes_Action() {
    super("Move Nodes", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    // if old refactoring is overrided we should execute other action instead 
    boolean oldRefactoringApplicable = RefactoringUtil.isApplicable(RefactoringUtil.getRefactoringByClassName("jetbrains.mps.lang.core.refactorings" + "." + "MoveNodes"), ((List<SNode>) MapSequence.fromMap(_params).get("nodesToMove")));

    if (MoveNodesDefault.canBeMoved(((List<SNode>) MapSequence.fromMap(_params).get("nodesToMove")), ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository()) && oldRefactoringApplicable) {
      MoveNodesRefactoring refactoring = MoveNodes_Action.this.getRefactoring(_params);
      event.getPresentation().setText(refactoring.getName());
      event.getPresentation().setEnabled(true);
    } else {
      event.getPresentation().setEnabled(false);
    }
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      List<SNode> nodes = event.getData(MPSCommonDataKeys.NODES);
      if (nodes == null) {
        MapSequence.fromMap(_params).put("nodesToMove", null);
      } else {
        MapSequence.fromMap(_params).put("nodesToMove", ListSequence.fromListWithValues(new ArrayList<SNode>(), nodes));
      }
      if (nodes == null) {
        return false;
      }

    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    MoveNodes_Action.this.getRefactoring(_params).apply(((MPSProject) MapSequence.fromMap(_params).get("project")), ((List<SNode>) MapSequence.fromMap(_params).get("nodesToMove")));
  }
  private MoveNodesRefactoring getRefactoring(final Map<String, Object> _params) {
    Iterable<MoveNodesRefactoring> specialRefactorings = new ExtensionPoint<MoveNodesRefactoring>("jetbrains.mps.ide.platform.MoveNodesAction").getObjects();
    Iterable<MoveNodesRefactoring> applicableRefactorings = Sequence.fromIterable(specialRefactorings).where(new IWhereFilter<MoveNodesRefactoring>() {
      public boolean accept(MoveNodesRefactoring it) {
        return it.isApplicable(((MPSProject) MapSequence.fromMap(_params).get("project")), ((List<SNode>) MapSequence.fromMap(_params).get("nodesToMove")));
      }
    });
    if (Sequence.fromIterable(applicableRefactorings).isEmpty()) {
      return new MoveNodesDefault();
    } else {
      if (Sequence.fromIterable(applicableRefactorings).count() > 1) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("More than one MoveNodes refactoring applicable: " + Sequence.fromIterable(applicableRefactorings).select(new ISelector<MoveNodesRefactoring, String>() {
            public String select(MoveNodesRefactoring it) {
              return "\"" + it.getName() + "\"";
            }
          }).foldLeft("", new ILeftCombinator<String, String>() {
            public String combine(String s, String it) {
              return s + ", " + it;
            }
          }));
        }
      }
      return Sequence.fromIterable(applicableRefactorings).first();
    }
  }
  protected static Logger LOG = LogManager.getLogger(MoveNodes_Action.class);
}
