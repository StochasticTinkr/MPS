package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.lang.migration.runtime.base.RefactoringSession;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.progress.ProgressMonitorAdapter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.platform.refactoring.RefactoringAccessEx;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewAction;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewItem;
import org.apache.log4j.Level;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.module.SearchScope;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.util.SubProgressKind;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class RefactoringProcessor {

  public interface RefactoringUI {
    void prepare(Runnable task);
    void runSearch(final _FunctionTypes._void_P1_E0<? super ProgressMonitor> task);
    List<RefactoringParticipant.Option> selectParticipants(List<RefactoringParticipant.Option> options);
    void runRefactoring(final Runnable task, String refactoringName, SearchResults searchResults, RefactoringSession session);
  }

  public static class RefactoringUIImpl implements RefactoringProcessor.RefactoringUI {
    private MPSProject myProject;
    private RefactoringSessionImpl myRefactoringSession;
    public RefactoringUIImpl(MPSProject project, RefactoringSessionImpl refactoringSession) {
      myProject = project;
      myRefactoringSession = refactoringSession;
    }
    public void runSearch(final _FunctionTypes._void_P1_E0<? super ProgressMonitor> task) {
      ProgressManager.getInstance().run(new Task.Modal(myProject.getProject(), "Refactoring", true) {
        public void run(@NotNull final ProgressIndicator progressIndicator) {
          RefactoringUIImpl.this.myProject.getRepository().getModelAccess().runReadAction(new Runnable() {
            public void run() {
              ProgressMonitorAdapter progressMonitor = new ProgressMonitorAdapter(progressIndicator);
              task.invoke(progressMonitor);
            }
          });
        }
      });
    }
    public void prepare(Runnable task) {
      myProject.getRepository().getModelAccess().runReadAction(task);
    }
    public List<RefactoringParticipant.Option> selectParticipants(final List<RefactoringParticipant.Option> options) {
      if (ListSequence.fromList(options).isEmpty()) {
        return options;
      }
      List<Integer> selectedOptionIndices = SelectOptionsDialog.selectOptions(myProject.getProject(), ListSequence.fromList(options).select(new ISelector<RefactoringParticipant.Option, String>() {
        public String select(RefactoringParticipant.Option it) {
          return it.getDescription();
        }
      }).toListSequence(), "Select Participants", "Select how to update usages:");
      if (selectedOptionIndices == null) {
        return null;
      }
      return ListSequence.fromList(selectedOptionIndices).select(new ISelector<Integer, RefactoringParticipant.Option>() {
        public RefactoringParticipant.Option select(Integer i) {
          return ListSequence.fromList(options).getElement(i);
        }
      }).toListSequence();
    }

    public void runRefactoring(final Runnable task, String refactoringName, SearchResults searchResults, RefactoringSession refactoringSession) {
      RefactoringAccessEx.getInstance().showRefactoringView(myProject.getProject(), new RefactoringViewAction() {
        public void performAction(RefactoringViewItem refactoringViewItem) {
          try {
            myProject.getRepository().getModelAccess().executeCommand(new Runnable() {
              public void run() {
                task.run();
                myRefactoringSession.close();
              }
            });
          } catch (RuntimeException exception) {
            if (LOG.isEnabledFor(Level.ERROR)) {
              LOG.error("Exception during refactoring: ", exception);
            }
          }
          refactoringViewItem.close();
        }
      }, searchResults, false, refactoringName);
    }
  }

  public static <IP, FP, IS, FS> Iterable<RefactoringParticipant.ParticipantState<?, ?, IP, FP, IS, FS>> askParticipantChanges(final RefactoringParticipant.ParticipantStateFactory<IP, FP, IS, FS> factory, RefactoringProcessor.RefactoringUI refactoringUI, final SRepository repository, final SearchScope searchScope, final Iterable<? extends RefactoringParticipant<?, ?, IP, FP>> participants, final List<IS> nodes) {

    final List<RefactoringParticipant.ParticipantState<?, ?, IP, FP, IS, FS>> participantStates = ListSequence.fromList(new ArrayList<RefactoringParticipant.ParticipantState<?, ?, IP, FP, IS, FS>>());
    final Wrappers._T<List<RefactoringParticipant.Option>> options = new Wrappers._T<List<RefactoringParticipant.Option>>();
    refactoringUI.prepare(new Runnable() {
      public void run() {
        for (RefactoringParticipant<?, ?, IP, FP> participant : Sequence.fromIterable(participants)) {
          ListSequence.fromList(participantStates).addElement(RefactoringParticipant.ParticipantState.create(factory, participant, nodes));
        }
        options.value = ListSequence.fromList(participantStates).translate(new ITranslator2<RefactoringParticipant.ParticipantState<?, ?, IP, FP, IS, FS>, RefactoringParticipant.Option>() {
          public Iterable<RefactoringParticipant.Option> translate(RefactoringParticipant.ParticipantState<?, ?, IP, FP, IS, FS> it) {
            return it.getAvaliableOptions(repository);
          }
        }).distinct().sort(new ISelector<RefactoringParticipant.Option, String>() {
          public String select(RefactoringParticipant.Option it) {
            return it.getDescription();
          }
        }, true).toListSequence();
      }
    });

    final List<RefactoringParticipant.Option> selectedOptions = refactoringUI.selectParticipants(options.value);
    if (selectedOptions == null) {
      return null;
    }
    final Wrappers._boolean cancelled = new Wrappers._boolean(false);
    refactoringUI.runSearch(new _FunctionTypes._void_P1_E0<ProgressMonitor>() {
      public void invoke(ProgressMonitor progressMonitor) {
        int steps = ListSequence.fromList(participantStates).count();
        progressMonitor.start("Searching for usages", steps);
        for (RefactoringParticipant.ParticipantState<?, ?, IP, FP, IS, FS> participantStates : ListSequence.fromList(participantStates)) {
          try {
            participantStates.findChanges(repository, selectedOptions, searchScope, progressMonitor.subTask(1, SubProgressKind.AS_COMMENT));
          } catch (RuntimeException e) {
            if (LOG.isEnabledFor(Level.ERROR)) {
              LOG.error("Exception during usages search", e);
            }
            cancelled.value = true;
            break;
          }
          if (progressMonitor.isCanceled()) {
            cancelled.value = true;
            break;
          }
        }
        progressMonitor.done();
      }
    });

    if (cancelled.value) {
      return null;
    }
    return participantStates;
  }

  public static <IP, FP> void performRefactoring(MPSProject project, String refactoringName, Iterable<? extends RefactoringParticipant<?, ?, IP, FP>> participants, final List<IP> initialStates, final _FunctionTypes._return_P2_E0<? extends _FunctionTypes._return_P1_E0<? extends FP, ? super IP>, ? super Iterable<RefactoringParticipant.ParticipantState<?, ?, IP, FP, IP, FP>>, ? super RefactoringSession> doRefactor) {
    RefactoringSessionImpl refactoringSession = new RefactoringSessionImpl();
    performRefactoring(new RefactoringParticipant.CollectingParticipantStateFactory<IP, FP>(), new RefactoringProcessor.RefactoringUIImpl(project, refactoringSession), refactoringSession, project.getRepository(), project.getScope(), refactoringName, participants, initialStates, doRefactor);
  }

  public static <IP, FP, IS, FS> void performRefactoring(RefactoringParticipant.ParticipantStateFactory<IP, FP, IS, FS> factory, RefactoringProcessor.RefactoringUI refactoringUI, final RefactoringSession refactoringSession, final SRepository repository, SearchScope scope, String refactoringName, Iterable<? extends RefactoringParticipant<?, ?, IP, FP>> participants, final List<IS> initialStates, final _FunctionTypes._return_P2_E0<? extends _FunctionTypes._return_P1_E0<? extends FS, ? super IS>, ? super Iterable<RefactoringParticipant.ParticipantState<?, ?, IP, FP, IS, FS>>, ? super RefactoringSession> doRefactor) {
    final Iterable<RefactoringParticipant.ParticipantState<?, ?, IP, FP, IS, FS>> participantStates = askParticipantChanges(factory, refactoringUI, repository, scope, participants, initialStates);
    if (participantStates == null) {
      return;
    }

    SearchResults searchResults = new SearchResults();
    for (RefactoringParticipant.ParticipantState<?, ?, IP, FP, IS, FS> participantState : Sequence.fromIterable(participantStates)) {
      List<? extends List<? extends RefactoringParticipant.Change<?, ?>>> participantChanges = participantState.getChanges();
      for (List<? extends RefactoringParticipant.Change<?, ?>> nodeChanges : ListSequence.fromList(participantChanges)) {
        for (RefactoringParticipant.Change<?, ?> change : ListSequence.fromList(nodeChanges)) {
          searchResults.addAll(change.getSearchResults());
        }
      }
    }

    refactoringUI.runRefactoring(new Runnable() {
      public void run() {
        final _FunctionTypes._return_P1_E0<? extends FS, ? super IS> getFinalObject = doRefactor.invoke(participantStates, refactoringSession);
        if (getFinalObject == null) {
          return;
        }
        for (RefactoringParticipant.ParticipantState<?, ?, IP, FP, IS, FS> participantState : Sequence.fromIterable(participantStates)) {
          participantState.doRefactor(ListSequence.fromList(initialStates).select(new ISelector<IS, FS>() {
            public FS select(IS it) {
              return getFinalObject.invoke(it);
            }
          }).toListSequence(), repository, refactoringSession);
        }
      }
    }, refactoringName, searchResults, refactoringSession);
  }

  protected static Logger LOG = LogManager.getLogger(RefactoringProcessor.class);
}
