package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.internal.collections.runtime.IMapping;
import java.util.Iterator;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.ide.platform.refactoring.NodeLocation;
import jetbrains.mps.ide.platform.refactoring.MoveNodesDialog;
import java.util.Collection;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.Project;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.ide.project.ProjectHelper;
import java.util.ArrayList;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.progress.ProgressMonitorAdapter;
import jetbrains.mps.internal.collections.runtime.ILeftCombinator;
import org.jetbrains.mps.openapi.util.SubProgressKind;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.platform.refactoring.RefactoringAccessEx;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewAction;
import jetbrains.mps.ide.platform.refactoring.RefactoringViewItem;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class MoveNodesDefault implements MoveNodesRefactoring {


  public String getName() {
    return "Move Nodes";
  }

  public static void moveNodes(List<SNode> nodes, MPSProject mpsProject) {
    MoveNodesDefault moveNodesDefault = new MoveNodesDefault();
    if (moveNodesDefault.isApplicable(mpsProject, nodes)) {
      moveNodesDefault.apply(mpsProject, nodes);
    }
  }

  public boolean isApplicable(MPSProject project, List<SNode> nodesToMove) {
    return canBeMoved(nodesToMove, project.getRepository());
  }

  public static boolean canBeMoved(final List<SNode> nodesToMove, SRepository repository) {
    if (ListSequence.fromList(nodesToMove).isEmpty()) {
      return false;
    }
    final Wrappers._boolean result = new Wrappers._boolean();
    repository.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        SNode firstNode = ListSequence.fromList(nodesToMove).first();
        final SContainmentLink containmentLink = firstNode.getContainmentLink();
        final SNode parent = firstNode.getParent();
        final SModel model = firstNode.getModel();
        result.value = ListSequence.fromList(nodesToMove).all(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return eq_92fyi8_a0a0a0a0a0a0a4a0a0a0a2a8(it.getContainmentLink(), containmentLink) && it.getParent() == parent && it.getModel() == model;
          }
        });
      }
    });
    return result.value;
  }

  public static class CopyMapObject {
    private static final String id = "refactoringSession.copyMap";
    private Map<SNode, SNode> copyMap = MapSequence.fromMap(new HashMap<SNode, SNode>());
    private Map<SNode, Boolean> keepOldNodes = MapSequence.fromMap(new HashMap<SNode, Boolean>());
    public static MoveNodesDefault.CopyMapObject getCopyMap(RefactoringSession session) {
      MoveNodesDefault.CopyMapObject result = (MoveNodesDefault.CopyMapObject) session.getObject(id);
      if (result == null) {
        result = new MoveNodesDefault.CopyMapObject();
        session.putObject(id, result);
      }
      return result;
    }
    public Map<SNode, SNode> getCopyMap() {
      return copyMap;
    }
    public List<SNode> copy(List<SNode> oldNodes, List<Boolean> shouldKeep) {
      if (ListSequence.fromList(oldNodes).count() != ListSequence.fromList(shouldKeep).count()) {
        throw new IllegalArgumentException();
      }
      Map<SNode, SNode> localCopyMap = MapSequence.fromMap(new HashMap<SNode, SNode>());
      List<SNode> result = CopyUtil.copyAndPreserveId(oldNodes, localCopyMap);
      MapSequence.fromMap(copyMap).putAll(localCopyMap);
      for (IMapping<SNode, SNode> mapping : MapSequence.fromMap(copyMap)) {
        CopyUtil.addReferences(mapping.key(), copyMap, false);
      }
      {
        Iterator<SNode> oldNode_it = ListSequence.fromList(oldNodes).iterator();
        Iterator<Boolean> sk_it = ListSequence.fromList(shouldKeep).iterator();
        SNode oldNode_var;
        boolean sk_var;
        while (oldNode_it.hasNext() && sk_it.hasNext()) {
          oldNode_var = oldNode_it.next();
          sk_var = sk_it.next();
          for (SNode desc : ListSequence.fromList(SNodeOperations.getNodeDescendants(oldNode_var, null, true, new SAbstractConcept[]{}))) {
            MapSequence.fromMap(keepOldNodes).put(desc, sk_var);
          }
          if (!(sk_var)) {
            SNodeOperations.detachNode(oldNode_var);
          }
        }
      }
      return result;
    }
    public boolean whetherKeepNode(SNode oldNode) {
      if (!(MapSequence.fromMap(keepOldNodes).containsKey(oldNode))) {
        throw new IllegalStateException();
      }
      return MapSequence.fromMap(keepOldNodes).get(oldNode);
    }
  }

  public void apply(final MPSProject project, final List<SNode> nodesToMove) {

    final Wrappers._T<SModel> currentModel = new Wrappers._T<SModel>();
    final Wrappers._T<SContainmentLink> role = new Wrappers._T<SContainmentLink>();
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        currentModel.value = SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
        role.value = ListSequence.fromList(nodesToMove).first().getContainmentLink();
      }
    });
    final SContainmentLink finalRole = role.value;
    final NodeLocation newLocation = MoveNodesDialog.getSelectedObject(project.getProject(), currentModel.value, new MoveNodesDialog.ModelFilter("Choose Node or Model") {
      @Override
      public boolean check(final NodeLocation selectedObject, SModel model) {
        if (selectedObject == null) {
          return false;
        }
        if (selectedObject instanceof NodeLocation.NodeLocationChild) {
          if (finalRole == null) {
            return false;
          }
          final Wrappers._T<Collection<SContainmentLink>> containmentLinks = new Wrappers._T<Collection<SContainmentLink>>();
          project.getRepository().getModelAccess().runReadAction(new Runnable() {
            public void run() {
              containmentLinks.value = ((NodeLocation.NodeLocationChild) selectedObject).getNode().resolve(project.getRepository()).getConcept().getContainmentLinks();
            }
          });
          return CollectionSequence.fromCollection(containmentLinks.value).contains(finalRole);
        } else {
          return true;
        }
      }
    });
    if (newLocation instanceof NodeLocation.NodeLocationChild) {
      ((NodeLocation.NodeLocationChild) newLocation).setRole(role.value);
    }
    if (newLocation == null) {
      return;
    }
    Map<SNodeReference, NodeLocation> moveMap = MapSequence.fromMap(new HashMap<SNodeReference, NodeLocation>());
    for (SNode node : ListSequence.fromList(nodesToMove)) {
      MapSequence.fromMap(moveMap).put(node.getReference(), newLocation);
    }
    doMove(project, moveMap, null);
  }

  public static class ToMoveItem extends MultiTuple._2<List<SNode>, NodeLocation> {
    public ToMoveItem() {
      super();
    }
    public ToMoveItem(List<SNode> nodes, NodeLocation newLocation) {
      super(nodes, newLocation);
    }
    public List<SNode> nodes(List<SNode> value) {
      return super._0(value);
    }
    public NodeLocation newLocation(NodeLocation value) {
      return super._1(value);
    }
    public List<SNode> nodes() {
      return super._0();
    }
    public NodeLocation newLocation() {
      return super._1();
    }
  }

  @NotNull
  public static SNode resolveNode(SNodeReference nodeReference, Project project) {
    SNode node = nodeReference.resolve(project.getRepository());
    if (node == null) {
      throw new IllegalArgumentException("Node " + nodeReference + " doesn't exist in current project.");
    }
    return node;
  }

  public static void doMove(final MPSProject project, final List<ToMoveItem> toMove, _FunctionTypes._void_P1_E0<? super RefactoringSession> callBack) {
    Map<SNodeReference, NodeLocation> moveMap = MapSequence.fromMap(new HashMap<SNodeReference, NodeLocation>());
    for (ToMoveItem nodesToMove : ListSequence.fromList(toMove)) {
      for (SNode node : ListSequence.fromList(nodesToMove.nodes())) {
        MapSequence.fromMap(moveMap).put(node.getReference(), nodesToMove.newLocation());
      }
    }
    doMove(project, moveMap, callBack);
  }

  public static void doMove(final MPSProject project, final Map<SNodeReference, NodeLocation> moveMap, final _FunctionTypes._void_P1_E0<? super RefactoringSession> initRefactoringSession) {

    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        for (IMapping<SNodeReference, NodeLocation> moving : MapSequence.fromMap(moveMap)) {
          SNode node = resolveNode(moving.key(), project);
          if (!(moving.value().canInsert(project.getRepository(), node))) {
            throw new IllegalArgumentException();
          }
        }
      }
    });

    final Map<RefactoringParticipant, Map<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>>> changes = MapSequence.fromMap(new HashMap<RefactoringParticipant, Map<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>>>());
    final Map<SNodeReference, SNodeReference> nodeRoots = MapSequence.fromMap(new HashMap<SNodeReference, SNodeReference>());
    final Wrappers._T<List<RefactoringParticipant.Option>> options = new Wrappers._T<List<RefactoringParticipant.Option>>();
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        for (SNodeReference nodeToMove : SetSequence.fromSet(MapSequence.fromMap(moveMap).keySet())) {
          for (SNodeReference descendant : ListSequence.fromList(SNodeOperations.getNodeDescendants(resolveNode(nodeToMove, project), null, true, new SAbstractConcept[]{})).select(new ISelector<SNode, SNodeReference>() {
            public SNodeReference select(SNode it) {
              return it.getReference();
            }
          })) {
            MapSequence.fromMap(nodeRoots).put(descendant, nodeToMove);
          }
        }
        for (MoveNodeRefactoringParticipant<?, ?> participant : Sequence.fromIterable(new ExtensionPoint<MoveNodeRefactoringParticipant<?, ?>>("jetbrains.mps.ide.platform.MoveNodeParticipantEP").getObjects()).toListSequence()) {
          Map<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>> participantStates = MapSequence.fromMap(new HashMap<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>>());
          MapSequence.fromMap(changes).put(participant, participantStates);
          for (SNodeReference nodeRef : SetSequence.fromSet(MapSequence.fromMap(nodeRoots).keySet())) {
            MapSequence.fromMap(participantStates).put(nodeRef, RefactoringParticipant.ParticipantState.create(participant, resolveNode(nodeRef, project)));
          }
        }
        options.value = MapSequence.fromMap(changes).translate(new ITranslator2<IMapping<RefactoringParticipant, Map<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>>>, RefactoringParticipant.Option>() {
          public Iterable<RefactoringParticipant.Option> translate(IMapping<RefactoringParticipant, Map<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>>> it) {
            return MapSequence.fromMap(it.value()).translate(new ITranslator2<IMapping<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>>, RefactoringParticipant.Option>() {
              public Iterable<RefactoringParticipant.Option> translate(IMapping<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>> it) {
                return it.value().getAvaliableOptions(project.getRepository());
              }
            });
          }
        }).distinct().sort(new ISelector<RefactoringParticipant.Option, String>() {
          public String select(RefactoringParticipant.Option it) {
            return it.getDescription();
          }
        }, true).toListSequence();
      }
    });

    List<Integer> selectedOptionIndices;
    if (ListSequence.fromList(options.value).isNotEmpty()) {
      selectedOptionIndices = SelectOptionsDialog.selectOptions(ProjectHelper.toIdeaProject(project), ListSequence.fromList(options.value).select(new ISelector<RefactoringParticipant.Option, String>() {
        public String select(RefactoringParticipant.Option it) {
          return it.getDescription();
        }
      }).toListSequence(), "Refactoring Options");
    } else {
      selectedOptionIndices = ListSequence.fromList(new ArrayList<Integer>());
    }
    if (selectedOptionIndices == null) {
      return;
    }
    final List<RefactoringParticipant.Option> selectedOptions = ListSequence.fromList(selectedOptionIndices).select(new ISelector<Integer, RefactoringParticipant.Option>() {
      public RefactoringParticipant.Option select(Integer i) {
        return ListSequence.fromList(options.value).getElement(i);
      }
    }).toListSequence();

    final Wrappers._boolean cancelled = new Wrappers._boolean(false);
    ProgressManager.getInstance().run(new Task.Modal(project.getProject(), "Refactoring", true) {
      public void run(@NotNull ProgressIndicator progressIndicator) {
        final ProgressMonitorAdapter progressMonitor = new ProgressMonitorAdapter(progressIndicator);
        project.getRepository().getModelAccess().runReadAction(new Runnable() {
          public void run() {
            int steps = MapSequence.fromMap(changes).select(new ISelector<IMapping<RefactoringParticipant, Map<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>>>, Integer>() {
              public Integer select(IMapping<RefactoringParticipant, Map<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>>> pss) {
                return MapSequence.fromMap(pss.value()).count();
              }
            }).foldLeft(0, new ILeftCombinator<Integer, Integer>() {
              public Integer combine(Integer s, Integer it) {
                return it + s;
              }
            });
            progressMonitor.start("Searching for usages", steps);
outer:
            for (IMapping<RefactoringParticipant, Map<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>>> participantStates : MapSequence.fromMap(changes)) {
              for (IMapping<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>> participantState : MapSequence.fromMap(participantStates.value())) {
                if (progressMonitor.isCanceled()) {
                  cancelled.value = true;
                  break outer;
                }
                participantState.value().findChanges(project.getRepository(), selectedOptions, project.getScope(), progressMonitor.subTask(1, SubProgressKind.AS_COMMENT));
              }
            }
            progressMonitor.done();
          }
        });
      }
    });

    if (cancelled.value) {
      return;
    }

    SearchResults searchResults = new SearchResults();
    final Map<SNodeReference, Boolean> shouldKeep = MapSequence.fromMap(new HashMap<SNodeReference, Boolean>());

    for (SNodeReference node : SetSequence.fromSet(MapSequence.fromMap(moveMap).keySet())) {
      MapSequence.fromMap(shouldKeep).put(node, false);
    }
    for (IMapping<RefactoringParticipant, Map<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>>> participantChanges : MapSequence.fromMap(changes)) {
      for (IMapping<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>> nodeChanges : MapSequence.fromMap(participantChanges.value())) {
        for (RefactoringParticipant.Change<?, ?> change : ListSequence.fromList(nodeChanges.value().getChanges())) {
          MapSequence.fromMap(shouldKeep).putValue(MapSequence.fromMap(nodeRoots).get(nodeChanges.key()), MapSequence.fromMap(shouldKeep).get(MapSequence.fromMap(nodeRoots).get(nodeChanges.key())) || (change.needsToPreserveOldNode()));
          searchResults.addAll(change.getSearchResults());
        }
      }
    }

    RefactoringAccessEx.getInstance().showRefactoringView(project.getProject(), new RefactoringViewAction() {
      public void performAction(RefactoringViewItem refactoringViewItem) {
        project.getRepository().getModelAccess().executeCommand(new Runnable() {
          public void run() {
            RefactoringSessionImpl refactoringSession = new RefactoringSessionImpl();
            if (initRefactoringSession != null) {
              initRefactoringSession.invoke(refactoringSession);
            }


            Map<SNode, SNode> copyMap = MoveNodesDefault.CopyMapObject.getCopyMap(refactoringSession).getCopyMap();
            final Map<SNodeReference, SNode> resolveMap = MapSequence.fromMap(new HashMap<SNodeReference, SNode>());
            List<SNodeReference> nodesToMove = ListSequence.fromList(new ArrayList<SNodeReference>());
            for (SNodeReference nodeRef : SetSequence.fromSet(MapSequence.fromMap(nodeRoots).keySet())) {
              MapSequence.fromMap(resolveMap).put(nodeRef, resolveNode(nodeRef, project));
            }
            for (SNodeReference nodeRef : SetSequence.fromSet(MapSequence.fromMap(moveMap).keySet())) {
              ListSequence.fromList(nodesToMove).addElement(nodeRef);
            }

            MoveNodesDefault.CopyMapObject.getCopyMap(refactoringSession).copy(ListSequence.fromList(nodesToMove).select(new ISelector<SNodeReference, SNode>() {
              public SNode select(SNodeReference it) {
                return MapSequence.fromMap(resolveMap).get(it);
              }
            }).toListSequence(), ListSequence.fromList(nodesToMove).select(new ISelector<SNodeReference, Boolean>() {
              public Boolean select(SNodeReference it) {
                return MapSequence.fromMap(shouldKeep).get(it);
              }
            }).toListSequence());

            {
              Iterator<SNodeReference> oldNode_it = ListSequence.fromList(nodesToMove).iterator();
              SNodeReference oldNode_var;
              while (oldNode_it.hasNext()) {
                oldNode_var = oldNode_it.next();
                MapSequence.fromMap(moveMap).get(oldNode_var).insertNode(project.getRepository(), MapSequence.fromMap(copyMap).get(MapSequence.fromMap(resolveMap).get(oldNode_var)));
              }
            }

            for (IMapping<RefactoringParticipant, Map<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>>> participantChanges : MapSequence.fromMap(changes)) {
              for (IMapping<SNodeReference, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>> nodeChanges : MapSequence.fromMap(participantChanges.value())) {
                nodeChanges.value().confirm(MapSequence.fromMap(copyMap).get(MapSequence.fromMap(resolveMap).get(nodeChanges.key())), project.getRepository(), refactoringSession);
              }
            }
            try {
              refactoringSession.commit();
            } catch (RuntimeException exception) {
              if (LOG.isEnabledFor(Level.ERROR)) {
                LOG.error("Exception during refactoring: ", exception);
              }
            }
          }
        });
        refactoringViewItem.close();
      }
    }, searchResults, false, "Move nodes");
  }

  protected static Logger LOG = LogManager.getLogger(MoveNodesDefault.class);
  private static boolean eq_92fyi8_a0a0a0a0a0a0a4a0a0a0a2a8(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
