package jetbrains.mps.ide.platform.actions.core;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.lang.migration.runtime.base.RefactoringSession;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.platform.refactoring.NodeLocation;
import jetbrains.mps.ide.platform.refactoring.MoveNodesDialog;
import java.util.Collection;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.project.Project;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Iterator;

public class MoveNodesDefault implements MoveNodesRefactoring {


  public String getName() {
    return "Move Nodes";
  }

  public static void moveNodes(List<SNode> nodes, MPSProject mpsProject) {
    MoveNodesDefault moveNodesDefault = new MoveNodesDefault();
    if (moveNodesDefault.isApplicable(mpsProject, nodes)) {
      moveNodesDefault.apply(mpsProject, nodes);
    }
  }

  public boolean isApplicable(MPSProject project, List<SNode> nodesToMove) {
    return canBeMoved(nodesToMove, project.getRepository());
  }

  public static boolean canBeMoved(final List<SNode> nodesToMove, SRepository repository) {
    if (ListSequence.fromList(nodesToMove).isEmpty()) {
      return false;
    }
    final Wrappers._boolean result = new Wrappers._boolean();
    repository.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        SNode firstNode = ListSequence.fromList(nodesToMove).first();
        final SContainmentLink containmentLink = firstNode.getContainmentLink();
        final SNode parent = firstNode.getParent();
        final SModel model = firstNode.getModel();
        result.value = ListSequence.fromList(nodesToMove).all(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return eq_92fyi8_a0a0a0a0a0a0a4a0a0a0a2a8(it.getContainmentLink(), containmentLink) && it.getParent() == parent && it.getModel() == model;
          }
        });
      }
    });
    return result.value;
  }

  public static class CopyMapObject {
    private static final String id = "refactoringSession.copyMap";
    private Map<SNode, SNode> copyMap = MapSequence.fromMap(new HashMap<SNode, SNode>());
    public static MoveNodesDefault.CopyMapObject getCopyMap(RefactoringSession session) {
      MoveNodesDefault.CopyMapObject result = (MoveNodesDefault.CopyMapObject) session.getObject(id);
      if (result == null) {
        result = new MoveNodesDefault.CopyMapObject();
        session.putObject(id, result);
      }
      return result;
    }
    public Map<SNode, SNode> getCopyMap() {
      return copyMap;
    }
    public List<SNode> copy(List<SNode> oldNodes) {
      Map<SNode, SNode> localCopyMap = MapSequence.fromMap(new HashMap<SNode, SNode>());
      List<SNode> result = CopyUtil.copyAndPreserveId(oldNodes, localCopyMap);
      MapSequence.fromMap(copyMap).putAll(localCopyMap);
      for (IMapping<SNode, SNode> mapping : MapSequence.fromMap(copyMap)) {
        CopyUtil.addReferences(mapping.key(), copyMap, false);
      }
      return result;
    }
  }

  public void apply(final MPSProject project, final List<SNode> nodesToMove) {

    final Wrappers._T<SModel> currentModel = new Wrappers._T<SModel>();
    final Wrappers._T<SContainmentLink> role = new Wrappers._T<SContainmentLink>();
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        currentModel.value = SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
        role.value = ListSequence.fromList(nodesToMove).first().getContainmentLink();
      }
    });
    final SContainmentLink finalRole = role.value;
    final NodeLocation newLocation = MoveNodesDialog.getSelectedObject(project.getProject(), currentModel.value, new MoveNodesDialog.ModelFilter("Choose Node or Model") {
      @Override
      public boolean check(final NodeLocation selectedObject, SModel model) {
        if (selectedObject == null) {
          return false;
        }
        if (selectedObject instanceof NodeLocation.NodeLocationChild) {
          if (finalRole == null) {
            return false;
          }
          final Wrappers._T<Collection<SContainmentLink>> containmentLinks = new Wrappers._T<Collection<SContainmentLink>>();
          project.getRepository().getModelAccess().runReadAction(new Runnable() {
            public void run() {
              containmentLinks.value = ((NodeLocation.NodeLocationChild) selectedObject).getNode().resolve(project.getRepository()).getConcept().getContainmentLinks();
            }
          });
          return CollectionSequence.fromCollection(containmentLinks.value).contains(finalRole);
        } else {
          return true;
        }
      }
    });
    if (newLocation instanceof NodeLocation.NodeLocationChild) {
      ((NodeLocation.NodeLocationChild) newLocation).setRole(role.value);
    }
    if (newLocation == null) {
      return;
    }
    Map<SNode, MoveNodesDefault.NodeProcessor> moveMap = MapSequence.fromMap(new HashMap<SNode, MoveNodesDefault.NodeProcessor>());
    MoveNodesDefault.NodeProcessor processor = new MoveNodesDefault.CopyingNodeProcessor(newLocation, project);
    for (SNode node : ListSequence.fromList(nodesToMove)) {
      MapSequence.fromMap(moveMap).put(node, processor);
    }
    doMove(project, moveMap, null);
  }

  public static class ToMoveItem extends MultiTuple._2<List<SNode>, NodeLocation> {
    public ToMoveItem() {
      super();
    }
    public ToMoveItem(List<SNode> nodes, NodeLocation newLocation) {
      super(nodes, newLocation);
    }
    public List<SNode> nodes(List<SNode> value) {
      return super._0(value);
    }
    public NodeLocation newLocation(NodeLocation value) {
      return super._1(value);
    }
    public List<SNode> nodes() {
      return super._0();
    }
    public NodeLocation newLocation() {
      return super._1();
    }
  }

  @NotNull
  public static SNode resolveNode(SNodeReference nodeReference, Project project) {
    SNode node = nodeReference.resolve(project.getRepository());
    if (node == null) {
      throw new IllegalArgumentException("Node " + nodeReference + " doesn't exist in current project.");
    }
    return node;
  }

  public static void doMove(final MPSProject project, final List<ToMoveItem> toMove, _FunctionTypes._void_P1_E0<? super RefactoringSession> callBack) {
    Map<SNode, MoveNodesDefault.NodeProcessor> moveMap = MapSequence.fromMap(new HashMap<SNode, MoveNodesDefault.NodeProcessor>());
    for (ToMoveItem nodesToMove : ListSequence.fromList(toMove)) {
      MoveNodesDefault.NodeProcessor processor = new MoveNodesDefault.CopyingNodeProcessor(nodesToMove.newLocation(), project);
      for (SNode node : ListSequence.fromList(nodesToMove.nodes())) {
        MapSequence.fromMap(moveMap).put(node, processor);
      }
    }
    doMove(project, moveMap, callBack);
  }


  public static void doMove(final MPSProject project, final Map<SNode, MoveNodesDefault.NodeProcessor> moveMap, final _FunctionTypes._void_P1_E0<? super RefactoringSession> initRefactoringSession) {

    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        for (IMapping<SNode, MoveNodesDefault.NodeProcessor> moving : MapSequence.fromMap(moveMap)) {
          if (!(moving.value().isValid(moving.key()))) {
            throw new IllegalArgumentException();
          }
        }
      }
    });

    final Wrappers._T<List<SNode>> allNodes = new Wrappers._T<List<SNode>>();
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        allNodes.value = MapSequence.fromMap(moveMap).translate(new ITranslator2<IMapping<SNode, MoveNodesDefault.NodeProcessor>, SNode>() {
          public Iterable<SNode> translate(IMapping<SNode, MoveNodesDefault.NodeProcessor> mapping) {
            return mapping.value().getNodesToSearch(mapping.key());
          }
        }).toListSequence();
      }
    });

    Iterable<? extends RefactoringParticipant<?, ?, SNode, SNode>> participants = new ExtensionPoint<MoveNodeRefactoringParticipant<?, ?>>("jetbrains.mps.ide.platform.MoveNodeParticipantEP").getObjects();
    RefactoringProcessor.performRefactoring(project, "Move nodes", participants, allNodes.value, new _FunctionTypes._return_P2_E0<_FunctionTypes._return_P1_E0<? extends SNode, ? super SNode>, Map<RefactoringParticipant, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>>, RefactoringSession>() {
      public _FunctionTypes._return_P1_E0<? extends SNode, ? super SNode> invoke(final Map<RefactoringParticipant, RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>> changes, RefactoringSession refactoringSession) {
        if (initRefactoringSession != null) {
          initRefactoringSession.invoke(refactoringSession);
        }

        final Map<MoveNodesDefault.NodeProcessor, List<SNode>> nodeProcessors = MapSequence.fromMap(new HashMap<MoveNodesDefault.NodeProcessor, List<SNode>>());
        MapSequence.fromMap(moveMap).visitAll(new IVisitor<IMapping<SNode, MoveNodesDefault.NodeProcessor>>() {
          public void visit(IMapping<SNode, MoveNodesDefault.NodeProcessor> mapping) {
            MoveNodesDefault.NodeProcessor processor = mapping.value();
            if (!(MapSequence.fromMap(nodeProcessors).containsKey(processor))) {
              MapSequence.fromMap(nodeProcessors).put(processor, ListSequence.fromList(new ArrayList<SNode>()));
            }
            ListSequence.fromList(MapSequence.fromMap(nodeProcessors).get(processor)).addElement(mapping.key());
          }
        });
        for (IMapping<MoveNodesDefault.NodeProcessor, List<SNode>> mapping : MapSequence.fromMap(nodeProcessors)) {
          mapping.key().process(mapping.value(), ListSequence.fromList(mapping.value()).where(new IWhereFilter<SNode>() {
            public boolean accept(final SNode moveRoot) {
              boolean shouldKeep = Sequence.fromIterable(MapSequence.fromMap(changes).values()).any(new IWhereFilter<RefactoringParticipant.ParticipantState<?, ?, SNode, SNode>>() {
                public boolean accept(final RefactoringParticipant.ParticipantState<?, ?, SNode, SNode> participantState) {
                  return ListSequence.fromList(SNodeOperations.getNodeDescendants(moveRoot, null, true, new SAbstractConcept[]{})).any(new IWhereFilter<SNode>() {
                    public boolean accept(SNode desc) {
                      return ListSequence.fromList(participantState.getChanges()).any(new IWhereFilter<List<? extends RefactoringParticipant.Change<?, ?>>>() {
                        public boolean accept(List<? extends RefactoringParticipant.Change<?, ?>> participantChanges) {
                          return ListSequence.fromList(participantChanges).any(new IWhereFilter<RefactoringParticipant.Change<?, ?>>() {
                            public boolean accept(RefactoringParticipant.Change<?, ?> change) {
                              return change.needsToPreserveOldNode();
                            }
                          });
                        }
                      });
                    }
                  });
                }
              });
              return !(shouldKeep);
            }
          }).toListSequence(), refactoringSession);
        }
        final Map<SNode, SNode> copyMap = MoveNodesDefault.CopyMapObject.getCopyMap(refactoringSession).getCopyMap();
        return new _FunctionTypes._return_P1_E0<SNode, SNode>() {
          public SNode invoke(SNode oldNode) {
            return MapSequence.fromMap(copyMap).get(oldNode);
          }
        };
      }
    });
  }

  public static interface NodeProcessor {
    boolean isValid(List<SNode> nodesToMove);
    boolean isValid(SNode nodeToMove);
    List<SNode> getNodesToSearch(SNode nodeToMove);
    void process(List<SNode> nodesToMove, List<SNode> whichOfThemToRemove, RefactoringSession refactoringSession);
  }

  public static class CopyingNodeProcessor implements MoveNodesDefault.NodeProcessor {
    private NodeLocation myNodeLocation;
    private Project myProject;
    public CopyingNodeProcessor(NodeLocation location, Project project) {
      myNodeLocation = location;
      myProject = project;
    }
    public boolean isValid(List<SNode> nodesToMove) {
      return ListSequence.fromList(nodesToMove).all(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return isValid(it);
        }
      });
    }
    public boolean isValid(SNode nodeToMove) {
      return myNodeLocation.canInsert(myProject.getRepository(), nodeToMove);
    }
    public List<SNode> getNodesToSearch(SNode nodeToMove) {
      return SNodeOperations.getNodeDescendants(nodeToMove, null, true, new SAbstractConcept[]{});
    }
    public void process(List<SNode> nodesToMove, List<SNode> whichOfThemToRemove, RefactoringSession refactoringSession) {
      MoveNodesDefault.CopyMapObject copyMap = MoveNodesDefault.CopyMapObject.getCopyMap(refactoringSession);
      copyMap.copy(nodesToMove);
      {
        Iterator<SNode> oldNode_it = ListSequence.fromList(whichOfThemToRemove).iterator();
        SNode oldNode_var;
        while (oldNode_it.hasNext()) {
          oldNode_var = oldNode_it.next();
          SNodeOperations.detachNode(oldNode_var);
        }
      }
      {
        Iterator<SNode> oldNode_it = ListSequence.fromList(nodesToMove).iterator();
        SNode oldNode_var;
        while (oldNode_it.hasNext()) {
          oldNode_var = oldNode_it.next();
          myNodeLocation.insertNode(myProject.getRepository(), MapSequence.fromMap(copyMap.getCopyMap()).get(oldNode_var));
        }
      }
    }
  }

  public static class MergingNodeProcessor implements MoveNodesDefault.NodeProcessor {
    private SNodeReference myTarget;
    private Project myProject;
    public MergingNodeProcessor(SNodeReference target, Project project) {
      myTarget = target;
      myProject = project;
    }
    public boolean isValid(List<SNode> nodesToMove) {
      return ListSequence.fromList(nodesToMove).all(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return isValid(it);
        }
      });
    }
    public boolean isValid(SNode nodeToMove) {
      return myTarget.resolve(myProject.getRepository()) != null;
    }
    public List<SNode> getNodesToSearch(SNode nodeToMove) {
      return ListSequence.fromListAndArray(new ArrayList<SNode>(), nodeToMove);
    }
    public void process(List<SNode> nodesToMove, List<SNode> whichOfThemToRemove, RefactoringSession refactoringSession) {
      if (ListSequence.fromList(nodesToMove).count() != 1) {
        throw new IllegalArgumentException();
      }
      MoveNodesDefault.CopyMapObject copyMap = MoveNodesDefault.CopyMapObject.getCopyMap(refactoringSession);
      MapSequence.fromMap(copyMap.getCopyMap()).put(ListSequence.fromList(nodesToMove).first(), myTarget.resolve(myProject.getRepository()));
      {
        Iterator<SNode> oldNode_it = ListSequence.fromList(whichOfThemToRemove).iterator();
        SNode oldNode_var;
        while (oldNode_it.hasNext()) {
          oldNode_var = oldNode_it.next();
          SNodeOperations.detachNode(oldNode_var);
        }
      }
    }
  }


  private static boolean eq_92fyi8_a0a0a0a0a0a0a4a0a0a0a2a8(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
