package jetbrains.mps.ide.platform.watching;

/*Generated by MPS */

import java.util.function.Supplier;
import org.apache.log4j.Logger;
import jetbrains.mps.util.Computable;

public abstract class ReloadManager {
  /**
   * Shorthand for {@link jetbrains.mps.ide.platform.watching.ReloadManager#runReload(Object, Supplier<T>, ReloadAction<T>) } with {@code participantClass} serving both as key and as a factory for participant instance
   */
  public final <T extends ReloadParticipant> void runReload(final Class<T> participantClass, ReloadAction<T> reloadAction) {
    runReload(participantClass, new Supplier<T>() {
      public T get() {
        try {
          return participantClass.newInstance();
        } catch (Exception ex) {
          Logger.getLogger(getClass()).error(ex.getMessage(), ex);
        }
        return null;
      }
    }, reloadAction);
  }

  /**
   * 
   * @param participantKey identity of a specific participant class. Instances sharing same idenitity has to be of the same class.
   * @param participantInstance factory to instantiate new participant instance when needed
   * @param reloadAction populates participant instance with changes to get dispatched from {@link ReloadParticipant#update(ProgressMonitor)}
   */
  public abstract <T extends ReloadParticipant> void runReload(Object participantKey, Supplier<T> participantInstance, ReloadAction<T> reloadAction);
  public abstract void addReloadListener(ReloadListener listener);
  public abstract void removeReloadListener(ReloadListener listener);
  public abstract <T> T computeNoReload(Computable<T> computable);
  public abstract void flush();
}
