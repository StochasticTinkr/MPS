package jetbrains.mps.ide.platform.watching;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import com.intellij.openapi.vfs.VirtualFileManager;
import jetbrains.mps.ide.MPSCoreComponents;
import jetbrains.mps.generator.ModelGenerationStatusManager;
import org.apache.log4j.Level;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.vfs.VirtualFileEvent;
import jetbrains.mps.generator.impl.dependencies.GenerationDependenciesCache;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import com.intellij.openapi.vfs.VirtualFileAdapter;
import com.intellij.openapi.vfs.VirtualFileMoveEvent;

public class ModelCacheReloader implements ApplicationComponent {
  private static final Logger LOG = LogManager.getLogger(ModelCacheReloader.class);
  private VirtualFileManager myVirtualFileManager;
  private ModelCacheReloader.CacheFileListener myFileListener = new ModelCacheReloader.CacheFileListener();
  private final MPSCoreComponents myMPS;
  private ModelGenerationStatusManager myGenStatusManager;

  public ModelCacheReloader(VirtualFileManager virtualFileManager, MPSCoreComponents coreComponents) {
    // TODO rewrite using FileSystem.getInstance().addListener(..) 
    //      once there's a mechanism to attach a listener to any fs event (now it's specific file only) 
    myVirtualFileManager = virtualFileManager;
    myMPS = coreComponents;
  }
  @Override
  public void initComponent() {
    myGenStatusManager = myMPS.getPlatform().findComponent(ModelGenerationStatusManager.class);
    if (myGenStatusManager != null) {
      myVirtualFileManager.addVirtualFileListener(myFileListener);
    } else {
      if (LOG.isEnabledFor(Level.WARN)) {
        LOG.warn("Could not find ModelGenerationStatusManager component; no refresh for model hash files");
      }
    }
  }
  @Override
  public void disposeComponent() {
    myVirtualFileManager.removeVirtualFileListener(myFileListener);
  }
  @NonNls
  @NotNull
  @Override
  public String getComponentName() {
    return getClass().getName();
  }
  private void invalidateForFile(VirtualFileEvent event) {
    if (GenerationDependenciesCache.CACHE_FILE_NAME.equals(event.getFileName())) {
      IFile file = VirtualFileUtils.toIFile(event.getFile());
      myGenStatusManager.invalidateData(file);
    }
  }
  private class CacheFileListener extends VirtualFileAdapter {
    private CacheFileListener() {
    }
    @Override
    public void beforeFileMovement(VirtualFileMoveEvent event) {
      invalidateForFile(event);
    }
    @Override
    public void beforeFileDeletion(VirtualFileEvent event) {
      invalidateForFile(event);
    }
    @Override
    public void fileCreated(VirtualFileEvent event) {
      invalidateForFile(event);
    }
    @Override
    public void contentsChanged(VirtualFileEvent event) {
      invalidateForFile(event);
    }
  }
}
