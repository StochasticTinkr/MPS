package jetbrains.mps.ide.platform.watching;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import com.intellij.openapi.vfs.VirtualFileManager;
import jetbrains.mps.ide.MPSCoreComponents;
import jetbrains.mps.generator.ModelGenerationStatusManager;
import org.apache.log4j.Level;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.vfs.VirtualFileAdapter;
import com.intellij.openapi.vfs.VirtualFileMoveEvent;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.vfs.VirtualFileEvent;
import java.util.ArrayDeque;
import jetbrains.mps.generator.impl.dependencies.GenerationDependenciesCache;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;

public class ModelCacheReloader implements ApplicationComponent {
  private static final Logger LOG = LogManager.getLogger(ModelCacheReloader.class);
  private VirtualFileManager myVirtualFileManager;
  private ModelCacheReloader.CacheFileListener myFileListener;
  private final MPSCoreComponents myMPS;

  public ModelCacheReloader(VirtualFileManager virtualFileManager, MPSCoreComponents coreComponents) {
    // TODO rewrite using FileSystem.getInstance().addListener(..) 
    //      once there's a mechanism to attach a listener to any fs event (now it's specific file only) 
    myVirtualFileManager = virtualFileManager;
    myMPS = coreComponents;
  }
  @Override
  public void initComponent() {
    ModelGenerationStatusManager mgsm = myMPS.getPlatform().findComponent(ModelGenerationStatusManager.class);
    if (mgsm != null) {
      myFileListener = new ModelCacheReloader.CacheFileListener(mgsm);
      myVirtualFileManager.addVirtualFileListener(myFileListener);
    } else {
      if (LOG.isEnabledFor(Level.WARN)) {
        LOG.warn("Could not find ModelGenerationStatusManager component; no refresh for model hash files");
      }
    }
  }
  @Override
  public void disposeComponent() {
    if (myFileListener != null) {
      myVirtualFileManager.removeVirtualFileListener(myFileListener);
      myFileListener = null;
    }
  }
  @NonNls
  @NotNull
  @Override
  public String getComponentName() {
    return "Update generation status cache";
  }

  private static class CacheFileListener extends VirtualFileAdapter {
    private final ModelGenerationStatusManager myGenStatusManager;

    /*package*/ CacheFileListener(ModelGenerationStatusManager mgsm) {
      myGenStatusManager = mgsm;
    }
    @Override
    public void beforeFileMovement(VirtualFileMoveEvent event) {
      VirtualFile file = event.getFile();
      if (file.isDirectory()) {
        invalidateForDir(file);
      } else {
        invalidateForEvent(event);
      }
    }
    @Override
    public void beforeFileDeletion(VirtualFileEvent event) {
      VirtualFile file = event.getFile();
      if (file.isDirectory()) {
        invalidateForDir(file);
      } else {
        invalidateForEvent(event);
      }
    }
    @Override
    public void fileCreated(VirtualFileEvent event) {
      invalidateForEvent(event);
    }
    @Override
    public void contentsChanged(VirtualFileEvent event) {
      invalidateForEvent(event);
    }

    private void invalidateForDir(VirtualFile dir) {
      ArrayDeque<VirtualFile> dirQueue = new ArrayDeque<VirtualFile>();
      dirQueue.add(dir);
      do {
        VirtualFile nextDir = dirQueue.removeFirst();
        for (VirtualFile f : nextDir.getChildren()) {
          if (f.isDirectory()) {
            dirQueue.add(f);
          } else if (GenerationDependenciesCache.CACHE_FILE_NAME.equals(f.getName())) {
            invalidateForFile(f);
          }
        }
      } while (!(dirQueue.isEmpty()));
    }

    private void invalidateForEvent(VirtualFileEvent event) {
      if (GenerationDependenciesCache.CACHE_FILE_NAME.equals(event.getFileName())) {
        invalidateForFile(event.getFile());
      }
    }

    private void invalidateForFile(VirtualFile vf) {
      IFile file = VirtualFileUtils.toIFile(vf);
      myGenStatusManager.invalidateData(file);
    }

  }
}
