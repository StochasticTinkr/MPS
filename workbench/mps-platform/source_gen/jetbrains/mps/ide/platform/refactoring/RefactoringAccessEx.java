package jetbrains.mps.ide.platform.refactoring;

/*Generated by MPS */

import jetbrains.mps.refactoring.runtime.access.RefactoringAccess;
import com.intellij.openapi.project.Project;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchTask;
import jetbrains.mps.refactoring.framework.RefactoringContext;

public abstract class RefactoringAccessEx extends RefactoringAccess {
  private RefactoringFacadeImpl myRefactoringFacade;
  protected RefactoringAccessEx() {
  }
  @Override
  public RefactoringFacadeImpl getRefactoringFacade() {
    if (myRefactoringFacade == null) {
      myRefactoringFacade = new RefactoringFacadeImpl();
    }
    return myRefactoringFacade;
  }
  public abstract ModelElementTargetChooser createTargetChooser(Project project, SNode node);
  public abstract ModelElementTargetChooser createTargetChooser(Project project, SModel model);
  @Deprecated
  public abstract void showRefactoringView(Project project, RefactoringViewAction callback, SearchResults searchResults, boolean hasModelsToGenerate, String name);
  public abstract void showRefactoringView(Project project, RefactoringViewAction callback, SearchResults searchResults, SearchTask searchTask, String name);
  @Deprecated
  public abstract void showRefactoringView(RefactoringContext refactoringContext, RefactoringViewAction callback, SearchResults searchResults, boolean hasModelsToGenerate, String name);
  public abstract void showRefactoringView(RefactoringContext refactoringContext, RefactoringViewAction callback, SearchResults searchResults, SearchTask searchTask, String name);

  public static RefactoringAccessEx getInstance() {
    return (RefactoringAccessEx) RefactoringAccess.getInstance();
  }

  protected static void setInstance(RefactoringAccessEx instance) {
    RefactoringAccess.setInstance(instance);
  }
}
