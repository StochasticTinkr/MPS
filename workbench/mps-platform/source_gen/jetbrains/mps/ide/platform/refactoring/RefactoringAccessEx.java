package jetbrains.mps.ide.platform.refactoring;

/*Generated by MPS */

import jetbrains.mps.refactoring.runtime.access.RefactoringAccess;
import jetbrains.mps.core.platform.Platform;
import com.intellij.openapi.project.Project;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchTask;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import java.util.Collection;
import jetbrains.mps.refactoring.framework.IRefactoring;
import jetbrains.mps.smodel.language.LanguageRegistry;
import java.util.ArrayList;
import java.util.function.Consumer;
import jetbrains.mps.smodel.language.LanguageRuntime;
import jetbrains.mps.refactoring.runtime.RefactoringAspect;

public abstract class RefactoringAccessEx extends RefactoringAccess {
  private RefactoringFacadeImpl myRefactoringFacade;
  private final Platform myPlatform;

  protected RefactoringAccessEx(Platform mpsPlatform) {
    myPlatform = mpsPlatform;
  }

  @Override
  public RefactoringFacadeImpl getRefactoringFacade() {
    if (myRefactoringFacade == null) {
      myRefactoringFacade = new RefactoringFacadeImpl();
    }
    return myRefactoringFacade;
  }

  public abstract ModelElementTargetChooser createTargetChooser(Project project, SNode node);

  public abstract ModelElementTargetChooser createTargetChooser(Project project, SModel model);

  @Deprecated
  public abstract void showRefactoringView(Project project, RefactoringViewAction callback, SearchResults searchResults, boolean hasModelsToGenerate, String name);

  public abstract void showRefactoringView(Project project, RefactoringViewAction refactoringViewAction, Runnable disposeAction, SearchResults searchResults, SearchTask searchTask, String name);

  @Deprecated
  public abstract void showRefactoringView(RefactoringContext refactoringContext, RefactoringViewAction callback, SearchResults searchResults, boolean hasModelsToGenerate, String name);

  public abstract void showRefactoringView(RefactoringContext refactoringContext, RefactoringViewAction refactoringViewAction, Runnable disposeAction, SearchResults searchResults, SearchTask searchTask, String name);

  public static RefactoringAccessEx getInstance() {
    return (RefactoringAccessEx) RefactoringAccess.getInstance();
  }

  protected static void setInstance(RefactoringAccessEx instance) {
    RefactoringAccess.setInstance(instance);
  }

  @Override
  public Collection<IRefactoring> getAllRefactorings() {
    LanguageRegistry langRegistry = myPlatform.findComponent(LanguageRegistry.class);
    final ArrayList<IRefactoring> refactorings = new ArrayList<IRefactoring>();
    langRegistry.withAvailableLanguages(new Consumer<LanguageRuntime>() {
      public void accept(LanguageRuntime lr) {
        RefactoringAspect refactoringAspect = lr.getAspect(RefactoringAspect.class);
        if (refactoringAspect == null) {
          return;
        }
        refactorings.addAll(refactoringAspect.getRefactorings());
      }
    });
    return refactorings;
  }
}
