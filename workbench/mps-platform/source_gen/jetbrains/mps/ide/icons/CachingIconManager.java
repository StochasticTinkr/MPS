package jetbrains.mps.ide.icons;

/*Generated by MPS */

import java.awt.MediaTracker;
import java.util.Map;
import javax.swing.Icon;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.kernel.model.SModelUtil;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelStereotype;
import org.jetbrains.mps.openapi.model.EditableSModel;
import com.intellij.ui.LayeredIcon;
import com.intellij.util.PlatformIcons;
import com.intellij.ui.RowIcon;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.util.MacroHelper;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import com.intellij.openapi.util.IconLoader;
import java.net.MalformedURLException;

public class CachingIconManager {
  private static final int IMAGE_LOADED = ~((MediaTracker.ABORTED | MediaTracker.ERRORED | MediaTracker.LOADING));

  private Map<String, Icon> myPathToIcon = MapSequence.fromMap(new HashMap<String, Icon>());
  private Map<String, Icon> myConceptToIcon = MapSequence.fromMap(new HashMap<String, Icon>());

  public Icon getConceptIcon(SAbstractConcept concept) {
    if (concept instanceof SConcept) {
      Icon icon = getIcon(SNodeOperations.cast(SNodeOperations.asNode(concept), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")));
      if (icon != null) {
        return icon;
      }
    }
    return IdeIcons.DEFAULT_NODE_ICON;
  }

  public Icon getNodeIcon(@NotNull SNode node) {
    if (!(node.getConcept().isValid())) {
      return IdeIcons.UNKNOWN_ICON;
    }

    boolean withoutAdditional = false;
    Icon mainIcon = null;

    SNode concept = SNodeOperations.asNode(SNodeOperations.getConcept(node));
    if (SNodeOperations.isInstanceOf(concept, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
      String alternativeIconPath = ConceptRegistry.getInstance().getConstraintsDescriptor(SNodeOperations.getConcept(node)).getAlternativeIcon(node);
      if (alternativeIconPath != null) {
        mainIcon = getIcon(SModelUtil.getDeclaringLanguage(concept), alternativeIconPath);
      }
      if (mainIcon == null) {
        mainIcon = getIcon(SNodeOperations.cast(concept, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")));
      }
    }

    if (mainIcon == null) {
      if (jetbrains.mps.util.SNodeOperations.isRoot(node)) {
        return IdeIcons.DEFAULT_ROOT_ICON;
      } else {
        return IdeIcons.DEFAULT_NODE_ICON;
      }
    }

    SModel model = SNodeOperations.getModel(node);
    if (model == null || jetbrains.mps.util.SNodeOperations.isModelDisposed(model)) {
      return mainIcon;
    }
    if (!(SModelStereotype.isUserModel(model)) || model instanceof EditableSModel && model.isReadOnly()) {
      mainIcon = new LayeredIcon(mainIcon, PlatformIcons.LOCKED_ICON);
    }
    RowIcon result = new RowIcon(2);
    result.setIcon(mainIcon, 0);
    if (!(withoutAdditional)) {
      result.setIcon(((Icon) BHReflection.invoke(node, SMethodTrimmedId.create("getAdditionalIcon", null, "4mxbjAOAE$e"))), 1);
    }
    List<Icon> markIcons = ((List<Icon>) BHReflection.invoke(node, SMethodTrimmedId.create("getMarkIcons", null, "3pOfV45ExLD")));
    if (markIcons != null) {
      LayeredIcon layeredIcon = new LayeredIcon(markIcons.size() + 1);
      layeredIcon.setIcon(result, 0);
      for (int i = 0; i < markIcons.size(); i++) {
        layeredIcon.setIcon(markIcons.get(i), i + 1);
      }
      return layeredIcon;
    }
    return result;
  }

  private Icon getIcon(@NotNull SNode conceptDeclaration) {
    String conceptFQName = ((String) BHReflection.invoke(conceptDeclaration, SMethodTrimmedId.create("getFqName", null, "hEwIO9y")));
    if (conceptFQName == null) {
      return null;
    }
    if (!(MapSequence.fromMap(myConceptToIcon).containsKey(conceptFQName))) {
      Icon icon = getIcon(SModelUtil.getDeclaringLanguage(conceptDeclaration), SPropertyOperations.getString(conceptDeclaration, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0x10e328118ddL, "iconPath")));
      if (icon == null && SLinkOperations.getTarget(conceptDeclaration, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xf979be93cfL, "extends")) != null) {
        icon = getIcon(SLinkOperations.getTarget(conceptDeclaration, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xf979be93cfL, "extends")));
      }
      MapSequence.fromMap(myConceptToIcon).put(conceptFQName, icon);
    }
    return MapSequence.fromMap(myConceptToIcon).get(conceptFQName);
  }

  public Icon getIcon(AbstractModule module, String path) {
    String iconPath = expandPath(module, path);
    if (iconPath == null) {
      return null;
    }
    return getIcon(iconPath);
  }

  private String expandPath(AbstractModule module, String path) {
    if (path == null || !(MacrosFactory.containsMacro(path))) {
      // Don't bother looking up MacroHelper if there is nothing to expand anyway 
      return path;
    }

    if (module == null) {
      return null;
    }

    MacroHelper macroHelper = MacrosFactory.forModule(module);
    if (macroHelper == null) {
      return null;
    }

    return macroHelper.expandPath(path);
  }

  private Icon getIcon(@NonNls String iconPath) {
    if (!(MapSequence.fromMap(myPathToIcon).containsKey(iconPath))) {
      IFile file = FileSystem.getInstance().getFileByPath(iconPath);
      MapSequence.fromMap(myPathToIcon).put(iconPath, getIcon(file));
    }
    return MapSequence.fromMap(myPathToIcon).get(iconPath);
  }

  private Icon getIcon(IFile file) {
    try {
      return IconLoader.findIcon(file.getUrl(), false);
    } catch (MalformedURLException e) {
      return null;
    }
  }
}
