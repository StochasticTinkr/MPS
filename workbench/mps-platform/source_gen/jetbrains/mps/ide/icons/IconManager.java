package jetbrains.mps.ide.icons;

/*Generated by MPS */

import jetbrains.mps.util.annotation.ToRemove;
import javax.swing.Icon;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.IconResource;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.smodel.MPSModuleOwner;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.project.AbstractModule;

/**
 * Remove after 2018.2 as there were usages in diagrams generator before 2018.2
 * 
 * @deprecated use GlobalIconManager
 */
@Deprecated
@ToRemove(version = 2018.2)
public final class IconManager {
  @Deprecated
  private IconManager() {
  }

  public static Icon getIconFor(SAbstractConcept concept) {
    return GlobalIconManager.getInstance().getIconFor(concept);
  }

  public static Icon getIconFor(@NotNull final SNode node) {
    return GlobalIconManager.getInstance().getIconFor(node);
  }

  public static Icon getIconFor(SModel model) {
    return GlobalIconManager.getInstance().getIconFor(model);
  }

  public static Icon getIconFor(SModule module) {
    return GlobalIconManager.getInstance().getIconFor(module);
  }

  public static Icon getIconForResource(@Nullable IconResource ir) {
    return GlobalIconManager.getInstance().getIconForResource(ir);
  }

  @Deprecated
  public static Icon getIcon(SAbstractConcept concept) {
    return getIconFor(concept);
  }

  @Deprecated
  public static Icon loadIcon(@NonNls String iconPath, boolean cache) {
    return IconLoadHelper.loadIcon(iconPath);
  }

  @Deprecated
  public static Icon getIconFor(MPSModuleOwner owner) {
    if (owner instanceof MPSProject) {
      return IdeIcons.PROJECT_ICON;
    }
    if (owner instanceof SModule) {
      return getIconFor((AbstractModule) owner);
    }
    return IdeIcons.DEFAULT_ICON;
  }
}
