package jetbrains.mps.ide.icons;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.smodel.LanguageAspect;
import javax.swing.Icon;
import java.awt.Component;
import java.awt.Graphics;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.IconResource;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.apache.log4j.Level;
import java.lang.reflect.Method;
import jetbrains.mps.module.ModuleClassLoaderIsNullException;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.language.LanguageAspectSupport;
import jetbrains.mps.smodel.language.LanguageAspectDescriptor;
import jetbrains.mps.smodel.SModelStereotype;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.project.Solution;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.smodel.language.ConceptRegistry;
import org.jetbrains.mps.openapi.model.EditableSModel;
import com.intellij.ui.LayeredIcon;
import com.intellij.util.PlatformIcons;
import com.intellij.ui.RowIcon;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;
import java.util.List;
import jetbrains.mps.smodel.adapter.structure.concept.SAbstractConceptAdapter;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.util.annotation.ToRemove;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactoryByName;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.smodel.MPSModuleOwner;
import jetbrains.mps.project.MPSProject;
import java.util.EnumMap;
import java.io.InputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public final class IconManager {
  /**
   * [MM] this usage of LanguageAspect is reviewed
   */
  private static Map<LanguageAspect, Icon> ourAspectsToIcons;
  public static final Icon EMPTY_ICON = new Icon() {
    @Override
    public void paintIcon(Component c, Graphics g, int x, int y) {
    }
    @Override
    public int getIconWidth() {
      return 18;
    }
    @Override
    public int getIconHeight() {
      return 18;
    }
  };
  private IconManager() {
  }

  public static Icon getIconFor(@NotNull final SNode node) {
    if (!(SNodeOperations.getConcept(node).isValid())) {
      return IdeIcons.UNKNOWN_ICON;
    }

    Icon mainIcon = null;
    if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(SNodeOperations.getConcept(node)), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
      mainIcon = IconManager.getIconFromConstraints(node);
    }
    if (mainIcon == null) {
      mainIcon = getIcon(SNodeOperations.getConcept(node));
    }
    if (mainIcon == null) {
      if ((SNodeOperations.getParent(node) == null)) {
        return IdeIcons.DEFAULT_ROOT_ICON;
      } else {
        return IdeIcons.DEFAULT_NODE_ICON;
      }
    }

    return addIconFeatures(mainIcon, node);
  }

  /**
   * This field should be used in getIcon(concept) method only
   */
  private static Map<SAbstractConcept, IconResource> ourConceptToIcon = MapSequence.fromMap(new HashMap<SAbstractConcept, IconResource>());
  public static Icon getIconFor(SAbstractConcept concept) {
    // tmp solution to invalidate reloaded icons. May lead to constrained memleaks. Should be rewritten later 
    IconResource cached = MapSequence.fromMap(ourConceptToIcon).get(concept);
    if (cached != null && cached.isAlreadyReloaded()) {
      MapSequence.fromMap(ourConceptToIcon).removeKey(concept);
    }

    if (!(MapSequence.fromMap(ourConceptToIcon).containsKey(concept))) {
      IconResource ir = getIconForConceptNoCache(concept);
      MapSequence.fromMap(ourConceptToIcon).put(concept, ir);
    }

    IconResource actual = MapSequence.fromMap(ourConceptToIcon).get(concept);
    if (actual == null) {
      return null;
    }

    return getIconForResource(actual);
  }

  public static Icon getIconFor(String namespace) {
    String className = namespace + ".icons.Icons";
    try {
      Language language = ModuleRepositoryFacade.getInstance().getModule(namespace, Language.class);
      if (language == null) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Can't find a language " + namespace);
        }
      } else {
        try {
          Class<?> iconClass = language.getOwnClass(className);
          Method method;
          try {
            method = iconClass.getMethod("getLanguageIcon");
          } catch (NoSuchMethodException e) {
            return EMPTY_ICON;
          }
          Icon icon = (Icon) method.invoke(null);
          if (icon != null) {
            return icon;
          }
        } catch (ModuleClassLoaderIsNullException e) {
          return EMPTY_ICON;
        } catch (ClassNotFoundException e) {
          return EMPTY_ICON;
        }
      }
    } catch (Exception e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", e);
      }
    }
    return EMPTY_ICON;
  }

  public static Icon getIconFor(SModel model) {
    if (model == null) {
      return IdeIcons.UNKNOWN_ICON;
    }

    // [MM] this usage of LanguageAspect is reviewed 
    LanguageAspect oldAspect = LanguageAspectSupport.getOldAspect(model);
    if (oldAspect != null) {
      return getIconForAspect(LanguageAspectSupport.getOldAspect(model));
    }

    LanguageAspectDescriptor newAspect = LanguageAspectSupport.getNewAspect(model);
    if (newAspect != null) {
      return newAspect.getIcon();
    }

    if (SModelStereotype.isGeneratorModel(model)) {
      return IdeIcons.TEMPLATES_MODEL_ICON;
    }
    if (Language.isLanguageOwnedAccessoryModel(model)) {
      return IdeIcons.ACCESSORY_MODEL_ICON;
    }
    if (SModelStereotype.isTestModel(model)) {
      return IdeIcons.TEST_MODEL_ICON;
    }

    return IdeIcons.MODEL_ICON;
  }

  public static Icon getIconFor(SModule module) {
    if (module instanceof Generator) {
      return IdeIcons.GENERATOR_ICON;
    }
    if (module instanceof Language) {
      return IdeIcons.PROJECT_LANGUAGE_ICON;
    }
    if (module instanceof Solution) {
      return IdeIcons.SOLUTION_ICON;
    }
    if (module instanceof DevKit) {
      return IdeIcons.DEVKIT_ICON;
    }
    return IdeIcons.DEFAULT_ICON;
  }

  private static Icon getIconFromConstraints(final SNode node) {
    IconResource altIcon = ConceptRegistry.getInstance().getConstraintsDescriptor(SNodeOperations.getConcept(node)).getInstanceIcon(node);
    if (altIcon == null) {
      return null;
    }
    return getIconForResource(altIcon);
  }

  private static Icon addIconFeatures(Icon mainIcon, final SNode node) {
    SModel model = SNodeOperations.getModel(node);
    if (model == null || jetbrains.mps.util.SNodeOperations.isModelDisposed(model)) {
      return mainIcon;
    }
    if (!(SModelStereotype.isUserModel(model)) || model instanceof EditableSModel && model.isReadOnly()) {
      mainIcon = new LayeredIcon(mainIcon, PlatformIcons.LOCKED_ICON);
    }
    RowIcon result = new RowIcon(2);
    result.setIcon(mainIcon, 0);
    result.setIcon(((Icon) BHReflection.invoke(node, SMethodTrimmedId.create("getAdditionalIcon", null, "4mxbjAOAE$e"))), 1);
    List<Icon> markIcons = ((List<Icon>) BHReflection.invoke(node, SMethodTrimmedId.create("getMarkIcons", null, "3pOfV45ExLD")));
    if (markIcons != null) {
      LayeredIcon layeredIcon = new LayeredIcon(markIcons.size() + 1);
      layeredIcon.setIcon(result, 0);
      for (int i = 0; i < markIcons.size(); i++) {
        layeredIcon.setIcon(markIcons.get(i), i + 1);
      }
      return layeredIcon;
    }
    return result;
  }

  private static IconResource getIconForConceptNoCache(SAbstractConcept concept) {
    SAbstractConceptAdapter current = ((SAbstractConceptAdapter) concept);
    while (current != null) {
      IconResource ir = getIconForExactConcept(current);
      if (ir != null) {
        return ir;
      }
      current = ((current instanceof SConceptAdapter) ? ((SConceptAdapter) ((SConceptAdapter) current).getSuperConcept()) : null);
    }

    // compatibility code, can be removed after 3.4 
    SNode dn = SNodeOperations.cast(concept.getDeclarationNode(), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"));
    if (dn == null) {
      return null;
    }

    while (dn != null) {
      String path = SPropertyOperations.getString(dn, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0x10e328118ddL, "iconPath"));
      // for compatibility purposes only 
      String icon = MacrosFactory.forModule((AbstractModule) SNodeOperations.getModel(dn).getModule()).expandPath(path);
      if (icon != null) {
        return new IconManager.DeprecatedIconResource(icon);
      }
      dn = SLinkOperations.getTarget(dn, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xf979be93cfL, "extends"));
    }
    // end compatibility code 
    return null;
  }

  private static IconResource getIconForExactConcept(SAbstractConcept concept) {
    ConceptPresentation pres = ConceptRegistry.getInstance().getConceptProperties(concept);
    if (pres == null) {
      return null;
    }
    return pres.getIcon();
  }

  /**
   * This field should be used in getIcon(resource) method only
   */
  private static Map<IconResource, Icon> ourResToIcon = MapSequence.fromMap(new HashMap<IconResource, Icon>());
  private static Icon getIconForResource(IconResource ir) {
    if (ir.isAlreadyReloaded()) {
      MapSequence.fromMap(ourResToIcon).removeKey(ir);
    }
    if (MapSequence.fromMap(ourResToIcon).containsKey(ir)) {
      return MapSequence.fromMap(ourResToIcon).get(ir);
    }
    if (!(ir.isValid())) {
      return null;
    }
    Icon icon = IconLoadHelper.loadIcon(ir.getResource());
    MapSequence.fromMap(ourResToIcon).put(ir, icon);
    return icon;
  }

  @Deprecated
  public static Icon getIcon(SAbstractConcept concept) {
    return getIconFor(concept);
  }

  @Deprecated
  public static Icon getIconForNamespace(String namespace) {
    return getIconFor(namespace);
  }

  @Deprecated
  @ToRemove(version = 3.4)
  public static Icon getIconForConceptFQName(String conceptFQName) {
    return getIcon(MetaAdapterFactoryByName.getConcept(conceptFQName));
  }

  @Deprecated
  public static Icon loadIcon(@NonNls String iconPath, boolean cache) {
    return IconLoadHelper.loadIcon(iconPath);
  }

  @Deprecated
  public static Icon getIconFor(MPSModuleOwner owner) {
    if (owner instanceof MPSProject) {
      return IdeIcons.PROJECT_ICON;
    }
    if (owner instanceof SModule) {
      return getIconFor((AbstractModule) owner);
    }
    return IdeIcons.DEFAULT_ICON;
  }

  @Deprecated
  @ToRemove(version = 3.3)
  public static Icon getIconForAspect(LanguageAspect aspect) {
    // [MM] this usage of LanguageAspect is reviewed 
    Icon icon = MapSequence.fromMap(ourAspectsToIcons).get(aspect);
    if (icon == null) {
      return IdeIcons.MODEL_ICON;
    }
    return icon;
  }

  static {
    // [MM] this usage of LanguageAspect is reviewed 
    ourAspectsToIcons = new EnumMap<LanguageAspect, Icon>(LanguageAspect.class);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.ACTIONS, IdeIcons.ACTIONS_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.BEHAVIOR, IdeIcons.BEHAVIOR_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.CONSTRAINTS, IdeIcons.CONSTRAINTS_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.DATA_FLOW, IdeIcons.DATA_FLOW_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.EDITOR, IdeIcons.EDITOR_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.FIND_USAGES, IdeIcons.FIND_USAGES_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.INTENTIONS, IdeIcons.INTENTIONS_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.PLUGIN, IdeIcons.PLUGIN_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.REFACTORINGS, IdeIcons.REFACTORINGS_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.SCRIPTS, IdeIcons.MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.STRUCTURE, IdeIcons.STRUCTURE_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.TEST, IdeIcons.TEST_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.TEXT_GEN, IdeIcons.TEXT_GEN_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.TYPESYSTEM, IdeIcons.TYPESYSTEM_MODEL_ICON);
  }

  private static class DeprecatedIconResource extends IconResource {
    private final String myIcon;
    public DeprecatedIconResource(@NotNull String icon) {
      super(null, null);
      myIcon = icon;
    }
    @Override
    public boolean isValid() {
      return true;
    }
    @Override
    public boolean isAlreadyReloaded() {
      return false;
    }
    @Override
    public InputStream getResource() {
      if (myIcon == null) {
        return null;
      }
      try {
        return new FileInputStream(myIcon);
      } catch (FileNotFoundException e) {
        if (LOG.isEnabledFor(Level.WARN)) {
          LOG.warn("Can't load icon " + myIcon, e);
        }
        return null;
      }
    }
    @Override
    public boolean equals(Object o) {
      if (this == o) {
        return true;
      }
      if (o == null || getClass() != o.getClass()) {
        return false;
      }
      IconManager.DeprecatedIconResource that = (IconManager.DeprecatedIconResource) o;
      return myIcon.equals(that.myIcon);
    }
    @Override
    public int hashCode() {
      return myIcon.hashCode();
    }
  }
  protected static Logger LOG = LogManager.getLogger(IconManager.class);
}
