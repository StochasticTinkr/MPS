package jetbrains.mps.ide.icons;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.awt.MediaTracker;
import java.util.Map;
import javax.swing.Icon;
import java.util.HashMap;
import jetbrains.mps.smodel.LanguageAspect;
import java.awt.Component;
import java.awt.Graphics;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.language.ConceptRegistry;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelStereotype;
import org.jetbrains.mps.openapi.model.EditableSModel;
import com.intellij.ui.LayeredIcon;
import com.intellij.util.PlatformIcons;
import com.intellij.ui.RowIcon;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;
import java.util.List;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.util.MacrosFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import java.lang.reflect.Method;
import jetbrains.mps.module.ModuleClassLoaderIsNullException;
import jetbrains.mps.smodel.language.LanguageAspectSupport;
import jetbrains.mps.smodel.language.LanguageAspectDescriptor;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.project.Solution;
import jetbrains.mps.project.DevKit;
import jetbrains.mps.smodel.MPSModuleOwner;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.vfs.IFile;
import javax.swing.ImageIcon;
import java.io.InputStream;
import java.io.IOException;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.util.annotation.ToRemove;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.EnumMap;

public final class IconManager {
  public static final Logger LOG = LogManager.getLogger(IconManager.class);
  private static final int IMAGE_LOADED = ~((MediaTracker.ABORTED | MediaTracker.ERRORED | MediaTracker.LOADING));
  private static Map<String, Icon> ourPathsToIcons = new HashMap<String, Icon>();
  /**
   * [MM] this usage of LanguageAspect is reviewed
   */
  private static Map<LanguageAspect, Icon> ourAspectsToIcons;
  public static final Icon EMPTY_ICON = new Icon() {
    @Override
    public void paintIcon(Component c, Graphics g, int x, int y) {
    }
    @Override
    public int getIconWidth() {
      return 18;
    }
    @Override
    public int getIconHeight() {
      return 18;
    }
  };
  private IconManager() {
  }
  public static Icon getIconWithoutAdditionalPart(@NotNull final SNode node) {
    return getIconFor(node, true);
  }
  public static Icon getIconFor(@NotNull final SNode node) {
    return getIconFor(node, false);
  }
  public static Icon getIconFor(@NotNull final SNode node, final boolean withoutAdditional) {
    Icon mainIcon = null;
    if (!(node.getConcept().isValid())) {
      return IdeIcons.UNKNOWN_ICON;
    }
    SNode concept = SNodeOperations.asNode(SNodeOperations.getConcept(node));
    if (SNodeOperations.isInstanceOf(concept, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
      Icon alternativeIcon = null;
      try {
        String alternativeIconPath = ConceptRegistry.getInstance().getConstraintsDescriptor(SNodeOperations.getConcept(node)).getAlternativeIcon(node);
        if (alternativeIconPath != null) {
          alternativeIcon = IconManager.getIconForConcept(SNodeOperations.cast(concept, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")), alternativeIconPath);
        }
      } catch (Exception ignore) {
      }
      if (alternativeIcon != null) {
        mainIcon = alternativeIcon;
      } else {
        mainIcon = IconManager.getIconForConcept(SNodeOperations.cast(concept, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")));
      }
    }
    if (mainIcon == null) {
      if (jetbrains.mps.util.SNodeOperations.isRoot(node)) {
        return IdeIcons.DEFAULT_ROOT_ICON;
      } else {
        return IdeIcons.DEFAULT_NODE_ICON;
      }
    }
    SModel model = SNodeOperations.getModel(node);
    if (model == null || jetbrains.mps.util.SNodeOperations.isModelDisposed(model)) {
      return mainIcon;
    }
    if (!(SModelStereotype.isUserModel(model)) || model instanceof EditableSModel && model.isReadOnly()) {
      mainIcon = new LayeredIcon(mainIcon, PlatformIcons.LOCKED_ICON);
    }
    RowIcon result = new RowIcon(2);
    result.setIcon(mainIcon, 0);
    if (!(withoutAdditional)) {
      result.setIcon(((Icon) BHReflection.invoke(node, SMethodTrimmedId.create("getAdditionalIcon", null, "4mxbjAOAE$e"))), 1);
    }
    List<Icon> markIcons = ((List<Icon>) BHReflection.invoke(node, SMethodTrimmedId.create("getMarkIcons", null, "3pOfV45ExLD")));
    if (markIcons != null) {
      LayeredIcon layeredIcon = new LayeredIcon(markIcons.size() + 1);
      layeredIcon.setIcon(result, 0);
      for (int i = 0; i < markIcons.size(); i++) {
        layeredIcon.setIcon(markIcons.get(i), i + 1);
      }
      return layeredIcon;
    }
    return result;
  }
  public static Icon getIconForConcept(SNode concept) {
    while (concept != null) {
      Icon icon = getIconForConcept(concept, SPropertyOperations.getString(concept, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0x10e328118ddL, "iconPath")));
      if (icon != null) {
        return icon;
      }
      concept = SLinkOperations.getTarget(concept, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xf979be93cfL, "extends"));
    }
    return null;
  }
  private static Icon getIconForConcept(SNode conceptDeclaration, String path) {
    Language language = SModelUtil.getDeclaringLanguage(conceptDeclaration);
    if (language != null) {
      String iconPath = MacrosFactory.forModule(language).expandPath(path);
      if (iconPath != null) {
        Icon icon = loadIcon(iconPath, true);
        if (icon != null) {
          return icon;
        }
      }
    }
    return null;
  }
  public static Icon getIcon(SAbstractConcept concept) {
    return getIconForConcept(((SNode) concept.getDeclarationNode()));
  }
  public static Icon getIconForNamespace(String namespace) {
    String className = namespace + ".icons.Icons";
    try {
      Language language = ModuleRepositoryFacade.getInstance().getModule(namespace, Language.class);
      if (language == null) {
        LOG.error("Can't find a language " + namespace);
      } else {
        try {
          Class<?> iconClass = language.getOwnClass(className);
          Method method;
          try {
            method = iconClass.getMethod("getLanguageIcon");
          } catch (NoSuchMethodException e) {
            return EMPTY_ICON;
          }
          Icon icon = (Icon) method.invoke(null);
          if (icon != null) {
            return icon;
          }
        } catch (ModuleClassLoaderIsNullException e) {
          return EMPTY_ICON;
        } catch (ClassNotFoundException e) {
          return EMPTY_ICON;
        }
      }
    } catch (Exception e) {
      LOG.error(null, e);
    }
    return EMPTY_ICON;
  }
  public static Icon getIconFor(SModel model) {
    if (model == null) {
      return IdeIcons.UNKNOWN_ICON;
    }

    // [MM] this usage of LanguageAspect is reviewed 
    LanguageAspect oldAspect = LanguageAspectSupport.getOldAspect(model);
    if (oldAspect != null) {
      return getIconForAspect(LanguageAspectSupport.getOldAspect(model));
    }

    LanguageAspectDescriptor newAspect = LanguageAspectSupport.getNewAspect(model);
    if (newAspect != null) {
      return newAspect.getIcon();
    }

    if (SModelStereotype.isGeneratorModel(model)) {
      return IdeIcons.TEMPLATES_MODEL_ICON;
    }
    if (Language.isLanguageOwnedAccessoryModel(model)) {
      return IdeIcons.ACCESSORY_MODEL_ICON;
    }
    if (SModelStereotype.isTestModel(model)) {
      return IdeIcons.TEST_MODEL_ICON;
    }

    return IdeIcons.MODEL_ICON;
  }
  public static Icon getIconFor(SModule module) {
    if (module instanceof Generator) {
      return IdeIcons.GENERATOR_ICON;
    }
    if (module instanceof Language) {
      return IdeIcons.PROJECT_LANGUAGE_ICON;
    }
    if (module instanceof Solution) {
      return IdeIcons.SOLUTION_ICON;
    }
    if (module instanceof DevKit) {
      return IdeIcons.DEVKIT_ICON;
    }
    return IdeIcons.DEFAULT_ICON;
  }
  public static Icon getIconFor(MPSModuleOwner owner) {
    if (owner instanceof MPSProject) {
      return IdeIcons.PROJECT_ICON;
    }
    if (owner instanceof SModule) {
      return getIconFor((AbstractModule) owner);
    }
    return IdeIcons.DEFAULT_ICON;
  }
  public static Icon getIconFor(IFile file) {
    ImageIcon icon = null;
    if (file.exists()) {
      byte[] image = new byte[(int) file.length()];
      InputStream is = null;
      try {
        is = file.openInputStream();
        int current = 0;
        while (true) {
          int result = is.read(image, current, image.length - current);
          if (result == -1 || result == 0) {
            break;
          } else {
            current += result;
          }
        }
      } catch (IOException e) {
        LOG.error(null, e);
      } finally {
        try {
          if (is != null) {
            is.close();
          }
        } catch (IOException e) {
          LOG.error(null, e);
        }
      }
      icon = new ImageIcon(image);
      if ((icon.getImageLoadStatus() & IMAGE_LOADED) == 0) {
        icon = null;
      }
    }
    return icon;
  }
  public static Icon loadIcon(@NonNls String iconPath, boolean cache) {
    Icon icon = ourPathsToIcons.get(iconPath);
    if (icon == null) {
      IFile file = FileSystem.getInstance().getFileByPath(iconPath);
      icon = getIconFor(file);
      if (icon != null && cache) {
        ourPathsToIcons.put(iconPath, icon);
      }
    }
    return icon;
  }
  @Deprecated
  @ToRemove(version = 3.3)
  public static Icon getIconForAspect(LanguageAspect aspect) {
    // [MM] this usage of LanguageAspect is reviewed 
    Icon icon = MapSequence.fromMap(ourAspectsToIcons).get(aspect);
    if (icon == null) {
      return IdeIcons.MODEL_ICON;
    }
    return icon;
  }
  static {
    // [MM] this usage of LanguageAspect is reviewed 
    ourAspectsToIcons = new EnumMap<LanguageAspect, Icon>(LanguageAspect.class);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.ACTIONS, IdeIcons.ACTIONS_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.BEHAVIOR, IdeIcons.BEHAVIOR_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.CONSTRAINTS, IdeIcons.CONSTRAINTS_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.DATA_FLOW, IdeIcons.DATA_FLOW_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.EDITOR, IdeIcons.EDITOR_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.FIND_USAGES, IdeIcons.FIND_USAGES_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.INTENTIONS, IdeIcons.INTENTIONS_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.PLUGIN, IdeIcons.PLUGIN_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.REFACTORINGS, IdeIcons.REFACTORINGS_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.SCRIPTS, IdeIcons.MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.STRUCTURE, IdeIcons.STRUCTURE_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.TEST, IdeIcons.TEST_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.TEXT_GEN, IdeIcons.TEXT_GEN_MODEL_ICON);
    MapSequence.fromMap(ourAspectsToIcons).put(LanguageAspect.TYPESYSTEM, IdeIcons.TYPESYSTEM_MODEL_ICON);
  }
}
