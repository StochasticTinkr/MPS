package jetbrains.mps.ide.highlighters.structure;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.checking.BaseEventProcessingEditorChecker;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.nodeEditor.checking.UpdateResult;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.util.Cancellable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import com.intellij.openapi.project.DumbService;
import java.util.List;
import jetbrains.mps.nodeEditor.EditorMessage;
import java.util.Collections;
import jetbrains.mps.ide.findusages.model.scopes.GlobalScope;

public final class OverrideConceptsChecker extends BaseEventProcessingEditorChecker {
  private static final int MAX_ITEMS_TO_SHOW = 5;

  private final MPSProject myProject;

  public OverrideConceptsChecker(@NotNull MPSProject project) {
    myProject = project;
  }

  @NotNull
  @Override
  public UpdateResult update(EditorComponent component, boolean incremental, boolean applyQuickFixes, Cancellable cancellable) {
    SNode rootNode = component.getEditedNode();
    if (!(SNodeOperations.isInstanceOf(rootNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")))) {
      return new UpdateResult.Completed(false, emptyListEditorMessage());
    }

    if (DumbService.isDumb(myProject.getProject())) {
      // workaround for https://youtrack.jetbrains.com/issue/MPS-29419 
      // this checker has no idea about use of IDEA's index subsystem and the need to be aware of its 'dumb' mode 
      // Alas, I didn't find the better place for the check. 
      return UpdateResult.CANCELLED;
    }
    List<EditorMessage> result = calculateEditorMessages(SNodeOperations.cast(rootNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")), cancellable);
    if (cancellable.isCancelled()) {
      return new UpdateResult.Cancelled();
    }
    return new UpdateResult.Completed(true, result);
  }

  private static List<EditorMessage> emptyListEditorMessage() {
    return Collections.<EditorMessage>emptyList();
  }

  @NotNull
  private List<EditorMessage> calculateEditorMessages(SNode concept, Cancellable cancellable) {
    EditorMessage msg = new DescendantsLookup(cancellable, new GlobalScope(myProject), concept, this, MAX_ITEMS_TO_SHOW).calcMessage();
    return Collections.singletonList(msg);
  }
}
