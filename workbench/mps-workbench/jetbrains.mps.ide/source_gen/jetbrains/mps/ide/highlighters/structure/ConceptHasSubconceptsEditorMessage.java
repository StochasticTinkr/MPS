package jetbrains.mps.ide.highlighters.structure;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.AbstractLeftEditorHighlighterMessage;
import jetbrains.mps.nodeEditor.EditorMessageIconRenderer;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.List;
import jetbrains.mps.openapi.editor.message.EditorMessageOwner;
import jetbrains.mps.nodeEditor.cells.EditorCell_Label;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.ide.MPSCodeInsightBundle;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;
import javax.swing.Icon;
import jetbrains.mps.ide.editor.popup.IconResourceBundle_OverrideImplements;
import jetbrains.mps.openapi.editor.EditorComponent;
import jetbrains.mps.nodeEditor.cells.CellFinderUtil;
import com.intellij.openapi.actionSystem.AnAction;
import jetbrains.mps.workbench.action.BaseAction;
import com.intellij.openapi.actionSystem.ActionManager;

public class ConceptHasSubconceptsEditorMessage extends AbstractLeftEditorHighlighterMessage {
  private static final String INDENT = "     ";
  private static final EditorMessageIconRenderer.IconRendererType TYPE = new EditorMessageIconRenderer.IconRendererType(1);
  private boolean myIsInterface;
  private Condition<EditorCell> myNameCellCondition;

  private static boolean isOverridden(SNode concept) {
    return SNodeOperations.isInstanceOf(concept, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"));
  }

  public ConceptHasSubconceptsEditorMessage(final SNode node, List<SNode> overrides, EditorMessageOwner owner) {
    super(node, owner, tooltipText(node, overrides));
    myIsInterface = !(isOverridden(node));
    myNameCellCondition = new Condition<EditorCell>() {
      @Override
      public boolean met(EditorCell cell) {
        return cell.getSNode() == node && cell instanceof EditorCell_Label && ((EditorCell_Label) cell).isEditable();
      }
    };
  }
  private static String tooltipText(SNode node, @Nullable List<SNode> overrides) {
    // fixme html reference to the concept 
    if (overrides == null) {
      return (isOverridden(node) ? MPSCodeInsightBundle.message("concept.is.subclassed.too.many") : MPSCodeInsightBundle.message("interface.is.implemented.too.many"));
    }
    String prefix = ((isOverridden(node) ? "Is overridden" : "Is implemented")) + " in ";

    String tooltip = prefix;
    if (ListSequence.fromList(overrides).count() == 1) {
      tooltip = prefix + " " + getTextFromOverride(ListSequence.fromList(overrides).getElement(0));
    } else {
      for (SNode override : ListSequence.fromList(overrides)) {
        tooltip += "\n" + INDENT + getTextFromOverride(override);
      }
    }
    return tooltip;
  }
  private static String getTextFromOverride(SNode override) {
    return ((String) BHReflection.invoke0(override, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept"), SMethodTrimmedId.create("getFqName", null, "hEwIO9y")));
  }

  @Override
  public Icon getIcon() {
    return (myIsInterface ? IconResourceBundle_OverrideImplements.getInstance().getResource("IMPLEMENTED") : IconResourceBundle_OverrideImplements.getInstance().getResource("OVERRIDDEN"));
  }

  @Override
  public EditorMessageIconRenderer.IconRendererType getType() {
    return TYPE;
  }

  @Nullable
  @Override
  public EditorCell getAnchorCell(EditorComponent editorComponent) {
    EditorCell nodeCell = getNodeCell(editorComponent);
    EditorCell returnTypeCell = (nodeCell == null ? null : CellFinderUtil.findChildByCondition(nodeCell, myNameCellCondition, true));
    return (returnTypeCell != null ? returnTypeCell : nodeCell);
  }

  @Override
  public AnAction getClickAction() {
    return ((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.ide.actions.GoToConceptDescendants_Action"));
  }
}
