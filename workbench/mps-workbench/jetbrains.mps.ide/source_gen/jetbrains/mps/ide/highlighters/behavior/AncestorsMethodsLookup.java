package jetbrains.mps.ide.highlighters.behavior;

/*Generated by MPS */

import jetbrains.mps.util.Cancellable;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.openapi.editor.message.EditorMessageOwner;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.nodeEditor.EditorMessage;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;
import org.jetbrains.annotations.Nullable;
import java.util.Set;
import java.util.LinkedHashSet;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import org.jetbrains.mps.annotations.Mutable;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.findusages.model.SearchQuery;

/*package*/ final class AncestorsMethodsLookup {
  private final Cancellable myCancellable;
  private final SNode myBehavior;
  private final int myMaxResultsToCollect;
  private final SearchScope myScope;
  private final EditorMessageOwner myOwner;

  public AncestorsMethodsLookup(@NotNull Cancellable cancellable, @NotNull SearchScope scope, @NotNull SNode behavior, EditorMessageOwner owner, int maxResultsToCollect) {
    myCancellable = cancellable;
    myScope = scope;
    myBehavior = behavior;
    myOwner = owner;
    myMaxResultsToCollect = maxResultsToCollect;
  }

  @NotNull
  /*package*/ List<EditorMessage> calcMessages() {
    List<EditorMessage> result = ListSequence.fromList(new ArrayList<EditorMessage>());
    for (SNode method : ListSequence.fromList(SLinkOperations.getChildren(myBehavior, MetaAdapterFactory.getContainmentLink(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d43447b1aL, 0x11d43447b25L, "method")))) {
      if (((boolean) (Boolean) BHReflection.invoke0(method, MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d4348057eL, "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"), SMethodTrimmedId.create("isVirtual", MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d4348057eL, "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"), "6WSEafdhbZX"))) && SLinkOperations.getTarget(method, MetaAdapterFactory.getReferenceLink(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d4348057eL, 0x11d4348057fL, "overriddenMethod")) != null) {
        EditorMessage msgForMethod = calcMessage(method);
        if (msgForMethod != null) {
          ListSequence.fromList(result).addElement(msgForMethod);
        }
        if (myCancellable.isCancelled()) {
          break;
        }
      }
    }
    return result;
  }

  @Nullable
  /*package*/ EditorMessage calcMessage(SNode method) {
    Set<SNode> ancestors = new LinkedHashSet<SNode>();
    addAncestorsMethods(myCancellable, method, ancestors);
    if (SetSequence.fromSet(ancestors).count() > myMaxResultsToCollect) {
      return new MethodOverridesEditorMessage(method, null, myOwner);
    } else {
      if (SetSequence.fromSet(ancestors).isEmpty()) {
        return null;
      }
      return new MethodOverridesEditorMessage(method, SetSequence.fromSet(ancestors).toListSequence(), myOwner);
    }
  }

  private void addAncestorsMethods(final Cancellable cancellable, SNode currentMethod, @Mutable final Set<SNode> result) {
    final ProgressMonitor monitor = new EmptyProgressMonitorWithCancellable(cancellable) {
      @Override
      public boolean isCanceled() {
        return super.isCanceled();
      }
    };
    FindUtils.searchForResults(monitor, new IFinder.FindCallback() {
      public void onUsageFound(@NotNull SearchResult<?> searchResult) {
        SNode nodeParam = (SNode) searchResult.getObject();
        new _FunctionTypes._void_P1_E0<SNode>() {
          public void invoke(SNode foundNode) {
            if (SNodeOperations.isInstanceOf(foundNode, MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d4348057eL, "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration"))) {
              SetSequence.fromSet(result).addElement(SNodeOperations.cast(foundNode, MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d4348057eL, "jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration")));
              if (SetSequence.fromSet(result).count() > myMaxResultsToCollect) {
                monitor.cancel();
              }
            }
          }
        }.invoke(nodeParam);
      }
    }, new SearchQuery(currentMethod, myScope), FindUtils.getFinder("jetbrains.mps.lang.behavior.findUsages.OverriddenMethods_Finder"));
  }
}
