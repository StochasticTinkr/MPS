package jetbrains.mps.ide.highlighters.structure;

/*Generated by MPS */

import jetbrains.mps.util.Cancellable;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.openapi.editor.message.EditorMessageOwner;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.nodeEditor.EditorMessage;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.ide.highlighters.behavior.EmptyProgressMonitorWithCancellable;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.findusages.model.SearchQuery;

/*package*/ final class DescendantsLookup {
  private final Cancellable myCancellable;
  private final SNode myConcept;
  private final int myMaxResultsToCollect;
  private final SearchScope myScope;
  private final EditorMessageOwner myOwner;

  public DescendantsLookup(@NotNull Cancellable cancellable, @NotNull SearchScope scope, @NotNull SNode concept, EditorMessageOwner owner, int maxResultsToCollect) {
    myCancellable = cancellable;
    myScope = scope;
    myOwner = owner;
    myConcept = concept;
    myMaxResultsToCollect = maxResultsToCollect;
  }

  @Nullable
  /*package*/ EditorMessage calcMessage() {
    if (SPropertyOperations.getBoolean(myConcept, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x403a32c5772c7ec7L, "final"))) {
      return null;
    }
    Set<SNode> overrides = findDescendantsOverrides(myCancellable);
    if (SetSequence.fromSet(overrides).count() > myMaxResultsToCollect) {
      return new ConceptHasSubconceptsEditorMessage(myConcept, null, myOwner);
    } else {
      if (SetSequence.fromSet(overrides).isEmpty()) {
        return null;
      }
      return new ConceptHasSubconceptsEditorMessage(myConcept, SetSequence.fromSet(overrides).toListSequence(), myOwner);
    }
  }

  private Set<SNode> findDescendantsOverrides(final Cancellable cancellable) {
    final Set<SNode> result = new LinkedHashSet<SNode>();
    final ProgressMonitor monitor = new EmptyProgressMonitorWithCancellable(cancellable) {
      @Override
      public boolean isCanceled() {
        return super.isCanceled();
      }
    };
    FindUtils.searchForResults(monitor, new IFinder.FindCallback() {
      public void onUsageFound(@NotNull SearchResult<?> searchResult) {
        SNode nodeParam = (SNode) searchResult.getObject();
        new _FunctionTypes._void_P1_E0<SNode>() {
          public void invoke(SNode res) {
            if (SNodeOperations.isInstanceOf(res, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))) {
              SetSequence.fromSet(result).addElement(SNodeOperations.cast(res, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")));
              if (SetSequence.fromSet(result).count() > myMaxResultsToCollect) {
                monitor.cancel();
              }
            }
          }
        }.invoke(nodeParam);
      }
    }, new SearchQuery(myConcept, myScope), FindUtils.getFinder("jetbrains.mps.lang.structure.findUsages.ConceptDescendants_Finder"));
    return result;
  }
}
