package jetbrains.mps.ide.hierarchy;

/*Generated by MPS */

import jetbrains.mps.ide.ui.tree.MPSTreeNode;
import jetbrains.mps.ide.ui.tree.TreeAdditionalTextOwner;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.icons.IconManager;

public class HierarchyTreeNode extends MPSTreeNode {
  private static final TreeAdditionalTextOwner TREE_ADDITIONAL_TEXT_OWNER = new TreeAdditionalTextOwner() {};
  private final SNodeReference myNodeRef;

  public HierarchyTreeNode(@NotNull SNode declaration) {
    super(declaration);
    //  note, for node<> coming from typesystem (hung in the air), pointer likely to be null/null 
    myNodeRef = declaration.getReference();
    String name = declaration.getName();
    setText((name == null ? "no name" : name));
    setNodeIdentifier(declaration.getNodeId().toString());
    setToggleClickCount(-1);
    setAutoExpandable(false);
    setAdditionalText(TREE_ADDITIONAL_TEXT_OWNER, SModelOperations.getModelName(SNodeOperations.getModel(declaration)));
    setIcon(IconManager.getIconFor(declaration));
  }

  @NotNull
  public SNodeReference getNodeReference() {
    return myNodeRef;
  }
}
