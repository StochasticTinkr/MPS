package jetbrains.mps.ide.hierarchy;

/*Generated by MPS */

import java.util.Set;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.HashSet;
import java.awt.Color;
import java.util.List;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import jetbrains.mps.ide.messages.Icons;

public class ChildHierarchyTreeNode extends HierarchyTreeNode {
  private final AbstractHierarchyTree myHierarchyTree;
  private boolean myInitialized = false;
  private Set<SNode> myVisited;

  public ChildHierarchyTreeNode(SNode declaration, AbstractHierarchyTree tree, Set<SNode> visited) {
    super(declaration);
    myHierarchyTree = tree;
    myVisited = new HashSet<SNode>(visited);
    setColor(new Color(64, 0, 144));
  }

  @Override
  public boolean isInitialized() {
    return myInitialized;
  }
  @Override
  protected void doInit() {
    try {
      //  FIXME we still use cached SNode instance here, as tree node's user object 
      SNode node = (SNode) getUserObject();
      List<SNode> descendants = new ArrayList<SNode>(myHierarchyTree.getAbstractChildren(node, myVisited));
      Collections.sort(descendants, new Comparator<SNode>() {
        @Override
        public int compare(SNode o1, SNode o2) {
          return ("" + o1.getPresentation()).compareTo(o2.getPresentation());
        }
      });
      Set<SNode> visited = new HashSet<SNode>(myVisited);
      visited.add(node);
      for (SNode descendant : descendants) {
        ChildHierarchyTreeNode childHierarchyTreeNode = new ChildHierarchyTreeNode(descendant, myHierarchyTree, visited);
        childHierarchyTreeNode.setText(myHierarchyTree.nodePresentation(descendant));
        add(childHierarchyTreeNode);
      }
    } catch (CircularHierarchyException ex) {
      SNode errorNode = (SNode) ex.getRepeatedObject();
      final String message = ex.getMessage();
      HierarchyTreeNode errorTreeNode = new HierarchyTreeNode(errorNode);
      errorTreeNode.setText(myHierarchyTree.nodePresentation(errorNode));
      errorTreeNode.setIcon(Icons.ERROR_ICON);
      errorTreeNode.setColor(Color.RED);
      errorTreeNode.setAdditionalText(message);
      add(errorTreeNode);
    }
    myInitialized = true;
  }
  @Override
  public boolean isLeaf() {
    if (!(isInitialized())) {
      return false;
    }
    return getChildCount() == 0;
  }
  @Override
  protected void doUpdate() {
    this.removeAllChildren();
    myInitialized = false;
  }
}
