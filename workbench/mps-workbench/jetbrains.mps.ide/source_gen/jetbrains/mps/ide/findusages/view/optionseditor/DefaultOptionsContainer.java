package jetbrains.mps.ide.findusages.view.optionseditor;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.HashMap;
import jetbrains.mps.ide.findusages.view.optionseditor.options.FindersOptions;
import jetbrains.mps.ide.findusages.view.optionseditor.options.ViewOptions;
import jetbrains.mps.ide.findusages.view.optionseditor.options.ScopeOptions;
import jetbrains.mps.InternalFlag;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import org.jdom.Element;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.findusages.CantSaveSomethingException;
import java.util.List;
import jetbrains.mps.ide.findusages.CantLoadSomethingException;

public class DefaultOptionsContainer {
  private static final String DEFAULT_SEARCH_OPTIONS = "default_search_options";
  private static final String SEARCH_OPTION = "search_options";
  private static final String FINDERS_OPTION = "finders_option";
  private static final String NODE_ID = "node";
  private static Logger LOG = LogManager.getLogger(DefaultSearchOptionsComponent.class);
  private final HashMap<String, FindersOptions> myDefaultFinders = new HashMap<String, FindersOptions>();
  private FindUsagesOptions myDefaultOptions = createDefaultSearchOptions();
  public DefaultOptionsContainer() {
  }
  public FindUsagesOptions getDefaultSearchOptions(String concept) {
    FindUsagesOptions result = myDefaultOptions.clone();
    FindersOptions finders = myDefaultFinders.get(concept);
    result.setOption((finders != null ? finders : createDefaultFindersOption()));
    return result;
  }
  public void setDefaultSearchOptions(String concept, FindUsagesOptions defaultSearchOptions) {
    myDefaultOptions = defaultSearchOptions.clone();
    myDefaultOptions.removeOption(FindersOptions.class);
    myDefaultFinders.put(concept, defaultSearchOptions.getOption(FindersOptions.class));
  }
  private FindUsagesOptions createDefaultSearchOptions() {
    final FindUsagesOptions result = new FindUsagesOptions();
    ViewOptions viewOptions = new ViewOptions(true, false);
    result.setOption(viewOptions);
    ScopeOptions scopeOptions = new ScopeOptions(((InternalFlag.isInternalMode() ? ScopeOptions.ScopeType.GLOBAL : ScopeOptions.ScopeType.PROJECT)), ScopeOptions.DEFAULT_VALUE, ScopeOptions.DEFAULT_VALUE);
    result.setOption(scopeOptions);
    return result;
  }
  public FindersOptions createDefaultFindersOption() {
    final Wrappers._T<FindersOptions> findersOptions = new Wrappers._T<FindersOptions>();
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        findersOptions.value = new FindersOptions("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder");
      }
    });
    return findersOptions.value;
  }
  public Element writeOptions(MPSProject project) {
    Element defaultFindOptionsXML = new Element(DEFAULT_SEARCH_OPTIONS);
    try {
      Element soXML = new Element(SEARCH_OPTION);
      myDefaultOptions.write(soXML, project);
      defaultFindOptionsXML.addContent(soXML);
      for (String np : myDefaultFinders.keySet()) {
        Element optionXML = new Element(FINDERS_OPTION);
        optionXML.setAttribute(NODE_ID, np);
        myDefaultFinders.get(np).write(optionXML, project);
        defaultFindOptionsXML.addContent(optionXML);
      }
    } catch (CantSaveSomethingException e) {
      LOG.error("error saving options", e);
    }
    return defaultFindOptionsXML;
  }
  public void readOptions(Element state, MPSProject project) {
    myDefaultOptions = new FindUsagesOptions();
    myDefaultFinders.clear();
    try {
      Element soXML = state.getChild(SEARCH_OPTION);
      myDefaultOptions.read(soXML, project);
      for (Element findersXML : (List<Element>) state.getChildren(FINDERS_OPTION)) {
        String np = findersXML.getAttributeValue(NODE_ID);
        FindersOptions opt = new FindersOptions();
        opt.read(findersXML, project);
        myDefaultFinders.put(np, opt);
      }
    } catch (CantLoadSomethingException e) {
      myDefaultOptions = createDefaultSearchOptions();
      myDefaultFinders.clear();
      LOG.error("error reading options", e);
    }
    if (myDefaultOptions.getOption(ScopeOptions.class) == null || myDefaultOptions.getOption(ViewOptions.class) == null) {
      myDefaultOptions = createDefaultSearchOptions();
    }
  }
}
