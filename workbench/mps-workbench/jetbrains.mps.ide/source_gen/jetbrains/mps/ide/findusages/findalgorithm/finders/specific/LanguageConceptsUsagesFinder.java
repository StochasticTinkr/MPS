package jetbrains.mps.ide.findusages.findalgorithm.finders.specific;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.BaseFinder;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.model.SModel;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.LinkedList;
import jetbrains.mps.ide.findusages.findalgorithm.finders.SearchedObjects;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.project.AllUserModelsScope;
import jetbrains.mps.ide.ui.finders.ModelImportsUsagesFinder;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.ide.findusages.model.scopes.ModelsScope;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public class LanguageConceptsUsagesFinder extends BaseFinder {
  public LanguageConceptsUsagesFinder() {
  }

  @Override
  public String getDescription() {
    return "Language Concepts' Usages";
  }

  @Override
  public void find(SearchQuery query, @NotNull final IFinder.FindCallback callback, @NotNull ProgressMonitor monitor) {
    Object value = query.getObjectHolder().getObject();
    SModule module = null;
    if (value instanceof SModule) {
      module = ((SModule) value);
    } else if (value instanceof SModuleReference) {
      module = query.getScope().resolve(((SModuleReference) value));
    }
    if (!(module instanceof Language)) {
      return;
    }
    Language language = (Language) module;
    SModel structureModel = language.getStructureModelDescriptor();
    if (structureModel == null) {
      return;
    }
    if (!(structureModel.getRootNodes().iterator().hasNext())) {
      return;
    }
    List<SNode> roots = new LinkedList<SNode>();
    for (SNode root : structureModel.getRootNodes()) {
      roots.add(root);
    }
    callback.onSearchedObjectsCalculated(new SearchedObjects(roots));

    monitor.start("", IterableUtil.asCollection(structureModel.getRootNodes()).size() + 1);
    try {
      FindUtils.searchForResults(monitor.subTask(1), callback, new SearchQuery(structureModel.getReference(), AllUserModelsScope.getInstance()), ((IFinder) new ModelImportsUsagesFinder()));
      List<SModel> models = new ArrayList<SModel>();
      SearchScope scope = new ModelsScope(models.toArray(new SModel[models.size()]));
      for (SNode node : roots) {
        if (monitor.isCanceled()) {
          break;
        }
        FindUtils.searchForResults(monitor.subTask(1), new IFinder.FindCallback() {
          public void onUsageFound(@NotNull SearchResult<?> searchResult) {
            SNode nodeParam = (SNode) searchResult.getObject();
            new _FunctionTypes._void_P1_E0<SNode>() {
              public void invoke(SNode foundNode) {
                callback.onUsageFound(new SearchResult(foundNode, null));
              }
            }.invoke(nodeParam);
          }
        }, new SearchQuery(node, scope), FindUtils.getFinder("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder"));
      }
    } finally {
      monitor.done();
    }
  }
}
