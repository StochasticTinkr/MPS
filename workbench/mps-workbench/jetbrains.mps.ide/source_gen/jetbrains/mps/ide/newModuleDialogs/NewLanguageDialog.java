package jetbrains.mps.ide.newModuleDialogs;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.ide.ui.dialogs.modules.NewLanguageSettings;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.ide.project.ProjectHelper;
import javax.swing.JComponent;
import com.intellij.project.ProjectKt;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.ide.newSolutionDialog.NewModuleUtil;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.project.StandaloneMPSProject;
import jetbrains.mps.project.Solution;
import java.io.IOException;
import org.apache.log4j.Level;
import jetbrains.mps.project.MPSExtentions;

public class NewLanguageDialog extends DialogWrapper {
  private final MPSProject myProject;
  private Language myResult;
  private String myError = null;
  private NewLanguageSettings myLanguageSettings;
  private final String myVirtualFolder;

  public NewLanguageDialog(MPSProject project, @Nullable String virtualFolder) {
    super(ProjectHelper.toIdeaProject(project));
    setTitle("New Language");
    setOKButtonText("&OK");
    setCancelButtonText("Ca&ncel");

    myProject = project;
    myVirtualFolder = virtualFolder;

    init();
  }

  @Nullable
  protected JComponent createCenterPanel() {
    if (myLanguageSettings == null) {
      myLanguageSettings = new NewLanguageSettings((myProject != null ? ((!(ProjectKt.isDirectoryBased(myProject.getProject())) ? myProject.getProjectFile().getParentFile().getAbsolutePath() : myProject.getProjectFile().getAbsolutePath())) : null));
      myLanguageSettings.setListener(new NewLanguageSettings.LangSettingsChangedListener() {
        @Override
        public void changed() {
          NewLanguageDialog.this.check();
        }
      });
    }
    return myLanguageSettings;
  }

  protected static Logger LOG = LogManager.getLogger(NewLanguageDialog.class);
  @Override
  protected void doOKAction() {
    if (!(check())) {
      return;
    }

    super.doOKAction();

    // TODO: reuse runnable in DefaultLanguageProjectTemplate 
    NewModuleUtil.runModuleCreation(myProject, new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        Language language = NewModuleUtil.createLanguage(myLanguageSettings.getLanguageName(), myLanguageSettings.getLanguageLocation(), (MPSProject) myProject);
        ((StandaloneMPSProject) myProject).setFolderFor(language, myVirtualFolder);

        try {
          if (myLanguageSettings.isRuntimeSolutionNeeded()) {
            Solution runtimeSolution = NewModuleUtil.createRuntimeSolution(language, myLanguageSettings.getLanguageLocation(), (MPSProject) myProject);
            ((StandaloneMPSProject) myProject).setFolderFor(runtimeSolution, myVirtualFolder);
            language.getModuleDescriptor().getRuntimeModules().add(runtimeSolution.getModuleReference());
          }
          if (myLanguageSettings.isSandboxSolutionNeeded()) {
            Solution sandboxSolution = NewModuleUtil.createSandboxSolution(language, myLanguageSettings.getLanguageLocation(), (MPSProject) myProject);
            ((StandaloneMPSProject) myProject).setFolderFor(sandboxSolution, myVirtualFolder);
          }
        } catch (IOException e) {
          // todo: ! 
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("Cannot create runtime / sandbox module", e);
          }
        }

        myResult = language;
      }
    });
  }

  @Nullable
  @Override
  public JComponent getPreferredFocusedComponent() {
    return myLanguageSettings.getPreferredFocusedComponent();
  }

  public Language getLangauge() {
    return myResult;
  }

  private boolean check() {
    myError = NewModuleUtil.check(MPSExtentions.DOT_LANGUAGE, myLanguageSettings.getLanguageName(), myLanguageSettings.getLanguageLocation());
    setErrorText(myError);
    return myError == null;
  }
}
