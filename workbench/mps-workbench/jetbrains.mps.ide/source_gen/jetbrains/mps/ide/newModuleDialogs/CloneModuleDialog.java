package jetbrains.mps.ide.newModuleDialogs;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.util.ModuleNameUtil;
import jetbrains.mps.vfs.IFile;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.openapi.ui.MessageType;
import jetbrains.mps.extapi.persistence.CopyNotSupportedException;
import jetbrains.mps.util.StringUtil;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.project.Solution;
import jetbrains.mps.ide.ui.dialogs.modules.CloneModuleSettings;
import org.jetbrains.annotations.NonNls;
import javax.swing.JComponent;
import com.intellij.openapi.wm.WindowManager;
import com.intellij.openapi.ui.popup.JBPopupFactory;
import com.intellij.ui.awt.RelativePoint;
import com.intellij.openapi.ui.popup.Balloon;

/**
 * 
 * @author Radimir, apyshkin
 */
public final class CloneModuleDialog extends AbstractModuleCreationDialog {
  private static final Logger LOG = LogManager.getLogger(CloneModuleDialog.class);
  private static final int POPUP_FADEOUT_TIME = 10000;

  private final AbstractModule myModuleOriginal;

  public CloneModuleDialog(MPSProject project, @Nullable String virtualFolder, AbstractModule moduleOriginal) {
    super(project, virtualFolder);
    setTitle("Clone " + ModuleNameUtil.getModuleType(moduleOriginal) + " " + moduleOriginal.getModuleName());

    myModuleOriginal = moduleOriginal;
    init();
  }

  @Override
  protected void runCreation() {
    IFile moduleLocationFile = myModuleOriginal.getFileSystem().getFile(mySettings.getModuleLocation()).getDescendant(mySettings.getModuleName() + getExtension());
    CopyModuleHelper helper = new CopyModuleHelper(myProject, myModuleOriginal, mySettings.getModuleName(), moduleLocationFile, myVirtualFolder);
    try {
      myResult = helper.copy();
      ApplicationManager.getApplication().invokeLater(new Runnable() {
        public void run() {
          showPopup(ModuleNameUtil.getModuleType(myModuleOriginal) + " <i>" + myModuleOriginal.getModuleName() + "</i> has successfully cloned", MessageType.INFO);
        }
      });
    } catch (final CopyNotSupportedException e) {
      ApplicationManager.getApplication().invokeLater(new Runnable() {
        public void run() {
          String errorDescription = e.getMessage();
          String header = "Cloning of <i>" + myModuleOriginal.getModuleName() + "</i> finished with error";
          String separator = ((errorDescription == null || errorDescription.length() == 0) ? "\n" : ":\n");
          showPopup(header + separator + StringUtil.emptyIfNull(errorDescription), MessageType.ERROR);
        }
      });
    }
  }

  @Override
  protected String getExtension() {
    if (myModuleOriginal instanceof Language) {
      return MPSExtentions.DOT_LANGUAGE;
    }
    if (myModuleOriginal instanceof Solution) {
      return MPSExtentions.DOT_SOLUTION;
    }
    return null;
  }

  @Override
  protected CloneModuleSettings createSettingsInstance() {
    return new CloneModuleSettings(getProjectPath(), myModuleOriginal);
  }

  @Nullable
  @NonNls
  @Override
  protected String getDimensionServiceKey() {
    return CloneModuleDialog.class.getName();
  }

  private void showPopup(String text, MessageType messageType) {
    JComponent component = WindowManager.getInstance().getIdeFrame(myProject.getProject()).getComponent();
    JBPopupFactory.getInstance().createHtmlTextBalloonBuilder(text, messageType, null).setFadeoutTime(POPUP_FADEOUT_TIME).createBalloon().show(RelativePoint.getSouthWestOf(component), Balloon.Position.above);
  }
}
