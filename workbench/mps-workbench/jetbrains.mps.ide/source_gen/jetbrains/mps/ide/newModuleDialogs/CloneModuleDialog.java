package jetbrains.mps.ide.newModuleDialogs;

/*Generated by MPS */

import jetbrains.mps.extapi.module.CloneableSModule;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.Nullable;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.project.AbstractModule;
import org.apache.log4j.Level;
import jetbrains.mps.extapi.module.SRepositoryExt;
import jetbrains.mps.project.StandaloneMPSProject;
import jetbrains.mps.util.ReferenceUpdater;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.project.Solution;
import jetbrains.mps.ide.ui.dialogs.modules.CloneModuleSettings;
import org.jetbrains.annotations.NonNls;

public class CloneModuleDialog extends AbstractModuleCreationDialog {

  private final CloneableSModule myModuleOriginal;

  public CloneModuleDialog(MPSProject project, @Nullable String virtualFolder, CloneableSModule moduleOrginal) {
    super(project, virtualFolder);
    setTitle("Clone Module " + moduleOrginal.getModuleName());

    myModuleOriginal = moduleOrginal;
    init();
  }

  protected static Logger LOG = LogManager.getLogger(CloneModuleDialog.class);
  @Override
  protected void runCreation() {
    myResult = ((AbstractModule) myModuleOriginal.clone(mySettings.getModuleLocation(), mySettings.getModuleName()));
    if (myResult == null) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Failure on cloning " + myModuleOriginal);
      }
      return;
    }
    ((SRepositoryExt) myProject.getRepository()).registerModule(myResult, myProject);
    myProject.addModule(myResult);
    ((StandaloneMPSProject) myProject).setFolderFor(myResult, myVirtualFolder);

    ReferenceUpdater referenceUpdater = new ReferenceUpdater();
    referenceUpdater.addModuleToAdjust(myModuleOriginal, myResult, true);
    referenceUpdater.adjust();

    myResult.renameModels(myModuleOriginal.getModuleName(), myResult.getModuleName(), true);
    myResult.save();
  }

  @Override
  protected String getExtension() {
    if (myModuleOriginal instanceof Language) {
      return MPSExtentions.DOT_LANGUAGE;
    }
    if (myModuleOriginal instanceof Solution) {
      return MPSExtentions.DOT_SOLUTION;
    }
    return null;
  }

  @Override
  protected CloneModuleSettings createSettingsInstance() {
    return new CloneModuleSettings(getProjectPath(), myModuleOriginal);
  }


  @Nullable
  @NonNls
  @Override
  protected String getDimensionServiceKey() {
    return CloneModuleDialog.class.getName();
  }
}
