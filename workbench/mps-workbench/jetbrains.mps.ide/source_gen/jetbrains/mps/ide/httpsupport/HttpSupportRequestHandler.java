package jetbrains.mps.ide.httpsupport;

/*Generated by MPS */

import org.jetbrains.ide.HttpRequestHandler;
import org.jetbrains.annotations.NotNull;
import io.netty.handler.codec.http.FullHttpRequest;
import io.netty.handler.codec.http.HttpMethod;
import io.netty.handler.codec.http.QueryStringDecoder;
import io.netty.channel.ChannelHandlerContext;
import java.io.IOException;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import io.netty.handler.codec.http.HttpResponse;
import org.apache.log4j.Level;
import org.jetbrains.io.Responses;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class HttpSupportRequestHandler extends HttpRequestHandler {

  @Override
  public boolean isSupported(@NotNull FullHttpRequest request) {
    return request.method() == HttpMethod.GET;
  }


  @Override
  public boolean process(@NotNull QueryStringDecoder decoder, @NotNull FullHttpRequest request, @NotNull ChannelHandlerContext context) throws IOException {

    for (IHttpRequsetHandler handler : Sequence.fromIterable(new ExtensionPoint<IHttpRequsetHandler>("jetbrains.mps.ide.HttpRequestHandlers").getObjects())) {
      HttpResponse response;
      try {
        response = handler.tryHandle(request);
      } catch (Exception e) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Request handler throws exception.", e);
        }
        continue;
      }
      if (response != null) {
        Responses.send(response, context.channel(), request);
        return true;
      }
    }

    return false;
  }
  protected static Logger LOG = LogManager.getLogger(HttpSupportRequestHandler.class);
}
