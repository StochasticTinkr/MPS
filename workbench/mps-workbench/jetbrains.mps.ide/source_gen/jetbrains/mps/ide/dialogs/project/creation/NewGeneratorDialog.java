package jetbrains.mps.ide.dialogs.project.creation;

/*Generated by MPS */

import com.intellij.openapi.ui.DialogWrapper;
import javax.swing.JPanel;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import javax.swing.JTextField;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.Generator;
import com.intellij.openapi.project.Project;
import java.awt.HeadlessException;
import java.awt.GridLayout;
import java.awt.Dimension;
import org.jetbrains.annotations.Nullable;
import javax.swing.JComponent;
import javax.swing.JLabel;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.ide.ui.filechoosers.treefilechooser.TreeFileChooser;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.vfs.IFile;
import java.io.File;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.ide.DataManager;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.newSolutionDialog.NewModuleUtil;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.MPSModuleRepository;
import com.intellij.openapi.vfs.VfsUtil;
import java.io.IOException;
import org.apache.log4j.Level;
import com.intellij.openapi.util.Disposer;
import jetbrains.mps.project.structure.modules.LanguageDescriptor;
import jetbrains.mps.project.structure.modules.GeneratorDescriptor;
import jetbrains.mps.persistence.DefaultModelRoot;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelStereotype;
import org.jetbrains.mps.openapi.model.EditableSModel;
import jetbrains.mps.project.SModuleOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class NewGeneratorDialog extends DialogWrapper {
  private JPanel myContenetPane;
  private TextFieldWithBrowseButton myTemplateModelsDir;
  private JTextField myGeneratorName;
  private Language mySourceLanguage;
  private Generator myResult;
  public NewGeneratorDialog(Project project, Language sourceLanguage) throws HeadlessException {
    super(project);
    setTitle("New Generator");
    mySourceLanguage = sourceLanguage;
    myContenetPane = new JPanel(new GridLayout(4, 1));
    myContenetPane.setPreferredSize(new Dimension(600, 100));
    initContentPane();

    init();
  }
  @Nullable
  @Override
  protected JComponent createCenterPanel() {
    return myContenetPane;
  }
  private void initContentPane() {
    myContenetPane.add(new JLabel("Generator name"));
    myGeneratorName = new JTextField();
    myContenetPane.add(myGeneratorName);
    myContenetPane.add(new JLabel("Templates root"));

    myTemplateModelsDir = new TextFieldWithBrowseButton();
    myTemplateModelsDir.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        String oldPath = myTemplateModelsDir.getText();
        TreeFileChooser chooser = new TreeFileChooser();
        chooser.setMode(TreeFileChooser.MODE_DIRECTORIES);
        if (oldPath != null && oldPath.length() != 0) {
          chooser.setInitialFile(FileSystem.getInstance().getFileByPath(oldPath));
        }
        IFile result = chooser.showDialog();
        if (result != null) {
          myTemplateModelsDir.setText(result.getPath());
        }
      }
    });

    myContenetPane.add(myTemplateModelsDir);
    updateTemplateModelsDir();
  }
  private void updateTemplateModelsDir() {
    IFile moduleDir = mySourceLanguage.getModuleSourceDir();
    assert moduleDir != null;
    String path = moduleDir.getPath();
    String modelsDir = path + File.separatorChar + "generator" + File.separatorChar + "template";
    myTemplateModelsDir.setText(modelsDir);
  }
  private boolean isValidName(String name) {
    for (char c : name.toCharArray()) {
      if (!(Character.isLetterOrDigit(c)) && c != '_') {
        return false;
      }
    }
    return true;
  }
  public Generator getResult() {
    return myResult;
  }
  @Override
  protected void doOKAction() {
    final String templateModelsPath = myTemplateModelsDir.getText();
    if (templateModelsPath.length() == 0) {
      setErrorText("No template models root");
      return;
    }
    final File dir = new File(templateModelsPath);
    if (!(dir.isAbsolute())) {
      setErrorText("Path should be absolute");
      return;
    }
    final String name = myGeneratorName.getText();
    if (!(isValidName(name))) {
      setErrorText("Only letters, digits and '_' can be used in generator name.");
      return;
    }
    dispose();
    jetbrains.mps.project.Project project = MPSCommonDataKeys.MPS_PROJECT.getData(DataManager.getInstance().getDataContext());
    assert project != null;
    final Wrappers._T<Generator> newGenerator = new Wrappers._T<Generator>(null);
    NewModuleUtil.runModuleCreation(project, new _FunctionTypes._void_P0_E0() {
      public void invoke() {
        try {
          // see MPS-18743 
          MPSModuleRepository.getInstance().saveAll();
          VfsUtil.createDirectories(templateModelsPath);
          newGenerator.value = createNewGenerator(mySourceLanguage, templateModelsPath, name);
          adjustTemplateModel(mySourceLanguage, newGenerator.value);
        } catch (IOException e) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("", e);
          }
          newGenerator.value = null;
        }
      }
    });

    myResult = newGenerator.value;
    super.doOKAction();
  }
  @Override
  protected void dispose() {
    super.dispose();
    Disposer.dispose(myTemplateModelsDir);
  }
  protected Generator createNewGenerator(final Language language, String templateModelsDir, String name) {
    final LanguageDescriptor languageDescriptor = language.getModuleDescriptor();
    final GeneratorDescriptor generatorDescriptor = new GeneratorDescriptor();
    generatorDescriptor.setGeneratorUID(Generator.generateGeneratorUID(language));
    generatorDescriptor.setNamespace(name);
    DefaultModelRoot templateModelsRoot = new DefaultModelRoot();
    templateModelsRoot.setContentRoot(templateModelsDir);
    templateModelsRoot.addFile(DefaultModelRoot.SOURCE_ROOTS, templateModelsDir);
    generatorDescriptor.getModelRootDescriptors().add(templateModelsRoot.toDescriptor());
    generatorDescriptor.getUsedDevkits().add(PersistenceFacade.getInstance().createModuleReference("fbc25dd2-5da4-483a-8b19-70928e1b62d7(jetbrains.mps.devkit.general-purpose)"));
    languageDescriptor.getGenerators().add(generatorDescriptor);
    language.setModuleDescriptor(languageDescriptor);
    language.save();

    return (Generator) MPSModuleRepository.getInstance().getModule(generatorDescriptor.getId());
  }
  private String getTemplateModelPrefix(Language sourceLanguage) {
    return sourceLanguage.getModuleName() + ".generator.template";
  }
  private void adjustTemplateModel(Language sourceLanguage, Generator newGenerator) {
    boolean alreadyOwnsTemplateModel = false;
    for (SModel modelDescriptor : newGenerator.getModels()) {
      if (SModelStereotype.isGeneratorModel(modelDescriptor)) {
        alreadyOwnsTemplateModel = true;
        break;
      }
    }
    if (alreadyOwnsTemplateModel) {
      return;
    }
    EditableSModel templateModel = SModuleOperations.createModelWithAdjustments(getTemplateModelPrefix(sourceLanguage) + "." + "main@" + SModelStereotype.GENERATOR, newGenerator.getModelRoots().iterator().next());
    SNode mappingConfiguration = SModelOperations.createNewNode(((SModel) templateModel), null, SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xff0bea0475L, "jetbrains.mps.lang.generator.structure.MappingConfiguration")));
    SPropertyOperations.set(mappingConfiguration, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "main");
    SModelOperations.addRootNode(((SModel) templateModel), mappingConfiguration);
    templateModel.save();
  }
  protected static Logger LOG = LogManager.getLogger(NewGeneratorDialog.class);
}
