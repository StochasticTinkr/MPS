package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import jetbrains.mps.ide.platform.refactoring.RenameDialog;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.project.MPSProject;
import java.awt.HeadlessException;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.StandaloneMPSProject;
import jetbrains.mps.refactoring.Renamer;
import jetbrains.mps.project.structure.project.ProjectDescriptor;
import jetbrains.mps.project.structure.project.ModulePath;

public class RenameModuleDialog extends RenameDialog {
  private final AbstractModule myModule;
  private final MPSProject myProject;

  public RenameModuleDialog(MPSProject project, AbstractModule module) throws HeadlessException {
    super(project.getProject(), module.getModuleName(), "module");
    myModule = module;
    myProject = project;
    setTitle("Rename Module");
  }

  @Override
  protected void doRefactoringAction() {
    myProject.getRepository().getModelAccess().executeCommand(new Runnable() {
      public void run() {
        final String fqName = getCurrentValue();

        // FIXME why validation code is part of change command? Shall refactor into distinct read 

        for (final SModule module : myProject.getRepository().getModules()) {
          // module.getModuleName() can be null 
          if (fqName.equals(module.getModuleName())) {
            setErrorText("Duplicate module name");
            return;
          }
        }

        if (myProject instanceof StandaloneMPSProject) {
          StandaloneMPSProject smp = (StandaloneMPSProject) myProject;
          String folder = smp.getFolderFor(myModule);
          String oldName = myModule.getDescriptorFile().getPath();

          Renamer.renameModule(myModule, fqName);

          // TODO: add moduleRenamed to SRepositoryListener? 
          // update module path in project descriptor 
          final ProjectDescriptor projectDescriptor = smp.getProjectDescriptor();
          String virtualFolder = projectDescriptor.removeModulePath(new ModulePath(oldName));
          ModulePath modulePath = new ModulePath(myModule.getDescriptorFile().getPath(), virtualFolder);
          projectDescriptor.addModulePath(modulePath);
        } else {
          Renamer.renameModule(myModule, fqName);
        }
        RenameModuleDialog.super.doRefactoringAction();
      }
    });
  }
}
