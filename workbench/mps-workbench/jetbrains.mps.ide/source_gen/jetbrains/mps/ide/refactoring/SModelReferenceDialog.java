package jetbrains.mps.ide.refactoring;

/*Generated by MPS */

import jetbrains.mps.ide.platform.refactoring.RefactoringDialog;
import jetbrains.mps.workbench.goTo.ui.ChooseByNamePanel;
import jetbrains.mps.project.MPSProject;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.workbench.choose.models.BaseModelModel;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.workbench.goTo.ui.MpsPopupFactory;
import com.intellij.ide.util.gotoByName.ChooseByNamePopupComponent;
import com.intellij.openapi.application.ModalityState;
import javax.swing.JComponent;
import org.jetbrains.annotations.Nullable;

public class SModelReferenceDialog extends RefactoringDialog {
  protected static String REFACTORING_NAME = "Move Concepts";
  private ChooseByNamePanel myChooser;
  private MPSProject myMPSProject;
  private List<SModelReference> myModels;
  private SModelReference selectedModel;
  public SModelReferenceDialog(@NotNull MPSProject project, List<SModelReference> models) {
    super(project.getProject(), true);
    myMPSProject = project;
    myModels = models;
    setTitle(REFACTORING_NAME);
    init();
  }
  @Override
  protected void init() {
    setModal(true);
    setHorizontalStretch(2.5f);
    setVerticalStretch(2);

    final BaseModelModel goToModelModel = new BaseModelModel(myMPSProject) {
      @Override
      public SModelReference[] find(SearchScope scope) {
        throw new UnsupportedOperationException("must not be used");
      }
      @Override
      public SModelReference[] find(boolean checkBoxState) {
        return ListSequence.fromList(myModels).toGenericArray(SModelReference.class);
      }
    };
    myChooser = MpsPopupFactory.createPanelForPackage(getProject(), goToModelModel, false);
    myChooser.invoke(new ChooseByNamePopupComponent.Callback() {
      @Override
      public void elementChosen(Object p0) {
        selectedModel = goToModelModel.getModelObject(p0);
        doRefactoringAction();
      }
    }, ModalityState.stateForComponent(getWindow()), false);
    super.init();
  }
  @Override
  public JComponent getPreferredFocusedComponent() {
    return myChooser.getPreferredFocusedComponent();
  }
  @Nullable
  @Override
  protected JComponent createCenterPanel() {
    return myChooser.getPanel();
  }
  public static SModelReference getSelectedModel(@NotNull MPSProject project, List<SModelReference> models) {
    // FIXME SModelReferenceDialog just selects a model as its doRefactoringAction does nothing. Perhaps, could be named better 
    //       (and subclassing RefactoringDialog is misguiding!). Perhaps, could use some standard dialog (see CommonChoosers) 
    final SModelReferenceDialog dialog = new SModelReferenceDialog(project, models);
    dialog.show();
    return dialog.selectedModel;
  }
}
