package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.annotations.NotNull;
import com.intellij.featureStatistics.FeatureUsageTracker;
import jetbrains.mps.workbench.choose.modules.BaseModuleModel;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.module.SearchScope;
import java.util.List;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.Solution;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.DevKit;
import com.intellij.ide.util.gotoByName.ChooseByNamePopup;
import jetbrains.mps.workbench.goTo.ui.MpsPopupFactory;
import com.intellij.ide.util.gotoByName.ChooseByNamePopupComponent;
import jetbrains.mps.openapi.navigation.ProjectPaneNavigator;
import com.intellij.openapi.application.ModalityState;

public class GoToModule_Action extends BaseAction {
  private static final Icon ICON = null;
  public GoToModule_Action() {
    super("Go to Module", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.goto.module");
    // PsiDocumentManager.getInstance(project).commitAllDocuments(); 
    final MPSProject mpsProject = ((MPSProject) MapSequence.fromMap(_params).get("project"));
    final BaseModuleModel goToModuleModel = new BaseModuleModel(mpsProject) {
      @Override
      public SModuleReference[] find(SearchScope scope) {
        List<SModuleReference> modules = new ArrayList<SModuleReference>();
        for (SModule module : scope.getModules()) {
          if (!((module instanceof Solution || module instanceof Language || module instanceof DevKit))) {
            continue;
          }
          modules.add(module.getModuleReference());
        }
        return modules.toArray(new SModuleReference[modules.size()]);
      }
    };
    ChooseByNamePopup popup = MpsPopupFactory.createPackagePopup(mpsProject.getProject(), goToModuleModel, GoToModule_Action.this);

    popup.invoke(new ChooseByNamePopupComponent.Callback() {
      private SModuleReference myModuleRef;
      public void elementChosen(Object p0) {
        myModuleRef = goToModuleModel.getModelObject(p0);
      }

      @Override
      public void onClose() {
        if (myModuleRef != null) {
          new ProjectPaneNavigator(mpsProject).shallFocus(true).select(myModuleRef);
        }
      }
    }, ModalityState.current(), true);
  }
}
