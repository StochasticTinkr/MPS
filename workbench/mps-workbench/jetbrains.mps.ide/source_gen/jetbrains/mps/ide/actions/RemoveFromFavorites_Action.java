package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import java.util.List;
import javax.swing.tree.TreeNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.projectPane.favorites.FavoritesUtil;
import com.intellij.openapi.project.Project;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import jetbrains.mps.ide.projectPane.favorites.TreeNodeValueExtractor;
import jetbrains.mps.ide.projectPane.favorites.MPSFavoritesManager;
import com.intellij.ide.projectView.ProjectView;
import jetbrains.mps.ide.projectPane.favorites.FavoritesProjectPane;

public class RemoveFromFavorites_Action extends BaseAction {
  private static final Icon ICON = null;
  public RemoveFromFavorites_Action() {
    super("Remove from Favorites", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (((List<TreeNode>) MapSequence.fromMap(_params).get("treeNodes")).isEmpty()) {
      return false;
    }
    return FavoritesUtil.isActiveFavorites(((Project) MapSequence.fromMap(_params).get("project")));
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      List<TreeNode> p = event.getData(MPSCommonDataKeys.TREE_NODES);
      MapSequence.fromMap(_params).put("treeNodes", p);
      if (p == null) {
        return false;
      }
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    List<Object> objects = new TreeNodeValueExtractor().allowTransients(true).getObjects(((List<TreeNode>) MapSequence.fromMap(_params).get("treeNodes")));
    MPSFavoritesManager favoritesManager = ((Project) MapSequence.fromMap(_params).get("project")).getComponent(MPSFavoritesManager.class);
    if (favoritesManager == null) {
      return;
    }
    ProjectView projectView = ProjectView.getInstance(((Project) MapSequence.fromMap(_params).get("project")));
    FavoritesProjectPane pane = (FavoritesProjectPane) projectView.getCurrentProjectViewPane();
    String name = pane.getSubId();
    favoritesManager.removeRoots(name, objects);
  }
}
