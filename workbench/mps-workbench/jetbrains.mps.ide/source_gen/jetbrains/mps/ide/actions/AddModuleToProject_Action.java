package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import java.util.HashSet;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.StandaloneMPSProject;

public class AddModuleToProject_Action extends BaseAction {
  private static final Icon ICON = null;

  public AddModuleToProject_Action() {
    super("Add to Project", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    HashSet<SModule> projectModules = new HashSet<SModule>(IterableUtil.asCollection(((MPSProject) MapSequence.fromMap(_params).get("mpsProject")).getModules()));
    for (SModule module : ((List<SModule>) MapSequence.fromMap(_params).get("modules"))) {
      if (projectModules.contains(module)) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      List<SModule> p = event.getData(MPSCommonDataKeys.MODULES);
      MapSequence.fromMap(_params).put("modules", p);
      if (p == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("mpsProject", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    for (SModule module : ListSequence.fromList(((List<SModule>) MapSequence.fromMap(_params).get("modules")))) {
      ((MPSProject) MapSequence.fromMap(_params).get("mpsProject")).addModule(module);
    }
    if (((MPSProject) MapSequence.fromMap(_params).get("mpsProject")) instanceof StandaloneMPSProject) {
      ((StandaloneMPSProject) ((MPSProject) MapSequence.fromMap(_params).get("mpsProject"))).update();
    }
  }
}
