package jetbrains.mps.ide.actions;

/*Generated by MPS */

import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.ide.findusages.view.optionseditor.DefaultOptionsContainer;
import jetbrains.mps.ide.findusages.view.optionseditor.DefaultSearchOptionsComponent;
import jetbrains.mps.ide.findusages.view.UsagesViewTool;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import java.awt.Frame;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.nodeEditor.cells.APICellAdapter;
import jetbrains.mps.ide.findusages.view.optionseditor.components.ScopeEditor;
import jetbrains.mps.ide.findusages.view.optionseditor.components.FindersEditor;
import jetbrains.mps.ide.findusages.view.optionseditor.components.ViewOptionsEditor;
import jetbrains.mps.ide.findusages.view.optionseditor.FindUsagesOptions;
import jetbrains.mps.ide.findusages.view.optionseditor.FindUsagesDialog;
import jetbrains.mps.ide.findusages.model.IResultProvider;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.ide.findusages.view.optionseditor.options.ViewOptions;
import jetbrains.mps.ide.findusages.view.UsageToolOptions;

/*package*/ class FindUsagesHelper {
  private final Project myIdeaProject;
  private final jetbrains.mps.project.Project myProject;
  private boolean myWithDialog;
  /*package*/ FindUsagesHelper(Project project, boolean withDialog) {
    myIdeaProject = project;
    myProject = ProjectHelper.toMPSProject(project);
    myWithDialog = withDialog;
  }
  protected DefaultOptionsContainer getDefaultOptions() {
    return myIdeaProject.getComponent(DefaultSearchOptionsComponent.class).getDefaultOptions();
  }
  private UsagesViewTool getTool() {
    return myIdeaProject.getComponent(UsagesViewTool.class);
  }
  /*package*/ boolean isApplicable() {
    return getTool() != null && getDefaultOptions() != null;
  }
  /*package*/ void invoke(final EditorCell cell, final SNode node, Frame frame, SModel model) {
    // get node 
    final Wrappers._T<SNode> operationNode = new Wrappers._T<SNode>();
    final Wrappers._T<String> concept = new Wrappers._T<String>();
    final ModelAccess modelAccess = myProject.getModelAccess();

    modelAccess.runReadAction(new Runnable() {
      public void run() {
        operationNode.value = (cell == null ? node : APICellAdapter.getSNodeWRTReference(cell));
        concept.value = operationNode.value.getConcept().getQualifiedName();
      }
    });
    final Wrappers._T<ScopeEditor> scopeEditor = new Wrappers._T<ScopeEditor>();
    final Wrappers._T<FindersEditor> findersEditor = new Wrappers._T<FindersEditor>();
    final Wrappers._T<ViewOptionsEditor> viewOptionsEditor = new Wrappers._T<ViewOptionsEditor>();
    final Wrappers._T<FindUsagesOptions> options = new Wrappers._T<FindUsagesOptions>(getDefaultOptions().getDefaultSearchOptions(concept.value));

    modelAccess.runReadAction(new Runnable() {
      public void run() {
        scopeEditor.value = new ScopeEditor(options.value.getScopeOptions(), myProject.getRepository());
        findersEditor.value = new FindersEditor(options.value.getFindersOptions(), node);
        viewOptionsEditor.value = new ViewOptionsEditor(options.value.getViewOptions());
      }
    });
    options.value = new FindUsagesOptions(findersEditor.value.getOptions(), scopeEditor.value.getOptions(), viewOptionsEditor.value.getOptions());

    if (myWithDialog) {
      FindUsagesDialog dialog = new FindUsagesDialog(options.value, operationNode.value, myIdeaProject);
      dialog.show();
      if (dialog.isCancelled()) {
        return;
      }
      options.value = dialog.getResult();
    }
    // start 
    final Wrappers._T<IResultProvider> provider = new Wrappers._T<IResultProvider>();
    final Wrappers._T<SearchQuery> query = new Wrappers._T<SearchQuery>();
    final Wrappers._T<ViewOptions> viewOptions = new Wrappers._T<ViewOptions>();
    modelAccess.runReadAction(new Runnable() {
      public void run() {
        provider.value = options.value.getFindersOptions().getResult();
        query.value = new SearchQuery(operationNode.value, options.value.getScopeOptions().getScope(myProject));
        viewOptions.value = options.value.getViewOptions();
      }
    });
    UsageToolOptions opt = new UsageToolOptions().allowRunAgain(true).navigateIfSingle(!(viewOptions.value.myShowOneResult)).forceNewTab(viewOptions.value.myNewTab).notFoundMessage("No usages for that node");
    UsagesViewTool.showUsages(myIdeaProject, provider.value, query.value, opt);
  }
}
