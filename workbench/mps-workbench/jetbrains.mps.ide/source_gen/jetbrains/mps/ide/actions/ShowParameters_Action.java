package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import com.intellij.featureStatistics.FeatureUsageTracker;
import java.awt.Point;
import jetbrains.mps.editor.runtime.style.ParametersInformation;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import java.awt.Component;
import jetbrains.mps.ide.tooltips.MPSToolTipManager;
import jetbrains.mps.ide.tooltips.ToolTipData;
import org.jetbrains.mps.openapi.model.SNode;
import javax.swing.JPanel;
import java.awt.GridBagLayout;
import jetbrains.mps.ide.tooltips.ToolTip;
import javax.swing.border.EmptyBorder;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import javax.swing.JTextPane;
import java.awt.GridBagConstraints;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.editor.runtime.style.StyledTextPrinter;
import com.intellij.ui.JBColor;
import java.awt.Color;
import com.intellij.ui.Gray;
import jetbrains.mps.nodeEditor.EditorSettings;

public class ShowParameters_Action extends BaseAction {
  private static final Icon ICON = null;

  public ShowParameters_Action() {
    super("Show Parameters", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (ShowParameters_Action.this.getCellNode(_params) == null) {
      return false;
    }
    return true;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      EditorComponent editorComponent = event.getData(MPSEditorDataKeys.EDITOR_COMPONENT);
      if (editorComponent != null && editorComponent.isInvalid()) {
        editorComponent = null;
      }
      MapSequence.fromMap(_params).put("editor", editorComponent);
      if (editorComponent == null) {
        return false;
      }
    }
    {
      EditorCell p = event.getData(MPSEditorDataKeys.EDITOR_CELL);
      MapSequence.fromMap(_params).put("cell", p);
      if (p == null) {
        return false;
      }
    }
    {
      EditorContext p = event.getData(MPSEditorDataKeys.EDITOR_CONTEXT);
      MapSequence.fromMap(_params).put("editorContext", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("editing.showParameters");
    Point p = new Point(((EditorCell) MapSequence.fromMap(_params).get("cell")).getX() + ((EditorCell) MapSequence.fromMap(_params).get("cell")).getWidth(), ((EditorCell) MapSequence.fromMap(_params).get("cell")).getY() + ((EditorCell) MapSequence.fromMap(_params).get("cell")).getHeight());
    EditorCell currentCell = ((EditorCell) MapSequence.fromMap(_params).get("cell"));
    while (currentCell != null) {
      ParametersInformation parametersInformation = currentCell.getStyle().get(StyleAttributes.PARAMETERS_INFORMATION);
      if (parametersInformation != null) {
        Component component = ShowParameters_Action.this.createComponent(parametersInformation, currentCell.getSNode(), _params);
        MPSToolTipManager.getInstance().showToolTip(new ToolTipData(component), ((EditorComponent) MapSequence.fromMap(_params).get("editor")), p);
        return;
      }
      currentCell = currentCell.getParent();
    }
  }
  /*package*/ SNode getCellNode(final Map<String, Object> _params) {
    return ((EditorCell) MapSequence.fromMap(_params).get("cell")).getSNode();
  }
  private <T> Component createComponent(ParametersInformation<T> parametersInformation, SNode node, final Map<String, Object> _params) {
    // TODO: make IDEA like 
    JPanel panel = new JPanel(new GridBagLayout());
    panel.setBackground(ToolTip.BACKGROUND_COLOR);
    panel.setBorder(new EmptyBorder(0, 4, 0, 4));

    if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2724644c0ac833a5L, "jetbrains.mps.baseLanguage.structure.DefaultClassCreator"))) {
      StyledTextPrinterImpl printer = new StyledTextPrinterImpl();
      printer.append(SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2724644c0ac833a5L, "jetbrains.mps.baseLanguage.structure.DefaultClassCreator")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2724644c0ac833a5L, 0x2724644c0ac833a6L, "classifier")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "()");
      JTextPane textPane = ShowParameters_Action.this.createTextPane(printer, _params);
      GridBagConstraints constraints = ShowParameters_Action.this.createConstraints(_params);
      panel.add(textPane, constraints);
    } else {
      Iterable<T> methods = parametersInformation.getMethods(node, ((EditorContext) MapSequence.fromMap(_params).get("editorContext")));
      int lineNumber = 0;
      for (T method : Sequence.fromIterable(methods)) {
        StyledTextPrinterImpl printer = new StyledTextPrinterImpl();
        parametersInformation.getStyledMethodPresentation(node, ((EditorContext) MapSequence.fromMap(_params).get("editorContext")), method, (StyledTextPrinter) printer);
        ShowParameters_Action.this.createTextPane(printer, _params);

        JTextPane textPane = ShowParameters_Action.this.createTextPane(printer, _params);
        if (Sequence.fromIterable(methods).count() > 1 && parametersInformation.isMethodCurrent(node, ((EditorContext) MapSequence.fromMap(_params).get("editorContext")), method)) {
          textPane.setBackground(new JBColor(new Color(231, 254, 234), Gray._100));
        } else {
          textPane.setBackground(ToolTip.BACKGROUND_COLOR);
        }
        GridBagConstraints constraints = ShowParameters_Action.this.createConstraints(_params);
        constraints.gridy = lineNumber++;
        panel.add(textPane, constraints);
        if (Sequence.fromIterable(methods).last() != method) {
          constraints = new GridBagConstraints();
          constraints.fill = GridBagConstraints.HORIZONTAL;
          constraints.gridy = lineNumber++;
          panel.add(new Line(), constraints);
        }
      }
    }
    return panel;
  }
  private JTextPane createTextPane(StyledTextPrinterImpl printer, final Map<String, Object> _params) {
    JTextPane textPane = new JTextPane(printer.getDocument());
    textPane.setBorder(null);
    textPane.setFont(EditorSettings.getInstance().getDefaultEditorFont());
    textPane.setOpaque(true);
    textPane.setBackground(new JBColor(new Color(231, 254, 234), Gray._100));
    textPane.setBackground(ToolTip.BACKGROUND_COLOR);
    textPane.setForeground(JBColor.foreground());
    return textPane;
  }
  private GridBagConstraints createConstraints(final Map<String, Object> _params) {
    GridBagConstraints constraints = new GridBagConstraints();
    constraints.fill = GridBagConstraints.BOTH;
    constraints.gridy = 0;
    return constraints;
  }
}
