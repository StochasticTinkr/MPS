package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.module.ModelAccess;
import com.intellij.featureStatistics.FeatureUsageTracker;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.awt.event.InputEvent;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.ide.editor.util.CaptionFunction;
import jetbrains.mps.ide.editor.util.renderer.DefaultNodeRenderer;
import jetbrains.mps.ide.editor.util.PopupSettingsBuilder;
import jetbrains.mps.ide.editor.util.GoToHelper;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.smodel.ModelAccessHelper;
import jetbrains.mps.util.Computable;
import jetbrains.mps.ide.MPSCodeInsightBundle;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class GoToConceptDescendants_Action extends BaseAction {
  private static final Icon ICON = null;

  public GoToConceptDescendants_Action() {
    super("Go to Descending Concepts", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node != null && !(SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")))) {
        node = null;
      }
      MapSequence.fromMap(_params).put("conceptDecl", node);
      if (node == null) {
        return false;
      }
    }
    {
      EditorCell p = event.getData(MPSEditorDataKeys.EDITOR_CELL);
      MapSequence.fromMap(_params).put("selectedCell", p);
      if (p == null) {
        return false;
      }
    }
    {
      EditorContext p = event.getData(MPSEditorDataKeys.EDITOR_CONTEXT);
      MapSequence.fromMap(_params).put("editorContext", p);
      if (p == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final ModelAccess modelAccess = ((EditorContext) MapSequence.fromMap(_params).get("editorContext")).getRepository().getModelAccess();
    FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.gotoImplementation");
    final Wrappers._boolean isInterface = new Wrappers._boolean();
    modelAccess.runReadAction(new Runnable() {
      public void run() {
        isInterface.value = SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get("conceptDecl")), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103556dcafL, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration"));
      }
    });

    InputEvent inputEvent = event.getInputEvent();
    SRepository repository = ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository();
    DefaultConceptComparator comparator = new DefaultConceptComparator(repository);
    DefaultConceptNameFilter nameFilter = new DefaultConceptNameFilter(repository);
    CaptionFunction caption = GoToConceptDescendants_Action.this.captionFun(((MPSProject) MapSequence.fromMap(_params).get("project")), ((SNode) MapSequence.fromMap(_params).get("conceptDecl")), _params);
    DefaultNodeRenderer renderer = new DefaultNodeRenderer(repository);
    PopupSettingsBuilder settings = new PopupSettingsBuilder(((MPSProject) MapSequence.fromMap(_params).get("project"))).captionFun(caption).renderer(renderer).queryFromNode(((SNode) MapSequence.fromMap(_params).get("conceptDecl"))).pointFromCellAndEvent(((EditorCell) MapSequence.fromMap(_params).get("selectedCell")), inputEvent).comparator(comparator).nameFilter(nameFilter);
    if (isInterface.value) {
      GoToHelper.showPopupAndSearchNodeInBackground(settings.finders(FindUtils.getFinder("jetbrains.mps.lang.structure.findUsages.ImplementingConcepts_Finder"), FindUtils.getFinder("jetbrains.mps.lang.structure.findUsages.DerivedInterfaceConcepts_Finder")));
    } else {
      GoToHelper.showPopupAndSearchNodeInBackground(settings.finders(FindUtils.getFinder("jetbrains.mps.lang.structure.findUsages.DerivedConcepts_Finder")));
    }
  }
  private CaptionFunction captionFun(final MPSProject mpsProject, final SNode node, final Map<String, Object> _params) {
    return new CaptionFunction() {
      public String caption(final int usagesFound, final boolean finished) {
        return new ModelAccessHelper(mpsProject.getRepository()).runReadAction(new Computable<String>() {
          public String compute() {
            return MPSCodeInsightBundle.message("goto.implementation.chooserTitle", SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), usagesFound, (finished ? "" : " so far"));
          }
        });
      }
    };
  }
}
