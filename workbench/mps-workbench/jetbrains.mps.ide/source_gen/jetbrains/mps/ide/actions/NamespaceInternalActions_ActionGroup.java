package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.actions.GeneratedActionGroup;
import java.util.Set;
import com.intellij.openapi.util.Pair;
import jetbrains.mps.workbench.ActionPlace;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.List;
import javax.swing.tree.TreeNode;
import jetbrains.mps.ide.ui.tree.module.NamespaceTextNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import jetbrains.mps.workbench.action.BaseGroup;
import com.intellij.openapi.actionSystem.ActionManager;
import org.jetbrains.annotations.Nullable;

public class NamespaceInternalActions_ActionGroup extends GeneratedActionGroup {
  public static final String ID = "jetbrains.mps.ide.actions.NamespaceInternalActions_ActionGroup";
  private Set<Pair<ActionPlace, Condition<BaseAction>>> myPlaces = SetSequence.fromSet(new HashSet<Pair<ActionPlace, Condition<BaseAction>>>());
  public NamespaceInternalActions_ActionGroup() {
    super("NamespaceInternalActions", ID);
    this.setIsInternal(false);
    this.setPopup(false);
  }
  public void doUpdate(AnActionEvent event) {
    removeAll();
    List<TreeNode> selectedNodes = event.getData(MPSCommonDataKeys.TREE_NODES);
    if (selectedNodes == null) {
      return;
    }
    for (TreeNode selectedNode : selectedNodes) {
      if (!(selectedNode instanceof NamespaceTextNode)) {
        return;
      }
    }
    if (ListSequence.fromList(selectedNodes).count() == 1) {
      NamespaceTextNode node = (NamespaceTextNode) ListSequence.fromList(selectedNodes).first();
      DefaultActionGroup newGroup = NamespaceInternalActionsUtil.createNewGroup(node);
      if (newGroup != null) {
        NamespaceInternalActions_ActionGroup.this.add(newGroup);
        NamespaceInternalActions_ActionGroup.this.addSeparator();
      }
    }
    NamespaceInternalActions_ActionGroup.this.add(((BaseGroup) ActionManager.getInstance().getAction("jetbrains.mps.ide.actions.NamespaceMakeActions_ActionGroup")));
    if (ListSequence.fromList(selectedNodes).count() == 1) {
      NamespaceInternalActions_ActionGroup.this.addSeparator();
      NamespaceInternalActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.RenameVirtualFolder_Action");
    }
    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {
      this.addPlace(p.first, p.second);
    }
  }
  public void addPlace(ActionPlace place, @Nullable Condition<BaseAction> cond) {
    SetSequence.fromSet(this.myPlaces).addElement(new Pair<ActionPlace, Condition<BaseAction>>(place, cond));
  }
  public boolean isStrict() {
    return false;
  }
}
