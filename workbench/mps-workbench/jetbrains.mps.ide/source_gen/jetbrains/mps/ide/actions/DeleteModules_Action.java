package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.List;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.project.Solution;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.DevKit;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.MPSProject;
import java.awt.Frame;
import jetbrains.mps.workbench.dialogs.DeleteDialog;
import com.intellij.util.ui.UIUtil;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import javax.swing.JOptionPane;
import jetbrains.mps.workbench.actions.module.DeleteModuleHelper;

public class DeleteModules_Action extends BaseAction {
  private static final Icon ICON = null;

  public DeleteModules_Action() {
    super("Delete Module...", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (((Integer) MapSequence.fromMap(_params).get("selSize")) == 0) {
      return false;
    }
    if (((Integer) MapSequence.fromMap(_params).get("selSize")) != ((List<SModule>) MapSequence.fromMap(_params).get("modules")).size()) {
      return false;
    }
    for (SModule module : ListSequence.fromList(((List<SModule>) MapSequence.fromMap(_params).get("modules")))) {
      // Better not allow to delete mixed selection than filter it automatically to confuse user 
      if (!((module instanceof Solution || module instanceof Language || module instanceof DevKit)) || module.isPackaged() || module.isReadOnly()) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    {
      List<SModule> p = event.getData(MPSCommonDataKeys.MODULES);
      MapSequence.fromMap(_params).put("modules", p);
      if (p == null) {
        return false;
      }
    }
    {
      Integer p = event.getData(MPSCommonDataKeys.TREE_SELECTION_SIZE);
      MapSequence.fromMap(_params).put("selSize", p);
      if (p == null) {
        return false;
      }
    }
    {
      Frame p = event.getData(MPSCommonDataKeys.FRAME);
      MapSequence.fromMap(_params).put("frame", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    String message = "<html>Are you sure you want to delete selected modules?<br>This operation is not undoable.</html>";
    final DeleteDialog.DeleteOption filesOption = new DeleteDialog.DeleteOption(UIUtil.replaceMnemonicAmpersand("Delete &Files"), false, true);
    DeleteDialog dialog = new DeleteDialog(((MPSProject) MapSequence.fromMap(_params).get("project")), "Delete Modules", message, filesOption);
    dialog.show();
    if (!(dialog.isOK())) {
      return;
    }

    ModelAccess modelAccess = ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
    if (!(filesOption.selected) && Sequence.fromIterable(((Iterable<SModule>) ((List<SModule>) MapSequence.fromMap(_params).get("modules")))).any(new IWhereFilter<SModule>() {
      public boolean accept(SModule it) {
        return !(((MPSProject) MapSequence.fromMap(_params).get("project")).isProjectModule(it));
      }
    })) {
      JOptionPane.showMessageDialog(((Frame) MapSequence.fromMap(_params).get("frame")), "Non-project modules can only be deleted with files deletion enabled", "Can't delete module", JOptionPane.WARNING_MESSAGE);
      return;
    }

    modelAccess.executeCommandInEDT(new Runnable() {
      public void run() {
        for (SModule module : ListSequence.fromList(((List<SModule>) MapSequence.fromMap(_params).get("modules")))) {
          DeleteModuleHelper.deleteModule(((MPSProject) MapSequence.fromMap(_params).get("project")), module, false, filesOption.selected);
        }
      }
    });
  }
}
