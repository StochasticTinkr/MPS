package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.icons.MPSIcons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.projectPane.ProjectPane;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.projectPane.logicalview.ProjectTreeFindHelper;
import org.jetbrains.annotations.NotNull;

public class ShowInLogicalView_Action extends BaseAction {
  private static final Icon ICON = MPSIcons.ProjectPane.LogicalView;

  public ShowInLogicalView_Action() {
    super("Show Node in Logical View", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    SModule module = (((SNode) MapSequence.fromMap(_params).get("node")).getModel() == null ? null : ((SNode) MapSequence.fromMap(_params).get("node")).getModel().getModule());
    if (module == null) {
      return false;
    }
    ProjectPane pane = ProjectPane.getInstance(((MPSProject) MapSequence.fromMap(_params).get("mpsProject")));
    ProjectTreeFindHelper treeFinder = new ProjectTreeFindHelper(pane.getTree());
    // it's fine if we could navigate to a module. If the module is not part of the project pane, no reason to expect more. 
    // If, however, module is present, it's highly likely node's model would be there as well, and the node, too. 
    // Just don't want to slow down by ensuring there's model and node in the tree. 
    return treeFinder.findMostSuitableModuleTreeNode(module) != null;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("mpsProject", p);
      if (p == null) {
        return false;
      }
    }
    {
      SNode p = event.getData(MPSCommonDataKeys.NODE);
      MapSequence.fromMap(_params).put("node", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    ProjectPane pane = ProjectPane.getInstance(((MPSProject) MapSequence.fromMap(_params).get("mpsProject")));
    SNode nodeToSelect = (pane.showNodeStructure() ? ((SNode) MapSequence.fromMap(_params).get("node")) : ((SNode) MapSequence.fromMap(_params).get("node")).getContainingRoot());
    pane.selectNode(nodeToSelect, true);
  }
}
