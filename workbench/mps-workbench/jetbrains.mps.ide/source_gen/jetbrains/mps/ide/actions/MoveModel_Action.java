package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.extapi.model.TransientSModel;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.language.LanguageAspectSupport;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.EditableSModel;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import org.jetbrains.mps.openapi.model.SModelReference;
import java.util.List;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.ide.refactoring.ChooseModuleDialog;
import jetbrains.mps.ide.platform.actions.core.RefactoringParticipant;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import jetbrains.mps.ide.platform.actions.core.MoveModelRefactoringParticipant;
import jetbrains.mps.ide.platform.actions.core.RefactoringProcessor;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.ide.platform.actions.core.RefactoringSession;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.dialogs.project.creation.NewModelDialog;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.workbench.actions.model.DeleteModelHelper;

public class MoveModel_Action extends BaseAction {
  private static final Icon ICON = null;
  public MoveModel_Action() {
    super("Move Model", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (((Integer) MapSequence.fromMap(_params).get("selSize")) != 1) {
      return false;
    }
    if (((SModel) MapSequence.fromMap(_params).get("model")) instanceof TransientSModel) {
      return false;
    }
    SModule module = ((SModel) MapSequence.fromMap(_params).get("model")).getModule();
    if (module instanceof Language) {
      return !((LanguageAspectSupport.isAspectModel(((SModel) MapSequence.fromMap(_params).get("model")))));
    } else {
      return true;
    }
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SModel p = event.getData(MPSCommonDataKeys.MODEL);
      MapSequence.fromMap(_params).put("model", p);
      if (p == null) {
        return false;
      }
      if (!(p instanceof EditableSModel) || p.isReadOnly()) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("mpsProject", p);
      if (p == null) {
        return false;
      }
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    {
      Integer p = event.getData(MPSCommonDataKeys.TREE_SELECTION_SIZE);
      MapSequence.fromMap(_params).put("selSize", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final SModelReference modelReference = ((SModel) MapSequence.fromMap(_params).get("model")).getReference();

    final List<SModuleReference> modules = ListSequence.fromList(new ArrayList<SModuleReference>());
    ((MPSProject) MapSequence.fromMap(_params).get("mpsProject")).getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        for (SModule module : Sequence.fromIterable(((MPSProject) MapSequence.fromMap(_params).get("mpsProject")).getModulesWithGenerators())) {
          ListSequence.fromList(modules).addElement(module.getModuleReference());
        }
      }
    });
    final SModuleReference selectedModule = ChooseModuleDialog.getSelectedModule(((MPSProject) MapSequence.fromMap(_params).get("mpsProject")), modules);
    if (selectedModule == null) {
      return;
    }

    UpdateDependentModelsRefactoringParticipant participant = new UpdateDependentModelsRefactoringParticipant();
    Iterable<? extends RefactoringParticipant<?, ?, SModel, SModel>> participants = new ExtensionPoint<MoveModelRefactoringParticipant<?, ?>>("jetbrains.mps.ide.platform.MoveModelParticipantEP").getObjects();

    RefactoringProcessor.performRefactoring(((MPSProject) MapSequence.fromMap(_params).get("mpsProject")), "Move Model", participants, ListSequence.fromListAndArray(new ArrayList<SModel>(), ((SModel) MapSequence.fromMap(_params).get("model"))), new _FunctionTypes._return_P2_E0<_FunctionTypes._return_P1_E0<? extends SModel, ? super SModel>, Map<RefactoringParticipant, RefactoringParticipant.ParticipantState<?, ?, SModel, SModel>>, RefactoringSession>() {
      public _FunctionTypes._return_P1_E0<? extends SModel, ? super SModel> invoke(Map<RefactoringParticipant, RefactoringParticipant.ParticipantState<?, ?, SModel, SModel>> changes, RefactoringSession refactoringSession) {

        final Wrappers._T<NewModelDialog> dialog = new Wrappers._T<NewModelDialog>();
        ((MPSProject) MapSequence.fromMap(_params).get("mpsProject")).getRepository().getModelAccess().runReadAction(new Runnable() {
          public void run() {
            dialog.value = new NewModelDialog(((MPSProject) MapSequence.fromMap(_params).get("mpsProject")), (AbstractModule) selectedModule.resolve(((MPSProject) MapSequence.fromMap(_params).get("mpsProject")).getRepository()), ((SModel) MapSequence.fromMap(_params).get("model")));
          }
        });
        dialog.value.show();
        final EditableSModel newModel = dialog.value.getResult();
        if (newModel == null) {
          return null;
        }

        UpdateDependentModelsRefactoringParticipant.updateUsages(newModel, modelReference, newModel.getReference());
        DeleteModelHelper.delete(((SModel) MapSequence.fromMap(_params).get("model")).getModule(), ((SModel) MapSequence.fromMap(_params).get("model")), true);

        _FunctionTypes._return_P1_E0<? extends SModel, ? super SModel> result = new _FunctionTypes._return_P1_E0<EditableSModel, SModel>() {
          public EditableSModel invoke(SModel oldModel) {
            if (oldModel != ((SModel) MapSequence.fromMap(_params).get("model"))) {
              throw new IllegalStateException();
            }
            return newModel;
          }
        };
        return result;
      }
    });
  }
}
