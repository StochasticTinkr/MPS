package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.actions.GeneratedActionGroup;
import java.util.Set;
import com.intellij.openapi.util.Pair;
import jetbrains.mps.workbench.ActionPlace;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.project.Project;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.projectPane.favorites.MPSFavoritesManager;
import jetbrains.mps.ide.projectPane.favorites.FavoritesProjectPane;
import jetbrains.mps.ide.projectPane.favorites.FavoritesUtil;
import jetbrains.mps.util.EqualUtil;
import com.intellij.openapi.extensions.PluginId;
import org.jetbrains.annotations.Nullable;

public class AddToFavoritesGroup_ActionGroup extends GeneratedActionGroup {
  public static final String ID = "jetbrains.mps.ide.actions.AddToFavoritesGroup_ActionGroup";
  private Set<Pair<ActionPlace, Condition<BaseAction>>> myPlaces = SetSequence.fromSet(new HashSet<Pair<ActionPlace, Condition<BaseAction>>>());
  public AddToFavoritesGroup_ActionGroup() {
    super("AddToFavoritesGroup", ID);
    this.setIsInternal(false);
    this.setPopup(false);
  }
  public void doUpdate(AnActionEvent event) {
    removeAll();
    Project project = event.getData(MPSDataKeys.PROJECT);
    if (project == null) {
      return;
    }
    MPSFavoritesManager favoritesManager = project.getComponent(MPSFavoritesManager.class);
    if (favoritesManager == null) {
      return;
    }
    FavoritesProjectPane pane = FavoritesUtil.getCurrentPane(project);
    String currentFavoritesList = null;
    if (pane != null) {
      currentFavoritesList = pane.getSubId();
    }
    for (String name : favoritesManager.getFavoriteNames()) {
      if (pane != null && EqualUtil.equals(name, currentFavoritesList)) {
        continue;
      }
      AddToFavoritesGroup_ActionGroup.this.addParameterizedAction(new AddToFavorites_Action(name), PluginId.getId("jetbrains.mps.ide"), name);
    }
    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {
      this.addPlace(p.first, p.second);
    }
  }
  public void addPlace(ActionPlace place, @Nullable Condition<BaseAction> cond) {
    SetSequence.fromSet(this.myPlaces).addElement(new Pair<ActionPlace, Condition<BaseAction>>(place, cond));
  }
  public boolean isStrict() {
    return false;
  }
}
