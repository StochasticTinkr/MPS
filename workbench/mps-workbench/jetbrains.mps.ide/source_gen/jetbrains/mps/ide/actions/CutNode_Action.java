package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.icons.AllIcons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.MPSProject;
import java.util.ArrayList;
import jetbrains.mps.ide.datatransfer.CopyPasteUtil;
import jetbrains.mps.ide.projectPane.ProjectPane;
import org.jetbrains.mps.openapi.model.SModel;

public class CutNode_Action extends BaseAction {
  private static final Icon ICON = AllIcons.Actions.Menu_cut;
  public CutNode_Action() {
    super("Cut", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    for (SNode node : ListSequence.fromList(((List<SNode>) MapSequence.fromMap(_params).get("nodes")))) {
      if (SNodeOperations.getParent(node) != SNodeOperations.getParent(ListSequence.fromList(((List<SNode>) MapSequence.fromMap(_params).get("nodes"))).first())) {
        return false;
      }
      if (check_vaf00o_a1a0a3(SNodeOperations.getModel(node))) {
        return false;
      }
    }
    return CutNode_Action.this.getProjectPane(_params) != null;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    {
      List<SNode> nodes = event.getData(MPSCommonDataKeys.NODES);
      if (nodes == null) {
        MapSequence.fromMap(_params).put("nodes", null);
      } else {
        MapSequence.fromMap(_params).put("nodes", ListSequence.fromListWithValues(new ArrayList<SNode>(), nodes));
      }
      if (nodes == null) {
        return false;
      }

    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    CopyPasteUtil.copyNodesToClipboard(((List<SNode>) MapSequence.fromMap(_params).get("nodes")));
    for (SNode node : ListSequence.fromList(((List<SNode>) MapSequence.fromMap(_params).get("nodes")))) {
      if (node == ListSequence.fromList(((List<SNode>) MapSequence.fromMap(_params).get("nodes"))).last()) {
        ProjectPane pane = CutNode_Action.this.getProjectPane(_params);
        if (ListSequence.fromList(((List<SNode>) MapSequence.fromMap(_params).get("nodes"))).count() != 1) {
          pane.rebuildTree();
        }
        pane.selectNextNode(node);
      }
      SNodeOperations.deleteNode(node);
    }
  }
  private ProjectPane getProjectPane(final Map<String, Object> _params) {
    return ProjectPane.getInstance(((MPSProject) MapSequence.fromMap(_params).get("project")));
  }
  private static boolean check_vaf00o_a1a0a3(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.isReadOnly();
    }
    return false;
  }
}
