package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.icons.AllIcons;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.ide.projectPane.favorites.FavoritesUtil;
import com.intellij.openapi.project.Project;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.List;
import javax.swing.tree.TreeNode;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import jetbrains.mps.ide.projectPane.favorites.MPSFavoritesManager;
import com.intellij.openapi.ui.Messages;
import com.intellij.openapi.ui.InputValidator;
import jetbrains.mps.ide.projectPane.favorites.FavoritesProjectPane;
import jetbrains.mps.ide.projectPane.favorites.TreeNodeValueExtractor;

public class AddToNewFavoritesList_Action extends BaseAction {
  private static final Icon ICON = AllIcons.General.AddFavoritesList;
  public AddToNewFavoritesList_Action() {
    super("Add to New Favorites List", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    setEnabledState(event.getPresentation(), !(ListSequence.fromList(AddToNewFavoritesList_Action.this.getObjects(_params)).isEmpty()));
    if (FavoritesUtil.isActiveFavorites(((Project) MapSequence.fromMap(_params).get("project")))) {
      event.getPresentation().setText("Send to New Favorites List");
    }
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      List<TreeNode> p = event.getData(MPSCommonDataKeys.TREE_NODES);
      MapSequence.fromMap(_params).put("treeNodes", p);
      if (p == null) {
        return false;
      }
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    MPSFavoritesManager favoritesManager = ((Project) MapSequence.fromMap(_params).get("project")).getComponent(MPSFavoritesManager.class);
    final String name = Messages.showInputDialog(((Project) MapSequence.fromMap(_params).get("project")), "Input new favorites list name", "Add New Favorites List", Messages.getInformationIcon(), "Unnamed", new InputValidator() {
      @Override
      public boolean checkInput(String p0) {
        return (p0 != null && p0.length() > 0);
      }
      @Override
      public boolean canClose(String p0) {
        return true;
      }
    });
    if ((name == null || name.length() == 0)) {
      return;
    }
    favoritesManager.addNewFavoritesList(name);
    FavoritesProjectPane pane = FavoritesUtil.getCurrentPane(((Project) MapSequence.fromMap(_params).get("project")));
    List<Object> toMove = AddToNewFavoritesList_Action.this.getObjects(_params);
    if (pane != null) {
      favoritesManager.removeRoots(pane.getSubId(), toMove);
    }
    favoritesManager.addRoots(name, toMove);
  }
  /*package*/ List<Object> getObjects(final Map<String, Object> _params) {
    return new TreeNodeValueExtractor().getObjects(((List<TreeNode>) MapSequence.fromMap(_params).get("treeNodes")));
  }
}
