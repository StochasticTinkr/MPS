package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.BaseFinder;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import java.util.Set;
import org.jetbrains.mps.openapi.language.SConcept;
import java.util.Collections;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.FindUsagesFacade;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;
import jetbrains.mps.ide.findusages.model.SearchResult;

public class TodoFinder extends BaseFinder {
  public TodoFinder() {
  }
  @Override
  public String getDescription() {
    return "Todo's";
  }
  @Override
  public SearchResults find(SearchQuery query, ProgressMonitor monitor) {
    Set<SConcept> s = Collections.singleton(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3dL, "jetbrains.mps.baseLanguage.structure.TextCommentPart"));
    Set<SNode> textCommentParts = FindUsagesFacade.getInstance().findInstances(query.getScope(), s, false, new EmptyProgressMonitor());
    SearchResults<SNode> results = new SearchResults<SNode>();
    for (SNode node : SNodeOperations.ofConcept(textCommentParts, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3dL, "jetbrains.mps.baseLanguage.structure.TextCommentPart"))) {
      if (((boolean) (Boolean) BHReflection.invoke(node, SMethodTrimmedId.create("isToDo", null, "6hHyb3YSGHZ")))) {
        results.getSearchResults().add(new SearchResult<SNode>(node, "TODO items"));
      }
    }
    return results;
  }
}
