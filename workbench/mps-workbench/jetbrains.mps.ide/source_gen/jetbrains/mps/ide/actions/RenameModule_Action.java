package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.util.ModuleNameUtil;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.refactoring.RenameModuleDialog;

public class RenameModule_Action extends BaseAction {
  private static final Icon ICON = null;

  public RenameModule_Action() {
    super("Rename Module", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    boolean isApplicable = event.getData(MPSCommonDataKeys.MODULE) instanceof AbstractModule && !(event.getData(MPSCommonDataKeys.MODULE).isPackaged()) && !(event.getData(MPSCommonDataKeys.MODULE).isReadOnly());
    event.getPresentation().setText("Rename " + ModuleNameUtil.getModuleType(event.getData(MPSCommonDataKeys.MODULE)));
    event.getPresentation().setEnabledAndVisible(isApplicable);
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SModule p = event.getData(MPSCommonDataKeys.MODULE);
      if (p == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    new RenameModuleDialog(event.getData(MPSCommonDataKeys.MPS_PROJECT), ((AbstractModule) event.getData(MPSCommonDataKeys.MODULE))).show();
  }
}
