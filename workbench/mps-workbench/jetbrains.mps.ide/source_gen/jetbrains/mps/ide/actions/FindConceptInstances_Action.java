package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.icons.AllIcons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.findusages.view.optionseditor.DefaultOptionsContainer;
import jetbrains.mps.ide.findusages.view.optionseditor.DefaultSearchOptionsComponent;
import jetbrains.mps.ide.findusages.view.optionseditor.FindUsagesOptions;
import jetbrains.mps.ide.findusages.view.optionseditor.options.FindersOptions;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;

public class FindConceptInstances_Action extends BaseAction {
  private static final Icon ICON = AllIcons.Actions.Find;

  public FindConceptInstances_Action() {
    super("Find Concept Instances", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
    this.setMnemonic("I".charAt(0));
  }
  @Override
  public boolean isDumbAware() {
    return false;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return new FindUsagesHelper(((MPSProject) MapSequence.fromMap(_params).get("project"))).isApplicable() && (FindConceptInstances_Action.this.getConceptDeclaration(_params) != null);
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      EditorCell p = event.getData(MPSEditorDataKeys.EDITOR_CELL);
      MapSequence.fromMap(_params).put("cell", p);
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      MapSequence.fromMap(_params).put("node", node);
      if (node == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    ((MPSProject) MapSequence.fromMap(_params).get("project")).getModelAccess().runReadAction(new Runnable() {
      public void run() {
        new FindUsagesHelper(((MPSProject) MapSequence.fromMap(_params).get("project"))) {
          @Override
          protected DefaultOptionsContainer getDefaultOptions() {
            final DefaultOptionsContainer container = ((MPSProject) MapSequence.fromMap(_params).get("project")).getComponent(DefaultSearchOptionsComponent.class).getDefaultOptions();

            return new DefaultOptionsContainer() {
              @Override
              public FindUsagesOptions getDefaultSearchOptions(String concept) {
                FindUsagesOptions findUsagesOptions = container.getDefaultSearchOptions(concept);
                findUsagesOptions.setFindersOptions(new FindersOptions(((String) BHReflection.invoke0(SNodeOperations.getNode("r:00000000-0000-4000-0000-011c8959028e(jetbrains.mps.lang.structure.findUsages)", "1197632773078"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116b5695a8dL, "jetbrains.mps.lang.findUsages.structure.FinderDeclaration"), SMethodTrimmedId.create("getGeneratedClassLongName", MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116b5695a8dL, "jetbrains.mps.lang.findUsages.structure.FinderDeclaration"), "hEwIc4S")))));
                return findUsagesOptions;
              }
            };
          }
        }.prepareOptions(((EditorCell) MapSequence.fromMap(_params).get("cell")), FindConceptInstances_Action.this.getConceptDeclaration(_params)).invoke();
      }
    });
  }
  private SNode getConceptDeclaration(final Map<String, Object> _params) {
    SNode result = FindConceptInstances_Action.this.getConceptDeclaration(((SNode) MapSequence.fromMap(_params).get("node")), _params);
    if (result != null) {
      return result;
    }
    if ((SNodeOperations.getParent(((SNode) MapSequence.fromMap(_params).get("node"))) == null)) {
      return null;
    }
    return FindConceptInstances_Action.this.getConceptDeclaration(SNodeOperations.getContainingRoot(((SNode) MapSequence.fromMap(_params).get("node"))), _params);
  }
  private SNode getConceptDeclaration(SNode node, final Map<String, Object> _params) {
    {
      final SNode acd = node;
      if (SNodeOperations.isInstanceOf(acd, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))) {
        return acd;
      }
    }
    {
      final SNode conceptAspect = node;
      if (SNodeOperations.isInstanceOf(conceptAspect, MetaAdapterFactory.getInterfaceConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x24614259e94f0c84L, "jetbrains.mps.lang.structure.structure.IConceptAspect"))) {
        return ((SNode) BHReflection.invoke0(conceptAspect, MetaAdapterFactory.getInterfaceConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x24614259e94f0c84L, "jetbrains.mps.lang.structure.structure.IConceptAspect"), SMethodTrimmedId.create("getBaseConcept", null, "2hxg_BDjKM8")));
      }
    }

    return null;
  }
}
