package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.plugins.actions.GeneratedActionGroup;
import jetbrains.mps.plugins.actions.LabelledAnchor;
import com.intellij.openapi.actionSystem.ex.ActionManagerEx;
import com.intellij.openapi.extensions.PluginId;

public class ModelActions_ActionGroup extends GeneratedActionGroup {
  public static final String ID = "jetbrains.mps.ide.actions.ModelActions_ActionGroup";
  public static final String LABEL_ID_newActions = ID + "newActions";
  public static final String LABEL_ID_make = ID + "make";
  public static final String LABEL_ID_paste = ID + "paste";
  public static final String LABEL_ID_check = ID + "check";
  public static final String LABEL_ID_modelUsages = ID + "modelUsages";
  public static final String LABEL_ID_refactoring = ID + "refactoring";
  public static final String LABEL_ID_mpsvcs = ID + "mpsvcs";
  public static final String LABEL_ID_idealocalhistory = ID + "idealocalhistory";
  public static final String LABEL_ID_ideavcs = ID + "ideavcs";
  public static final String LABEL_ID_scripts = ID + "scripts";
  public static final String LABEL_ID_run = ID + "run";
  public static final String LABEL_ID_favorites = ID + "favorites";
  public static final String LABEL_ID_showHelp = ID + "showHelp";
  public ModelActions_ActionGroup() {
    super("ModelActions", ID);
    this.setIsInternal(false);
    this.setPopup(false);
    {
      LabelledAnchor action = new LabelledAnchor(ModelActions_ActionGroup.LABEL_ID_newActions);
      ActionManagerEx manager = ActionManagerEx.getInstanceEx();
      manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
      ModelActions_ActionGroup.this.addAction(action);
    }
    ModelActions_ActionGroup.this.addSeparator();
    {
      LabelledAnchor action = new LabelledAnchor(ModelActions_ActionGroup.LABEL_ID_make);
      ActionManagerEx manager = ActionManagerEx.getInstanceEx();
      manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
      ModelActions_ActionGroup.this.addAction(action);
    }
    ModelActions_ActionGroup.this.addSeparator();
    ModelActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.PasteNode_Action");
    {
      LabelledAnchor action = new LabelledAnchor(ModelActions_ActionGroup.LABEL_ID_paste);
      ActionManagerEx manager = ActionManagerEx.getInstanceEx();
      manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
      ModelActions_ActionGroup.this.addAction(action);
    }
    ModelActions_ActionGroup.this.addSeparator();
    ModelActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.DeleteModels_Action");
    ModelActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.CloneModel_Action");
    ModelActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.CopyModelName_Action");
    ModelActions_ActionGroup.this.addSeparator();
    ModelActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.OptimizeModelImports_Action");
    ModelActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.FixModuleImports_Action");
    ModelActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.ConvertToFilePerRootPersistence_Action");
    ModelActions_ActionGroup.this.addSeparator();
    ModelActions_ActionGroup.this.addAction("jetbrains.mps.ide.platform.actions.AnalyzeDependencies_Action");
    ModelActions_ActionGroup.this.addSeparator();
    {
      LabelledAnchor action = new LabelledAnchor(ModelActions_ActionGroup.LABEL_ID_check);
      ActionManagerEx manager = ActionManagerEx.getInstanceEx();
      manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
      ModelActions_ActionGroup.this.addAction(action);
    }
    {
      LabelledAnchor action = new LabelledAnchor(ModelActions_ActionGroup.LABEL_ID_modelUsages);
      ActionManagerEx manager = ActionManagerEx.getInstanceEx();
      manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
      ModelActions_ActionGroup.this.addAction(action);
    }
    {
      LabelledAnchor action = new LabelledAnchor(ModelActions_ActionGroup.LABEL_ID_refactoring);
      ActionManagerEx manager = ActionManagerEx.getInstanceEx();
      manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
      ModelActions_ActionGroup.this.addAction(action);
    }
    ModelActions_ActionGroup.this.addSeparator();
    ModelActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.RevertMemoryChanges_Action");
    {
      LabelledAnchor action = new LabelledAnchor(ModelActions_ActionGroup.LABEL_ID_mpsvcs);
      ActionManagerEx manager = ActionManagerEx.getInstanceEx();
      manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
      ModelActions_ActionGroup.this.addAction(action);
    }
    {
      LabelledAnchor action = new LabelledAnchor(ModelActions_ActionGroup.LABEL_ID_idealocalhistory);
      ActionManagerEx manager = ActionManagerEx.getInstanceEx();
      manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
      ModelActions_ActionGroup.this.addAction(action);
    }
    {
      LabelledAnchor action = new LabelledAnchor(ModelActions_ActionGroup.LABEL_ID_ideavcs);
      ActionManagerEx manager = ActionManagerEx.getInstanceEx();
      manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
      ModelActions_ActionGroup.this.addAction(action);
    }
    ModelActions_ActionGroup.this.addSeparator();
    {
      LabelledAnchor action = new LabelledAnchor(ModelActions_ActionGroup.LABEL_ID_scripts);
      ActionManagerEx manager = ActionManagerEx.getInstanceEx();
      manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
      ModelActions_ActionGroup.this.addAction(action);
    }
    ModelActions_ActionGroup.this.addSeparator();
    {
      LabelledAnchor action = new LabelledAnchor(ModelActions_ActionGroup.LABEL_ID_run);
      ActionManagerEx manager = ActionManagerEx.getInstanceEx();
      manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
      ModelActions_ActionGroup.this.addAction(action);
    }
    ModelActions_ActionGroup.this.addSeparator();
    {
      LabelledAnchor action = new LabelledAnchor(ModelActions_ActionGroup.LABEL_ID_favorites);
      ActionManagerEx manager = ActionManagerEx.getInstanceEx();
      manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
      ModelActions_ActionGroup.this.addAction(action);
    }
    {
      LabelledAnchor action = new LabelledAnchor(ModelActions_ActionGroup.LABEL_ID_showHelp);
      ActionManagerEx manager = ActionManagerEx.getInstanceEx();
      manager.registerAction(action.getId(), action, PluginId.getId("jetbrains.mps.ide"));
      ModelActions_ActionGroup.this.addAction(action);
    }
    ModelActions_ActionGroup.this.addSeparator();
    ModelActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.ShowReflectiveEditorByDefault_Action");
    ModelActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.ShowRegularEditorByDefault_Action");
    ModelActions_ActionGroup.this.addAction("jetbrains.mps.ide.actions.ModelProperties_Action");
    ModelActions_ActionGroup.this.addSeparator();
  }
}
