package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.icons.MPSIcons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import javax.swing.tree.TreeNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.ide.ui.tree.smodel.SModelTreeNode;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SModelName;
import jetbrains.mps.smodel.SModelStereotype;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.project.SModuleOperations;
import org.apache.log4j.Level;
import jetbrains.mps.smodel.SModelInternal;
import org.jetbrains.mps.openapi.language.SLanguage;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.ide.projectPane.ProjectPane;
import java.util.List;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.ide.ui.tree.SortUtil;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class NewSubTestModel_Action extends BaseAction {
  private static final Icon ICON = MPSIcons.Nodes.TestModel;
  public NewSubTestModel_Action() {
    super("Test Model", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (!(((TreeNode) MapSequence.fromMap(_params).get("treeNode")) instanceof SModelTreeNode)) {
      return false;
    }
    return !(((SModel) MapSequence.fromMap(_params).get("model")).getName().hasStereotype()) && ((SModel) MapSequence.fromMap(_params).get("model")).getModelRoot().canCreateModel(new SModelName(((SModel) MapSequence.fromMap(_params).get("model")).getName().getLongName(), SModelStereotype.TESTS).getValue());
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      MapSequence.fromMap(_params).put("ideaProject", p);
      if (p == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    {
      SModel p = event.getData(MPSCommonDataKeys.CONTEXT_MODEL);
      MapSequence.fromMap(_params).put("model", p);
      if (p == null) {
        return false;
      }
    }
    {
      TreeNode p = event.getData(MPSCommonDataKeys.TREE_NODE);
      MapSequence.fromMap(_params).put("treeNode", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final Wrappers._T<SModel> createdModel = new Wrappers._T<SModel>(null);
    ((MPSProject) MapSequence.fromMap(_params).get("project")).getModelAccess().executeCommand(new Runnable() {
      public void run() {
        SModelName testModelName = new SModelName(NewSubTestModel_Action.this.getTestModelName(_params), SModelStereotype.TESTS);
        createdModel.value = SModuleOperations.createModelWithAdjustments(testModelName.getValue(), ((SModel) MapSequence.fromMap(_params).get("model")).getModelRoot());
        if (createdModel.value == null) {
          if (LOG.isEnabledFor(Level.WARN)) {
            LOG.warn("Can't create submodel " + testModelName + " for model " + ((SModel) MapSequence.fromMap(_params).get("model")).getName());
          }
          return;
        }
        ((SModelInternal) createdModel.value).addModelImport(((SModel) MapSequence.fromMap(_params).get("model")).getReference(), false);
        for (jetbrains.mps.smodel.SModel.ImportElement importElement : ((SModelInternal) ((SModel) MapSequence.fromMap(_params).get("model"))).importedModels()) {
          ((SModelInternal) createdModel.value).addModelImport(((SModel) MapSequence.fromMap(_params).get("model")).getReference(), false);
        }
        for (SLanguage importedLanguage : ((SModelInternal) ((SModel) MapSequence.fromMap(_params).get("model"))).importedLanguageIds()) {
          ((SModelInternal) createdModel.value).addLanguage(importedLanguage);
        }
        for (SModuleReference devKit : ((SModelInternal) ((SModel) MapSequence.fromMap(_params).get("model"))).importedDevkits()) {
          ((SModelInternal) createdModel.value).addDevKit(devKit);
        }
        ProjectPane.getInstance(((Project) MapSequence.fromMap(_params).get("ideaProject"))).selectModel(createdModel.value, false);
      }
    });
  }
  /*package*/ String getTestModelName(final Map<String, Object> _params) {
    StringBuilder builder = new StringBuilder();
    String modelBaseName = ((SModel) MapSequence.fromMap(_params).get("model")).getName().getLongName();
    builder.append(modelBaseName);
    int testModelCount = 0;
    List<SModel> models = IterableUtil.asList(((SModel) MapSequence.fromMap(_params).get("model")).getModule().getModels());
    List<SModel> sortedModels = SortUtil.sortModels(models);
    for (SModel md : sortedModels) {
      if (!(SModelStereotype.isTestModel(md))) {
        continue;
      }
      String name = (testModelCount == 0 ? modelBaseName : modelBaseName + testModelCount);
      if (name.equals(md.getName().getLongName())) {
        testModelCount++;
      }
    }
    if (testModelCount != 0) {
      builder.append(testModelCount);
    }
    return builder.toString();
  }
  protected static Logger LOG = LogManager.getLogger(NewSubTestModel_Action.class);
}
