package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import java.util.List;
import jetbrains.mps.messages.IMessage;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.messages.MessageKind;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import java.awt.Frame;
import jetbrains.mps.ide.blame.dialog.BlameDialog;
import jetbrains.mps.ide.blame.dialog.BlameDialogComponent;
import java.util.Collection;
import java.util.function.Function;
import java.util.stream.Collectors;
import jetbrains.mps.ide.blame.perform.Response;
import com.intellij.openapi.ui.Messages;
import org.apache.log4j.Level;

public class SubmitToTracker_Action extends BaseAction {
  private static final Logger LOG = LogManager.getLogger(SubmitToTracker_Action.class);
  private static final Icon ICON = null;

  public SubmitToTracker_Action() {
    super("Submit to Issue Tracker", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    List<IMessage> messages = ((List<IMessage>) MapSequence.fromMap(_params).get("messages"));
    return ListSequence.fromList(messages).any(new IWhereFilter<IMessage>() {
      public boolean accept(IMessage it) {
        return it.getKind() == MessageKind.ERROR;
      }
    });
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    {
      Frame p = event.getData(MPSCommonDataKeys.FRAME);
      MapSequence.fromMap(_params).put("frame", p);
      if (p == null) {
        return false;
      }
    }
    {
      List<IMessage> p = event.getData(MPSCommonDataKeys.MESSAGES);
      MapSequence.fromMap(_params).put("messages", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    BlameDialog dialog = BlameDialogComponent.getInstance().createDialog(((Project) MapSequence.fromMap(_params).get("project")), ((Frame) MapSequence.fromMap(_params).get("frame")));
    StringBuilder description = new StringBuilder();
    boolean first = true;
    for (IMessage msg : ((List<IMessage>) MapSequence.fromMap(_params).get("messages"))) {
      if (first) {
        dialog.setIssueTitle(msg.getText());
        first = false;
      } else {
        description.append(msg.getText()).append('\n');
      }
    }
    dialog.addExceptions((Collection<Throwable>) ((List<IMessage>) MapSequence.fromMap(_params).get("messages")).stream().map(new Function<IMessage, Throwable>() {
      public Throwable apply(IMessage message) {
        return message.getException();
      }
    }).collect(Collectors.toList()));
    dialog.setDescription(description.toString());
    dialog.initDialog();
    dialog.show();


    if (!(dialog.isCancelled())) {
      Response response = dialog.getResult();
      String message = response.getMessage();
      if (!(response.isSuccess())) {
        // It is only make sense to show dialog to user if issue creation failed. 
        Messages.showErrorDialog(((Project) MapSequence.fromMap(_params).get("project")), message, "Issue Submission Failed");
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error("Issue submission failed: " + message, response.getThrowable());
        }
      }
    }
  }
}
