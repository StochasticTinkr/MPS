package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.MPSProject;
import java.util.List;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.extapi.persistence.CloneableModelRoot;
import jetbrains.mps.extapi.persistence.CloneCapabilities;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.project.StandaloneMPSProject;
import jetbrains.mps.ide.newModuleDialogs.AbstractModuleCreationDialog;
import jetbrains.mps.ide.newModuleDialogs.CloneModuleDialog;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.ide.projectPane.ProjectPane;

public class CloneModule_Action extends BaseAction {
  private static final Icon ICON = null;

  public CloneModule_Action() {
    super("Clone Module", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return event.getData(MPSCommonDataKeys.TREE_SELECTION_SIZE) == 1;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SModule p = event.getData(MPSCommonDataKeys.MODULE);
      if (p == null) {
        return false;
      }
    }
    {
      Integer p = event.getData(MPSCommonDataKeys.TREE_SELECTION_SIZE);
      if (p == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    List<Tuples._2<ModelRoot, String>> nonCloneable = ListSequence.fromList(new ArrayList<Tuples._2<ModelRoot, String>>());

    Iterable<ModelRoot> roots = event.getData(MPSCommonDataKeys.MODULE).getModelRoots();

    for (ModelRoot root : Sequence.fromIterable(roots)) {
      if (root instanceof CloneableModelRoot) {
        CloneCapabilities capabilities = ((CloneableModelRoot) root).getCloneCapabilities();

        if (!(capabilities.isCloneable())) {
          ListSequence.fromList(nonCloneable).addElement(MultiTuple.<ModelRoot,String>from(root, capabilities.getErrorMessage()));
        }
      } else {
        ListSequence.fromList(nonCloneable).addElement(MultiTuple.<ModelRoot,String>from(root, "Clonning hasn't implemented for this model root"));
      }
    }

    if (ListSequence.fromList(nonCloneable).isNotEmpty()) {
      Messages.showErrorDialog(CloneModule_Action.this.getErrorMessage(nonCloneable, event), "Module can't be cloned");
      return;
    }

    String virtualFolder = as_i0xx9i_a0a0i0h(event.getData(MPSCommonDataKeys.MPS_PROJECT), StandaloneMPSProject.class).getFolderFor(event.getData(MPSCommonDataKeys.MODULE));

    AbstractModuleCreationDialog dialog = new CloneModuleDialog(event.getData(MPSCommonDataKeys.MPS_PROJECT), virtualFolder, as_i0xx9i_a2a0a01a7(event.getData(MPSCommonDataKeys.MODULE), AbstractModule.class));
    dialog.show();

    SModule result = dialog.getModule();
    if (result == null) {
      return;
    }

    // TODO: Sync ProjectPane.rebuildTree() with NewLanguage, NewSolution actions 
    ProjectPane projectPane = ProjectPane.getInstance(event.getData(MPSCommonDataKeys.MPS_PROJECT));
    projectPane.selectModule(result, false);
  }
  private String getErrorMessage(Iterable<Tuples._2<ModelRoot, String>> roots, final AnActionEvent event) {
    StringBuilder sb = new StringBuilder();
    sb.append("<html><body>");
    sb.append("Can't clone module with non-cloneable model roots: \n");
    sb.append("<ul>");
    for (Tuples._2<ModelRoot, String> root : Sequence.fromIterable(roots)) {
      sb.append("<li>");
      sb.append(root._0());
      sb.append(" - ");
      sb.append(root._1());
      sb.append("\n");
    }
    sb.append("</ul>");
    sb.append("</body></html>");
    return sb.toString();
  }
  private static <T> T as_i0xx9i_a0a0i0h(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_i0xx9i_a2a0a01a7(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
