package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.annotations.NotNull;
import com.intellij.featureStatistics.FeatureUsageTracker;
import org.jetbrains.mps.util.Condition;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.workbench.choose.models.BaseModelModel;
import jetbrains.mps.scope.ConditionalScope;
import jetbrains.mps.FilteredGlobalScope;
import com.intellij.ide.util.gotoByName.ChooseByNamePopup;
import jetbrains.mps.workbench.goTo.ui.MpsPopupFactory;
import com.intellij.ide.util.gotoByName.ChooseByNamePopupComponent;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.openapi.navigation.ProjectPaneNavigator;
import com.intellij.openapi.application.ModalityState;

public class GoToModel_Action extends BaseAction {
  private static final Icon ICON = null;

  public GoToModel_Action() {
    super("Go to Model", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.goto.model");
    // PsiDocumentManager.getInstance(project).commitAllDocuments(); 
    final MPSProject mpsProject = ((MPSProject) MapSequence.fromMap(_params).get("project"));
    Condition<SModel> filter = new Condition<SModel>() {
      public boolean met(SModel m) {
        return SModelStereotype.isUserModel(m) || SModelStereotype.isStubModel(m);
      }
    };
    final BaseModelModel goToModelModel = new BaseModelModel(mpsProject, new ConditionalScope(mpsProject.getScope(), null, filter), new ConditionalScope(new FilteredGlobalScope(), null, filter));
    ChooseByNamePopup popup = MpsPopupFactory.createPackagePopup(mpsProject.getProject(), goToModelModel, GoToModel_Action.this);
    popup.setShowListForEmptyPattern(true);

    popup.invoke(new ChooseByNamePopupComponent.Callback() {
      public void elementChosen(Object p0) {
        SModelReference modelRef = goToModelModel.getModelObject(p0);
        if (modelRef != null) {
          new ProjectPaneNavigator(mpsProject).shallFocus(true).select(modelRef);
        }
      }
    }, ModalityState.current(), false);
  }
}
