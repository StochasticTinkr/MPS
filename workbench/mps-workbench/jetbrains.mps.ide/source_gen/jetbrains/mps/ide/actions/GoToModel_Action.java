package jetbrains.mps.ide.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.MPSProject;
import com.intellij.featureStatistics.FeatureUsageTracker;
import jetbrains.mps.workbench.choose.models.BaseModelModel;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.module.SearchScope;
import org.jetbrains.mps.util.Condition;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.util.ConditionalIterable;
import java.util.List;
import java.util.ArrayList;
import com.intellij.ide.util.gotoByName.ChooseByNamePopup;
import jetbrains.mps.workbench.goTo.ui.MpsPopupFactory;
import com.intellij.ide.util.gotoByName.ChooseByNamePopupComponent;
import jetbrains.mps.ide.projectPane.ProjectPane;
import com.intellij.openapi.application.ModalityState;

public class GoToModel_Action extends BaseAction {
  private static final Icon ICON = null;
  public GoToModel_Action() {
    super("Go to Model", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final MPSProject mpsProject = event.getData(MPSCommonDataKeys.MPS_PROJECT);
    assert mpsProject != null;
    FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.goto.model");
    // PsiDocumentManager.getInstance(project).commitAllDocuments(); 
    final BaseModelModel goToModelModel = new BaseModelModel(mpsProject) {
      @Override
      public SModelReference[] find(SearchScope scope) {
        Condition<SModel> cond = new Condition<SModel>() {
          @Override
          public boolean met(SModel model) {
            boolean rightStereotype = SModelStereotype.isUserModel(model) || SModelStereotype.isStubModel(model);
            boolean hasModule = model.getModule() != null;
            return rightStereotype && hasModule;
          }
        };
        ConditionalIterable<SModel> iter = new ConditionalIterable<SModel>(scope.getModels(), cond);
        List<SModelReference> result = new ArrayList<SModelReference>();
        for (SModel md : iter) {
          result.add(md.getReference());
        }
        return result.toArray(new SModelReference[result.size()]);
      }
    };
    ChooseByNamePopup popup = MpsPopupFactory.createPackagePopup(mpsProject.getProject(), goToModelModel, GoToModel_Action.this);
    popup.setShowListForEmptyPattern(true);

    popup.invoke(new ChooseByNamePopupComponent.Callback() {
      private SModelReference myModelRef;
      public void elementChosen(Object p0) {
        myModelRef = goToModelModel.getModelObject(p0);
      }

      @Override
      public void onClose() {
        if (myModelRef != null) {
          ProjectPane projectPane = ProjectPane.getInstance(mpsProject);
          // XXX we are surely in EDT but where from do we get model read? Is it command of the action? In callback, really? 
          SModel md = myModelRef.resolve(mpsProject.getRepository());
          projectPane.selectModel(md, true);

        }
      }
    }, ModalityState.current(), false);
  }
}
