package jetbrains.mps.baseLanguage.lightweightdsl.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.checking.BaseEventProcessingEditorChecker;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.nodeEditor.checking.UpdateResult;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.util.Cancellable;
import java.util.Set;
import jetbrains.mps.nodeEditor.EditorMessage;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class DSLComponentChecker extends BaseEventProcessingEditorChecker {

  @NotNull
  @Override
  public UpdateResult update(EditorComponent editorComponent, boolean b, boolean b1, Cancellable cancellable) {
    final Set<EditorMessage> messages = SetSequence.fromSet(new HashSet<EditorMessage>());
    ListSequence.fromList(SNodeOperations.getNodeDescendants(((SNode) editorComponent.getEditedNode()), MetaAdapterFactory.getInterfaceConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x59e9926e840d9179L, "jetbrains.mps.baseLanguage.lightweightdsl.structure.MemberInstance"), false, new SAbstractConcept[]{})).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        messages.add(new DSLComponentMessage(it, DSLComponentChecker.this, "Go to declaration"));
      }
    });
    return new UpdateResult.Completed(true, messages);
  }
}
