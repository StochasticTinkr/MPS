package jetbrains.mps.lang.typesystem.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.icons.MPSIcons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.typesystem.inference.ITypechecking;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.newTypesystem.TypesUtil;
import jetbrains.mps.errors.NullErrorReporter;
import com.intellij.openapi.wm.ToolWindowManager;
import com.intellij.openapi.ui.MessageType;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import jetbrains.mps.typesystem.uiActions.MyBaseNodeDialog;
import jetbrains.mps.typesystem.inference.TypeContextManager;

public class ShowNodeType_Action extends BaseAction {
  private static final Icon ICON = MPSIcons.Nodes.Type;
  public ShowNodeType_Action() {
    super("Show Type", "Show node's HELGINS type", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      MapSequence.fromMap(_params).put("node", node);
      if (node == null) {
        return false;
      }
    }
    {
      EditorComponent editorComponent = event.getData(MPSEditorDataKeys.EDITOR_COMPONENT);
      if (editorComponent != null && editorComponent.isInvalid()) {
        editorComponent = null;
      }
      MapSequence.fromMap(_params).put("editorComponent", editorComponent);
      if (editorComponent == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final Wrappers._T<IErrorReporter> error = new Wrappers._T<IErrorReporter>();
    final Wrappers._T<SNode> type = new Wrappers._T<SNode>();

    ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess().runWriteAction(new Runnable() {
      public void run() {
        ShowNodeType_Action.this.runTypecheckingAction(new ITypechecking.Action() {
          public void run(TypeCheckingContext typeCheckingContext) {
            if (!(typeCheckingContext.isCheckedRoot(false))) {
              typeCheckingContext.checkIfNotChecked(((SNode) MapSequence.fromMap(_params).get("node")), false);
            }
            type.value = typeCheckingContext.getTypeDontCheck(((SNode) MapSequence.fromMap(_params).get("node")));
            error.value = typeCheckingContext.getTypeMessageDontCheck(((SNode) MapSequence.fromMap(_params).get("node")));

            if (error.value == null && TypesUtil.hasVariablesInside(type.value)) {
              error.value = new NullErrorReporter() {
                @Override
                public String reportError() {
                  return "Type was not fully instantiated";
                }
              };
            }
          }
        }, _params);
      }
    });

    if (type.value == null) {
      ToolWindowManager manager = ToolWindowManager.getInstance(((MPSProject) MapSequence.fromMap(_params).get("project")).getProject());
      manager.notifyByBalloon("Messages", MessageType.INFO, "Selected node has no type");
      return;
    }

    final Wrappers._T<SModel> tmpModel = new Wrappers._T<SModel>();

    try {
      final Wrappers._T<String> dialogTitle = new Wrappers._T<String>();

      ModelAccess.instance().runUndoTransparentCommand(new Runnable() {
        public void run() {
          tmpModel.value = TemporaryModels.getInstance().create(true, TempModuleOptions.forDefaultModule());
          tmpModel.value.addRootNode(type.value);
          TemporaryModels.getInstance().addMissingImports(tmpModel.value);
          dialogTitle.value = String.format("Type Explorer [%s]", ((SNode) MapSequence.fromMap(_params).get("node")));
        }
      });

      new MyBaseNodeDialog(((MPSProject) MapSequence.fromMap(_params).get("project")), dialogTitle.value, type.value, error.value).show();

    } finally {
      ModelAccess.instance().runUndoTransparentCommand(new Runnable() {
        public void run() {
          tmpModel.value.removeRootNode(type.value);
          TemporaryModels.getInstance().dispose(tmpModel.value);
        }
      });
    }
  }
  private void runTypecheckingAction(ITypechecking.Action action, final Map<String, Object> _params) {
    TypeContextManager.getInstance().runTypeCheckingAction(((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")), ((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")).getNodeForTypechecking(), action);
  }
}
