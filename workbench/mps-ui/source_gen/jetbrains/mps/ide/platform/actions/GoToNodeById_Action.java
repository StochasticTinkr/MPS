package jetbrains.mps.ide.platform.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.awt.Frame;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.annotations.NotNull;
import javax.swing.JOptionPane;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.persistence.def.v9.IdEncoder;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.navigation.EditorNavigator;

public class GoToNodeById_Action extends BaseAction {
  private static final Icon ICON = null;

  public GoToNodeById_Action() {
    super("Go to Node by ID", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("mpsProject", p);
      if (p == null) {
        return false;
      }
    }
    {
      Frame p = event.getData(MPSCommonDataKeys.FRAME);
      MapSequence.fromMap(_params).put("frame", p);
      if (p == null) {
        return false;
      }
    }
    {
      SModel p = event.getData(MPSCommonDataKeys.CONTEXT_MODEL);
      MapSequence.fromMap(_params).put("contextModel", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    String value = JOptionPane.showInputDialog(((Frame) MapSequence.fromMap(_params).get("frame")), "Enter node ID:", "Find node in model " + ((SModel) MapSequence.fromMap(_params).get("contextModel")).getName().getLongName(), JOptionPane.QUESTION_MESSAGE);
    if (value == null) {
      return;
    }
    final String trimmedValue = ((value == null ? null : value.trim()));
    final Wrappers._T<SNodeId> id = new Wrappers._T<SNodeId>();
    try {
      id.value = PersistenceFacade.getInstance().createNodeId(trimmedValue);
    } catch (IllegalArgumentException ex) {
      // fine, value is not of default or any recognizable node id format 
      id.value = null;
    }
    if (id.value == null) {
      // try new nodeId presentation format 
      try {
        id.value = new IdEncoder().parseNodeId(trimmedValue);
      } catch (IdEncoder.EncodingException e) {
      }
    }
    if (id.value == null) {
      JOptionPane.showMessageDialog(((Frame) MapSequence.fromMap(_params).get("frame")), "Wrong node ID format " + trimmedValue);
      return;
    }

    ((MPSProject) MapSequence.fromMap(_params).get("mpsProject")).getModelAccess().runReadAction(new Runnable() {
      public void run() {
        SNode node = ((SModel) MapSequence.fromMap(_params).get("contextModel")).getNode(id.value);
        if (node == null) {
          JOptionPane.showMessageDialog(((Frame) MapSequence.fromMap(_params).get("frame")), "Can't find node with id " + trimmedValue);
          return;
        }
        new EditorNavigator(((MPSProject) MapSequence.fromMap(_params).get("mpsProject"))).shallFocus(true).shallSelect(true).open(node.getReference());
      }
    });
  }
}
