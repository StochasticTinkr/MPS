package jetbrains.mps.ide.platform.dependencyViewer;

/*Generated by MPS */

import java.util.Collection;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.util.LinkedHashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.model.SNodeReference;

public class DependencyViewerScope {
  private final Collection<SModule> myModules;
  private final Collection<SModel> myModels;
  private final Collection<SNode> myRoots;
  private final SRepository myRepo;

  public DependencyViewerScope(SRepository contextRepo) {
    myModules = CollectionSequence.fromCollection(new LinkedHashSet<SModule>());
    myModels = CollectionSequence.fromCollection(new LinkedHashSet<SModel>());
    myRoots = CollectionSequence.fromCollection(new LinkedHashSet<SNode>());
    myRepo = contextRepo;
  }
  private int getNumRoots(SModel model) {
    return Sequence.fromIterable(((Iterable<SNode>) model.getRootNodes())).count();
  }
  public boolean contains(SNode node) {
    if (node == null) {
      return false;
    }
    SNode root = node.getContainingRoot();
    if (CollectionSequence.fromCollection(myRoots).contains(root) || CollectionSequence.fromCollection(myRoots).contains(node)) {
      return true;
    }
    SModel descriptor = ((SNode) root).getModel();
    if (CollectionSequence.fromCollection(myModels).contains(descriptor)) {
      return true;
    }
    if (CollectionSequence.fromCollection(myModules).contains(descriptor.getModule())) {
      return true;
    }
    return false;
  }
  public boolean contains(SModel model) {
    if (model == null) {
      return false;
    }
    if (CollectionSequence.fromCollection(myModels).contains(model)) {
      return true;
    }
    return CollectionSequence.fromCollection(myModules).contains(model.getModule());
  }

  public void add(SModuleReference moduleRef) {
    if (moduleRef == null) {
      return;
    }
    add(moduleRef.resolve(myRepo));
  }

  public void add(@Nullable SModule module) {
    if (module == null) {
      return;
    }
    CollectionSequence.fromCollection(myModules).addElement(module);
  }

  public void add(SModelReference modelRef) {
    if (modelRef == null) {
      return;
    }
    add(modelRef.resolve(myRepo));
  }

  public void add(@Nullable SModel model) {
    if (model == null) {
      return;
    }
    if (!(contains(model))) {
      CollectionSequence.fromCollection(myModels).addElement(model);
    }
  }

  public void add(SNodeReference nodeRef) {
    if (nodeRef == null) {
      return;
    }
    add(nodeRef.resolve(myRepo));
  }

  public void add(@Nullable SNode root) {
    if (root == null) {
      return;
    }
    if (!(contains(root))) {
      CollectionSequence.fromCollection(myRoots).addElement(root);
    }
  }
  public Collection<SModel> getModels() {
    return myModels;
  }
  public Collection<SModule> getModules() {
    return myModules;
  }
  public Collection<SNode> getRoots() {
    return myRoots;
  }
  public int getNumRoots() {
    int result = 0;
    for (SModule module : myModules) {
      result += getNumRoots(module);
    }
    for (SModel model : myModels) {
      result += getNumRoots(model);
    }
    result += CollectionSequence.fromCollection(myRoots).count();
    return result;
  }
  public boolean isEmpty() {
    return CollectionSequence.fromCollection(myModels).isEmpty() && CollectionSequence.fromCollection(myModules).isEmpty() && CollectionSequence.fromCollection(myRoots).isEmpty();
  }
  private int getNumRoots(SModule module) {
    int result = 0;
    for (SModel model : module.getModels()) {
      result += getNumRoots(model);
    }
    return result;
  }
  public String getPresentation() {
    StringBuilder sb = new StringBuilder();
    if (CollectionSequence.fromCollection(myModules).isNotEmpty()) {
      sb.append(getPresentation(myModules, "module"));
    }
    if (CollectionSequence.fromCollection(myModels).isNotEmpty()) {
      if (sb.length() > 0) {
        sb.append(" and ");
      }
      if (CollectionSequence.fromCollection(myModels).count() == 1) {
        sb.append("model " + CollectionSequence.fromCollection(myModels).first().getModelName());
      } else {
        sb.append(CollectionSequence.fromCollection(myModels).count() + " models");
      }
    }
    if (CollectionSequence.fromCollection(myRoots).isNotEmpty()) {
      if (sb.length() > 0) {
        sb.append(" and ");
      }
      sb.append(getPresentation(myRoots, "node"));
    }
    return sb.toString();
  }
  private <T> String getPresentation(Collection<T> list, String elementType) {
    if (CollectionSequence.fromCollection(list).isEmpty()) {
      return "";
    }
    if (CollectionSequence.fromCollection(list).count() == 1) {
      return elementType + " " + CollectionSequence.fromCollection(list).first();
    }
    return CollectionSequence.fromCollection(list).count() + " " + elementType + "s";
  }
}
