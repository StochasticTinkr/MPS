package jetbrains.mps.ide.ui.dialogs.modules;

/*Generated by MPS */

import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.JCheckBox;
import com.intellij.uiDesigner.core.GridLayoutManager;
import java.awt.Insets;
import javax.swing.JLabel;
import com.intellij.ui.DocumentAdapter;
import javax.swing.event.DocumentEvent;
import java.io.File;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.fileChooser.FileChooserDescriptorFactory;
import com.intellij.ui.InsertPathAction;
import com.intellij.ide.util.BrowseFilesListener;
import com.intellij.ui.FieldPanel;
import com.intellij.openapi.util.EmptyRunnable;
import com.intellij.openapi.fileChooser.FileChooserFactory;
import java.awt.Dimension;
import org.jetbrains.annotations.NotNull;
import javax.swing.JComponent;

public class NewLanguageSettings extends JPanel {

  private String myProjectPath;
  private JTextField myLanguageName;
  private JTextField myLanguageLocation;
  private JCheckBox myRuntimeSolution;
  private JCheckBox mySandboxSolution;

  private boolean myLangLocationChangedByUser = false;
  private boolean myLangLocationDocListenerEnabled = true;

  private NewLanguageSettings.LangSettingsChangedListener myListener;

  public NewLanguageSettings() {
    this(null);
  }

  public NewLanguageSettings(String projectPath) {
    super(new GridLayoutManager(5, 1, new Insets(0, 5, 5, 5), -1, -1));
    myProjectPath = projectPath;

    this.add(new JLabel("Language name:"), Util.getGridConstraints(0));
    myLanguageName = new JTextField();
    myLanguageName.setName("Name");
    myLanguageName.getDocument().addDocumentListener(new DocumentAdapter() {
      protected void textChanged(DocumentEvent p0) {
        if ((myProjectPath == null || myProjectPath.length() == 0)) {
          return;
        }
        String path = myProjectPath + File.separator + "languages" + File.separator;
        final String langName = getLanguageName();
        if (!(langName.equals(getLanguageLocation()))) {
          path += langName;
        }
        if (!(myLangLocationChangedByUser)) {
          setLanguageLocation(path);
        }
        fireChanged();
      }
    });
    this.add(myLanguageName, Util.getGridConstraints(1));

    myLanguageLocation = new JTextField();
    myLanguageLocation.setName("Path");
    myLanguageLocation.getDocument().addDocumentListener(new DocumentAdapter() {
      protected void textChanged(DocumentEvent p0) {
        if (myLangLocationDocListenerEnabled) {
          myLangLocationChangedByUser = true;
        }
      }
    });
    final FileChooserDescriptor descriptor = FileChooserDescriptorFactory.createSingleFolderDescriptor();
    InsertPathAction.addTo(myLanguageLocation, descriptor);
    BrowseFilesListener listener = new BrowseFilesListener(myLanguageLocation, "Choose Language Location Folder", "", descriptor);
    FieldPanel fieldPanel = new FieldPanel(myLanguageLocation, "Language location:", null, listener, EmptyRunnable.getInstance());
    FileChooserFactory.getInstance().installFileCompletion(fieldPanel.getTextField(), descriptor, false, null);
    this.add(fieldPanel, Util.getGridConstraints(2));

    myRuntimeSolution = new JCheckBox("Create Runtime Solution");
    this.add(myRuntimeSolution, Util.getGridConstraints(3));

    mySandboxSolution = new JCheckBox("Create Sandbox Solution");
    this.add(mySandboxSolution, Util.getGridConstraints(4));

    this.setPreferredSize(new Dimension(400, 100));

    reset();
  }

  @NotNull
  public String getLanguageName() {
    return myLanguageName.getText().trim();
  }
  public void setLanguageName(String languageName) {
    myLanguageName.setText(languageName);
    fireChanged();
  }
  public String getLanguageLocation() {
    return myLanguageLocation.getText().trim();
  }
  public void setLanguageLocation(String languageLocation) {
    myLangLocationDocListenerEnabled = false;
    myLanguageLocation.setText(languageLocation);
    myLangLocationDocListenerEnabled = true;
    fireChanged();
  }
  public boolean isRuntimeSolutionNeeded() {
    return myRuntimeSolution.isSelected();
  }
  public void setRuntimeSolutionNeeded(boolean needed) {
    myRuntimeSolution.setSelected(needed);
  }
  public boolean isSandboxSolutionNeeded() {
    return mySandboxSolution.isSelected();
  }
  public void setSandboxSolutionNeeded(boolean needed) {
    mySandboxSolution.setSelected(needed);
  }
  public void setProjectPath(String projectPath) {
    // If path is the same - just return 
    if (myProjectPath != null && myProjectPath.equals(projectPath)) {
      return;
    }

    final String oldProjectPath = myProjectPath;
    myProjectPath = projectPath;
    if ((oldProjectPath != null && oldProjectPath.length() > 0) && myLanguageLocation.getText().contains(oldProjectPath)) {
      setLanguageLocation(myLanguageLocation.getText().replace(oldProjectPath, myProjectPath));
    } else {
      setLanguageLocation(generateLanguagePath());
    }
    fireChanged();
  }

  public void setListener(NewLanguageSettings.LangSettingsChangedListener listener) {
    myListener = listener;
  }
  /*package*/ void fireChanged() {
    if (myListener != null) {
      myListener.changed();
    }
  }
  public void reset() {
    setLanguageName("NewLanguage");
    if (myProjectPath != null) {
      setLanguageLocation(generateLanguagePath());
    }
    myRuntimeSolution.setSelected(false);
    mySandboxSolution.setSelected(false);
  }
  private String generateLanguagePath() {
    return myProjectPath + File.separator + "languages" + File.separator + getLanguageName();
  }

  public JComponent getPreferredFocusedComponent() {
    return myLanguageName;
  }

  public static interface LangSettingsChangedListener {
    void changed();
  }
}
