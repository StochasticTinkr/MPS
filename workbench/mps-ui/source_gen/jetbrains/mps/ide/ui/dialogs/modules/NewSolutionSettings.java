package jetbrains.mps.ide.ui.dialogs.modules;

/*Generated by MPS */

import javax.swing.JPanel;
import javax.swing.JTextField;
import com.intellij.uiDesigner.core.GridLayoutManager;
import java.awt.Insets;
import javax.swing.JLabel;
import com.intellij.ui.DocumentAdapter;
import javax.swing.event.DocumentEvent;
import java.io.File;
import com.intellij.openapi.util.Comparing;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.fileChooser.FileChooserDescriptorFactory;
import com.intellij.ui.InsertPathAction;
import com.intellij.ide.util.BrowseFilesListener;
import com.intellij.ui.FieldPanel;
import com.intellij.openapi.util.EmptyRunnable;
import com.intellij.openapi.fileChooser.FileChooserFactory;
import java.awt.Dimension;
import javax.swing.JComponent;

public class NewSolutionSettings extends JPanel {

  private String myProjectPath;
  private JTextField mySolutionName;
  private JTextField mySolutionLocation;

  private boolean mySolutionLocationChangedByUser = false;
  private boolean mySolutionLocationDocListenerEnabled = true;

  private NewSolutionSettings.SolutionSettingsChangedListener myListener;

  public NewSolutionSettings() {
    this(null);
  }
  public NewSolutionSettings(String projectPath) {
    super(new GridLayoutManager(3, 1, new Insets(0, 5, 5, 5), -1, -1));
    myProjectPath = projectPath;

    this.add(new JLabel("Solution name:"), Util.getGridConstraints(0));
    mySolutionName = new JTextField();
    mySolutionName.setName("Name");
    mySolutionName.getDocument().addDocumentListener(new DocumentAdapter() {
      protected void textChanged(DocumentEvent p0) {
        if ((myProjectPath == null || myProjectPath.length() == 0)) {
          return;
        }
        String path = myProjectPath + File.separator + "solutions" + File.separator;
        final String solutionName = getSolutionName();
        if (!(Comparing.strEqual(solutionName, getSolutionLocation()))) {
          path += solutionName;
        }
        if (!(mySolutionLocationChangedByUser)) {
          setSolutionLocation(path);
        }
      }
    });
    this.add(mySolutionName, Util.getGridConstraints(1));

    mySolutionLocation = new JTextField();
    mySolutionLocation.setName("Path");
    mySolutionLocation.getDocument().addDocumentListener(new DocumentAdapter() {
      protected void textChanged(DocumentEvent p0) {
        if (mySolutionLocationDocListenerEnabled) {
          mySolutionLocationChangedByUser = true;
        }
      }
    });
    final FileChooserDescriptor descriptor = FileChooserDescriptorFactory.createSingleFolderDescriptor();
    InsertPathAction.addTo(mySolutionLocation, descriptor);
    BrowseFilesListener listener = new BrowseFilesListener(mySolutionLocation, "Choose Solution Location Folder", "", descriptor);
    FieldPanel fieldPanel = new FieldPanel(mySolutionLocation, "Solution location:", null, listener, EmptyRunnable.getInstance());
    FileChooserFactory.getInstance().installFileCompletion(fieldPanel.getTextField(), descriptor, false, null);
    this.add(fieldPanel, Util.getGridConstraints(2));

    this.setPreferredSize(new Dimension(400, 100));

    reset();
  }
  public String getSolutionName() {
    return mySolutionName.getText().trim();
  }
  public void setSolutionName(String solutionName) {
    mySolutionName.setText(solutionName);
    fireChaged();
  }
  public String getSolutionLocation() {
    return mySolutionLocation.getText().trim();
  }
  public void setSolutionLocation(String solutionLocation) {
    mySolutionLocationDocListenerEnabled = false;
    mySolutionLocation.setText(solutionLocation);
    mySolutionLocationDocListenerEnabled = true;
    fireChaged();
  }
  public void setProjectPath(String projectPath) {
    // If path is the same - just return 
    if (myProjectPath != null && myProjectPath.equals(projectPath)) {
      return;
    }

    final String oldProjectPath = myProjectPath;
    myProjectPath = projectPath;
    if ((oldProjectPath != null && oldProjectPath.length() > 0) && mySolutionLocation.getText().contains(oldProjectPath)) {
      setSolutionLocation(mySolutionLocation.getText().replace(oldProjectPath, myProjectPath));
    } else {
      setSolutionLocation(generateSolutionPath());
    }
    fireChaged();
  }

  public void setListener(NewSolutionSettings.SolutionSettingsChangedListener listener) {
    myListener = listener;
  }
  private void fireChaged() {
    if (myListener != null) {
      myListener.changed();
    }
  }
  public void reset() {
    setSolutionName("NewSolution");
    if (myProjectPath != null) {
      setSolutionLocation(generateSolutionPath());
    }
  }
  private String generateSolutionPath() {
    return myProjectPath + File.separator + "solutions" + File.separator + getSolutionName();
  }



  public JComponent getPreferredFocusedComponent() {
    return mySolutionName;
  }

  public static interface SolutionSettingsChangedListener {
    public void changed();
  }
}
