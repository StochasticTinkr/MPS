package jetbrains.mps.ide.ui.finders;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.BaseFinder;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.ide.findusages.findalgorithm.finders.SearchedObjects;
import java.util.Collections;
import org.jetbrains.mps.openapi.module.FindUsagesFacade;
import org.jetbrains.mps.openapi.util.Consumer;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.ide.findusages.model.SearchResult;

/**
 * Look up SModelReference in imports of models from the scope.
 * Search results are of type SModel
 * FIXME I've got  no idea why it resides in UI package, nor why it's in BL when it's plain Java
 */
public class ModelImportsUsagesFinder extends BaseFinder {
  public ModelImportsUsagesFinder() {
  }

  @Override
  public String getDescription() {
    return "Usages in Imports";
  }

  @Override
  public void find(SearchQuery query, @NotNull final IFinder.FindCallback callback, final ProgressMonitor monitor) {
    Object value = query.getObjectHolder().getObject();

    if (!(value instanceof SModelReference)) {
      return;
    }
    SModelReference modelReference = (SModelReference) value;
    callback.onSearchedObjectsCalculated(new SearchedObjects(Collections.singleton(modelReference)));
    FindUsagesFacade.getInstance().findModelUsages(query.getScope(), Collections.singleton(modelReference), new Consumer<SModel>() {
      public void consume(@NotNull SModel m) {
        callback.onUsageFound(new SearchResult<SModel>(m, "usages in imports"));
      }
    }, monitor);
  }
}
