package jetbrains.mps.ide.ui.finders;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.BaseFinder;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.ide.findusages.findalgorithm.finders.SearchedObjects;
import java.util.Collections;
import java.util.Collection;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.ide.findusages.model.SearchResult;

/**
 * Look up imports of the language (aka used language) in scope models.
 * Doesn't look into actual model content, use {@link jetbrains.mps.ide.ui.finders.LanguageUsagesFinder } to find actual usages instead.
 * Tolerates single {@link org.jetbrains.mps.openapi.language.SLanguage } as lookup object, use {@link jetbrains.mps.findUsages.CompositeFinder } to look up few languages at once
 */
public class LanguageModelImportFinder extends BaseFinder {
  public LanguageModelImportFinder() {
  }

  @Override
  public String getDescription() {
    return "Language Usages in Imports";
  }

  public void find(SearchQuery query, @NotNull IFinder.FindCallback callback, ProgressMonitor monitor) {
    Object lookupObject = query.getObjectHolder().getObject();
    if (!(lookupObject instanceof SLanguage)) {
      return;
    }
    final SLanguage language2lookup = (SLanguage) lookupObject;
    callback.onSearchedObjectsCalculated(new SearchedObjects(Collections.singletonList(language2lookup)));
    Collection<SModel> models = IterableUtil.asCollection(query.getScope().getModels());
    monitor.start("Look up language imports", models.size());
    try {
      for (SModel model : models) {
        if (monitor.isCanceled()) {
          return;
        }

        // XXX next code originates from ModuleUsagesFinder#collectUsagesInModels 
        // I don't understand reason for isUserModel check, hence had dropped it 

        if (SModelOperations.getAllLanguageImports(model).contains(language2lookup)) {
          callback.onUsageFound(new SearchResult<SModel>(model, "model imports"));
        }

        monitor.advance(1);
      }
    } finally {
      monitor.done();
    }
  }
}
