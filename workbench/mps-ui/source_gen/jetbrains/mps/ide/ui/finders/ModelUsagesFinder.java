package jetbrains.mps.ide.ui.finders;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.BaseFinder;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.ide.findusages.findalgorithm.finders.SearchedObjects;
import java.util.Collections;
import java.util.Collection;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.util.IterableUtil;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.ide.findusages.model.SearchResult;

/**
 * Look up particular nodes in scope models with reference target pointing to SModelReference.
 * Search results are of type SNode
 */
public class ModelUsagesFinder extends BaseFinder {
  public ModelUsagesFinder() {
  }

  @Override
  public String getDescription() {
    return "Model Usages";
  }

  @Override
  public void find(SearchQuery query, @NotNull IFinder.FindCallback callback, ProgressMonitor monitor) {
    SModelReference modelReference;
    Object value = query.getObjectHolder().getObject();
    if (!(value instanceof SModelReference)) {
      return;
    }
    modelReference = (SModelReference) value;
    callback.onSearchedObjectsCalculated(new SearchedObjects(Collections.singleton(modelReference)));
    Collection<SModel> models = IterableUtil.asCollection(query.getScope().getModels());
    doFind(modelReference, models, callback, monitor);
  }

  /*package*/ void doFind(SModelReference what, Collection<SModel> where, @NotNull IFinder.FindCallback callback, ProgressMonitor monitor) {
    // arguments != null 
    monitor.start("Looking up references to a model", where.size());
    try {
      for (SModel modelDescriptor : where) {
        if (monitor.isCanceled()) {
          break;
        }
        for (SNode node : SNodeUtil.getDescendants(modelDescriptor)) {
          for (SReference reference : node.getReferences()) {
            SModelReference targetModelReference = reference.getTargetSModelReference();
            if (targetModelReference == null) {
              continue;
            }
            if (targetModelReference.equals(what)) {
              callback.onUsageFound(new SearchResult<SNode>(node, "nodes from model"));
            }
          }
        }
        monitor.advance(1);
      }
    } finally {
      monitor.done();
    }
  }
}
