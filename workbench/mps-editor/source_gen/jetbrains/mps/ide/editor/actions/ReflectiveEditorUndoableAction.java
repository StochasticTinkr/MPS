package jetbrains.mps.ide.editor.actions;

/*Generated by MPS */

import jetbrains.mps.smodel.SNodeUndoableAction;
import java.util.List;
import jetbrains.mps.nodeEditor.reflectiveEditor.ReflectiveHintsAction;
import jetbrains.mps.openapi.editor.EditorComponent;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNodeReference;
import java.util.HashMap;
import jetbrains.mps.nodeEditor.reflectiveEditor.ReflectiveHintsManager;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.openapi.editor.selection.Selection;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.openapi.editor.cells.EditorCell;

/*package*/ class ReflectiveEditorUndoableAction extends SNodeUndoableAction {

  private final List<ReflectiveHintsAction> myActions;
  private final EditorComponent myEditorComponent;
  private final boolean myIsReflective;
  private final boolean myIsForManyNodes;

  private List<List<SNode>> mySelectionStack = ListSequence.fromList(new ArrayList<List<SNode>>());
  private Map<SNodeReference, String[]> myEditorHintsForNodeMap = new HashMap<SNodeReference, String[]>();

  /*package*/ ReflectiveEditorUndoableAction(List<SNode> affectedNodes, EditorComponent editorComponent, boolean isReflective, boolean isForManyNodes) {
    super(ListSequence.fromList(affectedNodes).first());

    myActions = ListSequence.fromList(new ArrayList<ReflectiveHintsAction>());
    for (SNode node : ListSequence.fromList(affectedNodes)) {
      ListSequence.fromList(myActions).addElement(ReflectiveHintsManager.getAction(node, editorComponent, isReflective, isForManyNodes));
    }

    myEditorComponent = editorComponent;
    myIsReflective = isReflective;
    myIsForManyNodes = isForManyNodes;
  }

  public boolean isApplicable(AnActionEvent event) {
    if (!(myIsForManyNodes) && ListSequence.fromList(myActions).count() > 1) {
      return false;
    }

    boolean canMake = ListSequence.fromList(myActions).any(new IWhereFilter<ReflectiveHintsAction>() {
      public boolean accept(ReflectiveHintsAction it) {
        return it.isApplicable();
      }
    });

    if (canMake) {
      String plurality = (myIsForManyNodes ? ("s for Subtree" + ((ListSequence.fromList(myActions).count() > 1 ? "s" : ""))) : "");
      String caption = String.format("Show %s Editor%s", (myIsReflective ? "Reflective" : "Regular"), plurality);
      event.getPresentation().setText(caption);
      return true;
    }

    return false;
  }

  private void recordHintsState() {
    for (ReflectiveHintsAction action : ListSequence.fromList(myActions)) {
      action.recordState();
    }
  }

  private void restoreHintState() {
    for (ReflectiveHintsAction action : ListSequence.fromList(myActions)) {
      action.restoreState();
    }
  }

  private void recordSelectionStack() {
    SelectionManager selectionManager = myEditorComponent.getEditorContext().getSelectionManager();

    for (Selection selection : Sequence.fromIterable(selectionManager.getSelectionStackIterable())) {
      if (ListSequence.fromList(mySelectionStack).isEmpty() || neq_d9n51q_a0a0a2a71(selection.getSelectedNodes(), ListSequence.fromList(mySelectionStack).last())) {
        ListSequence.fromList(mySelectionStack).addElement(selection.getSelectedNodes());
      }
    }
  }

  private void restoreSelectionStack() {
    SelectionManager selectionManager = myEditorComponent.getEditorContext().getSelectionManager();
    selectionManager.clearSelection();
    for (List<SNode> selection : ListSequence.fromList(mySelectionStack)) {
      if (ListSequence.fromList(selection).count() > 1) {
        Selection rangeSelection = selectionManager.createRangeSelection(ListSequence.fromList(selection).first(), ListSequence.fromList(selection).last());
        selectionManager.pushSelection(rangeSelection);
      } else {
        EditorCell nodeCell = myEditorComponent.findNodeCell(ListSequence.fromList(selection).first());
        if (nodeCell.isSelectable()) {
          selectionManager.pushSelection(selectionManager.createSelection(nodeCell));
        }
      }
    }
  }

  private void redraw() {
    myEditorComponent.rebuildEditorContent();
    myEditorComponent.getEditorContext().flushEvents();
  }

  private void doExecute() {
    for (ReflectiveHintsAction action : ListSequence.fromList(myActions)) {
      if (action.isApplicable()) {
        action.execute();
      }
    }
  }

  public void execute() {
    recordHintsState();
    recordSelectionStack();
    doExecute();
    redraw();
    restoreSelectionStack();
  }

  @Override
  protected void doUndo() {
    restoreHintState();
    redraw();
    restoreSelectionStack();
  }

  @Override
  protected void doRedo() {
    doExecute();
    redraw();
    restoreSelectionStack();
  }

  private static boolean neq_d9n51q_a0a0a2a71(Object a, Object b) {
    return !(((a != null ? a.equals(b) : a == b)));
  }
}
