package jetbrains.mps.ide.editor.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;

public class ShowReflectiveRegularEditors_Action extends BaseAction {
  private static final Icon ICON = null;

  private boolean isReflective;
  private boolean isForManyNodes;
  private boolean isForSubtrees;
  public ShowReflectiveRegularEditors_Action(boolean isReflective_par, boolean isForManyNodes_par, boolean isForSubtrees_par) {
    super("Show %s Editor%s%s", "", ICON);
    this.isReflective = isReflective_par;
    this.isForManyNodes = isForManyNodes_par;
    this.isForSubtrees = isForSubtrees_par;
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return false;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      List<SNode> p = event.getData(MPSCommonDataKeys.NODES);
      MapSequence.fromMap(_params).put("selectedNodes", p);
      if (p == null) {
        return false;
      }
    }
    {
      EditorComponent editorComponent = event.getData(MPSEditorDataKeys.EDITOR_COMPONENT);
      if (editorComponent != null && editorComponent.isInvalid()) {
        editorComponent = null;
      }
      MapSequence.fromMap(_params).put("editorComponent", editorComponent);
      if (editorComponent == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
  }
  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder();
    res.append(super.getActionId());
    res.append("#");
    res.append(((Object) this.isReflective).toString());
    res.append("!");
    res.append(((Object) this.isForManyNodes).toString());
    res.append("!");
    res.append(((Object) this.isForSubtrees).toString());
    res.append("!");
    return res.toString();
  }
}
