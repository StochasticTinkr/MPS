package jetbrains.mps.ide.editor.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;

public class ShowReflectiveEditor_Action extends BaseAction {
  private static final Icon ICON = null;

  public ShowReflectiveEditor_Action() {
    super("Show Reflective Editor", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    ReflectiveEditorActionUtil.update(((List<SNode>) MapSequence.fromMap(_params).get("selectedNodes")), true, ((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")), event);
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      List<SNode> p = event.getData(MPSCommonDataKeys.NODES);
      MapSequence.fromMap(_params).put("selectedNodes", p);
      if (p == null) {
        return false;
      }
    }
    {
      EditorComponent editorComponent = event.getData(MPSEditorDataKeys.EDITOR_COMPONENT);
      if (editorComponent != null && editorComponent.isInvalid()) {
        editorComponent = null;
      }
      MapSequence.fromMap(_params).put("editorComponent", editorComponent);
      if (editorComponent == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    ReflectiveEditorActionUtil.execute(((List<SNode>) MapSequence.fromMap(_params).get("selectedNodes")), true, ((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")));
  }
}
