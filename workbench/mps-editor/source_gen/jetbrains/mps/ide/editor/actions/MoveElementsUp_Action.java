package jetbrains.mps.ide.editor.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.openapi.editor.selection.Selection;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.editor.runtime.IntelligentNodeMover;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class MoveElementsUp_Action extends BaseAction {
  private static final Icon ICON = null;

  public MoveElementsUp_Action() {
    super("Move Elements Up", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    Selection selection = ((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")).getSelectionManager().getSelection();
    return selection != null && EditorActionUtils.isWriteActionEnabled(((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")), selection.getSelectedCells());
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      EditorContext p = event.getData(MPSEditorDataKeys.EDITOR_CONTEXT);
      MapSequence.fromMap(_params).put("editorContext", p);
      if (p == null) {
        return false;
      }
    }
    {
      EditorComponent editorComponent = event.getData(MPSEditorDataKeys.EDITOR_COMPONENT);
      if (editorComponent != null && editorComponent.isInvalid()) {
        editorComponent = null;
      }
      MapSequence.fromMap(_params).put("editorComponent", editorComponent);
      if (editorComponent == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    List<SNode> nodesToMove = ((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")).getSelectedNodes();
    if (nodesToMove.size() == 1) {
      SNode node = nodesToMove.get(0);
      SNode nodeToMove = IntelligentNodeMover.findNodeToMove(node, ((EditorContext) MapSequence.fromMap(_params).get("editorContext")));
      if (nodeToMove != null) {
        nodesToMove = ListSequence.fromListAndArray(new ArrayList<SNode>(), nodeToMove);
      } else {
        return;
      }
    }
    IntelligentNodeMover mover = new IntelligentNodeMover(nodesToMove, ((EditorContext) MapSequence.fromMap(_params).get("editorContext")), false);
    if (mover.isValid()) {
      mover.move();
    }
  }
}
