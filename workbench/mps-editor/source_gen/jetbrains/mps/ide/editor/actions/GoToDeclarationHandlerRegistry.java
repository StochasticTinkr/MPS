package jetbrains.mps.ide.editor.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.model.SNode;

public abstract class GoToDeclarationHandlerRegistry {
  private static List<GoToDeclarationHandlerRegistry.GoToDeclarationHandler> ourHandlers = ListSequence.fromList(new ArrayList<GoToDeclarationHandlerRegistry.GoToDeclarationHandler>());

  public static void addHandler(GoToDeclarationHandlerRegistry.GoToDeclarationHandler h) {
    ListSequence.fromList(ourHandlers).addElement(h);
  }
  public static void removeHandler(GoToDeclarationHandlerRegistry.GoToDeclarationHandler h) {
    ListSequence.fromList(ourHandlers).removeElement(h);
  }
  public static boolean canNavigateAny(MPSProject p, SNode node) {
    for (GoToDeclarationHandlerRegistry.GoToDeclarationHandler np : ListSequence.fromList(ourHandlers)) {
      if (np.canNavigate(p, node)) {
        return true;
      }
    }
    return false;
  }
  public static boolean navigateAll(MPSProject p, SNode node) {
    boolean navigated = false;
    for (GoToDeclarationHandlerRegistry.GoToDeclarationHandler np : ListSequence.fromList(ourHandlers)) {
      if (np.canNavigate(p, node)) {
        navigated = np.navigate(p, node);
      }
    }
    return navigated;
  }

  public static abstract class GoToDeclarationHandler {
    public abstract boolean canNavigate(MPSProject p, SNode node);
    public abstract boolean navigate(MPSProject p, SNode node);
  }
}
