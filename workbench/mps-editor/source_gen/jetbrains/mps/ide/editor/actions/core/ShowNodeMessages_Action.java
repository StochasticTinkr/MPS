package jetbrains.mps.ide.editor.actions.core;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import jetbrains.mps.openapi.editor.message.SimpleEditorMessage;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import com.intellij.openapi.util.text.StringUtil;
import com.intellij.openapi.ui.Messages;

public class ShowNodeMessages_Action extends BaseAction {
  private static final Icon ICON = null;

  public ShowNodeMessages_Action() {
    super("Show Node Messages", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return ListSequence.fromList(((List<SimpleEditorMessage>) ((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")).getHighlightManager().getMessagesFor(((SNode) MapSequence.fromMap(_params).get("node"))))).any(new IWhereFilter<SimpleEditorMessage>() {
      public boolean accept(SimpleEditorMessage it) {
        return isNotEmptyString(it.getMessage());
      }
    });
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    {
      SNode p = event.getData(MPSCommonDataKeys.NODE);
      MapSequence.fromMap(_params).put("node", p);
      if (p == null) {
        return false;
      }
    }
    {
      EditorComponent editorComponent = event.getData(MPSEditorDataKeys.EDITOR_COMPONENT);
      if (editorComponent != null && editorComponent.isInvalid()) {
        editorComponent = null;
      }
      MapSequence.fromMap(_params).put("editorComponent", editorComponent);
      if (editorComponent == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    List<SimpleEditorMessage> messages = ((EditorComponent) MapSequence.fromMap(_params).get("editorComponent")).getHighlightManager().getMessagesFor(((SNode) MapSequence.fromMap(_params).get("node")));
    messages = ListSequence.fromList(messages).removeWhere(new IWhereFilter<SimpleEditorMessage>() {
      public boolean accept(SimpleEditorMessage it) {
        return isEmptyString(it.getMessage());
      }
    });
    // Try to guess messages text size 
    StringBuilder sb = new StringBuilder(200 * ListSequence.fromList(messages).count());
    sb.append("<html>");
    for (SimpleEditorMessage message : messages) {
      sb.append("<p>");
      sb.append(StringUtil.escapeXml(message.getMessage()));
      sb.append("<br>");
      sb.append("Message owner: ");
      sb.append(message.getOwner());
      sb.append("</p>");
      if (!(ListSequence.fromList(messages).last().equals(message))) {
        sb.append("<br>");
      }
    }
    sb.append("<html>");

    Messages.showInfoMessage(((Project) MapSequence.fromMap(_params).get("project")), sb.toString(), "Node Messages");
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
