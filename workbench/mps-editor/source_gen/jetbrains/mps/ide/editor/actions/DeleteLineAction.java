package jetbrains.mps.ide.editor.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.Optional;
import java.util.function.Consumer;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.cells.EditorCell_Collection;
import jetbrains.mps.editor.runtime.cells.ReadOnlyUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import java.util.Objects;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.openapi.editor.cells.CellLayout;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Indent;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;

/*package*/ class DeleteLineAction {
  /*package*/ static boolean canExecute(EditorCell currentSelectedCell) {
    return findCellToDelete(currentSelectedCell).isPresent();
  }
  /*package*/ static void execute(final EditorContext editorContext, EditorCell currentSelectedCell) {
    Optional<EditorCell> cellToDeleteOptional = findCellToDelete(currentSelectedCell);
    cellToDeleteOptional.ifPresent(new Consumer<EditorCell>() {
      public void accept(EditorCell cellToDelete) {
        editorContext.getEditorComponent().getActionHandler().executeAction(cellToDelete, CellActionType.DELETE);
      }
    });
  }

  @NotNull
  private static Optional<EditorCell> findCellToDelete(EditorCell currentSelectedCell) {
    EditorCell current = currentSelectedCell;
    while (current != null) {
      if (isOKToDelete(current)) {
        return Optional.of(current);
      }
      current = current.getParent();
    }
    return Optional.<EditorCell>empty();
  }

  private static boolean isOKToDelete(@NotNull EditorCell cell) {
    if (!(cell.isBig())) {
      return false;
    }
    SNode node = cell.getSNode();
    EditorCell_Collection parentCell = cell.getParent();
    if (ReadOnlyUtil.isCellReadOnly(cell) || SNodeOperations.getParent(node) == null || parentCell == null) {
      return false;
    }
    SContainmentLink containmentLink = getContainmentLink(node);
    if (containmentLink == null) {
      return false;
    }

    return containmentLink.isMultiple() && (Objects.equals(containmentLink, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, "statement")) || DeleteLineAction.isVerticalCellLayout(parentCell));
  }
  private static boolean isVerticalCellLayout(@NotNull EditorCell_Collection cell) {
    CellLayout cellLayout = cell.getCellLayout();
    if (cellLayout instanceof CellLayout_Indent) {
      return cell.getStyle().get(StyleAttributes.INDENT_LAYOUT_CHILDREN_NEWLINE);
    } else {
      return cellLayout instanceof CellLayout_Vertical;
    }
  }

  private static SContainmentLink getContainmentLink(SNode node) {
    return (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x9d98713f247885aL, "jetbrains.mps.lang.core.structure.ChildAttribute")) ? ((SContainmentLink) BHReflection.invoke0(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x9d98713f247885aL, "jetbrains.mps.lang.core.structure.ChildAttribute")), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x9d98713f247885aL, "jetbrains.mps.lang.core.structure.ChildAttribute"), SMethodTrimmedId.create("getLink", MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x9d98713f247885aL, "jetbrains.mps.lang.core.structure.ChildAttribute"), "BpxLfMirzf"))) : node.getContainmentLink());
  }

}
