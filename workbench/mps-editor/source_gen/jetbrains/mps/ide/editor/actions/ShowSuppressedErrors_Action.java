package jetbrains.mps.ide.editor.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import com.intellij.ui.awt.RelativePoint;
import jetbrains.mps.ide.editor.util.GoToContextMenuHelper;
import java.util.List;
import jetbrains.mps.ide.editor.util.CustomizedNavigatable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import java.util.HashMap;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.errors.item.FlavouredItem;
import jetbrains.mps.errors.item.RuleIdFlavouredItem;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import com.intellij.openapi.actionSystem.AnAction;
import jetbrains.mps.icons.MPSIcons;
import java.util.Objects;
import jetbrains.mps.errors.item.IssueKindReportItem;
import jetbrains.mps.errors.item.TypesystemReportItemAdapter;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.errors.item.ReportItem;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.ide.icons.GlobalIconManager;
import jetbrains.mps.ide.navigation.NodeNavigatable;
import com.intellij.openapi.ui.popup.ListPopup;
import com.intellij.openapi.ui.popup.JBPopupFactory;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;
import jetbrains.mps.ide.editor.util.GoToContextMenuHelperBase;
import jetbrains.mps.ide.editor.util.CaptionFunction;
import jetbrains.mps.ide.editor.util.CustomizedNavigatableRenderer;
import java.util.Comparator;
import com.intellij.util.Function;

public class ShowSuppressedErrors_Action extends BaseAction {
  private static final Icon ICON = null;

  public ShowSuppressedErrors_Action() {
    super("Show Suppressed Errors", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      MapSequence.fromMap(_params).put("selectedNode", node);
      if (node == null) {
        return false;
      }
    }
    {
      EditorCell p = event.getData(MPSEditorDataKeys.EDITOR_CELL);
      MapSequence.fromMap(_params).put("selectedCell", p);
      if (p == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("mpsProject", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final RelativePoint relativePoint = GoToContextMenuHelper.getRelativePoint(((EditorCell) MapSequence.fromMap(_params).get("selectedCell")), event.getInputEvent());
    final List<CustomizedNavigatable> navigatables = ListSequence.fromList(new ArrayList<CustomizedNavigatable>());
    final Wrappers._T<String> title = new Wrappers._T<String>();
    ((MPSProject) MapSequence.fromMap(_params).get("mpsProject")).getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        List<SNode> suppressed = ListSequence.fromList(new ArrayList<SNode>());
        SNode parent;
        if (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get("selectedNode")), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2f16f1b357e19f42L, "jetbrains.mps.lang.core.structure.ICanSuppressErrors"))) {
          parent = SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get("selectedNode")), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2f16f1b357e19f42L, "jetbrains.mps.lang.core.structure.ICanSuppressErrors"));
          ListSequence.fromList(suppressed).addSequence(ListSequence.fromList(AttributeOperations.getAttributeList(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get("selectedNode")), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2f16f1b357e19f42L, "jetbrains.mps.lang.core.structure.ICanSuppressErrors")), new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3a98b0957fe8e5d2L, "jetbrains.mps.lang.core.structure.SuppressErrorsAnnotation")))));
        } else if (SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get("selectedNode")), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3a98b0957fe8e5d2L, "jetbrains.mps.lang.core.structure.SuppressErrorsAnnotation"))) {
          parent = SNodeOperations.cast(SNodeOperations.getParent(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get("selectedNode")), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3a98b0957fe8e5d2L, "jetbrains.mps.lang.core.structure.SuppressErrorsAnnotation"))), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2f16f1b357e19f42L, "jetbrains.mps.lang.core.structure.ICanSuppressErrors"));
          ListSequence.fromList(suppressed).addElement(SNodeOperations.cast(((SNode) MapSequence.fromMap(_params).get("selectedNode")), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3a98b0957fe8e5d2L, "jetbrains.mps.lang.core.structure.SuppressErrorsAnnotation")));
        } else {
          throw new IllegalStateException();
        }
        for (final SNode suppress : ListSequence.fromList(suppressed)) {
          Map<String, String> predicateFlavours = new HashMap<String, String>();
          final String errorSpecialization = SPropertyOperations.getString(suppress, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3a98b0957fe8e5d2L, 0x21a1b53c6f2a72edL, "whichError"));
          try {
            if ((errorSpecialization != null && errorSpecialization.length() > 0)) {
              predicateFlavours = FlavouredItem.ReportItemPredicate.deserialize(errorSpecialization).getFlavours();
            }
          } catch (RuntimeException exception) {
          }
          List<RuleIdFlavouredItem.TypesystemRuleId> rules = ListSequence.fromList(new ArrayList<RuleIdFlavouredItem.TypesystemRuleId>());
          String message = null;
          DefaultActionGroup actionGroup = new DefaultActionGroup();
          actionGroup.add(new AnAction("Stop Suppressing", "Do not suppress error", MPSIcons.Actions.SuppressedError) {
            public void actionPerformed(@NotNull AnActionEvent event) {
              ((MPSProject) MapSequence.fromMap(_params).get("mpsProject")).getModelAccess().executeCommand(new Runnable() {
                public void run() {
                  SNodeOperations.deleteNode(suppress);
                }
              });
            }
          });
          if (Objects.equals(predicateFlavours.get(IssueKindReportItem.FLAVOUR_ISSUE_KIND.toString()), IssueKindReportItem.TYPESYSTEM.deriveItemKind().toString()) && predicateFlavours.containsKey(TypesystemReportItemAdapter.FLAVOUR_RULE_ID.toString())) {
            ListSequence.fromList(rules).addSequence(CollectionSequence.fromCollection(TypesystemReportItemAdapter.FLAVOUR_RULE_ID.deserializePredicate(predicateFlavours.get(TypesystemReportItemAdapter.FLAVOUR_RULE_ID.toString())).getValue()));
            message = predicateFlavours.get(ReportItem.FLAVOUR_MESSAGE.toString());
            if (ListSequence.fromList(rules).isNotEmpty() && message != null) {
              for (RuleIdFlavouredItem.TypesystemRuleId rule : ListSequence.fromList(rules)) {
                SNodeReference ruleRef = rule.getSourceNode();
                SNode ruleRoot = ruleRef.resolve(((MPSProject) MapSequence.fromMap(_params).get("mpsProject")).getRepository()).getContainingRoot();
                Icon ruleRootIcon = GlobalIconManager.getInstance().getIconFor(ruleRoot);
                NodeNavigatable ruleNavigatable = new NodeNavigatable(((MPSProject) MapSequence.fromMap(_params).get("mpsProject")), ruleRef);
                String goToRuleActionText;
                if (ListSequence.fromList(rules).count() == 1) {
                  goToRuleActionText = "Go To Typesystem Rule";
                } else if ((int) ListSequence.fromList(rules).indexOf(rule) == 0) {
                  goToRuleActionText = "Go To Immediate Rule";
                } else {
                  goToRuleActionText = "Go To Rule " + ruleRef.getNodeId();
                }
                actionGroup.add(new AnAction(goToRuleActionText, "Navigate to rule declaration", ruleRootIcon) {
                  public void actionPerformed(@NotNull AnActionEvent event) {
                    ruleNavigatable.navigate(true);
                  }
                });
              }
            }
          }
          ListPopup createActionGroupPopup = JBPopupFactory.getInstance().createActionGroupPopup(message, actionGroup, event.getDataContext(), JBPopupFactory.ActionSelectionAid.ALPHA_NUMBERING, false);
          CustomizedNavigatable navigatable = new CustomizedNavigatable(null, ((errorSpecialization == null || errorSpecialization.length() == 0) ? "Any error" : ((message == null || message.length() == 0) ? errorSpecialization : message)), "Suppressed", MPSIcons.Actions.SuppressedError) {
            @Override
            public void navigate(boolean requestFocus) {
              createActionGroupPopup.show(relativePoint);
            }
            @Override
            public boolean canNavigate() {
              return true;
            }
          };
          ListSequence.fromList(navigatables).addElement(navigatable);
        }
        title.value = "Errors suppressed for " + ((String) BHReflection.invoke0(parent, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2f16f1b357e19f42L, "jetbrains.mps.lang.core.structure.ICanSuppressErrors"), SMethodTrimmedId.create("nodeDescription", null, "4oS1ku9jIXr")));
      }
    });
    GoToContextMenuHelperBase<CustomizedNavigatable> helper = new GoToContextMenuHelperBase<CustomizedNavigatable>(((MPSProject) MapSequence.fromMap(_params).get("mpsProject")), new CaptionFunction() {
      public String caption(int count, boolean finished) {
        return title.value;
      }
    }, new CustomizedNavigatableRenderer(), new Comparator<CustomizedNavigatable>() {
      @Override
      public int compare(CustomizedNavigatable a, CustomizedNavigatable b) {
        return Integer.compare(ListSequence.fromList(navigatables).indexOf(a), ListSequence.fromList(navigatables).indexOf(b));
      }
    }, new Function<CustomizedNavigatable, String>() {
      public String fun(CustomizedNavigatable navigatable) {
        return navigatable.getText();
      }
    });
    helper.showMenu(navigatables, relativePoint);
  }
}
