package jetbrains.mps.ide.editor.actions;

/*Generated by MPS */

import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorComponent;
import jetbrains.mps.nodeEditor.reflectiveEditor.ReflectiveHintsManager;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.openapi.editor.selection.Selection;
import jetbrains.mps.internal.collections.runtime.Sequence;

/*package*/ class ReflectiveEditorUtil {

  public static boolean isApplicable(AnActionEvent event, List<SNode> selectedNodes, EditorComponent editorComponent, boolean isReflective, boolean isForManyNodes) {

    if (!(isForManyNodes) && selectedNodes.size() > 1) {
      return false;
    }

    ReflectiveHintsManager manager = new ReflectiveHintsManager(editorComponent);

    boolean canMake = false;
    if (isForManyNodes) {
      for (SNode node : selectedNodes) {
        if (manager.canMakeSubtree(isReflective, node)) {
          canMake = true;
          break;
        }
      }
    } else {
      canMake = manager.canMakeNode(isReflective, selectedNodes.get(0));
    }

    if (canMake) {
      String plurality = (isForManyNodes ? ("s for Subtree" + ((selectedNodes.size() > 1 ? "s" : ""))) : "");
      String caption = String.format("Show %s Editor%s", (isReflective ? "Reflective" : "Regular"), plurality);
      event.getPresentation().setText(caption);
      return true;
    }

    return false;
  }

  public static void execute(AnActionEvent event, List<SNode> selectedNodes, EditorComponent editorComponent, boolean isReflective, boolean isForManyNodes) {

    SelectionManager selectionManager = editorComponent.getEditorContext().getSelectionManager();

    List<List<SNode>> selectionStack = ListSequence.fromList(new ArrayList<List<SNode>>());
    for (Selection node : Sequence.fromIterable(selectionManager.getSelectionStackIterable())) {
      ListSequence.fromList(selectionStack).addElement(node.getSelectedNodes());
    }

    ReflectiveHintsManager manager = new ReflectiveHintsManager(editorComponent);
    if (isForManyNodes) {
      for (SNode node : selectedNodes) {
        if (manager.canMakeSubtree(isReflective, node)) {
          manager.makeSubtree(isReflective, node);
        }
      }
    } else {
      manager.makeNode(isReflective, selectedNodes.get(0));
    }

    editorComponent.rebuildEditorContent();
    editorComponent.getEditorContext().flushEvents();

    selectionManager.clearSelection();
    for (List<SNode> nodes : ListSequence.fromList(selectionStack)) {
      if (ListSequence.fromList(nodes).count() > 1) {
        Selection rangeSelection = selectionManager.createRangeSelection(ListSequence.fromList(nodes).first(), ListSequence.fromList(nodes).last());
        selectionManager.pushSelection(rangeSelection);
      } else {
        selectionManager.pushSelection(selectionManager.createSelection(editorComponent.findNodeCell(ListSequence.fromList(nodes).first())));
      }
    }
  }

}
