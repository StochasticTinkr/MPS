package jetbrains.mps.ide.editor.util;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.ide.findusages.findalgorithm.finders.Finder;
import com.intellij.ui.awt.RelativePoint;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNodeReference;
import java.util.ArrayList;
import com.intellij.util.Function;
import java.util.Comparator;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import java.awt.event.InputEvent;
import java.awt.event.MouseEvent;
import jetbrains.mps.nodeEditor.EditorComponent;
import java.awt.Point;

public final class PopupSettingsBuilder {
  /*package*/ final MPSProject myProject;
  /*package*/ SearchQuery query;
  /*package*/ Finder finder;
  /*package*/ String title;
  /*package*/ RelativePoint point;
  /*package*/ List<SNodeReference> foundUsages = new ArrayList<SNodeReference>();
  /*package*/ Function<SNodeReference, String> nameFilter;
  /*package*/ Comparator<SNodeReference> comparator;

  public PopupSettingsBuilder(@NotNull MPSProject project) {
    myProject = project;
  }

  public PopupSettingsBuilder query(@NotNull SearchQuery query) {
    this.query = query;
    return this;
  }

  public PopupSettingsBuilder queryFromNode(@NotNull SNode node) {
    return queryFromNode(node, null);
  }

  public PopupSettingsBuilder queryFromNode(@NotNull SNode node, SearchScope scope) {
    this.query = GoToHelper.createNodeQuery(myProject.getRepository(), node, scope);
    return this;
  }

  public PopupSettingsBuilder finder(@NotNull Finder finder) {
    this.finder = finder;
    return this;
  }

  public PopupSettingsBuilder title(@NotNull String title) {
    this.title = title;
    return this;
  }

  public PopupSettingsBuilder point(@NotNull RelativePoint point) {
    this.point = point;
    return this;
  }

  public PopupSettingsBuilder pointFromCellAndEvent(EditorCell selectedCell, InputEvent inputEvent) {
    RelativePoint newPoint;
    if (inputEvent instanceof MouseEvent) {
      newPoint = new RelativePoint(((MouseEvent) inputEvent));
    } else {
      newPoint = new RelativePoint((EditorComponent) selectedCell.getEditorComponent(), new Point(selectedCell.getX(), selectedCell.getY()));
    }
    return point(newPoint);
  }

  public PopupSettingsBuilder nameFilter(@NotNull Function<SNodeReference, String> namer) {
    this.nameFilter = namer;
    return this;
  }

  public PopupSettingsBuilder comparator(@NotNull Comparator<SNodeReference> comparator) {
    this.comparator = comparator;
    return this;
  }

  public PopupSettingsBuilder usages(@NotNull List<SNodeReference> foundUsages) {
    this.foundUsages = foundUsages;
    return this;
  }
}
