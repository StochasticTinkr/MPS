package jetbrains.mps.ide.editor.util;

/*Generated by MPS */

import com.intellij.openapi.ui.popup.JBPopup;
import com.intellij.openapi.ui.popup.PopupChooserBuilder;
import com.intellij.ui.awt.RelativePoint;
import com.intellij.ui.components.JBList;
import jetbrains.mps.classloading.ModuleClassLoader;
import jetbrains.mps.ide.editor.util.renderer.BaseRenderer;
import jetbrains.mps.ide.navigation.NodeNavigatable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.project.Project;
import jetbrains.mps.util.Pair;
import org.jetbrains.mps.openapi.model.SNodeReference;

import javax.swing.ListCellRenderer;
import java.awt.Point;
import java.awt.event.InputEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class GoToContextMenuUtil {
  public static Pair<JBPopup, JBList<NodeNavigatable>> showMenu(Project project, String title, List<SNodeReference> nodes, final BaseRenderer renderer, RelativePoint point) {
//    if (ListSequence.fromList(nodes).isEmpty()) {
//      return null;
//    }
    List<NodeNavigatable> navigatables = new ArrayList<NodeNavigatable>();
    for (SNodeReference node : nodes) {
      navigatables.add(new NodeNavigatable(project, node));
    }
    navigatables.sort(new Comparator<NodeNavigatable>() {
      @Override
      public int compare(NodeNavigatable o1, NodeNavigatable o2) {
        return getText(o1).compareTo(getText(o2));
      }

      private String getText(NodeNavigatable element) {
        return element.getNodePointer().toString();
      }
    });
    return openTargets(point, navigatables, title, renderer);
  }

  public static RelativePoint getRelativePoint(EditorCell selectedCell, InputEvent inputEvent) {
    if (inputEvent instanceof MouseEvent) {
      return new RelativePoint(((MouseEvent) inputEvent));
    }
    return new RelativePoint((EditorComponent) selectedCell.getEditorComponent(), new Point(selectedCell.getX(), selectedCell.getY()));
  }

  private static Pair<JBPopup, JBList<NodeNavigatable>> openTargets(RelativePoint p, List<NodeNavigatable> targets, String title, ListCellRenderer listRenderer) {
    checkClassLoader();
//    if (targets.isEmpty()) {
//      return null;
//    }
    if (targets.size() == 1) {
      targets.get(0).navigate(true);
      // fixme balloon?
    } else {
      final JBList<NodeNavigatable> list = new JBList<>(targets.toArray(new NodeNavigatable[0]));
      JBPopup popup = new PopupChooserBuilder(list).setTitle(title).setMovable(true).setItemChoosenCallback(new Runnable() {
        @Override
        public void run() {
          int[] ids = list.getSelectedIndices();
          if (ids == null || ids.length == 0) {
            return;
          }
          for (NodeNavigatable selected : list.getSelectedValuesList()) {
            selected.navigate(true);
          }
        }
      }).setRenderer(listRenderer).createPopup();
      popup.show(p);
      return new Pair<>(popup, list);
    }
    return null;
  }

  private static void checkClassLoader() {
    assert !(GoToHelper.class.getClassLoader() instanceof ModuleClassLoader) : "if this class is loaded by a reloadable classloader, this will cause memleaks. See MPS-13481";
  }
}
