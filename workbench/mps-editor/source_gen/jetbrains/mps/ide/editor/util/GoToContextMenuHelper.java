package jetbrains.mps.ide.editor.util;

/*Generated by MPS */

import jetbrains.mps.ide.navigation.NodeNavigatable;
import jetbrains.mps.util.annotation.ToRemove;
import jetbrains.mps.project.Project;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.ide.editor.util.renderer.BaseRenderer;
import com.intellij.ui.awt.RelativePoint;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import javax.swing.ListCellRenderer;
import jetbrains.mps.classloading.ModuleClassLoader;
import javax.swing.JList;
import com.intellij.ui.components.JBList;
import com.intellij.openapi.ui.popup.PopupChooserBuilder;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.Nullable;
import com.intellij.util.Function;
import jetbrains.mps.internal.collections.runtime.ISelector;

public final class GoToContextMenuHelper extends GoToContextMenuHelperBase<NodeNavigatable> {

  /**
   * left for the mbeddr compatibility
   * 
   * @deprecated use the new method instead
   */
  @Deprecated
  @ToRemove(version = 183)
  public static void showMenu(Project project, String title, List<SNodeReference> nodes, final BaseRenderer renderer, RelativePoint point) {
    if (ListSequence.fromList(nodes).isEmpty()) {
      return;
    }
    List<NodeNavigatable> navigatables = new ArrayList<NodeNavigatable>();
    for (SNodeReference node : nodes) {
      navigatables.add(new NodeNavigatable(project, node));
    }
    Collections.sort(navigatables, new Comparator<NodeNavigatable>() {
      @Override
      public int compare(NodeNavigatable o1, NodeNavigatable o2) {
        return getText(o1).compareTo(getText(o2));
      }

      private String getText(NodeNavigatable element) {
        return element.getNodePointer().toString();
      }
    });
    openTargets(point, navigatables, title, renderer);
  }

  @ToRemove(version = 183)
  @Deprecated
  private static void openTargets(RelativePoint p, List<NodeNavigatable> targets, String title, ListCellRenderer listRenderer) {
    assert !(GoToContextMenuHelper.class.getClassLoader() instanceof ModuleClassLoader) : "if this class is loaded by a reloadable classloader, this will cause memleaks. See MPS-13481";
    if (targets.isEmpty()) {
      return;
    }
    if (targets.size() == 1) {
      targets.get(0).navigate(true);
    } else {
      final JList list = new JBList(targets.toArray());
      list.setCellRenderer(listRenderer);
      new PopupChooserBuilder(list).setTitle(title).setMovable(true).setItemChoosenCallback(new Runnable() {
        @Override
        public void run() {
          int[] ids = list.getSelectedIndices();
          if (ids == null || ids.length == 0) {
            return;
          }
          Object[] selectedElements = list.getSelectedValues();
          for (Object element : selectedElements) {
            NodeNavigatable selected = (NodeNavigatable) element;
            selected.navigate(true);
          }
        }
      }).createPopup().show(p);
    }
  }

  private static final Comparator<SNodeReference> DEFAULT_COMPARATOR = new Comparator<SNodeReference>() {
    @Override
    public int compare(SNodeReference n1, SNodeReference n2) {
      return getText(n1).compareTo(getText(n2));
    }

    private String getText(SNodeReference ptr) {
      return ptr + "";
    }
  };

  public GoToContextMenuHelper(@NotNull MPSProject project, @NotNull CaptionFunction captionFun, @NotNull BaseRenderer renderer, @Nullable Comparator<SNodeReference> comparator, @Nullable Function<SNodeReference, String> namer) {
    super(project, captionFun, renderer, adaptComparatorForNavigatable((comparator == null ? DEFAULT_COMPARATOR : comparator)), adaptNamerForNavigatable((namer == null ? NamerFactory.DEFAULT_NAMER_FACTORY.create(project.getRepository()) : namer)));
  }

  public GoToContextMenuHelper(@NotNull MPSProject project, @NotNull CaptionFunction captionFun, @NotNull BaseRenderer<NodeNavigatable> renderer) {
    this(project, captionFun, renderer, null, null);
  }

  @NotNull
  public GoToContextMenuHelperBase.ContextMenuComposite<NodeNavigatable> showMenuWithNodes(@NotNull List<SNodeReference> nodes, @NotNull RelativePoint point) {
    return showMenu(ListSequence.fromList(nodes).distinct().select(new ISelector<SNodeReference, NodeNavigatable>() {
      public NodeNavigatable select(SNodeReference it) {
        return new NodeNavigatable(myProject, it);
      }
    }).toListSequence(), point);
  }

  @NotNull
  public GoToContextMenuHelperBase.ContextMenuComposite<NodeNavigatable> buildPopupWithNodes(@NotNull List<SNodeReference> foundUsages) {
    return buildPopup(ListSequence.fromList(foundUsages).select(new ISelector<SNodeReference, NodeNavigatable>() {
      public NodeNavigatable select(SNodeReference it) {
        return new NodeNavigatable(myProject, it);
      }
    }).toListSequence());
  }

  private static Function<NodeNavigatable, String> adaptNamerForNavigatable(final Function<SNodeReference, String> namer) {
    return new Function<NodeNavigatable, String>() {
      public String fun(NodeNavigatable p0) {
        SNodeReference nodePointer = p0.getNodePointer();
        return namer.fun(nodePointer);
      }
    };
  }

  private static Comparator<NodeNavigatable> adaptComparatorForNavigatable(final Comparator<SNodeReference> comparator) {
    return new Comparator<NodeNavigatable>() {
      @Override
      public int compare(NodeNavigatable n1, NodeNavigatable n2) {
        return comparator.compare(n1.getNodePointer(), n2.getNodePointer());
      }
    };
  }

}
