package jetbrains.mps.ide.editor.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.findusages.findalgorithm.finders.IInterfacedFinder;
import com.intellij.ui.awt.RelativePoint;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.progress.PerformInBackgroundOption;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.progress.ProgressMonitorAdapter;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.editor.util.renderer.DefaultMethodRenderer;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.impl.BackgroundableProcessIndicator;

public final class GoToHelper {
  private GoToHelper() {
  }

  public static void executeFinders(final SNode node, final MPSProject mpsProject, final String title, final IInterfacedFinder finder, final RelativePoint relativePoint) {
    final List<SNodeReference> nodes = ListSequence.fromList(new ArrayList<SNodeReference>());
    Task.Backgroundable task = new Task.Backgroundable(mpsProject.getProject(), "Searching...", true, PerformInBackgroundOption.ALWAYS_BACKGROUND) {
      public void run(@NotNull final ProgressIndicator indicator) {
        mpsProject.getRepository().getModelAccess().runReadAction(new Runnable() {
          public void run() {
            // XXX I know cast to IFinder is stupid here, but it's the way to deal with checkTypeSystem test failures. 
            // We desperately need a mechanism to match stub classes with their MPS origins. 
            for (Object sr : FindUtils.getSearchResults(new ProgressMonitorAdapter(indicator), new SearchQuery(node, new GlobalScope(mpsProject.getRepository())), (IFinder) finder).getResultObjects()) {
              if (sr instanceof SNode) {
                ListSequence.fromList(nodes).addElement(SNodeOperations.getPointer(((SNode) sr)));
              }
            }
          }
        });
      }

      @Override
      public void onSuccess() {
        GoToContextMenuUtil.showNodeMenu(mpsProject, title, ListSequence.fromList(nodes).toListSequence(), new DefaultMethodRenderer(mpsProject.getRepository()), relativePoint);
      }
    };
    ProgressManager.getInstance().runProcessWithProgressAsynchronously(task, new BackgroundableProcessIndicator(task));
  }
}
