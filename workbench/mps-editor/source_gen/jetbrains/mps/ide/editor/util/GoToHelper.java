package jetbrains.mps.ide.editor.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.findusages.findalgorithm.finders.Finder;
import com.intellij.ui.awt.RelativePoint;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.module.SearchScope;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.util.ModelComputeRunnable;
import jetbrains.mps.util.Computable;
import jetbrains.mps.project.GlobalScope;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.progress.ProgressManager;

public final class GoToHelper {
  private GoToHelper() {
  }

  @Deprecated
  public static void showPopupAndSearchNodeInBackground(final SNode node, final MPSProject project, final CaptionFunction captionFun, final Finder finder, final RelativePoint point) {
    SearchQuery query = createNodeQuery(project.getRepository(), node, null);
    PopupSettingsBuilder settings = new PopupSettingsBuilder(project);
    settings.query(query).captionFun(captionFun).finder(finder).point(point);
    showPopupAndSearchInBackground(settings);
  }

  public static SearchQuery createNodeQuery(final SRepository repository, final SNode node, @Nullable final SearchScope scope) {
    ModelAccess modelAccess = repository.getModelAccess();
    SearchQuery query = new ModelComputeRunnable<SearchQuery>(new Computable<SearchQuery>() {
      @Override
      public SearchQuery compute() {
        if (scope == null) {
          return new SearchQuery(node, new GlobalScope(repository));
        }
        return new SearchQuery(node, scope);
      }
    }).runRead(modelAccess);
    return query;
  }

  public static void showPopupAndSearchNodeInBackground(@NotNull final PopupSettingsBuilder settings) {
    showPopupAndSearchInBackground(settings);
  }

  public static void showPopupAndSearchInBackground(@NotNull final PopupSettingsBuilder settings) {
    Task.Backgroundable task = new BackgroundUsageWithPopupTask(settings);
    ProgressManager.getInstance().run(task);
  }
}
