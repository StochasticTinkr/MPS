package jetbrains.mps.datatransfer;

/*Generated by MPS */

import jetbrains.mps.util.annotation.ToRemove;
import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.classloading.MPSClassesListener;
import jetbrains.mps.classloading.MPSClassesListenerAdapter;
import java.util.Set;
import jetbrains.mps.module.ReloadableModuleBase;
import jetbrains.mps.smodel.Language;
import org.apache.log4j.Logger;

@Deprecated
@ToRemove(version = 3.5)
/*package*/ abstract class AbstractManager {
  private final ClassLoaderManager myManager;
  private final MPSClassesListener myListener = new MPSClassesListenerAdapter() {
    @Override
    public void beforeClassesUnloaded(Set<? extends ReloadableModuleBase> modules) {
      AbstractManager.this.clearCaches();
    }
  };

  @Deprecated
  public AbstractManager(final ClassLoaderManager manager) {
    myManager = manager;
  }

  public void init() {
    myManager.addClassesHandler(myListener);
  }

  public void dispose() {
    myManager.removeClassesHandler(myListener);
  }

  public abstract void clearCaches();

  protected static class Descriptor<T> {
    private String myClassName;
    private Language myLanguage;
    private T myInstance;
    private boolean myWasInitialized;
    private Logger myLog;

    public Descriptor(String className, Language language, Logger log) {
      assert className != null;
      myClassName = className;
      assert language != null;
      myLanguage = language;
      assert log != null;
      myLog = log;
    }

    public T getInstance() {
      if (!(myWasInitialized)) {
        try {
          Class postProcessorClass = myLanguage.getClass(myClassName);
          if (postProcessorClass != null) {
            try {
              myInstance = (T) postProcessorClass.newInstance();
            } catch (Exception t) {
              myLog.error(null, t);
            }
          }
        } catch (ClassNotFoundException e) {
          myLog.warn("Class not found (probably code for corresponding model should be regenerated): " + myClassName);
        }
        myWasInitialized = true;
      }
      return myInstance;
    }
  }
}
