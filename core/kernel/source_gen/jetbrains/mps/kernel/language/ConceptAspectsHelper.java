package jetbrains.mps.kernel.language;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.kernel.model.SModelUtil;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.smodel.language.LanguageRuntime;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.runtime.ConceptPresentationAspect;

public class ConceptAspectsHelper {
  public static SNode attachNewConceptAspect(SNode conceptNode, SNode aspectNode, SModel aspectModel) {
    BHReflection.invoke(aspectNode, SMethodTrimmedId.create("setBaseConcept", null, "5r_35Ihc58c"), conceptNode);
    if (SPropertyOperations.getString(conceptNode, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x115eca8579fL, "virtualPackage")) != null) {
      SPropertyOperations.set(aspectNode, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x115eca8579fL, "virtualPackage"), SPropertyOperations.getString(conceptNode, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x115eca8579fL, "virtualPackage")));
    }
    SModelOperations.addRootNode(aspectModel, aspectNode);
    return aspectNode;
  }

  public static <T extends SNode> T attachNewConceptAspect(LanguageAspect aspect, SNode conceptNode, T aspectNode) {
    // [MM] this LanguageAspect usage is reviewed 
    Language language = SModelUtil.getDeclaringLanguage(conceptNode);
    assert language != null : "Language shouldn't be null for " + conceptNode;

    SModel md = aspect.get(language);
    if (md == null) {
      md = aspect.createNew(language);
    }
    attachNewConceptAspect(conceptNode, aspectNode, md);
    return aspectNode;
  }
  public static ConceptPresentation getPresentationAspect(SNode n) {
    SRepository repo = check_b9zw68_a0a0a3(check_b9zw68_a0a0a0d(n)).getRepository();
    if (repo == null) {
      return null;
    }

    LanguageRuntime lang = LanguageRegistry.getInstance(repo).getLanguage(SNodeOperations.getConcept(n).getLanguage());
    return check_b9zw68_a4a3(check_b9zw68_a0e0d(lang), n);
  }

  private static SModule check_b9zw68_a0a0a3(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModule();
    }
    return null;
  }
  private static SModel check_b9zw68_a0a0a0d(SNode checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModel();
    }
    return null;
  }
  private static ConceptPresentation check_b9zw68_a4a3(ConceptPresentationAspect checkedDotOperand, SNode n) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getDescriptor(SNodeOperations.getConcept(n));
    }
    return null;
  }
  private static ConceptPresentationAspect check_b9zw68_a0e0d(LanguageRuntime checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getAspect(ConceptPresentationAspect.class);
    }
    return null;
  }
}
