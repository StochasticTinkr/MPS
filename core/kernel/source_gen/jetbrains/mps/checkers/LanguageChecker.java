package jetbrains.mps.checkers;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.util.DescendantsTreeIterator;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class LanguageChecker implements INodeChecker {
  private Set<AbstractConstraintsChecker> myRules = SetSequence.fromSet(new HashSet<AbstractConstraintsChecker>());
  public LanguageChecker() {
    SetSequence.fromSet(myRules).addElement(new ConstraintsChecker());
    SetSequence.fromSet(myRules).addElement(new RefScopeChecker());
    SetSequence.fromSet(myRules).addElement(new TargetConceptChecker());
    SetSequence.fromSet(myRules).addElement(new UsedLanguagesChecker());
  }
  @Override
  public Set<IErrorReporter> getErrors(SNode rootNode, SRepository repository) {
    SModel model = SNodeOperations.getModel(rootNode);
    assert model != null;
    LanguageErrorsComponent errorsComponent = new LanguageErrorsComponent(model);

    DescendantsTreeIterator fullCheckIterator = new DescendantsTreeIterator(rootNode);

    while (fullCheckIterator.hasNext()) {
      SNode node = fullCheckIterator.next();
      if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x50ef06e32fec9043L, "jetbrains.mps.lang.core.structure.ISkipConstraintsChecking"))) {
        fullCheckIterator.skipChildren();
        continue;
      }
      for (AbstractConstraintsChecker checker : myRules) {
        checker.checkNode(node, errorsComponent, repository);
      }
    }

    Set<IErrorReporter> result = errorsComponent.getErrors();
    errorsComponent.dispose();
    return result;
  }
}
