package jetbrains.mps.checkers;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class LanguageChecker implements INodeChecker {
  private Set<AbstractConstraintsChecker> myRules = SetSequence.fromSet(new HashSet<AbstractConstraintsChecker>());
  public LanguageChecker() {
    SetSequence.fromSet(myRules).addElement(new ConstraintsChecker());
    SetSequence.fromSet(myRules).addElement(new RefScopeChecker());
    SetSequence.fromSet(myRules).addElement(new TargetConceptChecker());
    SetSequence.fromSet(myRules).addElement(new UsedLanguagesChecker());
  }
  @Override
  public Set<IErrorReporter> getErrors(SNode rootNode, final SRepository repository) {
    SModel model = SNodeOperations.getModel(rootNode);
    assert model != null;
    final LanguageErrorsCollector errorsCollector = new LanguageErrorsCollector();

    ListSequence.fromList(SNodeOperations.getNodeDescendants(rootNode, null, false, new SAbstractConcept[]{MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x50ef06e32fec9043L, "jetbrains.mps.lang.core.structure.ISkipConstraintsChecking")})).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x50ef06e32fec9043L, "jetbrains.mps.lang.core.structure.ISkipConstraintsChecking")));
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode node) {
        for (AbstractConstraintsChecker checker : myRules) {
          checker.checkNode(node, errorsCollector, repository);
        }
      }
    });

    Set<IErrorReporter> result = errorsCollector.getErrors();
    return result;
  }
}
