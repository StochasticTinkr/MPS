package jetbrains.mps.checkers;

/*Generated by MPS */

import jetbrains.mps.errors.item.IssueKindReportItem.CheckerCategory;
import jetbrains.mps.errors.item.IssueKindReportItem.ItemKind;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.errors.item.NodeReportItem;
import jetbrains.mps.errors.item.IssueKindReportItem;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.errors.item.IncompatibleTargetReportItem;
import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class TargetConceptChecker extends AbstractNodeCheckerInEditor implements IChecker<SNode, NodeReportItem> {
  public TargetConceptChecker() {
  }
  @Override
  public CheckerCategory getCategory() {
    return IssueKindReportItem.CONSTRAINTS;
  }
  @Override
  public IChecker.AbstractNodeChecker.ErrorSkipCondition skipCondition() {
    return AbstractNodeCheckerInEditor.SKIP_CONSTRAINTS_CONDITION;
  }
  @Override
  public void checkNodeInEditor(SNode node, LanguageErrorsCollector errorsCollector, SRepository repository) {
    for (SNode child : ListSequence.fromList(SNodeOperations.getChildren(node)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SNodeOperations.isAttribute(it));
      }
    })) {
      SContainmentLink link = SNodeOperations.getContainingLink(child);
      if (!(SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(link.getTargetConcept()), SNodeOperations.asSConcept(SNodeOperations.getConcept(child))))) {
        errorsCollector.addError(new IncompatibleTargetReportItem.IncompatibleContainmentTargetReportItem(child));
      }
    }

    for (SReference reference : ListSequence.fromList(SNodeOperations.getReferences(node))) {
      SReferenceLink link = SLinkOperations.getRefLink(reference);
      SNode target = SLinkOperations.getTargetNode(reference);
      if (target == null) {
        continue;
      }
      if (!(SConceptOperations.isSuperConceptOf(SNodeOperations.asSConcept(link.getTargetConcept()), SNodeOperations.asSConcept(SNodeOperations.getConcept(target))))) {
        errorsCollector.addError(new IncompatibleTargetReportItem.IncompatibleReferenceTargetReportItem(reference, target));
      }
    }
  }
}
