package jetbrains.mps.checkers;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.errors.messageTargets.ReferenceMessageTarget;

public class TargetConceptChecker extends AbstractConstraintsChecker {
  public TargetConceptChecker() {
  }
  @Override
  public void checkNode(SNode node, LanguageErrorsCollector errorsCollector, SRepository repository) {
    for (SNode child : ListSequence.fromList(SNodeOperations.getChildren(node)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SNodeOperations.isAttribute(it));
      }
    })) {
      SContainmentLink link = SNodeOperations.getContainingLink(child);
      if (!(link.isValid())) {
        continue;
      }
      if (!(SNodeOperations.getConcept(child).isSubConceptOf(link.getTargetConcept()))) {
        errorsCollector.addError(child, "incompatible target concept in role \"" + SNodeOperations.getContainingLink(child) + "\": subconcept of \"" + link.getTargetConcept() + "\" expected, \"" + SNodeOperations.getConcept(child) + "\" found", null);
      }
    }

    for (SReference reference : ListSequence.fromList(SNodeOperations.getReferences(node))) {
      SReferenceLink link = SLinkOperations.getRefLink(reference);
      if (!(link.isValid())) {
        continue;
      }
      SNode target = SLinkOperations.getTargetNode(reference);
      if (target == null) {
        continue;
      }
      if (!(SNodeOperations.getConcept(target).isSubConceptOf(link.getTargetConcept()))) {
        errorsCollector.addError(node, "incompatible target concept in role \"" + ((SReference) reference).getLink().getName() + "\": subconcept of \"" + link.getTargetConcept() + "\" expected, \"" + SNodeOperations.getConcept(target) + "\" found", null, new ReferenceMessageTarget(link.getName()));
      }
    }
  }
}
