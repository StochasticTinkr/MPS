package jetbrains.mps.checkers;

/*Generated by MPS */

import jetbrains.mps.util.containers.MultiMap;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.util.containers.SetBasedMultiMap;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.QuickFixProvider;
import jetbrains.mps.errors.SimpleErrorReporter;
import jetbrains.mps.errors.MessageStatus;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public class LanguageErrorsCollector {
  protected MultiMap<SNode, IErrorReporter> myNodesToErrors = new SetBasedMultiMap<SNode, IErrorReporter>();

  public void addError(SNode node, String errorString, @Nullable SNodeReference ruleNode) {
    for (SNode anc : ListSequence.fromList(SNodeOperations.getNodeAncestors(node, null, false))) {
      addDependency(anc);
    }
    addError(node, errorString, ruleNode, new NodeMessageTarget());
  }

  public void addError(SNode errorNode, String errorString, @Nullable SNodeReference ruleNode, MessageTarget messageTarget) {
    addError(errorNode, errorString, ruleNode, messageTarget, null);
  }

  public void addError(SNode errorNode, String errorString, @Nullable SNodeReference ruleNode, MessageTarget messageTarget, QuickFixProvider intentionProvider) {
    SimpleErrorReporter reporter = new SimpleErrorReporter(errorNode, errorString, ruleNode, MessageStatus.ERROR, messageTarget);
    if (intentionProvider != null) {
      reporter.setIntentionProvider(intentionProvider);
    }

    myNodesToErrors.putValue(errorNode, reporter);
  }

  public Set<IErrorReporter> getErrors() {
    Iterable<? extends IErrorReporter> values = myNodesToErrors.values();
    return SetSequence.fromSetWithValues(new HashSet<IErrorReporter>(), values);
  }

  public void addDependency(SNode dependency) {
  }

  public <Result> Result runCheckingAction(_FunctionTypes._return_P0_E0<? extends Result> action) {
    return action.invoke();
  }

}
