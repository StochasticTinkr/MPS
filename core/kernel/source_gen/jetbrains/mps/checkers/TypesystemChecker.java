package jetbrains.mps.checkers;

/*Generated by MPS */

import jetbrains.mps.typesystem.inference.DefaultTypecheckingContextOwner;
import java.util.Set;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.typesystem.inference.TypeContextManager;
import jetbrains.mps.typesystem.inference.ITypechecking;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.util.Pair;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class TypesystemChecker implements INodeChecker {
  private DefaultTypecheckingContextOwner myContextOwner = new DefaultTypecheckingContextOwner();
  public TypesystemChecker() {
  }
  @Override
  public Set<IErrorReporter> getErrors(SNode node, SRepository repository) {
    final Set<IErrorReporter> errors = SetSequence.fromSet(new HashSet<IErrorReporter>());
    TypeContextManager.getInstance().runTypeCheckingAction(myContextOwner, node, new ITypechecking.Action() {
      public void run(TypeCheckingContext typeContext) {
        for (Pair<SNode, List<IErrorReporter>> pair : typeContext.checkRootAndGetErrors(true)) {
          SetSequence.fromSet(errors).addSequence(ListSequence.fromList(pair.o2));
        }
      }
    });
    return errors;
  }
}
