package jetbrains.mps.checkers;

/*Generated by MPS */

import jetbrains.mps.errors.item.ReportItem;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.util.Consumer;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class IteratingChecker<O, P, I extends ReportItem> implements IChecker<O, I> {
  private IChecker<P, I> myOrigin;
  private _FunctionTypes._return_P1_E0<? extends Iterable<P>, ? super O> myIterate;
  public IteratingChecker(IChecker<P, I> origin, _FunctionTypes._return_P1_E0<? extends Iterable<P>, ? super O> iterate) {
    myOrigin = origin;
    myIterate = iterate;
  }
  @Override
  public void check(O toCheck, SRepository repository, Consumer<I> errorCollector, ProgressMonitor monitor) {
    for (P element : Sequence.fromIterable(myIterate.invoke(toCheck))) {
      myOrigin.check(element, repository, errorCollector, monitor);
    }
  }
}
