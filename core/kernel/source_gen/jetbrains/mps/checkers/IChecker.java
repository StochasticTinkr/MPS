package jetbrains.mps.checkers;

/*Generated by MPS */

import jetbrains.mps.errors.item.ReportItem;
import jetbrains.mps.errors.item.IssueKindReportItem;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.errors.item.NodeReportItem;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.util.Consumer;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.util.DescendantsTreeIterator;

/**
 * Base interface for custom checkers.
 * Custom checker should extend one of the following base classes depending on preciseness of the checker
 */
public interface IChecker<O, I extends ReportItem> extends IAbstractChecker<O, I> {
  String getCategory();


  abstract class AbstractChecker<O, I extends ReportItem> implements IChecker<O, I> {
  }

  abstract class AbstractModuleChecker<I extends IssueKindReportItem> extends IChecker.AbstractChecker<SModule, I> {
  }

  abstract class AbstractModelChecker<I extends IssueKindReportItem> extends IChecker.AbstractChecker<SModel, I> {
    public static <I extends NodeReportItem> IChecker.AbstractModelChecker<I> wrapRootChecker(IChecker.AbstractRootChecker<I> rootChecker) {
      final IChecker<SModel, I> result = new IteratingChecker<SModel, SNode, I>(rootChecker, new _FunctionTypes._return_P1_E0<IteratingChecker.CollectionIteratorWithProgress<SNode>, SModel>() {
        public IteratingChecker.CollectionIteratorWithProgress<SNode> invoke(SModel model) {
          return new IteratingChecker.CollectionIteratorWithProgress<SNode>(SModelOperations.roots(model, null));
        }
      });
      return new IChecker.AbstractModelChecker<I>() {
        public String getCategory() {
          return result.getCategory();
        }
        @Override
        public void check(SModel model, SRepository repository, Consumer<? super I> errorCollector, ProgressMonitor monitor) {
          result.check(model, repository, errorCollector, monitor);
        }
      };
    }
  }

  abstract class AbstractRootChecker<I extends NodeReportItem> extends IChecker.AbstractChecker<SNode, I> {
    public static <I extends NodeReportItem> IChecker.AbstractRootChecker<I> wrapNodeChecker(final IChecker.AbstractNodeChecker<I> nodeChecker) {
      final IteratingChecker<SNode, SNode, I> skippingChecker = new IteratingChecker<SNode, SNode, I>(nodeChecker, new _FunctionTypes._return_P1_E0<IteratingChecker.CollectionIteratorWithProgress<SNode>, SNode>() {
        public IteratingChecker.CollectionIteratorWithProgress<SNode> invoke(SNode root) {
          List<SNode> toCheck = ListSequence.fromList(new ArrayList<SNode>());
          DescendantsTreeIterator fullCheckIterator = new DescendantsTreeIterator(root);
          while (fullCheckIterator.hasNext()) {
            SNode node = fullCheckIterator.next();
            if (nodeChecker.skipCondition().skipSubtree(node)) {
              fullCheckIterator.skipChildren();
              continue;
            }
            if (nodeChecker.skipCondition().skipSingleNode(node)) {
              continue;
            }
            ListSequence.fromList(toCheck).addElement(node);
          }
          return new IteratingChecker.CollectionIteratorWithProgress<SNode>(toCheck);
        }
      });
      return new IChecker.AbstractRootChecker<I>() {
        public String getCategory() {
          return skippingChecker.getCategory();
        }
        @Override
        public void check(SNode root, SRepository repository, Consumer<? super I> errorCollector, ProgressMonitor monitor) {
          skippingChecker.check(root, repository, errorCollector, monitor);
        }
      };
    }
  }

  abstract class AbstractNodeChecker<I extends NodeReportItem> extends IChecker.AbstractChecker<SNode, I> {
    public IChecker.AbstractNodeChecker.ErrorSkipCondition skipCondition() {
      return SKIP_NOTHING_CONDITION;
    }
    public interface ErrorSkipCondition {
      boolean skipSingleNode(SNode node);
      boolean skipSubtree(SNode root);
    }
    public static final IChecker.AbstractNodeChecker.ErrorSkipCondition SKIP_NOTHING_CONDITION = new IChecker.AbstractNodeChecker.ErrorSkipCondition() {
      public boolean skipSingleNode(SNode node) {
        return false;
      }
      public boolean skipSubtree(SNode root) {
        return false;
      }
    };
  }

}
