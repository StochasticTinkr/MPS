package jetbrains.mps.smodel.search;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.util.SNodeOperations;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import java.util.Collections;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNodeUtil;

public class ConceptAndSuperConceptsScope extends Scope {
  private SNode myTopConcept;
  public ConceptAndSuperConceptsScope(@Nullable SNode topConcept) {
    myTopConcept = topConcept;
  }

  @Override
  public SNode resolve(SNode anchor, String refText) {
    // [MM] left intact, change if needed 
    return null;
  }

  @Override
  public Iterable<SNode> getAvailableElements(@Nullable final String prefix) {
    if ((prefix == null || prefix.length() == 0)) {
      return getNodes(null);
    }
    return getNodes(new Condition<SNode>() {
      @Override
      public boolean met(SNode p0) {
        if (p0 == null) {
          return false;
        }
        String presentation = getReferenceText(null, p0);
        return presentation != null && presentation.startsWith(prefix);
      }
    });
  }

  @Override
  public String getReferenceText(SNode anchor, SNode target) {
    String resolveInfo = SNodeOperations.getResolveInfo(target);
    if ((resolveInfo != null && resolveInfo.length() > 0)) {
      return resolveInfo;
    }
    return target.getPresentation();
  }

  @NotNull
  public List<SNode> getNodes(@Nullable Condition<SNode> condition) {
    if (myTopConcept == null) {
      return Collections.<SNode>emptyList();
    }
    List<SNode> result = new ArrayList<SNode>();
    //  filter by condition 
    for (SNode node : ConceptAndSuperConceptsCache.getInstance(myTopConcept).getConcepts()) {
      if (node == null) {
        continue;
      }
      for (SNode n : SNodeUtil.getDescendants(node, condition, true)) {
        result.add(n);
      }
    }
    return result;
  }
}
