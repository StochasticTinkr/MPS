package jetbrains.mps.project.persistence;

/*Generated by MPS */

import jetbrains.mps.project.structure.modules.DevkitDescriptor;
import jetbrains.mps.vfs.IFile;
import org.jdom.Document;
import jetbrains.mps.util.JDOMUtil;
import org.jdom.Element;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.List;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.io.OutputStream;
import org.apache.log4j.Level;

public class DevkitDescriptorPersistence {
  private DevkitDescriptorPersistence() {
  }
  public static DevkitDescriptor loadDevKitDescriptor(IFile file) {
    try {
      Document document = JDOMUtil.loadDocument(file);
      final Element root = document.getRootElement();
      DevkitDescriptor descriptor = new _FunctionTypes._return_P0_E0<DevkitDescriptor>() {
        public DevkitDescriptor invoke() {
          final DevkitDescriptor result_raojav_a0a0c0a0b = new DevkitDescriptor();
          final String result_raojav_a0a0a0c0a0b = root.getAttributeValue("name");
          result_raojav_a0a0c0a0b.setNamespace(result_raojav_a0a0a0c0a0b);
          String uuid = root.getAttributeValue("uuid");
          if (uuid != null) {
            final ModuleId result_raojav_a0a2a0a0c0a0b = ModuleId.fromString(uuid);
            result_raojav_a0a0c0a0b.setId(result_raojav_a0a2a0a0c0a0b);
          }
          for (Element exportedLang : ListSequence.fromList((List<Element>) root.getChildren("exported-language"))) {
            result_raojav_a0a0c0a0b.getExportedLanguages().add(PersistenceFacade.getInstance().createModuleReference(exportedLang.getAttributeValue("name")));
          }

          Element extendedDevKits = ListSequence.fromList(((List<Element>) root.getChildren("extendedDevKits"))).first();
          if (extendedDevKits != null) {
            for (Element xde : ListSequence.fromList((List<Element>) extendedDevKits.getChildren("extendedDevKit"))) {
              result_raojav_a0a0c0a0b.getExtendedDevkits().add(PersistenceFacade.getInstance().createModuleReference(xde.getText()));
            }
          }

          Element exportedSolutions = ListSequence.fromList(((List<Element>) root.getChildren("exported-solutions"))).first();
          if (exportedSolutions != null) {
            for (Element xse : ListSequence.fromList((List<Element>) exportedSolutions.getChildren("exported-solution"))) {
              result_raojav_a0a0c0a0b.getExportedSolutions().add(PersistenceFacade.getInstance().createModuleReference(xse.getText()));
            }
          }
          Element genPlanElement;
          if ((genPlanElement = root.getChild("generation-plan")) != null) {
            final SModelReference result_raojav_a0a11a0a0c0a0b = PersistenceFacade.getInstance().createModelReference(genPlanElement.getAttributeValue("model"));
            result_raojav_a0a0c0a0b.setAssociatedPlan(result_raojav_a0a11a0a0c0a0b);
          }
          return result_raojav_a0a0c0a0b;
        }
      }.invoke();


      ModuleDescriptorPersistence.setTimestamp(descriptor, file);
      return descriptor;
    } catch (Exception e) {
      throw new ModuleReadException(e);
    }
  }
  protected static Logger LOG = LogManager.getLogger(DevkitDescriptorPersistence.class);
  public static void saveDevKitDescriptor(IFile file, final DevkitDescriptor descriptor) {
    Element root = new _FunctionTypes._return_P0_E0<Element>() {
      public Element invoke() {
        final Element result_raojav_a0a0a0c = new Element("dev-kit");
        result_raojav_a0a0a0c.setAttribute("name", descriptor.getNamespace());
        if (descriptor.getId() != null) {
          result_raojav_a0a0a0c.setAttribute("uuid", descriptor.getId().toString());
        }

        for (final SModuleReference lang : SetSequence.fromSet(descriptor.getExportedLanguages())) {
          result_raojav_a0a0a0c.addContent(new _FunctionTypes._return_P0_E0<Element>() {
            public Element invoke() {
              final Element result_raojav_a0a0a0a3a0a0a0c = new Element("exported-language");
              result_raojav_a0a0a0a3a0a0a0c.setAttribute("name", lang.toString());
              return result_raojav_a0a0a0a3a0a0a0c;
            }
          }.invoke());
        }

        if (!(descriptor.getExtendedDevkits().isEmpty())) {
          result_raojav_a0a0a0c.addContent(new _FunctionTypes._return_P0_E0<Element>() {
            public Element invoke() {
              final Element result_raojav_a0a0a0a5a0a0a0c = new Element("extendedDevKits");
              for (final SModuleReference ref : SetSequence.fromSet(descriptor.getExtendedDevkits())) {
                result_raojav_a0a0a0a5a0a0a0c.addContent(new _FunctionTypes._return_P0_E0<Element>() {
                  public Element invoke() {
                    final Element result_raojav_a0a0a0a0a0a0a0a5a0a0a0c = new Element("extendedDevKit");
                    result_raojav_a0a0a0a0a0a0a0a5a0a0a0c.setText(ref.toString());
                    return result_raojav_a0a0a0a0a0a0a0a5a0a0a0c;
                  }
                }.invoke());
              }
              return result_raojav_a0a0a0a5a0a0a0c;
            }
          }.invoke());
        }

        if (!(descriptor.getExportedSolutions().isEmpty())) {
          result_raojav_a0a0a0c.addContent(new _FunctionTypes._return_P0_E0<Element>() {
            public Element invoke() {
              final Element result_raojav_a0a0a0a7a0a0a0c = new Element("exported-solutions");
              for (final SModuleReference ref : SetSequence.fromSet(descriptor.getExportedSolutions())) {
                result_raojav_a0a0a0a7a0a0a0c.addContent(new _FunctionTypes._return_P0_E0<Element>() {
                  public Element invoke() {
                    final Element result_raojav_a0a0a0a0a0a0a0a7a0a0a0c = new Element("exported-solution");
                    result_raojav_a0a0a0a0a0a0a0a7a0a0a0c.setText(ref.toString());
                    return result_raojav_a0a0a0a0a0a0a0a7a0a0a0c;
                  }
                }.invoke());
              }
              return result_raojav_a0a0a0a7a0a0a0c;
            }
          }.invoke());
        }

        if (descriptor.getAssociatedGenPlan() != null) {
          Element genPlanElement = new Element("generation-plan");
          genPlanElement.setAttribute("model", PersistenceFacade.getInstance().asString(descriptor.getAssociatedGenPlan()));
          result_raojav_a0a0a0c.addContent(genPlanElement);
        }

        return result_raojav_a0a0a0c;
      }
    }.invoke();


    try {
      OutputStream os = file.openOutputStream();
      JDOMUtil.writeDocument(new Document(root), os);
    } catch (Exception e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", e);
      }
    }

    ModuleDescriptorPersistence.setTimestamp(descriptor, file);
  }
}
