package jetbrains.mps.project.persistence;

/*Generated by MPS */

import jetbrains.mps.project.structure.modules.SolutionDescriptor;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.util.MacroHelper;
import org.jdom.Document;
import jetbrains.mps.util.JDOMUtil;
import org.jdom.Element;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.project.ModuleId;
import jetbrains.mps.project.structure.modules.SolutionKind;
import jetbrains.mps.util.xml.XmlUtil;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.apache.log4j.Level;
import java.io.OutputStream;

public class SolutionDescriptorPersistence {
  public static final String SOURCE_PATH = "sourcePath";
  public static final String SOURCE_PATH_SOURCE = "source";
  public static final String COMPILE_IN_MPS = "compileInMPS";
  private SolutionDescriptorPersistence() {
  }
  public static SolutionDescriptor loadSolutionDescriptor(IFile file, final MacroHelper macroHelper) {
    SolutionDescriptor descriptor;
    try {
      Document document = JDOMUtil.loadDocument(file);
      final Element rootElement = document.getRootElement();
      final String contentRoot = file.getParent().getPath();

      assert rootElement != null;

      descriptor = new _FunctionTypes._return_P0_E0<SolutionDescriptor>() {
        public SolutionDescriptor invoke() {
          final SolutionDescriptor result_8ckma3_a0a0g0b0e = new SolutionDescriptor();
          final String result_8ckma3_a0a0a0g0b0e = rootElement.getAttributeValue("name");
          result_8ckma3_a0a0g0b0e.setNamespace(result_8ckma3_a0a0a0g0b0e);

          if (rootElement.getAttributeValue("uuid") != null) {
            final ModuleId result_8ckma3_a0a2a0a0g0b0e = ModuleId.fromString(rootElement.getAttributeValue("uuid"));
            result_8ckma3_a0a0g0b0e.setId(result_8ckma3_a0a2a0a0g0b0e);
          }

          String pluginKind = rootElement.getAttributeValue("pluginKind");
          if (pluginKind != null && pluginKind.length() > 0) {
            final SolutionKind result_8ckma3_a0a5a0a0g0b0e = SolutionKind.valueOf(pluginKind);
            result_8ckma3_a0a0g0b0e.setKind(result_8ckma3_a0a5a0a0g0b0e);
          }

          final boolean result_8ckma3_a7a0a0g0b0e = XmlUtil.booleanWithDefault(rootElement, COMPILE_IN_MPS, false);
          result_8ckma3_a0a0g0b0e.setCompileInMPS(result_8ckma3_a7a0a0g0b0e);

          String moduleVersion = rootElement.getAttributeValue("moduleVersion");
          if (moduleVersion != null) {
            try {
              result_8ckma3_a0a0g0b0e.setModuleVersion(Integer.parseInt(moduleVersion));
            } catch (NumberFormatException ignored) {
            }
          }

          String genOutput = rootElement.getAttributeValue("generatorOutputPath");
          if ((genOutput != null && genOutput.length() > 0)) {
            final String result_8ckma3_a0a31a0a0g0b0e = macroHelper.expandPath(genOutput);
            result_8ckma3_a0a0g0b0e.setOutputPath(result_8ckma3_a0a31a0a0g0b0e);
          }

          result_8ckma3_a0a0g0b0e.getModelRootDescriptors().addAll(ModuleDescriptorPersistence.loadModelRoots(XmlUtil.children(XmlUtil.first(rootElement, "models"), "modelRoot"), contentRoot, macroHelper));

          Element facets = XmlUtil.first(rootElement, "facets");
          if (facets != null) {
            result_8ckma3_a0a0g0b0e.getModuleFacetDescriptors().addAll(ModuleDescriptorPersistence.loadFacets(XmlUtil.children(facets, "facet"), macroHelper));
          }


          Element stubModelEntries = XmlUtil.first(rootElement, "stubModelEntries");
          if (stubModelEntries != null) {
            List<String> roots = ModuleDescriptorPersistence.loadStubModelEntries(stubModelEntries, macroHelper);
            result_8ckma3_a0a0g0b0e.getAdditionalJavaStubPaths().addAll(roots);
          }

          ModuleDescriptorPersistence.loadDependencies(result_8ckma3_a0a0g0b0e, rootElement);

          for (Element entryElement : Sequence.fromIterable(XmlUtil.children(XmlUtil.first(rootElement, SOURCE_PATH), SOURCE_PATH_SOURCE))) {
            result_8ckma3_a0a0g0b0e.getSourcePaths().add(macroHelper.expandPath(entryElement.getAttributeValue("path")));
          }
          return result_8ckma3_a0a0g0b0e;
        }
      }.invoke();
    } catch (Exception e) {
      throw new ModuleReadException(e);
    }
    ModuleDescriptorPersistence.setTimestamp(descriptor, file);
    return descriptor;
  }
  protected static Logger LOG = LogManager.getLogger(SolutionDescriptorPersistence.class);
  public static void saveSolutionDescriptor(IFile file, SolutionDescriptor descriptor, MacroHelper macroHelper) {
    if (file.isReadOnly()) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Can't save " + file.getPath());
      }
      return;
    }

    Element result = new Element("solution");
    if (descriptor.getNamespace() != null) {
      result.setAttribute("name", descriptor.getNamespace());
    }
    if (descriptor.getId() != null) {
      result.setAttribute("uuid", descriptor.getId().toString());
    }
    result.setAttribute("moduleVersion", Integer.toString(descriptor.getModuleVersion()));
    if (descriptor.getKind() != SolutionKind.NONE) {
      result.setAttribute("pluginKind", descriptor.getKind().name());
    }
    result.setAttribute(COMPILE_IN_MPS, Boolean.toString(descriptor.getCompileInMPS()));
    if (descriptor.getOutputPath() != null) {
      result.setAttribute("generatorOutputPath", macroHelper.shrinkPath(descriptor.getOutputPath()));
    }

    Element models = new Element("models");
    ModuleDescriptorPersistence.saveModelRoots(models, descriptor.getModelRootDescriptors(), macroHelper);
    result.addContent(models);

    if (!(descriptor.getModuleFacetDescriptors().isEmpty())) {
      Element facets = new Element("facets");
      ModuleDescriptorPersistence.saveFacets(facets, descriptor.getModuleFacetDescriptors(), macroHelper);
      result.addContent(facets);
    }


    if (!(descriptor.getAdditionalJavaStubPaths().isEmpty())) {
      Element stubModelEntries = new Element("stubModelEntries");
      ModuleDescriptorPersistence.saveStubModelEntries(stubModelEntries, descriptor.getAdditionalJavaStubPaths(), macroHelper);
      result.addContent(stubModelEntries);
    }

    Element sourcePath = new Element(SOURCE_PATH);
    for (String p : descriptor.getSourcePaths()) {
      XmlUtil.tagWithAttribute(sourcePath, SOURCE_PATH_SOURCE, "path", macroHelper.shrinkPath(p));
    }
    result.addContent(sourcePath);

    ModuleDescriptorPersistence.saveDependencies(result, descriptor);

    try {
      OutputStream os = file.openOutputStream();
      JDOMUtil.writeDocument(new Document(result), os);
    } catch (Exception e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", e);
      }
    }

    ModuleDescriptorPersistence.setTimestamp(descriptor, file);
  }
}
