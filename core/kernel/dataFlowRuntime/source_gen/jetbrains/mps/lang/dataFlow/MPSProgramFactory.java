package jetbrains.mps.lang.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.framework.ProgramFactory;
import jetbrains.mps.lang.dataFlow.framework.NamedAnalyzerId;
import java.util.Collection;
import jetbrains.mps.lang.dataFlow.framework.Program;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.dataFlow.framework.instructions.InstructionBuilder;
import jetbrains.mps.lang.dataFlow.framework.ProgramBuilderContext;
import jetbrains.mps.lang.dataFlow.framework.AnalyzerRules;

public class MPSProgramFactory implements ProgramFactory<NamedAnalyzerId> {
  private Collection<String> myModes;
  public MPSProgramFactory(Collection<String> modes) {
    myModes = modes;
  }
  @Override
  public Program createProgram(SNode node) {
    return new MPSProgramBuilder(null, new InstructionBuilder(), new ProgramBuilderContext() {
      public Collection<String> getBuilderModes() {
        return myModes;
      }
    }).buildProgram(node);
  }
  @Override
  public void prepareProgram(Program program, SNode node, NamedAnalyzerId analyzerId) {
    new AnalyzerRules(analyzerId.getAnalyzerFqName(), node, program).apply();
  }

  protected Collection<String> getModes() {
    return myModes;
  }
}
