package jetbrains.mps.tool.common;

/*Generated by MPS */

import org.apache.log4j.Level;
import java.util.Map;
import java.util.LinkedHashMap;
import java.io.File;
import org.jdom.Element;

/**
 * Keeps properties necessary to start an MPS instance and to execute a worker class within this new instance. 
 * Primary purpose is to supply persistence of the attributes to ensure they get passed between Java process boundaries.
 * Primary scenario for this class is to get MPS started in a dtinct setup (e.g. by configuring IdeaEnvionment with EnvironmentConfig which gets populated with the properties serialized by this class)
 * Inlike Script counterpart, doesn't know anything about specific ant tasks and their possible arguments.
 * FIXME deserves better name
 * 
 * FIXME auxiliary properties are likely not part of MPS statup sequence
 * FIXME myLibraries - what the hell is 'name' key, and do I really want to stick to File there provided I may use macro values as part of a library path
 */
public class ScriptData {
  public static final String ROOT_TASKDATA = "taskdata";
  public static final String PROP_WORKER = "worker";
  public static final String PROP_FAILONERROR = "failOnError";
  public static final String PROP_LOGLEVEL = "logLevel";
  public static final String PROP_LOADBOOTSTRAPLIBRARIES = "loadBootstrapLibraries";
  public static final String ELEM_PROPERTY = "property";
  public static final String ELEM_MACRO = "macro";
  public static final String NAME = "name";
  public static final String VALUE = "value";
  public static final String PATH = "path";

  public static final String ELEM_LIBRARIES = "libraries";
  public static final String ELEM_LIBRARY = "library";

  private static final String ELEM_REPO = "repository";
  private static final String ELEM_REPO_FOLDER = "folder";
  private static final String ELEM_REPO_MODULEFILE = "module";

  private String myWorker;
  private boolean myFailOnError = true;
  private Level myLogLevel = Level.INFO;
  private boolean myLoadBootstrapLibraries = true;
  private Map<String, String> myProperties = new LinkedHashMap<String, String>();
  private Map<String, String> myMacros = new LinkedHashMap<String, String>();
  private Map<String, File> myLibraries = new LinkedHashMap<String, File>();
  private RepositoryDescriptor myRepo = null;

  public ScriptData() {
  }

  public void write(Element root) {
    Element misc = new Element(ROOT_TASKDATA);
    if (myWorker != null) {
      misc.setAttribute(PROP_WORKER, myWorker);
    }
    misc.setAttribute(PROP_FAILONERROR, Boolean.toString(myFailOnError));
    misc.setAttribute(PROP_LOGLEVEL, Integer.toString(myLogLevel.toInt()));
    misc.setAttribute(PROP_LOADBOOTSTRAPLIBRARIES, Boolean.toString(myLoadBootstrapLibraries));
    root.addContent(misc);

    if (!(myLibraries.isEmpty())) {
      Element libraries = new Element(ELEM_LIBRARIES);
      for (String key : myLibraries.keySet()) {
        libraries.addContent(new Element(ELEM_LIBRARY).setAttribute(NAME, key).setAttribute(PATH, myLibraries.get(key).getAbsolutePath()));
      }
      root.addContent(libraries);
    }
    if (myRepo != null) {
      Element repo = new Element(ELEM_REPO);
      for (String f : myRepo.folders) {
        repo.addContent(new Element(ELEM_REPO_FOLDER).setAttribute(PATH, f));
      }
      for (String f : myRepo.files) {
        repo.addContent(new Element(ELEM_REPO_MODULEFILE).setAttribute(PATH, f));
      }
      root.addContent(repo);
    }
    for (String key : myMacros.keySet()) {
      root.addContent(new Element(ELEM_MACRO).setAttribute(NAME, key).setAttribute(VALUE, myMacros.get(key)));
    }
    // auxiliary properties one may want to share using this script. They are not interpreted by MPS startup sequence 
    // and therefore shall not be part of the class, perhaps. OTOH, it's quite convenient to keep everything related to values passed between task and worker in a single place. 
    for (String key : myProperties.keySet()) {
      root.addContent(new Element(ELEM_PROPERTY).setAttribute(NAME, key).setAttribute(VALUE, myProperties.get(key)));
    }
  }

  public void read(Element root) {
    Element misc = root.getChild(ROOT_TASKDATA);
    myWorker = misc.getAttributeValue(PROP_WORKER);
    myFailOnError = Boolean.parseBoolean(misc.getAttributeValue(PROP_FAILONERROR));
    int logLevelInt = Integer.parseInt(misc.getAttributeValue(PROP_LOGLEVEL));
    myLogLevel = Level.toLevel(logLevelInt, Level.INFO);
    myLoadBootstrapLibraries = Boolean.parseBoolean(misc.getAttributeValue(PROP_LOADBOOTSTRAPLIBRARIES));

    for (Element e : root.getChildren(ELEM_LIBRARIES)) {
      for (Element lib : e.getChildren(ELEM_LIBRARY)) {
        File file = new File(lib.getAttributeValue(PATH));
        addLibrary(lib.getAttributeValue(NAME), file);
      }
    }

    for (Element e : root.getChildren(ELEM_REPO)) {
      RepositoryDescriptor repo = new RepositoryDescriptor();
      for (Element f : e.getChildren(ELEM_REPO_FOLDER)) {
        repo.folders.add(f.getAttributeValue(PATH));
      }
      for (Element f : e.getChildren(ELEM_REPO_MODULEFILE)) {
        repo.files.add(f.getAttributeValue(PATH));
      }
      // I know I'm inside a loop, but I don't expect more that 1 <repo> tag 
      setRepo(repo);
    }

    for (Element e : root.getChildren(ELEM_PROPERTY)) {
      addMacro(e.getAttributeValue(NAME), e.getAttributeValue(VALUE));
    }
    for (Element e : root.getChildren(ELEM_PROPERTY)) {
      addProperty(e.getAttributeValue(NAME), e.getAttributeValue(VALUE));
    }


  }

  public void setWorker(String workerClass) {
    myWorker = workerClass;
  }
  public String getWorker() {
    return myWorker;
  }
  public void setFailOnError(boolean failOnError) {
    myFailOnError = failOnError;
  }
  public boolean getFailOnError() {
    return myFailOnError;
  }
  public void setLogLevel(Level logLevel) {
    myLogLevel = logLevel;
  }
  public Level getLogLevel() {
    return myLogLevel;
  }
  public RepositoryDescriptor getRepo() {
    return myRepo;
  }
  public void setRepo(RepositoryDescriptor repo) {
    myRepo = repo;
  }
  public void setLoadBootstrapLibraries(boolean isLoadBootstrapLibraries) {
    myLoadBootstrapLibraries = isLoadBootstrapLibraries;
  }
  public boolean getLoadBootstrapLibraries() {
    return myLoadBootstrapLibraries;
  }
  public void setProperties(Map<String, String> properties) {
    myProperties = properties;
  }
  public Map<String, String> getProperties() {
    return myProperties;
  }
  public void addProperty(String key, String value) {
    myProperties.put(key, value);
  }
  public void setMacros(Map<String, String> macros) {
    myMacros = macros;
  }
  public Map<String, String> getMacros() {
    return myMacros;
  }
  public void addMacro(String key, String value) {
    myMacros.put(key, value);
  }
  public void setLibraries(Map<String, File> libraries) {
    myLibraries = libraries;
  }
  public Map<String, File> getLibraries() {
    return myLibraries;
  }
  public void addLibrary(String name, File library) {
    myLibraries.put(name, library);
  }
}
