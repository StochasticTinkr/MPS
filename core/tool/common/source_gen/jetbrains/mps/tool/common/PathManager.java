package jetbrains.mps.tool.common;

/*Generated by MPS */

import org.jetbrains.annotations.NonNls;
import jetbrains.mps.core.tool.environment.common.FileUtil;
import java.io.File;
import jetbrains.mps.core.tool.environment.common.SystemInfo;
import java.io.IOException;
import org.jetbrains.annotations.Nullable;
import java.net.URL;
import jetbrains.mps.core.tool.environment.common.StringUtil;
import jetbrains.mps.core.tool.environment.common.URLUtil;
import java.io.InputStream;
import java.io.BufferedInputStream;
import java.io.FileInputStream;
import java.util.PropertyResourceBundle;
import java.util.Enumeration;
import java.util.Properties;
import java.util.Set;

/**
 * 
 * @deprecated Likely, shall cease to exist. No reason to duplicate IDEA startup code. IdeaEnvironment starts IDEA app, and Ant has to ensure classpath only
 */
@Deprecated
public class PathManager {

  /**
   * copied from idea PathManager since we do not want to depend from here (it is core) on idea
   */
  @NonNls
  private static final String PROPERTIES_FILE = "idea.properties.file";
  @NonNls
  private static final String PROPERTIES_FILE_NAME = "idea.properties";
  @NonNls
  private static final String PROPERTY_CONFIG_PATH = "idea.config.path";
  @NonNls
  private static final String PROPERTY_PLUGINS_PATH = "idea.plugins.path";
  @NonNls
  private static final String PROPERTY_HOME_PATH = "idea.home.path";
  @NonNls
  public static final String PROPERTY_PATHS_SELECTOR = "idea.paths.selector";
  @NonNls
  private static String ourHomePath;
  @NonNls
  private static String ourConfigPath;
  @NonNls
  private static String ourPluginsPath;
  @NonNls
  private static final String FILE = "file";
  @NonNls
  private static final String JAR = "jar";
  @NonNls
  private static final String JAR_DELIMITER = "!";
  @NonNls
  private static final String PROTOCOL_DELIMITER = ":";
  @NonNls
  public static final String PLUGINS_FOLDER = "plugins";
  @NonNls
  private static final String BIN_FOLDER = "bin";

  private static final String PATHS_SELECTOR = System.getProperty(PROPERTY_PATHS_SELECTOR);

  @Deprecated
  private PathManager() {
  }

  private static String getHomePath() {
    if (PathManager.ourHomePath != null) {
      return PathManager.ourHomePath;
    }
    if (System.getProperty(PathManager.PROPERTY_HOME_PATH) != null) {
      PathManager.ourHomePath = FileUtil.getAbsolutePath(System.getProperty(PathManager.PROPERTY_HOME_PATH));
    } else {
      // FIXME if this PathManager class is loaded through ant cp (lib/ant/lib/ant-mps.jar), home folder would be wrong! 
      //       This means use of this method and related makes sense for the case when this PathManager is loaded through e.g. core.tool.environment 
      //       or tool.builder classloaders (mps-tool.jar or mps-environment.jar). 
      final Class aClass = PathManager.class;
      String rootPath = PathManager.getResourceRoot(aClass, "/" + aClass.getName().replace('.', '/') + ".class");
      if (rootPath != null) {
        File root = new File(rootPath).getAbsoluteFile();
        do {
          final String parent = root.getParent();
          if (parent == null) {
            return null;
          }
          assert parent != null : "No parent found for " + root + "; " + PathManager.BIN_FOLDER + " folder with " + "idea.properties" + " file not found";
          root = new File(parent).getAbsoluteFile();
          //  one step back to get folder 
        } while (root != null && !(PathManager.isMpsDir(root)));
        PathManager.ourHomePath = (root != null ? root.getAbsolutePath() : null);
      }
    }
    try {
      if (!(SystemInfo.isFileSystemCaseSensitive)) {
        PathManager.ourHomePath = (PathManager.ourHomePath == null ? null : new File(PathManager.ourHomePath).getCanonicalPath());
      }
    } catch (IOException e) {
      //  ignore 
    }
    return PathManager.ourHomePath;
  }

  private static boolean isMpsDir(File file) {
    return new File(file, FileUtil.toSystemDependentName("bin/" + PROPERTIES_FILE_NAME)).exists();
  }

  public static boolean ensureConfigFolderExists(final boolean createIfNotExists) {
    PathManager.getConfigPathWithoutDialog();
    File file = new File(PathManager.ourConfigPath);
    if (createIfNotExists && !(file.exists())) {
      file.mkdirs();
      return true;
    }
    return false;
  }

  private static String getConfigPath(boolean createIfNotExists) {
    PathManager.ensureConfigFolderExists(createIfNotExists);
    return PathManager.ourConfigPath;
  }

  private static String getConfigPath() {
    return PathManager.getConfigPath(true);
  }

  private static String getConfigPathWithoutDialog() {
    if (PathManager.ourConfigPath != null) {
      return PathManager.ourConfigPath;
    }
    if (System.getProperty(PathManager.PROPERTY_CONFIG_PATH) != null) {
      PathManager.ourConfigPath = FileUtil.getAbsolutePath(FileUtil.trimPathQuotes(System.getProperty(PathManager.PROPERTY_CONFIG_PATH)));
    } else {
      PathManager.ourConfigPath = PathManager.getHomePath() + File.separator + "config";
    }
    return PathManager.ourConfigPath;
  }

  public static String getPluginsPath() {
    if (ourPluginsPath != null) {
      return ourPluginsPath;
    }
    if (System.getProperty(PROPERTY_PLUGINS_PATH) != null) {
      ourPluginsPath = System.getProperty(PROPERTY_PLUGINS_PATH);
    } else
    if (SystemInfo.isMac && PATHS_SELECTOR != null) {
      ourPluginsPath = System.getProperty("user.home") + File.separator + "Library/Application Support" + File.separator + PATHS_SELECTOR;
    } else {
      ourPluginsPath = getConfigPath() + File.separatorChar + PLUGINS_FOLDER;
    }

    return ourPluginsPath;
  }

  /**
   * * Attempts to detect classpath entry which contains given resource
   */
  @Nullable
  public static String getResourceRoot(Class context, @NonNls String path) {
    URL url = context.getResource(path);
    if (url == null) {
      url = ClassLoader.getSystemResource(path.substring(1));
    }
    if (url == null) {
      return null;
    }
    return PathManager.extractRoot(url, path);
  }

  /**
   * * Attempts to extract classpath entry part from passed URL.
   */
  @NonNls
  private static String extractRoot(URL resourceURL, String resourcePath) {
    if (!((StringUtil.startsWithChar(resourcePath, '/') || StringUtil.startsWithChar(resourcePath, '\\')))) {
      // noinspection HardCodedStringLiteral 
      System.err.println("precondition failed: " + resourcePath);
      return null;
    }
    String protocol = resourceURL.getProtocol();
    String resultPath = null;
    if (PathManager.FILE.equals(protocol)) {
      String path = resourceURL.getFile();
      final String testPath = path.replace('\\', '/');
      final String testResourcePath = resourcePath.replace('\\', '/');
      if (StringUtil.endsWithIgnoreCase(testPath, testResourcePath)) {
        resultPath = path.substring(0, path.length() - resourcePath.length());
      }
    } else
    if (PathManager.JAR.equals(protocol)) {
      String fullPath = resourceURL.getFile();
      int delimiter = fullPath.indexOf(PathManager.JAR_DELIMITER);
      if (delimiter >= 0) {
        String archivePath = fullPath.substring(0, delimiter);
        if (StringUtil.startsWithConcatenationOf(archivePath, PathManager.FILE, PathManager.PROTOCOL_DELIMITER)) {
          resultPath = archivePath.substring(PathManager.FILE.length() + PathManager.PROTOCOL_DELIMITER.length());
        }
      }
    }
    if (resultPath == null) {
      // noinspection HardCodedStringLiteral 
      System.err.println("cannot extract: " + resultPath + " from " + resourceURL);
      return null;
    }
    resultPath = StringUtil.trimEnd(resultPath, File.separator);
    resultPath = URLUtil.unescapePercentSequences(resultPath);
    return resultPath;
  }

  public static void loadProperties() {
    File propFile = FileUtil.findFirstThatExist(System.getProperty(PathManager.PROPERTIES_FILE), System.getProperty("user.home") + "/idea.properties", PathManager.getHomePath() + "/bin/idea.properties", PathManager.getHomePath() + "/community/bin/idea.properties");
    if (propFile != null) {
      InputStream fis = null;
      try {
        fis = new BufferedInputStream(new FileInputStream(propFile));
        final PropertyResourceBundle bundle = new PropertyResourceBundle(fis);
        final Enumeration keys = bundle.getKeys();
        String home = (String) bundle.handleGetObject("idea.home");
        if (home != null && PathManager.ourHomePath == null) {
          PathManager.ourHomePath = FileUtil.getAbsolutePath(PathManager.substituteVars(home));
        }
        final Properties sysProperties = System.getProperties();
        while (keys.hasMoreElements()) {
          String key = (String) keys.nextElement();
          if (sysProperties.getProperty(key, null) == null) {
            //  load the property from the property file only if it is not defined yet 
            final String value = PathManager.substituteVars(bundle.getString(key));
            sysProperties.setProperty(key, value);
          }
        }
      } catch (IOException e) {
        // noinspection HardCodedStringLiteral 
        System.err.println("Problem reading from property file: " + propFile.getPath());
      } finally {
        try {
          if (fis != null) {
            fis.close();
          }
        } catch (IOException e) {
        }
      }
    }
  }

  public static String substituteVars(String s) {
    final String ideaHomePath = PathManager.getHomePath();
    return PathManager.substituteVars(s, ideaHomePath);
  }

  public static String substituteVars(String s, final String ideaHomePath) {
    if (s == null) {
      return null;
    }
    if (s.startsWith("..")) {
      s = ideaHomePath + File.separatorChar + PathManager.BIN_FOLDER + File.separatorChar + s;
    }
    s = StringUtil.replace(s, "${idea.home}", ideaHomePath);
    final Properties props = System.getProperties();
    final Set keys = props.keySet();
    for (final Object key1 : keys) {
      String key = (String) key1;
      String value = props.getProperty(key);
      s = StringUtil.replace(s, "${" + key + "}", value);
    }
    return s;
  }

}
