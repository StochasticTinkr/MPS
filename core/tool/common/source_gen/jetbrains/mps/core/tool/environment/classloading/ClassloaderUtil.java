package jetbrains.mps.core.tool.environment.classloading;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.List;
import java.net.URL;
import jetbrains.mps.tool.common.PathManager;
import java.io.File;
import java.net.MalformedURLException;
import jetbrains.mps.core.tool.environment.common.StringUtil;

/**
 * 
 * @deprecated Leftover of some old IDEA code copied to MPS to get it started from Ant, cease using, replace with IDEA or MPS counterparts.
 */
@Deprecated
public class ClassloaderUtil {
  @Deprecated
  private ClassloaderUtil() {
  }

  private static Logger getLogger() {
    return LogManager.getLogger("ClassloaderUtil");
  }

  public static void addIDEALibraries(List<URL> classpathElements) {
    final String ideaHomePath = PathManager.getHomePath();
    ClassloaderUtil.addAllFromLibFolder(ideaHomePath, classpathElements);
  }

  @SuppressWarnings(value = {"HardCodedStringLiteral"})
  private static void addAllFromLibFolder(final String aFolderPath, List<URL> classPath) {
    try {
      final Class<ClassloaderUtil> aClass = ClassloaderUtil.class;
      final String selfRoot = PathManager.getResourceRoot(aClass, "/" + aClass.getName().replace('.', '/') + ".class");
      final URL selfRootUrl = new File(selfRoot).getAbsoluteFile().toURI().toURL();
      classPath.add(selfRootUrl);
      final File libFolder = new File(aFolderPath + File.separator + "lib");
      ClassloaderUtil.addLibraries(classPath, libFolder, selfRootUrl);
      final File extLib = new File(libFolder, "ext");
      ClassloaderUtil.addLibraries(classPath, extLib, selfRootUrl);
      final File antLib = new File(new File(libFolder, "ant"), "lib");
      ClassloaderUtil.addLibraries(classPath, antLib, selfRootUrl);
    } catch (MalformedURLException e) {
      ClassloaderUtil.getLogger().error(null, e);
    }
  }

  private static void addLibraries(List<URL> classPath, File fromDir, final URL selfRootUrl) throws MalformedURLException {
    final File[] files = fromDir.listFiles();
    if (files != null) {
      for (final File file : files) {
        if (!(ClassloaderUtil.isJarOrZip(file))) {
          continue;
        }
        final URL url = file.toURI().toURL();
        if (selfRootUrl.equals(url)) {
          continue;
        }
        classPath.add(url);
      }
    }
  }

  @SuppressWarnings(value = {"HardCodedStringLiteral"})
  public static boolean isJarOrZip(File file) {
    if (file.isDirectory()) {
      return false;
    }
    final String name = file.getName();
    return StringUtil.endsWithIgnoreCase(name, ".jar") || StringUtil.endsWithIgnoreCase(name, ".zip");
  }
}
