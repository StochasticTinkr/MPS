package jetbrains.mps.build.ant;

/*Generated by MPS */

import java.io.File;
import org.apache.tools.ant.BuildException;
import java.util.Properties;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.Set;
import java.util.List;
import java.util.LinkedHashSet;

public class MigrationTask extends MpsLoadTask {
  /**
   * Coupled with string constant in AntTaskExecutionUtil.OUT_FILE_NAME
   */
  private static final String OUT_FILE_NAME = "migration_result.properties";
  /**
   * Coupled with string constant in AntTaskExecutionUtil.ERR_CODE_KEY
   */
  private static final String ERR_CODE_KEY = "mps.migration.errcode";

  public MigrationTask() {
    setFailOnError(true);
  }

  public void setProject(String project) {
    myWhatToDo.addProjectFile(new File(project));
  }

  protected String getWorkerClass() {
    return "jetbrains.mps.build.migration.MigrationWorker";
  }

  @Override
  public void execute() throws BuildException {
    super.execute();
    Properties p = new Properties();
    try {
      String path = getProject().getBaseDir().getAbsolutePath() + File.separator + OUT_FILE_NAME;
      File file = new File(path);
      FileInputStream fis = new FileInputStream(file);
      p.load(fis);
      fis.close();
      file.delete();
    } catch (IOException e) {
      throw new BuildException("can't read task output from " + OUT_FILE_NAME, e);
    }
    if (neq_ajmasp_a0d0j(p.getProperty(ERR_CODE_KEY), "0")) {
      throw new BuildException("Migration was not executed. See log for details.");
    }
  }

  @Override
  protected Set<File> calculateClassPath(boolean fork) {
    // todo try using super method 
    checkMpsHome();

    // copied from GenerationTask 
    List<File> classPathRoots = MPSClasspathUtil.getClassPathRootsFromDependencies(getProject());
    if (classPathRoots.isEmpty()) {
      throw new BuildException("Dependency on MPS build scripts is required to generate MPS modules.");
    }
    Set<File> classPath = new LinkedHashSet<File>();
    File mpsHome = getMpsHome();
    assert mpsHome != null : "MPSLoadTask.getMpsHome() == null. MPS home folder was not specified.";
    String mpsHomePath = mpsHome.getAbsolutePath();
    classPath.add(new File(mpsHomePath + "/plugins/mps-build/languages/build/jetbrains.mps.build.migration.jar"));
    classPath.add(new File(mpsHomePath + "/plugins/modelchecker.jar"));
    classPath.add(new File(mpsHomePath + "/plugins/migration/lib/migration.jar"));
    classPath.add(new File(mpsHomePath + "/plugins/migration/lib/migration-platform.jar"));
    for (File file : classPathRoots) {
      MPSClasspathUtil.gatherAllClassesAndJarsUnder(file, classPath);
    }
    return classPath;
  }
  private static boolean neq_ajmasp_a0d0j(Object a, Object b) {
    return !(((a != null ? a.equals(b) : a == b)));
  }
}
