package jetbrains.mps.build.ant.converter;

/*Generated by MPS */

import org.apache.tools.ant.taskdefs.Copy;
import java.util.Map;
import java.io.File;
import java.util.HashMap;
import org.jetbrains.annotations.Nullable;
import org.apache.tools.ant.util.FirstMatchMapper;
import org.apache.tools.ant.util.GlobPatternMapper;
import org.apache.tools.ant.util.IdentityMapper;
import org.apache.tools.ant.types.FileSet;
import org.apache.tools.ant.BuildException;
import jetbrains.mps.build.ant.MpsLoadTask;
import org.jetbrains.annotations.NotNull;
import java.lang.reflect.Constructor;
import org.apache.tools.ant.Project;
import org.apache.tools.ant.util.FileUtils;
import org.apache.tools.ant.types.FilterSetCollection;
import java.util.Vector;
import java.io.IOException;

public class ConvertToBinaryTask extends Copy {
  private Map<File, File> toConvert = new HashMap<File, File>();
  private boolean myStripImplementation = false;
  @Nullable
  private File mpsHome;

  public ConvertToBinaryTask() {
    FirstMatchMapper mapper = new FirstMatchMapper();
    GlobPatternMapper first = new GlobPatternMapper();
    first.setFrom("*.mps");
    first.setTo("*.mpb");
    mapper.add(first);
    mapper.add(new IdentityMapper());
    add(mapper);
    fileUtils = new ConvertToBinaryTask.FileUtilsEx(fileUtils);
  }

  public void setMpsHome(File mpsHome) {
    this.mpsHome = mpsHome;
  }

  public File getMpsHome() {
    return mpsHome;
  }

  public void setStripImplementation(boolean value) {
    this.myStripImplementation = value;
  }

  public boolean getStripImplementation() {
    return myStripImplementation;
  }

  @Override
  public void addFileset(FileSet set) {
    set.setErrorOnMissingDir(false);
    super.addFileset(set);
  }

  @Override
  public void execute() throws BuildException {
    super.execute();
    // create output dir in any case, dest dir used in src packaging and fails if models dir not exists 
    if (destDir != null) {
      destDir.mkdirs();
    }
    if (!(toConvert.isEmpty())) {
      try {
        MpsLoadTask mpsWorkerTask = new MpsLoadTask("jetbrains.mps.tool.builder.converter.ConvertToBinaryWorker") {

          @Override
          protected Object instantiateInProcessWorker(@NotNull Class<?> workerClass) throws Exception {
            Constructor<?> cons = workerClass.getConstructor(Map.class, Boolean.class);
            return cons.newInstance(toConvert, myStripImplementation);
          }
        };
        mpsWorkerTask.bindToOwner(this);
        mpsWorkerTask.setFork(false);
        mpsWorkerTask.setMpsHome(mpsHome);
        mpsWorkerTask.execute();
      } catch (BuildException ex) {
        log(String.format("Cannot convert .mps into .mpb: %s\nModels:%s", ex.getMessage(), toConvert.keySet()), Project.MSG_ERR);
        throw ex;
      }
    }
  }
  public class FileUtilsEx extends FileUtils {
    private final FileUtils delegate;
    public FileUtilsEx(FileUtils delegate) {
      this.delegate = delegate;
    }
    @Override
    public String getDefaultEncoding() {
      return delegate.getDefaultEncoding();
    }
    @Override
    public void copyFile(File sourceFile, File destFile, FilterSetCollection filters, Vector filterChains, boolean overwrite, boolean preserveLastModified, boolean append, String inputEncoding, String outputEncoding, Project project, boolean force) throws IOException {
      if (sourceFile.getPath().endsWith(".mps")) {
        toConvert.put(sourceFile, destFile);
      } else {
        delegate.copyFile(sourceFile, destFile, filters, filterChains, overwrite, preserveLastModified, append, inputEncoding, outputEncoding, project, force);
      }
    }
  }
}
