package jetbrains.mps.tool.builder.make;

/*Generated by MPS */

import jetbrains.mps.make.service.AbstractMakeService;
import jetbrains.mps.make.IMakeService;
import java.util.concurrent.Future;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.MakeSession;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IScript;
import jetbrains.mps.make.script.IScriptController;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.make.IMakeNotificationListener;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.messages.Message;
import jetbrains.mps.messages.MessageKind;
import jetbrains.mps.internal.make.runtime.util.FutureValue;
import jetbrains.mps.make.dependencies.MakeSequence;
import jetbrains.mps.make.service.CoreMakeTask;
import jetbrains.mps.internal.make.cfg.GenerateFacetInitializer;
import jetbrains.mps.make.script.IConfigMonitor;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.script.IPropertiesPool;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.make.script.ScriptBuilder;
import jetbrains.mps.make.facet.IFacet;
import jetbrains.mps.logging.MPSAppenderBase;
import jetbrains.mps.messages.IMessageHandler;
import org.apache.log4j.Priority;
import org.jetbrains.annotations.Nullable;

public class BuildMakeService extends AbstractMakeService implements IMakeService {
  public BuildMakeService() {
  }
  @Override
  public Future<IResult> make(MakeSession session, Iterable<? extends IResource> resources, IScript script, IScriptController controller, @NotNull ProgressMonitor monitor) {
    return doMake(session, resources, script, controller, monitor);
  }
  @Override
  public Future<IResult> make(MakeSession session, Iterable<? extends IResource> resources) {
    return make(session, resources, defaultMakeScript(), null, new EmptyProgressMonitor());
  }
  @Override
  public boolean isSessionActive() {
    return false;
  }
  @Override
  public boolean openNewSession(MakeSession session) {
    return false;
  }
  @Override
  public void closeSession(MakeSession session) {
  }
  @Override
  public void addListener(IMakeNotificationListener listener) {
    throw new UnsupportedOperationException();
  }
  @Override
  public void removeListener(IMakeNotificationListener listener) {
    throw new UnsupportedOperationException();
  }
  private Future<IResult> doMake(MakeSession makeSession, Iterable<? extends IResource> inputRes, IScript defaultScript, IScriptController controller, @NotNull ProgressMonitor monitor) {
    String scrName = "Build";

    if (Sequence.fromIterable(inputRes).isEmpty()) {
      String msg = scrName + " aborted: nothing to do";
      makeSession.getMessageHandler().handle(new Message(MessageKind.ERROR, msg));
      return new FutureValue<IResult>(new IResult.FAILURE(null));
    }
    MakeSequence makeSeq = new MakeSequence(inputRes, defaultScript, makeSession);

    IScriptController ctl = this.completeController(makeSession, controller);

    CoreMakeTask task = new CoreMakeTask(scrName, makeSeq, ctl, makeSession.getMessageHandler());
    BuildMakeService.ForwardingLoggingHandler handler = new BuildMakeService.ForwardingLoggingHandler(makeSession.getMessageHandler());
    handler.register();
    try {
      task.run(monitor);
    } finally {
      handler.unregister();
    }
    return new FutureValue<IResult>(task.getResult());
  }
  /**
   * Assume if client supplied IScriptController, he knows what he's doing
   * and bears full responsibility (except for generator properties initialization, but only for now)
   * for suppluing correct IConfigMonitor and IJobMonitor instances, if desired (we provide reasonable defaults
   * for cases when no user-supplied controller present).
   */
  private IScriptController completeController(MakeSession msess, final IScriptController ctl) {
    final GenerateFacetInitializer gfi = new GenerateFacetInitializer(msess);
    gfi.cleanMake(true);
    IConfigMonitor monitor = new AbstractMakeService.DefaultMonitor(msess);
    return new IScriptController.Stub(monitor, monitor) {
      @Override
      public void runJobWithMonitor(_FunctionTypes._void_P1_E0<? super IJobMonitor> code) {
        if (ctl != null) {
          ctl.runJobWithMonitor(code);
        } else {
          super.runJobWithMonitor(code);
        }
      }
      @Override
      public void runConfigWithMonitor(_FunctionTypes._void_P1_E0<? super IConfigMonitor> code) {
        if (ctl != null) {
          ctl.runConfigWithMonitor(code);
        } else {
          super.runConfigWithMonitor(code);
        }
      }
      @Override
      public void setup(IPropertiesPool pp, Iterable<ITarget> toExecute, Iterable<? extends IResource> input) {
        gfi.populate(pp);
        if (ctl != null) {
          ctl.setup(pp, toExecute, input);
        } else {
          super.setup(pp, toExecute, input);
        }
      }
    };
  }
  public static IScript defaultMakeScript() {
    return new ScriptBuilder().withFacetNames(new IFacet.Name("jetbrains.mps.lang.resources.Binaries"), new IFacet.Name("jetbrains.mps.lang.core.Generate"), new IFacet.Name("jetbrains.mps.lang.core.TextGen"), new IFacet.Name("jetbrains.mps.make.facets.JavaCompile"), new IFacet.Name("jetbrains.mps.make.facets.Make")).withFinalTarget(new ITarget.Name("jetbrains.mps.make.facets.Make.make")).toScript();
  }

  public static class ForwardingLoggingHandler extends MPSAppenderBase {

    public ForwardingLoggingHandler(IMessageHandler messageHandler) {
      this.myMessageHandler = messageHandler;
    }
    @Override
    protected void append(@NotNull Priority priority, @NotNull String categoryName, @NotNull String messageText, @Nullable Throwable throwable, @Nullable Object object) {
      Message message = new Message(MessageKind.fromPriority(priority), messageText);
      message.setException(throwable);
      message.setHintObject(object);
      myMessageHandler.handle(message);
    }

    private IMessageHandler myMessageHandler;
  }
}
