package jetbrains.mps.tool.builder.make;

/*Generated by MPS */

import jetbrains.mps.tool.common.Script;
import jetbrains.mps.tool.builder.MpsWorker;
import jetbrains.mps.project.Project;
import java.util.Set;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.IMapping;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.LinkedHashSet;
import java.io.File;
import java.util.Collections;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.tool.environment.Environment;
import org.apache.log4j.Logger;
import jetbrains.mps.tool.environment.MpsEnvironment;

public class GeneratorWorker extends BaseGeneratorWorker {
  public GeneratorWorker(Script whatToDo, MpsWorker.AntLogger logger) {
    super(whatToDo, logger);
  }

  @Override
  public void work() {
    setGenerationProperties();
    boolean doneSomething = false;

    Project project = createDummyProject();
    final Set<SModule> allModules = new HashSet<SModule>();
    for (IMapping<List<String>, Boolean> chunk : MapSequence.fromMap(myWhatToDo.getChunks())) {
      final List<String> modulePaths = chunk.key();
      final Set<SModule> modules = new LinkedHashSet<SModule>();
      project.getModelAccess().runWriteAction(new Runnable() {
        public void run() {
          for (String modulePath : modulePaths) {
            processModuleFile(new File(modulePath), modules);
          }
        }
      });
      allModules.addAll(modules);
      Boolean bootstrap = chunk.value();
      if (bootstrap) {
        warning("Found bootstrap chunk " + chunk.key() + ". Generation may be impossible.");
      }
      MpsWorker.ObjectsToProcess go = new MpsWorker.ObjectsToProcess(Collections.EMPTY_SET, modules, Collections.EMPTY_SET);
      if (go.hasAnythingToGenerate()) {
        generate(project, go);
        doneSomething = true;
      }
    }

    if (!(doneSomething)) {
      error("Could not find anything to generate.");
    }

    // Disposing "project" modules first 
    final ModuleRepositoryFacade repositoryFacade = new ModuleRepositoryFacade(project);
    project.getModelAccess().runWriteAction(new Runnable() {
      public void run() {
        for (SModule nextModule : SetSequence.fromSet(allModules)) {
          repositoryFacade.unregisterModule(nextModule);
        }
      }
    });

    dispose();
    showStatistic();
  }

  @Override
  protected Environment createEnvironment() {
    Logger.getRootLogger().setLevel(myWhatToDo.getLogLevel());
    Environment environment = new MpsEnvironment(createEnvironmentConfig(myWhatToDo));
    environment.init();
    return environment;
  }

  public static void main(String[] args) {
    MpsWorker mpsWorker = new GeneratorWorker(Script.fromDumpInFile(new File(args[0])), new MpsWorker.SystemOutLogger());
    mpsWorker.workFromMain();
  }
}
