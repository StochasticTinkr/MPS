package jetbrains.mps.tool.builder;

/*Generated by MPS */

import jetbrains.mps.tool.common.Script;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.persistence.PersistenceRegistry;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.module.SModule;
import java.io.File;

public class MpsWorkerTest extends MpsWorker {
  private String myModuleRef;
  private boolean myIsPresent;

  public MpsWorkerTest(Script whatToDo, MpsWorker.AntLogger logger) {
    super(whatToDo, logger);
  }

  private void setModuleToCheck(String moduleRef, boolean isPresent) {
    myModuleRef = moduleRef;
    myIsPresent = isPresent;
  }

  @Override
  public void work() {
    final MPSModuleRepository repo = myEnvironment.getPlatform().findComponent(MPSModuleRepository.class);
    PersistenceRegistry pf = myEnvironment.getPlatform().findComponent(PersistenceRegistry.class);
    final SModuleReference moduleRef = pf.createModuleReference(myModuleRef);
    repo.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        try {
          SModule module = moduleRef.resolve(repo);
          if (module == null ^ myIsPresent) {
            new File("result.txt").createNewFile();
          }
        } catch (Exception e) {
          e.printStackTrace();
        }
      }
    });
  }

  public static void main(String[] args) {
    MpsWorkerTest testWorker = new MpsWorkerTest(Script.fromDumpInFile(new File(args[0])), new MpsWorker.SystemOutLogger());
    testWorker.setModuleToCheck(args[1], Boolean.parseBoolean(args[2]));
    testWorker.workFromMain();
  }
}
