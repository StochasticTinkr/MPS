package jetbrains.mps.tool.builder.converter;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.core.platform.Platform;
import jetbrains.mps.core.platform.PlatformFactory;
import jetbrains.mps.core.platform.PlatformOptionsBuilder;
import jetbrains.mps.RuntimeFlags;
import jetbrains.mps.extapi.persistence.ModelFactoryService;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.vfs.FileSystem;
import org.jetbrains.mps.openapi.persistence.ModelFactory;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.util.FileUtil;
import java.util.List;
import org.jetbrains.mps.openapi.persistence.ModelLoadingOption;
import java.util.ArrayList;
import jetbrains.mps.persistence.MetaModelInfoProvider;
import jetbrains.mps.persistence.DefaultModelPersistence;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.extapi.persistence.FileDataSource;
import org.jetbrains.mps.openapi.persistence.ModelFactoryType;
import jetbrains.mps.persistence.PreinstalledModelFactoryTypes;
import java.io.IOException;
import org.jetbrains.mps.openapi.persistence.ModelSaveException;
import org.jetbrains.mps.openapi.persistence.ModelLoadException;

public class ConvertToBinaryWorker {
  public ConvertToBinaryWorker() {
  }

  public void convert(final Map<String, String> map, final Boolean stripImplementation) {
    final Platform platform = PlatformFactory.initPlatform(PlatformOptionsBuilder.PERSISTENCE);
    RuntimeFlags.setMergeDriverMode(true);
    try {
      for (Map.Entry<String, String> entry : map.entrySet()) {
        convertModelToBinary(entry.getKey(), entry.getValue(), stripImplementation);
      }
    } finally {
      platform.dispose();
    }
  }

  private void convertModelToBinary(String sourceFile, String destFile, boolean stripImplementation) {
    ModelFactoryService factoryService = ModelFactoryService.getInstance();
    IFile source = FileSystem.getInstance().getFile(sourceFile);
    ModelFactory modelFactory = PersistenceFacade.getInstance().getModelFactory(FileUtil.getExtension(source.getName()));
    if (modelFactory == null) {
      // assuming user knows what he's doing and supplied us with a model file, try default factory. 
      modelFactory = PersistenceFacade.getInstance().getDefaultModelFactory();
    }
    try {
      List<ModelLoadingOption> options = new ArrayList<ModelLoadingOption>();
      options.add(MetaModelInfoProvider.MetaInfoLoadingOption.KEEP_READ);
      if (stripImplementation) {
        options.add(DefaultModelPersistence.ContentLoadingExtentOptions.STRIP_IMPLEMENTATION);
      }
      SModel model = modelFactory.load(new FileDataSource(source), options.toArray(new ModelLoadingOption[0]));
      ModelFactoryType binaryType = PreinstalledModelFactoryTypes.BINARY;
      ModelFactory binaryFactory = factoryService.getFactoryByType(binaryType);
      if (binaryFactory == null) {
        throw new IllegalStateException("Binary Model Factory Is Not Found");
      }
      binaryFactory.save(model, new FileDataSource(FileSystem.getInstance().getFileByPath(destFile)));
    } catch (RuntimeException ex) {
      System.out.printf("Conversion of %s\n", sourceFile);
      ex.printStackTrace();
      throw ex;
    } catch (IOException ex) {
      throw new RuntimeException(String.format("Failed to read model from file %s", sourceFile), ex);
    } catch (ModelSaveException e) {
      throw new RuntimeException(String.format("Failed to write model in binary format to the file %s", destFile), e);
    } catch (ModelLoadException e) {
      throw new RuntimeException(String.format("Failed to load model in binary format from the file %s", destFile), e);
    }
  }
}
