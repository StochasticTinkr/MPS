package jetbrains.mps.make.facets;

/*Generated by MPS */

import jetbrains.mps.components.ComponentPlugin;
import jetbrains.mps.components.ComponentHost;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.make.MakeServiceComponent;
import jetbrains.mps.make.facet.FacetRegistry;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.components.CoreComponent;
import org.jetbrains.annotations.NotNull;

public class MPSMake extends ComponentPlugin implements ComponentHost {
  private final LanguageRegistry myLanguageRegistry;
  private MakeServiceComponent myMakeServiceComponent;

  public MPSMake(LanguageRegistry languageRegistry) {
    myLanguageRegistry = languageRegistry;
  }

  @Override
  public void init() {
    myMakeServiceComponent = init(new MakeServiceComponent());
    FacetRegistry facetRegistry = init(new FacetRegistry(myLanguageRegistry));
    init(new BootstrapMakeFacets(facetRegistry));
  }


  @Nullable
  @Override
  public <T extends CoreComponent> T findComponent(@NotNull Class<T> aClass) {
    if (aClass == MakeServiceComponent.class) {
      return aClass.cast(myMakeServiceComponent);
    }
    // I don't expose other core components unless there's need to. 
    return null;
  }
}
