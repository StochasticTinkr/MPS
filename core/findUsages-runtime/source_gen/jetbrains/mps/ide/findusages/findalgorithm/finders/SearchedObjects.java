package jetbrains.mps.ide.findusages.findalgorithm.finders;

/*Generated by MPS */

import org.jetbrains.mps.annotations.Immutable;
import java.util.Set;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.stream.Stream;
import java.util.stream.Collectors;
import java.util.Collections;

@Immutable
public class SearchedObjects<K> {
  private final Set<K> mySearchedNodes;

  public SearchedObjects(@NotNull Collection<K> collection) {
    mySearchedNodes = new LinkedHashSet<K>(collection);
  }

  public static <K> SearchedObjects<K> union(SearchedObjects<K> one, SearchedObjects<K> another) {
    return new SearchedObjects(Stream.concat(one.getElements().stream(), another.getElements().stream()).collect(Collectors.toList()));
  }

  public Set<K> getElements() {
    return Collections.unmodifiableSet(mySearchedNodes);
  }

  public boolean contains(K k) {
    return getElements().contains(k);
  }

  @NotNull
  public static <K> SearchedObjects<K> union(SearchedObjects<K>... array) {
    Set<K> searchedNodes = new LinkedHashSet<K>();
    for (SearchedObjects<K> element : array) {
      searchedNodes.addAll(element.mySearchedNodes);
    }
    return new SearchedObjects<K>(searchedNodes);
  }
}
