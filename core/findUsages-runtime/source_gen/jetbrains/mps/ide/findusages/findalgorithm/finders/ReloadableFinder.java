package jetbrains.mps.ide.findusages.findalgorithm.finders;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import java.lang.ref.WeakReference;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.findusages.FindersManager;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.ide.findusages.model.SearchResults;

/**
 * Clients need to persist informations about finders active at some point back in time (e.g. Usages View).
 * To accomplish that, we identify finders with a string (finder implementation class fqn, in fact, although we don't load
 * classes using it. It's very important to understand the difference). This class knows how to get back to genertated finder from
 * this identity string and is a finder proxy, per se.
 * 
 * FIXME I don't like the idea of weak reference to reuse finder instance. I'd rather make it just {@link jetbrains.mps.ide.findusages.findalgorithm.finders.Finder }, not {@link jetbrains.mps.ide.findusages.findalgorithm.finders.IInterfacedFinder }
 * so that we need to get finder instance only for {@link jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder#find(SearchQuery, ProgressMonitor) } and do not keep it at all.
 */
public final class ReloadableFinder implements IInterfacedFinder {
  private final String myFinderIdentity;
  private WeakReference<GeneratedFinder> myFinder;

  public ReloadableFinder(@NotNull String finderClass) {
    myFinderIdentity = finderClass;
    myFinder = new WeakReference<GeneratedFinder>(null);
  }

  public ReloadableFinder(GeneratedFinder finder) {
    myFinderIdentity = finder.getClass().getName();
    myFinder = new WeakReference<GeneratedFinder>(finder);
  }

  @NotNull
  public String getPersistenceIdentity() {
    return myFinderIdentity;
  }

  private GeneratedFinder getFinder() {
    if (myFinder.get() == null) {
      // never, ever, use myFinderIdentity as a class name to load class, it's merely a serializeable identificaion. 
      GeneratedFinder finder = (GeneratedFinder) FindersManager.getInstance().getFinderByClassName(myFinderIdentity, false);
      if (finder != null) {
        myFinder = new WeakReference<GeneratedFinder>(finder);
      }
    }
    return myFinder.get();
  }
  @Override
  public SAbstractConcept getSConcept() {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return null;
    }
    return finder.getSConcept();
  }
  @Override
  public boolean isApplicable(SNode node) {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return false;
    }
    return finder.isApplicable(node);
  }
  @Override
  public boolean isVisible(SNode node) {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return false;
    }
    return finder.isVisible(node);
  }
  @Override
  public boolean isUsedByDefault(SNode node) {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return false;
    }
    return finder.isUsedByDefault(node);
  }
  @Override
  public String getDescription() {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return "";
    }
    return finder.getDescription();
  }
  @Override
  public String getLongDescription() {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return "";
    }
    return finder.getLongDescription();
  }
  @Override
  public boolean canNavigate() {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return false;
    }
    return finder.canNavigate();
  }

  @Nullable
  public SNodeReference getDeclarationNode() {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return null;
    }
    return FindersManager.getInstance().getDeclarationNode(finder);
  }

  @Override
  public SearchResults<SNode> find(SearchQuery query, ProgressMonitor monitor) {
    GeneratedFinder finder = getFinder();
    if (finder == null) {
      return new SearchResults();
    }
    return finder.find(query, monitor);
  }
}
