package jetbrains.mps.ide.findusages.findalgorithm.finders;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SearchScope;
import org.jetbrains.mps.openapi.util.ProgressMonitor;

import java.nio.channels.SeekableByteChannel;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

/**
 * Use Finder instead
 *
 * T -- the type of the result of the search (we are looking for T objects)
 * K -- the type of the key elements of the search
 *
 * @deprecated 
 */
@Deprecated
public interface IFinder {
  /**
   * a synchronous version of the search process: we ask, we wait, we get the results.
   * to become
   * //@deprecated better use the async {@link #find(SearchQuery, FindCallback, ProgressMonitor)}
   */
  @NotNull
//  @Deprecated
  default SearchResults find(@NotNull SearchQuery query, @NotNull ProgressMonitor monitor) {
    CollectingCallback collectingCallback = new CollectingCallback();
    find(query, collectingCallback, monitor);
    return collectingCallback.getResults();
  }

  /**
   * The default behavior is provided in order to work both ways
   */
  @SuppressWarnings("unused")
  default void find(@NotNull SearchQuery query, @NotNull FindCallback callback, @NotNull ProgressMonitor monitor) {
    SearchResults<?> searchResults = find(query, monitor);
    callback.onSearchedObjectsCalculated(searchResults.getSearchedObjects());
    for (SearchResult<?> result : searchResults.getSearchResults()) {
      callback.onUsageFound(result);
    }
  }

  interface FindCallback {
    void onUsageFound(@NotNull SearchResult<?> result);
    default void onSearchedObjectsCalculated(@NotNull SearchedObjects<?> searchedObjects) {
    }
  }
}
