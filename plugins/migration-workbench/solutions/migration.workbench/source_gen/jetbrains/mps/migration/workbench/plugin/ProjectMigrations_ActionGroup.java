package jetbrains.mps.migration.workbench.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.actions.GeneratedActionGroup;
import java.util.Set;
import com.intellij.openapi.util.Pair;
import jetbrains.mps.workbench.ActionPlace;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.actionSystem.AnActionEvent;
import jetbrains.mps.migration.global.ProjectMigration;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.migration.global.ProjectMigrationsRegistry;
import com.intellij.openapi.extensions.PluginId;
import org.jetbrains.annotations.Nullable;

public class ProjectMigrations_ActionGroup extends GeneratedActionGroup {
  public static final String ID = "jetbrains.mps.migration.workbench.plugin.ProjectMigrations_ActionGroup";
  private Set<Pair<ActionPlace, Condition<BaseAction>>> myPlaces = SetSequence.fromSet(new HashSet<Pair<ActionPlace, Condition<BaseAction>>>());
  public ProjectMigrations_ActionGroup() {
    super("Project Migrations", ID);
    this.setIsInternal(false);
    this.setPopup(true);
  }
  public void doUpdate(AnActionEvent event) {
    removeAll();
    for (ProjectMigration pm : ListSequence.fromList(ProjectMigrationsRegistry.getInstance().getMigrations())) {
      ProjectMigrations_ActionGroup.this.addParameterizedAction(new RunProjectMigration_Action(pm), PluginId.getId("jetbrains.mps.migration.workbench"), pm);
    }
    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {
      this.addPlace(p.first, p.second);
    }
  }
  public void addPlace(ActionPlace place, @Nullable Condition<BaseAction> cond) {
    SetSequence.fromSet(this.myPlaces).addElement(new Pair<ActionPlace, Condition<BaseAction>>(place, cond));
  }
  public boolean isStrict() {
    return false;
  }
}
