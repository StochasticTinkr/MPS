package testPrimitiveType.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(1);
  /*package*/ final ConceptDescriptor myConceptTypeWithProperties = new ConceptDescriptorBuilder("testPrimitiveType.structure.TypeWithProperties", MetaIdFactory.conceptId(0x8a53c70515e44f87L, 0x8796457845605512L, 0x9cc88b154a54d6cL)).super_("jetbrains.mps.baseLanguage.structure.Type").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).parents("jetbrains.mps.baseLanguage.structure.Type").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x9cc88b154a556a2L, "str"), new ConceptDescriptorBuilder.Prop(0x9cc88b154a556a8L, "num"), new ConceptDescriptorBuilder.Prop(0x9cc88b154a556abL, "bool")).properties("str", "num", "bool").alias("type_with_properties", "").sourceNode(new SNodePointer("r:f452be5e-b693-4373-bee9-3f7a3df5e603(testPrimitiveType.structure)", "706089536801033580")).create();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptTypeWithProperties.getId(), 0);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptTypeWithProperties);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptTypeWithProperties;
      default:
        throw new IllegalStateException();
    }
  }
}
