package testAnnotatedType.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(8);
  /*package*/ final ConceptDescriptor myConceptPresenceCondition = createDescriptorForPresenceCondition();
  /*package*/ final ConceptDescriptor myConceptPrimDoubleType = createDescriptorForPrimDoubleType();
  /*package*/ final ConceptDescriptor myConceptPrimFloatType = createDescriptorForPrimFloatType();
  /*package*/ final ConceptDescriptor myConceptPrimIntType = createDescriptorForPrimIntType();
  /*package*/ final ConceptDescriptor myConceptPrimLongType = createDescriptorForPrimLongType();
  /*package*/ final ConceptDescriptor myConceptPrimNumConstant = createDescriptorForPrimNumConstant();
  /*package*/ final ConceptDescriptor myConceptPrimType = createDescriptorForPrimType();
  /*package*/ final ConceptDescriptor myConceptSubstituteAnnotation = createDescriptorForSubstituteAnnotation();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptPresenceCondition.getId(), 0);
    myIndexMap.put(myConceptPrimDoubleType.getId(), 1);
    myIndexMap.put(myConceptPrimFloatType.getId(), 2);
    myIndexMap.put(myConceptPrimIntType.getId(), 3);
    myIndexMap.put(myConceptPrimLongType.getId(), 4);
    myIndexMap.put(myConceptPrimNumConstant.getId(), 5);
    myIndexMap.put(myConceptPrimType.getId(), 6);
    myIndexMap.put(myConceptSubstituteAnnotation.getId(), 7);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptPresenceCondition, myConceptPrimDoubleType, myConceptPrimFloatType, myConceptPrimIntType, myConceptPrimLongType, myConceptPrimNumConstant, myConceptPrimType, myConceptSubstituteAnnotation);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptPresenceCondition;
      case 1:
        return myConceptPrimDoubleType;
      case 2:
        return myConceptPrimFloatType;
      case 3:
        return myConceptPrimIntType;
      case 4:
        return myConceptPrimLongType;
      case 5:
        return myConceptPrimNumConstant;
      case 6:
        return myConceptPrimType;
      case 7:
        return myConceptSubstituteAnnotation;
      default:
        throw new IllegalStateException();
    }
  }

  private static ConceptDescriptor createDescriptorForPresenceCondition() {
    return new ConceptDescriptorBuilder("testAnnotatedType.structure.PresenceCondition", MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1c7L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).sourceNode(new SNodePointer("r:c0db73ed-f604-44cb-9fd9-3e3424a144b7(testAnnotatedType.structure)", "6405009306797650375")).create();
  }
  private static ConceptDescriptor createDescriptorForPrimDoubleType() {
    return new ConceptDescriptorBuilder("testAnnotatedType.structure.PrimDoubleType", MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x1469c391a09c62e6L)).super_("testAnnotatedType.structure.PrimType").version(1).super_(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bcL)).parents("testAnnotatedType.structure.PrimType").parentIds(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bcL)).alias("_double", "").sourceNode(new SNodePointer("r:c0db73ed-f604-44cb-9fd9-3e3424a144b7(testAnnotatedType.structure)", "1470921783545455334")).create();
  }
  private static ConceptDescriptor createDescriptorForPrimFloatType() {
    return new ConceptDescriptorBuilder("testAnnotatedType.structure.PrimFloatType", MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bdL)).super_("testAnnotatedType.structure.PrimType").version(1).super_(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bcL)).parents("testAnnotatedType.structure.PrimType").parentIds(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bcL)).alias("_float", "").sourceNode(new SNodePointer("r:c0db73ed-f604-44cb-9fd9-3e3424a144b7(testAnnotatedType.structure)", "6405009306797650365")).create();
  }
  private static ConceptDescriptor createDescriptorForPrimIntType() {
    return new ConceptDescriptorBuilder("testAnnotatedType.structure.PrimIntType", MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782be609eL)).super_("testAnnotatedType.structure.PrimType").version(1).super_(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bcL)).parents("testAnnotatedType.structure.PrimType").parentIds(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bcL)).alias("_int", "").sourceNode(new SNodePointer("r:c0db73ed-f604-44cb-9fd9-3e3424a144b7(testAnnotatedType.structure)", "6405009306797629598")).create();
  }
  private static ConceptDescriptor createDescriptorForPrimLongType() {
    return new ConceptDescriptorBuilder("testAnnotatedType.structure.PrimLongType", MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x786549534310b4f5L)).super_("testAnnotatedType.structure.PrimType").version(1).super_(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bcL)).parents("testAnnotatedType.structure.PrimType").parentIds(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bcL)).alias("_long", "").sourceNode(new SNodePointer("r:c0db73ed-f604-44cb-9fd9-3e3424a144b7(testAnnotatedType.structure)", "8675420879155410165")).create();
  }
  private static ConceptDescriptor createDescriptorForPrimNumConstant() {
    return new ConceptDescriptorBuilder("testAnnotatedType.structure.PrimNumConstant", MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x1469c391a09a5eefL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1469c391a09bd6aaL, "value"), new ConceptDescriptorBuilder.Prop(0x1469c391a09a5ef0L, "isFloat")).properties("value", "isFloat").sourceNode(new SNodePointer("r:c0db73ed-f604-44cb-9fd9-3e3424a144b7(testAnnotatedType.structure)", "1470921783545323247")).create();
  }
  private static ConceptDescriptor createDescriptorForPrimType() {
    return new ConceptDescriptorBuilder("testAnnotatedType.structure.PrimType", MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bcL)).super_("jetbrains.mps.baseLanguage.structure.Type").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).parents("jetbrains.mps.baseLanguage.structure.Type").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).abstract_().sourceNode(new SNodePointer("r:c0db73ed-f604-44cb-9fd9-3e3424a144b7(testAnnotatedType.structure)", "6405009306797650364")).create();
  }
  private static ConceptDescriptor createDescriptorForSubstituteAnnotation() {
    return new ConceptDescriptorBuilder("testAnnotatedType.structure.SubstituteAnnotation", MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782be61ecL)).super_("jetbrains.mps.lang.core.structure.NodeAttribute").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L)).parents("jetbrains.mps.lang.core.structure.NodeAttribute").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x58e32a0782beb1baL, "substitute", MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bcL), false, false, false), new ConceptDescriptorBuilder.Link(0x58e32a0782beb1c4L, "condition", MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1c7L), false, false, false)).children(new String[]{"substitute", "condition"}, new boolean[]{false, false}).sourceNode(new SNodePointer("r:c0db73ed-f604-44cb-9fd9-3e3424a144b7(testAnnotatedType.structure)", "6405009306797629932")).create();
  }
}
