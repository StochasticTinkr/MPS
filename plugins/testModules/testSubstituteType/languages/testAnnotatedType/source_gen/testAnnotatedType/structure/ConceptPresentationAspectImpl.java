package testAnnotatedType.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_PresenceCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrimDoubleType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrimFloatType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrimIntType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrimLongType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrimNumConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrimType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteAnnotation = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_lpa09p_a0j.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_PresenceCondition;
          }
          break;
        case 1:
          if (true) {
            return props_PrimDoubleType;
          }
          break;
        case 2:
          if (true) {
            return props_PrimFloatType;
          }
          break;
        case 3:
          if (true) {
            return props_PrimIntType;
          }
          break;
        case 4:
          if (true) {
            return props_PrimLongType;
          }
          break;
        case 5:
          if (true) {
            return props_PrimNumConstant;
          }
          break;
        case 6:
          if (true) {
            return props_PrimType;
          }
          break;
        case 7:
          if (true) {
            return props_SubstituteAnnotation;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_lpa09p_a0j = buildConceptIndices(MetaAdapterFactory.getConcept(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1c7L, "PresenceCondition"), MetaAdapterFactory.getConcept(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x1469c391a09c62e6L, "PrimDoubleType"), MetaAdapterFactory.getConcept(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bdL, "PrimFloatType"), MetaAdapterFactory.getConcept(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782be609eL, "PrimIntType"), MetaAdapterFactory.getConcept(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x786549534310b4f5L, "PrimLongType"), MetaAdapterFactory.getConcept(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x1469c391a09a5eefL, "PrimNumConstant"), MetaAdapterFactory.getConcept(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bcL, "PrimType"), MetaAdapterFactory.getConcept(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782be61ecL, "SubstituteAnnotation"));
}
