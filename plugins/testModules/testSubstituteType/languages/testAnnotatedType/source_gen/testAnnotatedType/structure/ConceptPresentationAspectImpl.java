package testAnnotatedType.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_PresenceCondition;
  private ConceptPresentation props_PrimDoubleType;
  private ConceptPresentation props_PrimFloatType;
  private ConceptPresentation props_PrimIntType;
  private ConceptPresentation props_PrimLongType;
  private ConceptPresentation props_PrimNumConstant;
  private ConceptPresentation props_PrimType;
  private ConceptPresentation props_SubstituteAnnotation;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.PresenceCondition:
        if (props_PresenceCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PresenceCondition = cpb.create();
        }
        return props_PresenceCondition;
      case LanguageConceptSwitch.PrimDoubleType:
        if (props_PrimDoubleType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("_double");
          props_PrimDoubleType = cpb.create();
        }
        return props_PrimDoubleType;
      case LanguageConceptSwitch.PrimFloatType:
        if (props_PrimFloatType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("_float");
          props_PrimFloatType = cpb.create();
        }
        return props_PrimFloatType;
      case LanguageConceptSwitch.PrimIntType:
        if (props_PrimIntType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("_int");
          props_PrimIntType = cpb.create();
        }
        return props_PrimIntType;
      case LanguageConceptSwitch.PrimLongType:
        if (props_PrimLongType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("_long");
          props_PrimLongType = cpb.create();
        }
        return props_PrimLongType;
      case LanguageConceptSwitch.PrimNumConstant:
        if (props_PrimNumConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PrimNumConstant");
          props_PrimNumConstant = cpb.create();
        }
        return props_PrimNumConstant;
      case LanguageConceptSwitch.PrimType:
        if (props_PrimType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PrimType = cpb.create();
        }
        return props_PrimType;
      case LanguageConceptSwitch.SubstituteAnnotation:
        if (props_SubstituteAnnotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SubstituteAnnotation");
          props_SubstituteAnnotation = cpb.create();
        }
        return props_SubstituteAnnotation;
    }
    return null;
  }
}
