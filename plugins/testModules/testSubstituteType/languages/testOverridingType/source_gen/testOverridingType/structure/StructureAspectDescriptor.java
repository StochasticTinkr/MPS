package testOverridingType.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(6);
  /*package*/ final ConceptDescriptor myConceptErrorType = new ConceptDescriptorBuilder("testOverridingType.structure.ErrorType", MetaIdFactory.conceptId(0x394e385732564e8bL, 0x96015abe7ad354d9L, 0x19f3ac4f6f2a7f40L)).super_("testAnnotatedType.structure.PrimType").super_(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bcL)).parents("testAnnotatedType.structure.PrimType").parentIds(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bcL)).alias("error", "").create();
  /*package*/ final ConceptDescriptor myConceptOverrideAnnotation = new ConceptDescriptorBuilder("testOverridingType.structure.OverrideAnnotation", MetaIdFactory.conceptId(0x394e385732564e8bL, 0x96015abe7ad354d9L, 0x391548fac32006d4L)).super_("jetbrains.mps.lang.core.structure.NodeAttribute").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L)).parents("jetbrains.mps.lang.core.structure.NodeAttribute").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L)).childDescriptors(new ConceptDescriptorBuilder.Link(6405009306797650362L, "substitute", MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bcL), false, false, false), new ConceptDescriptorBuilder.Link(6405009306797650372L, "condition", MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1c7L), false, false, false)).children(new String[]{"substitute", "condition"}, new boolean[]{false, false}).create();
  /*package*/ final ConceptDescriptor myConceptOverridingPrimFloatType = new ConceptDescriptorBuilder("testOverridingType.structure.OverridingPrimFloatType", MetaIdFactory.conceptId(0x394e385732564e8bL, 0x96015abe7ad354d9L, 0x5b362c13a4993604L)).super_("testAnnotatedType.structure.PrimFloatType").super_(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bdL)).parents("testAnnotatedType.structure.PrimFloatType").parentIds(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782beb1bdL)).alias("_float_overridden", "").create();
  /*package*/ final ConceptDescriptor myConceptOverridingPrimIntType = new ConceptDescriptorBuilder("testOverridingType.structure.OverridingPrimIntType", MetaIdFactory.conceptId(0x394e385732564e8bL, 0x96015abe7ad354d9L, 0x5b362c13a49935f1L)).super_("testAnnotatedType.structure.PrimIntType").super_(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782be609eL)).parents("testAnnotatedType.structure.PrimIntType").parentIds(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x58e32a0782be609eL)).alias("_int_overridden", "").create();
  /*package*/ final ConceptDescriptor myConceptOverridingPrimNumConstant = new ConceptDescriptorBuilder("testOverridingType.structure.OverridingPrimNumConstant", MetaIdFactory.conceptId(0x394e385732564e8bL, 0x96015abe7ad354d9L, 0x5b362c13a4988795L)).super_("testAnnotatedType.structure.PrimNumConstant").super_(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x1469c391a09a5eefL)).parents("testAnnotatedType.structure.PrimNumConstant").parentIds(MetaIdFactory.conceptId(0x2f74e72e3e3d480eL, 0xbae1cc709d588366L, 0x1469c391a09a5eefL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(6572489169071278427L, "isOverriding")).properties("isOverriding").create();
  /*package*/ final ConceptDescriptor myConceptUnconditionalOverrideAnnotation = new ConceptDescriptorBuilder("testOverridingType.structure.UnconditionalOverrideAnnotation", MetaIdFactory.conceptId(0x394e385732564e8bL, 0x96015abe7ad354d9L, 0x19f3ac4f6f2a050aL)).super_("testOverridingType.structure.OverrideAnnotation").super_(MetaIdFactory.conceptId(0x394e385732564e8bL, 0x96015abe7ad354d9L, 0x391548fac32006d4L)).parents("testOverridingType.structure.OverrideAnnotation").parentIds(MetaIdFactory.conceptId(0x394e385732564e8bL, 0x96015abe7ad354d9L, 0x391548fac32006d4L)).create();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptErrorType.getId(), 0);
    myIndexMap.put(myConceptOverrideAnnotation.getId(), 1);
    myIndexMap.put(myConceptOverridingPrimFloatType.getId(), 2);
    myIndexMap.put(myConceptOverridingPrimIntType.getId(), 3);
    myIndexMap.put(myConceptOverridingPrimNumConstant.getId(), 4);
    myIndexMap.put(myConceptUnconditionalOverrideAnnotation.getId(), 5);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptErrorType, myConceptOverrideAnnotation, myConceptOverridingPrimFloatType, myConceptOverridingPrimIntType, myConceptOverridingPrimNumConstant, myConceptUnconditionalOverrideAnnotation);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptErrorType;
      case 1:
        return myConceptOverrideAnnotation;
      case 2:
        return myConceptOverridingPrimFloatType;
      case 3:
        return myConceptOverridingPrimIntType;
      case 4:
        return myConceptOverridingPrimNumConstant;
      case 5:
        return myConceptUnconditionalOverrideAnnotation;
      default:
        throw new IllegalStateException();
    }
  }
}
