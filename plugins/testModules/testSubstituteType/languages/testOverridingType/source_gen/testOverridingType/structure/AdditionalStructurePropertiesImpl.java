package testOverridingType.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_ErrorType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OverrideAnnotation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OverridingPrimFloatType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OverridingPrimIntType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OverridingPrimNumConstant = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UnconditionalOverrideAnnotation = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0h.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_ErrorType;
          }
          break;
        case 1:
          if (true) {
            return props_OverrideAnnotation;
          }
          break;
        case 2:
          if (true) {
            return props_OverridingPrimFloatType;
          }
          break;
        case 3:
          if (true) {
            return props_OverridingPrimIntType;
          }
          break;
        case 4:
          if (true) {
            return props_OverridingPrimNumConstant;
          }
          break;
        case 5:
          if (true) {
            return props_UnconditionalOverrideAnnotation;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0h = buildConceptIndices(MetaAdapterFactory.getConcept(0x394e385732564e8bL, 0x96015abe7ad354d9L, 0x19f3ac4f6f2a7f40L, "ErrorType"), MetaAdapterFactory.getConcept(0x394e385732564e8bL, 0x96015abe7ad354d9L, 0x391548fac32006d4L, "OverrideAnnotation"), MetaAdapterFactory.getConcept(0x394e385732564e8bL, 0x96015abe7ad354d9L, 0x5b362c13a4993604L, "OverridingPrimFloatType"), MetaAdapterFactory.getConcept(0x394e385732564e8bL, 0x96015abe7ad354d9L, 0x5b362c13a49935f1L, "OverridingPrimIntType"), MetaAdapterFactory.getConcept(0x394e385732564e8bL, 0x96015abe7ad354d9L, 0x5b362c13a4988795L, "OverridingPrimNumConstant"), MetaAdapterFactory.getConcept(0x394e385732564e8bL, 0x96015abe7ad354d9L, 0x19f3ac4f6f2a050aL, "UnconditionalOverrideAnnotation"));
}
