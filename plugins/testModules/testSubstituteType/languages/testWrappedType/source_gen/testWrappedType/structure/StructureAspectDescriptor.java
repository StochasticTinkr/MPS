package testWrappedType.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(2);
  /*package*/ final ConceptDescriptor myConceptTypeWithUnits = createDescriptorForTypeWithUnits();
  /*package*/ final ConceptDescriptor myConceptWrapperType = createDescriptorForWrapperType();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptTypeWithUnits.getId(), 0);
    myIndexMap.put(myConceptWrapperType.getId(), 1);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptTypeWithUnits, myConceptWrapperType);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptTypeWithUnits;
      case 1:
        return myConceptWrapperType;
      default:
        throw new IllegalStateException();
    }
  }

  private static ConceptDescriptor createDescriptorForTypeWithUnits() {
    return new ConceptDescriptorBuilder("testWrappedType.structure.TypeWithUnits", MetaIdFactory.conceptId(0x9290638e635b4ec6L, 0xbcad945ecb88a928L, 0x116157dc0d8c532bL)).super_("testWrappedType.structure.WrapperType").version(1).super_(MetaIdFactory.conceptId(0x9290638e635b4ec6L, 0xbcad945ecb88a928L, 0x116157dc0d8c52bcL)).parents("testWrappedType.structure.WrapperType").parentIds(MetaIdFactory.conceptId(0x9290638e635b4ec6L, 0xbcad945ecb88a928L, 0x116157dc0d8c52bcL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x116157dc0d8c532cL, "unit", new SNodePointer("r:58c474dc-af49-44e4-a2d1-3b8edbb18985(testWrappedType.structure)", "1252378774017430316"))).properties("unit").sourceNode(new SNodePointer("r:58c474dc-af49-44e4-a2d1-3b8edbb18985(testWrappedType.structure)", "1252378774017430315")).create();
  }
  private static ConceptDescriptor createDescriptorForWrapperType() {
    return new ConceptDescriptorBuilder("testWrappedType.structure.WrapperType", MetaIdFactory.conceptId(0x9290638e635b4ec6L, 0xbcad945ecb88a928L, 0x116157dc0d8c52bcL)).super_("jetbrains.mps.baseLanguage.structure.Type").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).parents("jetbrains.mps.baseLanguage.structure.Type").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x116157dc0d8c52bdL, "wrapped", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), false, false, false, new SNodePointer("r:58c474dc-af49-44e4-a2d1-3b8edbb18985(testWrappedType.structure)", "1252378774017430205"))).children(new String[]{"wrapped"}, new boolean[]{false}).abstract_().sourceNode(new SNodePointer("r:58c474dc-af49-44e4-a2d1-3b8edbb18985(testWrappedType.structure)", "1252378774017430204")).create();
  }
}
