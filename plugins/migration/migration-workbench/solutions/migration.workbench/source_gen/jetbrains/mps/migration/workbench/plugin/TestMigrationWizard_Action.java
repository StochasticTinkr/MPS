package jetbrains.mps.migration.workbench.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.migration.wizard.MigrationWizard;

public class TestMigrationWizard_Action extends BaseAction {
  private static final Icon ICON = null;

  public TestMigrationWizard_Action() {
    super("Test Migration Wizard", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      if (p == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    Project project = event.getData(CommonDataKeys.PROJECT);
    MPSProject mpsProject = event.getData(MPSCommonDataKeys.MPS_PROJECT);

    MigrationTestConfigDialog settingsDialog = new MigrationTestConfigDialog(project);
    if (!(settingsDialog.showAndGet())) {
      return;
    }
    TestMigrationSession session = new TestMigrationSession(mpsProject, settingsDialog.getResult());
    new MigrationWizard(project, session).showAndGet();
  }
}
