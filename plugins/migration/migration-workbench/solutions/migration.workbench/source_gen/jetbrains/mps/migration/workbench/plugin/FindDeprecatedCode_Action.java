package jetbrains.mps.migration.workbench.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.progress.PerformInBackgroundOption;
import jetbrains.mps.ide.findusages.model.SearchResults;
import org.jetbrains.mps.openapi.model.SNode;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.ide.migration.util.DeprecatedNodeProperties;
import jetbrains.mps.ide.migration.util.DeprecatedUtil;
import jetbrains.mps.util.Pair;
import jetbrains.mps.ide.findusages.model.CategoryKind;
import jetbrains.mps.ide.findusages.view.UsagesViewTool;

public class FindDeprecatedCode_Action extends BaseAction {
  private static final Icon ICON = null;

  public FindDeprecatedCode_Action() {
    super("Find Deprecated Code in Project", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return false;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    new Task.Backgroundable(event.getData(CommonDataKeys.PROJECT), "Searching", true, PerformInBackgroundOption.DEAF) {
      private SearchResults<SNode> searchResults = new SearchResults<SNode>();
      @Override
      public void run(@NotNull final ProgressIndicator indicator) {
        indicator.setIndeterminate(true);
        event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository().getModelAccess().runReadAction(new Runnable() {
          public void run() {
            Map<SNode, DeprecatedNodeProperties> dep = DeprecatedUtil.deprecated(event.getData(MPSCommonDataKeys.MPS_PROJECT).getScope());
            UsagesFormattingUtil.addResults(searchResults, new Pair(CategoryKind.DEFAULT_CATEGORY_KIND, "Deprecated Code"), dep);
          }
        });
      }
      @Override
      public void onSuccess() {
        event.getData(CommonDataKeys.PROJECT).getComponent(UsagesViewTool.class).show(searchResults, "No usages found");
      }
    }.queue();
  }
}
