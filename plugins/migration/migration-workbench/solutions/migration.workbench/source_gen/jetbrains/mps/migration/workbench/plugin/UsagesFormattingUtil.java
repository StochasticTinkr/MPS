package jetbrains.mps.migration.workbench.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.model.SearchResults;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.util.Pair;
import jetbrains.mps.ide.findusages.model.CategoryKind;
import java.util.Map;
import jetbrains.mps.ide.migration.util.DeprecatedNodeProperties;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.ide.findusages.model.SearchResult;

public class UsagesFormattingUtil {
  public static void addResults(final SearchResults<SNode> results, final Pair<CategoryKind, String> topCategory, Map<SNode, DeprecatedNodeProperties> nodes) {
    // todo support category kinds, uncomment following code 
    final CategoryKind versionKind = CategoryKind.DEFAULT_CATEGORY_KIND;
    final CategoryKind categoryKind = CategoryKind.DEFAULT_CATEGORY_KIND;

    MapSequence.fromMap(nodes).visitAll(new IVisitor<IMapping<SNode, DeprecatedNodeProperties>>() {
      public void visit(IMapping<SNode, DeprecatedNodeProperties> it) {
        SNode node = it.key();
        String ver = it.value().version;

        Pair cat2 = new Pair(versionKind, (ver == null ? "Unknown" : "ToRemove in " + ver));
        Pair cat3 = new Pair(categoryKind, it.value().category);
        results.add(new SearchResult(node, node, topCategory, cat2, cat3));
      }
    });
  }
}
