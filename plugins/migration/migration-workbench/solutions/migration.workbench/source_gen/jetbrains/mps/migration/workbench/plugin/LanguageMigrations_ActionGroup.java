package jetbrains.mps.migration.workbench.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.actions.GeneratedActionGroup;
import java.util.Set;
import com.intellij.openapi.util.Pair;
import jetbrains.mps.workbench.ActionPlace;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import java.util.List;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.migration.runtime.base.MigrationModuleUtil;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.SLanguageHierarchy;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.internal.collections.runtime.ISelector;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.migration.runtime.base.MigrationScript;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptReference;
import org.jetbrains.annotations.Nullable;

public class LanguageMigrations_ActionGroup extends GeneratedActionGroup {
  public static final String ID = "jetbrains.mps.migration.workbench.plugin.LanguageMigrations_ActionGroup";
  private Set<Pair<ActionPlace, Condition<BaseAction>>> myPlaces = SetSequence.fromSet(new HashSet<Pair<ActionPlace, Condition<BaseAction>>>());
  public LanguageMigrations_ActionGroup() {
    super("Language Migrations", ID);
    this.setIsInternal(false);
    this.setPopup(true);
  }
  public void doUpdate(AnActionEvent event) {
    removeAll();
    Project project = event.getData(MPSCommonDataKeys.PROJECT);
    if (project == null) {
      return;
    }
    final jetbrains.mps.project.Project mpsProject = event.getData(MPSCommonDataKeys.MPS_PROJECT);
    if (mpsProject == null) {
      return;
    }

    List<SLanguage> languages = Sequence.fromIterable(MigrationModuleUtil.getMigrateableModulesFromProject(mpsProject)).translate(new ITranslator2<SModule, SLanguage>() {
      public Iterable<SLanguage> translate(SModule module) {
        return new SLanguageHierarchy(LanguageRegistry.getInstance(mpsProject.getRepository()), module.getUsedLanguages()).getExtended();
      }
    }).distinct().sort(new ISelector<SLanguage, String>() {
      public String select(SLanguage it) {
        return it.getQualifiedName();
      }
    }, true).toListSequence();

    for (SLanguage language : languages) {
      String name = language.getQualifiedName();
      DefaultActionGroup langRootsGroup = new DefaultActionGroup(NameUtil.compactNamespace(name), true);

      for (int ver = 0; ver < language.getLanguageVersion(); ver++) {
        MigrationScript script = new MigrationScriptReference(language, ver).resolve(true);
        if (script == null) {
          continue;
        }

        langRootsGroup.add(new RunMigration(script));
      }
      if (langRootsGroup.getChildrenCount() > 0) {
        LanguageMigrations_ActionGroup.this.add(langRootsGroup);
      }
    }
    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {
      this.addPlace(p.first, p.second);
    }
  }
  public void addPlace(ActionPlace place, @Nullable Condition<BaseAction> cond) {
    SetSequence.fromSet(this.myPlaces).addElement(new Pair<ActionPlace, Condition<BaseAction>>(place, cond));
  }
  public boolean isStrict() {
    return false;
  }
}
