package jetbrains.mps.ide.migration;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.ide.migration.wizard.MigrationSession;
import jetbrains.mps.progress.ProgressMonitorAdapter;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import jetbrains.mps.ide.migration.wizard.MigrationTask;
import jetbrains.mps.ide.migration.wizard.MigrationError;
import org.apache.log4j.Level;
import jetbrains.mps.lang.migration.runtime.base.Problem;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.migration.global.MigrationOptions;

public class AntTaskExecutionUtil {
  private static final Logger LOG = LogManager.getLogger(AntTaskExecutionUtil.class);
  public static boolean migrate(final Project project) throws Exception {
    MigrationRegistry m = ProjectHelper.toIdeaProject(project).getComponent(MigrationRegistry.class);
    if (!(m.isMigrationRequired())) {
      return false;
    }

    MigrationSession session = new AntTaskExecutionUtil.MyMigrationSession(project);
    ProgressMonitorAdapter progress = new ProgressMonitorAdapter(new EmptyProgressIndicator());

    MigrationTask task = new MigrationTask(session, progress) {
      @Override
      protected void error(MigrationError error) {
        if (LOG.isEnabledFor(Level.ERROR)) {
          LOG.error(error.getMessage());
        }
        for (Problem p : Sequence.fromIterable(error.getProblems(new EmptyProgressIndicator()))) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("- " + p.getMessage() + "; reason object: " + p.getReason());
          }
        }
      }
    };
    task.run();

    project.getRepository().getModelAccess().runWriteInEDT(new Runnable() {
      public void run() {
        project.getRepository().saveAll();
      }
    });

    return true;
  }

  private static class MyMigrationSession extends MigrationSession.MigrationSessionBase {
    private Project myProject;
    private MigrationOptions myOptions = new MigrationOptions();
    private MigrationCheckerImpl myChecker;
    private MigrationExecutorImpl myExecutor;

    public MyMigrationSession(Project project) {
      myProject = project;
      this.myChecker = new MigrationCheckerImpl(myProject, getMigrationRegistry());
      this.myExecutor = new MigrationExecutorImpl(myProject);
      getRequiredSteps().add(MigrationSession.MigrationStepKind.MIGRATE);
    }
    public Project getProject() {
      return myProject;
    }
    public MigrationRegistry getMigrationRegistry() {
      return myProject.getComponent(MigrationRegistry.class);
    }
    public MigrationChecker getChecker() {
      return myChecker;
    }
    public MigrationOptions getOptions() {
      return myOptions;
    }
    @Override
    public MigrationExecutor getExecutor() {
      return myExecutor;
    }
  }
}
