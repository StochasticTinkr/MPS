package jetbrains.mps.ide.migration;

/*Generated by MPS */

import com.intellij.openapi.components.State;
import com.intellij.openapi.components.Storage;
import jetbrains.mps.migration.global.MigrationProperties;
import com.intellij.openapi.components.ProjectComponent;
import com.intellij.openapi.components.PersistentStateComponent;
import org.jdom.Element;
import java.util.Map;
import java.util.TreeMap;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import java.util.List;
import java.util.ArrayList;

@State(name = "MigrationProperties", storages = @Storage(value = "migration.xml")
)
public class ProjectMigrationProperties implements MigrationProperties, ProjectComponent, PersistentStateComponent<Element> {
  private static final String NAME = "key";
  private static final String VALUE = "value";
  private static final String SINGLE_PROP = "entry";
  protected Map<String, String> myProperties = new TreeMap<String, String>();
  public ProjectMigrationProperties() {
  }
  public void setProperty(@NotNull String key, String value) {
    if (value == null) {
      myProperties.remove(key);
      return;
    }
    myProperties.put(key, value);
  }
  @Nullable
  public String getProperty(String key) {
    return myProperties.get(key);
  }
  public interface MigrationPropertiesReloadListener {
    void onReload();
  }
  private List<ProjectMigrationProperties.MigrationPropertiesReloadListener> myListeners = new ArrayList<ProjectMigrationProperties.MigrationPropertiesReloadListener>(1);
  public void addListener(ProjectMigrationProperties.MigrationPropertiesReloadListener l) {
    myListeners.add(l);
  }
  public void removeListener(ProjectMigrationProperties.MigrationPropertiesReloadListener l) {
    myListeners.remove(l);
  }
  @Nullable
  @Override
  public Element getState() {
    Element res = new Element("ignored");
    for (String key : myProperties.keySet()) {
      Element prop = new Element(SINGLE_PROP);
      prop.setAttribute(NAME, key);
      prop.setAttribute(VALUE, myProperties.get(key));
      res.addContent(prop);
    }
    return res;
  }
  @Override
  public void loadState(Element state) {
    myProperties.clear();
    for (Element e : state.getChildren(SINGLE_PROP)) {
      myProperties.put(e.getAttributeValue(NAME), e.getAttributeValue(VALUE));
    }
    for (ProjectMigrationProperties.MigrationPropertiesReloadListener listener : myListeners) {
      listener.onReload();
    }
  }
  @Override
  public void projectOpened() {
  }
  @Override
  public void projectClosed() {
    myProperties.clear();
  }
  @Override
  public void initComponent() {
  }
  @Override
  public void disposeComponent() {
  }
  @NotNull
  @Override
  public String getComponentName() {
    return "ProjectMigrationProperties";
  }
}
