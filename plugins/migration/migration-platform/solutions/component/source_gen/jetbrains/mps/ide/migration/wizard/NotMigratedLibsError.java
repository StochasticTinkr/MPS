package jetbrains.mps.ide.migration.wizard;

/*Generated by MPS */

import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.migration.runtime.base.Problem;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.ide.migration.check.DependencyOnNotMigratedLibProblem;

public class NotMigratedLibsError extends MigrationError {
  private Map<SModule, SModule> errors;
  public NotMigratedLibsError(Map<SModule, SModule> errors) {
    this.errors = errors;
  }
  @Override
  public String getShortMessage() {
    return "Some dependent modules are not migrated.";
  }
  public String getMessage() {
    return "The project depends on external modules that were not fully migrated.<br><br>" + "If the error is ignored, further migrations may be applied incorrectly.<br>" + "It is recommended to migrate dependent modules first.\n\n";
  }
  public boolean canIgnore() {
    return true;
  }
  public Iterable<Problem> getProblems(ProgressIndicator progressIndicator) {
    return MapSequence.fromMap(errors).select(new ISelector<IMapping<SModule, SModule>, DependencyOnNotMigratedLibProblem>() {
      public DependencyOnNotMigratedLibProblem select(IMapping<SModule, SModule> it) {
        return new DependencyOnNotMigratedLibProblem(it.value(), it.key());
      }
    });
  }
}
