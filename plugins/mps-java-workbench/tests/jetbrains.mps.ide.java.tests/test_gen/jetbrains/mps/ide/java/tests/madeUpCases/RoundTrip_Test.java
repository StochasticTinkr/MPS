package jetbrains.mps.ide.java.tests.madeUpCases;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Rule;
import jetbrains.mps.lang.test.runtime.RunWithCommand;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import jetbrains.mps.ide.java.tests.utility.Utils;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

@MPSLaunch
public class RoundTrip_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(RoundTrip_Test.class, "${mps_home}", "r:62acf462-bd7b-40b0-b72a-892ef900fe37(jetbrains.mps.ide.java.tests.madeUpCases@tests)", false);
  @Rule
  public final RunWithCommand myWithCommandRule = new RunWithCommand(this);

  public RoundTrip_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_Simple() throws Throwable {
    new RoundTrip_Test.TestBody(this).test_Simple();
  }
  @Test
  public void test_Methods() throws Throwable {
    new RoundTrip_Test.TestBody(this).test_Methods();
  }
  @Test
  public void test_Fields() throws Throwable {
    new RoundTrip_Test.TestBody(this).test_Fields();
  }
  @Test
  public void test_TypeVars() throws Throwable {
    new RoundTrip_Test.TestBody(this).test_TypeVars();
  }
  @Test
  public void test_OuterClassThis() throws Throwable {
    new RoundTrip_Test.TestBody(this).test_OuterClassThis();
  }
  @Test
  public void test_VarargMethods() throws Throwable {
    new RoundTrip_Test.TestBody(this).test_VarargMethods();
  }

  /*package*/ static class TestBody extends BaseTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    public void test_Simple() throws Exception {
      addNodeById("4795297196607456975");
      addNodeById("4795297196607508738");
      addNodeById("8083368042256391113");
      addNodeById("7030568040400121706");
      addNodeById("1369191534307039900");
      addNodeById("1369191534311251473");
      String genCode = Utils.generateCode(SNodeOperations.cast(getNodeById("4795297196607508732"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8c108ca66L, "ClassConcept"))));
      new Utils(myProject.getRepository()).checkStringStubs(genCode, SNodeOperations.cast(getNodeById("4795297196607508732"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8c108ca66L, "ClassConcept"))));
    }
    public void test_Methods() throws Exception {
      addNodeById("4795297196607456975");
      addNodeById("4795297196607508738");
      addNodeById("8083368042256391113");
      addNodeById("7030568040400121706");
      addNodeById("1369191534307039900");
      addNodeById("1369191534311251473");
      String genCode = Utils.generateCode(SNodeOperations.cast(getNodeById("4795297196607508741"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8c108ca66L, "ClassConcept"))));
      new Utils(myProject.getRepository()).checkStringStubs(genCode, SNodeOperations.cast(getNodeById("4795297196607508741"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8c108ca66L, "ClassConcept"))));
    }
    public void test_Fields() throws Exception {
      addNodeById("4795297196607456975");
      addNodeById("4795297196607508738");
      addNodeById("8083368042256391113");
      addNodeById("7030568040400121706");
      addNodeById("1369191534307039900");
      addNodeById("1369191534311251473");
      String genCode = Utils.generateCode(SNodeOperations.cast(getNodeById("8083368042256391114"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8c108ca66L, "ClassConcept"))));
      new Utils(myProject.getRepository()).checkStringStubs(genCode, SNodeOperations.cast(getNodeById("8083368042256391114"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8c108ca66L, "ClassConcept"))));
    }
    public void test_TypeVars() throws Exception {
      addNodeById("4795297196607456975");
      addNodeById("4795297196607508738");
      addNodeById("8083368042256391113");
      addNodeById("7030568040400121706");
      addNodeById("1369191534307039900");
      addNodeById("1369191534311251473");
      String genCode = Utils.generateCode(SNodeOperations.cast(getNodeById("7030568040400121707"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0x101edd46144L, "Interface"))));
      new Utils(myProject.getRepository()).checkStringStubs(genCode, SNodeOperations.cast(getNodeById("7030568040400121707"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0x101edd46144L, "Interface"))));
    }
    public void test_OuterClassThis() throws Exception {
      addNodeById("4795297196607456975");
      addNodeById("4795297196607508738");
      addNodeById("8083368042256391113");
      addNodeById("7030568040400121706");
      addNodeById("1369191534307039900");
      addNodeById("1369191534311251473");
      String genCode = Utils.generateCode(SNodeOperations.cast(getNodeById("1369191534307040156"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8c108ca66L, "ClassConcept"))));
      new Utils(myProject.getRepository()).checkString(genCode, SNodeOperations.cast(getNodeById("1369191534307040156"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8c108ca66L, "ClassConcept"))), false);
    }
    public void test_VarargMethods() throws Exception {
      addNodeById("4795297196607456975");
      addNodeById("4795297196607508738");
      addNodeById("8083368042256391113");
      addNodeById("7030568040400121706");
      addNodeById("1369191534307039900");
      addNodeById("1369191534311251473");
      String genCode = Utils.generateCode(SNodeOperations.cast(getNodeById("1369191534311251786"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8c108ca66L, "ClassConcept"))));
      new Utils(myProject.getRepository()).checkString(genCode, SNodeOperations.cast(getNodeById("1369191534311251786"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8c108ca66L, "ClassConcept"))), false);
    }


  }
}
