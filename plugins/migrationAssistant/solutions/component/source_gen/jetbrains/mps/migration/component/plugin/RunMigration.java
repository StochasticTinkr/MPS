package jetbrains.mps.migration.component.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.lang.migration.runtime.base.MigrationScript;
import jetbrains.mps.project.Project;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.lang.smodel.query.runtime.CommandUtil;
import jetbrains.mps.lang.smodel.query.runtime.QueryExecutionContext;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.module.SModule;

public class RunMigration extends BaseAction {
  private MigrationScript myScript;
  private Project myProject;
  public RunMigration(MigrationScript script) {
    this.myScript = script;
    getTemplatePresentation().setText(myScript.getCaption());
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!((super.collectActionData(event, _params)))) {
      return false;
    }
    myProject = event.getData(MPSCommonDataKeys.MPS_PROJECT);
    return myProject != null;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    {
      final SearchScope scope = CommandUtil.createScope(myProject);
      QueryExecutionContext context = new QueryExecutionContext() {
        public SearchScope getDefaultSearchScope() {
          return scope;
        }
      };
      Sequence.fromIterable(CommandUtil.modules(CommandUtil.createConsoleScope(null, false, context))).visitAll(new IVisitor<SModule>() {
        public void visit(SModule it) {
          RunMigration.this.myScript.execute(it);
        }
      });
    }
  }
}
