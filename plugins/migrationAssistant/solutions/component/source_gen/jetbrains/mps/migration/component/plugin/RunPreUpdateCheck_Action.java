package jetbrains.mps.migration.component.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.migration.runtime.base.Problem;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.migration.component.util.MigrationsUtil;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.ide.migration.check.MigrationCheckUtil;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.ide.migration.check.MigrationOutputUtil;

public class RunPreUpdateCheck_Action extends BaseAction {
  private static final Icon ICON = null;

  public RunPreUpdateCheck_Action() {
    super("Run Pre-Update Check", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return false;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final List<Problem> problems = ListSequence.fromList(new ArrayList<Problem>());
    final List<SModule>[] modules = new List[1];
    final SRepository repos = event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository();
    repos.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        modules[0] = Sequence.fromIterable(MigrationsUtil.getMigrateableModulesFromProject(event.getData(MPSCommonDataKeys.MPS_PROJECT))).toListSequence();
      }
    });

    ProgressManager.getInstance().run(new Task.Modal(event.getData(CommonDataKeys.PROJECT), "Pre-Update Check", true) {
      public void run(@NotNull final ProgressIndicator progressIndicator) {
        progressIndicator.setIndeterminate(false);
        repos.getModelAccess().runReadAction(new Runnable() {
          public void run() {
            ListSequence.fromList(problems).addSequence(CollectionSequence.fromCollection(MigrationCheckUtil.getNotMigrated(modules[0], new _FunctionTypes._void_P1_E0<Double>() {
              public void invoke(Double d) {
                progressIndicator.setFraction(d);
              }
            }, 1000)));
          }
        });
      }
    });

    if (ListSequence.fromList(problems).isEmpty()) {
      Messages.showMessageDialog(event.getData(CommonDataKeys.PROJECT), "No problems found.\nProject can be migrated", "Migration", null);
    } else {
      MigrationOutputUtil.showProblems(event.getData(CommonDataKeys.PROJECT), problems);
    }
  }
}
