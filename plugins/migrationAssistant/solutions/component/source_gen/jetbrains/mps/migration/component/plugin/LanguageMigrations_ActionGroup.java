package jetbrains.mps.migration.component.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.actions.GeneratedActionGroup;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.Set;
import com.intellij.openapi.util.Pair;
import jetbrains.mps.workbench.ActionPlace;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.ide.migration.MigrationManager;
import org.jetbrains.mps.openapi.language.SLanguage;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.lang.smodel.query.runtime.CommandUtil;
import jetbrains.mps.lang.smodel.query.runtime.QueryExecutionContext;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.migration.component.util.MigrationsUtil;
import jetbrains.mps.smodel.SLanguageHierarchy;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.migration.runtime.base.MigrationScript;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptReference;
import com.intellij.openapi.extensions.PluginId;
import org.jetbrains.annotations.Nullable;

public class LanguageMigrations_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = LogManager.getLogger(LanguageMigrations_ActionGroup.class);
  public static final String ID = "jetbrains.mps.migration.component.plugin.LanguageMigrations_ActionGroup";
  private Set<Pair<ActionPlace, Condition<BaseAction>>> myPlaces = SetSequence.fromSet(new HashSet<Pair<ActionPlace, Condition<BaseAction>>>());
  public LanguageMigrations_ActionGroup() {
    super("Language Migrations", ID);
    this.setIsInternal(false);
    this.setPopup(true);
    try {
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }
  public void doUpdate(AnActionEvent event) {
    LanguageMigrations_ActionGroup.this.removeAll();
    Project project = event.getData(MPSCommonDataKeys.PROJECT);
    if (project == null) {
      return;
    }
    jetbrains.mps.project.Project mpsProject = event.getData(MPSCommonDataKeys.MPS_PROJECT);
    if (mpsProject == null) {
      return;
    }
    final MigrationManager mm = project.getComponent(MigrationManager.class);
    if (mm == null) {
      return;
    }

    Set<SLanguage> languages = SetSequence.fromSet(new HashSet<SLanguage>());
    {
      final SearchScope scope = CommandUtil.createScope(mpsProject);
      QueryExecutionContext context = new QueryExecutionContext() {
        public SearchScope getDefaultSearchScope() {
          return scope;
        }
      };
      for (SModule module : Sequence.fromIterable(CommandUtil.modules(CommandUtil.createConsoleScope(null, false, context))).where(new IWhereFilter<SModule>() {
        public boolean accept(SModule it) {
          return MigrationsUtil.isModuleMigrateable(it);
        }
      })) {
        SetSequence.fromSet(languages).addSequence(SetSequence.fromSet(new SLanguageHierarchy(module.getUsedLanguages()).getExtended()));
      }
    }
    SetSequence.fromSet(languages).visitAll(new IVisitor<SLanguage>() {
      public void visit(SLanguage it) {
        for (int ver = 0; ver < it.getLanguageVersion(); ver++) {
          MigrationScript script = mm.getMigrationComponent().fetchMigrationScript(new MigrationScriptReference(it, ver), true);
          if (script == null) {
            continue;
          }
          LanguageMigrations_ActionGroup.this.addParameterizedAction(new RunMigration_Action(script), PluginId.getId("jetbrains.mps.migration.component"), script);
        }
      }
    });
    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {
      this.addPlace(p.first, p.second);
    }
  }
  public void addPlace(ActionPlace place, @Nullable Condition<BaseAction> cond) {
    SetSequence.fromSet(this.myPlaces).addElement(new Pair<ActionPlace, Condition<BaseAction>>(place, cond));
  }
  public boolean isStrict() {
    return false;
  }
}
