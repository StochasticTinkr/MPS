package jetbrains.mps.migration.component.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.actions.GeneratedActionGroup;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.Set;
import com.intellij.openapi.util.Pair;
import jetbrains.mps.workbench.ActionPlace;
import org.jetbrains.mps.util.Condition;
import jetbrains.mps.workbench.action.BaseAction;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.actionSystem.AnActionEvent;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.ide.migration.MigrationComponent;
import java.util.List;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.migration.component.util.MigrationsUtil;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.SLanguageHierarchy;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.internal.collections.runtime.ISelector;
import javax.swing.Icon;
import jetbrains.mps.ide.icons.IconManager;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.lang.migration.runtime.base.MigrationScript;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptReference;
import org.jetbrains.annotations.Nullable;

public class LanguageMigrations_ActionGroup extends GeneratedActionGroup {
  private static Logger LOG = LogManager.getLogger(LanguageMigrations_ActionGroup.class);
  public static final String ID = "jetbrains.mps.migration.component.plugin.LanguageMigrations_ActionGroup";
  private Set<Pair<ActionPlace, Condition<BaseAction>>> myPlaces = SetSequence.fromSet(new HashSet<Pair<ActionPlace, Condition<BaseAction>>>());
  public LanguageMigrations_ActionGroup() {
    super("Language Migrations", ID);
    this.setIsInternal(false);
    this.setPopup(true);
    try {
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
  }
  public void doUpdate(AnActionEvent event) {
    try {
      LanguageMigrations_ActionGroup.this.removeAll();
      Project project = event.getData(MPSCommonDataKeys.PROJECT);
      if (project == null) {
        return;
      }
      final jetbrains.mps.project.Project mpsProject = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (mpsProject == null) {
        return;
      }
      MigrationComponent migrationComponent = project.getComponent(MigrationComponent.class);
      if (migrationComponent == null) {
        return;
      }

      List<SLanguage> languages = Sequence.fromIterable(MigrationsUtil.getMigrateableModulesFromProject(mpsProject)).translate(new ITranslator2<SModule, SLanguage>() {
        public Iterable<SLanguage> translate(SModule module) {
          return new SLanguageHierarchy(LanguageRegistry.getInstance(mpsProject.getRepository()), module.getUsedLanguages()).getExtended();
        }
      }).distinct().sort(new ISelector<SLanguage, String>() {
        public String select(SLanguage it) {
          return it.getQualifiedName();
        }
      }, true).toListSequence();

      for (SLanguage language : languages) {
        String name = language.getQualifiedName();
        Icon icon = IconManager.getIconForNamespace(name);
        DefaultActionGroup langRootsGroup = new DefaultActionGroup(NameUtil.compactNamespace(name), true);
        langRootsGroup.getTemplatePresentation().setIcon(icon);

        for (int ver = 0; ver < language.getLanguageVersion(); ver++) {
          MigrationScript script = migrationComponent.fetchMigrationScript(new MigrationScriptReference(language, ver), true);
          if (script == null) {
            continue;
          }

          langRootsGroup.add(new RunMigration(script));
        }
        if (langRootsGroup.getChildrenCount() > 0) {
          LanguageMigrations_ActionGroup.this.add(langRootsGroup);
        }
      }
    } catch (Throwable t) {
      LOG.error("User group error", t);
    }
    for (Pair<ActionPlace, Condition<BaseAction>> p : this.myPlaces) {
      this.addPlace(p.first, p.second);
    }
  }
  public void addPlace(ActionPlace place, @Nullable Condition<BaseAction> cond) {
    SetSequence.fromSet(this.myPlaces).addElement(new Pair<ActionPlace, Condition<BaseAction>>(place, cond));
  }
  public boolean isStrict() {
    return false;
  }
}
