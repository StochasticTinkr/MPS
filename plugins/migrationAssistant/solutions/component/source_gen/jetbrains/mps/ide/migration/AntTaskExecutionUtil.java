package jetbrains.mps.ide.migration;

/*Generated by MPS */

import jetbrains.mps.project.Project;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.ide.migration.wizard.MigrationSession;
import jetbrains.mps.progress.ProgressMonitorAdapter;
import com.intellij.openapi.progress.EmptyProgressIndicator;
import jetbrains.mps.ide.migration.wizard.MigrationTask;
import jetbrains.mps.ide.migration.wizard.MigrationError;
import jetbrains.mps.migration.global.MigrationOptions;

public class AntTaskExecutionUtil {
  public static boolean migrate(final Project project) throws Exception {
    MigrationManager m = ProjectHelper.toIdeaProject(project).getComponent(MigrationManager.class);
    if (!(m.isMigrationRequired())) {
      return false;
    }

    MigrationSession session = new AntTaskExecutionUtil.MyMigrationSession(project);
    ProgressMonitorAdapter progress = new ProgressMonitorAdapter(new EmptyProgressIndicator());
    MigrationTask task = new MigrationTask(session, progress) {
      @Override
      protected void result(ProgressMonitorAdapter m, MigrationError error, String msg) {
        if (error == null) {
          return;
        }
        throw new RuntimeException(msg);
      }
    };

    task.run();

    project.getRepository().getModelAccess().runWriteInEDT(new Runnable() {
      public void run() {
        project.getRepository().saveAll();
      }
    });

    return true;
  }

  private static class MyMigrationSession extends MigrationSession.MigrationSessionBase {
    private Project myProject;
    private MigrationOptions myOptions = new MigrationOptions();

    public MyMigrationSession(Project project) {
      myProject = project;
    }
    public Project getProject() {
      return myProject;
    }
    public MigrationManager getMigrationManager() {
      return myProject.getComponent(MigrationManager.class);
    }
    public MigrationChecker getChecker() {
      return myProject.getComponent(MigrationChecker.class);
    }
    public MigrationOptions getOptions() {
      return this.myOptions;
    }
  }
}
