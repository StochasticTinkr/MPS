package jetbrains.mps.ide.migration;

/*Generated by MPS */

import jetbrains.mps.project.Project;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.migration.global.MigrationOptions;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.migration.component.util.MigrationsUtil;
import jetbrains.mps.ide.migration.check.MigrationCheckUtil;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public class AntTaskExecutionUtil {
  public static boolean migrate(final Project project) throws Exception {
    final MigrationManager m = ProjectHelper.toIdeaProject(project).getComponent(MigrationManager.class);
    if (!(m.isMigrationRequired())) {
      return false;
    }

    final Wrappers._boolean ok = new Wrappers._boolean(true);
    project.getRepository().getModelAccess().executeCommand(new Runnable() {
      public void run() {
        while (true) {
          // we don't know which options are "better" so we "select" no one 
          MigrationManager.MigrationStep step = m.nextProjectStep(new MigrationOptions(), true);
          if (step == null) {
            break;
          }
          if (!(step.execute())) {
            throw new RuntimeException("Problem on executing cleanup migrations");
          }
        }

        List<ScriptApplied.ScriptAppliedReference> missingMigrations = m.getMissingMigrations();
        if (ListSequence.fromList(missingMigrations).isNotEmpty()) {
          throw new RuntimeException("Some migrations are missing");
        }

        Iterable<SModule> modules = MigrationsUtil.getMigrateableModulesFromProject(project);
        ok.value = !(MigrationCheckUtil.haveProblems(modules, new _FunctionTypes._void_P1_E0<Double>() {
          public void invoke(Double fraction) {
          }
        }));

        if (!(ok.value)) {
          throw new RuntimeException("Pre-check failed");
        }

        while (true) {
          MigrationManager.MigrationStep step = m.nextProjectStep(new MigrationOptions(), false);
          if (step == null) {
            break;
          }
          if (!(step.execute())) {
            throw new RuntimeException("Problem on executing project migrations");
          }
        }

        while (true) {
          MigrationManager.MigrationStep step = m.nextModuleStep(null);
          if (step == null) {
            break;
          }
          if (!(step.execute())) {
            throw new RuntimeException("Problem on executing language migrations");
          }
        }
      }
    });

    project.getRepository().getModelAccess().runWriteInEDT(new Runnable() {
      public void run() {
        project.getRepository().saveAll();
      }
    });

    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        Iterable<SModule> modules = MigrationsUtil.getMigrateableModulesFromProject(project);
        ok.value = MigrationCheckUtil.haveProblems(modules, new _FunctionTypes._void_P1_E0<Double>() {
          public void invoke(Double fraction) {
          }
        });
      }
    });
    if (!(ok.value)) {
      throw new RuntimeException("Post-check failed");
    }

    return true;
  }
}
