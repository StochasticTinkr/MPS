package jetbrains.mps.ide.migration;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptReference;
import jetbrains.mps.lang.migration.runtime.base.MigrationScript;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.migration.component.util.MigrationsUtil;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.util.NameUtil;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;

public final class MigrationScriptApplied implements ScriptApplied {

  public static class MigrationScriptAppliedReference implements ScriptApplied.ScriptAppliedReference {
    private SModule myModule;
    private MigrationScriptReference myMigrationScriptReference;
    public MigrationScriptAppliedReference(MigrationScriptReference migrationScriptReference, SModule module) {
      myModule = module;
      myMigrationScriptReference = migrationScriptReference;
    }

    public SModule getModule() {
      return myModule;
    }

    public MigrationScriptReference getMigrationSciptReference() {
      return myMigrationScriptReference;
    }

    public MigrationScriptApplied resolve(MigrationComponent migrationComponent, boolean silently) {
      MigrationScript fetchMigrationScript = migrationComponent.fetchMigrationScript(myMigrationScriptReference, silently);
      if (fetchMigrationScript == null) {
        return null;
      }
      return new MigrationScriptApplied(fetchMigrationScript, myModule);
    }

    public boolean isAlreadyDone() {
      return !(SetSequence.fromSet(MigrationsUtil.getUsedLanguages(myModule)).contains(myMigrationScriptReference.getLanguage())) || myMigrationScriptReference.getFromVersion() < ((AbstractModule) myModule).getUsedLanguageVersion(myMigrationScriptReference.getLanguage(), false);
    }

    public String getKindDescription(ScriptApplied resolved) {
      MigrationScriptApplied script = ((MigrationScriptApplied) resolved);
      String langNameShrinked = NameUtil.compactNamespace(myMigrationScriptReference.getLanguage().getQualifiedName());
      if (script == null) {
        return "<missing script>: language:" + langNameShrinked + ", version:" + myMigrationScriptReference.getFromVersion();
      }
      return script.getScript().getCaption() + "  [" + langNameShrinked + "]";
    }
  }

  private MigrationScript myScript;
  private SModule myModule;
  public MigrationScriptApplied(MigrationScript script, SModule module) {
    myScript = script;
    myModule = module;
  }

  public MigrationScript getScript() {
    return myScript;
  }

  public SModule getModule() {
    return myModule;
  }

  public Iterable<ScriptApplied.ScriptAppliedReference> getDependencies() {
    List<ScriptApplied.ScriptAppliedReference> result = ListSequence.fromList(new ArrayList<ScriptApplied.ScriptAppliedReference>());
    int fromVersion = myScript.getDescriptor().getFromVersion();
    if (fromVersion > 0) {
      ListSequence.fromList(result).addElement(new MigrationScriptApplied.MigrationScriptAppliedReference(new MigrationScriptReference(myScript.getDescriptor().getLanguage(), fromVersion - 1), myModule));
    }
    for (MigrationScriptReference script : Sequence.fromIterable(myScript.executeAfter())) {
      ListSequence.fromList(result).addElement(new MigrationScriptApplied.MigrationScriptAppliedReference(script, myModule));
    }
    for (MigrationScriptReference script : Sequence.fromIterable(myScript.requiresData())) {
      for (SModule dep : SetSequence.fromSet(MigrationsUtil.getModuleDependencies(myModule))) {
        ListSequence.fromList(result).addElement(new MigrationScriptApplied.MigrationScriptAppliedReference(script, dep));
      }
    }
    return result;
  }

  public boolean execute(MigrationComponent migrationComponent) {
    return migrationComponent.executeMigrationScript(this);
  }

  public String getDescription() {
    return new MigrationScriptApplied.MigrationScriptAppliedReference(myScript.getDescriptor(), myModule).getKindDescription(this) + ": " + myModule.getModuleName();
  }
}
