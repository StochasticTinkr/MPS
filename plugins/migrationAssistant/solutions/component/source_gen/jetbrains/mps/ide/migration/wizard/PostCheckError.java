package jetbrains.mps.ide.migration.wizard;

/*Generated by MPS */

import jetbrains.mps.project.Project;
import jetbrains.mps.lang.migration.runtime.base.Problem;
import com.intellij.openapi.progress.ProgressIndicator;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.migration.component.util.MigrationsUtil;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.ide.migration.check.MigrationCheckUtil;
import jetbrains.mps.ide.migration.MigrationComponent;

public class PostCheckError extends MigrationErrorDescriptor {
  private Project myProject;
  private boolean myHaveBadCode;

  public PostCheckError(Project p, boolean haveBadCode) {
    myProject = p;
    myHaveBadCode = haveBadCode;
  }
  public String getMessage() {
    String res = "Migration Assistant was unable to migrate some nodes in this project.<br><br>";
    if (myHaveBadCode) {
      res += "Problems will be shown in Model Checker tool when the project is loaded.";
    } else {
      res += "Some code can't be migrated automatically and should be changed manually.<br>" + "Places to be changed manually will be shown in Model Checker tool after the project is loaded.<br>";
      res += "You can re-run search for not migrated code at any time by choosing MainMenu->Migrations->Run Pre-Update Check";
    }
    return res;
  }
  public Iterable<Problem> getProblems(ProgressIndicator progressIndicator) {
    Iterable<SModule> modules = MigrationsUtil.getMigrateableModulesFromProject(myProject);
    return CollectionSequence.fromCollection(MigrationCheckUtil.getNotMigrated(modules, myProject.getComponent(MigrationComponent.class), MigrationCheckUtil.progressIndicatorToCallback(progressIndicator, 0, 0.5), 100)).union(CollectionSequence.fromCollection(MigrationCheckUtil.getProblems(modules, MigrationCheckUtil.progressIndicatorToCallback(progressIndicator, 0.5, 1), 100)));
  }
  @Override
  public boolean canIgnore() {
    throw new UnsupportedOperationException("not supposed to be called");
  }
}
