package jetbrains.mps.ide.migration.wizard;

/*Generated by MPS */

import jetbrains.mps.project.Project;
import jetbrains.mps.lang.migration.runtime.base.Problem;
import com.intellij.openapi.progress.ProgressIndicator;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.migration.component.util.MigrationsUtil;
import jetbrains.mps.ide.migration.check.MigrationCheckUtil;

public class PreCheckError extends MigrationErrorDescriptor {
  private boolean myCanIgnore;
  private Project myProject;
  public PreCheckError(Project p, boolean canIgnore) {
    myCanIgnore = canIgnore;
    myProject = p;
  }
  public String getMessage() {
    if (!(myCanIgnore)) {
      return "Migration Assistant found some problems that prevent this project from being migrated.<br><br>" + "Try running migrations after correcting your project and/or adding necessary libraries.<br>" + "Migration Assistant will be started again on next project opening or it can be started " + "manually by choosing Tools->Run Migration Assistant from the main menu.<br><br>" + "Problems will be shown in Model Checker tool when the project is loaded.";
    } else {
      return "Migration Assistant found some broken references that prevent this project from being migrated.<br><br>" + "Try running migrations after correcting your project and/or adding necessary libraries.<br>" + "You can ignore all broken references and continue migration, but it can cause some migrations to run improperly.<br>" + "Migration Assistant will be started again on next project opening or it can be started " + "manually by choosing Tools->Run Migration Assistant from the main menu.<br><br>" + "Problems will be shown in Model Checker tool when the project is loaded.";
    }
  }
  public Iterable<Problem> getProblems(ProgressIndicator progressIndicator) {
    Iterable<SModule> modules = MigrationsUtil.getMigrateableModulesFromProject(myProject);
    return MigrationCheckUtil.getProblems(modules, MigrationCheckUtil.progressIndicatorToCallback(progressIndicator, 0, 1), 100);
  }

  @Override
  public boolean canIgnore() {
    return myCanIgnore;
  }
}
