package jetbrains.mps.ide.migration.wizard;

/*Generated by MPS */

import javax.swing.JTextPane;
import com.intellij.openapi.project.Project;
import javax.swing.JComponent;
import java.awt.Dimension;
import java.awt.BorderLayout;
import jetbrains.mps.ide.ui.util.UIUtil;

public class MigrationErrorWizardStep extends MigrationWizardStep {
  public static final String ID = "Problem";
  private JTextPane myInfoLabel;

  private MigrationProblemsContainer myErrorContainer;

  public MigrationErrorWizardStep(Project project, MigrationProblemsContainer stateHolder) {
    super(project, "Could not Apply All Migrations", ID);
    myErrorContainer = stateHolder;
  }
  @Override
  protected final void doCreateComponent(JComponent mainPanel) {
    myInfoLabel = new JTextPane();
    this.myInfoLabel.setPreferredSize(new Dimension(300, 220));
    mainPanel.add(this.myInfoLabel, BorderLayout.CENTER);
  }

  @Override
  public void _init() {
    super._init();
    UIUtil.setTextPaneHtmlText(myInfoLabel, myErrorContainer.getErrorDescriptor().getMessage());
  }
  @Override
  public Object getPreviousStepId() {
    return null;
  }
  @Override
  public Object getNextStepId() {
    if (myErrorContainer.getErrorDescriptor().canIgnore()) {
      return MigrationsProgressWizardStep.ID_fallback;
    } else {
      return null;
    }
  }
  @Override
  public boolean canBeCancelled() {
    if (myErrorContainer.getErrorDescriptor().canIgnore()) {
      return true;
    } else {
      return false;
    }
  }
  @Override
  public String nextButtonLabel() {
    if (myErrorContainer.getErrorDescriptor().canIgnore()) {
      return "Ignore and Proceed";
    } else {
      return null;
    }
  }
  @Override
  public String cancelButtonLabel() {
    if (myErrorContainer.getErrorDescriptor().canIgnore()) {
      return "Stop Migration";
    } else {
      return null;
    }
  }
}
