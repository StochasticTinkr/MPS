package jetbrains.mps.ide.migration.wizard;

/*Generated by MPS */

import com.intellij.ui.components.JBList;
import java.util.Set;
import java.util.HashSet;
import javax.swing.JComponent;
import javax.swing.DefaultListModel;
import java.util.Collections;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import javax.swing.BorderFactory;
import com.intellij.ui.components.JBScrollPane;
import com.intellij.openapi.application.ApplicationManager;

public class MigrationStep extends LongBaseStep<MigrationTask> {
  public static final String ID = "migration";

  private JBList myList;
  private Set<String> myExecuted = new HashSet<String>();

  public MigrationStep(MigrationSession session) {
    super("Migration In Progress", ID, session, true);
    myTask = new MigrationTask(session);
  }

  @Override
  protected final void doCreateComponent(JComponent mainPanel) {
    super.doCreateComponent(mainPanel);
    myList = new JBList(new DefaultListModel());
    myList.setCellRenderer(new MigrationsListRenderer(myExecuted, Collections.emptySet()));
    JPanel listPanel = new JPanel(new BorderLayout(5, 5));
    listPanel.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createEmptyBorder(0, 0, 2, 0), BorderFactory.createEtchedBorder()));
    listPanel.add(new JBScrollPane(myList), BorderLayout.CENTER);
    mainPanel.add(listPanel, BorderLayout.CENTER);
    mainPanel.add(myProgress.getComponent(), BorderLayout.SOUTH);
  }



  protected void report(final String step) {
    ApplicationManager.getApplication().invokeAndWait(new Runnable() {
      public void run() {
        DefaultListModel model = (DefaultListModel) myList.getModel();
        model.addElement(step);
        myList.ensureIndexIsVisible(model.lastIndexOf(step));
        myList.repaint();
      }
    }, myModalityState);
  }

  @Override
  public Object getNextStepId() {
    if (!(isComplete())) {
      return null;
    }
    if (mySession.getErrorDescriptor() == null) {
      return null;
    }

    return MigrationErrorWizardStep.ID;
  }

  @Override
  public Object getPreviousStepId() {
    return null;
  }

  @Override
  public boolean isComplete() {
    return myTask.isComplete();
  }

  @Override
  public boolean canBeCancelled() {
    return false;
  }
}
