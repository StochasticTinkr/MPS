package jetbrains.mps.ide.migration;

/*Generated by MPS */

import com.intellij.ide.wizard.AbstractWizardEx;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.migration.wizard.MigrationProblemsContainer;
import java.awt.Dimension;
import java.util.List;
import jetbrains.mps.ide.migration.wizard.MigrationWizardStep;
import jetbrains.mps.ide.migration.wizard.InitialStep;
import jetbrains.mps.ide.migration.wizard.MigrationsProgressWizardStep;
import jetbrains.mps.ide.migration.wizard.MigrationErrorWizardStep;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.intellij.openapi.application.ModalityState;

public class MigrationAssistantWizard extends AbstractWizardEx {

  public MigrationAssistantWizard(Project project, MigrationManager manager, MigrationProblemsContainer errorContainer) {
    super("Migration Assistant Wizard", project, createSteps(project, manager, errorContainer));

    Dimension oldSize = super.getPreferredSize();
    setSize(((int) oldSize.getWidth()), ((int) (oldSize.getHeight() + 90)));
  }

  private static List<MigrationWizardStep> createSteps(Project project, MigrationManager manager, MigrationProblemsContainer errorContainer) {
    InitialStep initialStep = new InitialStep(project);
    MigrationsProgressWizardStep migrationsProgressWizardStep = new MigrationsProgressWizardStep(project, initialStep, manager, errorContainer);
    MigrationErrorWizardStep migrationErrorWizardStep = new MigrationErrorWizardStep(project, errorContainer);
    return ListSequence.fromListAndArray(new ArrayList<MigrationWizardStep>(), initialStep, migrationsProgressWizardStep, migrationErrorWizardStep);
  }

  @Override
  public boolean isAutoAdjustable() {
    return false;
  }
  @Override
  protected void updateStep() {
    super.updateStep();
    getCancelButton().setEnabled(((MigrationWizardStep) getCurrentStepObject()).canBeCancelled());
  }
  @Override
  protected void doNextAction() {
    super.doNextAction();

    ApplicationManager.getApplication().invokeLater(new Runnable() {
      public void run() {
        ((MigrationWizardStep) getCurrentStepObject()).autostart(new _FunctionTypes._void_P0_E0() {
          public void invoke() {
            ApplicationManager.getApplication().invokeLater(new Runnable() {
              public void run() {
                updateStep();
              }
            }, ModalityState.current());
          }
        });
      }
    }, ModalityState.current());
  }

  @Override
  protected String getHelpID() {
    return "migration.assistant";
  }
}
