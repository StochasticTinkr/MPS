package jetbrains.mps.ide.migration.wizard;

/*Generated by MPS */

import java.util.Map;
import jetbrains.mps.migration.global.ProjectMigrationWithOptions;
import javax.swing.JComponent;
import java.util.HashMap;
import java.awt.Dimension;
import javax.swing.JPanel;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.util.ui.JBInsets;
import java.awt.BorderLayout;
import javax.swing.JTextPane;
import jetbrains.mps.ide.ui.util.UIUtil;
import com.intellij.uiDesigner.core.GridConstraints;
import javax.swing.BoxLayout;
import com.intellij.ui.IdeBorderFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import com.intellij.ide.wizard.AbstractWizardStepEx;
import com.intellij.ide.wizard.CommitStepException;
import jetbrains.mps.internal.collections.runtime.SetSequence;

public class InitialStep extends BaseStep {
  public static final String ID = "initial";

  private static final String TEXT = "Welcome to Migration Assistant!<br><br>" + "MPS has detected that your project requires migration before it can be used with this version of the product.<br><br>" + "This wizard will guide you through the migration process. It's going to take a while.<br><br>" + "Select Next to proceed with migration or Cancel if you wish to postpone it.";

  private MigrationSession mySession;
  private Map<ProjectMigrationWithOptions.Option, JComponent> myComponents = new HashMap<ProjectMigrationWithOptions.Option, JComponent>();

  public InitialStep(MigrationSession session) {
    super("Migration Required", ID);
    mySession = session;
  }

  @Override
  protected void doCreateComponent(JComponent mainPanel) {
    // Set preferred size to avoid trim of Help button (if no icon presented) 
    mainPanel.setPreferredSize(new Dimension(400, 200));

    JPanel pagePanel = new JPanel(new GridLayoutManager(2, 1, new JBInsets(5, 5, 5, 0), -1, -1));
    mainPanel.add(pagePanel, BorderLayout.CENTER);

    JPanel infoHolder = new JPanel(new BorderLayout());
    JTextPane info = new JTextPane();
    UIUtil.setTextPaneHtmlText(info, TEXT);
    info.setPreferredSize(new Dimension(300, 220));
    infoHolder.add(info, BorderLayout.CENTER);
    pagePanel.add(infoHolder, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null));

    JPanel settingsPanel = new JPanel();
    settingsPanel.setLayout(new BoxLayout(settingsPanel, BoxLayout.Y_AXIS));
    settingsPanel.setBorder(IdeBorderFactory.createTitledBorder("Options", true));
    pagePanel.add(settingsPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null));

    for (ProjectMigrationWithOptions.Option option : ListSequence.fromList(mySession.getOptions().optionsList())) {
      JComponent c = option.createComponent();
      myComponents.put(option, c);
      settingsPanel.add(c);
    }
    settingsPanel.setVisible(!(myComponents.isEmpty()));
  }

  @Override
  public Object getNextStepId() {
    return PrepareStep.ID;
  }

  @Override
  public Object getPreviousStepId() {
    return null;
  }

  @Override
  public void commit(AbstractWizardStepEx.CommitType commitType) throws CommitStepException {
    super.commit(commitType);

    for (ProjectMigrationWithOptions.Option option : SetSequence.fromSet(myComponents.keySet())) {
      JComponent c = myComponents.get(option);
      Object val = option.getValue(c);
      mySession.getOptions().setOptionValue(option, val);
    }
  }
}
