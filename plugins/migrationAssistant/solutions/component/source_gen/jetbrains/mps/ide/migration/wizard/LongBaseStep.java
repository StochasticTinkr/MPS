package jetbrains.mps.ide.migration.wizard;

/*Generated by MPS */

import com.intellij.openapi.wm.impl.status.InlineProgressIndicator;
import com.intellij.openapi.application.ModalityState;
import javax.swing.JComponent;
import jetbrains.mps.ide.ThreadUtils;
import com.intellij.openapi.application.ApplicationManager;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import com.intellij.openapi.progress.ProgressManager;
import jetbrains.mps.project.Project;
import com.intellij.history.LocalHistory;
import jetbrains.mps.ide.project.ProjectHelper;
import java.awt.Color;

public abstract class LongBaseStep<Task extends StepTask> extends BaseStep {
  private boolean myCompactProgress;

  protected InlineProgressIndicator myProgress;
  protected MigrationSession mySession;
  protected Task myTask;
  protected ModalityState myModalityState;

  public LongBaseStep(String title, String id, MigrationSession session, boolean compactProgress) {
    super(title, id);
    mySession = session;
    myCompactProgress = compactProgress;
  }

  @Override
  protected void doCreateComponent(JComponent mainPanel) {
    myProgress = new InlineProgressIndicator(myCompactProgress, myTask) {
      @Override
      protected void queueProgressUpdate() {
        if (ThreadUtils.isInEDT()) {
          updateAndRepaint();
        } else {
          ApplicationManager.getApplication().invokeLater(new Runnable() {
            public void run() {
              updateAndRepaint();
            }
          }, ModalityState.stateForComponent(getComponent()));
        }
      }
      @Override
      protected void queueRunningUpdate(@NotNull Runnable update) {
        throw new UnsupportedOperationException();
      }
      @Override
      protected boolean isFinished() {
        return myTask.isComplete();
      }
    };
    myProgress.setIndeterminate(false);
  }

  @Override
  public void _init() {
    super._init();
    myModalityState = ModalityState.stateForComponent(getComponent());
  }

  protected abstract void report(String s);

  @Override
  public void autostart(_FunctionTypes._void_P0_E0 later) {
    runWhenStepIsInitialized(myProgress, myTask, later);
  }

  private void runWhenStepIsInitialized(final InlineProgressIndicator progress, final Task task, final _FunctionTypes._void_P0_E0 later) {
    // this is needed to fully show the step before starting working 
    ApplicationManager.getApplication().invokeLater(new Runnable() {
      public void run() {
        ApplicationManager.getApplication().executeOnPooledThread(new Runnable() {
          public void run() {
            ProgressManager.getInstance().runProcess(new Runnable() {
              public void run() {
                task.run(progress);
                later.invoke();
              }
            }, progress);
          }
        });
      }
    });
  }

  protected static void addGlobalLabel(Project p, String label) {
    LocalHistory.getInstance().putSystemLabel(ProjectHelper.toIdeaProject(p), label, Color.ORANGE.getRGB());
  }
}
