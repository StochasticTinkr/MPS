package jetbrains.mps.ide.migration;

/*Generated by MPS */

import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.migration.runtime.base.RefactoringLogReference;
import jetbrains.mps.lang.migration.runtime.base.RefactoringLog;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.migration.component.util.MigrationsUtil;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.util.NameUtil;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;

public final class RefactoringLogApplied implements ScriptApplied {

  public static class RefactoringLogAppliedReference implements ScriptApplied.ScriptAppliedReference {
    private SModule myModule;
    private RefactoringLogReference myRefactoringLogReference;
    public RefactoringLogAppliedReference(RefactoringLogReference refactoringLogReference, SModule module) {
      myModule = module;
      myRefactoringLogReference = refactoringLogReference;
    }
    public SModule getModule() {
      return myModule;
    }
    public RefactoringLogReference getRefactoringLogReference() {
      return myRefactoringLogReference;
    }
    public RefactoringLogApplied resolve(MigrationComponent migrationComponent, boolean silently) {
      RefactoringLog fetchRefactoringLog = migrationComponent.fetchRefactoringLog(myRefactoringLogReference, silently);
      if (fetchRefactoringLog == null) {
        return null;
      }
      return new RefactoringLogApplied(fetchRefactoringLog, myModule);
    }
    public boolean isAlreadyDone() {
      return !(SetSequence.fromSet(MigrationsUtil.getModuleDependencies(myModule)).contains(myRefactoringLogReference.getModule())) || myRefactoringLogReference.getFromVersion() < ((AbstractModule) myModule).getDependencyVersion(myRefactoringLogReference.getModule(), false);
    }
    public String getKindDescription(ScriptApplied resolved) {
      RefactoringLogApplied script = ((RefactoringLogApplied) resolved);
      String moduleNameShrinked = NameUtil.compactNamespace(myRefactoringLogReference.getModule().getModuleName());
      if (script == null) {
        return "<missing refactoring log>: module:" + moduleNameShrinked + ", version:" + myRefactoringLogReference.getFromVersion();
      }
      return script.getRefactoringLog().getCaption() + "  [" + moduleNameShrinked + "]";
    }
  }

  private RefactoringLog myRefactoringLog;
  private SModule myModule;
  public RefactoringLogApplied(RefactoringLog refactoringLog, SModule module) {
    myRefactoringLog = refactoringLog;
    myModule = module;
  }
  public RefactoringLog getRefactoringLog() {
    return myRefactoringLog;
  }
  public SModule getModule() {
    return myModule;
  }
  public Iterable<ScriptApplied.ScriptAppliedReference> getDependencies() {
    List<ScriptApplied.ScriptAppliedReference> result = ListSequence.fromList(new ArrayList<ScriptApplied.ScriptAppliedReference>());
    ListSequence.fromList(result).addElement(new RefactoringLogApplied.RefactoringLogAppliedReference(new RefactoringLogReference(myRefactoringLog.getDescriptor().getModule(), myRefactoringLog.getDescriptor().getFromVersion() - 1), myModule));
    for (RefactoringLogReference script : Sequence.fromIterable(myRefactoringLog.getExecuteAfter())) {
      ListSequence.fromList(result).addElement(new RefactoringLogApplied.RefactoringLogAppliedReference(script, myModule));
    }
    return result;
  }
  public boolean execute(MigrationComponent migrationComponent) {
    return migrationComponent.executeRefactoringLog(this);
  }
  public String getDescription() {
    return new RefactoringLogApplied.RefactoringLogAppliedReference(myRefactoringLog.getDescriptor(), myModule).getKindDescription(this);
  }
  @Override
  public String getId() {
    RefactoringLogReference d = myRefactoringLog.getDescriptor();
    return "refactoring:" + d.getModule().getModuleId().toString() + ":" + d.getFromVersion();
  }
}
