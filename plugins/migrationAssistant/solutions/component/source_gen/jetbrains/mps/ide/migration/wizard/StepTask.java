package jetbrains.mps.ide.migration.wizard;

/*Generated by MPS */

import com.intellij.openapi.progress.Task;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import com.intellij.history.LocalHistoryAction;
import jetbrains.mps.ide.project.ProjectHelper;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.persistence.PersistenceRegistry;
import jetbrains.mps.progress.ProgressMonitorAdapter;
import org.apache.log4j.Level;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.ide.migration.MigrationManager;
import com.intellij.openapi.application.ApplicationManager;
import com.intellij.history.LocalHistory;
import jetbrains.mps.project.Project;
import com.intellij.openapi.application.ModalityState;

public abstract class StepTask extends Task.Modal {
  private static final Logger LOG = LogManager.getLogger(StepTask.class);
  public static final String APPLY = "Applying migration ";

  protected MigrationSession mySession;
  protected volatile boolean myIsComplete = false;
  private LocalHistoryAction myCurrentChange = null;

  public StepTask(MigrationSession session, String name) {
    super(ProjectHelper.toIdeaProject(session.getProject()), name, false);
    mySession = session;
  }

  public void run(@NotNull ProgressIndicator progress) {
    PersistenceRegistry.getInstance().disableFastFindUsages();
    try {
      doRun(new ProgressMonitorAdapter(progress));
    } catch (Throwable t) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("exception occurred on pre-migration check", t);
      }
    } finally {
      myIsComplete = true;
      progress.setFraction(1.0);
      PersistenceRegistry.getInstance().enableFastFindUsages();
    }
  }

  protected abstract void doRun(ProgressMonitorAdapter progress);

  protected void result(ProgressMonitorAdapter m, MigrationErrorDescriptor error, String msg) {
    m.step(msg);
    m.done();
    mySession.setErrorDescriptor(error);
  }

  public boolean isComplete() {
    return myIsComplete;
  }

  protected static _FunctionTypes._void_P1_E0<? super Double> frac2inc(final int amount, final _FunctionTypes._void_P1_E0<? super Integer> progress) {
    final Wrappers._int done = new Wrappers._int(0);
    return new _FunctionTypes._void_P1_E0<Double>() {
      public void invoke(Double fraction) {
        int newDone = (int) Math.round(fraction * amount);
        progress.invoke(newDone - done.value);
        done.value = newDone;
      }
    };
  }

  protected boolean executeSingleStep(final MigrationManager.MigrationStep step, final _FunctionTypes._return_P0_E0<? extends MigrationManager.MigrationStep> next) {
    assert step != null;
    final Wrappers._boolean noException = new Wrappers._boolean(true);

    ApplicationManager.getApplication().invokeAndWait(new Runnable() {
      public void run() {
        if (myCurrentChange == null) {
          myCurrentChange = LocalHistory.getInstance().startAction(APPLY + step.getCommonDescription());
        }
        mySession.getProject().getRepository().getModelAccess().executeCommand(new Runnable() {
          public void run() {
            noException.value = ((MigrationManager.MigrationStep) step).execute();
          }
        });

        if (next == null || next.invoke() == null || neq_cchsnc_a0a3a0a0a0a3a91(next.invoke().getMergeId(), step.getMergeId())) {
          final Project project = mySession.getProject();
          project.getRepository().getModelAccess().runWriteAction(new Runnable() {
            public void run() {
              project.getRepository().saveAll();
            }
          });

          myCurrentChange.finish();
          myCurrentChange = null;
        }
      }
    }, ModalityState.any());

    return noException.value;
  }
  private static boolean neq_cchsnc_a0a3a0a0a0a3a91(Object a, Object b) {
    return !(((a != null ? a.equals(b) : a == b)));
  }
}
