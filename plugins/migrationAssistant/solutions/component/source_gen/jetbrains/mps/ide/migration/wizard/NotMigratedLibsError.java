package jetbrains.mps.ide.migration.wizard;

/*Generated by MPS */

import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.migration.runtime.base.Problem;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.ide.migration.check.DependencyOnNotMigratedLibProblem;

public class NotMigratedLibsError extends MigrationErrorDescriptor {
  private Map<SModule, SModule> errors;
  public NotMigratedLibsError(Map<SModule, SModule> errors) {
    this.errors = errors;
  }
  public String getMessage() {
    return "Migration was not started.<br>" + "The project depends on some external modules that were not fully migrated.<br><br>" + "Problems will be shown in Model Checker tool after the project is loaded.<br>" + "It's possible to invoke Migration Assistant at any time by selecting Tools->Run Migration Assistant from the main menu.";
  }
  public boolean canIgnore() {
    return true;
  }
  public Iterable<Problem> getProblems(ProgressIndicator progressIndicator) {
    return MapSequence.fromMap(errors).select(new ISelector<IMapping<SModule, SModule>, DependencyOnNotMigratedLibProblem>() {
      public DependencyOnNotMigratedLibProblem select(IMapping<SModule, SModule> it) {
        return new DependencyOnNotMigratedLibProblem(it.value(), it.key());
      }
    });
  }
}
