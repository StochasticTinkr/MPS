package jetbrains.mps.execution.demo.pluginSolution.plugin;

/*Generated by MPS */

import java.util.List;
import com.intellij.execution.junit.RuntimeConfigurationProducer;
import com.intellij.execution.configurations.ConfigurationType;
import com.intellij.execution.configurations.ConfigurationFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.execution.api.configurations.BaseMpsProducer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.plugins.runconfigs.MPSPsiElement;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public final class DemoApplication_Producer {

  public static List<RuntimeConfigurationProducer> getProducers(ConfigurationType configurationType) {
    ConfigurationFactory configurationFactory = null;
    // assume the one with id matching configuration kind is the primary one. 
    // In fact, though technically we support more that one factory per type (aka 'foreign' factories), all factories 
    // bear same id (due to overlook of template author, I believe), and we effectively take the fist registerd one, which I don't  
    // mind as 'foreign' factories do not work anyway. 
    for (ConfigurationFactory f : configurationType.getConfigurationFactories()) {
      if (f.getId().equals(configurationType.getId())) {
        configurationFactory = f;
        break;
      }
    }
    if (configurationFactory == null) {
      configurationFactory = configurationType.getConfigurationFactories()[0];
    }
    List<RuntimeConfigurationProducer> creators = ListSequence.fromList(new ArrayList<RuntimeConfigurationProducer>());
    ListSequence.fromList(creators).addElement(new DemoApplication_Producer.ProducerPart_NodeSomeConcept_rh22bz_a(configurationFactory));
    return creators;
  }

  public static final class ProducerPart_NodeSomeConcept_rh22bz_a extends BaseMpsProducer<SNode> {
    public ProducerPart_NodeSomeConcept_rh22bz_a(ConfigurationFactory configurationFactory) {
      super(configurationFactory);
    }

    @Override
    protected boolean isApplicable(Object source) {
      return source instanceof SNode && SNodeOperations.isInstanceOf(((SNode) source), MetaAdapterFactory.getConcept(0xe6081818930c4926L, 0xbdef3537bcc59087L, 0x446739e63be33684L, "jetbrains.mps.execution.demo.structure.SomeConcept"));
    }

    @Override
    protected DemoApplication_Configuration doCreateConfiguration(final SNode source) {
      setSourceElement(MPSPsiElement.createFor(source, getMpsProject()));
      if (!(SPropertyOperations.getBoolean(source, MetaAdapterFactory.getProperty(0xe6081818930c4926L, 0xbdef3537bcc59087L, 0x446739e63be33684L, 0x446739e63be7cbc4L, "valid")))) {
        return null;
      }
      DemoApplication_Configuration configuration = ((DemoApplication_Configuration) getConfigurationFactory().createConfiguration("" + "SomeNode " + SPropertyOperations.getString(source, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), getContext().getRunManager().getConfigurationTemplate(getConfigurationFactory()).getConfiguration()));
      configuration.getNode().setNode(source);
      return configuration;
    }


    @Override
    public DemoApplication_Producer.ProducerPart_NodeSomeConcept_rh22bz_a clone() {
      return (DemoApplication_Producer.ProducerPart_NodeSomeConcept_rh22bz_a) super.clone();
    }
  }
}
