package jetbrains.mps.execution.commands.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_BuilderBlockStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BuilderParameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommandBuilderExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommandDebuggerOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommandDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommandMethod = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommandParameterAssignment = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommandParameterDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommandParameterReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommandPartLengthOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommandPartToListOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommandProcessType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommandReferenceExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommandType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DebuggerSettingsCommandParameterDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExecuteCommandPart = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExplicitCommandParameterDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_KeyValueCommandPart = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ListCommandPart = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NewProcessBuilderExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ProcessBuilderCommandPart = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ProcessBuilderCommandPartType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ProcessType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PropertyCommandPart = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RedirectOutputExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ReportErrorStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ReportExecutionError = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StartAndWaitOperation = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0db.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_BuilderBlockStatement;
          }
          break;
        case 1:
          if (true) {
            return props_BuilderParameter;
          }
          break;
        case 2:
          if (true) {
            return props_CommandBuilderExpression;
          }
          break;
        case 3:
          if (true) {
            return props_CommandDebuggerOperation;
          }
          break;
        case 4:
          if (true) {
            return props_CommandDeclaration;
          }
          break;
        case 5:
          if (true) {
            return props_CommandMethod;
          }
          break;
        case 6:
          if (true) {
            return props_CommandParameterAssignment;
          }
          break;
        case 7:
          if (true) {
            return props_CommandParameterDeclaration;
          }
          break;
        case 8:
          if (true) {
            return props_CommandParameterReference;
          }
          break;
        case 9:
          if (true) {
            return props_CommandPartLengthOperation;
          }
          break;
        case 10:
          if (true) {
            return props_CommandPartToListOperation;
          }
          break;
        case 11:
          if (true) {
            return props_CommandProcessType;
          }
          break;
        case 12:
          if (true) {
            return props_CommandReferenceExpression;
          }
          break;
        case 13:
          if (true) {
            return props_CommandType;
          }
          break;
        case 14:
          if (true) {
            return props_DebuggerSettingsCommandParameterDeclaration;
          }
          break;
        case 15:
          if (true) {
            return props_ExecuteCommandPart;
          }
          break;
        case 16:
          if (true) {
            return props_ExplicitCommandParameterDeclaration;
          }
          break;
        case 17:
          if (true) {
            return props_KeyValueCommandPart;
          }
          break;
        case 18:
          if (true) {
            return props_ListCommandPart;
          }
          break;
        case 19:
          if (true) {
            return props_NewProcessBuilderExpression;
          }
          break;
        case 20:
          if (true) {
            return props_ProcessBuilderCommandPart;
          }
          break;
        case 21:
          if (true) {
            return props_ProcessBuilderCommandPartType;
          }
          break;
        case 22:
          if (true) {
            return props_ProcessType;
          }
          break;
        case 23:
          if (true) {
            return props_PropertyCommandPart;
          }
          break;
        case 24:
          if (true) {
            return props_RedirectOutputExpression;
          }
          break;
        case 25:
          if (true) {
            return props_ReportErrorStatement;
          }
          break;
        case 26:
          if (true) {
            return props_ReportExecutionError;
          }
          break;
        case 27:
          if (true) {
            return props_StartAndWaitOperation;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0db = buildConceptIndices(MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2bf8L, "BuilderBlockStatement"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2bfbL, "BuilderParameter"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2bf4L, "CommandBuilderExpression"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2bf1L, "CommandDebuggerOperation"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2be8L, "CommandDeclaration"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2be7L, "CommandMethod"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2be4L, "CommandParameterAssignment"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x65afee7b2c712158L, "CommandParameterDeclaration"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2bdcL, "CommandParameterReference"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x166dfef127134569L, "CommandPartLengthOperation"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x72450cdacb885c78L, "CommandPartToListOperation"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x87f99370d7e1ea3L, "CommandProcessType"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2bd9L, "CommandReferenceExpression"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2bd6L, "CommandType"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x75aadb0d4e61a576L, "DebuggerSettingsCommandParameterDeclaration"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x550ea9458ea107acL, "ExecuteCommandPart"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2be2L, "ExplicitCommandParameterDeclaration"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xc58d43a818a1f7fL, "KeyValueCommandPart"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x5f50ed14026999c9L, "ListCommandPart"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x2085f2c5c8400c12L, "NewProcessBuilderExpression"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xc58d43a818a1f80L, "ProcessBuilderCommandPart"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xc58d43a818ab5faL, "ProcessBuilderCommandPartType"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2c12L, "ProcessType"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x72450cdacb8a706eL, "PropertyCommandPart"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2c14L, "RedirectOutputExpression"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2c00L, "ReportErrorStatement"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2bfeL, "ReportExecutionError"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x2222cc72e62f7052L, "StartAndWaitOperation"));
}
