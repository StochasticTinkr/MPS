package jetbrains.mps.execution.commands.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_BuilderBlockStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuilderParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandBuilderExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandDebuggerOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandParameterAssignment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandPartLengthOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandPartToListOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandProcessType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandReferenceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DebuggerSettingsCommandParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteCommandPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExplicitCommandParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_KeyValueCommandPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListCommandPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NewProcessBuilderExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProcessBuilderCommandPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProcessBuilderCommandPartType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProcessType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyCommandPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RedirectOutputExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReportErrorStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReportExecutionError = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StartAndWaitOperation = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_BuilderBlockStatement;
      case 1:
        return props_BuilderParameter;
      case 2:
        return props_CommandBuilderExpression;
      case 3:
        return props_CommandDebuggerOperation;
      case 4:
        return props_CommandDeclaration;
      case 5:
        return props_CommandMethod;
      case 6:
        return props_CommandParameterAssignment;
      case 7:
        return props_CommandParameterDeclaration;
      case 8:
        return props_CommandParameterReference;
      case 9:
        return props_CommandPartLengthOperation;
      case 10:
        return props_CommandPartToListOperation;
      case 11:
        return props_CommandProcessType;
      case 12:
        return props_CommandReferenceExpression;
      case 13:
        return props_CommandType;
      case 14:
        return props_DebuggerSettingsCommandParameterDeclaration;
      case 15:
        return props_ExecuteCommandPart;
      case 16:
        return props_ExplicitCommandParameterDeclaration;
      case 17:
        return props_KeyValueCommandPart;
      case 18:
        return props_ListCommandPart;
      case 19:
        return props_NewProcessBuilderExpression;
      case 20:
        return props_ProcessBuilderCommandPart;
      case 21:
        return props_ProcessBuilderCommandPartType;
      case 22:
        return props_ProcessType;
      case 23:
        return props_PropertyCommandPart;
      case 24:
        return props_RedirectOutputExpression;
      case 25:
        return props_ReportErrorStatement;
      case 26:
        return props_ReportExecutionError;
      case 27:
        return props_StartAndWaitOperation;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
