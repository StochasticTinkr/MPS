package jetbrains.mps.execution.commands.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int BuilderBlockStatement = 0;
  public static final int BuilderParameter = 1;
  public static final int CommandBuilderExpression = 2;
  public static final int CommandDebuggerOperation = 3;
  public static final int CommandDeclaration = 4;
  public static final int CommandMethod = 5;
  public static final int CommandParameterAssignment = 6;
  public static final int CommandParameterDeclaration = 7;
  public static final int CommandParameterReference = 8;
  public static final int CommandPartLengthOperation = 9;
  public static final int CommandPartToListOperation = 10;
  public static final int CommandProcessType = 11;
  public static final int CommandReferenceExpression = 12;
  public static final int CommandType = 13;
  public static final int DebuggerSettingsCommandParameterDeclaration = 14;
  public static final int ExecuteCommandPart = 15;
  public static final int ExplicitCommandParameterDeclaration = 16;
  public static final int KeyValueCommandPart = 17;
  public static final int ListCommandPart = 18;
  public static final int NewProcessBuilderExpression = 19;
  public static final int ProcessBuilderCommandPart = 20;
  public static final int ProcessBuilderCommandPartType = 21;
  public static final int ProcessType = 22;
  public static final int PropertyCommandPart = 23;
  public static final int RedirectOutputExpression = 24;
  public static final int ReportErrorStatement = 25;
  public static final int ReportExecutionError = 26;
  public static final int StartAndWaitOperation = 27;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL);
    builder.put(0xbe3a0d5ba1a2bf8L, BuilderBlockStatement);
    builder.put(0xbe3a0d5ba1a2bfbL, BuilderParameter);
    builder.put(0xbe3a0d5ba1a2bf4L, CommandBuilderExpression);
    builder.put(0xbe3a0d5ba1a2bf1L, CommandDebuggerOperation);
    builder.put(0xbe3a0d5ba1a2be8L, CommandDeclaration);
    builder.put(0xbe3a0d5ba1a2be7L, CommandMethod);
    builder.put(0xbe3a0d5ba1a2be4L, CommandParameterAssignment);
    builder.put(0x65afee7b2c712158L, CommandParameterDeclaration);
    builder.put(0xbe3a0d5ba1a2bdcL, CommandParameterReference);
    builder.put(0x166dfef127134569L, CommandPartLengthOperation);
    builder.put(0x72450cdacb885c78L, CommandPartToListOperation);
    builder.put(0x87f99370d7e1ea3L, CommandProcessType);
    builder.put(0xbe3a0d5ba1a2bd9L, CommandReferenceExpression);
    builder.put(0xbe3a0d5ba1a2bd6L, CommandType);
    builder.put(0x75aadb0d4e61a576L, DebuggerSettingsCommandParameterDeclaration);
    builder.put(0x550ea9458ea107acL, ExecuteCommandPart);
    builder.put(0xbe3a0d5ba1a2be2L, ExplicitCommandParameterDeclaration);
    builder.put(0xc58d43a818a1f7fL, KeyValueCommandPart);
    builder.put(0x5f50ed14026999c9L, ListCommandPart);
    builder.put(0x2085f2c5c8400c12L, NewProcessBuilderExpression);
    builder.put(0xc58d43a818a1f80L, ProcessBuilderCommandPart);
    builder.put(0xc58d43a818ab5faL, ProcessBuilderCommandPartType);
    builder.put(0xbe3a0d5ba1a2c12L, ProcessType);
    builder.put(0x72450cdacb8a706eL, PropertyCommandPart);
    builder.put(0xbe3a0d5ba1a2c14L, RedirectOutputExpression);
    builder.put(0xbe3a0d5ba1a2c00L, ReportErrorStatement);
    builder.put(0xbe3a0d5ba1a2bfeL, ReportExecutionError);
    builder.put(0x2222cc72e62f7052L, StartAndWaitOperation);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
