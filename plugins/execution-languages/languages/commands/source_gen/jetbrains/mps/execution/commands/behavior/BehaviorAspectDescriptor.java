package jetbrains.mps.execution.commands.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myCommandType__BehaviorDescriptor = new CommandType__BehaviorDescriptor();
  private final BHDescriptor myExplicitCommandParameterDeclaration__BehaviorDescriptor = new ExplicitCommandParameterDeclaration__BehaviorDescriptor();
  private final BHDescriptor myCommandMethod__BehaviorDescriptor = new CommandMethod__BehaviorDescriptor();
  private final BHDescriptor myCommandDeclaration__BehaviorDescriptor = new CommandDeclaration__BehaviorDescriptor();
  private final BHDescriptor myCommandBuilderExpression__BehaviorDescriptor = new CommandBuilderExpression__BehaviorDescriptor();
  private final BHDescriptor myBuilderBlockStatement__BehaviorDescriptor = new BuilderBlockStatement__BehaviorDescriptor();
  private final BHDescriptor myBuilderParameter__BehaviorDescriptor = new BuilderParameter__BehaviorDescriptor();
  private final BHDescriptor myReportExecutionError__BehaviorDescriptor = new ReportExecutionError__BehaviorDescriptor();
  private final BHDescriptor myReportErrorStatement__BehaviorDescriptor = new ReportErrorStatement__BehaviorDescriptor();
  private final BHDescriptor myRedirectOutputExpression__BehaviorDescriptor = new RedirectOutputExpression__BehaviorDescriptor();
  private final BHDescriptor myCommandPartLengthOperation__BehaviorDescriptor = new CommandPartLengthOperation__BehaviorDescriptor();
  private final BHDescriptor myNewProcessBuilderExpression__BehaviorDescriptor = new NewProcessBuilderExpression__BehaviorDescriptor();
  private final BHDescriptor myExecuteCommandPart__BehaviorDescriptor = new ExecuteCommandPart__BehaviorDescriptor();
  private final BHDescriptor myCommandParameterDeclaration__BehaviorDescriptor = new CommandParameterDeclaration__BehaviorDescriptor();
  private final BHDescriptor myCommandPartToListOperation__BehaviorDescriptor = new CommandPartToListOperation__BehaviorDescriptor();
  private final BHDescriptor myDebuggerSettingsCommandParameterDeclaration__BehaviorDescriptor = new DebuggerSettingsCommandParameterDeclaration__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0t.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myBuilderBlockStatement__BehaviorDescriptor;
          }
          break;
        case 1:
          if (true) {
            return myBuilderParameter__BehaviorDescriptor;
          }
          break;
        case 2:
          if (true) {
            return myCommandBuilderExpression__BehaviorDescriptor;
          }
          break;
        case 3:
          if (true) {
            return myCommandDeclaration__BehaviorDescriptor;
          }
          break;
        case 4:
          if (true) {
            return myCommandMethod__BehaviorDescriptor;
          }
          break;
        case 5:
          if (true) {
            return myCommandParameterDeclaration__BehaviorDescriptor;
          }
          break;
        case 6:
          if (true) {
            return myCommandPartLengthOperation__BehaviorDescriptor;
          }
          break;
        case 7:
          if (true) {
            return myCommandPartToListOperation__BehaviorDescriptor;
          }
          break;
        case 8:
          if (true) {
            return myCommandType__BehaviorDescriptor;
          }
          break;
        case 9:
          if (true) {
            return myDebuggerSettingsCommandParameterDeclaration__BehaviorDescriptor;
          }
          break;
        case 10:
          if (true) {
            return myExecuteCommandPart__BehaviorDescriptor;
          }
          break;
        case 11:
          if (true) {
            return myExplicitCommandParameterDeclaration__BehaviorDescriptor;
          }
          break;
        case 12:
          if (true) {
            return myNewProcessBuilderExpression__BehaviorDescriptor;
          }
          break;
        case 13:
          if (true) {
            return myRedirectOutputExpression__BehaviorDescriptor;
          }
          break;
        case 14:
          if (true) {
            return myReportErrorStatement__BehaviorDescriptor;
          }
          break;
        case 15:
          if (true) {
            return myReportExecutionError__BehaviorDescriptor;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0t = buildConceptIndices(MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2bf8L, "jetbrains.mps.execution.commands.structure.BuilderBlockStatement"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2bfbL, "jetbrains.mps.execution.commands.structure.BuilderParameter"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2bf4L, "jetbrains.mps.execution.commands.structure.CommandBuilderExpression"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2be8L, "jetbrains.mps.execution.commands.structure.CommandDeclaration"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2be7L, "jetbrains.mps.execution.commands.structure.CommandMethod"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x65afee7b2c712158L, "jetbrains.mps.execution.commands.structure.CommandParameterDeclaration"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x166dfef127134569L, "jetbrains.mps.execution.commands.structure.CommandPartLengthOperation"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x72450cdacb885c78L, "jetbrains.mps.execution.commands.structure.CommandPartToListOperation"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2bd6L, "jetbrains.mps.execution.commands.structure.CommandType"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x75aadb0d4e61a576L, "jetbrains.mps.execution.commands.structure.DebuggerSettingsCommandParameterDeclaration"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x550ea9458ea107acL, "jetbrains.mps.execution.commands.structure.ExecuteCommandPart"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2be2L, "jetbrains.mps.execution.commands.structure.ExplicitCommandParameterDeclaration"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0x2085f2c5c8400c12L, "jetbrains.mps.execution.commands.structure.NewProcessBuilderExpression"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2c14L, "jetbrains.mps.execution.commands.structure.RedirectOutputExpression"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2c00L, "jetbrains.mps.execution.commands.structure.ReportErrorStatement"), MetaAdapterFactory.getConcept(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2bfeL, "jetbrains.mps.execution.commands.structure.ReportExecutionError"));
}
