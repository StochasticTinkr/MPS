package jetbrains.mps.execution.commands.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.editor.runtime.highlight.DeletionApproverUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;

public class RedirectOutputExpression {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new RedirectOutputExpression.RedirectOutputExpression_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new RedirectOutputExpression.RedirectOutputExpression_BACKSPACE(node));
  }
  public static class RedirectOutputExpression_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public RedirectOutputExpression_DELETE(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "replace redirect expression with process";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      if (DeletionApproverUtil.approve(editorContext, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2c14L, 0xbe3a0d5ba1a2c16L, "listener")))) {
        return;
      }
      SNode expression = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2c14L, 0xbe3a0d5ba1a2c15L, "processHandler"));
      SNodeOperations.replaceWithAnother(node, expression);
      SelectionUtil.selectLabelCellAnSetCaret(editorContext, expression, SelectionManager.LAST_CELL, -1);
    }
  }
  public static class RedirectOutputExpression_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public RedirectOutputExpression_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "replace redirect expression with process";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      if (DeletionApproverUtil.approve(editorContext, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2c14L, 0xbe3a0d5ba1a2c16L, "listener")))) {
        return;
      }
      SNode expression = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xf3347d8a0e794f35L, 0x8ac91574f25c986fL, 0xbe3a0d5ba1a2c14L, 0xbe3a0d5ba1a2c15L, "processHandler"));
      SNodeOperations.replaceWithAnother(node, expression);
      SelectionUtil.selectLabelCellAnSetCaret(editorContext, expression, SelectionManager.LAST_CELL, -1);
    }
  }
}
