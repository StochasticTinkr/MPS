package jetbrains.mps.execution.lib;

/*Generated by MPS */

import jetbrains.mps.execution.api.settings.IPersistentConfiguration;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SNode;
import com.intellij.execution.configurations.RuntimeConfigurationError;
import org.jdom.Element;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.util.xmlb.XmlSerializer;
import com.intellij.openapi.util.InvalidDataException;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.execution.lib.ui.NodeChooser;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.apache.log4j.Level;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.smodel.MPSModuleRepository;

public class NodeByConcept_Configuration implements IPersistentConfiguration {
  @NotNull
  private NodeByConcept_Configuration.MyState myState = new NodeByConcept_Configuration.MyState();
  public void checkConfiguration() throws RuntimeConfigurationException {
    {
      final Wrappers._T<String> errorText = new Wrappers._T<String>(null);
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          SNode node = getNodeResolved();
          if (node == null) {
            errorText.value = "Node is not specified.";
          } else if (!(myIsValid.invoke(node))) {
            errorText.value = "Node is not valid.";
          }
        }
      });
      if (isNotEmptyString(errorText.value)) {
        throw new RuntimeConfigurationError(errorText.value);
      }
    }
  }
  @Override
  public void writeExternal(Element element) throws WriteExternalException {
    element.addContent(XmlSerializer.serialize(myState));
  }
  @Override
  public void readExternal(Element element) throws InvalidDataException {
    if (element == null) {
      throw new InvalidDataException("Cant read " + this + ": element is null.");
    }
    XmlSerializer.deserializeInto(myState, (Element) element.getChildren().get(0));
  }
  public String getNodePointer() {
    return myState.myNodePointer;
  }
  public String getNodeText() {
    return myState.myNodeText;
  }
  public void setNodePointer(String value) {
    myState.myNodePointer = value;
  }
  public void setNodeText(String value) {
    myState.myNodeText = value;
  }
  @Nullable
  @Deprecated
  public SNode getNodeResolved() {
    return check_h3hwcn_a0a0(getNode());
  }
  public SNodeReference getNode() {
    if (this.getNodePointer() == null) {
      return null;
    }
    return PersistenceFacade.getInstance().createNodeReference(this.getNodePointer());
  }
  public void setNode(@Nullable SNode node) {
    if (node == null) {
      this.setNodePointer(null);
      this.setNodeText(null);
    } else {
      setNode(SNodeOperations.getPointer(node));
      this.setNodeText(NodeChooser.getFqName(node));
    }
  }
  /*package*/ void setNode(@Nullable SNodeReference nodePtr) {
    this.setNodePointer((nodePtr == null ? null : PersistenceFacade.getInstance().asString(nodePtr)));
  }
  protected static Logger LOG = LogManager.getLogger(NodeByConcept_Configuration.class);
  @Override
  public NodeByConcept_Configuration clone() {
    NodeByConcept_Configuration clone = null;
    try {
      clone = createCloneTemplate();
      clone.myState = (NodeByConcept_Configuration.MyState) myState.clone();
      return clone;
    } catch (CloneNotSupportedException ex) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", ex);
      }
    }
    return clone;
  }
  public class MyState {
    public String myNodePointer;
    public String myNodeText;
    public MyState() {
    }
    @Override
    public Object clone() throws CloneNotSupportedException {
      NodeByConcept_Configuration.MyState state = new NodeByConcept_Configuration.MyState();
      state.myNodePointer = myNodePointer;
      state.myNodeText = myNodeText;
      return state;
    }
  }
  public NodeByConcept_Configuration(SAbstractConcept concept, _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> isValid) {
    myConcept = concept;
    myIsValid = isValid;
  }
  private final SAbstractConcept myConcept;
  private final _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> myIsValid;
  public NodeByConcept_Configuration createCloneTemplate() {
    return new NodeByConcept_Configuration(myConcept, myIsValid);
  }
  public NodeByConcept_Configuration_Editor getEditor() {
    return new NodeByConcept_Configuration_Editor(myConcept, myIsValid);
  }
  private static SNode check_h3hwcn_a0a0(SNodeReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(MPSModuleRepository.getInstance());
    }
    return null;
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
