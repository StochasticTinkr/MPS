package jetbrains.mps.execution.lib;

/*Generated by MPS */

import jetbrains.mps.execution.api.settings.IPersistentConfiguration;
import jetbrains.mps.execution.api.settings.ITemplatePersistentConfiguration;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;
import org.jetbrains.mps.openapi.model.SNode;
import com.intellij.execution.configurations.RuntimeConfigurationError;
import org.jdom.Element;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.util.xmlb.XmlSerializer;
import com.intellij.openapi.util.InvalidDataException;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.MPSModuleRepository;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.apache.log4j.Level;
import java.util.List;
import jetbrains.mps.execution.api.settings.SettingsEditorEx;

public class NodeBySeveralConcepts_Configuration implements IPersistentConfiguration, ITemplatePersistentConfiguration {
  @NotNull
  private NodeBySeveralConcepts_Configuration.MyState myState = new NodeBySeveralConcepts_Configuration.MyState();
  public void checkConfiguration() throws RuntimeConfigurationException {
    {
      final Wrappers._T<String> errorText = new Wrappers._T<String>(null);
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          SNode node = getNode();
          if (node == null) {
            errorText.value = "Node is not specified.";
          } else if (!(isValid(node))) {
            errorText.value = "Node is not valid.";
          }
        }
      });
      if (isNotEmptyString(errorText.value)) {
        throw new RuntimeConfigurationError(errorText.value);
      }
    }
  }
  @Override
  public void writeExternal(Element element) throws WriteExternalException {
    element.addContent(XmlSerializer.serialize(myState));
  }
  @Override
  public void readExternal(Element element) throws InvalidDataException {
    if (element == null) {
      throw new InvalidDataException("Cant read " + this + ": element is null.");
    }
    XmlSerializer.deserializeInto(myState, (Element) element.getChildren().get(0));
  }
  public String getNodeId() {
    return myState.myNodeId;
  }
  public String getModelId() {
    return myState.myModelId;
  }
  public void setNodeId(String value) {
    myState.myNodeId = value;
  }
  public void setModelId(String value) {
    myState.myModelId = value;
  }
  @Nullable
  public SNode getNode() {
    SNodeReference reference = getNodePointer();
    if (reference == null) {
      return null;
    }
    return reference.resolve(MPSModuleRepository.getInstance());
  }
  @Nullable
  public SNodePointer getNodePointer() {
    if (this.getModelId() == null || this.getNodeId() == null) {
      return null;
    }
    return new SNodePointer(this.getModelId(), this.getNodeId());
  }
  public void setNode(@Nullable SNode node) {
    if (node == null) {
      this.setModelId(null);
      this.setNodeId(null);
    } else {
      this.setModelId(node.getModel().getReference().toString());
      this.setNodeId(node.getNodeId().toString());
    }
  }
  private boolean isValid(final SNode node) {
    return ListSequence.fromList(myTargets).findFirst(new IWhereFilter<NodesDescriptor>() {
      public boolean accept(NodesDescriptor it) {
        SAbstractConcept concept = it.concept();
        _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> function = it.filter();
        if (SNodeOperations.isInstanceOf(node, SNodeOperations.asSConcept(concept))) {
          if (function != null) {
            return function.invoke(node);
          } else {
            return true;
          }
        }
        return false;
      }
    }) != null;
  }
  protected static Logger LOG = LogManager.getLogger(NodeBySeveralConcepts_Configuration.class);
  @Override
  public NodeBySeveralConcepts_Configuration clone() {
    NodeBySeveralConcepts_Configuration clone = null;
    try {
      clone = createCloneTemplate();
      clone.myState = (NodeBySeveralConcepts_Configuration.MyState) myState.clone();
      return clone;
    } catch (CloneNotSupportedException ex) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", ex);
      }
    }
    return clone;
  }
  public class MyState {
    public String myNodeId;
    public String myModelId;
    public MyState() {
    }
    @Override
    public Object clone() throws CloneNotSupportedException {
      NodeBySeveralConcepts_Configuration.MyState state = new NodeBySeveralConcepts_Configuration.MyState();
      state.myNodeId = myNodeId;
      state.myModelId = myModelId;
      return state;
    }
  }
  public NodeBySeveralConcepts_Configuration(List<NodesDescriptor> targets) {
    myTargets = targets;
  }
  private final List<NodesDescriptor> myTargets;
  private SettingsEditorEx<NodeBySeveralConcepts_Configuration> myEditorEx;
  public NodeBySeveralConcepts_Configuration createCloneTemplate() {
    return new NodeBySeveralConcepts_Configuration(myTargets);
  }
  public NodeBySeveralConcepts_Configuration_Editor getEditor() {
    return new NodeBySeveralConcepts_Configuration_Editor(myTargets);
  }
  public SettingsEditorEx<NodeBySeveralConcepts_Configuration> getEditorEx() {
    if (myEditorEx == null) {
      myEditorEx = getEditor();
    }
    return myEditorEx;
  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
