package jetbrains.mps.execution.lib.ui;

/*Generated by MPS */

import jetbrains.mps.project.FilteredScope;
import java.util.Set;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.SModelStereotype;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.extapi.module.TransientSModule;
import jetbrains.mps.smodel.Generator;
import org.jetbrains.mps.openapi.language.SLanguage;

/**
 * The scope which accepts module iff it uses one of 'required' langs
 */
public class ModulesWithLanguagesScope extends FilteredScope {
  private final Set<Language> myRequiredLanguages;

  public ModulesWithLanguagesScope(SearchScope innerScope, Iterable<Language> requiredLanguages) {
    super(innerScope);
    myRequiredLanguages = SetSequence.fromSetWithValues(new HashSet<Language>(), requiredLanguages);
  }

  @Override
  protected boolean acceptModel(SModel model) {
    if (SModelStereotype.isStubModelStereotype(SModelStereotype.getStereotype(model))) {
      return false;
    }
    return acceptModule(model.getModule());
  }

  @Override
  protected boolean acceptModule(SModule module) {
    if (module instanceof TransientSModule || module instanceof Generator) {
      return false;
    }
    final Set<SLanguage> usedLanguages = module.getUsedLanguages();
    for (Language requiredLanguage : SetSequence.fromSet(myRequiredLanguages)) {
      for (SLanguage usedLanguage : SetSequence.fromSet(usedLanguages)) {
        if (requiredLanguage.equals(usedLanguage.getSourceModule())) {
          return true;
        }
      }
    }
    return false;
  }
}
