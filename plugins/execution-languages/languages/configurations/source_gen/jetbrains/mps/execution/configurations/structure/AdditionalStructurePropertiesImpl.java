package jetbrains.mps.execution.configurations.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_AbstractRunConfigurationExecutor = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BeforeTask = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BeforeTaskCall = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BeforeTaskParameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BeforeTaskParameterReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConfigurationFromExecutorReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConsoleCreator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConsoleType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ContextExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Create_ConceptFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DebuggerSettings_Parameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EnvironmentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExecuteBeforeTask_ConceptFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExecuteConfiguration_Function = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Executor_Parameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_GetProjectOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ModelSource = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_ModuleSource = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_NodeListSource = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeSource = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ProjectSource = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Project_Parameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RunConfiguration = new ConceptPropsBuilder().icon("runConfigurationDeclaration.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_RunConfigurationCreator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RunConfigurationExecutor = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RunConfigurationKind = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RunConfigurationProducer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RunConfigurationProducerPart = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RunConfigurationSource = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SModelSource = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SModuleSource = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Source_ConceptFunctionParameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StartProcessHandlerStatement = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0ib.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractRunConfigurationExecutor;
          }
          break;
        case 1:
          if (true) {
            return props_BeforeTask;
          }
          break;
        case 2:
          if (true) {
            return props_BeforeTaskCall;
          }
          break;
        case 3:
          if (true) {
            return props_BeforeTaskParameter;
          }
          break;
        case 4:
          if (true) {
            return props_BeforeTaskParameterReference;
          }
          break;
        case 5:
          if (true) {
            return props_ConfigurationFromExecutorReference;
          }
          break;
        case 6:
          if (true) {
            return props_ConsoleCreator;
          }
          break;
        case 7:
          if (true) {
            return props_ConsoleType;
          }
          break;
        case 8:
          if (true) {
            return props_ContextExpression;
          }
          break;
        case 9:
          if (true) {
            return props_Create_ConceptFunction;
          }
          break;
        case 10:
          if (true) {
            return props_DebuggerSettings_Parameter;
          }
          break;
        case 11:
          if (true) {
            return props_EnvironmentExpression;
          }
          break;
        case 12:
          if (true) {
            return props_ExecuteBeforeTask_ConceptFunction;
          }
          break;
        case 13:
          if (true) {
            return props_ExecuteConfiguration_Function;
          }
          break;
        case 14:
          if (true) {
            return props_Executor_Parameter;
          }
          break;
        case 15:
          if (true) {
            return props_GetProjectOperation;
          }
          break;
        case 16:
          if (true) {
            return props_ModelSource;
          }
          break;
        case 17:
          if (true) {
            return props_ModuleSource;
          }
          break;
        case 18:
          if (true) {
            return props_NodeListSource;
          }
          break;
        case 19:
          if (true) {
            return props_NodeSource;
          }
          break;
        case 20:
          if (true) {
            return props_ProjectSource;
          }
          break;
        case 21:
          if (true) {
            return props_Project_Parameter;
          }
          break;
        case 22:
          if (true) {
            return props_RunConfiguration;
          }
          break;
        case 23:
          if (true) {
            return props_RunConfigurationCreator;
          }
          break;
        case 24:
          if (true) {
            return props_RunConfigurationExecutor;
          }
          break;
        case 25:
          if (true) {
            return props_RunConfigurationKind;
          }
          break;
        case 26:
          if (true) {
            return props_RunConfigurationProducer;
          }
          break;
        case 27:
          if (true) {
            return props_RunConfigurationProducerPart;
          }
          break;
        case 28:
          if (true) {
            return props_RunConfigurationSource;
          }
          break;
        case 29:
          if (true) {
            return props_SModelSource;
          }
          break;
        case 30:
          if (true) {
            return props_SModuleSource;
          }
          break;
        case 31:
          if (true) {
            return props_Source_ConceptFunctionParameter;
          }
          break;
        case 32:
          if (true) {
            return props_StartProcessHandlerStatement;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0ib = buildConceptIndices(MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x2153d8f1c1f52479L, "AbstractRunConfigurationExecutor"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x61a8be33d403b7bfL, "BeforeTask"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x5ae6ebde781f1fd8L, "BeforeTaskCall"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x5ae6ebde781f8014L, "BeforeTaskParameter"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x5ae6ebde781fd3c0L, "BeforeTaskParameterReference"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6c55c13f5bcac62fL, "ConfigurationFromExecutorReference"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x161fc6929dd24a8aL, "ConsoleCreator"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x161fc6929dd1ac93L, "ConsoleType"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6a69999da766290fL, "ContextExpression"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84cdc3L, "Create_ConceptFunction"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x42d74d4aa8cbc400L, "DebuggerSettings_Parameter"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x7664b739387f64L, "EnvironmentExpression"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x220f4a2c4aff4248L, "ExecuteBeforeTask_ConceptFunction"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x5532ce3cbd91002cL, "ExecuteConfiguration_Function"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x28470a6f6e7e49eL, "Executor_Parameter"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x4bafca3d818c1d2aL, "GetProjectOperation"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6552f0adf299246dL, "ModelSource"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6552f0adf2992470L, "ModuleSource"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6552f0adf299246fL, "NodeListSource"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6552f0adf2992471L, "NodeSource"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6552f0adf299246eL, "ProjectSource"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6aa58a34eb0efa2dL, "Project_Parameter"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x2153d8f1c1f46e49L, "RunConfiguration"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x328e81d9f20cd1deL, "RunConfigurationCreator"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6c55c13f5bc8e1ecL, "RunConfigurationExecutor"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x2153d8f1c1f46e4aL, "RunConfigurationKind"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c842305L, "RunConfigurationProducer"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84cda6L, "RunConfigurationProducerPart"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84af96L, "RunConfigurationSource"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3e34888186184223L, "SModelSource"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3e34888186187479L, "SModuleSource"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x328e81d9f2097e87L, "Source_ConceptFunctionParameter"), MetaAdapterFactory.getConcept(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0xd244b712f9d44d1L, "StartProcessHandlerStatement"));
}
