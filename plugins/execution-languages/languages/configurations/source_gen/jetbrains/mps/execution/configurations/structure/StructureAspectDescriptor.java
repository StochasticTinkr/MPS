package jetbrains.mps.execution.configurations.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(33);
  /*package*/ final ConceptDescriptor myConceptAbstractRunConfigurationExecutor = createDescriptorForAbstractRunConfigurationExecutor();
  /*package*/ final ConceptDescriptor myConceptBeforeTask = createDescriptorForBeforeTask();
  /*package*/ final ConceptDescriptor myConceptBeforeTaskCall = createDescriptorForBeforeTaskCall();
  /*package*/ final ConceptDescriptor myConceptBeforeTaskParameter = createDescriptorForBeforeTaskParameter();
  /*package*/ final ConceptDescriptor myConceptBeforeTaskParameterReference = createDescriptorForBeforeTaskParameterReference();
  /*package*/ final ConceptDescriptor myConceptConfigurationFromExecutorReference = createDescriptorForConfigurationFromExecutorReference();
  /*package*/ final ConceptDescriptor myConceptConsoleCreator = createDescriptorForConsoleCreator();
  /*package*/ final ConceptDescriptor myConceptConsoleType = createDescriptorForConsoleType();
  /*package*/ final ConceptDescriptor myConceptContextExpression = createDescriptorForContextExpression();
  /*package*/ final ConceptDescriptor myConceptCreate_ConceptFunction = createDescriptorForCreate_ConceptFunction();
  /*package*/ final ConceptDescriptor myConceptDebuggerSettings_Parameter = createDescriptorForDebuggerSettings_Parameter();
  /*package*/ final ConceptDescriptor myConceptEnvironmentExpression = createDescriptorForEnvironmentExpression();
  /*package*/ final ConceptDescriptor myConceptExecuteBeforeTask_ConceptFunction = createDescriptorForExecuteBeforeTask_ConceptFunction();
  /*package*/ final ConceptDescriptor myConceptExecuteConfiguration_Function = createDescriptorForExecuteConfiguration_Function();
  /*package*/ final ConceptDescriptor myConceptExecutor_Parameter = createDescriptorForExecutor_Parameter();
  /*package*/ final ConceptDescriptor myConceptGetProjectOperation = createDescriptorForGetProjectOperation();
  /*package*/ final ConceptDescriptor myConceptModelSource = createDescriptorForModelSource();
  /*package*/ final ConceptDescriptor myConceptModuleSource = createDescriptorForModuleSource();
  /*package*/ final ConceptDescriptor myConceptNodeListSource = createDescriptorForNodeListSource();
  /*package*/ final ConceptDescriptor myConceptNodeSource = createDescriptorForNodeSource();
  /*package*/ final ConceptDescriptor myConceptProjectSource = createDescriptorForProjectSource();
  /*package*/ final ConceptDescriptor myConceptProject_Parameter = createDescriptorForProject_Parameter();
  /*package*/ final ConceptDescriptor myConceptRunConfiguration = createDescriptorForRunConfiguration();
  /*package*/ final ConceptDescriptor myConceptRunConfigurationCreator = createDescriptorForRunConfigurationCreator();
  /*package*/ final ConceptDescriptor myConceptRunConfigurationExecutor = createDescriptorForRunConfigurationExecutor();
  /*package*/ final ConceptDescriptor myConceptRunConfigurationKind = createDescriptorForRunConfigurationKind();
  /*package*/ final ConceptDescriptor myConceptRunConfigurationProducer = createDescriptorForRunConfigurationProducer();
  /*package*/ final ConceptDescriptor myConceptRunConfigurationProducerPart = createDescriptorForRunConfigurationProducerPart();
  /*package*/ final ConceptDescriptor myConceptRunConfigurationSource = createDescriptorForRunConfigurationSource();
  /*package*/ final ConceptDescriptor myConceptSModelSource = createDescriptorForSModelSource();
  /*package*/ final ConceptDescriptor myConceptSModuleSource = createDescriptorForSModuleSource();
  /*package*/ final ConceptDescriptor myConceptSource_ConceptFunctionParameter = createDescriptorForSource_ConceptFunctionParameter();
  /*package*/ final ConceptDescriptor myConceptStartProcessHandlerStatement = createDescriptorForStartProcessHandlerStatement();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptAbstractRunConfigurationExecutor.getId(), 0);
    myIndexMap.put(myConceptBeforeTask.getId(), 1);
    myIndexMap.put(myConceptBeforeTaskCall.getId(), 2);
    myIndexMap.put(myConceptBeforeTaskParameter.getId(), 3);
    myIndexMap.put(myConceptBeforeTaskParameterReference.getId(), 4);
    myIndexMap.put(myConceptConfigurationFromExecutorReference.getId(), 5);
    myIndexMap.put(myConceptConsoleCreator.getId(), 6);
    myIndexMap.put(myConceptConsoleType.getId(), 7);
    myIndexMap.put(myConceptContextExpression.getId(), 8);
    myIndexMap.put(myConceptCreate_ConceptFunction.getId(), 9);
    myIndexMap.put(myConceptDebuggerSettings_Parameter.getId(), 10);
    myIndexMap.put(myConceptEnvironmentExpression.getId(), 11);
    myIndexMap.put(myConceptExecuteBeforeTask_ConceptFunction.getId(), 12);
    myIndexMap.put(myConceptExecuteConfiguration_Function.getId(), 13);
    myIndexMap.put(myConceptExecutor_Parameter.getId(), 14);
    myIndexMap.put(myConceptGetProjectOperation.getId(), 15);
    myIndexMap.put(myConceptModelSource.getId(), 16);
    myIndexMap.put(myConceptModuleSource.getId(), 17);
    myIndexMap.put(myConceptNodeListSource.getId(), 18);
    myIndexMap.put(myConceptNodeSource.getId(), 19);
    myIndexMap.put(myConceptProjectSource.getId(), 20);
    myIndexMap.put(myConceptProject_Parameter.getId(), 21);
    myIndexMap.put(myConceptRunConfiguration.getId(), 22);
    myIndexMap.put(myConceptRunConfigurationCreator.getId(), 23);
    myIndexMap.put(myConceptRunConfigurationExecutor.getId(), 24);
    myIndexMap.put(myConceptRunConfigurationKind.getId(), 25);
    myIndexMap.put(myConceptRunConfigurationProducer.getId(), 26);
    myIndexMap.put(myConceptRunConfigurationProducerPart.getId(), 27);
    myIndexMap.put(myConceptRunConfigurationSource.getId(), 28);
    myIndexMap.put(myConceptSModelSource.getId(), 29);
    myIndexMap.put(myConceptSModuleSource.getId(), 30);
    myIndexMap.put(myConceptSource_ConceptFunctionParameter.getId(), 31);
    myIndexMap.put(myConceptStartProcessHandlerStatement.getId(), 32);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractRunConfigurationExecutor, myConceptBeforeTask, myConceptBeforeTaskCall, myConceptBeforeTaskParameter, myConceptBeforeTaskParameterReference, myConceptConfigurationFromExecutorReference, myConceptConsoleCreator, myConceptConsoleType, myConceptContextExpression, myConceptCreate_ConceptFunction, myConceptDebuggerSettings_Parameter, myConceptEnvironmentExpression, myConceptExecuteBeforeTask_ConceptFunction, myConceptExecuteConfiguration_Function, myConceptExecutor_Parameter, myConceptGetProjectOperation, myConceptModelSource, myConceptModuleSource, myConceptNodeListSource, myConceptNodeSource, myConceptProjectSource, myConceptProject_Parameter, myConceptRunConfiguration, myConceptRunConfigurationCreator, myConceptRunConfigurationExecutor, myConceptRunConfigurationKind, myConceptRunConfigurationProducer, myConceptRunConfigurationProducerPart, myConceptRunConfigurationSource, myConceptSModelSource, myConceptSModuleSource, myConceptSource_ConceptFunctionParameter, myConceptStartProcessHandlerStatement);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptAbstractRunConfigurationExecutor;
      case 1:
        return myConceptBeforeTask;
      case 2:
        return myConceptBeforeTaskCall;
      case 3:
        return myConceptBeforeTaskParameter;
      case 4:
        return myConceptBeforeTaskParameterReference;
      case 5:
        return myConceptConfigurationFromExecutorReference;
      case 6:
        return myConceptConsoleCreator;
      case 7:
        return myConceptConsoleType;
      case 8:
        return myConceptContextExpression;
      case 9:
        return myConceptCreate_ConceptFunction;
      case 10:
        return myConceptDebuggerSettings_Parameter;
      case 11:
        return myConceptEnvironmentExpression;
      case 12:
        return myConceptExecuteBeforeTask_ConceptFunction;
      case 13:
        return myConceptExecuteConfiguration_Function;
      case 14:
        return myConceptExecutor_Parameter;
      case 15:
        return myConceptGetProjectOperation;
      case 16:
        return myConceptModelSource;
      case 17:
        return myConceptModuleSource;
      case 18:
        return myConceptNodeListSource;
      case 19:
        return myConceptNodeSource;
      case 20:
        return myConceptProjectSource;
      case 21:
        return myConceptProject_Parameter;
      case 22:
        return myConceptRunConfiguration;
      case 23:
        return myConceptRunConfigurationCreator;
      case 24:
        return myConceptRunConfigurationExecutor;
      case 25:
        return myConceptRunConfigurationKind;
      case 26:
        return myConceptRunConfigurationProducer;
      case 27:
        return myConceptRunConfigurationProducerPart;
      case 28:
        return myConceptRunConfigurationSource;
      case 29:
        return myConceptSModelSource;
      case 30:
        return myConceptSModuleSource;
      case 31:
        return myConceptSource_ConceptFunctionParameter;
      case 32:
        return myConceptStartProcessHandlerStatement;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForAbstractRunConfigurationExecutor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "AbstractRunConfigurationExecutor", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x2153d8f1c1f52479L);
    b.class_(false, true, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x73c1a49099fa4d0dL, 0x8292b8985697c74bL, 0xd244b712f9dcdabL);
    b.parent(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f9dce91L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/2401501559171392633");
    b.prop("configurationName", 0x1acdeec3ca0ad49cL, "1931462339887551644");
    b.prop("canRun", 0x523a1a6c9706408bL, "5925077313451868299");
    b.aggregate("execute", 0x6e425276ab38aea1L).target(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x5532ce3cbd91002cL).optional(false).ordered(true).multiple(false).origin("7945003362267213473").done();
    b.aggregate("beforeTask", 0x5ae6ebde781f1fe7L).target(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x5ae6ebde781f1fd8L).optional(true).ordered(true).multiple(true).origin("6550182048787537895").done();
    b.alias("abstract executor");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBeforeTask() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "BeforeTask", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x61a8be33d403b7bfL);
    b.class_(false, false, true);
    b.parent(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x11d2ea63881L);
    b.parent(0x73c1a49099fa4d0dL, 0x8292b8985697c74bL, 0xd244b712f9dcdabL);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/7037083547576022975");
    b.aggregate("execute", 0x220f4a2c4b02cb91L).target(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x220f4a2c4aff4248L).optional(false).ordered(true).multiple(false).origin("2454261876037700497").done();
    b.aggregate("parameter", 0x5ae6ebde781f96aaL).target(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x5ae6ebde781f8014L).optional(true).ordered(true).multiple(true).origin("6550182048787568298").done();
    b.alias("before task");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBeforeTaskCall() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "BeforeTaskCall", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x5ae6ebde781f1fd8L);
    b.class_(false, false, false);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/6550182048787537880");
    b.associate("beforeTask", 0x5ae6ebde781f1fd9L).target(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x61a8be33d403b7bfL).optional(false).origin("6550182048787537881").done();
    b.aggregate("parameter", 0x4bfe4368347f5400L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(true).ordered(true).multiple(true).origin("5475888311765521408").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBeforeTaskParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "BeforeTaskParameter", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x5ae6ebde781f8014L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/6550182048787562516");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBeforeTaskParameterReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "BeforeTaskParameterReference", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x5ae6ebde781fd3c0L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.VariableReference", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/6550182048787583936");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConfigurationFromExecutorReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "ConfigurationFromExecutorReference", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6c55c13f5bcac62fL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/7806358006983738927");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConsoleCreator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "ConsoleCreator", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x161fc6929dd24a8aL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.AbstractCreator", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ab844af9bL);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/1594211126127774346");
    b.aggregate("project", 0x161fc6929dd24ccdL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("1594211126127774925").done();
    b.aggregate("viewer", 0x161fc6929dd24cceL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("1594211126127774926").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("console");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConsoleType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "ConsoleType", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x161fc6929dd1ac93L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Type", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/1594211126127733907");
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    b.alias("console");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForContextExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "ContextExpression", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6a69999da766290fL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/7667828742972385551");
    b.alias("context");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCreate_ConceptFunction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "Create_ConceptFunction", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84cdc3L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunction", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/4366236229294149059");
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    b.alias("create");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDebuggerSettings_Parameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "DebuggerSettings_Parameter", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x42d74d4aa8cbc400L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/4816403309550879744");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("debuggerSettings");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEnvironmentExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "EnvironmentExpression", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x7664b739387f64L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/33324785353654116");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("environment");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExecuteBeforeTask_ConceptFunction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "ExecuteBeforeTask_ConceptFunction", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x220f4a2c4aff4248L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunction", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/2454261876037468744");
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    b.alias("execute");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExecuteConfiguration_Function() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "ExecuteConfiguration_Function", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x5532ce3cbd91002cL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunction", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1206e9046e6L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/6139196002333163564");
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    b.alias("execute");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExecutor_Parameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "Executor_Parameter", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x28470a6f6e7e49eL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/181393747410936990");
    b.alias("executor");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGetProjectOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "GetProjectOperation", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x4bafca3d818c1d2aL);
    b.class_(false, false, false);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/5453800039284219178");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("project");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForModelSource() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "ModelSource", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6552f0adf299246dL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.execution.configurations.structure.RunConfigurationSource", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84af96L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/7301162575811126381");
    b.alias("model (deprecated)");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForModuleSource() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "ModuleSource", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6552f0adf2992470L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.execution.configurations.structure.RunConfigurationSource", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84af96L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/7301162575811126384");
    b.alias("module (deprecated)");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNodeListSource() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "NodeListSource", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6552f0adf299246fL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.execution.configurations.structure.RunConfigurationSource", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84af96L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/7301162575811126383");
    b.associate("concept", 0x6552f0adf2992692L).target(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL).optional(true).origin("7301162575811126930").done();
    b.alias("nlist");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNodeSource() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "NodeSource", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6552f0adf2992471L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.execution.configurations.structure.RunConfigurationSource", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84af96L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/7301162575811126385");
    b.associate("concept", 0x6552f0adf2992682L).target(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL).optional(true).origin("7301162575811126914").done();
    b.alias("node");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForProjectSource() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "ProjectSource", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6552f0adf299246eL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.execution.configurations.structure.RunConfigurationSource", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84af96L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/7301162575811126382");
    b.alias("project");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForProject_Parameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "Project_Parameter", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6aa58a34eb0efa2dL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/7684700299064179245");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("project");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRunConfiguration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "RunConfiguration", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x2153d8f1c1f46e49L);
    b.class_(false, false, true);
    b.super_("jetbrains.mps.execution.settings.structure.PersistentConfiguration", 0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910020L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/2401501559171345993");
    b.associate("configurationKind", 0x2153d8f1c1f48ae2L).target(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x2153d8f1c1f46e4aL).optional(false).origin("2401501559171353314").done();
    b.aggregate("icon", 0x421a8d20ae9f689eL).target(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6bbL).optional(false).ordered(true).multiple(false).origin("4763274727405873310").done();
    b.alias("run configuration");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRunConfigurationCreator() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "RunConfigurationCreator", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x328e81d9f20cd1deL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.AbstractCreator", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ab844af9bL);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/3642991921658122718");
    b.associate("configuration", 0x328e81d9f20cd1dfL).target(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x2153d8f1c1f46e49L).optional(false).origin("3642991921658122719").done();
    b.aggregate("configurationName", 0x758d43e19b4fdb6L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("529406319400385974").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRunConfigurationExecutor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "RunConfigurationExecutor", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x6c55c13f5bc8e1ecL);
    b.class_(false, false, true);
    b.super_("jetbrains.mps.execution.configurations.structure.AbstractRunConfigurationExecutor", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x2153d8f1c1f52479L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/7806358006983614956");
    b.prop("canDebug", 0x566a06529af9d7ddL, "6226796386650281949");
    b.aggregate("debuggerConfiguration", 0x5d457621242d8208L).target(0xfbc142795e2a4c87L, 0xa5d15f7061e6c456L, 0x5d457621242d16f5L).optional(true).ordered(true).multiple(false).origin("6720907903633293832").done();
    b.alias("executor");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRunConfigurationKind() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "RunConfigurationKind", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x2153d8f1c1f46e4aL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x73c1a49099fa4d0dL, 0x8292b8985697c74bL, 0xd244b712f9dcdabL);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/2401501559171345994");
    b.aggregate("icon", 0x6e8fcf3625c61213L).target(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6bbL).optional(false).ordered(true).multiple(false).origin("7966814097310618131").done();
    b.alias("run configuration kind");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRunConfigurationProducer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "RunConfigurationProducer", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c842305L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x73c1a49099fa4d0dL, 0x8292b8985697c74bL, 0xd244b712f9dcdabL);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/4366236229294105349");
    b.aggregate("configuration", 0x3c97fcb79c84a8efL).target(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91001cL).optional(false).ordered(true).multiple(false).origin("4366236229294139631").done();
    b.aggregate("produce", 0x3c97fcb79c84cdacL).target(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84cda6L).optional(true).ordered(true).multiple(true).origin("4366236229294149036").done();
    b.alias("producer");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRunConfigurationProducerPart() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "RunConfigurationProducerPart", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84cda6L);
    b.class_(false, false, false);
    b.parent(0x73c1a49099fa4d0dL, 0x8292b8985697c74bL, 0xd244b712f9dcdabL);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/4366236229294149030");
    b.aggregate("create", 0x328e81d9f2097e86L).target(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84cdc3L).optional(false).ordered(true).multiple(false).origin("3642991921657904774").done();
    b.aggregate("source", 0x6552f0adf298f24fL).target(0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84af96L).optional(false).ordered(true).multiple(false).origin("7301162575811113551").done();
    b.alias("produce");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRunConfigurationSource() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "RunConfigurationSource", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84af96L);
    b.class_(false, true, false);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/4366236229294141334");
    b.alias("source");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSModelSource() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "SModelSource", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3e34888186184223L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.execution.configurations.structure.RunConfigurationSource", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84af96L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/4482357619022381603");
    b.alias("model");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSModuleSource() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "SModuleSource", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3e34888186187479L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.execution.configurations.structure.RunConfigurationSource", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x3c97fcb79c84af96L);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/4482357619022394489");
    b.alias("module");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSource_ConceptFunctionParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "Source_ConceptFunctionParameter", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0x328e81d9f2097e87L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/3642991921657904775");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("source");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStartProcessHandlerStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.execution.configurations", "StartProcessHandlerStatement", 0x22e72e4c0f6946ceL, 0x84036750153aa615L, 0xd244b712f9d44d1L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ReturnStatement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7feL);
    b.origin("r:f3383ae6-205a-4e7c-8dd9-c29966e29e49(jetbrains.mps.execution.configurations.structure)/946964771156870353");
    b.aggregate("tool", 0x161fc6929dcff3a0L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(true).ordered(true).multiple(false).origin("1594211126127621024").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("start process handler");
    return b.create();
  }
}
