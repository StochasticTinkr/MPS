package jetbrains.mps.execution.configurations.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractRunConfigurationExecutor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BeforeTask = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BeforeTaskCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BeforeTaskParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BeforeTaskParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConfigurationFromExecutorReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Configuration_Parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConsoleCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConsoleType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextConfiguration_Parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Create_ConceptFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DebuggerSettings_Parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnvironmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteBeforeTask_ConceptFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteConfiguration_Function = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Executor_Parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetProjectOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsConfigurationFromContext_ConceptFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelSource = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ModuleSource = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_NodeListSource = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeSource = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProjectSource = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Project_Parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RunConfiguration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0z).create();
  private final ConceptPresentation props_RunConfigurationCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RunConfigurationExecutor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RunConfigurationKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RunConfigurationProducer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RunConfigurationProducerPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RunConfigurationSource = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SModelSource = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SModuleSource = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Source_ConceptFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StartProcessHandlerStatement = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractRunConfigurationExecutor:
        return props_AbstractRunConfigurationExecutor;
      case LanguageConceptSwitch.BeforeTask:
        return props_BeforeTask;
      case LanguageConceptSwitch.BeforeTaskCall:
        return props_BeforeTaskCall;
      case LanguageConceptSwitch.BeforeTaskParameter:
        return props_BeforeTaskParameter;
      case LanguageConceptSwitch.BeforeTaskParameterReference:
        return props_BeforeTaskParameterReference;
      case LanguageConceptSwitch.ConfigurationFromExecutorReference:
        return props_ConfigurationFromExecutorReference;
      case LanguageConceptSwitch.Configuration_Parameter:
        return props_Configuration_Parameter;
      case LanguageConceptSwitch.ConsoleCreator:
        return props_ConsoleCreator;
      case LanguageConceptSwitch.ConsoleType:
        return props_ConsoleType;
      case LanguageConceptSwitch.ContextConfiguration_Parameter:
        return props_ContextConfiguration_Parameter;
      case LanguageConceptSwitch.ContextExpression:
        return props_ContextExpression;
      case LanguageConceptSwitch.Create_ConceptFunction:
        return props_Create_ConceptFunction;
      case LanguageConceptSwitch.DebuggerSettings_Parameter:
        return props_DebuggerSettings_Parameter;
      case LanguageConceptSwitch.EnvironmentExpression:
        return props_EnvironmentExpression;
      case LanguageConceptSwitch.ExecuteBeforeTask_ConceptFunction:
        return props_ExecuteBeforeTask_ConceptFunction;
      case LanguageConceptSwitch.ExecuteConfiguration_Function:
        return props_ExecuteConfiguration_Function;
      case LanguageConceptSwitch.Executor_Parameter:
        return props_Executor_Parameter;
      case LanguageConceptSwitch.GetProjectOperation:
        return props_GetProjectOperation;
      case LanguageConceptSwitch.IsConfigurationFromContext_ConceptFunction:
        return props_IsConfigurationFromContext_ConceptFunction;
      case LanguageConceptSwitch.ModelSource:
        return props_ModelSource;
      case LanguageConceptSwitch.ModuleSource:
        return props_ModuleSource;
      case LanguageConceptSwitch.NodeListSource:
        return props_NodeListSource;
      case LanguageConceptSwitch.NodeSource:
        return props_NodeSource;
      case LanguageConceptSwitch.ProjectSource:
        return props_ProjectSource;
      case LanguageConceptSwitch.Project_Parameter:
        return props_Project_Parameter;
      case LanguageConceptSwitch.RunConfiguration:
        return props_RunConfiguration;
      case LanguageConceptSwitch.RunConfigurationCreator:
        return props_RunConfigurationCreator;
      case LanguageConceptSwitch.RunConfigurationExecutor:
        return props_RunConfigurationExecutor;
      case LanguageConceptSwitch.RunConfigurationKind:
        return props_RunConfigurationKind;
      case LanguageConceptSwitch.RunConfigurationProducer:
        return props_RunConfigurationProducer;
      case LanguageConceptSwitch.RunConfigurationProducerPart:
        return props_RunConfigurationProducerPart;
      case LanguageConceptSwitch.RunConfigurationSource:
        return props_RunConfigurationSource;
      case LanguageConceptSwitch.SModelSource:
        return props_SModelSource;
      case LanguageConceptSwitch.SModuleSource:
        return props_SModuleSource;
      case LanguageConceptSwitch.Source_ConceptFunctionParameter:
        return props_Source_ConceptFunctionParameter;
      case LanguageConceptSwitch.StartProcessHandlerStatement:
        return props_StartProcessHandlerStatement;
    }
    return null;
  }
}
