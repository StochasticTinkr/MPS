package jetbrains.mps.execution.configurations.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractRunConfigurationExecutor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BeforeTask = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BeforeTaskCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BeforeTaskParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BeforeTaskParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConfigurationFromExecutorReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConsoleCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConsoleType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Create_ConceptFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DebuggerSettings_Parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnvironmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteBeforeTask_ConceptFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteConfiguration_Function = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Executor_Parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetProjectOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelSource = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ModuleSource = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_NodeListSource = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeSource = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProjectSource = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Project_Parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RunConfiguration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0w).create();
  private final ConceptPresentation props_RunConfigurationCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RunConfigurationExecutor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RunConfigurationKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RunConfigurationProducer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RunConfigurationProducerPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RunConfigurationSource = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SModelSource = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SModuleSource = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Source_ConceptFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StartProcessHandlerStatement = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("22e72e4c-0f69-46ce-8403-6750153aa615"), "jetbrains.mps.execution.configurations")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractRunConfigurationExecutor;
      case 1:
        return props_BeforeTask;
      case 2:
        return props_BeforeTaskCall;
      case 3:
        return props_BeforeTaskParameter;
      case 4:
        return props_BeforeTaskParameterReference;
      case 5:
        return props_ConfigurationFromExecutorReference;
      case 6:
        return props_ConsoleCreator;
      case 7:
        return props_ConsoleType;
      case 8:
        return props_ContextExpression;
      case 9:
        return props_Create_ConceptFunction;
      case 10:
        return props_DebuggerSettings_Parameter;
      case 11:
        return props_EnvironmentExpression;
      case 12:
        return props_ExecuteBeforeTask_ConceptFunction;
      case 13:
        return props_ExecuteConfiguration_Function;
      case 14:
        return props_Executor_Parameter;
      case 15:
        return props_GetProjectOperation;
      case 16:
        return props_ModelSource;
      case 17:
        return props_ModuleSource;
      case 18:
        return props_NodeListSource;
      case 19:
        return props_NodeSource;
      case 20:
        return props_ProjectSource;
      case 21:
        return props_Project_Parameter;
      case 22:
        return props_RunConfiguration;
      case 23:
        return props_RunConfigurationCreator;
      case 24:
        return props_RunConfigurationExecutor;
      case 25:
        return props_RunConfigurationKind;
      case 26:
        return props_RunConfigurationProducer;
      case 27:
        return props_RunConfigurationProducerPart;
      case 28:
        return props_RunConfigurationSource;
      case 29:
        return props_SModelSource;
      case 30:
        return props_SModuleSource;
      case 31:
        return props_Source_ConceptFunctionParameter;
      case 32:
        return props_StartProcessHandlerStatement;
    }
    throw new IllegalStateException();
  }
}
