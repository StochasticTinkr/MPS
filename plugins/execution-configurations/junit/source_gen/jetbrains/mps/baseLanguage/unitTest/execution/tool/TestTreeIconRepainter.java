package jetbrains.mps.baseLanguage.unitTest.execution.tool;

/*Generated by MPS */

import com.intellij.openapi.Disposable;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import com.intellij.util.Alarm;
import java.util.concurrent.ConcurrentMap;
import java.util.concurrent.ConcurrentHashMap;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.util.Disposer;
import org.apache.log4j.Level;

public final class TestTreeIconRepainter implements Disposable {
  private static final Logger LOG = LogManager.getLogger(TestTreeIconRepainter.class);
  private final Alarm myAlarm = new Alarm();
  private final ConcurrentMap<TestTreeNode, TestTreeIconRepainter.RenewPresentationTask> myNode2TaskMap = new ConcurrentHashMap<TestTreeNode, TestTreeIconRepainter.RenewPresentationTask>();

  public TestTreeIconRepainter(@NotNull Disposable parent) {
    Disposer.register(parent, this);
  }

  private final class RenewPresentationTask implements Runnable {
    private volatile long myLastInvocationTime = -1;

    private final TestTreeNode myTreeNodeToUpdate;

    /*package*/ RenewPresentationTask(@NotNull TestTreeNode nodeToUpdate) {
      myTreeNodeToUpdate = nodeToUpdate;
    }

    @Override
    public void run() {
      final long time = System.currentTimeMillis();
      if (time - myLastInvocationTime >= TestState.FRAME_TIME >> 1) {
        myLastInvocationTime = time;

        TestTreeNode toUpdate = myTreeNodeToUpdate;
        updateTreeNode(toUpdate);
      }
      if (myTreeNodeToUpdate.getState().isAnimated()) {
        myAlarm.addRequest(this, TestState.FRAME_TIME);
      } else {
        myNode2TaskMap.remove(myTreeNodeToUpdate);
      }
    }

    private void updateTreeNode(@NotNull TestTreeNode node) {
      node.renewPresentation();
    }
  }

  public void scheduleRepaint(@NotNull TestTreeNode node) {
    if (myAlarm.getActiveRequestCount() > 1000) {
      if (LOG.isEnabledFor(Level.WARN)) {
        LOG.warn("Too many active requests");
      }
    }
    TestTreeIconRepainter.RenewPresentationTask newTask = new TestTreeIconRepainter.RenewPresentationTask(node);
    TestTreeIconRepainter.RenewPresentationTask oldTask = myNode2TaskMap.putIfAbsent(node, newTask);
    if (oldTask == null) {
      myAlarm.addRequest(newTask, TestState.FRAME_TIME);
    }
  }

  @Override
  public void dispose() {
    cancelAlarm();
    myAlarm.dispose();
  }


  private void cancelAlarm() {
    myAlarm.cancelAllRequests();
  }
}
