package jetbrains.mps.baseLanguage.unitTest.execution;

/*Generated by MPS */

import org.jetbrains.mps.annotations.Immutable;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import org.jetbrains.annotations.NotNull;

/**
 * messages from the process come as strings so the keys here are strings
 */
@Immutable
public final class TestMethodNodeKey implements TestNodeKey {
  private final String myTestCaseFqName;
  private final String myTestMethodName;
  private final ITestNodeWrapper myNode;

  public TestMethodNodeKey(@NotNull ITestNodeWrapper node) {
    if (node.isTestCase()) {
      throw new IllegalArgumentException("The passed node is not points to a test case rather than to a test method");
    }
    myNode = node;
    assert node.getTestCase() != null : "the contract is broken: the node is not a test case however #getTestCase returns null";
    myTestCaseFqName = node.getTestCase().getFqName();
    myTestMethodName = node.getName();
  }

  @Override
  public String getTestCaseFqName() {
    return myTestCaseFqName;
  }

  /**
   * 
   * @return honest method which returns the method _simple_ name
   */
  public String getTestMethodName() {
    return myTestMethodName;
  }

  @Override
  public String getQualifiedName() {
    return myTestCaseFqName + "." + myTestMethodName;
  }

  @NotNull
  public TestCaseNodeKey getTestCaseNodeKey() {
    return new TestCaseNodeKey(myNode.getTestCase());
  }

  @NotNull
  @Override
  public ITestNodeWrapper getNode() {
    return myNode;
  }

  @Override
  public boolean equals(Object another) {
    if (another instanceof TestMethodNodeKey) {
      return myNode.equals(((TestMethodNodeKey) another).myNode);
    }
    return false;
  }

  @Override
  public int hashCode() {
    return myNode.hashCode();
  }

  @Override
  public String toString() {
    return "TestMethodKey[" + myTestCaseFqName + "." + myTestMethodName + "]";
  }

  @NotNull
  @Override
  public TestType getType() {
    return TestType.METHOD;
  }
}
