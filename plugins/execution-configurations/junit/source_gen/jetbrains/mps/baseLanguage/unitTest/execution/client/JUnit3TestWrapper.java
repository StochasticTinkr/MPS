package jetbrains.mps.baseLanguage.unitTest.execution.client;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.lang.core.behavior.INamedConcept__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.IClassifierType__BehaviorDescriptor;
import jetbrains.mps.baseLanguage.behavior.IClassifier__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class JUnit3TestWrapper extends AbstractTestWrapper<SNode> {
  private final String myQualifiedName;
  private final String myName;
  private final List<JUnit3MethodWrapper> myMethods;

  public JUnit3TestWrapper(SNode classConcept) {
    super(classConcept, true, AbstractTestWrapper.needsMPS(classConcept));
    myQualifiedName = INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(classConcept);
    myName = SPropertyOperations.getString(classConcept, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
    myMethods = Sequence.fromIterable(SNodeOperations.ofConcept(IClassifierType__BehaviorDescriptor.getMembers_id6r77ob2V1Fr.invoke(IClassifier__BehaviorDescriptor.getThisType_id6r77ob2UWbY.invoke(classConcept)), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return JUnit3MethodWrapper.isTestMethod(it);
      }
    }).select(new ISelector<SNode, JUnit3MethodWrapper>() {
      public JUnit3MethodWrapper select(SNode it) {
        return new JUnit3MethodWrapper(JUnit3TestWrapper.this, it);
      }
    }).toListSequence();
  }

  @Override
  public boolean isTestCase() {
    return true;
  }

  @Override
  public String getName() {
    return myName;
  }

  @NonNls
  @Override
  public String getFqName() {
    return myQualifiedName;
  }

  @NotNull
  @Override
  public Iterable<ITestNodeWrapper> getTestMethods() {
    return ListSequence.fromList(myMethods).select(new ISelector<JUnit3MethodWrapper, ITestNodeWrapper>() {
      public ITestNodeWrapper select(JUnit3MethodWrapper it) {
        return (ITestNodeWrapper) it;
      }
    });
  }
}
