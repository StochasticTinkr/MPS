package jetbrains.mps.baseLanguage.unitTest.execution.client;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.annotations.Nullable;
import java.util.function.Function;
import jetbrains.mps.smodel.ModelAccessHelper;
import jetbrains.mps.util.Computable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public abstract class AbstractTestWrapper<N extends SNode> implements ITestNodeWrapper<N> {
  @NotNull
  protected final SNodeReference myNodePointer;
  private final SRepository myRepo;
  private final boolean myRunsInProcess;

  public AbstractTestWrapper(@NotNull N node) {
    this(node, false);
  }

  public AbstractTestWrapper(@NotNull N node, boolean runsInProcess) {
    myNodePointer = new SNodePointer(node);
    myRepo = SNodeOperations.getModel(node).getRepository();
    myRunsInProcess = runsInProcess;
  }

  /*package*/ SRepository getRepo() {
    return myRepo;
  }

  /**
   * 
   * @deprecated dangerous to use. Are you going to grab model access to deal with the node?
   */
  @Nullable
  @Override
  @Deprecated
  public N getNode() {
    return withNode(Function.<N>identity());
  }

  protected final <T> T withNode(final Function<N, T> fun) {
    return new ModelAccessHelper(myRepo).runReadAction(new Computable<T>() {
      public T compute() {
        N resolved = (N) myNodePointer.resolve(myRepo);
        return fun.apply(resolved);
      }
    });
  }

  @NotNull
  @Override
  public SNodeReference getNodePointer() {
    return myNodePointer;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || this.getClass() != o.getClass()) {
      return false;
    }

    AbstractTestWrapper that = (AbstractTestWrapper) o;
    return myNodePointer.equals(that.myNodePointer);
  }

  @Override
  public int hashCode() {
    int result = 0;
    result = 31 * result + ((this.myNodePointer != null ? this.myNodePointer.hashCode() : 0));
    return result;
  }

  @Nullable
  @Override
  public ITestNodeWrapper getTestCase() {
    return null;
  }

  @NotNull
  @Override
  public Iterable<ITestNodeWrapper> getTestMethods() {
    return ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
  }

  @NotNull
  @Override
  public TestParameters getTestRunParameters() {
    return TestParameters.calcDefault(myRepo);
  }

  @Override
  public String getName() {
    return withNode(new Function<N, String>() {
      public String apply(N node) {
        if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept"))) {
          return SPropertyOperations.getString(SNodeOperations.cast(node, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
        } else if (node != null) {
          throw new UnsupportedOperationException("Should override getName for not INamedConcept: " + SNodeOperations.getConcept(node));
        }
        return null;
      }
    });
  }

  @Override
  public String getFqName() {
    ITestNodeWrapper testCase;
    if (isTestCase() || (testCase = getTestCase()) == null) {
      return getName();
    }
    return testCase.getFqName() + "." + getName();
  }

  @Override
  public String getCachedFqName() {
    return getFqName();
  }


  @Override
  public boolean canRunInProcess() {
    return myRunsInProcess;
  }
}
