package jetbrains.mps.baseLanguage.unitTest.execution.server;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import jetbrains.mps.project.Project;
import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.testbench.junit.runners.PushEnvironmentRunnerBuilder;
import jetbrains.mps.lang.test.runtime.LightEnvironment;
import org.jetbrains.annotations.NotNull;
import java.io.File;
import org.junit.runner.Request;
import jetbrains.mps.smodel.ModelAccessHelper;
import jetbrains.mps.util.Computable;
import java.util.List;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SModule;
import org.junit.runner.Description;
import jetbrains.mps.module.ModuleClassLoaderIsNullException;
import jetbrains.mps.module.ReloadableModule;
import jetbrains.mps.classloading.ModuleIsNotLoadableException;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

/**
 * Knows hot to launch TransformationTest with TestRunner suited for in-process test execution
 */
public class NodeWrappersTestsContributor implements TestsContributor {
  private final Iterable<? extends ITestNodeWrapper> myTestNodes;
  private final Project myProject;
  private final ClassLoaderManager myClassloaderManager;
  private final PushEnvironmentRunnerBuilder myRunnerBuilder;

  public NodeWrappersTestsContributor(Project mpsProject, Iterable<? extends ITestNodeWrapper> testNodes) {
    myTestNodes = testNodes;
    myProject = mpsProject;
    myClassloaderManager = mpsProject.getComponent(ClassLoaderManager.class);
    // FIXME need a LightEnvironment cons to pass Platform. Do this once start using Environment.getPlatform in JUnit tests (i.e. where LightEnvironment is consumed) 
    myRunnerBuilder = new PushEnvironmentRunnerBuilder(new LightEnvironment() {

      @NotNull
      @Override
      public Project openProject(@NotNull File projectFile) {
        return myProject;
      }
      @Override
      public void closeProject(@NotNull Project project) {
        // no-op, do not allow to close project 
      }

    });
  }

  @Override
  public Iterable<Request> gatherTests() throws Exception {
    return new ModelAccessHelper(myProject.getModelAccess()).runReadAction(new Computable<List<Request>>() {
      public List<Request> compute() {
        final List<Request> requestList = new ArrayList<Request>();
        InProcessExecutionFilter filter = new InProcessExecutionFilter();
        for (ITestNodeWrapper testNode : myTestNodes) {
          String fqName = testNode.getFqName();
          final SNode tn = testNode.getNode();
          final SModule module = getModuleByNode(tn);
          if (testNode.isTestCase()) {
            Request requestForClass;
            try {
              filter.check(testNode, tn);
              requestForClass = requestForTestClass(fqName, module);
            } catch (Exception e) {
              requestForClass = Request.runner(new AssumptionFailedRunner(e, Description.createSuiteDescription(fqName)));
            }
            requestList.add(requestForClass);
          } else {
            int index = fqName.lastIndexOf('.');
            String testFqName = fqName.substring(0, index);
            String methodName = fqName.substring(index + 1);
            Request requestForMethod;
            try {
              filter.check(testNode, tn);
              final Request classRequest = requestForTestClass(testFqName, module);
              requestForMethod = classRequest.filterWith(Description.createTestDescription(testFqName, methodName));
            } catch (Exception e) {
              requestForMethod = Request.runner(new AssumptionFailedRunner(e, Description.createTestDescription(testFqName, methodName)));
            }
            requestList.add(requestForMethod);
          }
        }
        return requestList;
      }
    });
  }

  private Request requestForTestClass(String fqName, SModule module) throws ClassNotFoundException, ModuleClassLoaderIsNullException {
    final Class<?> aClass = loadTestClass(fqName, module);
    return Request.runner(myRunnerBuilder.safeRunnerForClass(aClass));
  }

  @NotNull
  private Class<?> loadTestClass(String fqName, SModule module) throws ClassNotFoundException, ModuleClassLoaderIsNullException {
    if (module instanceof ReloadableModule && myClassloaderManager.isLoadedByMPS(((ReloadableModule) module))) {
      return ((ReloadableModule) module).getOwnClass(fqName);
    } else {
      throw new ModuleIsNotLoadableException(module, "Module's " + module + " classes are managed by MPS (try setting compileInMPS flag to true)");
    }
  }

  private static SModule getModuleByNode(SNode testNode) {
    final SModel model = SNodeOperations.getModel(testNode);
    return model.getModule();
  }
}
