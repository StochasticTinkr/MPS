package jetbrains.mps.baseLanguage.unitTest.execution.client;

/*Generated by MPS */

import org.jetbrains.mps.annotations.Singleton;
import java.util.Map;
import jetbrains.mps.baseLanguage.unitTest.execution.TestRawKey;
import jetbrains.mps.baseLanguage.unitTest.execution.TestNodeKey;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.baseLanguage.unitTest.execution.TestCaseStringKey;
import jetbrains.mps.baseLanguage.unitTest.execution.TestCaseNodeKey;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.baseLanguage.unitTest.execution.TestMethodStringKey;
import jetbrains.mps.baseLanguage.unitTest.execution.TestMethodNodeKey;
import org.jetbrains.annotations.Nullable;

/**
 * The conversion from the raw test case/method represenation (ie strings or TestRawKey)
 * to the node representation
 */
@Singleton
/*package*/ final class String2NodeTestKeyConverter {
  private final Map<TestRawKey, TestNodeKey> myKeyMapping;

  /*package*/ String2NodeTestKeyConverter(@NotNull Map<ITestNodeWrapper, List<ITestNodeWrapper>> testCase2TestMethodMap) {
    myKeyMapping = buildKeyMapping(testCase2TestMethodMap);
  }

  @NotNull
  private static Map<TestRawKey, TestNodeKey> buildKeyMapping(@NotNull Map<ITestNodeWrapper, List<ITestNodeWrapper>> tCase2TMethodMap) {
    Map<TestRawKey, TestNodeKey> result = MapSequence.fromMap(new HashMap<TestRawKey, TestNodeKey>());
    for (ITestNodeWrapper testCaseNode : SetSequence.fromSet(MapSequence.fromMap(tCase2TMethodMap).keySet())) {
      assert testCaseNode.isTestCase();
      TestCaseStringKey rawKey = new TestCaseStringKey(testCaseNode.getFqName());
      MapSequence.fromMap(result).put(rawKey, new TestCaseNodeKey(testCaseNode));
      List<ITestNodeWrapper> methodNodes = MapSequence.fromMap(tCase2TMethodMap).get(testCaseNode);
      for (ITestNodeWrapper testMethodNode : ListSequence.fromList(methodNodes)) {
        assert !(testMethodNode.isTestCase());

        TestMethodStringKey rawMethodKey = new TestMethodStringKey(testCaseNode.getFqName(), testMethodNode.getName());
        MapSequence.fromMap(result).put(rawMethodKey, new TestMethodNodeKey(testMethodNode));
      }
    }
    return result;
  }

  @NotNull
  /*package*/ TestNodeKey convert(@NotNull TestRawKey rawKey) {
    return MapSequence.fromMap(myKeyMapping).get(rawKey);
  }

  @Nullable
  /*package*/ ITestNodeWrapper getTestCaseNodeByString(@NotNull String fqName) {
    TestRawKey rawKey = new TestCaseStringKey(fqName);
    TestNodeKey nodeKey = convert(rawKey);
    assert nodeKey instanceof TestCaseNodeKey;
    return nodeKey.getNode();
  }

  @Nullable
  /*package*/ ITestNodeWrapper getTestCaseNodeByString(@NotNull String fqName, @NotNull String methodName) {
    TestRawKey rawKey = new TestMethodStringKey(fqName, methodName);
    TestNodeKey nodeKey = convert(rawKey);
    assert nodeKey instanceof TestMethodNodeKey;
    return nodeKey.getNode();
  }
}
