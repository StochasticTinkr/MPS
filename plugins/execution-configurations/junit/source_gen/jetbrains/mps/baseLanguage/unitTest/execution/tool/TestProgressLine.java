package jetbrains.mps.baseLanguage.unitTest.execution.tool;

/*Generated by MPS */

import com.intellij.ui.components.panels.NonOpaquePanel;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestRunStateUpdateListener;
import com.intellij.ui.SimpleTextAttributes;
import com.intellij.openapi.progress.util.ColorProgressBar;
import javax.swing.JProgressBar;
import com.intellij.ui.SimpleColoredComponent;
import javax.swing.JPanel;
import java.awt.BorderLayout;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestRunData;
import javax.swing.SwingUtilities;
import java.awt.Color;
import jetbrains.mps.baseLanguage.unitTest.execution.TestNodeKey;
import javax.swing.Icon;
import com.intellij.icons.AllIcons;

/**
 * todo no reflection of ignore/assumptions/skipped tests whatsoever
 * the prototype is the idea test tool
 */
public class TestProgressLine extends NonOpaquePanel implements TestRunStateUpdateListener {
  private static final SimpleTextAttributes IGNORE_ATTRIBUTES = new SimpleTextAttributes(SimpleTextAttributes.STYLE_PLAIN, ColorProgressBar.YELLOW);
  private static final SimpleTextAttributes ERROR_ATTRIBUTES = new SimpleTextAttributes(SimpleTextAttributes.STYLE_PLAIN, ColorProgressBar.RED_TEXT);

  private static final int TOTAL_UNITS = 100;
  private final JProgressBar myProgressBar = new JProgressBar();
  private final SimpleColoredComponent myLabel = new SimpleColoredComponent();
  private final JPanel myProgressPanel = new NonOpaquePanel(new BorderLayout());

  public TestProgressLine() {
    super(new BorderLayout());
    add(myProgressPanel, BorderLayout.SOUTH);
    myProgressBar.putClientProperty("ProgressBar.stripeWidth", 3);
    myProgressBar.putClientProperty("ProgressBar.flatEnds", Boolean.TRUE);
    myProgressBar.setMaximum(TOTAL_UNITS);
    JPanel labelWrapper = new NonOpaquePanel(new BorderLayout());
    myLabel.setOpaque(false);
    labelWrapper.add(myLabel, BorderLayout.NORTH);
    add(labelWrapper, BorderLayout.CENTER);
    myProgressBar.setIndeterminate(true);
    myProgressPanel.add(myProgressBar, BorderLayout.NORTH);
  }

  @Override
  public void update(@NotNull final TestRunData data) {
    if (data.getAvailableText() != null) {
      return;
    }
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        updateProgressBar(data);
        updateLabel(data);
      }
    });
  }

  private void updateProgressBar(@NotNull TestRunData data) {
    int failed = data.getFailedCount();
    int ignored = data.getIgnoredCount();
    int skipped = data.getSkippedCount();
    int total = data.getTotalCount();
    int completed = data.getCompletedCount();

    myProgressBar.setIndeterminate(false);
    Color color;
    if (failed + ignored + skipped > 0) {
      color = ColorProgressBar.RED;
    } else if (data.isTerminated() && total > completed) {
      color = ColorProgressBar.YELLOW;
    } else {
      color = ColorProgressBar.GREEN;
    }
    myProgressBar.setForeground(color);
    if (total != 0) {
      myProgressBar.setValue((completed * TOTAL_UNITS) / total);
    }
  }

  private void updateLabel(@NotNull TestRunData data) {
    int failed = data.getFailedCount();
    int ignored = data.getIgnoredCount();
    int skipped = data.getSkippedCount();
    int total = data.getTotalCount();
    int completed = data.getCompletedCount();
    int passed = data.getPassedCount();
    TestNodeKey testNode = data.getCurrentTestNode();
    constructLabelFromData(total, completed, data, failed, passed, ignored, skipped, testNode);
    Icon iconForData = calcIconFromData(total, completed, data, failed, passed, ignored, skipped, testNode);
    if (iconForData != null) {
      myLabel.setIcon(iconForData);
    }
  }

  private Icon calcIconFromData(int total, int completed, TestRunData data, int failed, int passed, int ignored, int skipped, TestNodeKey testNode) {
    if (data.isTerminated()) {
      if (!(data.isFinished())) {
        return AllIcons.RunConfigurations.TestTerminated;
      } else {
        if (completed != total) {
          return AllIcons.RunConfigurations.TestError;
        }
        if (failed > 0) {
          return AllIcons.RunConfigurations.TestFailed;
        }
        if (skipped > 0) {
          return AllIcons.RunConfigurations.TestSkipped;
        }
        if (ignored > 0) {
          return AllIcons.RunConfigurations.TestIgnored;
        }
        return AllIcons.RunConfigurations.TestPassed;
      }
    }
    return null;
  }

  private void constructLabelFromData(int total, int completed, TestRunData data, int failed, int passed, int ignored, int skipped, TestNodeKey testNode) {
    myLabel.clear();
    boolean done = (total == completed);
    if (!(done) && data.isTerminated()) {
      if (data.isFinished()) {
        myLabel.append("Finished. ");
      } else {
        if (data.isTerminatedCorrectly()) {
          myLabel.append("Stopped. ");
        } else {
          myLabel.append("Terminated. ");
        }
      }
    }
    boolean smthWrittenAlready = false;
    if (failed > 0) {
      myLabel.append("Tests failed: " + failed, ERROR_ATTRIBUTES);
      smthWrittenAlready = true;
    } else {
      myLabel.append("Tests ");
    }
    if (passed > 0 || ignored + failed + skipped == 0) {
      if (smthWrittenAlready) {
        myLabel.append(", ");
      }
      smthWrittenAlready = true;
      myLabel.append("passed: " + passed);
    }
    if (ignored > 0) {
      if (smthWrittenAlready) {
        myLabel.append(", ");
      }
      smthWrittenAlready = true;
      myLabel.append("ignored: " + ignored, IGNORE_ATTRIBUTES);
    }
    if (skipped > 0) {
      if (smthWrittenAlready) {
        myLabel.append(", ");
      }
      myLabel.append("skipped: " + skipped, IGNORE_ATTRIBUTES);
    }
    if (total > 0) {
      myLabel.append(" of " + total + " test" + ((total > 1 ? "s" : "")), SimpleTextAttributes.GRAYED_ATTRIBUTES);
    }
    String qualifiedName = (testNode == null ? "" : testNode.getQualifiedName());
    if (!(data.isTerminated()) && !(done) && testNode != null) {
      myLabel.append(". ", SimpleTextAttributes.GRAYED_ATTRIBUTES);
      myLabel.append("Running now: " + qualifiedName, SimpleTextAttributes.DARK_TEXT);
    }
  }
}
