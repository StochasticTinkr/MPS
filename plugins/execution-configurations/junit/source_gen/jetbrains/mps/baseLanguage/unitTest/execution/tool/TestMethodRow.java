package jetbrains.mps.baseLanguage.unitTest.execution.tool;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.unitTest.execution.TestMethodNodeKey;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.baseLanguage.unitTest.execution.TestNodeKey;

public class TestMethodRow implements TestStatisticsRow {
  private static final int UNDEFINED = -1;
  private static final int SUCCEED = 0;
  private static final int FAILED = 1;
  private static final int ERRORED = 2;

  private long myStartTime = -1;
  private long myFinishTime = -1;
  private long myUsageBefore = -1;
  private long myUsageAfter = -1;
  private int myState = UNDEFINED;
  private final TestMethodNodeKey myKey;

  public TestMethodRow(@NotNull TestMethodNodeKey methodKey) {
    myKey = methodKey;
  }

  @Override
  public String getText() {
    return myKey.getTestMethodName();
  }

  @Override
  public String getAdditionalText() {
    return null;
  }

  @Override
  public long getElapsedTime() {
    long elapsedTime = -1;
    if (myStartTime >= 0 && myFinishTime >= 0) {
      elapsedTime = myFinishTime - myStartTime;
    }
    return elapsedTime;
  }

  public void setStartTime(long startTime) {
    myStartTime = startTime;
  }

  public void setFinishTime(long finishTime) {
    myFinishTime = finishTime;
  }

  @Override
  public long getUsageBefore() {
    return myUsageBefore;
  }

  public void setUsageBefore(long usageBefore) {
    myUsageBefore = usageBefore;
  }

  @Override
  public long getUsageAfter() {
    return myUsageAfter;
  }

  public void setUsageAfter(long usageAfter) {
    myUsageAfter = usageAfter;
  }

  @Override
  public long getUsageDelta() {
    long usageDelta = -1;
    if (myUsageAfter >= 0 && myUsageBefore >= 0) {
      usageDelta = myUsageAfter - myUsageBefore;
    }
    return usageDelta;
  }

  public void setSucceed() {
    myState = SUCCEED;
  }

  public void setFailed() {
    myState = FAILED;
  }

  public void setErrored() {
    myState = ERRORED;
  }

  @Override
  public int getSuccessful() {
    return (myState == SUCCEED ? 1 : 0);
  }

  @Override
  public int getErrored() {
    return (myState == ERRORED ? 1 : 0);
  }

  @Override
  public int getFailed() {
    return (myState == FAILED ? 1 : 0);
  }

  @Override
  public boolean matches(@Nullable TestNodeKey testKey) {
    if (testKey == null) {
      return true;
    }
    if (testKey.equals(myKey)) {
      return true;
    }
    if (myKey.getNode().getTestCase().equals(testKey.getNode())) {
      return true;
    }
    return false;
  }
}
