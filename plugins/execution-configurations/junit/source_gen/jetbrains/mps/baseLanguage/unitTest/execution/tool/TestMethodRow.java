package jetbrains.mps.baseLanguage.unitTest.execution.tool;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;

public class TestMethodRow implements TestStatisticsRow {
  private static final int UNDEFINED = -1;
  private static final int SUCCEED = 0;
  private static final int FAILED = 1;
  private static final int ERRORED = 2;
  private final String myTestCaseName;
  private final String myTestMethodName;
  private long myStartTime = -1;
  private long myFinishTime = -1;
  private long myUsageBefore = -1;
  private long myUsageAfter = -1;
  private int myState = UNDEFINED;
  public TestMethodRow(@NotNull ITestNodeWrapper testMethod) {
    myTestCaseName = testMethod.getTestCase().getFqName();
    myTestMethodName = testMethod.getName();
  }
  @Override
  public String getText() {
    return myTestMethodName;
  }
  @Override
  public String getAdditionalText() {
    return null;
  }
  @Override
  public long getElapsedTime() {
    long elapsedTime = -1;
    if (myStartTime >= 0 && myFinishTime >= 0) {
      elapsedTime = myFinishTime - myStartTime;
    }
    return elapsedTime;
  }
  public void setStartTime(long startTime) {
    myStartTime = startTime;
  }
  public void setFinishTime(long finishTime) {
    myFinishTime = finishTime;
  }
  @Override
  public long getUsageBefore() {
    return myUsageBefore;
  }
  public void setUsageBefore(long usageBefore) {
    myUsageBefore = usageBefore;
  }
  @Override
  public long getUsageAfter() {
    return myUsageAfter;
  }
  public void setUsageAfter(long usageAfter) {
    myUsageAfter = usageAfter;
  }
  @Override
  public long getUsageDelta() {
    long usageDelta = -1;
    if (myUsageAfter >= 0 && myUsageBefore >= 0) {
      usageDelta = myUsageAfter - myUsageBefore;
    }
    return usageDelta;
  }
  public void setSucceed() {
    myState = SUCCEED;
  }
  public void setFailed() {
    myState = FAILED;
  }
  public void setErrored() {
    myState = ERRORED;
  }
  @Override
  public int getSuccessful() {
    return (myState == SUCCEED ? 1 : 0);
  }
  @Override
  public int getErrored() {
    return (myState == ERRORED ? 1 : 0);
  }
  @Override
  public int getFailed() {
    return (myState == FAILED ? 1 : 0);
  }
  @Override
  public boolean matches(String testCase, String testMethod) {
    return testCase == null || (eq_52sp5f_a0a0a0a82(testCase, myTestCaseName) && (testMethod == null || eq_52sp5f_a0a0a0a0a82(testMethod, myTestMethodName)));
  }
  private static boolean eq_52sp5f_a0a0a0a0a82(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
  private static boolean eq_52sp5f_a0a0a0a82(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
