package jetbrains.mps.baseLanguage.unitTest.execution.client;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.openapi.util.Key;
import org.jetbrains.annotations.NotNull;

/**
 * A pack of test data which needs to be transferred between the model and the clients of the model updates
 */
public final class TestRunData {
  /**
   * mutable fields below
   */
  /*package*/ final List<TestMethodKey> myTestMethodsLeftToRun = ListSequence.fromList(new ArrayList<TestMethodKey>());
  /*package*/ String myCurrentClass;
  /*package*/ String myCurrentMethod;
  /*package*/ String myCurrentToken;
  /*package*/ String myCurrentNotExecutedDueToTerminationClass;
  /*package*/ String myCurrentNotExecutedDueToTerminationMethod;

  /*package*/ int myTotalTests;
  /*package*/ int myCompletedTests = 0;
  /*package*/ int myFailedTests = 0;
  /*package*/ boolean myIsTerminated;
  /*package*/ String myAvailableText = null;
  /*package*/ Key myKey = null;

  public int getTotalTests() {
    return myTotalTests;
  }

  public int getFailedTests() {
    return myFailedTests;
  }

  public int getCompletedTests() {
    return myCompletedTests;
  }

  public String getCurrentClass() {
    return myCurrentClass;
  }

  public String getCurrentMethod() {
    return myCurrentMethod;
  }

  public String getToken() {
    return myCurrentToken;
  }

  public String getLostMethod() {
    return myCurrentNotExecutedDueToTerminationMethod;
  }

  public String getLostClass() {
    return myCurrentNotExecutedDueToTerminationClass;
  }

  public boolean isTerminated() {
    return myIsTerminated;
  }

  public String getAvailableText() {
    return myAvailableText;
  }

  public Key getKey() {
    return myKey;
  }

  @NotNull
  public TestRunData copy() {
    TestRunData dataCopy = new TestRunData();
    ListSequence.fromList(dataCopy.myTestMethodsLeftToRun).addSequence(ListSequence.fromList(myTestMethodsLeftToRun));
    dataCopy.myCurrentClass = myCurrentClass;
    dataCopy.myCurrentMethod = myCurrentMethod;
    dataCopy.myCurrentToken = myCurrentToken;
    dataCopy.myCurrentNotExecutedDueToTerminationClass = myCurrentNotExecutedDueToTerminationClass;
    dataCopy.myCurrentNotExecutedDueToTerminationMethod = myCurrentNotExecutedDueToTerminationMethod;
    dataCopy.myTotalTests = myTotalTests;
    dataCopy.myCompletedTests = myCompletedTests;
    dataCopy.myFailedTests = myFailedTests;
    dataCopy.myIsTerminated = myIsTerminated;
    dataCopy.myAvailableText = myAvailableText;
    dataCopy.myKey = myKey;
    return dataCopy;
  }
}
