package jetbrains.mps.baseLanguage.unitTest.execution.client;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.baseLanguage.unitTest.execution.TestMethodNodeKey;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.unitTest.execution.TestNodeKey;
import com.intellij.openapi.util.Key;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;

/**
 * A pack of test data which needs to be transferred between the model and the clients of the model updates
 */
public final class TestRunData {
  /**
   * mutable fields below
   */
  /*package*/ final List<TestMethodNodeKey> myTestMethodsLeftToRun = ListSequence.fromList(new ArrayList<TestMethodNodeKey>());
  /*package*/ TestNodeKey myCurrentTestNode;

  /*package*/ int myTotalTests;
  /*package*/ int myCompletedTests = 0;
  /*package*/ int myFailedTests = 0;
  /*package*/ int mySkippedTests = 0;
  /*package*/ int myIgnoredTests = 0;
  /*package*/ boolean myTerminated;
  /*package*/ boolean myFinished;
  /*package*/ boolean myTerminatedCorrectly;
  /*package*/ String myAvailableText = null;
  /*package*/ Key myTextType = null;

  public boolean isFinished() {
    return myFinished;
  }

  public int getTotalCount() {
    return myTotalTests;
  }

  public int getFailedCount() {
    return myFailedTests;
  }

  public int getCompletedCount() {
    return myCompletedTests;
  }

  public int getPassedCount() {
    return myCompletedTests - myFailedTests - myIgnoredTests - mySkippedTests;
  }

  public int getSkippedCount() {
    return mySkippedTests;
  }

  public int getIgnoredCount() {
    return myIgnoredTests;
  }

  @Nullable
  public TestNodeKey getCurrentTestNode() {
    return myCurrentTestNode;
  }

  public boolean isTerminated() {
    return myTerminated;
  }

  public boolean isTerminatedCorrectly() {
    return myTerminated;
  }

  public String getAvailableText() {
    return myAvailableText;
  }

  public Key getTextType() {
    return myTextType;
  }

  @NotNull
  public TestRunData copy() {
    TestRunData dataCopy = new TestRunData();
    ListSequence.fromList(dataCopy.myTestMethodsLeftToRun).addSequence(ListSequence.fromList(myTestMethodsLeftToRun));
    dataCopy.myCurrentTestNode = myCurrentTestNode;
    dataCopy.myTotalTests = myTotalTests;
    dataCopy.myCompletedTests = myCompletedTests;
    dataCopy.myFailedTests = myFailedTests;
    dataCopy.myIgnoredTests = myIgnoredTests;
    dataCopy.mySkippedTests = mySkippedTests;
    dataCopy.myFinished = myFinished;
    dataCopy.myTerminated = myTerminated;
    dataCopy.myTerminatedCorrectly = myTerminatedCorrectly;
    dataCopy.myAvailableText = myAvailableText;
    dataCopy.myTextType = myTextType;
    return dataCopy;
  }
}
