package jetbrains.mps.baseLanguage.unitTest.execution.client;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import com.intellij.execution.process.ProcessEvent;
import jetbrains.mps.baseLanguage.unitTest.execution.server.DefaultTestExecutor;
import com.intellij.openapi.util.Key;
import jetbrains.mps.baseLanguage.unitTest.execution.TestEventMessage;
import jetbrains.mps.baseLanguage.unitTest.execution.TestRawEvent;

/**
 * Updates {@link jetbrains.mps.baseLanguage.unitTest.execution.client.TestRunState } with {@link jetbrains.mps.baseLanguage.unitTest.execution.TestEventMessage } and other events from a futher unspecified source (usually a listener of a test execution process)
 */
public final class TestEventsDispatcher {
  private final TestRunState myState;

  public TestEventsDispatcher(TestRunState testState) {
    myState = testState;
  }

  public void onProcessTerminated(@NotNull ProcessEvent event) {
    myState.onTermination(event.getExitCode() == DefaultTestExecutor.EXIT_CODE_FOR_EXCEPTION);
  }

  public void onSimpleTextAvailable(String text, Key key) {
    myState.outputText(text, key);
  }

  public void onTestEvent(@NotNull TestEventMessage message) {
    String token = message.getToken();
    TestRawEvent event = message.getEvent();
    switch (token) {
      case TestEventMessage.START_TEST_PREFIX:
        myState.onTestStarted(event);
      case TestEventMessage.FINISH_TEST_PREFIX:
        myState.onTestFinished(event);
      case TestEventMessage.FAILURE_TEST_PREFIX:
        myState.onTestFailure(event);
      case TestEventMessage.START_TESTRUN_PREFIX:
        myState.onRunTestStarted();
      case TestEventMessage.FINISH_TESTRUN_PREFIX:
        myState.onRunTestFinished();
      case TestEventMessage.ASSUMPTION_FAILURE_TEST_PREFIX:
        myState.onTestAssumptionFailure(event);
      case TestEventMessage.IGNORE_FAILURE_TEST_PREFIX:
        myState.onTestIgnored(event);
    }
  }
}
