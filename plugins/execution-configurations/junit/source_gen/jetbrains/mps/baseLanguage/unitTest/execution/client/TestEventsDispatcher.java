package jetbrains.mps.baseLanguage.unitTest.execution.client;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import com.intellij.execution.process.ProcessEvent;
import com.intellij.openapi.util.Key;
import jetbrains.mps.baseLanguage.unitTest.execution.TestEvent;

/**
 * Updates {@link jetbrains.mps.baseLanguage.unitTest.execution.client.TestRunState } with {@link jetbrains.mps.baseLanguage.unitTest.execution.TestEvent } and other events from a futher unspecified source (usually a listener of a test execution process)
 */
public class TestEventsDispatcher {
  private final TestRunState myState;

  public TestEventsDispatcher(TestRunState testState) {
    myState = testState;
  }

  public void onProcessTerminated(@NotNull ProcessEvent event) {
    myState.terminate(event.getExitCode() == 0);
  }

  public void onSimpleTextAvailable(String text, Key key) {
    myState.outputText(text, key);
  }

  public void onTestEvent(TestEvent event) {
    String token = event.getToken();
    if (TestEvent.START_TEST_PREFIX.equals(token)) {
      myState.onTestStarted(event);
    } else if (TestEvent.FINISH_TEST_PREFIX.equals(token)) {
      myState.onTestFinished(event);
    } else if (TestEvent.ASSUMPTION_FAILURE_TEST_PREFIX.equals(token)) {
      myState.onTestAssumptionFailure(event);
    } else if (TestEvent.IGNORE_FAILURE_TEST_PREFIX.equals(token)) {
      // fix: no difference between assumption failure and ignoring the test 
      myState.onTestAssumptionFailure(event);
    } else if (TestEvent.FAILURE_TEST_PREFIX.equals(token)) {
      myState.onTestFailure(event);
    }
  }
}
