package jetbrains.mps.baseLanguage.unitTest.execution.tool;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.unitTest.execution.client.TestStateAdapter;
import com.intellij.execution.ui.ConsoleView;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.util.Key;
import jetbrains.mps.baseLanguage.unitTest.execution.TextTestEvent;
import javax.swing.SwingUtilities;
import javax.swing.JComponent;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.baseLanguage.unitTest.execution.TestNodeKey;
import java.util.Objects;
import com.intellij.openapi.util.Disposer;
import com.intellij.execution.process.ProcessOutputTypes;
import com.intellij.execution.ui.ConsoleViewContentType;

public class TestOutputContainer extends TestStateAdapter {
  /**
   * here I found a logic as follows.
   * if there are too many messages we start dumping them to disk, in the temp folder.
   * the same logic applies in the test idea framework
   */
  /*package*/ static final int MAX_MESSAGES_BEFORE_DUMP = 10000;

  private final ConsoleView myConsoleView;
  private final MessageContainerBase myRootMessageContainer;

  @NotNull
  private final MessageFilter myFilter = new MessageFilter();

  private final Printer myDefaultPrinter = new Printer() {
    public void print(@NotNull String text, @NotNull Key key) {
      TestOutputContainer.this.print(text, key);
    }
  };

  public TestOutputContainer(@NotNull ConsoleView console) {
    myRootMessageContainer = new RootMessageContainer(myFilter);
    myConsoleView = console;
  }

  @Override
  public void onTextAvailable(@NotNull final TextTestEvent event) {
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        appendWithParameters(event);
      }
    });
  }

  public void init() {
    clear();
  }

  public JComponent getComponent() {
    return myConsoleView.getComponent();
  }

  public void setFilter(@Nullable TestNodeKey newFilter) {
    if (!(Objects.equals(newFilter, myFilter.getNode()))) {
      myFilter.update(newFilter);
      myConsoleView.clear();
      myRootMessageContainer.printOn(myDefaultPrinter);
    }
  }

  public void appendWithParameters(@NotNull TextTestEvent event) {
    TestMessage message = myRootMessageContainer.addMessage(event);
    if (myFilter.accept(event.getCurrentTestNode())) {
      message.printOn(myDefaultPrinter);
    }
  }

  public void clear() {
    myRootMessageContainer.clear();
    myConsoleView.clear();
  }

  public void dispose() {
    Disposer.dispose(myConsoleView);
  }

  public ConsoleView getConsole() {
    return myConsoleView;
  }

  private void print(@NotNull String text, @NotNull Key key) {
    if (ProcessOutputTypes.STDERR.equals(key)) {
      myConsoleView.print(text, ConsoleViewContentType.ERROR_OUTPUT);
    } else if (ProcessOutputTypes.SYSTEM.equals(key)) {
      myConsoleView.print(text, ConsoleViewContentType.SYSTEM_OUTPUT);
    } else if (ProcessOutputTypes.STDOUT.equals(key)) {
      myConsoleView.print(text, ConsoleViewContentType.NORMAL_OUTPUT);
    }
  }
}
