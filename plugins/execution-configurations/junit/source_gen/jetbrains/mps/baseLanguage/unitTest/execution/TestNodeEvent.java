package jetbrains.mps.baseLanguage.unitTest.execution;

/*Generated by MPS */

import org.jetbrains.mps.annotations.Immutable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import java.util.Objects;

/**
 * events which wrap the raw events however also contain a node information
 * this events are passed into the clients of the test run state which are supposed to use this node information
 * in order to update their state
 */
@Immutable
public final class TestNodeEvent {
  private final TestNodeKey myTestNodeKey;
  private final TestRawEvent myRawEvent;

  public TestNodeEvent(@NotNull TestRawEvent rawEvent, TestNodeKey nodeKey) {
    myTestNodeKey = nodeKey;
    myRawEvent = rawEvent;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    builder.append(myTestNodeKey);
    builder.append(myRawEvent.toString());
    return builder.toString();
  }

  public String getTestCaseFqName() {
    return myTestNodeKey.getTestCaseFqName();
  }

  @Nullable
  public String getTestMethodFqName() {
    if (myTestNodeKey.getType() == TestType.METHOD) {
      return ((TestMethodNodeKey) myTestNodeKey).getTestMethodName();
    }
    return null;
  }

  @NotNull
  public TestNodeKey getTestKey() {
    return myTestNodeKey;
  }

  @NotNull
  public TestRawEvent getRawEvent() {
    return myRawEvent;
  }

  @NotNull
  public TestType getTestType() {
    if (myTestNodeKey instanceof TestCaseNodeKey) {
      return TestType.TESTCASE;
    } else if (myTestNodeKey instanceof TestMethodNodeKey) {
      return TestType.METHOD;
    }
    assert false;
    return null;
  }

  public boolean isTestCaseEvent() {
    return getTestType() == TestType.TESTCASE;
  }

  @Override
  public boolean equals(Object o) {
    if (o == null || !(o instanceof TestNodeEvent)) {
      return false;
    }
    TestNodeEvent event = (TestNodeEvent) o;
    return Objects.equals(myTestNodeKey, event.myTestNodeKey) && Objects.equals(myRawEvent, event.myRawEvent);
  }

  @Override
  public int hashCode() {
    return Objects.hash(myTestNodeKey, myRawEvent);
  }
}
