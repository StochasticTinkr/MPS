package jetbrains.mps.baseLanguage.unitTest.execution.client;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NonNls;
import java.util.function.Function;
import jetbrains.mps.lang.core.behavior.INamedConcept__BehaviorDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.IListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.behavior.IClassifierType__BehaviorDescriptor;
import jetbrains.mps.baseLanguage.behavior.IClassifier__BehaviorDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.NotNullWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.behavior.Classifier__BehaviorDescriptor;

public class JUnit4TestWrapper extends AbstractTestWrapper<SNode> {
  public JUnit4TestWrapper(SNode clazz) {
    super(clazz, false, AbstractTestWrapper.needsMPS(clazz));
  }

  @Override
  public boolean isTestCase() {
    return true;
  }

  @NonNls
  @Override
  public String getFqName() {
    return withNode(new Function<SNode, String>() {
      public String apply(SNode n) {
        return (n == null ? null : INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(n));
      }
    });
  }

  @NotNull
  @Override
  public Iterable<ITestNodeWrapper> getTestMethods() {
    return withNode(new Function<SNode, IListSequence<ITestNodeWrapper>>() {
      public IListSequence<ITestNodeWrapper> apply(SNode node) {
        Iterable<SNode> nodes = SNodeOperations.ofConcept(IClassifierType__BehaviorDescriptor.getMembers_id6r77ob2V1Fr.invoke(IClassifier__BehaviorDescriptor.getThisType_id6r77ob2UWbY.invoke(node)), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"));
        return Sequence.fromIterable(nodes).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return JUnit4MethodWrapper.isJUnit4TestMethod(it);
          }
        }).select(new ISelector<SNode, ITestNodeWrapper>() {
          public ITestNodeWrapper select(SNode it) {
            return TestNodeWrapperFactory.tryToWrap(it);
          }
        }).where(new NotNullWhereFilter<ITestNodeWrapper>()).toListSequence();
      }
    });
  }

  public static boolean isJUnit4TestCase(SNode clazz) {
    if (SPropertyOperations.getBoolean(SNodeOperations.cast(clazz, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept")), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, 0xfa5cee6dfaL, "abstractClass"))) {
      return false;
    }
    for (SNode method : Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(clazz))) {
      if (JUnit4MethodWrapper.isJUnit4TestMethod(method)) {
        return true;
      }
    }
    return false;
  }
}
