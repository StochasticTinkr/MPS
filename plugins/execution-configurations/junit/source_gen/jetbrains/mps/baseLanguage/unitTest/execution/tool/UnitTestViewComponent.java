package jetbrains.mps.baseLanguage.unitTest.execution.tool;

/*Generated by MPS */

import javax.swing.JPanel;
import com.intellij.openapi.Disposable;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestRunState;
import javax.swing.JComponent;
import jetbrains.mps.project.MPSProject;
import java.util.List;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.openapi.project.Project;
import com.intellij.execution.ui.ConsoleView;
import java.awt.BorderLayout;
import jetbrains.mps.ide.project.ProjectHelper;
import javax.swing.BorderFactory;
import com.intellij.openapi.ui.Splitter;
import com.intellij.ui.components.panels.NonOpaquePanel;
import com.intellij.execution.testframework.ui.SameHeightPanel;
import java.awt.Color;
import com.intellij.openapi.editor.colors.EditorColorsManager;
import javax.swing.border.CompoundBorder;
import com.intellij.ui.IdeBorderFactory;
import com.intellij.ui.SideBorder;
import java.awt.Dimension;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionToolbar;
import javax.swing.JScrollPane;
import com.intellij.ui.ScrollPaneFactory;
import com.intellij.util.ui.UIUtil;
import javax.swing.JTable;
import com.intellij.ui.table.JBTable;
import java.awt.GridLayout;
import com.intellij.ui.components.JBScrollPane;
import com.intellij.ide.util.PropertiesComponent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeEvent;
import com.intellij.openapi.actionSystem.DataProvider;
import java.awt.LayoutManager;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.workbench.MPSDataKeys;
import jetbrains.mps.ide.ui.tree.MPSTreeNode;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;

public class UnitTestViewComponent extends JPanel implements Disposable {
  private static final String SPLITTER_SIZE_PROPERTY = UnitTestOptions.PREFIX + ".UnitTestViewComponent" + ".splitter";

  private final TestRunState myTestState;
  private final TestOutputContainer myTestOutputContainer;
  private final TestTree myTreeComponent;
  private final TestProgressLine myProgressLineComponent;
  private final TestToolbarPanel myToolbarPanel;
  private final JComponent myOutputToolbarComponent;
  private final MPSProject myProject;
  private final FailedTestOccurrenceNavigator myTestNavigator;
  private final StatisticsTableModel myStatisticsModel;
  private final List<_FunctionTypes._void_P0_E0> myListeners = ListSequence.fromList(new ArrayList<_FunctionTypes._void_P0_E0>());

  public UnitTestViewComponent(Project project, ConsoleView console, TestRunState testRunState, _FunctionTypes._void_P0_E0 closeListener) {
    super(new BorderLayout());
    myProject = ProjectHelper.fromIdeaProject(project);
    myTestState = testRunState;
    myStatisticsModel = new StatisticsTableModel(myTestState);

    myTreeComponent = new TestTree(myTestState, myProject, this);
    myTreeComponent.setBorder(BorderFactory.createEmptyBorder(0, 3, 0, 0));
    myTestNavigator = new FailedTestOccurrenceNavigator(myTreeComponent);
    myToolbarPanel = new TestToolbarPanel(myTreeComponent, myTestNavigator);

    JComponent leftPanel = createTreePanel(myToolbarPanel, myTreeComponent);
    myProgressLineComponent = new TestProgressLine();
    myTestOutputContainer = new TestOutputContainer(console);
    myTestOutputContainer.init();
    myTreeComponent.addTreeSelectionListener(new TestTreeSelectionListener(myTreeComponent, myStatisticsModel, myTestOutputContainer));
    myTreeComponent.addMouseListener(new TestTreeRootMouseListener(myTreeComponent, myStatisticsModel, myTestOutputContainer));
    myTreeComponent.init();

    Splitter leftSplitter = new Splitter(false);
    initSplitterProportion(leftSplitter, 0.2f, "tree");
    leftSplitter.setFirstComponent(leftPanel);
    add(leftSplitter, BorderLayout.CENTER);

    JComponent testOutput = myTestOutputContainer.getComponent();
    JPanel rightPanel = new NonOpaquePanel(new BorderLayout());
    JPanel middleOutputPanel = new NonOpaquePanel(new BorderLayout());
    setMinimumWidthOfTheProgressToZero(myProgressLineComponent);
    middleOutputPanel.add(SameHeightPanel.wrap(myProgressLineComponent, myToolbarPanel), BorderLayout.NORTH);
    testOutput.setFocusable(true);
    final Color editorBackground = EditorColorsManager.getInstance().getGlobalScheme().getDefaultBackground();
    testOutput.setBorder(new CompoundBorder(IdeBorderFactory.createBorder(SideBorder.RIGHT), new SideBorder(editorBackground, SideBorder.LEFT)));
    middleOutputPanel.add(testOutput, BorderLayout.CENTER);
    myOutputToolbarComponent = createActionsToolbar(console);
    middleOutputPanel.add(myOutputToolbarComponent, BorderLayout.EAST);

    Splitter rightSplitter = new Splitter(false);
    initSplitterProportion(rightSplitter, 0.5f, "statistic");
    rightSplitter.setFirstComponent(middleOutputPanel);
    JComponent statistics = createStatisticsComponent(myStatisticsModel);
    rightSplitter.setSecondComponent(statistics);
    rightPanel.add(rightSplitter, BorderLayout.CENTER);
    leftSplitter.setSecondComponent(rightPanel);

    myTestState.addListener(myTreeComponent);
    myTestState.addUpdateListener(myProgressLineComponent);
    myTestState.addListener(myTestOutputContainer);
    addCloseListener(closeListener);
  }

  private void setMinimumWidthOfTheProgressToZero(final TestProgressLine myProgressLineComponent) {
    myProgressLineComponent.setMinimumSize(new Dimension(0, myProgressLineComponent.getMinimumSize().height));
  }

  @Override
  public void addNotify() {
    super.addNotify();
    // progress line goes until the text output bar with actions 
    myProgressLineComponent.setBorder(BorderFactory.createEmptyBorder(3, 0, 0, myOutputToolbarComponent.getPreferredSize().width));
  }

  public JComponent createActionsToolbar(ConsoleView console) {
    DefaultActionGroup group = new DefaultActionGroup(console.createConsoleActions());
    ActionManager manager = ActionManager.getInstance();
    ActionToolbar toolbar = manager.createActionToolbar("TestRunnerResults", group, false);
    toolbar.setLayoutPolicy(ActionToolbar.WRAP_LAYOUT_POLICY);
    return toolbar.getComponent();
  }

  private JPanel createTreePanel(JComponent toolbar, JComponent tree) {
    UnitTestViewComponent.MyTreePanel treePanel = new UnitTestViewComponent.MyTreePanel(new BorderLayout());
    JScrollPane scrollPane = ScrollPaneFactory.createScrollPane(tree);
    scrollPane.putClientProperty(UIUtil.KEEP_BORDER_SIDES, SideBorder.TOP);
    treePanel.add(scrollPane, BorderLayout.CENTER);
    treePanel.add(toolbar, BorderLayout.NORTH);
    return treePanel;
  }

  private JComponent createStatisticsComponent(StatisticsTableModel testStatisticsModel) {
    JTable statisticsTable = new JBTable(testStatisticsModel);
    statisticsTable.setDefaultRenderer(TestStatisticsRow.class, new StatisticsRowRenderer());
    JPanel tablePanel = new JPanel(new GridLayout(1, 1));
    tablePanel.add(new JBScrollPane(statisticsTable));
    return tablePanel;
  }

  @Override
  public void dispose() {
    myTestState.removeListener(myTreeComponent);
    myTestState.removeUpdateListener(myProgressLineComponent);
    myTestState.removeListener(myTestOutputContainer);
    myStatisticsModel.dispose();
    myTestOutputContainer.dispose();
    myTreeComponent.dispose();
    invokeCloseListeners();
  }

  public void addCloseListener(_FunctionTypes._void_P0_E0 listener) {
    ListSequence.fromList(myListeners).addElement(listener);
  }

  public void invokeCloseListeners() {
    for (_FunctionTypes._void_P0_E0 listener : ListSequence.fromList(myListeners)) {
      listener.invoke();
    }
  }

  public void initSplitterProportion(final Splitter splitter, float defaultProportion, final String id) {
    final PropertiesComponent propertiesComponent = PropertiesComponent.getInstance();
    String value = propertiesComponent.getValue(UnitTestViewComponent.SPLITTER_SIZE_PROPERTY + "." + id);
    float proportion = defaultProportion;
    if ((value != null && value.length() > 0)) {
      try {
        proportion = Float.parseFloat(value);
      } catch (NumberFormatException ignore) {
      }
    }

    splitter.addPropertyChangeListener(new PropertyChangeListener() {
      @Override
      public void propertyChange(PropertyChangeEvent event) {
        if (event.getPropertyName().equals(Splitter.PROP_PROPORTION)) {
          propertiesComponent.setValue(UnitTestViewComponent.SPLITTER_SIZE_PROPERTY + "." + id, String.valueOf(splitter.getProportion()));
        }
      }
    });

    splitter.setProportion(proportion);
  }

  /*package*/ class MyTreePanel extends JPanel implements DataProvider {
    public MyTreePanel(LayoutManager manager) {
      super(manager);
    }

    @Nullable
    @Override
    public Object getData(@NonNls String dataId) {
      if (MPSDataKeys.MPS_PROJECT.is(dataId)) {
        return myProject;
      }
      if (MPSDataKeys.NODE.is(dataId)) {
        MPSTreeNode currentNode = myTreeComponent.getCurrentNode();
        if (currentNode == null) {
          return null;
        }
        ITestNodeWrapper testWrapper = (ITestNodeWrapper) currentNode.getUserObject();
        // XXX it's unclear whether we shall assume model read lock here, or obtain it ourselves 
        // I didn't get the lock here as it's stupid to ask for SNode not inside a lock already. 
        return testWrapper.getNodePointer().resolve(myProject.getRepository());
      }
      return null;
    }
  }
}
