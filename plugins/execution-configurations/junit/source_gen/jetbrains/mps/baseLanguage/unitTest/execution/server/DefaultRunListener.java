package jetbrains.mps.baseLanguage.unitTest.execution.server;

/*Generated by MPS */

import org.junit.runner.notification.RunListener;
import org.junit.runner.Description;
import jetbrains.mps.baseLanguage.unitTest.execution.TestEvent;
import org.junit.runner.notification.Failure;

/**
 * JUnit test listener that spits out control sequences into supplied stream. 
 * These control sequences are for external process to receive JUnit events.
 */
public class DefaultRunListener extends RunListener {
  private final CommandOutputStream myOutput;

  public DefaultRunListener(CommandOutputStream out) {
    myOutput = out;
  }

  @Override
  public void testFinished(Description description) {
    System.err.flush();
    this.printSyncToken(TestEvent.FINISH_TEST_PREFIX, description);
  }

  @Override
  public void testFailure(Failure failure) {
    failure.getException().printStackTrace(System.err);
    System.err.flush();
    this.printSyncToken(TestEvent.FAILURE_TEST_PREFIX, failure.getDescription());
  }

  @Override
  public void testAssumptionFailure(Failure failure) {
    failure.getException().printStackTrace(System.err);
    System.err.flush();
    this.printSyncToken(TestEvent.ASSUMPTION_FAILURE_TEST_PREFIX, failure.getDescription());
  }

  @Override
  public void testIgnored(Description description) {
    System.err.println(description + " ignored");
    System.err.flush();
    this.printSyncToken(TestEvent.IGNORE_FAILURE_TEST_PREFIX, description);
  }

  @Override
  public void testStarted(Description description) {
    printSyncToken(TestEvent.START_TEST_PREFIX, description);
  }

  private void printSyncToken(String tokenPrefix, Description description) {
    StringBuilder builder = new StringBuilder();
    builder.append(tokenPrefix);
    // Beware, description.getTestClass may be null. 
    builder.append(description.getClassName());
    String methodName = description.getMethodName();
    if (methodName != null) {
      builder.append(':').append(methodName);
    }
    Runtime runtime = Runtime.getRuntime();
    builder.append(":memory=").append(runtime.totalMemory() - runtime.freeMemory());
    builder.append(":time=").append(System.currentTimeMillis());

    synchronized (this.myOutput) {
      this.myOutput.writeCommand(builder.toString());
      myOutput.flushSafe();
    }
  }
}
