package jetbrains.mps.baseLanguage.unitTest.execution.server;

/*Generated by MPS */

import org.junit.runner.notification.RunListener;
import org.junit.runner.Description;
import jetbrains.mps.baseLanguage.unitTest.execution.TestEventMessage;
import org.junit.runner.Result;
import org.junit.runner.notification.Failure;
import org.jetbrains.annotations.NotNull;

/**
 * JUnit test listener that spits out control sequences into supplied stream. 
 * These control sequences are for external process to receive JUnit events.
 * 
 * for the explicit contract for the events
 * see https://junit.org/junit4/javadoc/4.12/org/junit/runner/notification/RunListener.html
 */
public class DefaultRunListener extends RunListener {
  private final CommandOutputStream myOutput;

  public DefaultRunListener(CommandOutputStream out) {
    myOutput = out;
  }

  @Override
  public void testRunStarted(Description description) throws Exception {
    flush();
    printSyncToken(TestEventMessage.START_TESTRUN, description);
  }

  @Override
  public void testRunFinished(Result result) throws Exception {
    flush();
    Description fakeDescription = Description.createTestDescription(Object.class, "FAKEDESCRIPTION");
    printSyncToken(TestEventMessage.FINISH_TESTRUN, fakeDescription);
    flush();
  }

  private void flush() {
    System.out.flush();
    System.err.flush();
  }

  @Override
  public void testFinished(Description description) {
    System.out.flush();
    System.err.flush();
    printSyncToken(TestEventMessage.FINISH_TEST, description);
  }

  @Override
  public void testFailure(Failure failure) {
    failure.getException().printStackTrace(System.err);
    printSyncToken(TestEventMessage.FAILURE_TEST_BEGIN, failure.getDescription());
  }

  @Override
  public void testAssumptionFailure(Failure failure) {
    failure.getException().printStackTrace(System.err);
    System.err.flush();
    printSyncToken(TestEventMessage.ASSUMPTION_FAILURE_TEST_PREFIX, failure.getDescription());
  }

  @Override
  public void testIgnored(Description description) {
    System.err.flush();
    printSyncToken(TestEventMessage.IGNORE_FAILURE_TEST_PREFIX, description);
  }

  @Override
  public void testStarted(Description description) {
    printSyncToken(TestEventMessage.START_TEST, description);
  }

  private void printSyncToken(@NotNull String tokenPrefix, @NotNull Description description) {
    StringBuilder builder = new StringBuilder();
    builder.append(tokenPrefix);
    // Beware, description.getTestClass may be null. 
    builder.append(description.getClassName());
    String methodName = description.getMethodName();
    if (methodName != null) {
      builder.append(':').append(methodName);
    }
    Runtime runtime = Runtime.getRuntime();
    builder.append(":memory=").append(runtime.totalMemory() - runtime.freeMemory());
    builder.append(":time=").append(System.currentTimeMillis());

    synchronized (myOutput) {
      myOutput.writeCommand(builder.toString());
      myOutput.flushSafe();
    }
  }
}
