package jetbrains.mps.baseLanguage.unitTest.execution.client;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.core.behavior.INamedConcept__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NonNls;
import jetbrains.mps.util.NameUtil;

/*package*/ class GeneratorTestWrapper extends AbstractTestWrapper<SNode> {
  private final String myQualifiedName;
  private final List<ITestNodeWrapper> myMethods;

  public GeneratorTestWrapper(@NotNull SNode node) {
    super(node, true, true);
    myQualifiedName = INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(node);
    myMethods = ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x68015e26cc4d49dbL, 0x8715b643faea1769L, 0x7b1db36ecf092beL, 0x7b1db36ecf0d067L, "tests"))).select(new ISelector<SNode, AbstractTestWrapper<SNode>>() {
      public AbstractTestWrapper<SNode> select(SNode it) {
        return new AbstractTestWrapper<SNode>(it, true, true) {
          public boolean isTestCase() {
            return false;
          }

          @Nullable
          @Override
          public ITestNodeWrapper getTestCase() {
            return GeneratorTestWrapper.this;
          }

          @NonNls
          public String getName() {
            return "assertion";
          }

        };
      }
    }).ofType(ITestNodeWrapper.class).toListSequence();
  }

  public boolean isTestCase() {
    return true;
  }

  @Override
  public String getName() {
    return NameUtil.shortNameFromLongName(myQualifiedName);
  }

  @Override
  public String getFqName() {
    return myQualifiedName;
  }

  @NotNull
  @Override
  public Iterable<ITestNodeWrapper> getTestMethods() {
    return myMethods;
  }
}
