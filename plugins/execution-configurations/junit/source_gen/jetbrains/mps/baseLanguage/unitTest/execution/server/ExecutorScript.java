package jetbrains.mps.baseLanguage.unitTest.execution.server;

/*Generated by MPS */

import org.jetbrains.annotations.Nullable;
import jetbrains.mps.tool.common.ScriptData;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.Collection;
import org.jdom.Element;

/**
 * Set of test executor arguments to get serialized for inter-process communication
 */
public final class ExecutorScript {
  @Nullable
  private ScriptData myEnvironmentStartupData;
  private final List<ExecutorScript.TestRecord> myTests = new ArrayList<ExecutorScript.TestRecord>();

  /**
   * Invoked by code that knows which tests it needs to execute. Information about this tests is persisted and utilized by out-of-process
   * executor to load proper test classes and run them with JUnit.
   */
  public void addTest(ITestNodeWrapper testWrap) {
    // XXX have to tell test class from test method here 
    PersistenceFacade pf = PersistenceFacade.getInstance();

    final String testModule = pf.asString(testWrap.getTestNodeModule());
    ExecutorScript.TestRecord testModuleRecord = null;
    for (ExecutorScript.TestRecord tr : ListSequence.fromList(myTests)) {
      if (testModule.equals(tr.myTestModule)) {
        testModuleRecord = tr;
        break;
      }
    }
    if (testModuleRecord == null) {
      testModuleRecord = new ExecutorScript.TestRecord(testModule);
      myTests.add(testModuleRecord);
    }

    testModuleRecord.add(testWrap.getFqName(), pf.asString(testWrap.getNodePointer()));
  }

  public Collection<ExecutorScript.TestRecord> getTests() {
    return myTests;
  }

  public ScriptData addStartupArguments() {
    myEnvironmentStartupData = new ScriptData();
    return myEnvironmentStartupData;
  }

  @Nullable
  public ScriptData getStartupArguments() {
    return myEnvironmentStartupData;
  }

  public void write(Element root) {
    for (ExecutorScript.TestRecord r : ListSequence.fromList(myTests)) {
      Element module = new Element("module");
      module.setAttribute("ptr", r.myTestModule);
      for (int i = 0; i < r.myTestQualifiedName.size(); i++) {
        Element elem = new Element("test");
        elem.setAttribute("fqn", r.myTestQualifiedName.get(i));
        elem.setAttribute("node", r.myTestNode.get(i));
        module.addContent(elem);
      }
      root.addContent(module);
    }
    if (myEnvironmentStartupData != null) {
      myEnvironmentStartupData.write(root);
    }
  }

  public void read(Element root) {
    for (Element me : ListSequence.fromList(root.getChildren("module"))) {
      ExecutorScript.TestRecord tr = new ExecutorScript.TestRecord(me.getAttributeValue("ptr"));
      myTests.add(tr);
      for (Element te : ListSequence.fromList(me.getChildren("test"))) {
        tr.add(te.getAttributeValue("fqn"), te.getAttributeValue("node"));
      }
    }
    myEnvironmentStartupData = new ScriptData();
    myEnvironmentStartupData.read(root);
  }

  /*package*/ static final class TestRecord {
    /*package*/ final String myTestModule;
    /*package*/ final List<String> myTestNode = new ArrayList<String>();
    /*package*/ final List<String> myTestQualifiedName = new ArrayList<String>();

    /*package*/ TestRecord(String testModule) {
      myTestModule = testModule;
    }

    /*package*/ void add(String fqName, String testNodePointer) {
      myTestQualifiedName.add(fqName);
      myTestNode.add(testNodePointer);
    }
  }
}
