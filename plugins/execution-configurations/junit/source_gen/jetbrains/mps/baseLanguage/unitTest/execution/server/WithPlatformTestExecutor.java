package jetbrains.mps.baseLanguage.unitTest.execution.server;

/*Generated by MPS */

import org.jdom.Document;
import jetbrains.mps.tool.common.JDOMUtil;
import java.io.File;
import jetbrains.mps.util.test.CachesUtil;
import jetbrains.mps.tool.environment.Environment;
import jetbrains.mps.tool.environment.IdeaEnvironment;
import jetbrains.mps.tool.common.ScriptData;
import jetbrains.mps.tool.environment.EnvironmentConfig;
import org.apache.log4j.Logger;
import jetbrains.mps.tool.common.RepositoryDescriptor;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.MapSequence;

/**
 * Command-line front-end to launch MPS tests that need MPS environment (ITestable, incliding BTestCase, and JUnit3/JUnit4 ClassConcept with respective annotation/superclass) 
 * 
 * FIXME At the moment, starts MPS on top of IDEA platform with no explicitly specified plugins (effectively means any available). 
 *       Would be great to configure that.
 */
public class WithPlatformTestExecutor extends DefaultTestExecutor {
  private static final String PATH_MACRO_PREFIX = "path.macro.";

  public WithPlatformTestExecutor(TestsContributor testsContributor) {
    super(testsContributor);
  }

  /**
   * Called when ITestCase is executed (except for BTestCase)
   */
  public static void main(String[] args) throws Exception {
    ExecutorScript execScript = new ExecutorScript();
    Document scriptDoc = JDOMUtil.loadDocument(new File(args[0]));
    execScript.read(scriptDoc.getRootElement());
    if (execScript.getStartupArguments() == null) {
      throw new RuntimeException("Need MPS startup arguments to launch tests that require MPS environment");
    }

    CachesUtil.setupCaches();
    Environment env = startIdea(execScript.getStartupArguments());

    //  Instead of WithPlatformTestExecutor+TestContributor, could use Suite/ParentRunner without need to wrap my runners into Request (much like MpsTestsSuite does) 
    WithPlatformTestExecutor executor = new WithPlatformTestExecutor(new ScriptTestContributor(env, execScript));
    try {
      executor.run();
    } finally {
      env.dispose();
      CachesUtil.cleanupCaches();
      executor.exit();
    }
  }

  /*package*/ static IdeaEnvironment startIdea(ScriptData startupArguments) {

    // XXX would be great to have this code as part of init() method, but it's too much of refactoring now. Shall drop init/dispose of TestExecutor. 
    EnvironmentConfig cfg = EnvironmentConfig.defaultConfigNoPluginsSpecified();
    // Same code is in MpsWorker, we'd better share it 
    // FIXME Though technically dependency to MpsWorker (j.m.tool.builder) is possible here, I don't want it yet as I plan to split Ant/JUnit stuff from environment-related stuff there. 
    Logger.getRootLogger().setLevel(startupArguments.getLogLevel());
    RepositoryDescriptor rd = startupArguments.getRepo();
    if (rd != null) {
      for (String f : rd.folders) {
        // MpsWorker does existence check here, do I care? 
        cfg.addLib(f);
      }
      for (String f : rd.files) {
        cfg.addLib(f);
      }
    }
    for (IMapping<String, File> l : MapSequence.fromMap(startupArguments.getLibraries())) {
      cfg.addLib(l.value().getAbsolutePath());
    }
    for (String l : startupArguments.getLibraryJars()) {
      cfg.addLib(l);
    }
    for (IMapping<String, String> m : MapSequence.fromMap(startupArguments.getMacros())) {
      cfg.addMacro(m.key(), new File(m.value()));
    }
    IdeaEnvironment rv = new IdeaEnvironment(cfg);
    rv.init();
    return rv;
  }

}
