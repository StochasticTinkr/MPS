package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.execution.api.settings.IPersistentConfiguration;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.execution.api.settings.PersistentConfigurationContext;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import com.intellij.execution.configurations.RuntimeConfigurationError;
import org.jdom.Element;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.util.xmlb.XmlSerializer;
import com.intellij.openapi.util.InvalidDataException;
import jetbrains.mps.util.MacrosFactory;
import java.io.File;
import com.intellij.openapi.application.PathManager;
import java.nio.file.Paths;
import org.apache.log4j.Level;

public class MpsStartupSettings_Configuration implements IPersistentConfiguration {
  private static final Logger LOG = LogManager.getLogger(MpsStartupSettings_Configuration.class);
  @NotNull
  private MpsStartupSettings_Configuration.MyState myState = new MpsStartupSettings_Configuration.MyState();
  public void checkConfiguration(final PersistentConfigurationContext context) throws RuntimeConfigurationException {
    if (isEmptyString(this.getSettingsPath())) {
      throw new RuntimeConfigurationError("The settings path is empty");
    }
  }
  @Override
  public void writeExternal(Element element) throws WriteExternalException {
    element.addContent(XmlSerializer.serialize(myState));
  }
  @Override
  public void readExternal(Element element) throws InvalidDataException {
    if (element == null) {
      throw new InvalidDataException("Cant read " + this + ": element is null.");
    }
    XmlSerializer.deserializeInto(myState, (Element) element.getChildren().get(0));
  }
  public String getVmOptions() {
    return myState.myVmOptions;
  }
  public String getJrePath() {
    return myState.myJrePath;
  }
  public String getSettingsPath() {
    return myState.mySettingsPath;
  }
  public void setVmOptions(String value) {
    myState.myVmOptions = value;
  }
  public void setJrePath(String value) {
    myState.myJrePath = value;
  }
  public void setSettingsPath(String value) {
    myState.mySettingsPath = value;
  }
  private String expandPath(String path) {
    if ((path == null || path.length() == 0)) {
      return path;
    }
    return MacrosFactory.getGlobal().expandPath(path).replace(File.separator, "/");
  }
  private String shrinkPath(String path) {
    if ((path == null || path.length() == 0)) {
      return path;
    }
    return MacrosFactory.getGlobal().shrinkPath(path).replace(File.separator, "/");
  }
  public void setShrinkedSettingsPath(@NotNull String path) {
    this.setSettingsPath(shrinkPath(path));
  }
  private String getDefaultSettingsPath() {
    String defaultConfigPathFor = PathManager.getDefaultConfigPathFor("MPSInstanceRC");
    String defaultSettingsPath = Paths.get(defaultConfigPathFor).getParent().toAbsolutePath().toString();
    return shrinkPath(defaultSettingsPath);
  }
  public String getExpandedSettingsPath() {
    String notExpanded = this.getSettingsPath();
    return expandPath(notExpanded);
  }
  public File getPluginsPath() {
    String configPath = new File(getExpandedSettingsPath(), "config").getAbsolutePath();
    return new File(configPath, "plugins");
  }
  @Override
  public MpsStartupSettings_Configuration clone() {
    MpsStartupSettings_Configuration clone = createCloneTemplate();
    try {
      // beware, PersistenceConfiguration.this of newly created MyState instance would be the same as 
      // the value of myState, and != clone as regular Java passer-by would expect. 
      clone.myState = (MpsStartupSettings_Configuration.MyState) myState.clone();
    } catch (CloneNotSupportedException ex) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", ex);
      }
    }
    return clone;
  }
  public final class MyState {
    public String myVmOptions;
    public String myJrePath;
    public String mySettingsPath = getDefaultSettingsPath();
    public MyState() {
    }
    @Override
    public Object clone() throws CloneNotSupportedException {
      MpsStartupSettings_Configuration.MyState state = new MpsStartupSettings_Configuration.MyState();
      state.myVmOptions = myVmOptions;
      state.myJrePath = myJrePath;
      state.mySettingsPath = mySettingsPath;
      return state;
    }
  }
  public MpsStartupSettings_Configuration() {
  }
  public MpsStartupSettings_Configuration createCloneTemplate() {
    return new MpsStartupSettings_Configuration();
  }
  public MpsStartupSettings_Configuration_Editor getEditor() {
    return new MpsStartupSettings_Configuration_Editor();
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
