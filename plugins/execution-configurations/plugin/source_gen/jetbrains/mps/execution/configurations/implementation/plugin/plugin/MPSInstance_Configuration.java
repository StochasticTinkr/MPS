package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.execution.api.configurations.BaseMpsRunConfiguration;
import jetbrains.mps.execution.api.settings.IPersistentConfiguration;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.execution.api.settings.PersistentConfigurationContext;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import org.jdom.Element;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.openapi.util.InvalidDataException;
import com.intellij.openapi.project.Project;
import com.intellij.execution.configurations.ConfigurationFactory;
import org.jetbrains.annotations.Nullable;
import com.intellij.execution.configurations.RunProfileState;
import org.jetbrains.annotations.NotNull;
import com.intellij.execution.Executor;
import com.intellij.execution.runners.ExecutionEnvironment;
import com.intellij.execution.ExecutionException;
import com.intellij.openapi.options.SettingsEditor;
import com.intellij.execution.configurations.ConfigurationPerRunnerSettings;
import com.intellij.execution.runners.ProgramRunner;
import com.intellij.execution.configurations.ConfigurationInfoProvider;
import jetbrains.mps.execution.api.settings.SettingsEditorEx;
import jetbrains.mps.ide.project.ProjectHelper;

public class MPSInstance_Configuration extends BaseMpsRunConfiguration implements IPersistentConfiguration {
  private static final Logger LOG = LogManager.getLogger(MPSInstance_Configuration.class);
  private MpsStartupSettings_Configuration myMpsSettings = new MpsStartupSettings_Configuration();
  private DeployPluginsSettings_Configuration myPluginsSettings = new DeployPluginsSettings_Configuration(this.getProject());
  public void checkConfiguration(final PersistentConfigurationContext context) throws RuntimeConfigurationException {
    this.getMpsSettings().checkConfiguration(context);
    this.getPluginsSettings().checkConfiguration(context);
  }
  @Override
  public void writeExternal(Element element) throws WriteExternalException {
    {
      Element fieldElement = new Element("myMpsSettings");
      myMpsSettings.writeExternal(fieldElement);
      element.addContent(fieldElement);
    }
    {
      Element fieldElement = new Element("myPluginsSettings");
      myPluginsSettings.writeExternal(fieldElement);
      element.addContent(fieldElement);
    }
  }
  @Override
  public void readExternal(Element element) throws InvalidDataException {
    if (element == null) {
      throw new InvalidDataException("Cant read " + this + ": element is null.");
    }
    {
      Element fieldElement = element.getChild("myMpsSettings");
      if (fieldElement != null) {
        myMpsSettings.readExternal(fieldElement);
      } else {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Element " + "myMpsSettings" + " in " + this.getClass().getName() + " was null.");
        }
      }
    }
    {
      Element fieldElement = element.getChild("myPluginsSettings");
      if (fieldElement != null) {
        myPluginsSettings.readExternal(fieldElement);
      } else {
        if (LOG.isDebugEnabled()) {
          LOG.debug("Element " + "myPluginsSettings" + " in " + this.getClass().getName() + " was null.");
        }
      }
    }
  }
  public MpsStartupSettings_Configuration getMpsSettings() {
    return myMpsSettings;
  }
  public DeployPluginsSettings_Configuration getPluginsSettings() {
    return myPluginsSettings;
  }
  @Override
  public MPSInstance_Configuration clone() {
    MPSInstance_Configuration clone = createCloneTemplate();
    clone.myMpsSettings = (MpsStartupSettings_Configuration) myMpsSettings.clone();
    clone.myPluginsSettings = (DeployPluginsSettings_Configuration) myPluginsSettings.clone();
    return clone;
  }
  public MPSInstance_Configuration(Project project, ConfigurationFactory factory, String name) {
    super(project, factory, name);
  }
  @Nullable
  public RunProfileState getState(@NotNull Executor executor, @NotNull ExecutionEnvironment environment) throws ExecutionException {
    return new MPSInstance_Configuration_RunProfileState(this, executor, environment);
  }
  @Nullable
  public SettingsEditor<ConfigurationPerRunnerSettings> getRunnerSettingsEditor(ProgramRunner runner) {
    return null;
  }
  public ConfigurationPerRunnerSettings createRunnerSettings(ConfigurationInfoProvider provider) {
    return null;
  }
  public SettingsEditorEx<MPSInstance_Configuration> getConfigurationEditor() {
    return (SettingsEditorEx<MPSInstance_Configuration>) getEditor();
  }
  public MPSInstance_Configuration createCloneTemplate() {
    return (MPSInstance_Configuration) super.clone();
  }
  public SettingsEditorEx<? extends IPersistentConfiguration> getEditor() {
    return new MPSInstance_Configuration_Editor(myMpsSettings.getEditor(), myPluginsSettings.getEditor());
  }
  @Override
  public void checkConfiguration() throws RuntimeConfigurationException {
    final jetbrains.mps.project.Project mpsProject = ProjectHelper.fromIdeaProject(getProject());
    checkConfiguration(new PersistentConfigurationContext() {
      public jetbrains.mps.project.Project getProject() {
        return mpsProject;
      }
    });
  }
  @Override
  public boolean canExecute(String executorId) {
    return MPSInstance_Configuration_RunProfileState.canExecute(executorId);
  }
  public Object[] createDeployPluginsTask() {
    return new Object[]{this.getPluginsSettings().getPluginsListToDeploy(), this.getMpsSettings().getPluginsPath()};
  }
}
