package jetbrains.mps.baseLanguage.execution.api;

/*Generated by MPS */

import jetbrains.mps.execution.api.settings.IPersistentConfiguration;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.execution.api.settings.PersistentConfigurationContext;
import com.intellij.execution.configurations.RuntimeConfigurationException;
import org.jdom.Element;
import com.intellij.openapi.util.WriteExternalException;
import com.intellij.util.xmlb.XmlSerializer;
import com.intellij.openapi.util.InvalidDataException;
import org.apache.log4j.Level;
import com.intellij.openapi.project.Project;

public class JavaRunParameters1_Configuration implements IPersistentConfiguration {
  private static final Logger LOG = LogManager.getLogger(JavaRunParameters1_Configuration.class);
  @NotNull
  private JavaRunParameters1_Configuration.MyState myState = new JavaRunParameters1_Configuration.MyState();
  public void checkConfiguration(final PersistentConfigurationContext context) throws RuntimeConfigurationException {
  }
  @Override
  public void writeExternal(Element element) throws WriteExternalException {
    element.addContent(XmlSerializer.serialize(myState));
  }
  @Override
  public void readExternal(Element element) throws InvalidDataException {
    if (element == null) {
      throw new InvalidDataException("Cant read " + this + ": element is null.");
    }
    XmlSerializer.deserializeInto(myState, (Element) element.getChildren().get(0));
  }
  public JavaRunParameters getJavaRunParameters() {
    return myState.myJavaRunParameters;
  }
  public void setJavaRunParameters(JavaRunParameters value) {
    myState.myJavaRunParameters = value;
  }
  @Override
  public JavaRunParameters1_Configuration clone() {
    JavaRunParameters1_Configuration clone = null;
    try {
      clone = createCloneTemplate();
      clone.myState = (JavaRunParameters1_Configuration.MyState) myState.clone();
      return clone;
    } catch (CloneNotSupportedException ex) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", ex);
      }
    }
    return clone;
  }
  public class MyState {
    public JavaRunParameters myJavaRunParameters = new JavaRunParameters(null, null, null, null, false);
    public MyState() {
    }
    @Override
    public Object clone() throws CloneNotSupportedException {
      JavaRunParameters1_Configuration.MyState state = new JavaRunParameters1_Configuration.MyState();
      if (myJavaRunParameters != null) {
        state.myJavaRunParameters = myJavaRunParameters.clone();
      }
      return state;
    }
  }
  public JavaRunParameters1_Configuration(Project project) {
    myProject = project;
  }
  private final Project myProject;
  public JavaRunParameters1_Configuration createCloneTemplate() {
    return new JavaRunParameters1_Configuration(myProject);
  }
  public JavaRunParameters1_Configuration_Editor getEditor() {
    return new JavaRunParameters1_Configuration_Editor(myProject);
  }
}
