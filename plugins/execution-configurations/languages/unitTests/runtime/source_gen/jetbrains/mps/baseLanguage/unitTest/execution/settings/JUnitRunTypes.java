package jetbrains.mps.baseLanguage.unitTest.execution.settings;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.ArrayList;
import jetbrains.mps.project.SModuleOperations;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.execution.lib.PointerUtils;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestNodeWrapperFactory;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.progress.ProgressMonitorAdapter;

public enum JUnitRunTypes {
  PROJECT() {
    @Override
    protected List<ITestNodeWrapper> doCollect(JUnitSettings_Configuration configuration, MPSProject project, ProgressMonitor monitor) {
      return new ProjectTestCollector(project, monitor, false).collect();
    }
    @Override
    public String check(JUnitSettings_Configuration configuration, MPSProject project) {
      // #check is used nowhere 
      // TODO: use it 
      if (!(this.hasTests(configuration, project))) {
        return "Project does not contain tests.";
      }
      return null;
    }
    public boolean hasTests(JUnitSettings_Configuration configuration, MPSProject project) {
      return ListSequence.fromList(new ProjectTestCollector(project, null, true).collect()).isNotEmpty();
    }

  },
  MODULE() {
    @Override
    protected List<ITestNodeWrapper> doCollect(JUnitSettings_Configuration configuration, MPSProject project, ProgressMonitor monitor) {
      SModule module = TestUtils.getModule(project, configuration.getModule());
      if (module == null) {
        return ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
      }
      return new ModuleTestCollector(module, monitor, false).collect();
    }
    public String check(JUnitSettings_Configuration configuration, MPSProject project) {
      if (isEmptyString(configuration.getModule())) {
        return "Module is not selected.";
      }
      SModule module = TestUtils.getModule(project, configuration.getModule());
      if (module == null) {
        return "The module " + configuration.getModule() + " does not exist in the project " + project;
      }
      if (!(SModuleOperations.isCompileInMps(module))) {
        return "The module's " + module + " compile output is not managed by MPS.";
      }
      if (!(this.hasTests(configuration, project))) {
        return "No tests found in module " + configuration.getModule() + "";
      }
      return null;
    }
    public boolean hasTests(JUnitSettings_Configuration configuration, MPSProject project) {
      SModule module = TestUtils.getModule(project, configuration.getModule());
      if (module == null) {
        return false;
      }
      return ListSequence.fromList(new ModuleTestCollector(module, null, true).collect()).isNotEmpty();
    }

  },
  MODEL() {
    @Override
    protected List<ITestNodeWrapper> doCollect(JUnitSettings_Configuration configuration, MPSProject project, ProgressMonitor monitor) {
      SModel model = TestUtils.getModel(project, configuration.getModel());
      if (model == null) {
        return ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
      }
      return new ModelTestCollector(model, monitor, false).collect();
    }
    public String check(JUnitSettings_Configuration configuration, MPSProject project) {
      if (configuration.getModel() == null) {
        return "Model is not selected.";
      }
      SModel model = TestUtils.getModel(project, configuration.getModel());
      if (model == null) {
        return "Could not find model " + configuration.getModel();
      }
      SModule module = model.getModule();
      if (!(SModuleOperations.isCompileInMps(module))) {
        return "The module's " + module + " (which is hosting the model " + model + ") compile output is not managed by MPS.";
      }
      if (!(this.hasTests(configuration, project))) {
        return "No tests found in model " + configuration.getModel() + ".";
      }
      return null;
    }
    public boolean hasTests(JUnitSettings_Configuration configuration, MPSProject project) {
      SModel model = TestUtils.getModel(project, configuration.getModel());
      if (model == null) {
        return false;
      }
      return ListSequence.fromList(new ModelTestCollector(model, null, true).collect()).isNotEmpty();
    }

  },
  NODE() {
    @Override
    protected List<ITestNodeWrapper> doCollect(JUnitSettings_Configuration configuration, MPSProject project, ProgressMonitor monitor) {
      return TestUtils.wrapPointerStrings(project, configuration.getTestCases());
    }
    public String check(JUnitSettings_Configuration configuration, MPSProject project) {
      if ((configuration.getTestCases() == null || configuration.getTestCases().isEmpty())) {
        return "Classes list is empty.";
      }
      if (configuration.getTestCases() != null) {
        for (String testCase : configuration.getTestCases()) {
          SNodeReference pointer = PointerUtils.stringToPointer(testCase);
          if (pointer == null || pointer.resolve(project.getRepository()) == null || TestNodeWrapperFactory.tryToWrap(pointer.resolve(project.getRepository())) == null) {
            return "Could not find test case for id " + testCase + ".";
          }
        }
      }
      return null;
    }
    public boolean hasTests(JUnitSettings_Configuration configuration, MPSProject project) {
      return ListSequence.fromList(this.doCollect(configuration, project, new EmptyProgressMonitor())).isNotEmpty();
    }

  },
  METHOD() {
    @Override
    protected List<ITestNodeWrapper> doCollect(JUnitSettings_Configuration configuration, MPSProject project, ProgressMonitor monitor) {
      return TestUtils.wrapPointerStrings(project, configuration.getTestMethods());
    }
    @Override
    public String check(JUnitSettings_Configuration configuration, MPSProject project) {
      if ((configuration.getTestMethods() == null || configuration.getTestMethods().isEmpty())) {
        return "Methods list is empty.";
      }
      if (configuration.getTestMethods() != null) {
        for (String method : configuration.getTestMethods()) {
          SNodeReference pointer = PointerUtils.stringToPointer(method);
          if (pointer == null || pointer.resolve(project.getRepository()) == null || TestNodeWrapperFactory.tryToWrap(pointer.resolve(project.getRepository())) == null) {
            return "Could not find test method for id " + method + ".";
          }
        }
      }
      return null;
    }
    @Override
    public boolean hasTests(JUnitSettings_Configuration configuration, MPSProject project) {
      return ListSequence.fromList(this.doCollect(configuration, project, new EmptyProgressMonitor())).isNotEmpty();
    }

  };

  private JUnitRunTypes() {
  }

  public final List<ITestNodeWrapper> collect(final JUnitSettings_Configuration configuration, final MPSProject project) {
    final Wrappers._T<List<ITestNodeWrapper>> result = new Wrappers._T<List<ITestNodeWrapper>>();
    ProgressManager.getInstance().run(new Task.Modal(project.getProject(), "Collecting Tests to Run", true) {
      @Override
      public void run(@NotNull ProgressIndicator indicator) {
        final ProgressMonitor monitor = new ProgressMonitorAdapter(indicator);
        project.getModelAccess().runReadAction(new Runnable() {
          public void run() {
            result.value = ListSequence.fromList(doCollect(configuration, project, monitor)).toListSequence();
          }
        });
      }
    });
    return result.value;
  }

  protected abstract List<ITestNodeWrapper> doCollect(JUnitSettings_Configuration configuration, @NotNull MPSProject project, ProgressMonitor monitor);

  public abstract boolean hasTests(JUnitSettings_Configuration configuration, @NotNull MPSProject project);

  public abstract String check(JUnitSettings_Configuration configuration, @NotNull MPSProject project);
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
