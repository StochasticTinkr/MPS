package jetbrains.mps.baseLanguage.unitTest.execution.settings;

/*Generated by MPS */

import jetbrains.mps.execution.lib.ui.ListPanel;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestNodeWrapperFactory;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import java.util.List;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.ide.project.ProjectHelper;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.Sequence;
import java.util.Set;
import org.jetbrains.mps.openapi.module.FindUsagesFacade;
import jetbrains.mps.project.GlobalScope;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import com.intellij.openapi.project.Project;

public class TestListPanel extends ListPanel<ITestNodeWrapper> {
  private boolean myIsTestMethods;

  @Nullable
  @Override
  protected ITestNodeWrapper wrap(SNode node) {
    return TestNodeWrapperFactory.tryToWrap(node);
  }

  @Override
  protected SNodeReference unwrap(ITestNodeWrapper element) {
    return element.getNodePointer();
  }

  @Override
  protected String getFqName(ITestNodeWrapper element) {
    return element.getCachedFqName();
  }

  @Override
  protected void collectCandidates(final ProgressMonitor progress) {
    final List<SNode> nodesList = new ArrayList<SNode>();
    final SRepository repo = ProjectHelper.fromIdeaProject(myProject).getRepository();
    repo.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        for (SAbstractConcept c : Sequence.fromIterable(TestNodeWrapperFactory.getWrappedRootConcepts())) {
          Set<SNode> usages = FindUsagesFacade.getInstance().findInstances(GlobalScope.getInstance(), Collections.singleton(c), false, progress);
          ListSequence.fromList(nodesList).addSequence(SetSequence.fromSet(usages));
        }
      }
    });

    if (myIsTestMethods) {
      final List<ITestNodeWrapper> methodsList = ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
      repo.getModelAccess().runReadAction(new Runnable() {
        public void run() {
          for (SNode testCase : nodesList) {
            ITestNodeWrapper wrapper = TestNodeWrapperFactory.tryToWrap(testCase);
            if (wrapper == null) {
              continue;
            }
            ListSequence.fromList(methodsList).addSequence(Sequence.fromIterable(wrapper.getTestMethods()));
          }
        }
      });
      synchronized (myLock) {
        ListSequence.fromList(myCandidates).clear();
        ListSequence.fromList(myCandidates).addSequence(ListSequence.fromList(methodsList));
      }
    } else {
      repo.getModelAccess().runReadAction(new Runnable() {
        public void run() {
          synchronized (myLock) {
            ListSequence.fromList(myCandidates).clear();
            ListSequence.fromList(myCandidates).addSequence(ListSequence.fromList(nodesList).select(new ISelector<SNode, ITestNodeWrapper>() {
              public ITestNodeWrapper select(SNode it) {
                return wrap(it);
              }
            }).where(new IWhereFilter<ITestNodeWrapper>() {
              public boolean accept(ITestNodeWrapper it) {
                return it != null;
              }
            }));
          }
        }
      });
    }
  }

  public TestListPanel(Project project, boolean isTestMethods) {
    super(project, "Tests");
    myIsTestMethods = isTestMethods;
    super.setData(ListSequence.fromList(new ArrayList<ITestNodeWrapper>()));
  }
}
