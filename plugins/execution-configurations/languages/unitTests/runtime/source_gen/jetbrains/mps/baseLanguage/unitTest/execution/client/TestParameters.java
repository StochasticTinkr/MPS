package jetbrains.mps.baseLanguage.unitTest.execution.client;

/*Generated by MPS */

import org.jetbrains.mps.annotations.Immutable;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;
import jetbrains.mps.baseLanguage.execution.api.Java_Command;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.MPSModuleRepository;

@Immutable
public final class TestParameters {
  private final String myExecutorFqName;
  private final List<String> myJvmArgs;
  private final List<String> myClassPath;

  public TestParameters(String executorFqName, List<String> classPath, List<String> jvmArgs) {
    myExecutorFqName = executorFqName;
    myClassPath = classPath;
    myJvmArgs = jvmArgs;
  }

  public TestParameters(String executorFqName, List<String> classPath) {
    this(executorFqName, classPath, ListSequence.fromList(new LinkedList<String>()));
  }

  public String getExecutorFqName() {
    return myExecutorFqName;
  }

  public List<String> getJvmArgs() {
    return ListSequence.fromList(myJvmArgs).asUnmodifiable();
  }

  public List<String> getClassPath() {
    return ListSequence.fromList(myClassPath).asUnmodifiable();
  }

  public static final TestParameters DEFAULT = calcDefault();

  public static TestParameters calcDefault() {
    List<String> classPath = Java_Command.getClasspath(PersistenceFacade.getInstance().createModuleReference("8b958198-128f-4136-80e5-ca9777caa869(jetbrains.mps.baseLanguage.unitTest.execution.startup)").resolve(MPSModuleRepository.getInstance()));
    return new TestParameters("jetbrains.mps.baseLanguage.unitTest.execution.server.DefaultTestExecutor", classPath);
  }
}
