package jetbrains.mps.baseLanguage.unitTest.execution.settings;

/*Generated by MPS */

import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.baseLanguage.unitTest.execution.client.ITestNodeWrapper;
import jetbrains.mps.project.Project;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISequenceClosure;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.closures.runtime.YieldingIterator;
import jetbrains.mps.execution.lib.PointerUtils;
import jetbrains.mps.baseLanguage.unitTest.execution.client.TestNodeWrapperFactory;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.annotations.Nls;
import jetbrains.mps.smodel.ModuleRepositoryFacade;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SNodeReference;

/**
 * 
 * @deprecated no need in this util class
 */
@Deprecated
public class TestUtils {
  @NotNull
  public static List<ITestNodeWrapper> wrapPointerStrings(final Project mpsProject, @Nullable final Iterable<String> strings) {
    if (strings == null) {
      return ListSequence.fromList(new ArrayList<ITestNodeWrapper>());
    }
    return Sequence.fromIterable(Sequence.fromClosure(new ISequenceClosure<ITestNodeWrapper>() {
      public Iterable<ITestNodeWrapper> iterable() {
        return new Iterable<ITestNodeWrapper>() {
          public Iterator<ITestNodeWrapper> iterator() {
            return new YieldingIterator<ITestNodeWrapper>() {
              private int __CP__ = 0;
              protected boolean moveToNext() {
__loop__:
                do {
__switch__:
                  switch (this.__CP__) {
                    case -1:
                      assert false : "Internal error";
                      return false;
                    case 2:
                      this._2_pointerString_it = strings.iterator();
                    case 3:
                      if (!(this._2_pointerString_it.hasNext())) {
                        this.__CP__ = 1;
                        break;
                      }
                      this._2_pointerString = this._2_pointerString_it.next();
                      this.__CP__ = 4;
                      break;
                    case 7:
                      if (_6_node != null) {
                        this.__CP__ = 8;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 11:
                      if (_10_wrapper != null) {
                        this.__CP__ = 12;
                        break;
                      }
                      this.__CP__ = 3;
                      break;
                    case 13:
                      this.__CP__ = 3;
                      this.yield(_10_wrapper);
                      return true;
                    case 0:
                      this.__CP__ = 2;
                      break;
                    case 4:
                      this._6_node = check_6qi07j_a0a0a0a0a0b0a(PointerUtils.stringToPointer(_2_pointerString), mpsProject);
                      this.__CP__ = 7;
                      break;
                    case 8:
                      this._10_wrapper = TestNodeWrapperFactory.tryToWrap(_6_node);
                      this.__CP__ = 11;
                      break;
                    case 12:
                      this.__CP__ = 13;
                      break;
                    default:
                      break __loop__;
                  }
                } while (true);
                return false;
              }
              private String _2_pointerString;
              private Iterator<String> _2_pointerString_it;
              private SNode _6_node;
              private ITestNodeWrapper _10_wrapper;
            };
          }
        };
      }
    })).toListSequence();
  }

  @Nullable
  public static SModel getModel(Project mpsProject, @Nls String modelName) {
    if ((modelName == null || modelName.length() == 0)) {
      return null;
    }
    return new ModuleRepositoryFacade(mpsProject).getModelByName(modelName);
  }

  @Nullable
  public static SModule getModule(Project mpsProject, @Nls String moduleName) {
    if ((moduleName == null || moduleName.length() == 0)) {
      return null;
    }
    return new ModuleRepositoryFacade(mpsProject).getModuleByName(moduleName);
  }
  private static SNode check_6qi07j_a0a0a0a0a0b0a(SNodeReference checkedDotOperand, Project mpsProject) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(mpsProject.getRepository());
    }
    return null;
  }
}
