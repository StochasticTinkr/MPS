package jetbrains.mps.baseLanguage.unitTest.execution.server;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.junit.runner.JUnitCore;
import org.junit.runner.Request;
import jetbrains.mps.TestMode;
import jetbrains.mps.RuntimeFlags;
import org.jetbrains.annotations.NotNull;
import org.junit.runner.notification.RunListener;

public class TestInProcessExecutor extends AbstractTestExecutor {
  private static final Logger LOG = LogManager.getLogger(TestInProcessExecutor.class);

  public TestInProcessExecutor(TestsContributor testsContributor) {
    super(testsContributor);
  }

  @Override
  public void init() {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Initializing " + getClass().getSimpleName());
    }
  }

  @Override
  public void dispose() {
    if (LOG.isDebugEnabled()) {
      LOG.debug("Disposing " + getClass().getSimpleName());
    }
  }

  @Override
  protected void doExecute(JUnitCore core, Iterable<Request> requests) throws Throwable {
    TestMode oldTestMode = RuntimeFlags.getTestMode();
    try {
      RuntimeFlags.setTestMode(TestMode.IN_PROCESS);
      super.doExecute(core, requests);
      // there used to be distinct catch StoppedByUserException, which have been moved to superclass as I don't   
      // see why it's specific to this executor only 
    } finally {
      RuntimeFlags.setTestMode(oldTestMode);
    }
  }

  @NotNull
  @Override
  protected RunListener createListener(Iterable<Request> requests) {
    return new DefaultRunListener(new CommandOutputStream(System.out));
  }
}
