package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import java.io.PrintStream;
import java.io.PipedInputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.BufferedOutputStream;
import java.io.PipedOutputStream;
import java.io.InputStream;
import com.intellij.util.WaitFor;

public class FakeProcess extends Process {
  public static final int TERMINATION_CODE = 137;

  private final PrintStream myOldOut;
  private final PrintStream myOldErr;
  private final PipedInputStream myInputOut = new PipedInputStream();
  private final PipedInputStream myInputErr = new PipedInputStream();
  private int myExitCode = -1;
  private boolean myDestroyed = false;

  public FakeProcess() {
    myOldOut = System.out;
    myOldErr = System.err;
  }

  public void init() throws IOException {
    System.setOut(createCompositeWrapper(myInputOut, myOldOut));
    System.setErr(createCompositeWrapper(myInputErr, myOldErr));
  }

  private PrintStream createCompositeWrapper(PipedInputStream pipeInput, PrintStream oldOut) throws IOException {
    OutputStream newOut = new BufferedOutputStream(new PipedOutputStream(pipeInput));
    return new PrintStream(new CompositeStream(oldOut, newOut), true);
  }

  public void setExitCode(int code) {
    myExitCode = code;
  }

  public void destroy() {
    if (myDestroyed) {
      throw new IllegalStateException("Already destroyed");
    }
    myDestroyed = true;
    closeOutAndErr();
  }

  private void closeOutAndErr() {
    PrintStream newOut = System.out;
    PrintStream newErr = System.err;
    System.setOut(myOldOut);
    System.setErr(myOldErr);
    newOut.close();
    newErr.close();
  }

  public int exitValue() {
    return myExitCode;
  }

  public InputStream getErrorStream() {
    return myInputErr;
  }

  public InputStream getInputStream() {
    return myInputOut;
  }

  public OutputStream getOutputStream() {
    throw new UnsupportedOperationException("No output stream here");
  }

  public int waitFor() throws InterruptedException {
    new WaitFor() {
      protected boolean condition() {
        return myDestroyed;
      }
    };
    return myExitCode;
  }

  @Override
  public String toString() {
    return "Starting execution in-process";
  }
}
