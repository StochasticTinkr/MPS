package jetbrains.mps.execution.configurations.implementation.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.execution.lib.ui.ListPanel;
import org.jetbrains.mps.openapi.model.SNodeReference;
import com.intellij.openapi.project.Project;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import java.util.Set;
import org.jetbrains.mps.openapi.module.FindUsagesFacade;
import jetbrains.mps.project.GlobalScope;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.ide.platform.dialogs.choosers.NodeChooserDialog;
import java.util.List;
import jetbrains.mps.workbench.choose.nodes.BaseNodePointerModel;
import jetbrains.mps.workbench.choose.NodePointerNavigationItem;
import com.intellij.navigation.NavigationItem;
import org.jetbrains.mps.openapi.module.SearchScope;

public class PluginsListPanel extends ListPanel<SNodeReference> {

  public PluginsListPanel(Project p) {
    super(p, "Plugins to deploy");
  }
  @Override
  protected SNodeReference wrap(SNode node) {
    return new SNodePointer(node);
  }
  @Override
  protected SNodeReference unwrap(SNodeReference reference) {
    return reference;
  }
  @Override
  protected String getFqName(final SNodeReference element) {
    final Wrappers._T<String> fqName = new Wrappers._T<String>();
    final SRepository repo = ProjectHelper.toMPSProject(myProject).getRepository();
    repo.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        fqName.value = SPropertyOperations.getString(SLinkOperations.getTarget(((SNode) element.resolve(repo)), MetaAdapterFactory.getReferenceLink(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x5b7be37b4de9bb6eL, 0x5b7be37b4dee5919L, "plugin")), MetaAdapterFactory.getProperty(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x5b7be37b4de9bb74L, 0x5b7be37b4de9bb6fL, "id"));
      }
    });
    return fqName.value;
  }
  @Override
  protected void collectCandidates(final ProgressMonitor progress) {
    final SRepository repo = ProjectHelper.toMPSProject(myProject).getRepository();
    repo.getModelAccess().runReadAction(new Runnable() {
      public void run() {
        Set<SNode> usages = FindUsagesFacade.getInstance().findInstances(GlobalScope.getInstance(), Collections.singleton(MetaAdapterFactory.getConcept(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x5b7be37b4de9bb6eL, "jetbrains.mps.build.mps.structure.BuildMpsLayout_Plugin")), false, progress);
        synchronized (myLock) {
          ListSequence.fromList(myCandidates).clear();
          for (SNode node : SetSequence.fromSet(usages)) {
            ListSequence.fromList(myCandidates).addElement(new SNodePointer(node));
          }
        }
      }
    });
  }
  @Override
  public NodeChooserDialog createNodeChooserDialog(final List<SNodeReference> nodesList) {
    // todo: rewrite 
    return new NodeChooserDialog(myProject, new BaseNodePointerModel(myProject) {

      @Override
      public SNodeReference getModelObject(Object item) {
        if (item instanceof NodePointerNavigationItem) {
          return ((NodePointerNavigationItem) item).getNodePointer();
        }
        return super.getModelObject(item);
      }

      @Override
      public String doGetObjectName(SNodeReference reference) {
        SNode node = (SNode) reference.resolve(getProject().getRepository());
        return (node == null ? "null plugin" : SPropertyOperations.getString(SLinkOperations.getTarget(node, MetaAdapterFactory.getReferenceLink(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x5b7be37b4de9bb6eL, 0x5b7be37b4dee5919L, "plugin")), MetaAdapterFactory.getProperty(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x5b7be37b4de9bb74L, 0x5b7be37b4de9bb6fL, "id")));
      }

      @Override
      public NavigationItem doGetNavigationItem(SNodeReference nodeReference) {
        SNode node = nodeReference.resolve(getProject().getRepository());
        return (node == null ? super.doGetNavigationItem(nodeReference) : new NodePointerNavigationItem(node));
      }
      @Override
      public SNodeReference[] find(boolean checkboxState) {
        return ListSequence.fromList(nodesList).toGenericArray(SNodeReference.class);
      }
      @Override
      public SNodeReference[] find(SearchScope scope) {
        throw new UnsupportedOperationException("must not be used");
      }
    });
  }
}
