package jetbrains.mps.debugger.java.evaluation.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_DebuggedType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DoNotTransformAnnotation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DownCastToLowLevel = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Evaluator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EvaluatorConcept = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EvaluatorsSuperMethodCall = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EvaluatorsThisExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_GenerationHelperAnnotation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IEvaluatorConcept = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LowLevelVariable = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LowLevelVariableReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ToEvaluateAnnotation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UnitNode = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UnprocessedAnnotation = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0p.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_DebuggedType;
          }
          break;
        case 1:
          if (true) {
            return props_DoNotTransformAnnotation;
          }
          break;
        case 2:
          if (true) {
            return props_DownCastToLowLevel;
          }
          break;
        case 3:
          if (true) {
            return props_Evaluator;
          }
          break;
        case 4:
          if (true) {
            return props_EvaluatorConcept;
          }
          break;
        case 5:
          if (true) {
            return props_EvaluatorsSuperMethodCall;
          }
          break;
        case 6:
          if (true) {
            return props_EvaluatorsThisExpression;
          }
          break;
        case 7:
          if (true) {
            return props_GenerationHelperAnnotation;
          }
          break;
        case 8:
          if (true) {
            return props_IEvaluatorConcept;
          }
          break;
        case 9:
          if (true) {
            return props_LowLevelVariable;
          }
          break;
        case 10:
          if (true) {
            return props_LowLevelVariableReference;
          }
          break;
        case 11:
          if (true) {
            return props_ToEvaluateAnnotation;
          }
          break;
        case 12:
          if (true) {
            return props_UnitNode;
          }
          break;
        case 13:
          if (true) {
            return props_UnprocessedAnnotation;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0p = buildConceptIndices(MetaAdapterFactory.getConcept(0x7da4580f9d754603L, 0x816251a896d78375L, 0x3f11b1341fa25ed8L, "DebuggedType"), MetaAdapterFactory.getConcept(0x7da4580f9d754603L, 0x816251a896d78375L, 0x7eed83c2376f34a5L, "DoNotTransformAnnotation"), MetaAdapterFactory.getConcept(0x7da4580f9d754603L, 0x816251a896d78375L, 0x6dd9f7bd221bb1d5L, "DownCastToLowLevel"), MetaAdapterFactory.getConcept(0x7da4580f9d754603L, 0x816251a896d78375L, 0xbbe5b47d7cc5fa1L, "Evaluator"), MetaAdapterFactory.getConcept(0x7da4580f9d754603L, 0x816251a896d78375L, 0x53c5060c6b18d925L, "EvaluatorConcept"), MetaAdapterFactory.getConcept(0x7da4580f9d754603L, 0x816251a896d78375L, 0x53c5060c6b1ae1feL, "EvaluatorsSuperMethodCall"), MetaAdapterFactory.getConcept(0x7da4580f9d754603L, 0x816251a896d78375L, 0x53c5060c6b1ae1c6L, "EvaluatorsThisExpression"), MetaAdapterFactory.getConcept(0x7da4580f9d754603L, 0x816251a896d78375L, 0x17b1c8f7ef7ab40cL, "GenerationHelperAnnotation"), MetaAdapterFactory.getInterfaceConcept(0x7da4580f9d754603L, 0x816251a896d78375L, 0x7f4a99699cea367bL, "IEvaluatorConcept"), MetaAdapterFactory.getConcept(0x7da4580f9d754603L, 0x816251a896d78375L, 0x53c5060c6b18d926L, "LowLevelVariable"), MetaAdapterFactory.getConcept(0x7da4580f9d754603L, 0x816251a896d78375L, 0x7d9a547f857a394bL, "LowLevelVariableReference"), MetaAdapterFactory.getConcept(0x7da4580f9d754603L, 0x816251a896d78375L, 0x4135c73fbe7fc985L, "ToEvaluateAnnotation"), MetaAdapterFactory.getConcept(0x7da4580f9d754603L, 0x816251a896d78375L, 0x3c2f40ee0bb3cbf5L, "UnitNode"), MetaAdapterFactory.getConcept(0x7da4580f9d754603L, 0x816251a896d78375L, 0x50b810dd5c871ea2L, "UnprocessedAnnotation"));
}
