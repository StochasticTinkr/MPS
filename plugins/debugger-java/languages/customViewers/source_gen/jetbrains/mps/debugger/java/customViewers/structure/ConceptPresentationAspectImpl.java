package jetbrains.mps.debugger.java.customViewers.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_CanWrapHighLevelValue_ConceptFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomWatchable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomWatchablesContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetHighLevelValuePresentation_ConceptFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetHighLevelWatchablesBlock_ConceptFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HighLevelCustomViewer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HighLevelValue_ConceptFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HighLevelWatchableCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToProcessMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WatchableListType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WatchableType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WatchablesListCreator = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_CanWrapHighLevelValue_ConceptFunction;
      case 1:
        return props_CustomWatchable;
      case 2:
        return props_CustomWatchablesContainer;
      case 3:
        return props_GetHighLevelValuePresentation_ConceptFunction;
      case 4:
        return props_GetHighLevelWatchablesBlock_ConceptFunction;
      case 5:
        return props_HighLevelCustomViewer;
      case 6:
        return props_HighLevelValue_ConceptFunctionParameter;
      case 7:
        return props_HighLevelWatchableCreator;
      case 8:
        return props_ToProcessMethod;
      case 9:
        return props_WatchableListType;
      case 10:
        return props_WatchableType;
      case 11:
        return props_WatchablesListCreator;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
