package jetbrains.mps.debugger.java.customViewers.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_CanWrapHighLevelValue_ConceptFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CustomWatchable = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CustomWatchablesContainer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_GetHighLevelValuePresentation_ConceptFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_GetHighLevelWatchablesBlock_ConceptFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_HighLevelCustomViewer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_HighLevelValue_ConceptFunctionParameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_HighLevelWatchableCreator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ToProcessMethod = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_WatchableListType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_WatchableType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_WatchablesListCreator = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0n.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_CanWrapHighLevelValue_ConceptFunction;
          }
          break;
        case 1:
          if (true) {
            return props_CustomWatchable;
          }
          break;
        case 2:
          if (true) {
            return props_CustomWatchablesContainer;
          }
          break;
        case 3:
          if (true) {
            return props_GetHighLevelValuePresentation_ConceptFunction;
          }
          break;
        case 4:
          if (true) {
            return props_GetHighLevelWatchablesBlock_ConceptFunction;
          }
          break;
        case 5:
          if (true) {
            return props_HighLevelCustomViewer;
          }
          break;
        case 6:
          if (true) {
            return props_HighLevelValue_ConceptFunctionParameter;
          }
          break;
        case 7:
          if (true) {
            return props_HighLevelWatchableCreator;
          }
          break;
        case 8:
          if (true) {
            return props_ToProcessMethod;
          }
          break;
        case 9:
          if (true) {
            return props_WatchableListType;
          }
          break;
        case 10:
          if (true) {
            return props_WatchableType;
          }
          break;
        case 11:
          if (true) {
            return props_WatchablesListCreator;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0n = buildConceptIndices(MetaAdapterFactory.getConcept(0xfa8aeae94df94e13L, 0xbfb19b04c67ddb77L, 0x9a1514043ecbdbL, "CanWrapHighLevelValue_ConceptFunction"), MetaAdapterFactory.getConcept(0xfa8aeae94df94e13L, 0xbfb19b04c67ddb77L, 0x47047b7665563ef3L, "CustomWatchable"), MetaAdapterFactory.getConcept(0xfa8aeae94df94e13L, 0xbfb19b04c67ddb77L, 0x47047b766556943dL, "CustomWatchablesContainer"), MetaAdapterFactory.getConcept(0xfa8aeae94df94e13L, 0xbfb19b04c67ddb77L, 0x9a1514043ecbd2L, "GetHighLevelValuePresentation_ConceptFunction"), MetaAdapterFactory.getConcept(0xfa8aeae94df94e13L, 0xbfb19b04c67ddb77L, 0x9a1514043ecbd6L, "GetHighLevelWatchablesBlock_ConceptFunction"), MetaAdapterFactory.getConcept(0xfa8aeae94df94e13L, 0xbfb19b04c67ddb77L, 0x97038071a3bfa40L, "HighLevelCustomViewer"), MetaAdapterFactory.getConcept(0xfa8aeae94df94e13L, 0xbfb19b04c67ddb77L, 0x9a1514043ffbadL, "HighLevelValue_ConceptFunctionParameter"), MetaAdapterFactory.getConcept(0xfa8aeae94df94e13L, 0xbfb19b04c67ddb77L, 0x9a1514044030ceL, "HighLevelWatchableCreator"), MetaAdapterFactory.getConcept(0xfa8aeae94df94e13L, 0xbfb19b04c67ddb77L, 0xa01bb2d9f697c10L, "ToProcessMethod"), MetaAdapterFactory.getConcept(0xfa8aeae94df94e13L, 0xbfb19b04c67ddb77L, 0x19926b3196c33bb3L, "WatchableListType"), MetaAdapterFactory.getConcept(0xfa8aeae94df94e13L, 0xbfb19b04c67ddb77L, 0x47047b766556944dL, "WatchableType"), MetaAdapterFactory.getConcept(0xfa8aeae94df94e13L, 0xbfb19b04c67ddb77L, 0x19926b3196c33bb2L, "WatchablesListCreator"));
}
