package jetbrains.mps.debugger.java.customViewers.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int CanWrapHighLevelValue_ConceptFunction = 0;
  public static final int CustomWatchable = 1;
  public static final int CustomWatchablesContainer = 2;
  public static final int GetHighLevelValuePresentation_ConceptFunction = 3;
  public static final int GetHighLevelWatchablesBlock_ConceptFunction = 4;
  public static final int HighLevelCustomViewer = 5;
  public static final int HighLevelValue_ConceptFunctionParameter = 6;
  public static final int HighLevelWatchableCreator = 7;
  public static final int ToProcessMethod = 8;
  public static final int WatchableListType = 9;
  public static final int WatchableType = 10;
  public static final int WatchablesListCreator = 11;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xfa8aeae94df94e13L, 0xbfb19b04c67ddb77L);
    builder.put(0x9a1514043ecbdbL, CanWrapHighLevelValue_ConceptFunction);
    builder.put(0x47047b7665563ef3L, CustomWatchable);
    builder.put(0x47047b766556943dL, CustomWatchablesContainer);
    builder.put(0x9a1514043ecbd2L, GetHighLevelValuePresentation_ConceptFunction);
    builder.put(0x9a1514043ecbd6L, GetHighLevelWatchablesBlock_ConceptFunction);
    builder.put(0x97038071a3bfa40L, HighLevelCustomViewer);
    builder.put(0x9a1514043ffbadL, HighLevelValue_ConceptFunctionParameter);
    builder.put(0x9a1514044030ceL, HighLevelWatchableCreator);
    builder.put(0xa01bb2d9f697c10L, ToProcessMethod);
    builder.put(0x19926b3196c33bb3L, WatchableListType);
    builder.put(0x47047b766556944dL, WatchableType);
    builder.put(0x19926b3196c33bb2L, WatchablesListCreator);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
