package jetbrains.mps.debug.evaluation.transform.tests;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseTestBody;
import jetbrains.mps.debugger.java.api.evaluation.transform.TransformatorBuilder;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import junit.framework.Assert;
import jetbrains.mps.lang.test.matcher.NodesMatcher;

@MPSLaunch
public class TransformationUtil_Complex_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(TransformationUtil_Complex_Test.class, "${mps_home}", "r:29a1b5f5-cf76-4978-a4ac-fe622e0f96ff(jetbrains.mps.debug.evaluation.transform.tests@tests)", false);


  public TransformationUtil_Complex_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_localIntVariableDeclaration() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_localIntVariableDeclaration", true);
  }
  @Test
  public void test_localBoxedIntVariableDeclaration() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_localBoxedIntVariableDeclaration", true);
  }
  @Test
  public void test_localBoxedIntVariableSecondDeclaration() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_localBoxedIntVariableSecondDeclaration", true);
  }
  @Test
  public void test_localIntVariableAssignment() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_localIntVariableAssignment", true);
  }
  @Test
  public void test_localBoxedIntVariableAssignment() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_localBoxedIntVariableAssignment", true);
  }
  @Test
  public void test_localObjectVariableDeclaration() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_localObjectVariableDeclaration", true);
  }
  @Test
  public void test_localObjectVariableAssignment() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_localObjectVariableAssignment", true);
  }
  @Test
  public void test_localUnBoxedIntVarAssignment() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_localUnBoxedIntVarAssignment", true);
  }
  @Test
  public void test_localUnBoxedIntVarDeclaration() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_localUnBoxedIntVarDeclaration", true);
  }
  @Test
  public void test_andAssignmentExpression() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_andAssignmentExpression", true);
  }
  @Test
  public void test_divAssignmentExpression() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_divAssignmentExpression", true);
  }
  @Test
  public void test_leftShiftAssignmentExpression() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_leftShiftAssignmentExpression", true);
  }
  @Test
  public void test_minusAssignmentExpression() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_minusAssignmentExpression", true);
  }
  @Test
  public void test_mulAssignmentExpression() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_mulAssignmentExpression", true);
  }
  @Test
  public void test_orAssignmentExpression() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_orAssignmentExpression", true);
  }
  @Test
  public void test_plusAssignmentExpression() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_plusAssignmentExpression", true);
  }
  @Test
  public void test_remAssignmentExpression() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_remAssignmentExpression", true);
  }
  @Test
  public void test_rightShiftAssignmentExpression() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_rightShiftAssignmentExpression", true);
  }
  @Test
  public void test_xorAssignmentExpression() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_xorAssignmentExpression", true);
  }
  @Test
  public void test_lowLevelVariableInForeach() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_lowLevelVariableInForeach", true);
  }
  @Test
  public void test_lowLevelIntVariableInForeach() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_lowLevelIntVariableInForeach", true);
  }
  @Test
  public void test_notNullString() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_notNullString", true);
  }
  @Test
  public void test_nodeReferenceCountViewer() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_nodeReferenceCountViewer", true);
  }
  @Test
  public void test_arrayInForeach() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_arrayInForeach", true);
  }
  @Test
  public void test_newArrayOfString() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_newArrayOfString", true);
  }
  @Test
  public void test_newEmptyArrayOfString() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_newEmptyArrayOfString", true);
  }
  @Test
  public void test_newEmptyArrayOfInt() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_newEmptyArrayOfInt", true);
  }
  @Test
  public void test_optimizeToStringForString() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_optimizeToStringForString", true);
  }
  @Test
  public void test_ternaryOperatorForString() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_ternaryOperatorForString", true);
  }
  @Test
  public void test_ternaryOperatorForStringIfTrue() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_ternaryOperatorForStringIfTrue", true);
  }
  @Test
  public void test_ternaryOperatorForStringCondition() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_ternaryOperatorForStringCondition", true);
  }
  @Test
  public void test_urlClassloaderCast() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_urlClassloaderCast", true);
  }
  @Test
  public void test_primitiveCast() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_primitiveCast", true);
  }
  @Test
  public void test_objectCast() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_objectCast", true);
  }
  @Test
  public void test_arrayCast() throws Throwable {
    runTest("jetbrains.mps.debug.evaluation.transform.tests.TransformationUtil_Complex_Test$TestBody", "test_arrayCast", true);
  }

  @MPSLaunch
  public static class TestBody extends BaseTestBody {
    public void test_localIntVariableDeclaration() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("7696059916860905171"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("7696059916860905171"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("7696059916860905177"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_localBoxedIntVariableDeclaration() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("770214570644685905"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("770214570644685905"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("770214570644685876"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_localBoxedIntVariableSecondDeclaration() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("5325372602757295239"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("5325372602757295239"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("5325372602757295198"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_localIntVariableAssignment() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("7413144797245913935"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("7413144797245913935"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("7413144797245913909"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_localBoxedIntVariableAssignment() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("7413144797245913989"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("7413144797245913989"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("7413144797245913953"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_localObjectVariableDeclaration() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("770214570644685977"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("770214570644685977"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("770214570644685989"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_localObjectVariableAssignment() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("7413144797245757998"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("7413144797245757998"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("7413144797245757972"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_localUnBoxedIntVarAssignment() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("7413144797245923859"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("7413144797245923859"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("7413144797245923876"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_localUnBoxedIntVarDeclaration() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("7413144797245923961"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("7413144797245923961"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("7413144797245923933"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_andAssignmentExpression() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("89292631370179160"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370179160"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370179173"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_divAssignmentExpression() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("89292631370192756"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370192756"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370192721"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_leftShiftAssignmentExpression() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("89292631370192832"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370192832"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370192797"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_minusAssignmentExpression() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("89292631370193076"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370193076"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370193041"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_mulAssignmentExpression() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("89292631370193027"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370193027"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370192992"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_orAssignmentExpression() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("89292631370193174"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370193174"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370193139"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_plusAssignmentExpression() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("89292631370192978"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370192978"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370192943"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_remAssignmentExpression() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("89292631370192929"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370192929"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370192894"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_rightShiftAssignmentExpression() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("89292631370196925"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370196925"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370196890"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_xorAssignmentExpression() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("89292631370193125"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370193125"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("89292631370193090"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_lowLevelVariableInForeach() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("8638796163619040027"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("8638796163619040027"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("8638796163619040052"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_lowLevelIntVariableInForeach() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("1774703052633005927"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("1774703052633005927"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("1774703052633005891"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_notNullString() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("6583956526375658290"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("6583956526375658290"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("6583956526375658320"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_nodeReferenceCountViewer() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("4322674958982459627"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("4322674958982459627"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("4322674958982459588"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_arrayInForeach() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("2281056005883150420"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("2281056005883150420"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("2281056005883150387"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_newArrayOfString() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("8071722462615359845"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("8071722462615359845"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("8071722462615359820"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_newEmptyArrayOfString() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("335932010435400776"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("335932010435400776"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("335932010435400763"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_newEmptyArrayOfInt() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("4609929908986493504"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("4609929908986493504"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("4609929908986493492"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_optimizeToStringForString() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("4816137365279714846"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("4816137365279714846"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("4816137365279714835"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_ternaryOperatorForString() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("4587766555754887084"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("4587766555754887084"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("4587766555754887053"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_ternaryOperatorForStringIfTrue() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("4587766555754950815"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("4587766555754950815"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("4587766555754950781"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_ternaryOperatorForStringCondition() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("4587766555754950765"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("4587766555754950765"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("4587766555754950731"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_urlClassloaderCast() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("1247401079809823525"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("1247401079809823525"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("1247401079809823497"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_primitiveCast() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("5586226261252332124"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("5586226261252332124"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("5586226261252332106"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_objectCast() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("3525964900474412386"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("3525964900474412386"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("3525964900474412367"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }
    public void test_arrayCast() throws Exception {
      addNodeById("7696059916860905166");
      addNodeById("7696059916860905175");
      addNodeById("7413144797245913930");
      addNodeById("7413144797245913907");
      addNodeById("770214570644685900");
      addNodeById("770214570644685874");
      addNodeById("5325372602757295234");
      addNodeById("5325372602757295196");
      addNodeById("7413144797245913984");
      addNodeById("7413144797245913951");
      addNodeById("770214570644685972");
      addNodeById("770214570644685987");
      addNodeById("7413144797245757993");
      addNodeById("7413144797245757970");
      addNodeById("7413144797245923854");
      addNodeById("7413144797245923874");
      addNodeById("7413144797245923956");
      addNodeById("7413144797245923931");
      addNodeById("89292631370179155");
      addNodeById("89292631370179171");
      addNodeById("89292631370193169");
      addNodeById("89292631370193137");
      addNodeById("89292631370193120");
      addNodeById("89292631370193088");
      addNodeById("89292631370192751");
      addNodeById("89292631370192719");
      addNodeById("89292631370192827");
      addNodeById("89292631370192795");
      addNodeById("89292631370193071");
      addNodeById("89292631370193039");
      addNodeById("89292631370193022");
      addNodeById("89292631370192990");
      addNodeById("89292631370192973");
      addNodeById("89292631370192941");
      addNodeById("89292631370192924");
      addNodeById("89292631370192892");
      addNodeById("89292631370196920");
      addNodeById("89292631370196888");
      addNodeById("8638796163619025272");
      addNodeById("8638796163619040050");
      addNodeById("1774703052633005919");
      addNodeById("1774703052633005889");
      addNodeById("6583956526375658284");
      addNodeById("6583956526375658318");
      addNodeById("4322674958982459622");
      addNodeById("4322674958982459586");
      addNodeById("2281056005883150415");
      addNodeById("2281056005883150385");
      addNodeById("8071722462615359839");
      addNodeById("8071722462615359818");
      addNodeById("335932010435400773");
      addNodeById("335932010435400761");
      addNodeById("4609929908986493501");
      addNodeById("4609929908986493490");
      addNodeById("4816137365279714844");
      addNodeById("4816137365279714834");
      addNodeById("4587766555754887082");
      addNodeById("4587766555754887052");
      addNodeById("4587766555754950813");
      addNodeById("4587766555754950780");
      addNodeById("4587766555754950763");
      addNodeById("4587766555754950730");
      addNodeById("1247401079809823523");
      addNodeById("1247401079809823496");
      addNodeById("5586226261252332122");
      addNodeById("5586226261252332105");
      addNodeById("3525964900474412382");
      addNodeById("3525964900474412366");
      addNodeById("5586226261252332093");
      addNodeById("5586226261252332076");
      this.init();
      TransformatorBuilder.getInstance().build(SNodeOperations.cast(getNodeById("5586226261252332095"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))), false).transformEvaluator();
      {
        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("5586226261252332095"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(getNodeById("5586226261252332077"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, "jetbrains.mps.baseLanguage"), 0xf8cc56b200L, "StatementList"))));
        Assert.assertTrue("The nodes '" + nodesBefore + "' and '" + nodesAfter + "' do not match!", new NodesMatcher(nodesBefore, nodesAfter).diff().isEmpty());
      }
      this.dispose();
    }


    public void init() {
      DebuggerInitializer.init();
    }
    public void dispose() {
      DebuggerInitializer.dispose();
    }
  }
}
