package jetbrains.mps.debugger.java.runtime.ui.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.debugger.java.api.state.proxy.ValueWrapperFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.debug.api.programState.IValue;
import jetbrains.mps.debugger.api.ui.tree.VariablesTree;
import jetbrains.mps.debugger.java.api.state.proxy.JavaValue;
import jetbrains.mps.debugger.api.ui.DebugActionsUtil;
import javax.swing.tree.TreeNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.debugger.java.runtime.state.customViewers.CustomViewersManagerImpl;
import jetbrains.mps.debugger.java.runtime.state.DebugSession;

public class ViewAs_Action extends BaseAction {
  private static final Icon ICON = null;

  private ValueWrapperFactory factory;
  public ViewAs_Action(ValueWrapperFactory factory_par) {
    super("View With Factory", "", ICON);
    this.factory = factory_par;
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    event.getPresentation().setText(ViewAs_Action.this.factory.getName());
    IValue value = VariablesTree.MPS_DEBUGGER_VALUE.getData(event.getDataContext());
    event.getPresentation().setVisible(value != null && value instanceof JavaValue && DebugActionsUtil.getEvaluationProvider(event) != null);
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      TreeNode p = event.getData(MPSCommonDataKeys.TREE_NODE);
      MapSequence.fromMap(_params).put("node", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    IValue value = VariablesTree.MPS_DEBUGGER_VALUE.getData(event.getDataContext());
    if (value == null || !(value instanceof JavaValue)) {
      return;
    }
    CustomViewersManagerImpl.getInstanceImpl().setValueWrapper(((JavaValue) value).getValue(), ViewAs_Action.this.factory, (DebugSession) DebugActionsUtil.getDebugSession(event));
  }
  @NotNull
  public String getActionId() {
    StringBuilder res = new StringBuilder();
    res.append(super.getActionId());
    res.append("#");
    res.append(factory_State((ValueWrapperFactory) this.factory));
    res.append("!");
    return res.toString();
  }
  public static String factory_State(ValueWrapperFactory object) {
    throw new RuntimeException("NOT IMPLEMENTED");
  }
}
