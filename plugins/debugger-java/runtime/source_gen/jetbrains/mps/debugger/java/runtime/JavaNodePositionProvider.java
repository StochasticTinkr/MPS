package jetbrains.mps.debugger.java.runtime;

/*Generated by MPS */

import jetbrains.mps.debug.api.source.NodePositionProvider;
import com.intellij.openapi.components.ProjectComponent;
import jetbrains.mps.debug.api.source.PositionProvider;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.debug.api.programState.ILocation;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.traceInfo.TraceInfoUtil;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.debug.api.source.NodeSourcePosition;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.debug.api.AbstractDebugSession;
import jetbrains.mps.debugger.java.runtime.state.DebugSession;

public class JavaNodePositionProvider extends NodePositionProvider implements ProjectComponent {
  private final PositionProvider myProvider;
  public JavaNodePositionProvider(PositionProvider provider, MPSProject mpsProject) {
    super(mpsProject);
    myProvider = provider;
  }

  @Nullable
  @Override
  protected SNodeReference getSNodePointer(@Nullable ILocation location) {
    SNode jn = TraceInfoUtil.getJavaNode(location.getUnitName(), location.getFileName(), location.getLineNumber());
    return (jn == null ? null : new SNodePointer(jn));
  }

  @Override
  public void projectOpened() {
  }
  @Override
  public void projectClosed() {
  }
  @Override
  public void initComponent() {
    myProvider.addProvider(this, NodeSourcePosition.class.getName());
  }
  @Override
  public void disposeComponent() {
    myProvider.removeProvider(this);
  }
  @NonNls
  @NotNull
  @Override
  public String getComponentName() {
    return "Java Node Position Provider";
  }
  @Override
  public boolean accepts(AbstractDebugSession session) {
    return session instanceof DebugSession;
  }
}
