package jetbrains.mps.editor.contextActionsTool.runtime;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.assist.ContextAssistantMenuProvider;
import jetbrains.mps.project.IProject;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.selection.Selection;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.openapi.editor.menus.transformation.MenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.MenuItemVisitor;
import jetbrains.mps.openapi.editor.menus.transformation.ActionItem;
import jetbrains.mps.openapi.editor.menus.transformation.SubMenu;
import org.jetbrains.annotations.Nullable;
import javax.swing.Icon;
import jetbrains.mps.openapi.editor.menus.transformation.sidebar.SidebarActionItem;

public class ContextMenuController extends ToolController {
  private final ContextAssistantMenuProvider myMenuProvider;
  public ContextMenuController(IProject project, ToolComponent toolComponent, ContextAssistantMenuProvider menuProvider) {
    super(project, toolComponent);
    myMenuProvider = menuProvider;
  }

  @Override
  protected List<ToolComponent.IItem> queryItems(@NotNull Selection selection) {
    List<ToolComponent.IItem> uiItems = ListSequence.fromList(new ArrayList<ToolComponent.IItem>());

    convertItems(myMenuProvider.getMenuItems(selection), "", uiItems);

    return uiItems;
  }

  private void convertItems(List<MenuItem> inItems, final String folderName, final List<ToolComponent.IItem> outItems) {
    for (MenuItem inItem : ListSequence.fromList(inItems)) {
      inItem.accept(new MenuItemVisitor<Void>() {
        @Override
        public Void visit(ActionItem actionItem) {
          ListSequence.fromList(outItems).addElement(new ContextMenuController.Item(actionItem, folderName));
          return null;
        }
        @Override
        public Void visit(SubMenu subMenu) {
          String subfolderName = ((folderName == null || folderName.length() == 0) ? subMenu.getText() : folderName + "/" + subMenu.getText());
          convertItems(subMenu.getItems(), subfolderName, outItems);
          return null;
        }
      });
    }
  }

  private static class Item implements ToolComponent.IItem {
    private final ActionItem myActionItem;
    private final String myFolderName;
    @Nullable
    private final Icon myIcon;

    public Item(ActionItem actionItem, String folderName) {
      myActionItem = actionItem;
      myFolderName = folderName;

      if (myActionItem instanceof SidebarActionItem) {
        SidebarActionItem sidebarItem = (SidebarActionItem) myActionItem;
        myIcon = sidebarItem.getIcon();
      } else {
        myIcon = null;
      }
    }

    @Override
    public String getLabel() {
      return myActionItem.getLabelText("");
    }
    @Override
    public Icon getIcon() {
      return myIcon;
    }
    @Override
    public String getFolderName() {
      return myFolderName;
    }
    @Override
    public String getTooltip() {
      return myActionItem.getLabelText("");
    }
    @Override
    public boolean isVisible() {
      return true;
    }
    @Override
    public void execute() {
      myActionItem.execute("");
    }
  }
}
