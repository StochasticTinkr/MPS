package jetbrains.mps.debugger.api.ui.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.icons.MPSIcons;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.debug.api.breakpoints.IBreakpoint;
import jetbrains.mps.debugger.api.ui.breakpoints.BreakpointsUtil;
import jetbrains.mps.debug.api.breakpoints.ILocationBreakpoint;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.debugger.api.ui.breakpoints.BreakpointsBrowserDialog;
import jetbrains.mps.openapi.navigation.EditorNavigator;

public class GoToBreakpointSourceAction_Action extends BaseAction {
  private static final Icon ICON = MPSIcons.Debug.GoToSource;

  public GoToBreakpointSourceAction_Action() {
    super("Go To", "Go To Source", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    IBreakpoint breakpoint = BreakpointsUtil.MPS_BREAKPOINT.getData(event.getDataContext());
    event.getPresentation().setEnabled(breakpoint != null && breakpoint instanceof ILocationBreakpoint);
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("mpsProject", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    IBreakpoint breakpoint = BreakpointsUtil.MPS_BREAKPOINT.getData(event.getDataContext());
    if (breakpoint == null || !(breakpoint instanceof ILocationBreakpoint)) {
      return;
    }
    BreakpointsBrowserDialog dialog = BreakpointsUtil.MPS_BREAKPOINTS_BROWSER_DIALOG.getData(event.getDataContext());
    if (dialog != null) {
      dialog.dispose();
    }
    new EditorNavigator(((MPSProject) MapSequence.fromMap(_params).get("mpsProject"))).shallFocus(true).shallSelect(true).open(((ILocationBreakpoint) breakpoint).getLocation().getNodePointer());
  }
}
