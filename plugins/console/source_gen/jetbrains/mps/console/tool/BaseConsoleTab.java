package jetbrains.mps.console.tool;

/*Generated by MPS */

import javax.swing.JPanel;
import com.intellij.openapi.Disposable;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.fileEditor.FileEditor;
import jetbrains.mps.nodeEditor.UIEditorComponent;
import jetbrains.mps.nodeEditor.Highlighter;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.project.Project;
import jetbrains.mps.nodeEditor.EditorComponent;
import org.jetbrains.annotations.NonNls;
import com.intellij.openapi.actionSystem.PlatformDataKeys;
import com.intellij.ide.PasteProvider;
import jetbrains.mps.openapi.editor.extensions.EditorExtensionUtil;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import org.apache.log4j.Level;
import java.awt.BorderLayout;
import com.intellij.openapi.actionSystem.DefaultActionGroup;
import com.intellij.openapi.actionSystem.ActionToolbar;
import com.intellij.openapi.actionSystem.ActionManager;
import com.intellij.openapi.actionSystem.ActionPlaces;
import com.intellij.openapi.util.Disposer;
import com.intellij.openapi.wm.IdeFocusManager;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Collection;
import jetbrains.mps.smodel.SLanguageHierarchy;
import jetbrains.mps.smodel.language.LanguageRegistry;
import java.util.Collections;
import jetbrains.mps.smodel.SModelInternal;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.project.AbstractModule;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.ModelImports;
import jetbrains.mps.smodel.ModelDependencyScanner;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.workbench.action.BaseAction;
import com.intellij.openapi.actionSystem.CustomShortcutSet;
import javax.swing.KeyStroke;
import java.awt.event.KeyEvent;
import com.intellij.openapi.actionSystem.ShortcutSet;
import com.intellij.openapi.actionSystem.MouseShortcut;
import java.awt.event.MouseEvent;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.DataContext;
import org.jetbrains.mps.openapi.model.SNodeReference;
import java.awt.datatransfer.Transferable;
import com.intellij.ide.CopyPasteManagerEx;
import jetbrains.mps.ide.datatransfer.SModelDataFlavor;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.IOException;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.nodeEditor.datatransfer.NodePaster;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import com.intellij.util.Base64Converter;
import jetbrains.mps.persistence.PersistenceUtil;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.ide.findusages.model.scopes.ProjectScope;
import java.util.Scanner;
import java.io.StringWriter;
import java.io.PrintWriter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.console.actions.ClosureHoldingNodeUtil;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.SModelUtil_new;

public abstract class BaseConsoleTab extends JPanel implements Disposable {
  private ConsoleTool myTool;
  private SModel myModel;
  private MPSProject myProject;
  private FileEditor myFileEditor;
  private UIEditorComponent myEditor;
  private Highlighter myHighlighter;
  private String myTabTitle;

  protected SNode myRoot;

  public BaseConsoleTab(MPSProject project, ConsoleTool tool, String title, @Nullable String history) {
    myTool = tool;
    myTabTitle = title;
    myProject = project;
    initConsoleTab(history);
  }

  public String getTitle() {
    return myTabTitle;
  }

  public ConsoleTool getTool() {
    return myTool;
  }

  public SModel getConsoleModel() {
    return myModel;
  }

  protected final Project getProject() {
    return myProject;
  }

  public EditorComponent getEditorComponent() {
    return myEditor;
  }

  public SNode getRoot() {
    return myRoot;
  }

  public ConsoleTool getConsoleTool() {
    return myTool;
  }

  protected void createEditor() {
    this.myEditor = new UIEditorComponent(myProject.getRepository(), null) {
      @Nullable
      @Override
      public Object getData(@NonNls String key) {
        if (PlatformDataKeys.FILE_EDITOR.is(key)) {
          return myFileEditor;
        }
        if (PlatformDataKeys.PASTE_PROVIDER.is(key)) {
          PasteProvider parentPasteProvider = as_6q36mf_a0a0a1a0a0a0a0ab(super.getData(key), PasteProvider.class);
          return (myTool.getPasteAsRef() ? new BaseConsoleTab.MyPasteProvider(parentPasteProvider) : parentPasteProvider);
        }
        return super.getData(key);
      }
    };
    EditorExtensionUtil.extendUsingProject(myEditor, myProject);
    myEditor.editNode(myRoot);
  }

  protected void createConsoleModel() {
    this.myModel = TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModuleWithSourceAndClassesGen());
    if (myModel == null) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Error: could not create console model");
      }
      return;
    }
  }

  protected void initConsoleTab(@Nullable final String history) {
    myProject.getModelAccess().executeCommand(new Runnable() {
      public void run() {
        createConsoleModel();
        addBuiltInImports();
        loadHistory(history);
        createEditor();
        myFileEditor = new ConsoleFileEditor(myEditor);
      }
    });

    this.setLayout(new BorderLayout());

    DefaultActionGroup group = new DefaultActionGroup();
    registerActions(group);
    ActionToolbar toolbar = ActionManager.getInstance().createActionToolbar(ActionPlaces.TOOLBAR, group, false);
    toolbar.setTargetComponent(myEditor);
    JPanel toolbarComponent = new JPanel(new BorderLayout());
    toolbarComponent.add(toolbar.getComponent(), BorderLayout.CENTER);

    this.add(toolbarComponent, BorderLayout.WEST);
    this.add(myEditor.getExternalComponent(), BorderLayout.CENTER);

    Disposer.register(this, myFileEditor);

    myHighlighter = myProject.getProject().getComponent(Highlighter.class);
    check_6q36mf_a71a03(myHighlighter, myEditor);
  }

  public void dispose() {
    disposeConsoleTab();
  }

  public void disposeConsoleTab() {
    myProject.getRepository().getModelAccess().executeCommand(new Runnable() {
      public void run() {
        if (myEditor != null) {
          myEditor.dispose();
        }
        TemporaryModels.getInstance().dispose(myModel);
      }
    });
    if (myHighlighter != null) {
      myHighlighter.removeAdditionalEditorComponent(myEditor);
    }
  }

  public void activate() {
    getConsoleTool().getToolWindow().activate(null);
    getConsoleTool().selectTab(this);
  }

  public void selectNode(final SNode nodeToSelect) {
    myTool.getToolWindow().activate(new Runnable() {
      public void run() {
        myProject.getRepository().getModelAccess().runReadAction(new Runnable() {
          public void run() {
            myEditor.selectNode(nodeToSelect);
            getEditorComponent().ensureSelectionVisible();
            IdeFocusManager.getInstance(myProject.getProject()).requestFocus(myEditor, false);
          }
        });
      }
    });
    myTool.selectTab(this);
  }

  protected void addBuiltInImports() {
    SLanguage base = MetaAdapterFactory.getLanguage(MetaIdFactory.langId(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L), "jetbrains.mps.console.base");
    Collection<SLanguage> baseAndExtensions = new SLanguageHierarchy(LanguageRegistry.getInstance(myProject.getRepository()), Collections.singleton(base)).getExtending();
    SModelInternal modelInternal = ((SModelInternal) myModel);
    for (SLanguage l : CollectionSequence.fromCollection(baseAndExtensions)) {
      modelInternal.addLanguage(l);
      SModuleReference langSourceModuleRef = l.getSourceModuleReference();
      SModule langSrcModule = (langSourceModuleRef == null ? null : langSourceModuleRef.resolve(myProject.getRepository()));
      if (!(langSrcModule instanceof Language)) {
        continue;
      }
      SModel structureModel = ((Language) langSrcModule).getStructureModelDescriptor();
      if (structureModel == null) {
        continue;
      }
      modelInternal.addModelImport(structureModel.getReference(), false);
      ((AbstractModule) myModel.getModule()).addDependency(langSrcModule.getModuleReference(), false);
    }
    modelInternal.addDevKit(PersistenceFacade.getInstance().createModuleReference("fbc25dd2-5da4-483a-8b19-70928e1b62d7(jetbrains.mps.devkit.general-purpose)"));
  }

  protected void validateImports() {
    ModelImports modelImports = new ModelImports(myModel);
    modelImports.clearEmployedDevKits();
    modelImports.clearUsedLanguages();
    modelImports.clearImportedModels();
    // XXX why don't we clear engagedOnGeneration as well? 
    addBuiltInImports();
    TemporaryModels.getInstance().addMissingImports(myModel);
  }

  protected void addNodeImports(SNode node) {
    final SModelInternal modelInternal = (SModelInternal) myModel;
    final AbstractModule module = ((AbstractModule) myModel.getModule());
    final Collection<SLanguage> importedLanguages = modelInternal.importedLanguageIds();
    ModelDependencyScanner scan = new ModelDependencyScanner().crossModelReferences(true).usedLanguages(true);
    scan.walk(SNodeOperations.getNodeDescendants(node, null, true, new SAbstractConcept[]{}));
    HashSet<SLanguage> languagesToImport = new HashSet<SLanguage>(scan.getUsedLanguages());
    languagesToImport.removeAll(importedLanguages);
    for (SLanguage usedLanguage : SetSequence.fromSet(languagesToImport)) {
      modelInternal.addLanguage(usedLanguage);
    }

    HashSet<SModelReference> modelsToImport = new HashSet<SModelReference>(scan.getCrossModelReferences());
    modelsToImport.removeAll(SModelOperations.getImportedModelUIDs(myModel));
    for (SModelReference ref : SetSequence.fromSet(modelsToImport)) {
      modelInternal.addModelImport(ref, false);
      SModuleReference moduleRef;
      if (ref.getModuleReference() != null) {
        moduleRef = ref.getModuleReference();
      } else {
        // models with global identity may omit module reference, however, we still need to add their owning module 
        // into dependencies to get the code compiled 
        SModel usedModel = ref.resolve(myProject.getRepository());
        moduleRef = (usedModel == null ? null : usedModel.getModule().getModuleReference());
      }
      if (moduleRef != null) {
        module.addDependency(moduleRef, false);
      }
    }
  }

  protected BaseAction registerKeyShortcut(BaseAction a, int key) {
    return registerShortcutSet(a, new CustomShortcutSet(KeyStroke.getKeyStroke(key, KeyEvent.CTRL_MASK)));
  }

  protected BaseAction registerShortcutSet(BaseAction a, ShortcutSet shortcutSet) {
    a.registerCustomShortcutSet(shortcutSet, myEditor);
    return a;
  }

  protected void registerActions(DefaultActionGroup group) {
    registerShortcutSet(((BaseAction) ActionManager.getInstance().getAction("jetbrains.mps.console.actions.ExecuteActionAttachedToCurrentNode_Action")), new CustomShortcutSet(new MouseShortcut(MouseEvent.BUTTON1, 0, 1)));
  }

  public class MyPasteProvider implements PasteProvider {

    private PasteProvider myDefaultPasteProvider;

    public MyPasteProvider(PasteProvider defaultPasteProvider) {
      myDefaultPasteProvider = defaultPasteProvider;
    }

    public void performPaste(@NotNull final DataContext context) {
      myProject.getRepository().getModelAccess().executeCommand(new Runnable() {
        public void run() {
          SNodeReference pastingNodeReference = null;
          try {
            for (Transferable trf : CopyPasteManagerEx.getInstanceEx().getAllContents()) {
              if (trf != null && trf.isDataFlavorSupported(SModelDataFlavor.sNodeReference)) {
                pastingNodeReference = (SNodeReference) trf.getTransferData(SModelDataFlavor.sNodeReference);
              }
              break;
            }
          } catch (UnsupportedFlavorException ignored) {
          } catch (IOException ignored) {
          }
          EditorCell currentCell = myEditor.getSelectedCell();
          SNode referenceTarget = check_6q36mf_a0d0a0a5ac(pastingNodeReference, myProject);
          if (referenceTarget != null && currentCell != null && !(check_6q36mf_a0a4a0a0f25(check_6q36mf_a0a0e0a0a5ac(pastingNodeReference), myModel))) {
            SNode refContainer = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x51132a123c89fa7eL, "jetbrains.mps.console.base.structure.PastedNodeReference")));
            SLinkOperations.setTarget(refContainer, MetaAdapterFactory.getReferenceLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x36ac6f29ae8c1fb5L, 0x4904fd89e74fc6fL, "target"), referenceTarget);
            NodePaster paster = new NodePaster(ListSequence.fromListAndArray(new ArrayList<SNode>(), refContainer));
            if (paster.canPaste(currentCell)) {
              paster.paste(currentCell);
            } else if (paster.canPasteWithRemove(myEditor.getSelectedNodes())) {
              paster.pasteWithRemove(myEditor.getSelectedNodes());
            }
            TemporaryModels.getInstance().addMissingImports(myModel);
          } else {
            check_6q36mf_a0a0e0a0a5ac_0(myDefaultPasteProvider, context);
          }
        }
      });
    }
    public boolean isPastePossible(@NotNull DataContext context) {
      return true;
    }
    public boolean isPasteEnabled(@NotNull DataContext context) {
      return true;
    }
  }

  protected abstract void loadHistory(String state);

  @Nullable
  public String saveHistory() {
    final Wrappers._T<String> result = new Wrappers._T<String>(null);
    myProject.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        try {
          result.value = (myModel == null ? null : Base64Converter.encode(PersistenceUtil.saveBinaryModel(myModel)));
        } catch (Exception e) {
          if (LOG.isEnabledFor(Level.WARN)) {
            LOG.warn("Error on console model saving", e);
          }
        }
      }
    });
    return result.value;
  }

  protected SModel loadHistoryModel(String state) {
    if (state == null) {
      return null;
    }
    try {
      final Wrappers._T<SModel> loadedModel = new Wrappers._T<SModel>(PersistenceUtil.loadBinaryModel(Base64Converter.decode(state.getBytes())));
      ListSequence.fromList(jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.nodes(loadedModel.value, null)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(it.getConcept().isValid());
        }
      }).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          if ((SNodeOperations.getNodeAncestor(it, MetaAdapterFactory.getInterfaceConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x5f195a051bd47defL, "jetbrains.mps.console.base.structure.HistoryItem"), false, false) != null)) {
            SNodeOperations.deleteNode(SNodeOperations.getNodeAncestor(it, MetaAdapterFactory.getInterfaceConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x5f195a051bd47defL, "jetbrains.mps.console.base.structure.HistoryItem"), false, false));
            if (LOG.isEnabledFor(Level.ERROR)) {
              LOG.error("Unknown concept on loading console history: removing enclosing history item");
            }
          } else {
            loadedModel.value = null;
            if (LOG.isEnabledFor(Level.ERROR)) {
              LOG.error("Unknown concept on loading console history: not loading history");
            }
          }
        }
      });
      return loadedModel.value;
    } catch (RuntimeException e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Console history was not loaded. Maybe you are opening project from previous MPS versions?");
      }
      return null;
    } catch (Throwable e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Error on loading console history.", e);
      }
      return null;
    }
  }

  protected ConsoleContext getConsoleContext() {
    return new ConsoleContext() {
      public Project getProject() {
        return myProject;
      }
      public SearchScope getDefaultSearchScope() {
        return new ProjectScope(myProject);
      }
      public BaseConsoleTab getOutputWindow() {
        return BaseConsoleTab.this;
      }
    };
  }

  public ConsoleStream getConsoleStream() {
    return new ConsoleStream() {
      public void addText(String text) {
        Scanner scanner = new Scanner(text);
        while (scanner.hasNextLine()) {
          String line = scanner.nextLine();
          if ((line != null && line.length() > 0)) {
            ListSequence.fromList(SLinkOperations.getChildren(getLastReponse(), MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e3b035171a5ba02L, 0x4e3b035171b356edL, "item"))).addElement(createTextResponseItem_6q36mf_a0a0a1a1a0a0a0a26(line));
          }
          if (scanner.hasNextLine() || text.charAt(text.length() - 1) == '\n') {
            SLinkOperations.addNewChild(getLastReponse(), MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e3b035171a5ba02L, 0x4e3b035171b356edL, "item"), SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e3b035171b35d30L, "jetbrains.mps.console.base.structure.NewLineResponseItem")));
          }
        }
      }
      public void addNode(SNode node) {
        addNodeImports(node);
        SLinkOperations.setTarget(SLinkOperations.addNewChild(getLastReponse(), MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e3b035171a5ba02L, 0x4e3b035171b356edL, "item"), SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e3b035171b35c14L, "jetbrains.mps.console.base.structure.NodeResponseItem"))), MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e3b035171b35c14L, 0x4e3b035171b35c15L, "node"), node);
      }
      public void addNodeRef(SNode target) {
        SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x2095ece53bbb600cL, "jetbrains.mps.console.base.structure.NodeReferencePresentation")));
        SLinkOperations.setTarget(node, MetaAdapterFactory.getReferenceLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x36ac6f29ae8c1fb5L, 0x4904fd89e74fc6fL, "target"), target);
        addNode(node);
      }
      public void addException(Throwable t) {
        StringWriter writer = new StringWriter();
        t.printStackTrace(new PrintWriter(writer));
        SNode exceptionHolder = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x5b02f032bc93b714L, "jetbrains.mps.console.base.structure.ExceptionHolder")));
        SPropertyOperations.set(exceptionHolder, MetaAdapterFactory.getProperty(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x5b02f032bc93b714L, 0x5b02f032bc9cb8a9L, "stackTrace"), writer.toString());
        SPropertyOperations.set(exceptionHolder, MetaAdapterFactory.getProperty(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x2095ece53bb9f5b0L, 0x360b134fc047ce2aL, "text"), t.getClass().getName());
        addNode(exceptionHolder);
      }
      public void addClosure(_FunctionTypes._void_P0_E0 closure, String text) {
        SNode nodeWithClosure = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0xf6d4d958ec2f2c6L, "jetbrains.mps.console.base.structure.NodeWithClosure")));
        SPropertyOperations.set(nodeWithClosure, MetaAdapterFactory.getProperty(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x2095ece53bb9f5b0L, 0x360b134fc047ce2aL, "text"), text);
        ClosureHoldingNodeUtil.getInstance().register(nodeWithClosure, closure);
        addNode(nodeWithClosure);
      }
      public void addSequence(final Project project, final _FunctionTypes._return_P0_E0<? extends SearchResults> results, int resultsCount, String resultDescription) {
        if (resultsCount == 0) {
          addText("empty sequence");
        } else {
          addClosure(new _FunctionTypes._void_P0_E0() {
            public void invoke() {
              ConsoleUtil.show(project, results);
            }
          }, resultsCount + " " + resultDescription);
        }
      }
    };
  }

  protected SNode getLastReponse() {
    SNode last = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(myRoot, MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x15fb34051f725a2cL, 0x15fb34051f725bafL, "history")), MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0xa835f28c1aa02beL, 0x63da33792b5df49aL, "item"))).last(), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e3b035171a5ba02L, "jetbrains.mps.console.base.structure.Response"));
    if (last != null) {
      return last;
    }
    return SLinkOperations.addNewChild(SLinkOperations.getTarget(myRoot, MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x15fb34051f725a2cL, 0x15fb34051f725bafL, "history")), MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0xa835f28c1aa02beL, 0x63da33792b5df49aL, "item"), SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e3b035171a5ba02L, "jetbrains.mps.console.base.structure.Response")));
  }

  public void execute(@Nullable final SNode command, @Nullable final Runnable executeBefore, @Nullable final Runnable executeAfter) {
    myTool.selectTab(this);
    final SNode[] typedCommand = new SNode[1];
    myProject.getModelAccess().executeCommand(new Runnable() {
      public void run() {
        typedCommand[0] = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e27160acb4484bL, "jetbrains.mps.console.base.structure.CommandHolder")));
        if (command != null) {
          addNodeImports(command);
          SLinkOperations.setTarget(typedCommand[0], MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e27160acb4484bL, 0x4e27160acb44924L, "command"), SNodeOperations.copyNode(SLinkOperations.getTarget(SLinkOperations.getTarget(myRoot, MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x15fb34051f725a2cL, 0x15fb34051f725bb1L, "commandHolder")), MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e27160acb4484bL, 0x4e27160acb44924L, "command"))));
          SLinkOperations.setTarget(SLinkOperations.getTarget(myRoot, MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x15fb34051f725a2cL, 0x15fb34051f725bb1L, "commandHolder")), MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e27160acb4484bL, 0x4e27160acb44924L, "command"), SNodeOperations.copyNode(command));
        }
      }
    });
    BHReflection.invoke(SLinkOperations.getTarget(SLinkOperations.getTarget(myRoot, MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x15fb34051f725a2cL, 0x15fb34051f725bb1L, "commandHolder")), MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e27160acb4484bL, 0x4e27160acb44924L, "command")), SMethodTrimmedId.create("execute", null, "5WvH$QO9bva"), getConsoleContext(), getConsoleStream(), new Runnable() {
      public void run() {
        myProject.getRepository().getModelAccess().executeCommand(new Runnable() {
          public void run() {
            ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(myRoot, MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x15fb34051f725a2cL, 0x15fb34051f725bafL, "history")), MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0xa835f28c1aa02beL, 0x63da33792b5df49aL, "item"))).addElement(SNodeOperations.copyNode(SLinkOperations.getTarget(myRoot, MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x15fb34051f725a2cL, 0x15fb34051f725bb1L, "commandHolder"))));
            SNodeOperations.deleteNode(SLinkOperations.getTarget(SLinkOperations.getTarget(myRoot, MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x15fb34051f725a2cL, 0x15fb34051f725bb1L, "commandHolder")), MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e27160acb4484bL, 0x4e27160acb44924L, "command")));
            check_6q36mf_a2a0a0a0a2a0d0oc(executeBefore);
          }
        });
      }
    }, new Runnable() {
      public void run() {
        myProject.getRepository().getModelAccess().executeCommand(new Runnable() {
          public void run() {
            SLinkOperations.setTarget(SLinkOperations.getTarget(myRoot, MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x15fb34051f725a2cL, 0x15fb34051f725bb1L, "commandHolder")), MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e27160acb4484bL, 0x4e27160acb44924L, "command"), SLinkOperations.getTarget(typedCommand[0], MetaAdapterFactory.getContainmentLink(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e27160acb4484bL, 0x4e27160acb44924L, "command")));
            check_6q36mf_a1a0a0a0a3a0d0oc(executeAfter);
          }
        });
      }
    });
  }

  protected static Logger LOG = LogManager.getLogger(BaseConsoleTab.class);
  private static void check_6q36mf_a71a03(Highlighter checkedDotOperand, UIEditorComponent myEditor) {
    if (null != checkedDotOperand) {
      checkedDotOperand.addAdditionalEditorComponent(myEditor);
    }

  }
  private static SNode check_6q36mf_a0d0a0a5ac(SNodeReference checkedDotOperand, MPSProject myProject) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.resolve(myProject.getRepository());
    }
    return null;
  }
  private static boolean check_6q36mf_a0a4a0a0f25(SModelReference checkedDotOperand, SModel myModel) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.equals(myModel.getReference());
    }
    return false;
  }
  private static SModelReference check_6q36mf_a0a0e0a0a5ac(SNodeReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getModelReference();
    }
    return null;
  }
  private static void check_6q36mf_a0a0e0a0a5ac_0(PasteProvider checkedDotOperand, DataContext context) {
    if (null != checkedDotOperand) {
      checkedDotOperand.performPaste(context);
    }

  }
  private static SNode createTextResponseItem_6q36mf_a0a0a1a1a0a0a0a26(Object p0) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e3b035171b35c38L, "jetbrains.mps.console.base.structure.TextResponseItem"), null, null, false);
    n1.setProperty(MetaAdapterFactory.getProperty(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e3b035171b35c38L, 0x4e3b035171b35d11L, "text"), p0 + "");
    return n1;
  }
  private static void check_6q36mf_a2a0a0a0a2a0d0oc(Runnable checkedDotOperand) {
    if (null != checkedDotOperand) {
      checkedDotOperand.run();
    }

  }
  private static void check_6q36mf_a1a0a0a0a3a0d0oc(Runnable checkedDotOperand) {
    if (null != checkedDotOperand) {
      checkedDotOperand.run();
    }

  }
  private static <T> T as_6q36mf_a0a0a1a0a0a0a0ab(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
