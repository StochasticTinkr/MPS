package jetbrains.mps.console.base.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractPrintExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BLCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BLExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Command = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandHolderRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConsoleRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExceptionHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratedCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HelpCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HelpConceptReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_History = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HistoryItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IActionHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IClickable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_INodeWithReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InterpretedCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModifiedCommandHistoryItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NewLineResponseItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeReferencePresentation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeReferenceString = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeResponseItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeWithClosure = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputConsoleRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PastedNodeReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintNodeExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintNodeReferenceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintSequenceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintTextExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProjectExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProjectScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Response = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResponseItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextResponseItem = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractPrintExpression;
      case 1:
        return props_BLCommand;
      case 2:
        return props_BLExpression;
      case 3:
        return props_Command;
      case 4:
        return props_CommandHolder;
      case 5:
        return props_CommandHolderRef;
      case 6:
        return props_ConsoleRoot;
      case 7:
        return props_ExceptionHolder;
      case 8:
        return props_GeneratedCommand;
      case 9:
        return props_HelpCommand;
      case 10:
        return props_HelpConceptReference;
      case 11:
        return props_History;
      case 12:
        return props_HistoryItem;
      case 13:
        return props_IActionHolder;
      case 14:
        return props_IClickable;
      case 15:
        return props_INodeWithReference;
      case 16:
        return props_InterpretedCommand;
      case 17:
        return props_ModifiedCommandHistoryItem;
      case 18:
        return props_NewLineResponseItem;
      case 19:
        return props_NodeReferencePresentation;
      case 20:
        return props_NodeReferenceString;
      case 21:
        return props_NodeResponseItem;
      case 22:
        return props_NodeWithClosure;
      case 23:
        return props_OutputConsoleRoot;
      case 24:
        return props_PastedNodeReference;
      case 25:
        return props_PrintExpression;
      case 26:
        return props_PrintNodeExpression;
      case 27:
        return props_PrintNodeReferenceExpression;
      case 28:
        return props_PrintSequenceExpression;
      case 29:
        return props_PrintTextExpression;
      case 30:
        return props_ProjectExpression;
      case 31:
        return props_ProjectScope;
      case 32:
        return props_Response;
      case 33:
        return props_ResponseItem;
      case 34:
        return props_TextResponseItem;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
