package jetbrains.mps.console.base.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractPrintExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BLCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BLExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Command = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConsoleRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExceptionHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratedCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HelpCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HelpConceptReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_History = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HistoryItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IActionHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IClickable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_INodeWithReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InterpretedCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModifiedCommandHistoryItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NewLineResponseItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeReferencePresentation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeReferenceString = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeResponseItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeWithClosure = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputConsoleRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PastedNodeReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintNodeExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintNodeReferenceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintSequenceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintTextExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProjectExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProjectScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Response = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResponseItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextResponseItem = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractPrintExpression:
        return props_AbstractPrintExpression;
      case LanguageConceptSwitch.BLCommand:
        return props_BLCommand;
      case LanguageConceptSwitch.BLExpression:
        return props_BLExpression;
      case LanguageConceptSwitch.Command:
        return props_Command;
      case LanguageConceptSwitch.CommandHolder:
        return props_CommandHolder;
      case LanguageConceptSwitch.ConsoleRoot:
        return props_ConsoleRoot;
      case LanguageConceptSwitch.ExceptionHolder:
        return props_ExceptionHolder;
      case LanguageConceptSwitch.GeneratedCommand:
        return props_GeneratedCommand;
      case LanguageConceptSwitch.HelpCommand:
        return props_HelpCommand;
      case LanguageConceptSwitch.HelpConceptReference:
        return props_HelpConceptReference;
      case LanguageConceptSwitch.History:
        return props_History;
      case LanguageConceptSwitch.HistoryItem:
        return props_HistoryItem;
      case LanguageConceptSwitch.IActionHolder:
        return props_IActionHolder;
      case LanguageConceptSwitch.IClickable:
        return props_IClickable;
      case LanguageConceptSwitch.INodeWithReference:
        return props_INodeWithReference;
      case LanguageConceptSwitch.InterpretedCommand:
        return props_InterpretedCommand;
      case LanguageConceptSwitch.ModifiedCommandHistoryItem:
        return props_ModifiedCommandHistoryItem;
      case LanguageConceptSwitch.NewLineResponseItem:
        return props_NewLineResponseItem;
      case LanguageConceptSwitch.NodeReferencePresentation:
        return props_NodeReferencePresentation;
      case LanguageConceptSwitch.NodeReferenceString:
        return props_NodeReferenceString;
      case LanguageConceptSwitch.NodeResponseItem:
        return props_NodeResponseItem;
      case LanguageConceptSwitch.NodeWithClosure:
        return props_NodeWithClosure;
      case LanguageConceptSwitch.OutputConsoleRoot:
        return props_OutputConsoleRoot;
      case LanguageConceptSwitch.PastedNodeReference:
        return props_PastedNodeReference;
      case LanguageConceptSwitch.PrintExpression:
        return props_PrintExpression;
      case LanguageConceptSwitch.PrintNodeExpression:
        return props_PrintNodeExpression;
      case LanguageConceptSwitch.PrintNodeReferenceExpression:
        return props_PrintNodeReferenceExpression;
      case LanguageConceptSwitch.PrintSequenceExpression:
        return props_PrintSequenceExpression;
      case LanguageConceptSwitch.PrintTextExpression:
        return props_PrintTextExpression;
      case LanguageConceptSwitch.ProjectExpression:
        return props_ProjectExpression;
      case LanguageConceptSwitch.ProjectScope:
        return props_ProjectScope;
      case LanguageConceptSwitch.Response:
        return props_Response;
      case LanguageConceptSwitch.ResponseItem:
        return props_ResponseItem;
      case LanguageConceptSwitch.TextResponseItem:
        return props_TextResponseItem;
    }
    return null;
  }
}
