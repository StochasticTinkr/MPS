package jetbrains.mps.console.base.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractPrintExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BLCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BLExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Command = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConsoleRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExceptionHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratedCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HelpCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HelpConceptReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_History = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HistoryItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IActionHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IClickable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_INodeWithReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InterpretedCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModifiedCommandHistoryItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NewLineResponseItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeReferencePresentation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeReferenceString = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeResponseItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeWithClosure = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputConsoleRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PastedNodeReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintNodeExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintNodeReferenceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintSequenceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintTextExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProjectExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProjectScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Response = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResponseItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextResponseItem = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_lpa09p_a0jb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractPrintExpression;
          }
          break;
        case 1:
          if (true) {
            return props_BLCommand;
          }
          break;
        case 2:
          if (true) {
            return props_BLExpression;
          }
          break;
        case 3:
          if (true) {
            return props_Command;
          }
          break;
        case 4:
          if (true) {
            return props_CommandHolder;
          }
          break;
        case 5:
          if (true) {
            return props_ConsoleRoot;
          }
          break;
        case 6:
          if (true) {
            return props_ExceptionHolder;
          }
          break;
        case 7:
          if (true) {
            return props_GeneratedCommand;
          }
          break;
        case 8:
          if (true) {
            return props_HelpCommand;
          }
          break;
        case 9:
          if (true) {
            return props_HelpConceptReference;
          }
          break;
        case 10:
          if (true) {
            return props_History;
          }
          break;
        case 11:
          if (true) {
            return props_HistoryItem;
          }
          break;
        case 12:
          if (true) {
            return props_IActionHolder;
          }
          break;
        case 13:
          if (true) {
            return props_IClickable;
          }
          break;
        case 14:
          if (true) {
            return props_INodeWithReference;
          }
          break;
        case 15:
          if (true) {
            return props_InterpretedCommand;
          }
          break;
        case 16:
          if (true) {
            return props_ModifiedCommandHistoryItem;
          }
          break;
        case 17:
          if (true) {
            return props_NewLineResponseItem;
          }
          break;
        case 18:
          if (true) {
            return props_NodeReferencePresentation;
          }
          break;
        case 19:
          if (true) {
            return props_NodeReferenceString;
          }
          break;
        case 20:
          if (true) {
            return props_NodeResponseItem;
          }
          break;
        case 21:
          if (true) {
            return props_NodeWithClosure;
          }
          break;
        case 22:
          if (true) {
            return props_OutputConsoleRoot;
          }
          break;
        case 23:
          if (true) {
            return props_PastedNodeReference;
          }
          break;
        case 24:
          if (true) {
            return props_PrintExpression;
          }
          break;
        case 25:
          if (true) {
            return props_PrintNodeExpression;
          }
          break;
        case 26:
          if (true) {
            return props_PrintNodeReferenceExpression;
          }
          break;
        case 27:
          if (true) {
            return props_PrintSequenceExpression;
          }
          break;
        case 28:
          if (true) {
            return props_PrintTextExpression;
          }
          break;
        case 29:
          if (true) {
            return props_ProjectExpression;
          }
          break;
        case 30:
          if (true) {
            return props_ProjectScope;
          }
          break;
        case 31:
          if (true) {
            return props_Response;
          }
          break;
        case 32:
          if (true) {
            return props_ResponseItem;
          }
          break;
        case 33:
          if (true) {
            return props_TextResponseItem;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_lpa09p_a0jb = buildConceptIndices(MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x6c8954f469a7c420L, "AbstractPrintExpression"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4bd43869e610f3e9L, "BLCommand"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x6a40a3596560a9d9L, "BLExpression"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x5f1fb64db424879fL, "Command"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e27160acb4484bL, "CommandHolder"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x15fb34051f725a2cL, "ConsoleRoot"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x5b02f032bc93b714L, "ExceptionHolder"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x188f8efcef689c71L, "GeneratedCommand"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x690b986730a1f80L, "HelpCommand"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x60279080c2f3b209L, "HelpConceptReference"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0xa835f28c1aa02beL, "History"), MetaAdapterFactory.getInterfaceConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x5f195a051bd47defL, "HistoryItem"), MetaAdapterFactory.getInterfaceConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x7633e0214d3a5856L, "IActionHolder"), MetaAdapterFactory.getInterfaceConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x2095ece53bb9f5b0L, "IClickable"), MetaAdapterFactory.getInterfaceConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x36ac6f29ae8c1fb5L, "INodeWithReference"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x188f8efcef689c65L, "InterpretedCommand"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x9992dadc6de20a7L, "ModifiedCommandHistoryItem"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e3b035171b35d30L, "NewLineResponseItem"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x2095ece53bbb600cL, "NodeReferencePresentation"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x2095ece53ba81265L, "NodeReferenceString"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e3b035171b35c14L, "NodeResponseItem"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0xf6d4d958ec2f2c6L, "NodeWithClosure"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x131ec6f2097ff75fL, "OutputConsoleRoot"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x51132a123c89fa7eL, "PastedNodeReference"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x6979f0787b2a9377L, "PrintExpression"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4c7a26b31bd03b59L, "PrintNodeExpression"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x5f195a051bd9bddcL, "PrintNodeReferenceExpression"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x6979f0787b7db64fL, "PrintSequenceExpression"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x7417cca3eb1feca9L, "PrintTextExpression"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0xa721a59126bb908L, "ProjectExpression"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x3bc64421763adda2L, "ProjectScope"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e3b035171a5ba02L, "Response"), MetaAdapterFactory.getInterfaceConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e3b035171b3583cL, "ResponseItem"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e3b035171b35c38L, "TextResponseItem"));
}
