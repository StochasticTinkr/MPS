package jetbrains.mps.console.base.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myCommandHolder__BehaviorDescriptor = new CommandHolder__BehaviorDescriptor();
  private final BHDescriptor myHelpCommand__BehaviorDescriptor = new HelpCommand__BehaviorDescriptor();
  private final BHDescriptor myModifiedCommandHistoryItem__BehaviorDescriptor = new ModifiedCommandHistoryItem__BehaviorDescriptor();
  private final BHDescriptor myProjectExpression__BehaviorDescriptor = new ProjectExpression__BehaviorDescriptor();
  private final BHDescriptor myNodeWithClosure__BehaviorDescriptor = new NodeWithClosure__BehaviorDescriptor();
  private final BHDescriptor myInterpretedCommand__BehaviorDescriptor = new InterpretedCommand__BehaviorDescriptor();
  private final BHDescriptor myGeneratedCommand__BehaviorDescriptor = new GeneratedCommand__BehaviorDescriptor();
  private final BHDescriptor myNodeReferenceString__BehaviorDescriptor = new NodeReferenceString__BehaviorDescriptor();
  private final BHDescriptor myNodeReferencePresentation__BehaviorDescriptor = new NodeReferencePresentation__BehaviorDescriptor();
  private final BHDescriptor myINodeWithReference__BehaviorDescriptor = new INodeWithReference__BehaviorDescriptor();
  private final BHDescriptor myBLCommand__BehaviorDescriptor = new BLCommand__BehaviorDescriptor();
  private final BHDescriptor myPastedNodeReference__BehaviorDescriptor = new PastedNodeReference__BehaviorDescriptor();
  private final BHDescriptor myExceptionHolder__BehaviorDescriptor = new ExceptionHolder__BehaviorDescriptor();
  private final BHDescriptor myCommand__BehaviorDescriptor = new Command__BehaviorDescriptor();
  private final BHDescriptor myPrintExpression__BehaviorDescriptor = new PrintExpression__BehaviorDescriptor();
  private final BHDescriptor myBLExpression__BehaviorDescriptor = new BLExpression__BehaviorDescriptor();
  private final BHDescriptor myAbstractPrintExpression__BehaviorDescriptor = new AbstractPrintExpression__BehaviorDescriptor();
  private final BHDescriptor myIActionHolder__BehaviorDescriptor = new IActionHolder__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0v.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myAbstractPrintExpression__BehaviorDescriptor;
          }
          break;
        case 1:
          if (true) {
            return myBLCommand__BehaviorDescriptor;
          }
          break;
        case 2:
          if (true) {
            return myBLExpression__BehaviorDescriptor;
          }
          break;
        case 3:
          if (true) {
            return myCommand__BehaviorDescriptor;
          }
          break;
        case 4:
          if (true) {
            return myCommandHolder__BehaviorDescriptor;
          }
          break;
        case 5:
          if (true) {
            return myExceptionHolder__BehaviorDescriptor;
          }
          break;
        case 6:
          if (true) {
            return myGeneratedCommand__BehaviorDescriptor;
          }
          break;
        case 7:
          if (true) {
            return myHelpCommand__BehaviorDescriptor;
          }
          break;
        case 8:
          if (true) {
            return myIActionHolder__BehaviorDescriptor;
          }
          break;
        case 9:
          if (true) {
            return myINodeWithReference__BehaviorDescriptor;
          }
          break;
        case 10:
          if (true) {
            return myInterpretedCommand__BehaviorDescriptor;
          }
          break;
        case 11:
          if (true) {
            return myModifiedCommandHistoryItem__BehaviorDescriptor;
          }
          break;
        case 12:
          if (true) {
            return myNodeReferencePresentation__BehaviorDescriptor;
          }
          break;
        case 13:
          if (true) {
            return myNodeReferenceString__BehaviorDescriptor;
          }
          break;
        case 14:
          if (true) {
            return myNodeWithClosure__BehaviorDescriptor;
          }
          break;
        case 15:
          if (true) {
            return myPastedNodeReference__BehaviorDescriptor;
          }
          break;
        case 16:
          if (true) {
            return myPrintExpression__BehaviorDescriptor;
          }
          break;
        case 17:
          if (true) {
            return myProjectExpression__BehaviorDescriptor;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0v = buildConceptIndices(MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x6c8954f469a7c420L, "jetbrains.mps.console.base.structure.AbstractPrintExpression"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4bd43869e610f3e9L, "jetbrains.mps.console.base.structure.BLCommand"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x6a40a3596560a9d9L, "jetbrains.mps.console.base.structure.BLExpression"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x5f1fb64db424879fL, "jetbrains.mps.console.base.structure.Command"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x4e27160acb4484bL, "jetbrains.mps.console.base.structure.CommandHolder"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x5b02f032bc93b714L, "jetbrains.mps.console.base.structure.ExceptionHolder"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x188f8efcef689c71L, "jetbrains.mps.console.base.structure.GeneratedCommand"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x690b986730a1f80L, "jetbrains.mps.console.base.structure.HelpCommand"), MetaAdapterFactory.getInterfaceConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x7633e0214d3a5856L, "jetbrains.mps.console.base.structure.IActionHolder"), MetaAdapterFactory.getInterfaceConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x36ac6f29ae8c1fb5L, "jetbrains.mps.console.base.structure.INodeWithReference"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x188f8efcef689c65L, "jetbrains.mps.console.base.structure.InterpretedCommand"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x9992dadc6de20a7L, "jetbrains.mps.console.base.structure.ModifiedCommandHistoryItem"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x2095ece53bbb600cL, "jetbrains.mps.console.base.structure.NodeReferencePresentation"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x2095ece53ba81265L, "jetbrains.mps.console.base.structure.NodeReferenceString"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0xf6d4d958ec2f2c6L, "jetbrains.mps.console.base.structure.NodeWithClosure"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x51132a123c89fa7eL, "jetbrains.mps.console.base.structure.PastedNodeReference"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x6979f0787b2a9377L, "jetbrains.mps.console.base.structure.PrintExpression"), MetaAdapterFactory.getConcept(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0xa721a59126bb908L, "jetbrains.mps.console.base.structure.ProjectExpression"));
}
