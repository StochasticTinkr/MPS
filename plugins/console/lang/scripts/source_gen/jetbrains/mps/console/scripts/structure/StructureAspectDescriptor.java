package jetbrains.mps.console.scripts.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(4);
  /*package*/ final ConceptDescriptor myConceptAbstractConsoleScript = new ConceptDescriptorBuilder("jetbrains.mps.console.scripts.structure.AbstractConsoleScript", MetaIdFactory.conceptId(0xf26691d20def4c06L, 0xaec62cb90c4af0a4L, 0x1811ccc46ac3f6d9L)).interface_().parents("jetbrains.mps.baseLanguage.structure.IValidIdentifier").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL)).create();
  /*package*/ final ConceptDescriptor myConceptConsoleScript = new ConceptDescriptorBuilder("jetbrains.mps.console.scripts.structure.ConsoleScript", MetaIdFactory.conceptId(0xf26691d20def4c06L, 0xaec62cb90c4af0a4L, 0x1811ccc46ac3f6deL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.console.scripts.structure.AbstractConsoleScript").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xf26691d20def4c06L, 0xaec62cb90c4af0a4L, 0x1811ccc46ac3f6d9L)).childDescriptors(new ConceptDescriptorBuilder.Link(1734392475491235551L, "command", MetaIdFactory.conceptId(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x5f1fb64db424879fL), true, true, false)).children(new String[]{"command"}, new boolean[]{true}).create();
  /*package*/ final ConceptDescriptor myConceptExecute = new ConceptDescriptorBuilder("jetbrains.mps.console.scripts.structure.Execute", MetaIdFactory.conceptId(0xf26691d20def4c06L, 0xaec62cb90c4af0a4L, 0x1811ccc46ac3dc6aL)).super_("jetbrains.mps.console.base.structure.GeneratedCommand").super_(MetaIdFactory.conceptId(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x188f8efcef689c71L)).parents("jetbrains.mps.console.base.structure.GeneratedCommand").parentIds(MetaIdFactory.conceptId(0xde1ad86d6e504a02L, 0xb306d4d17f64c375L, 0x188f8efcef689c71L)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(1734392475491228779L, "script", MetaIdFactory.conceptId(0xf26691d20def4c06L, 0xaec62cb90c4af0a4L, 0x1811ccc46ac3f6d9L), false)).references("script").alias("#exec", "execute a script").create();
  /*package*/ final ConceptDescriptor myConceptRefactorOperation = new ConceptDescriptorBuilder("jetbrains.mps.console.scripts.structure.RefactorOperation", MetaIdFactory.conceptId(0xf26691d20def4c06L, 0xaec62cb90c4af0a4L, 0x20fd2063d7de993eL)).super_("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation").super_(MetaIdFactory.conceptId(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x1188372895aL)).parents("jetbrains.mps.baseLanguage.collections.structure.InternalSequenceOperation", "jetbrains.mps.lang.smodel.query.structure.OperationHelpProvider").parentIds(MetaIdFactory.conceptId(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x1188372895aL), MetaIdFactory.conceptId(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x5252d9021b8b6c03L)).alias("refactor", "perform changes on selected nodes").create();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptAbstractConsoleScript.getId(), 0);
    myIndexMap.put(myConceptConsoleScript.getId(), 1);
    myIndexMap.put(myConceptExecute.getId(), 2);
    myIndexMap.put(myConceptRefactorOperation.getId(), 3);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractConsoleScript, myConceptConsoleScript, myConceptExecute, myConceptRefactorOperation);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptAbstractConsoleScript;
      case 1:
        return myConceptConsoleScript;
      case 2:
        return myConceptExecute;
      case 3:
        return myConceptRefactorOperation;
      default:
        throw new IllegalStateException();
    }
  }
}
