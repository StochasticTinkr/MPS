package jetbrains.mps.console.ideCommands.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbsractMake = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionCallDeclaredParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionCallGlobalParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionCallParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CallActionExpression = new ConceptPresentationBuilder().shortDesc("call an IDE action with custom parameters").create();
  private final ConceptPresentation props_Clean = new ConceptPresentationBuilder().shortDesc("clean files *.generated").create();
  private final ConceptPresentation props_ClickableGenerator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GlobalScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GlobalStatisticTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_INodeSetReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStatisticsTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Make = new ConceptPresentationBuilder().shortDesc("make models").create();
  private final ConceptPresentation props_ModelProperties = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelStatisticsTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModuleProperties = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OfAspectOperation = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x5252d9021b8b45a8L, 0x5252d9021b8c25b0L, "requestedAspect_old"), MetaAdapterFactory.getReferenceLink(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x5252d9021b8b45a8L, 0x7cd422dbfa7b06f8L, "requestedAspect")).shortDesc("filter models by their aspect").create();
  private final ConceptPresentation props_ProjectStatisticsTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RebuildProjectCommand = new ConceptPresentationBuilder().shortDesc("clean and make").create();
  private final ConceptPresentation props_RemoveGenSources = new ConceptPresentationBuilder().shortDesc("remove source_gen").create();
  private final ConceptPresentation props_ShowBrokenReferences = new ConceptPresentationBuilder().shortDesc("show broken references").create();
  private final ConceptPresentation props_ShowExpression = new ConceptPresentationBuilder().shortDesc("show in usage view").create();
  private final ConceptPresentation props_ShowGenPlan = new ConceptPresentationBuilder().shortDesc("show the generation plan").create();
  private final ConceptPresentation props_StatCommand = new ConceptPresentationBuilder().shortDesc("display useful statistics").create();
  private final ConceptPresentation props_SubtreeStatisticsTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnloadModelsCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WithDependencies = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbsractMake:
        return props_AbsractMake;
      case LanguageConceptSwitch.ActionCallDeclaredParameter:
        return props_ActionCallDeclaredParameter;
      case LanguageConceptSwitch.ActionCallGlobalParameter:
        return props_ActionCallGlobalParameter;
      case LanguageConceptSwitch.ActionCallParameter:
        return props_ActionCallParameter;
      case LanguageConceptSwitch.CallActionExpression:
        return props_CallActionExpression;
      case LanguageConceptSwitch.Clean:
        return props_Clean;
      case LanguageConceptSwitch.ClickableGenerator:
        return props_ClickableGenerator;
      case LanguageConceptSwitch.GlobalScope:
        return props_GlobalScope;
      case LanguageConceptSwitch.GlobalStatisticTarget:
        return props_GlobalStatisticTarget;
      case LanguageConceptSwitch.INodeSetReference:
        return props_INodeSetReference;
      case LanguageConceptSwitch.IStatisticsTarget:
        return props_IStatisticsTarget;
      case LanguageConceptSwitch.Make:
        return props_Make;
      case LanguageConceptSwitch.ModelProperties:
        return props_ModelProperties;
      case LanguageConceptSwitch.ModelReference:
        return props_ModelReference;
      case LanguageConceptSwitch.ModelStatisticsTarget:
        return props_ModelStatisticsTarget;
      case LanguageConceptSwitch.ModuleProperties:
        return props_ModuleProperties;
      case LanguageConceptSwitch.NodeReference:
        return props_NodeReference;
      case LanguageConceptSwitch.OfAspectOperation:
        return props_OfAspectOperation;
      case LanguageConceptSwitch.ProjectStatisticsTarget:
        return props_ProjectStatisticsTarget;
      case LanguageConceptSwitch.RebuildProjectCommand:
        return props_RebuildProjectCommand;
      case LanguageConceptSwitch.RemoveGenSources:
        return props_RemoveGenSources;
      case LanguageConceptSwitch.ShowBrokenReferences:
        return props_ShowBrokenReferences;
      case LanguageConceptSwitch.ShowExpression:
        return props_ShowExpression;
      case LanguageConceptSwitch.ShowGenPlan:
        return props_ShowGenPlan;
      case LanguageConceptSwitch.StatCommand:
        return props_StatCommand;
      case LanguageConceptSwitch.SubtreeStatisticsTarget:
        return props_SubtreeStatisticsTarget;
      case LanguageConceptSwitch.UnloadModelsCommand:
        return props_UnloadModelsCommand;
      case LanguageConceptSwitch.WithDependencies:
        return props_WithDependencies;
    }
    return null;
  }
}
