package jetbrains.mps.console.ideCommands.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbsractMake = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionCallDeclaredParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionCallGlobalParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionCallParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CallActionExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Clean = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClickableGenerator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GlobalScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GlobalStatisticTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_INodeSetReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStatisticsTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Make = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelProperties = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelStatisticsTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModuleProperties = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OfAspectOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProjectStatisticsTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RebuildProjectCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RemoveGenSources = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShowBrokenReferences = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShowExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShowGenPlan = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StatCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubtreeStatisticsTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnloadModelsCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WithDependencies = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_lpa09p_a0db.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbsractMake;
          }
          break;
        case 1:
          if (true) {
            return props_ActionCallDeclaredParameter;
          }
          break;
        case 2:
          if (true) {
            return props_ActionCallGlobalParameter;
          }
          break;
        case 3:
          if (true) {
            return props_ActionCallParameter;
          }
          break;
        case 4:
          if (true) {
            return props_CallActionExpression;
          }
          break;
        case 5:
          if (true) {
            return props_Clean;
          }
          break;
        case 6:
          if (true) {
            return props_ClickableGenerator;
          }
          break;
        case 7:
          if (true) {
            return props_GlobalScope;
          }
          break;
        case 8:
          if (true) {
            return props_GlobalStatisticTarget;
          }
          break;
        case 9:
          if (true) {
            return props_INodeSetReference;
          }
          break;
        case 10:
          if (true) {
            return props_IStatisticsTarget;
          }
          break;
        case 11:
          if (true) {
            return props_Make;
          }
          break;
        case 12:
          if (true) {
            return props_ModelProperties;
          }
          break;
        case 13:
          if (true) {
            return props_ModelReference;
          }
          break;
        case 14:
          if (true) {
            return props_ModelStatisticsTarget;
          }
          break;
        case 15:
          if (true) {
            return props_ModuleProperties;
          }
          break;
        case 16:
          if (true) {
            return props_NodeReference;
          }
          break;
        case 17:
          if (true) {
            return props_OfAspectOperation;
          }
          break;
        case 18:
          if (true) {
            return props_ProjectStatisticsTarget;
          }
          break;
        case 19:
          if (true) {
            return props_RebuildProjectCommand;
          }
          break;
        case 20:
          if (true) {
            return props_RemoveGenSources;
          }
          break;
        case 21:
          if (true) {
            return props_ShowBrokenReferences;
          }
          break;
        case 22:
          if (true) {
            return props_ShowExpression;
          }
          break;
        case 23:
          if (true) {
            return props_ShowGenPlan;
          }
          break;
        case 24:
          if (true) {
            return props_StatCommand;
          }
          break;
        case 25:
          if (true) {
            return props_SubtreeStatisticsTarget;
          }
          break;
        case 26:
          if (true) {
            return props_UnloadModelsCommand;
          }
          break;
        case 27:
          if (true) {
            return props_WithDependencies;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_lpa09p_a0db = buildConceptIndices(MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x276b371e77c0a29aL, "AbsractMake"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x4d7759afce9587a7L, "ActionCallDeclaredParameter"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x4d7759afce9587a9L, "ActionCallGlobalParameter"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x4d7759afce9587abL, "ActionCallParameter"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x4d7759afce9587adL, "CallActionExpression"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x276b371e74f88509L, "Clean"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x360b134fc0467d73L, "ClickableGenerator"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x3bc64421763add42L, "GlobalScope"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x67f2bafb7a579cb8L, "GlobalStatisticTarget"), MetaAdapterFactory.getInterfaceConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x4843e803da101441L, "INodeSetReference"), MetaAdapterFactory.getInterfaceConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x67f2bafb7a579cb2L, "IStatisticsTarget"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x4d7759afcebfef23L, "Make"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x4d7759afce9587b0L, "ModelProperties"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x6c8954f469900928L, "ModelReference"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x67f2bafb7a5cad96L, "ModelStatisticsTarget"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x4d7759afce9587b3L, "ModuleProperties"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x6c8954f4699443afL, "NodeReference"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x5252d9021b8b45a8L, "OfAspectOperation"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x67f2bafb7a579e36L, "ProjectStatisticsTarget"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x75bb0160f191df02L, "RebuildProjectCommand"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x276b371e77c0a11bL, "RemoveGenSources"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x1cf75b72b0ac828cL, "ShowBrokenReferences"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x75bb0160f191d79fL, "ShowExpression"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x61f2dd6de47f85e4L, "ShowGenPlan"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x67f2bafb7a558c98L, "StatCommand"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x1cf75b72b0b3962bL, "SubtreeStatisticsTarget"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x75bb0160f191ddffL, "UnloadModelsCommand"), MetaAdapterFactory.getConcept(0xa5e4de5346a344daL, 0xaab368fdf1c34ed0L, 0x826e97ca237a1b1L, "WithDependencies"));
}
