package jetbrains.mps.nodeEditor.cells.jetpad;

/*Generated by MPS */

import jetbrains.jetpad.model.property.ValueProperty;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.smodel.ModelAccessHelper;
import jetbrains.mps.util.Computable;
import jetbrains.mps.smodel.NodeReadAccessCasterInEditor;

public abstract class ReadableModelProperty<T> extends ValueProperty<T> {
  protected final EditorContext myEditorContext;

  public ReadableModelProperty(EditorContext editorContext) {
    assert editorContext != null;
    myEditorContext = editorContext;
  }

  private T safeGetModelPropertyValue() {
    ModelAccessHelper ma = new ModelAccessHelper(myEditorContext.getRepository());
    return ma.runReadAction(new Computable<T>() {
      public T compute() {
        return NodeReadAccessCasterInEditor.runCleanPropertyAccessAction(new Computable<T>() {
          public T compute() {
            return getModelPropertyValue();
          }
        });
      }
    });
  }

  protected abstract T getModelPropertyValue();

  public void synchronizeViewWithModel() {
    set(safeGetModelPropertyValue());
  }
}
