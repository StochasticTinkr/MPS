package jetbrains.mps.lang.editor.diagram.testLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Diagram1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Diagram2 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InputPort = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeWithName = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeWithPortQueries = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeWithPorts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeWithSize = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputPort = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputToInputPortConnector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RectangleNode = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Diagram1:
        return props_Diagram1;
      case LanguageConceptSwitch.Diagram2:
        return props_Diagram2;
      case LanguageConceptSwitch.InputPort:
        return props_InputPort;
      case LanguageConceptSwitch.Node:
        return props_Node;
      case LanguageConceptSwitch.NodeWithName:
        return props_NodeWithName;
      case LanguageConceptSwitch.NodeWithPortQueries:
        return props_NodeWithPortQueries;
      case LanguageConceptSwitch.NodeWithPorts:
        return props_NodeWithPorts;
      case LanguageConceptSwitch.NodeWithSize:
        return props_NodeWithSize;
      case LanguageConceptSwitch.OutputPort:
        return props_OutputPort;
      case LanguageConceptSwitch.OutputToInputPortConnector:
        return props_OutputToInputPortConnector;
      case LanguageConceptSwitch.RectangleNode:
        return props_RectangleNode;
    }
    return null;
  }
}
