package jetbrains.mps.lang.editor.diagram.tests;

/*Generated by MPS */

import jetbrains.mps.MPSLaunch;
import jetbrains.mps.lang.test.runtime.BaseTransformationTest;
import org.junit.ClassRule;
import jetbrains.mps.lang.test.runtime.TestParametersCache;
import org.junit.Test;
import jetbrains.mps.lang.test.runtime.BaseEditorTestBody;
import jetbrains.mps.lang.test.runtime.TransformationTest;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.mps.smodel.ModelAccess;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import junit.framework.Assert;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.views.NodeDecoratorView;

@MPSLaunch
public class BlockHasNoDecoratorTest_Test extends BaseTransformationTest {
  @ClassRule
  public static final TestParametersCache ourParamCache = new TestParametersCache(BlockHasNoDecoratorTest_Test.class, "${mps_home}", "r:e41d7e03-7ef3-4161-a48a-e48d8152e422(jetbrains.mps.lang.editor.diagram.tests@tests)", false);

  public BlockHasNoDecoratorTest_Test() {
    super(ourParamCache);
  }

  @Test
  public void test_BlockHasNoDecoratorTest() throws Throwable {
    new BlockHasNoDecoratorTest_Test.TestBody(this).testMethod();
  }

  /*package*/ static class TestBody extends BaseEditorTestBody {

    /*package*/ TestBody(TransformationTest owner) {
      super(owner);
    }

    @Override
    public void testMethodImpl() throws Exception {
      initEditorComponent("83003444452611280", "83003444452611284");
      final Wrappers._T<Mapper> descendantMapper = new Wrappers._T<Mapper>();
      ModelAccess.instance().runReadAction(new Runnable() {
        public void run() {
          descendantMapper.value = DecoratorTestRunner.getMapper(SNodeOperations.cast(getNodeById("83003444452611281"), SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x50560c9658e49c5L, 0xb8e79e4db4c7e97fL, "jetbrains.mps.lang.editor.diagram.testLanguage"), 0xb6a495df3833bdeL, "NodeWithName"))), getEditorComponent());
        }
      });

      Assert.assertTrue(descendantMapper.value != null);
      Assert.assertTrue(descendantMapper.value.getTarget() != null);
      Assert.assertTrue(descendantMapper.value.getTarget() instanceof NodeDecoratorView);
      Assert.assertFalse(((NodeDecoratorView) descendantMapper.value.getTarget()).hasError.get());
    }
  }
}
