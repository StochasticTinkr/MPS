package jetbrains.mps.testHybridEditor.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_Block = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BlockExt = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BlockInstance = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Connector = new ConceptPropsBuilder().icon("connector.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_ConnectorEndInstance = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConnectorInstance = new ConceptPropsBuilder().icon("connector.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_Diagram = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InputPort = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MetaBlock = new ConceptPropsBuilder().icon("block.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_MetaPort = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OutputPort = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0m.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_Block;
          }
          break;
        case 1:
          if (true) {
            return props_BlockExt;
          }
          break;
        case 2:
          if (true) {
            return props_BlockInstance;
          }
          break;
        case 3:
          if (true) {
            return props_Connector;
          }
          break;
        case 4:
          if (true) {
            return props_ConnectorEndInstance;
          }
          break;
        case 5:
          if (true) {
            return props_ConnectorInstance;
          }
          break;
        case 6:
          if (true) {
            return props_Diagram;
          }
          break;
        case 7:
          if (true) {
            return props_InputPort;
          }
          break;
        case 8:
          if (true) {
            return props_MetaBlock;
          }
          break;
        case 9:
          if (true) {
            return props_MetaPort;
          }
          break;
        case 10:
          if (true) {
            return props_OutputPort;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0m = buildConceptIndices(MetaAdapterFactory.getConcept(0x913a1d639e1948faL, 0xad03e33ecccd3814L, 0xa10615a65702f98L, "Block"), MetaAdapterFactory.getConcept(0x913a1d639e1948faL, 0xad03e33ecccd3814L, 0x471a0145ea2e78cL, "BlockExt"), MetaAdapterFactory.getConcept(0x913a1d639e1948faL, 0xad03e33ecccd3814L, 0x20a804e2ec43f49dL, "BlockInstance"), MetaAdapterFactory.getConcept(0x913a1d639e1948faL, 0xad03e33ecccd3814L, 0xa10615a65702fa1L, "Connector"), MetaAdapterFactory.getConcept(0x913a1d639e1948faL, 0xad03e33ecccd3814L, 0x4966445919822461L, "ConnectorEndInstance"), MetaAdapterFactory.getConcept(0x913a1d639e1948faL, 0xad03e33ecccd3814L, 0x20a804e2ec441516L, "ConnectorInstance"), MetaAdapterFactory.getConcept(0x913a1d639e1948faL, 0xad03e33ecccd3814L, 0xa10615a65702ec1L, "Diagram"), MetaAdapterFactory.getConcept(0x913a1d639e1948faL, 0xad03e33ecccd3814L, 0xa10615a65702fb4L, "InputPort"), MetaAdapterFactory.getConcept(0x913a1d639e1948faL, 0xad03e33ecccd3814L, 0x20a804e2ec40c2c8L, "MetaBlock"), MetaAdapterFactory.getConcept(0x913a1d639e1948faL, 0xad03e33ecccd3814L, 0x20a804e2ec40fc5dL, "MetaPort"), MetaAdapterFactory.getConcept(0x913a1d639e1948faL, 0xad03e33ecccd3814L, 0xa10615a65702fbfL, "OutputPort"));
}
