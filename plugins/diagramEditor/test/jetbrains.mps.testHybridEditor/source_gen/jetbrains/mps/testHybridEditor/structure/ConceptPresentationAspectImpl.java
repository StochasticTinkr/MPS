package jetbrains.mps.testHybridEditor.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Block = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BlockExt = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BlockInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Connector = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0d).create();
  private final ConceptPresentation props_ConnectorEndInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConnectorInstance = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0f).create();
  private final ConceptPresentation props_Diagram = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InputPort = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MetaBlock = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0i).create();
  private final ConceptPresentation props_MetaPort = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputPort = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_Block;
      case 1:
        return props_BlockExt;
      case 2:
        return props_BlockInstance;
      case 3:
        return props_Connector;
      case 4:
        return props_ConnectorEndInstance;
      case 5:
        return props_ConnectorInstance;
      case 6:
        return props_Diagram;
      case 7:
        return props_InputPort;
      case 8:
        return props_MetaBlock;
      case 9:
        return props_MetaPort;
      case 10:
        return props_OutputPort;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
