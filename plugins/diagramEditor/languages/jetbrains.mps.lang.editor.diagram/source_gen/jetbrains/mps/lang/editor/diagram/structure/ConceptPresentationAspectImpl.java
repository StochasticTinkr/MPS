package jetbrains.mps.lang.editor.diagram.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractArgument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractDiagramCreation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractFigureReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionGroup = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributedFigureReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BLQueryArgument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_Diagram = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_DiagramConnector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_DiagramNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_DiagramPort = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConnectionEnd = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConnectionEndBLQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreationActionReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomElementReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DiagramConnectorCanCreateHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DiagramConnectorCreation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DiagramConnectorCreationHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DiagramElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DiagramElementBLQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DiagramElementCreationHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DiagramElementsCreation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExternalFigureReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FigureParameterMapping = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FromIdFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FromNodeFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkArgument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Palette = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PaletteElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyArgument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Separator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Diagram = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_DiagramConnector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_DiagramNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_DiagramPort = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ThisEditorNodeExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToIdFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToNodeFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_YFunctionParameter = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("6106f611-7a74-42d1-80de-edc5c602bfd1"), "jetbrains.mps.lang.editor.diagram")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractArgument;
      case 1:
        return props_AbstractDiagramCreation;
      case 2:
        return props_AbstractFigureReference;
      case 3:
        return props_ActionGroup;
      case 4:
        return props_ActionReference;
      case 5:
        return props_AttributedFigureReference;
      case 6:
        return props_BLQueryArgument;
      case 7:
        return props_CellModel_Diagram;
      case 8:
        return props_CellModel_DiagramConnector;
      case 9:
        return props_CellModel_DiagramNode;
      case 10:
        return props_CellModel_DiagramPort;
      case 11:
        return props_ConnectionEnd;
      case 12:
        return props_ConnectionEndBLQuery;
      case 13:
        return props_CreationActionReference;
      case 14:
        return props_CustomElementReference;
      case 15:
        return props_DiagramConnectorCanCreateHandler;
      case 16:
        return props_DiagramConnectorCreation;
      case 17:
        return props_DiagramConnectorCreationHandler;
      case 18:
        return props_DiagramElement;
      case 19:
        return props_DiagramElementBLQuery;
      case 20:
        return props_DiagramElementCreationHandler;
      case 21:
        return props_DiagramElementsCreation;
      case 22:
        return props_ExternalFigureReference;
      case 23:
        return props_FigureParameterMapping;
      case 24:
        return props_FromIdFunctionParameter;
      case 25:
        return props_FromNodeFunctionParameter;
      case 26:
        return props_LinkArgument;
      case 27:
        return props_NodeFunctionParameter;
      case 28:
        return props_Palette;
      case 29:
        return props_PaletteElement;
      case 30:
        return props_PropertyArgument;
      case 31:
        return props_Separator;
      case 32:
        return props_StubCellModel_Diagram;
      case 33:
        return props_StubCellModel_DiagramConnector;
      case 34:
        return props_StubCellModel_DiagramNode;
      case 35:
        return props_StubCellModel_DiagramPort;
      case 36:
        return props_ThisEditorNodeExpression;
      case 37:
        return props_ToIdFunctionParameter;
      case 38:
        return props_ToNodeFunctionParameter;
      case 39:
        return props_XFunctionParameter;
      case 40:
        return props_YFunctionParameter;
    }
    throw new IllegalStateException();
  }
}
