package jetbrains.mps.lang.editor.diagram.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import java.util.Collections;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Image;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.baseLanguage.editor.BaseLanguageStyle_StyleSheet;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import jetbrains.mps.editor.runtime.EditorUtil;

public class IconSelectorComponent implements ConceptEditorComponent {
  @NotNull
  public Collection<String> getContextHints() {
    return Collections.emptyList();
  }
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_6g738i_a(editorContext, node);
  }
  private EditorCell createCollection_6g738i_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_6g738i_a");
    editorCell.addEditorCell(this.createAlternation_6g738i_a0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_6g738i_b0(editorContext, node));
    return editorCell;
  }
  private EditorCell createAlternation_6g738i_a0(EditorContext editorContext, SNode node) {
    boolean alternationCondition = true;
    alternationCondition = IconSelectorComponent.renderingCondition_6g738i_a0a(node, editorContext);
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = this.createImage_6g738i_a0a(editorContext, node);
    } else {
      editorCell = this.createConstant_6g738i_a0a(editorContext, node);
    }
    return editorCell;
  }
  private static boolean renderingCondition_6g738i_a0a(SNode node, EditorContext editorContext) {
    SModule module = SNodeOperations.getModel(node).getModule();
    if (!(module instanceof AbstractModule)) {
      return false;
    }
    String s = MacrosFactory.forModule(((AbstractModule) module)).expandPath(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x5bdb7aaec13745e9L, 0x3cfdbd635b5afe8dL, "iconPath")));
    if (s == null) {
      return false;
    }
    return FileSystem.getInstance().getFileByPath(s).exists();
  }
  private EditorCell createImage_6g738i_a0a(final EditorContext editorContext, final SNode node) {
    SModule imageModule;
    String imagePath;
    imageModule = SNodeOperations.getModel(node).getModule();
    imagePath = (new _FunctionTypes._return_P0_E0<String>() {
      public String invoke() {
        return SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x5bdb7aaec13745e9L, 0x3cfdbd635b5afe8dL, "iconPath"));
      }
    }).invoke();
    EditorCell_Image editorCell = EditorCell_Image.createImageCell(editorContext, node, imageModule, imagePath);
    editorCell.setCellId("Image_6g738i_a0a");
    editorCell.setDescent(0);
    return editorCell;
  }
  private EditorCell createConstant_6g738i_a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "<no icon>");
    editorCell.setCellId("Constant_6g738i_a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_6g738i_b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_6g738i_b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_6g738i_a1a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_6g738i_b1a(editorContext, node));
    editorCell.addEditorCell(this.createJComponent_6g738i_c1a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_6g738i_a1a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "icon");
    editorCell.setCellId("Constant_6g738i_a1a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_6g738i_b1a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("iconPath");
    provider.setNoTargetText("<no icon>");
    provider.setAllowsEmptyTarget(true);
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("ISC_property_iconPath");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_StringLiteral(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  private EditorCell createJComponent_6g738i_c1a(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, IconSelectorComponent._QueryFunction_JComponent_6g738i_a2b0(node, editorContext), "_6g738i_c1a");
    editorCell.setCellId("JComponent_6g738i_c1a");
    return editorCell;
  }
  private static JComponent _QueryFunction_JComponent_6g738i_a2b0(final SNode node, final EditorContext editorContext) {
    return EditorUtil.createSelectIconButton(node, editorContext);
  }
}
