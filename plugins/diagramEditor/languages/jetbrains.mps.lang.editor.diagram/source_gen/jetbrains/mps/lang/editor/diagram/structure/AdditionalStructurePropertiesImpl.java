package jetbrains.mps.lang.editor.diagram.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractArgument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractDiagramCreation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractFigureReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionGroup = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributedFigureReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BLQueryArgument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_Diagram = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_DiagramConnector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_DiagramNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_DiagramPort = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConnectionEnd = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConnectionEndBLQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreationActionReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomElementReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DiagramConnectorCanCreateHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DiagramConnectorCreation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DiagramConnectorCreationHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DiagramElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DiagramElementBLQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DiagramElementCreationHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DiagramElementsCreation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExternalFigureReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FigureParameterMapping = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FromIdFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FromNodeFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkArgument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Palette = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PaletteElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyArgument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Separator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Diagram = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_DiagramConnector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_DiagramNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_DiagramPort = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ThisEditorNodeExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToIdFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToNodeFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_YFunctionParameter = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0qb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractArgument;
          }
          break;
        case 1:
          if (true) {
            return props_AbstractDiagramCreation;
          }
          break;
        case 2:
          if (true) {
            return props_AbstractFigureReference;
          }
          break;
        case 3:
          if (true) {
            return props_ActionGroup;
          }
          break;
        case 4:
          if (true) {
            return props_ActionReference;
          }
          break;
        case 5:
          if (true) {
            return props_AttributedFigureReference;
          }
          break;
        case 6:
          if (true) {
            return props_BLQueryArgument;
          }
          break;
        case 7:
          if (true) {
            return props_CellModel_Diagram;
          }
          break;
        case 8:
          if (true) {
            return props_CellModel_DiagramConnector;
          }
          break;
        case 9:
          if (true) {
            return props_CellModel_DiagramNode;
          }
          break;
        case 10:
          if (true) {
            return props_CellModel_DiagramPort;
          }
          break;
        case 11:
          if (true) {
            return props_ConnectionEnd;
          }
          break;
        case 12:
          if (true) {
            return props_ConnectionEndBLQuery;
          }
          break;
        case 13:
          if (true) {
            return props_CreationActionReference;
          }
          break;
        case 14:
          if (true) {
            return props_CustomElementReference;
          }
          break;
        case 15:
          if (true) {
            return props_DiagramConnectorCanCreateHandler;
          }
          break;
        case 16:
          if (true) {
            return props_DiagramConnectorCreation;
          }
          break;
        case 17:
          if (true) {
            return props_DiagramConnectorCreationHandler;
          }
          break;
        case 18:
          if (true) {
            return props_DiagramElement;
          }
          break;
        case 19:
          if (true) {
            return props_DiagramElementBLQuery;
          }
          break;
        case 20:
          if (true) {
            return props_DiagramElementCreationHandler;
          }
          break;
        case 21:
          if (true) {
            return props_DiagramElementsCreation;
          }
          break;
        case 22:
          if (true) {
            return props_ExternalFigureReference;
          }
          break;
        case 23:
          if (true) {
            return props_FigureParameterMapping;
          }
          break;
        case 24:
          if (true) {
            return props_FromIdFunctionParameter;
          }
          break;
        case 25:
          if (true) {
            return props_FromNodeFunctionParameter;
          }
          break;
        case 26:
          if (true) {
            return props_LinkArgument;
          }
          break;
        case 27:
          if (true) {
            return props_NodeFunctionParameter;
          }
          break;
        case 28:
          if (true) {
            return props_Palette;
          }
          break;
        case 29:
          if (true) {
            return props_PaletteElement;
          }
          break;
        case 30:
          if (true) {
            return props_PropertyArgument;
          }
          break;
        case 31:
          if (true) {
            return props_Separator;
          }
          break;
        case 32:
          if (true) {
            return props_StubCellModel_Diagram;
          }
          break;
        case 33:
          if (true) {
            return props_StubCellModel_DiagramConnector;
          }
          break;
        case 34:
          if (true) {
            return props_StubCellModel_DiagramNode;
          }
          break;
        case 35:
          if (true) {
            return props_StubCellModel_DiagramPort;
          }
          break;
        case 36:
          if (true) {
            return props_ThisEditorNodeExpression;
          }
          break;
        case 37:
          if (true) {
            return props_ToIdFunctionParameter;
          }
          break;
        case 38:
          if (true) {
            return props_ToNodeFunctionParameter;
          }
          break;
        case 39:
          if (true) {
            return props_XFunctionParameter;
          }
          break;
        case 40:
          if (true) {
            return props_YFunctionParameter;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0qb = buildConceptIndices(MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x3f6e840fd86f8aeL, "AbstractArgument"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x120f760a04397296L, "AbstractDiagramCreation"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0xf301bf106a329d6L, "AbstractFigureReference"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x74dc91e9e6c7d83L, "ActionGroup"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x74dc91e9e6c7d82L, "ActionReference"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x4b412569a095b4ceL, "AttributedFigureReference"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x3f6e840fd86f8f7L, "BLQueryArgument"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x57869048dc89fbf7L, "CellModel_Diagram"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x58940e88f3ef74c9L, "CellModel_DiagramConnector"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0xf301bf106a326e1L, "CellModel_DiagramNode"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x3f6e840fd120282L, "CellModel_DiagramPort"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x25c3d1ab937de9c0L, "ConnectionEnd"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x10efa534a508176dL, "ConnectionEndBLQuery"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x5bdb7aaec13745e9L, "CreationActionReference"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x5bdb7aaec13745e8L, "CustomElementReference"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0xd0b2f9de371634eL, "DiagramConnectorCanCreateHandler"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0xd0b2f9de3710044L, "DiagramConnectorCreation"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0xd0b2f9de371007cL, "DiagramConnectorCreationHandler"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x4a53d4fb31a6add1L, "DiagramElement"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x4a53d4fb31aaee31L, "DiagramElementBLQuery"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x76f1cb20ba7726f7L, "DiagramElementCreationHandler"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x76f1cb20ba75918aL, "DiagramElementsCreation"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0xf301bf106a655cbL, "ExternalFigureReference"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0xf301bf106a7d7c7L, "FigureParameterMapping"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0xd0b2f9de3724d63L, "FromIdFunctionParameter"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0xd0b2f9de3724d59L, "FromNodeFunctionParameter"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x3f6e840fd86f9b7L, "LinkArgument"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x76f1cb20ba7a0edeL, "NodeFunctionParameter"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x74dc91e9e6c7d84L, "Palette"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x74dc91e9e6c7d85L, "PaletteElement"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x3f6e840fdc48c85L, "PropertyArgument"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x74dc91e9e6c7d86L, "Separator"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0xa2364a3edc2d376L, "StubCellModel_Diagram"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0xa2364a3edc37a82L, "StubCellModel_DiagramConnector"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0xa2364a3edc37aa7L, "StubCellModel_DiagramNode"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0xa2364a3edc37accL, "StubCellModel_DiagramPort"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x2cd0b06754b27e2fL, "ThisEditorNodeExpression"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0xd0b2f9de3724d68L, "ToIdFunctionParameter"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0xd0b2f9de3724d5eL, "ToNodeFunctionParameter"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x76f1cb20ba7a0ee2L, "XFunctionParameter"), MetaAdapterFactory.getConcept(0x6106f6117a7442d1L, 0x80deedc5c602bfd1L, 0x76f1cb20ba7a0ed7L, "YFunctionParameter"));
}
