package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.platform.actions.core.MoveNodesAction;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.MetaAdapterByDeclaration;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import com.intellij.openapi.ui.Messages;

public abstract class AbstractLanguageMove implements MoveNodesAction {
  public boolean checkDeployed(MPSProject project, final SNode concept) {
    final Wrappers._T<SAbstractConcept> deployedConcept = new Wrappers._T<SAbstractConcept>();
    final Wrappers._T<String> conceptName = new Wrappers._T<String>();
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        deployedConcept.value = MetaAdapterByDeclaration.getConcept(concept);
        conceptName.value = SPropertyOperations.getString(concept, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
      }
    });
    if (!(deployedConcept.value.isValid())) {
      Messages.showWarningDialog(project.getProject(), "Concept '" + conceptName.value + "' is not deployed.\nRefactoring will be continued without migrating instances.", "Not Deployed");
      return false;
    }
    return true;
  }
}
