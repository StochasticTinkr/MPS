package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.platform.actions.core.MoveNodesDefault;
import jetbrains.mps.smodel.structure.Extension;
import jetbrains.mps.ide.platform.actions.core.MoveNodesRefactoring;
import jetbrains.mps.project.MPSProject;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration__BehaviorDescriptor;
import com.intellij.openapi.ui.Messages;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.ide.refactoring.SModelReferenceDialog;
import java.util.Map;
import jetbrains.mps.smodel.LanguageAspect;
import java.util.ArrayList;
import jetbrains.mps.ide.platform.refactoring.NodeLocation;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.lang.migration.runtime.base.RefactoringSession;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.smodel.SModelOperations;

public class MoveConcepts extends MoveNodesDefault {

  public static class MoveConcepts_extension extends Extension.Default<MoveNodesRefactoring> {
    public MoveConcepts_extension() {
      super("jetbrains.mps.ide.platform.MoveNodesAction");
    }
    public MoveNodesRefactoring get() {
      return new MoveConcepts();
    }
  }

  public String getName() {
    return "Move Concepts";
  }
  public boolean isApplicable(MPSProject project, final List<SNode> target) {
    if (!(super.isApplicable(project, target))) {
      return false;
    }
    final Wrappers._boolean result = new Wrappers._boolean();
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        result.value = ListSequence.fromList(target).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"));
          }
        });
      }
    });
    return result.value;
  }
  public void apply(final MPSProject project, List<SNode> nodesToMove) {
    final List<SNode> conceptsToMove = Sequence.fromIterable(SNodeOperations.ofConcept(nodesToMove, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"))).toListSequence();
    final SModel sourceModel = SNodeOperations.getModel(ListSequence.fromList(nodesToMove).first());
    final Language sourceLanguage = Language.getLanguageFor(sourceModel);

    final Wrappers._boolean hasGenerator = new Wrappers._boolean(false);
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        hasGenerator.value = ListSequence.fromList(conceptsToMove).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode node) {
            return ListSequence.fromList(AbstractConceptDeclaration__BehaviorDescriptor.findGeneratorFragments_id5zMz2aJEI4B.invoke(node)).isNotEmpty();
          }
        });
      }
    });
    if (hasGenerator.value) {
      Messages.showWarningDialog(project.getProject(), "Generator fragments will not be moved.", "Move concepts");
    }

    final Wrappers._T<List<SModelReference>> structureModels = new Wrappers._T<List<SModelReference>>();
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        Iterable<SModule> modules = project.getRepository().getModules();
        structureModels.value = Sequence.fromIterable(modules).ofType(Language.class).select(new ISelector<Language, SModelReference>() {
          public SModelReference select(Language it) {
            return it.getStructureModelDescriptor().getReference();
          }
        }).toListSequence();
      }
    });
    final SModelReference targetModelRef = SModelReferenceDialog.getSelectedModel(project, structureModels.value);
    if (targetModelRef == null) {
      return;
    }

    final Wrappers._T<SModel> targetModel = new Wrappers._T<SModel>();
    final Wrappers._T<Language> targetLanguage = new Wrappers._T<Language>();
    final Wrappers._T<Map<LanguageAspect, List<SNode>>> aspectsMap = new Wrappers._T<Map<LanguageAspect, List<SNode>>>();
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        targetModel.value = targetModelRef.resolve(project.getRepository());
        targetLanguage.value = (Language) targetModel.value.getModule();
        aspectsMap.value = MoveConceptUtil.getAspectNodes(sourceLanguage, conceptsToMove);
      }
    });

    MoveNodesDefault.doMove(project, ListSequence.fromListAndArray(new ArrayList<ToMoveItem>(), new ToMoveItem(nodesToMove, new NodeLocation.NodeLocationRoot(targetModel.value))), new _FunctionTypes._void_P1_E0<RefactoringSession>() {
      public void invoke(RefactoringSession refactoringSession) {
        sourceLanguage.addDependency(targetLanguage.value.getModuleReference(), false);
        targetLanguage.value.addDependency(sourceLanguage.getModuleReference(), false);
        MoveConceptUtil.setExtendsDependencies(conceptsToMove, sourceModel, sourceLanguage, targetLanguage.value);
        refactoringSession.registerChange(new Runnable() {
          public void run() {
            for (IMapping<LanguageAspect, List<SNode>> aspectItem : MapSequence.fromMap(aspectsMap.value)) {
              SModelOperations.validateLanguagesAndImports(aspectItem.key().get(targetLanguage.value), true, true);
            }
          }
        });
      }
    });
  }

}
