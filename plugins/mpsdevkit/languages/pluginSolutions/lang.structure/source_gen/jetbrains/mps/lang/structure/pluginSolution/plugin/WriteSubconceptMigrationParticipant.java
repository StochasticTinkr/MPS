package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.platform.actions.core.RefactoringParticipantBase;
import jetbrains.mps.lang.migration.pluginSolution.plugin.UpdateReferencesParticipant.NamedNodeReference;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.platform.actions.core.MoveNodeRefactoringParticipant;
import jetbrains.mps.ide.platform.actions.core.RefactoringParticipant;
import jetbrains.mps.smodel.structure.Extension;
import java.util.List;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.lang.migration.pluginSolution.plugin.UpdateReferencesParticipant;
import jetbrains.mps.lang.smodel.query.runtime.CommandUtil;
import jetbrains.mps.lang.smodel.query.runtime.QueryExecutionContext;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.ide.platform.actions.core.RefactoringSession;
import jetbrains.mps.lang.migration.util.NodeReferenceUtil;
import jetbrains.mps.lang.migration.behavior.AbstractNodeReference__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public class WriteSubconceptMigrationParticipant extends RefactoringParticipantBase<NamedNodeReference, WriteSubconceptMigrationParticipant.MigrationScriptRef, SNode, SNode> implements MoveNodeRefactoringParticipant<NamedNodeReference, WriteSubconceptMigrationParticipant.MigrationScriptRef>, RefactoringParticipant.PersistentRefactoringParticipant<NamedNodeReference, WriteSubconceptMigrationParticipant.MigrationScriptRef, SNode, SNode> {

  public class MigrationScriptRef {
    private final NamedNodeReference ref;
    public MigrationScriptRef(NamedNodeReference ref1) {
      ref = ref1;
    }
    public NamedNodeReference getRef() {
      return ref;
    }
  }

  public static class WriteSubconceptMigrationParticipant_extension extends Extension.Default<MoveNodeRefactoringParticipant<?, ?>> {
    public WriteSubconceptMigrationParticipant_extension() {
      super("jetbrains.mps.ide.platform.MoveNodeParticipantEP");
    }
    public MoveNodeRefactoringParticipant<?, ?> get() {
      return new WriteSubconceptMigrationParticipant();
    }
  }

  public String getId() {
    return "moveNode.writeSubconceptMigration";
  }

  @Override
  public List<RefactoringParticipant.Option> getAvailableOptions(NamedNodeReference initialState, SRepository repository) {
    return ListSequence.fromList(new ArrayList<RefactoringParticipant.Option>());
  }


  @Override
  public List<RefactoringParticipant.Change<NamedNodeReference, WriteSubconceptMigrationParticipant.MigrationScriptRef>> getChanges(final NamedNodeReference initialState, SRepository repository, List<RefactoringParticipant.Option> selectedOptions, SearchScope searchScope) {
    if (initialState == null || !(ListSequence.fromList(selectedOptions).contains(LanguageStructureMigrationParticipant.OPTION)) || !(ListSequence.fromList(selectedOptions).contains(UpdateReferencesParticipant.OPTION))) {
      return ListSequence.fromList(new ArrayList<RefactoringParticipant.Change<NamedNodeReference, WriteSubconceptMigrationParticipant.MigrationScriptRef>>());
    }
    // todo: enable only in migration assistant 


    {
      final SearchScope scope = CommandUtil.createScope(searchScope);
      QueryExecutionContext context = new QueryExecutionContext() {
        public SearchScope getDefaultSearchScope() {
          return scope;
        }
      };
      // todo: interfaces 
      List<SNode> subConcepts = CollectionSequence.fromCollection(CommandUtil.instances(CommandUtil.createConsoleScope(null, false, context), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"))).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return eq_8k3jue_a0a0a0a0a0a0d0e0k(SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xf979be93cfL, "extends")).getReference(), initialState);
        }
      }).toListSequence();
      List<Language> subModules = ListSequence.fromList(subConcepts).select(new ISelector<SNode, SModule>() {
        public SModule select(SNode it) {
          return SNodeOperations.getModel(it).getModule();
        }
      }).distinct().ofType(Language.class).toListSequence();
      List<RefactoringParticipant.Change<NamedNodeReference, WriteSubconceptMigrationParticipant.MigrationScriptRef>> changes = ListSequence.fromList(subModules).select(new ISelector<Language, RefactoringParticipant.Change<NamedNodeReference, WriteSubconceptMigrationParticipant.MigrationScriptRef>>() {
        public RefactoringParticipant.Change<NamedNodeReference, WriteSubconceptMigrationParticipant.MigrationScriptRef> select(final Language subModule) {
          return new RefactoringParticipant.Change<NamedNodeReference, WriteSubconceptMigrationParticipant.MigrationScriptRef>() {
            public SearchResults getSearchResults() {
              SearchResults searchResults = new SearchResults();
              searchResults.add(new SearchResult<SModule>(subModule, "induced migration script"));
              return searchResults;
            }
            public boolean needsToPreserveOldNode() {
              return false;
            }
            public void confirm(WriteSubconceptMigrationParticipant.MigrationScriptRef finalState, SRepository repository, RefactoringSession refactoringSession) {
              LanguageStructureMigrationParticipant.MigrationBuilder migrationBuilder = LanguageStructureMigrationParticipant.MigrationBuilder.getBuilder(refactoringSession, subModule);
              migrationBuilder.addPart(createIncludeMigrationPart_8k3jue_a0a1a2a0a0a0a0a0d0e0k(SNodeOperations.cast(finalState.getRef().reference().resolve(repository), MetaAdapterFactory.getInterfaceConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x47bb811da2acc4d6L, "jetbrains.mps.lang.migration.structure.IMigrationUnit"))));
            }
          };
        }
      }).toListSequence();
      return changes;
    }
  }


  /**
   * todo: too much code duplication (use dsl?)
   */
  public SNode serializeInitialState(NamedNodeReference initialState) {
    return NodeReferenceUtil.makeReflection(initialState.reference(), initialState.name());
  }
  public NamedNodeReference deserializeInitialState(SNode serialized) {
    return new NamedNodeReference(AbstractNodeReference__BehaviorDescriptor.getNodeReference_id4uVwhQyQbdz.invoke(serialized), SPropertyOperations.getString(serialized, MetaAdapterFactory.getProperty(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x27bf3263be23f0dfL, 0x27bf3263be23f299L, "nodeName")));
  }
  public SNode serializeFinalState(WriteSubconceptMigrationParticipant.MigrationScriptRef finalState) {
    return NodeReferenceUtil.makeReflection(finalState.getRef().reference(), finalState.getRef().name());
  }
  public WriteSubconceptMigrationParticipant.MigrationScriptRef deserializeFinalState(SNode serialized) {
    return new WriteSubconceptMigrationParticipant.MigrationScriptRef(new NamedNodeReference(AbstractNodeReference__BehaviorDescriptor.getNodeReference_id4uVwhQyQbdz.invoke(serialized), SPropertyOperations.getString(serialized, MetaAdapterFactory.getProperty(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x27bf3263be23f0dfL, 0x27bf3263be23f299L, "nodeName"))));
  }
  private MoveNodeRefactoringParticipant.MoveNodeRefactoringDataCollector<NamedNodeReference, WriteSubconceptMigrationParticipant.MigrationScriptRef> myDataCollector = new MoveNodeRefactoringParticipant.MoveNodeRefactoringDataCollector<NamedNodeReference, WriteSubconceptMigrationParticipant.MigrationScriptRef>() {
    public NamedNodeReference beforeMove(SNode nodeToMove) {
      return new NamedNodeReference(nodeToMove.getReference(), NodeReferenceUtil.getNodePresentation(nodeToMove));
    }
    public WriteSubconceptMigrationParticipant.MigrationScriptRef afterMove(SNode movedNode) {
      return new WriteSubconceptMigrationParticipant.MigrationScriptRef(new NamedNodeReference(movedNode.getReference(), NodeReferenceUtil.getNodePresentation(movedNode)));
    }
  };
  public MoveNodeRefactoringParticipant.MoveNodeRefactoringDataCollector<NamedNodeReference, WriteSubconceptMigrationParticipant.MigrationScriptRef> getDataCollector() {
    return myDataCollector;
  }
  private static SNode createIncludeMigrationPart_8k3jue_a0a1a2a0a0a0a0a0d0e0k(Object p0) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x267418e6b5c2b903L, "jetbrains.mps.lang.migration.structure.IncludeMigrationPart"), null, null, false);
    n1.setReferenceTarget(MetaAdapterFactory.getReferenceLink(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x267418e6b5c2b903L, 0x267418e6b5c2b960L, "target"), (SNode) p0);
    return n1;
  }
  private static boolean eq_8k3jue_a0a0a0a0a0a0d0e0k(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
