package jetbrains.mps.lang.structure.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.structure.Extension;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import com.intellij.openapi.application.ApplicationManager;
import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.refactoring.participant.RefactoringParticipant;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import jetbrains.mps.refactoring.participant.RenameNodeRefactoringParticipant;
import jetbrains.mps.ide.platform.actions.core.RefactoringProcessor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Map;
import jetbrains.mps.refactoring.participant.RefactoringSession;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;

public class NodeRenamer_extension extends Extension.Default<_FunctionTypes._return_P4_E0<? extends Boolean, ? super EditorContext, ? super SNode, ? super String, ? super String>> {
  public NodeRenamer_extension() {
    super("jetbrains.mps.lang.structure.NodeRenamer");
  }
  public _FunctionTypes._return_P4_E0<? extends Boolean, ? super EditorContext, ? super SNode, ? super String, ? super String> get() {
    return new _FunctionTypes._return_P4_E0<Boolean, EditorContext, SNode, String, String>() {
      public Boolean invoke(final EditorContext context, final SNode node, String oldName, final String newName) {
        ApplicationManager.getApplication().invokeLater(new Runnable() {
          public void run() {
            MPSProject project = (MPSProject) context.getOperationContext().getProject();
            int result = Messages.showYesNoDialog(project.getProject(), "It is recommended to use rename refactoring when renaming language structure.\nRun refactoring now to update usages?", "Execute refactoring?", null);
            if (result != Messages.YES) {
              return;
            }
            Iterable<? extends RefactoringParticipant<?, ?, SNode, String>> participants = new ExtensionPoint<RenameNodeRefactoringParticipant<?, ?>>("jetbrains.mps.refactoring.participant.RenameNodeParticipantEP").getObjects();
            RefactoringProcessor.performRefactoringUserInteractive((MPSProject) project, "Rename node", participants, ListSequence.fromListAndArray(new ArrayList<SNode>(), node), new _FunctionTypes._return_P2_E0<Map<SNode, String>, Iterable<RefactoringParticipant.ParticipantApplied<?, ?, SNode, String, SNode, String>>, RefactoringSession>() {
              public Map<SNode, String> invoke(Iterable<RefactoringParticipant.ParticipantApplied<?, ?, SNode, String, SNode, String>> changes, RefactoringSession refactoringSession) {
                Map<SNode, String> m = MapSequence.<SNode, String>fromMapAndKeysArray(new HashMap<SNode, String>(), node).withValues(newName);
                return m;
              }
            });
          }
        });
        return false;
      }
    };
  }
}
