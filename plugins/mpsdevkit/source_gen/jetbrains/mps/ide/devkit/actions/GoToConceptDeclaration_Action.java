package jetbrains.mps.ide.devkit.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.icons.MPSIcons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.MPSProject;
import com.intellij.featureStatistics.FeatureUsageTracker;
import jetbrains.mps.openapi.navigation.NavigationSupport;

public class GoToConceptDeclaration_Action extends BaseAction {
  private static final Icon ICON = MPSIcons.Nodes.Structure;

  public GoToConceptDeclaration_Action() {
    super("Concept Declaration", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    SNodeReference sn = SNodeOperations.getConcept(event.getData(MPSCommonDataKeys.NODE)).getSourceNode();
    return sn != null && sn.resolve(event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository()) != null;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.goto.concept");
    SNodeReference sourceNode = SNodeOperations.getConcept(event.getData(MPSCommonDataKeys.NODE)).getSourceNode();
    if (sourceNode == null) {
      return;
    }
    SNode resolve = sourceNode.resolve(event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository());
    if (resolve == null) {
      return;
    }
    NavigationSupport.getInstance().openNode(event.getData(MPSCommonDataKeys.MPS_PROJECT), resolve, true, false);
  }
}
