package jetbrains.mps.ide.devkit.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import jetbrains.mps.ide.devkit.editorMenuTrace.EditorMenuTraceTool;
import jetbrains.mps.openapi.editor.menus.EditorMenuTraceInfo;

public class ShowItemTrace_Action extends BaseAction {
  private static final Icon ICON = null;

  public ShowItemTrace_Action() {
    super("Show item trace", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return event.getData(MPSEditorDataKeys.SUBSTITUTE_ACTION) != null || event.getData(MPSEditorDataKeys.TRANSFORMATION_MENU_ITEM) != null;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SubstituteAction p = event.getData(MPSEditorDataKeys.SUBSTITUTE_ACTION);
    }
    {
      TransformationMenuItem p = event.getData(MPSEditorDataKeys.TRANSFORMATION_MENU_ITEM);
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    EditorMenuTraceTool tool = event.getData(CommonDataKeys.PROJECT).getComponent(EditorMenuTraceTool.class);
    EditorMenuTraceInfo editorMenuTraceInfo;
    if (event.getData(MPSEditorDataKeys.SUBSTITUTE_ACTION) != null) {
      editorMenuTraceInfo = event.getData(MPSEditorDataKeys.SUBSTITUTE_ACTION).getEditorMenuTraceInfo();
    } else {
      editorMenuTraceInfo = event.getData(MPSEditorDataKeys.TRANSFORMATION_MENU_ITEM).getTraceInfo();
    }
    if (editorMenuTraceInfo != null) {
      tool.showEditorMenuTraceInfo(editorMenuTraceInfo);
    }
  }
}
