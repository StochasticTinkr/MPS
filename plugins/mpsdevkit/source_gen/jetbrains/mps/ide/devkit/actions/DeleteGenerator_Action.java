package jetbrains.mps.ide.devkit.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.smodel.Generator;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.workbench.dialogs.DeleteDialog;
import org.jetbrains.mps.openapi.module.ModelAccess;
import jetbrains.mps.ide.devkit.util.DeleteGeneratorHelper;
import jetbrains.mps.util.IStatus;
import javax.swing.SwingUtilities;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.ide.project.ProjectHelper;

public class DeleteGenerator_Action extends BaseAction {
  private static final Icon ICON = null;
  public DeleteGenerator_Action() {
    super("Delete Generator...", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return ((SModule) MapSequence.fromMap(_params).get("module")) instanceof Generator;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    {
      SModule p = event.getData(MPSCommonDataKeys.MODULE);
      MapSequence.fromMap(_params).put("module", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    DeleteDialog.DeleteOption safeOption = new DeleteDialog.DeleteOption("Safe Delete", true, false);
    DeleteDialog.DeleteOption filesOption = new DeleteDialog.DeleteOption("Delete Files", false, false);

    DeleteDialog dialog = new DeleteDialog(((MPSProject) MapSequence.fromMap(_params).get("project")), "Delete Generator", "Are you sure you want to delete generator?\n\nThis operation is not undoable.", safeOption, filesOption);
    dialog.show();
    if (!(dialog.isOK())) {
      return;
    }

    ModelAccess modelAccess = ((MPSProject) MapSequence.fromMap(_params).get("project")).getModelAccess();
    final DeleteGeneratorHelper butcher = new DeleteGeneratorHelper(((MPSProject) MapSequence.fromMap(_params).get("project")));
    butcher.safeDelete(safeOption.selected).deleteFiles(filesOption.selected);
    modelAccess.executeCommandInEDT(new Runnable() {
      public void run() {
        Generator generator = ((Generator) ((SModule) MapSequence.fromMap(_params).get("module")));
        final IStatus s = butcher.canDelete(generator);
        if (s.isOk()) {
          // this is needed since we reload language after deleting generator, see MPS-18743 
          ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository().saveAll();
          butcher.delete(generator);
        } else {
          SwingUtilities.invokeLater(new Runnable() {
            public void run() {
              Messages.showErrorDialog(ProjectHelper.toIdeaProject(((MPSProject) MapSequence.fromMap(_params).get("project"))), s.getMessage(), "Deleting Generator");
            }
          });
        }
      }
    });
  }
}
