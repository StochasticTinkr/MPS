package jetbrains.mps.ide.devkit.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.generator.GeneratedQueriesOpener;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class NavigateToGeneratedQuery_Action extends BaseAction {
  private static final Icon ICON = null;

  public NavigateToGeneratedQuery_Action() {
    super("Open Generated Code", "Navigate to generated query method", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return NavigateToGeneratedQuery_Action.this.getNodeToNavigate(event.getData(MPSCommonDataKeys.NODE), event) != null;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    event.getData(MPSCommonDataKeys.MPS_PROJECT).getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        new GeneratedQueriesOpener(event.getData(MPSCommonDataKeys.MPS_PROJECT)).open(NavigateToGeneratedQuery_Action.this.getNodeToNavigate(event.getData(MPSCommonDataKeys.NODE), event));
      }
    });
  }
  /*package*/ SNode getNodeToNavigate(SNode current, final AnActionEvent event) {
    return ListSequence.fromList(SNodeOperations.getNodeAncestors(current, null, true)).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return new GeneratedQueriesOpener(event.getData(MPSCommonDataKeys.MPS_PROJECT)).canOpen(it);
      }
    });
  }
}
