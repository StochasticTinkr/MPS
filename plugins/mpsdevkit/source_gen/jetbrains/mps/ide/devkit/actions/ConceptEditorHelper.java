package jetbrains.mps.ide.devkit.actions;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;
import jetbrains.mps.smodel.LanguageAspect;
import org.jetbrains.mps.openapi.language.SLanguage;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.kernel.model.SModelUtil;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;

public class ConceptEditorHelper {
  public static List<SNode> getAvailableConceptAspects(SModel structureModel, SNode node) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode root : SModelOperations.roots(structureModel, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
      if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(root), MetaAdapterFactory.getInterfaceConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x24614259e94f0c84L, "jetbrains.mps.lang.structure.structure.IConceptAspect")) && SPropertyOperations.getBoolean(root, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xff49c1d648L, "rootable")) && !(SPropertyOperations.getBoolean(root, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x403a32c5772c7ec2L, "abstract")))) {
        SNode candidate = (SNode) root;
        if (((boolean) (Boolean) BHReflection.invoke(SNodeOperations.asSConcept(candidate), SMethodTrimmedId.create("canBeAppliedToNode", null, "7IH442d05tK"), node))) {
          ListSequence.fromList(result).addElement(candidate);
        }
      }
    }
    return result;
  }
  public static List<SNode> getAvailableConceptAspects(LanguageAspect aspect, SNode node) {
    // [MM] this LanguageAspect usage is reviewed 
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (SLanguage slang : CollectionSequence.fromCollection(aspect.getMainLanguages())) {
      Language language = ((Language) slang.getSourceModule());
      if (language == null) {
        continue;
      }
      SModel structureModel = language.getStructureModelDescriptor();
      ListSequence.fromList(result).addSequence(ListSequence.fromList(getAvailableConceptAspects(structureModel, node)));
    }
    return result;
  }
  public static SNode createNewConceptAspectInstance(SNode applicableNode, SNode concept, SModel model) {
    SNode conceptAspect = (SNode) SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(concept), null);
    BHReflection.invoke(conceptAspect, SMethodTrimmedId.create("setBaseConcept", null, "5r_35Ihc58c"), applicableNode);
    SModelOperations.addRootNode(model, conceptAspect);

    return conceptAspect;
  }
  public static SNode createNewConceptAspectInstance(LanguageAspect aspect, SNode applicableNode, SNode concept) {
    // [MM] this LanguageAspect usage is reviewed 
    Language language = SModelUtil.getDeclaringLanguage(applicableNode);
    assert language != null : "Language shouldn't be null for " + applicableNode;

    SModel md = aspect.get(language);
    if (md == null) {
      md = aspect.createNew(language);
    }
    return createNewConceptAspectInstance(applicableNode, concept, md);
  }
  public static List<SNode> sortRootsByConcept(List<SNode> roots, final SAbstractConcept[] conceptOrder) {
    return ListSequence.fromList(roots).sort(new ISelector<SNode, Integer>() {
      public Integer select(SNode root) {
        int conceptIndex = Sequence.fromIterable(Sequence.fromArray(conceptOrder)).indexOf(SNodeOperations.getConcept(root));
        return (conceptIndex == -1 ? conceptOrder.length : conceptIndex);
      }
    }, true).toListSequence();
  }
}
