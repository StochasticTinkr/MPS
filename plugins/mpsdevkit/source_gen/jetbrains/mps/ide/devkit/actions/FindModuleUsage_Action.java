package jetbrains.mps.ide.devkit.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.icons.AllIcons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.ide.findusages.model.IResultProvider;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.ide.ui.finders.ModuleUsagesFinder;
import jetbrains.mps.ide.ui.finders.LanguageImportFinder;
import jetbrains.mps.ide.findusages.view.UsageToolOptions;
import jetbrains.mps.ide.findusages.view.UsagesViewTool;

public class FindModuleUsage_Action extends BaseAction {
  private static final Icon ICON = AllIcons.Actions.Find;

  public FindModuleUsage_Action() {
    super("Find Usages", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SModule p = event.getData(MPSCommonDataKeys.MODULE);
      if (p == null) {
        return false;
      }
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final SModule module = event.getData(MPSCommonDataKeys.MODULE);
    final SearchQuery query = new SearchQuery(module, GlobalScope.getInstance());
    final IResultProvider provider;
    if (module instanceof Language) {
      // Given language context module, we are not certain whether intention is to look up module uses or its uses as a language, hence include both 
      provider = FindUtils.makeProvider(new ModuleUsagesFinder(), new LanguageImportFinder());
    } else {
      provider = FindUtils.makeProvider(new ModuleUsagesFinder());
    }
    UsageToolOptions opt = new UsageToolOptions().allowRunAgain(true).forceNewTab(false).navigateIfSingle(false).notFoundMessage(String.format("No usages found for %s", module.getModuleName()));
    UsagesViewTool.showUsages(event.getData(CommonDataKeys.PROJECT), provider, query, opt);
  }
}
