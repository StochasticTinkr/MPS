package jetbrains.mps.ide.devkit.actions;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.IntentionActionsProvider;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnAction;
import jetbrains.mps.openapi.intentions.IntentionExecutable;
import javax.swing.Icon;
import jetbrains.mps.intentions.icons.IntentionIconProvider;
import jetbrains.mps.workbench.action.BaseAction;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.smodel.ModelAccessHelper;
import jetbrains.mps.util.Computable;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.openapi.navigation.EditorNavigator;
import jetbrains.mps.openapi.navigation.ProjectPaneNavigator;
import jetbrains.mps.intentions.IntentionsManager;

public class IntentionActionsProviderImpl implements IntentionActionsProvider {
  @NotNull
  public AnAction[] getIntentionActions(@NotNull final IntentionExecutable intention) {
    Icon icon = new IntentionIconProvider(intention.getDescriptor().getKind()).getIcon();

    AnAction[] actions = {new BaseAction("Go to Intention Declaration", "Go to declaration of this intention", icon) {
      {
        setIsAlwaysVisible(true);
      }
      @Override
      protected void doExecute(AnActionEvent e, Map<String, Object> params) {
        final MPSProject mpsProject = e.getData(MPSCommonDataKeys.MPS_PROJECT);
        final SNodeReference nodeRef = intention.getDescriptor().getIntentionNodeReference();
        if (nodeRef == null || mpsProject == null) {
          return;
        }
        final SRepository repo = mpsProject.getRepository();
        if (!(new ModelAccessHelper(repo).runReadAction(new Computable<Boolean>() {
          public Boolean compute() {
            return nodeRef.resolve(repo) != null;
          }
        }))) {
          Messages.showErrorDialog(mpsProject.getProject(), String.format("Could not find declaration for %s intention (%s)", intention.getClass().getSimpleName(), intention.getClass().getName()), "Intention Declaration");
        } else {
          new EditorNavigator(mpsProject).shallFocus(true).shallSelect(true).open(nodeRef);
          new ProjectPaneNavigator(mpsProject).select(nodeRef);
        }
      }

      @Override
      protected void doUpdate(AnActionEvent e, Map<String, Object> params) {
        setEnabledState(e.getPresentation(), intention.getDescriptor().getIntentionNodeReference() != null);
      }
    }, new BaseAction("Disable This Intention", "Disables this intention type", icon) {
      @Override
      protected void doExecute(AnActionEvent e, Map<String, Object> params) {
        IntentionsManager.getInstance().disableIntention(intention.getDescriptor().getPersistentStateKey());
      }
    }};

    return actions;
  }
}
