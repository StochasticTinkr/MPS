package jetbrains.mps.ide.devkit.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.icons.AllIcons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.progress.ProgressIndicator;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.progress.ProgressMonitorAdapter;

public class ReloadAll_Action extends BaseAction {
  private static final Icon ICON = AllIcons.Actions.Refresh;

  public ReloadAll_Action() {
    super("Reload All Classes", "Reload all MPS classes", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    ProgressManager.getInstance().run(new Task.Modal(((Project) MapSequence.fromMap(_params).get("project")), "Reloading Classes", false) {
      @Override
      public void run(@NotNull final ProgressIndicator indicator) {
        jetbrains.mps.project.Project mpsProject = ProjectHelper.toMPSProject(((Project) MapSequence.fromMap(_params).get("project")));
        assert mpsProject != null;
        mpsProject.getModelAccess().runWriteAction(new Runnable() {
          public void run() {
            ClassLoaderManager.getInstance().reloadAll(new ProgressMonitorAdapter(indicator));
          }
        });
      }
    });
  }
}
