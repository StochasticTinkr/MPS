package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.project.Project;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.CopyUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.SNodeId;

public class BaseTestBody {
  public SModel myModel;
  public Project myProject;
  protected Map<SNode, SNode> myMap;

  public BaseTestBody() {
    myMap = MapSequence.fromMap(new HashMap<SNode, SNode>());
  }

  public final void addNodeById(final String id) {
    myProject.getModelAccess().executeCommand(new Runnable() {
      public void run() {
        SNode node = getRealNodeById(id);
        SNode copy = CopyUtil.copy(node, myMap, true);
        for (SNode a : ListSequence.fromList(SNodeOperations.getNodeDescendants(copy, MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11e0d52da47L, "jetbrains.mps.lang.test.structure.INodeAnnotation"), false, new SAbstractConcept[]{}))) {
          SNodeOperations.deleteNode(a);
        }
        myModel.addRootNode(copy);
      }
    });
  }

  /**
   * access copy of a node given identity from original model; copy is clean 
   */
  public final SNode getNodeById(String id) {
    return MapSequence.fromMap(myMap).get(getRealNodeById(id));
  }

  /**
   * Access complete test node by its id from original model. 
   * Note, test node comes from a transient model which is a clone of original test model
   */
  public final SNode getRealNodeById(String id) {
    return myModel.getNode(SNodeId.fromString(id));
  }
}
