package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import org.junit.runners.BlockJUnit4ClassRunner;
import org.jetbrains.annotations.NotNull;
import org.junit.runners.model.InitializationError;
import org.junit.runners.model.Statement;
import org.junit.runners.model.FrameworkMethod;

/**
 * JUnit4 runner that knows how to pump {@link jetbrains.mps.lang.test.runtime.TestRunner } instance into {@link jetbrains.mps.lang.test.runtime.TransformationTest }
 */
public class TransformationTestInitJUnitRunner extends BlockJUnit4ClassRunner {
  private TestRunner myTestRunner;

  public TransformationTestInitJUnitRunner(@NotNull Class<?> testClass, @NotNull TestRunner testRunner) throws InitializationError {
    super(testClass);
    myTestRunner = testRunner;
  }

  @Override
  protected Statement withAfters(FrameworkMethod method, Object target, Statement statement) {
    // there's no specific reason to use withAfters, withBefores is the same 
    Statement withAfters = super.withAfters(method, target, statement);
    return (target instanceof TransformationTest ? new TransformationTestInitJUnitRunner.TestInitStatement(withAfters, (TransformationTest) target) : withAfters);
  }

  private class TestInitStatement extends Statement {
    private TransformationTest myTestObject;
    private Statement myTestStatement;

    private TestInitStatement(Statement testStatement, TransformationTest testObject) {
      myTestObject = testObject;
      myTestStatement = testStatement;
    }

    @Override
    public void evaluate() throws Throwable {
      myTestObject.setTestRunner(myTestRunner);
      myTestStatement.evaluate();
    }
  }
}
