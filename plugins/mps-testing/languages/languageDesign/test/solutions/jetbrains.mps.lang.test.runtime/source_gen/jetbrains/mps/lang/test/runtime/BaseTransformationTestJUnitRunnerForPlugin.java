package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import org.junit.runners.BlockJUnit4ClassRunner;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.persistence.DefaultModelRoot;
import jetbrains.mps.project.MPSProject;
import org.junit.runners.model.InitializationError;
import org.junit.runners.model.Statement;
import org.junit.runners.model.FrameworkMethod;

public class BaseTransformationTestJUnitRunnerForPlugin extends BlockJUnit4ClassRunner {
  private TestRunner myTestRunner;

  public BaseTransformationTestJUnitRunnerForPlugin(Class<?> testClass, SNode testRoot, DefaultModelRoot modelRoot, MPSProject project) throws InitializationError {
    super(testClass);
    myTestRunner = new TransformationTestRunnerPlugin(testRoot, modelRoot, project);
  }

  @Override
  protected Statement withAfters(FrameworkMethod method, Object target, Statement statement) {
    Statement withAfters = super.withAfters(method, target, statement);
    return (target instanceof BaseTransformationTest ? new BaseTransformationTestJUnitRunnerForPlugin.PatchTestStatement(withAfters, (BaseTransformationTest) target) : withAfters);
  }

  private class PatchTestStatement extends Statement {
    private BaseTransformationTest myTestObject;
    private Statement myTestStatement;

    private PatchTestStatement(Statement testStatement, BaseTransformationTest testObject) {
      myTestObject = testObject;
      myTestStatement = testStatement;
    }

    @Override
    public void evaluate() throws Throwable {
      myTestObject.setTestRunner(myTestRunner);
      myTestStatement.evaluate();
    }
  }
}
