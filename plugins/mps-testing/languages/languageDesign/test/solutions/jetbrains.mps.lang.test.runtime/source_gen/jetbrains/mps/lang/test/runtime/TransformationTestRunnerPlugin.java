package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.EditableSModel;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.persistence.DefaultModelRoot;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SModelName;
import jetbrains.mps.generator.impl.CloneUtil;
import org.jetbrains.annotations.NotNull;

public class TransformationTestRunnerPlugin extends TransformationTestRunner {
  private SNode myRoot;
  private EditableSModel myModel;
  private MPSProject myProject;
  private DefaultModelRoot myModelRoot;

  public TransformationTestRunnerPlugin(SNode root, DefaultModelRoot modelRoot, MPSProject project) {
    super(new LightEnvironment());
    myRoot = root;
    myModelRoot = modelRoot;
    myProject = project;
    getTestModel();
  }

  private SModel getTestModel() {
    if (myModel == null) {
      SModel originalTestModel = SNodeOperations.getModel(myRoot);
      SModelName testModelName = new SModelName(originalTestModel.getName().getLongName(), myRoot.getName(), null);
      myModel = (EditableSModel) myModelRoot.createModel(testModelName.getLongName());
      new CloneUtil(originalTestModel, myModel).cloneModelWithAllImports();
    }
    return myModel;
  }

  @Override
  public void initTest(@NotNull final TransformationTest test, @NotNull String projectPath, String modelName, boolean reopenProject) throws Exception {
    // do nothing here - just overriding default logic from super-class 
  }

  @Override
  public void runTest(@NotNull final TransformationTest projectTest, String className, final String methodName, boolean runInCommand) throws Throwable {
    Class testClass = projectTest.getClass().getClassLoader().loadClass(className);
    Object testInstance = testClass.newInstance();
    testClass.getField("myModel").set(testInstance, getTestModel());
    testClass.getField("myProject").set(testInstance, myProject);
    testClass.getMethod(methodName).invoke(testInstance);
  }
}
