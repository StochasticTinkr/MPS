package jetbrains.mps.lang.test.runtime;

/*Generated by MPS */

import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.tool.environment.Environment;
import jetbrains.mps.tool.environment.IdeaEnvironment;
import jetbrains.mps.tool.environment.EnvironmentConfig;
import org.junit.Before;
import org.junit.AfterClass;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import jetbrains.mps.generator.impl.CloneUtil;

public abstract class BaseTransformationTest implements TransformationTest {
  private Project myProject;
  private SModel myModel;
  private SModel myTransientModel;
  private TestRunner myRunner;

  /*package*/ static final TestModelSaver CACHE = new TestModelSaver();

  @NotNull
  private static TestRunner defaultTestRunner() {
    // it's expected that IDEA MPS plugin or in-process executor supply proper TestRunner using TransformationTestInitJUnitRunner 
    Environment ideaEnv = IdeaEnvironment.getOrCreate(EnvironmentConfig.defaultConfigNoPluginsSpecified());
    return new TransformationTestRunner(ideaEnv);
  }

  public BaseTransformationTest() {
  }

  @Override
  public void setTestRunner(TestRunner runner) {
    myRunner = runner;
  }

  @Override
  public TestRunner getTestRunner() {
    return myRunner;
  }

  @Before
  public void initTestRunner() {
    if (myRunner == null) {
      initTests();
    }
  }

  public void initTest(@NotNull String projectName, final String model) throws Exception {
    initTest(projectName, model, false);
  }

  public void initTest(@NotNull String projectName, final String model, boolean reOpenProject) throws Exception {
    myRunner.initTest(this, projectName, model, reOpenProject);
  }

  private void initTests() {
    setTestRunner(defaultTestRunner());
  }

  @AfterClass
  public static void cacheTearDown() {
    // XXX as long as static field is shared between instances of multiple subclasses of this class, we may face cleared cache in the middle of execution 
    // if tests are executed in parallel. Nevertheless, I don't feel it's much worse than global static RunEventsDispatcher mechanism with hundreds of listeners. 
    // Besides, I'm not aware of any mechanism to run MPS tests in parallel. And yes, I'm going to drop this CACHE altogether soon. 
    CACHE.clean();
  }

  public void runTest(String className, final String methodName, final boolean runInCommand) throws Throwable {
    myRunner.runTest(this, className, methodName, runInCommand);
  }

  @Override
  public void init() {
    this.myTransientModel = TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModule());
    new CloneUtil(this.myModel, this.myTransientModel).cloneModelWithAllImports();
  }

  @Override
  public void dispose() {
    TemporaryModels.getInstance().dispose(myTransientModel);
    myTransientModel = null;
  }

  @Override
  public SModel getModelDescriptor() {
    return myModel;
  }

  @Override
  public void setModelDescriptor(SModel descriptor) {
    myModel = descriptor;
  }

  @Override
  public void setTransientModelDescriptor(SModel descriptor) {
    myTransientModel = descriptor;
  }

  @Override
  public SModel getTransientModelDescriptor() {
    return myTransientModel;
  }

  @Override
  public Project getProject() {
    return myProject;
  }

  @Override
  public void setProject(Project project) {
    myProject = project;
  }
}
