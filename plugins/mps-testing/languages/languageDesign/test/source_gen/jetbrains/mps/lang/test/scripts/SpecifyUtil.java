package jetbrains.mps.lang.test.scripts;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.lang.ref.WeakReference;
import jetbrains.mps.lang.test.runtime.TestsErrorsChecker;
import jetbrains.mps.errors.item.NodeReportItem;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.test.behavior.NodeOperationsContainer__BehaviorDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.test.runtime.NodeCheckerUtil;
import jetbrains.mps.kernel.model.MissingDependenciesFixer;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.ModelImports;

public class SpecifyUtil {
  public static SNode getOperationsContainer(SNode node) {
    return AttributeOperations.getAttribute(node, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07a3d4b5L, "jetbrains.mps.lang.test.structure.NodeOperationsContainer")));
  }

  private static WeakReference<TestsErrorsChecker> ourLastCheck;
  private static long ourLastTimestamp = 0;

  public static Iterable<NodeReportItem> getErrorReporters(SNode node) {
    // FIXME ugly performance hack to avoid recalculation of node errors to replace another ugly hack with global command listener in TestsErrorsChecker 
    // Would be great to have TestsErrorsChecker cached right inside SpecifyRuleReferences intention, but it's not possible to have custom field there. 
    SNode containingRoot = SNodeOperations.getContainingRoot(node);
    Iterable<NodeReportItem> errors;
    TestsErrorsChecker checker = (ourLastCheck == null ? null : ourLastCheck.get());
    // I assume that user can't change a node in 5 seconds %-/ 
    //  it's mostly for isApplicable/execute pair in SpecifyRuleReferences intention 
    if (checker == null || checker.getRoot() != containingRoot || ourLastTimestamp + 5000 < System.currentTimeMillis()) {
      checker = new TestsErrorsChecker(containingRoot);
      errors = checker.getErrors(node);
      ourLastTimestamp = System.currentTimeMillis();
      ourLastCheck = new WeakReference<TestsErrorsChecker>(checker);
    } else {
      errors = checker.getErrors(node);
    }
    return errors;
  }

  public static void fillContainerWithRuleMessages(SNode node) {
    SNode operationsContainer = SpecifyUtil.getOperationsContainer(node);
    assert (operationsContainer != null);
    NodeOperationsContainer__BehaviorDescriptor.detachAllErrorOperations_id4QaU5oI0Q4j.invoke(operationsContainer);
    Iterable<NodeReportItem> reporters = SpecifyUtil.getErrorReporters(node);
    for (NodeReportItem reporter : reporters) {
      @Nullable SNode ruleNode = NodeCheckerUtil.getRuleNodeFromReporter(reporter, SNodeOperations.getModel(node).getRepository());
      NodeOperationsContainer__BehaviorDescriptor.createNodeAndAttachReference_idnMEi6H8iBO.invoke(operationsContainer, ruleNode, reporter);
      if (ruleNode != null) {
        SpecifyUtil.addModelImports(operationsContainer, ruleNode);
      }
    }
    new MissingDependenciesFixer(SNodeOperations.getModel(operationsContainer)).fixModuleDependencies();
  }

  public static void attachNewContainer(SNode node) {
    SNode container = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07a3d4b5L, "jetbrains.mps.lang.test.structure.NodeOperationsContainer"));
    AttributeOperations.setAttribute(node, new IAttributeDescriptor.NodeAttribute(MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07a3d4b5L, "jetbrains.mps.lang.test.structure.NodeOperationsContainer")), container);
  }

  private static void addModelImports(SNode container, SNode ruleNode) {
    SModelReference ruleModelRef = SModelOperations.getPointer(SNodeOperations.getModel(ruleNode));
    new ModelImports(SNodeOperations.getModel(container)).addModelImport(ruleModelRef);
  }
}
