package jetbrains.mps.lang.test.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.editor.runtime.style.StyleImpl;

public class transformationTest_StyleSheet {
  public static void apply_AssertStyle(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.blue));
  }
  public static void apply_NodeAnnotation(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    style.set(StyleAttributes.UNDERLINED, 0, true);
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.DARK_GREEN));
  }
  public static void apply_NodeOperation(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.DARK_GREEN));
    style.set(StyleAttributes.FONT_STYLE, 0, MPSFonts.PLAIN);
  }
  public static void apply_TestLabel(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    style.set(StyleAttributes.UNDERLINED, 0, true);
    style.set(StyleAttributes.FONT_STYLE, 0, MPSFonts.BOLD);
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.darkGray));
  }
  public static void apply_EditorOperation(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.DARK_MAGENTA));
  }
  public static void apply_AnyBracket(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, 0, true);
    style.set(StyleAttributes.FONT_STYLE, 0, MPSFonts.PLAIN);
  }
  public static void apply_Parenthesis(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      transformationTest_StyleSheet.apply_AnyBracket(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("PARENTH");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.MATCHING_LABEL, 0, "parenthesis");
  }
  public static void apply_LeftParen(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      transformationTest_StyleSheet.apply_Parenthesis(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
  }
  public static void apply_RightParen(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      transformationTest_StyleSheet.apply_Parenthesis(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);
  }
  public static void apply_LeftParenAfterName(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      transformationTest_StyleSheet.apply_LeftParen(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);
  }

}
