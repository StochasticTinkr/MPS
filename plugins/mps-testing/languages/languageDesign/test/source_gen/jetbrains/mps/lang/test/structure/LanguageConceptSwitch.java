package jetbrains.mps.lang.test.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractNodeAssert = 0;
  public static final int AbstractNodeErrorCheckOperation = 1;
  public static final int AbstractNodeRuleCheckOperation = 2;
  public static final int AbstractNodeWarningCheckOperation = 3;
  public static final int ActionReference = 4;
  public static final int AfterTestsMethod = 5;
  public static final int AnonymousCellAnnotation = 6;
  public static final int AssertMatch = 7;
  public static final int BeforeTestsMethod = 8;
  public static final int BootstrapActionReference = 9;
  public static final int CheckDataFlowOperation = 10;
  public static final int CheckNodeDataflow = 11;
  public static final int CheckNodeForErrorMessagesOperation = 12;
  public static final int CheckNodeForErrors = 13;
  public static final int DragMouseStatement = 14;
  public static final int EditorComponentExpression = 15;
  public static final int EditorExpression = 16;
  public static final int EditorOperation = 17;
  public static final int EditorTestCase = 18;
  public static final int ExpressionContainer = 19;
  public static final int IChecksRules = 20;
  public static final int INodeAnnotation = 21;
  public static final int INodesTestMethod = 22;
  public static final int IReferenceAttachable = 23;
  public static final int IRuleReference = 24;
  public static final int InfoStatementReference = 25;
  public static final int InvokeActionStatement = 26;
  public static final int InvokeIntentionStatement = 27;
  public static final int IsIntentionApplicableExpression = 28;
  public static final int LogEvent = 29;
  public static final int MPSActionReference = 30;
  public static final int MigrationReference = 31;
  public static final int MigrationTestCase = 32;
  public static final int MockAnnotation = 33;
  public static final int MockScopeProvider = 34;
  public static final int ModelExpression = 35;
  public static final int NamedNodeReference = 36;
  public static final int NodeCheckOperation = 37;
  public static final int NodeConstraintsErrorCheckOperation = 38;
  public static final int NodeConstraintsWarningCheckOperation = 39;
  public static final int NodeErrorCheckOperation = 40;
  public static final int NodeExpectedTypeCheckOperation = 41;
  public static final int NodeInfoCheckOperation = 42;
  public static final int NodeOperationsContainer = 43;
  public static final int NodePropertiesContainer = 44;
  public static final int NodeReachable = 45;
  public static final int NodeRuleCheckOperation = 46;
  public static final int NodeTypeCheckOperation = 47;
  public static final int NodeTypeSetCheckOperation = 48;
  public static final int NodeTypeSystemErrorCheckOperation = 49;
  public static final int NodeTypeSystemRuleCheckOperation = 50;
  public static final int NodeTypeSystemWarningCheckOperation = 51;
  public static final int NodeUnknownErrorCheckOperation = 52;
  public static final int NodeUnknownWarningCheckOperation = 53;
  public static final int NodeUnreachable = 54;
  public static final int NodeWarningCheckOperation = 55;
  public static final int NodesTestCase = 56;
  public static final int NodesTestMethod = 57;
  public static final int PressKeyStatement = 58;
  public static final int PressMouseStatement = 59;
  public static final int ProjectExpression = 60;
  public static final int ReportErrorStatementReference = 61;
  public static final int ScopeEntry = 62;
  public static final int ScopesExpectedNode = 63;
  public static final int ScopesTest = 64;
  public static final int SimpleNodeTest = 65;
  public static final int SwitchToInspector = 66;
  public static final int TestInfo = 67;
  public static final int TestNode = 68;
  public static final int TestNodeAnnotation = 69;
  public static final int TestNodeReference = 70;
  public static final int TypeKeyStatement = 71;
  public static final int UnknownRuleReference = 72;
  public static final int UntypedExpression = 73;
  public static final int VariableAlive = 74;
  public static final int VariableInitialized = 75;
  public static final int WarningStatementReference = 76;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL);
    builder.put(0x11ada7b9a44L, AbstractNodeAssert);
    builder.put(0x6cbc57bb7a195a9aL, AbstractNodeErrorCheckOperation);
    builder.put(0x6cbc57bb7a42d28aL, AbstractNodeRuleCheckOperation);
    builder.put(0x73a7cdcfbbbf1ec9L, AbstractNodeWarningCheckOperation);
    builder.put(0xf48c620dd899bf4L, ActionReference);
    builder.put(0x2045125020ec2848L, AfterTestsMethod);
    builder.put(0x11e31babe12L, AnonymousCellAnnotation);
    builder.put(0x11a2f985130L, AssertMatch);
    builder.put(0x2045125020ec2847L, BeforeTestsMethod);
    builder.put(0xf48c620dd899d06L, BootstrapActionReference);
    builder.put(0x11b081c90baL, CheckDataFlowOperation);
    builder.put(0x11b743c0e8cL, CheckNodeDataflow);
    builder.put(0x11b07d3d54aL, CheckNodeForErrorMessagesOperation);
    builder.put(0x11ae82817b8L, CheckNodeForErrors);
    builder.put(0x2ec0ea8c55ca0a3L, DragMouseStatement);
    builder.put(0x501fdfb2963ab0ffL, EditorComponentExpression);
    builder.put(0x11d7249a7dbL, EditorExpression);
    builder.put(0x11daf16c21cL, EditorOperation);
    builder.put(0x11e314b20e0L, EditorTestCase);
    builder.put(0x254649f227ff5d72L, ExpressionContainer);
    builder.put(0x770c2c9f6ef97f30L, IChecksRules);
    builder.put(0x11e0d52da47L, INodeAnnotation);
    builder.put(0x1510445f8a2c272dL, INodesTestMethod);
    builder.put(0x2827acdc621ed3acL, IReferenceAttachable);
    builder.put(0x6abc06f5f4afab9dL, IRuleReference);
    builder.put(0x1de1fbd5fbfe9cf9L, InfoStatementReference);
    builder.put(0x614c5660cccba06bL, InvokeActionStatement);
    builder.put(0x11d72af5892L, InvokeIntentionStatement);
    builder.put(0x83a4b2183e44b99L, IsIntentionApplicableExpression);
    builder.put(0x486f8079df2fd630L, LogEvent);
    builder.put(0x3ad5e12a687a89d9L, MPSActionReference);
    builder.put(0x5bf7864595dddf89L, MigrationReference);
    builder.put(0x4c010b30d9be4be7L, MigrationTestCase);
    builder.put(0x11e6f14cfccL, MockAnnotation);
    builder.put(0x1de1fbd5fbf63919L, MockScopeProvider);
    builder.put(0x11d53b20b9cL, ModelExpression);
    builder.put(0x1de1fbd5fbf9c211L, NamedNodeReference);
    builder.put(0x11b07797e20L, NodeCheckOperation);
    builder.put(0x73a7cdcfba5276dfL, NodeConstraintsErrorCheckOperation);
    builder.put(0x73a7cdcfbbbf8aadL, NodeConstraintsWarningCheckOperation);
    builder.put(0x11b01e7283dL, NodeErrorCheckOperation);
    builder.put(0x3cff387beb174046L, NodeExpectedTypeCheckOperation);
    builder.put(0x1de1fbd5fbfe6272L, NodeInfoCheckOperation);
    builder.put(0x11b07a3d4b5L, NodeOperationsContainer);
    builder.put(0x11b01e50b53L, NodePropertiesContainer);
    builder.put(0x11b02f9eeb8L, NodeReachable);
    builder.put(0x3bc62fcd9b027d04L, NodeRuleCheckOperation);
    builder.put(0x11b03034484L, NodeTypeCheckOperation);
    builder.put(0x15404cb86444497L, NodeTypeSetCheckOperation);
    builder.put(0x5f2a921acc5d63aL, NodeTypeSystemErrorCheckOperation);
    builder.put(0x4a391b6dc8e619d9L, NodeTypeSystemRuleCheckOperation);
    builder.put(0x770c2c9f6f1bbfcaL, NodeTypeSystemWarningCheckOperation);
    builder.put(0x6cbc57bb7a1917bdL, NodeUnknownErrorCheckOperation);
    builder.put(0x73a7cdcfbbc0b900L, NodeUnknownWarningCheckOperation);
    builder.put(0x11b082d1cb9L, NodeUnreachable);
    builder.put(0x11b0224b421L, NodeWarningCheckOperation);
    builder.put(0x11b55b49e46L, NodesTestCase);
    builder.put(0x11b55b54d88L, NodesTestMethod);
    builder.put(0x11e223413eeL, PressKeyStatement);
    builder.put(0x2ec0ea8c5348f79L, PressMouseStatement);
    builder.put(0x11d5387d7a1L, ProjectExpression);
    builder.put(0x3ee2cbee8b19b06dL, ReportErrorStatementReference);
    builder.put(0x1de1fbd5fbf67ae2L, ScopeEntry);
    builder.put(0x32ba5b0ec25fe9f3L, ScopesExpectedNode);
    builder.put(0x7181d929c720809L, ScopesTest);
    builder.put(0x11d71fcb191L, SimpleNodeTest);
    builder.put(0x501fdfb29636e491L, SwitchToInspector);
    builder.put(0x46bca02bfb6e730aL, TestInfo);
    builder.put(0x11b5a38fc01L, TestNode);
    builder.put(0x119e1c6609cL, TestNodeAnnotation);
    builder.put(0x119e1d33213L, TestNodeReference);
    builder.put(0x11db9c07f43L, TypeKeyStatement);
    builder.put(0x6abc06f5f4af0d67L, UnknownRuleReference);
    builder.put(0x706cdc8a9fd69324L, UntypedExpression);
    builder.put(0x11b086b4872L, VariableAlive);
    builder.put(0x11b0843a235L, VariableInitialized);
    builder.put(0x3ee2cbee8b386d76L, WarningStatementReference);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
