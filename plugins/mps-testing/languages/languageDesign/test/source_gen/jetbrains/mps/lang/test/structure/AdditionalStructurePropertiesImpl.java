package jetbrains.mps.lang.test.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_AbstractNodeAssert = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AbstractNodeErrorCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AbstractNodeRuleCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AbstractNodeWarningCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ActionReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnonymousCellAnnotation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AssertMatch = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BootstrapActionReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CheckDataFlowOperation = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_CheckNodeDataflow = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CheckNodeForErrorMessagesOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CheckNodeForErrors = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DragMouseStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EditorComponentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EditorExpression = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_EditorOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EditorTestCase = new ConceptPropsBuilder().icon("nodesTest.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_ExpressionContainer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IChecksRules = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_INodeAnnotation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IReferenceAttachable = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IRuleReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InvokeActionStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InvokeIntentionStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LogEvent = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MPSActionReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MockAnnotation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ModelExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeConstraintsErrorCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeConstraintsWarningCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeErrorCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeExpectedTypeCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeOperationsContainer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodePropertiesContainer = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_NodeReachable = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_NodeRuleCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeTypeCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeTypeSetCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeTypeSystemErrorCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeTypeSystemRuleCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeTypeSystemWarningCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeUnknownErrorCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeUnknownWarningCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeUnreachable = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_NodeWarningCheckOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodesTestCase = new ConceptPropsBuilder().icon("nodesTest.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_NodesTestMethod = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PressKeyStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PressMouseStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ProjectExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ReportErrorStatementReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ScopesExpectedNode = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ScopesTest = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleNodeTest = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SwitchToInspector = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TestInfo = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TestNode = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TestNodeAnnotation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TestNodeReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TypeKeyStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UnknownRuleReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UntypedExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_VariableAlive = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_VariableInitialized = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_WarningStatementReference = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0pc.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractNodeAssert;
          }
          break;
        case 1:
          if (true) {
            return props_AbstractNodeErrorCheckOperation;
          }
          break;
        case 2:
          if (true) {
            return props_AbstractNodeRuleCheckOperation;
          }
          break;
        case 3:
          if (true) {
            return props_AbstractNodeWarningCheckOperation;
          }
          break;
        case 4:
          if (true) {
            return props_ActionReference;
          }
          break;
        case 5:
          if (true) {
            return props_AnonymousCellAnnotation;
          }
          break;
        case 6:
          if (true) {
            return props_AssertMatch;
          }
          break;
        case 7:
          if (true) {
            return props_BootstrapActionReference;
          }
          break;
        case 8:
          if (true) {
            return props_CheckDataFlowOperation;
          }
          break;
        case 9:
          if (true) {
            return props_CheckNodeDataflow;
          }
          break;
        case 10:
          if (true) {
            return props_CheckNodeForErrorMessagesOperation;
          }
          break;
        case 11:
          if (true) {
            return props_CheckNodeForErrors;
          }
          break;
        case 12:
          if (true) {
            return props_DragMouseStatement;
          }
          break;
        case 13:
          if (true) {
            return props_EditorComponentExpression;
          }
          break;
        case 14:
          if (true) {
            return props_EditorExpression;
          }
          break;
        case 15:
          if (true) {
            return props_EditorOperation;
          }
          break;
        case 16:
          if (true) {
            return props_EditorTestCase;
          }
          break;
        case 17:
          if (true) {
            return props_ExpressionContainer;
          }
          break;
        case 18:
          if (true) {
            return props_IChecksRules;
          }
          break;
        case 19:
          if (true) {
            return props_INodeAnnotation;
          }
          break;
        case 20:
          if (true) {
            return props_IReferenceAttachable;
          }
          break;
        case 21:
          if (true) {
            return props_IRuleReference;
          }
          break;
        case 22:
          if (true) {
            return props_InvokeActionStatement;
          }
          break;
        case 23:
          if (true) {
            return props_InvokeIntentionStatement;
          }
          break;
        case 24:
          if (true) {
            return props_LogEvent;
          }
          break;
        case 25:
          if (true) {
            return props_MPSActionReference;
          }
          break;
        case 26:
          if (true) {
            return props_MockAnnotation;
          }
          break;
        case 27:
          if (true) {
            return props_ModelExpression;
          }
          break;
        case 28:
          if (true) {
            return props_NodeCheckOperation;
          }
          break;
        case 29:
          if (true) {
            return props_NodeConstraintsErrorCheckOperation;
          }
          break;
        case 30:
          if (true) {
            return props_NodeConstraintsWarningCheckOperation;
          }
          break;
        case 31:
          if (true) {
            return props_NodeErrorCheckOperation;
          }
          break;
        case 32:
          if (true) {
            return props_NodeExpectedTypeCheckOperation;
          }
          break;
        case 33:
          if (true) {
            return props_NodeOperationsContainer;
          }
          break;
        case 34:
          if (true) {
            return props_NodePropertiesContainer;
          }
          break;
        case 35:
          if (true) {
            return props_NodeReachable;
          }
          break;
        case 36:
          if (true) {
            return props_NodeRuleCheckOperation;
          }
          break;
        case 37:
          if (true) {
            return props_NodeTypeCheckOperation;
          }
          break;
        case 38:
          if (true) {
            return props_NodeTypeSetCheckOperation;
          }
          break;
        case 39:
          if (true) {
            return props_NodeTypeSystemErrorCheckOperation;
          }
          break;
        case 40:
          if (true) {
            return props_NodeTypeSystemRuleCheckOperation;
          }
          break;
        case 41:
          if (true) {
            return props_NodeTypeSystemWarningCheckOperation;
          }
          break;
        case 42:
          if (true) {
            return props_NodeUnknownErrorCheckOperation;
          }
          break;
        case 43:
          if (true) {
            return props_NodeUnknownWarningCheckOperation;
          }
          break;
        case 44:
          if (true) {
            return props_NodeUnreachable;
          }
          break;
        case 45:
          if (true) {
            return props_NodeWarningCheckOperation;
          }
          break;
        case 46:
          if (true) {
            return props_NodesTestCase;
          }
          break;
        case 47:
          if (true) {
            return props_NodesTestMethod;
          }
          break;
        case 48:
          if (true) {
            return props_PressKeyStatement;
          }
          break;
        case 49:
          if (true) {
            return props_PressMouseStatement;
          }
          break;
        case 50:
          if (true) {
            return props_ProjectExpression;
          }
          break;
        case 51:
          if (true) {
            return props_ReportErrorStatementReference;
          }
          break;
        case 52:
          if (true) {
            return props_ScopesExpectedNode;
          }
          break;
        case 53:
          if (true) {
            return props_ScopesTest;
          }
          break;
        case 54:
          if (true) {
            return props_SimpleNodeTest;
          }
          break;
        case 55:
          if (true) {
            return props_SwitchToInspector;
          }
          break;
        case 56:
          if (true) {
            return props_TestInfo;
          }
          break;
        case 57:
          if (true) {
            return props_TestNode;
          }
          break;
        case 58:
          if (true) {
            return props_TestNodeAnnotation;
          }
          break;
        case 59:
          if (true) {
            return props_TestNodeReference;
          }
          break;
        case 60:
          if (true) {
            return props_TypeKeyStatement;
          }
          break;
        case 61:
          if (true) {
            return props_UnknownRuleReference;
          }
          break;
        case 62:
          if (true) {
            return props_UntypedExpression;
          }
          break;
        case 63:
          if (true) {
            return props_VariableAlive;
          }
          break;
        case 64:
          if (true) {
            return props_VariableInitialized;
          }
          break;
        case 65:
          if (true) {
            return props_WarningStatementReference;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0pc = buildConceptIndices(MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11ada7b9a44L, "AbstractNodeAssert"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x6cbc57bb7a195a9aL, "AbstractNodeErrorCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x6cbc57bb7a42d28aL, "AbstractNodeRuleCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x73a7cdcfbbbf1ec9L, "AbstractNodeWarningCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0xf48c620dd899bf4L, "ActionReference"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11e31babe12L, "AnonymousCellAnnotation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11a2f985130L, "AssertMatch"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0xf48c620dd899d06L, "BootstrapActionReference"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b081c90baL, "CheckDataFlowOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b743c0e8cL, "CheckNodeDataflow"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07d3d54aL, "CheckNodeForErrorMessagesOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11ae82817b8L, "CheckNodeForErrors"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x2ec0ea8c55ca0a3L, "DragMouseStatement"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x501fdfb2963ab0ffL, "EditorComponentExpression"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11d7249a7dbL, "EditorExpression"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11daf16c21cL, "EditorOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11e314b20e0L, "EditorTestCase"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x254649f227ff5d72L, "ExpressionContainer"), MetaAdapterFactory.getInterfaceConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x770c2c9f6ef97f30L, "IChecksRules"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11e0d52da47L, "INodeAnnotation"), MetaAdapterFactory.getInterfaceConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x2827acdc621ed3acL, "IReferenceAttachable"), MetaAdapterFactory.getInterfaceConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x6abc06f5f4afab9dL, "IRuleReference"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x614c5660cccba06bL, "InvokeActionStatement"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11d72af5892L, "InvokeIntentionStatement"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x486f8079df2fd630L, "LogEvent"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x3ad5e12a687a89d9L, "MPSActionReference"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11e6f14cfccL, "MockAnnotation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11d53b20b9cL, "ModelExpression"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, "NodeCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x73a7cdcfba5276dfL, "NodeConstraintsErrorCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x73a7cdcfbbbf8aadL, "NodeConstraintsWarningCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b01e7283dL, "NodeErrorCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x3cff387beb174046L, "NodeExpectedTypeCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07a3d4b5L, "NodeOperationsContainer"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b01e50b53L, "NodePropertiesContainer"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b02f9eeb8L, "NodeReachable"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x3bc62fcd9b027d04L, "NodeRuleCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b03034484L, "NodeTypeCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x15404cb86444497L, "NodeTypeSetCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x5f2a921acc5d63aL, "NodeTypeSystemErrorCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x4a391b6dc8e619d9L, "NodeTypeSystemRuleCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x770c2c9f6f1bbfcaL, "NodeTypeSystemWarningCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x6cbc57bb7a1917bdL, "NodeUnknownErrorCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x73a7cdcfbbc0b900L, "NodeUnknownWarningCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b082d1cb9L, "NodeUnreachable"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b0224b421L, "NodeWarningCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b55b49e46L, "NodesTestCase"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b55b54d88L, "NodesTestMethod"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11e223413eeL, "PressKeyStatement"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x2ec0ea8c5348f79L, "PressMouseStatement"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11d5387d7a1L, "ProjectExpression"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x3ee2cbee8b19b06dL, "ReportErrorStatementReference"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x32ba5b0ec25fe9f3L, "ScopesExpectedNode"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x7181d929c720809L, "ScopesTest"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11d71fcb191L, "SimpleNodeTest"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x501fdfb29636e491L, "SwitchToInspector"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x46bca02bfb6e730aL, "TestInfo"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b5a38fc01L, "TestNode"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x119e1c6609cL, "TestNodeAnnotation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x119e1d33213L, "TestNodeReference"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11db9c07f43L, "TypeKeyStatement"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x6abc06f5f4af0d67L, "UnknownRuleReference"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x706cdc8a9fd69324L, "UntypedExpression"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b086b4872L, "VariableAlive"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b0843a235L, "VariableInitialized"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x3ee2cbee8b386d76L, "WarningStatementReference"));
}
