package jetbrains.mps.lang.test.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myNodePropertiesContainer__BehaviorDescriptor = new NodePropertiesContainer__BehaviorDescriptor();
  private final BHDescriptor myNodeErrorCheckOperation__BehaviorDescriptor = new NodeErrorCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeWarningCheckOperation__BehaviorDescriptor = new NodeWarningCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeReachable__BehaviorDescriptor = new NodeReachable__BehaviorDescriptor();
  private final BHDescriptor myNodeTypeCheckOperation__BehaviorDescriptor = new NodeTypeCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeCheckOperation__BehaviorDescriptor = new NodeCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeOperationsContainer__BehaviorDescriptor = new NodeOperationsContainer__BehaviorDescriptor();
  private final BHDescriptor myCheckNodeForErrorMessagesOperation__BehaviorDescriptor = new CheckNodeForErrorMessagesOperation__BehaviorDescriptor();
  private final BHDescriptor myCheckDataFlowOperation__BehaviorDescriptor = new CheckDataFlowOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeUnreachable__BehaviorDescriptor = new NodeUnreachable__BehaviorDescriptor();
  private final BHDescriptor myVariableInitialized__BehaviorDescriptor = new VariableInitialized__BehaviorDescriptor();
  private final BHDescriptor myVariableAlive__BehaviorDescriptor = new VariableAlive__BehaviorDescriptor();
  private final BHDescriptor myNodesTestCase__BehaviorDescriptor = new NodesTestCase__BehaviorDescriptor();
  private final BHDescriptor myNodesTestMethod__BehaviorDescriptor = new NodesTestMethod__BehaviorDescriptor();
  private final BHDescriptor myINodeAnnotation__BehaviorDescriptor = new INodeAnnotation__BehaviorDescriptor();
  private final BHDescriptor myEditorTestCase__BehaviorDescriptor = new EditorTestCase__BehaviorDescriptor();
  private final BHDescriptor myAnonymousCellAnnotation__BehaviorDescriptor = new AnonymousCellAnnotation__BehaviorDescriptor();
  private final BHDescriptor myMockAnnotation__BehaviorDescriptor = new MockAnnotation__BehaviorDescriptor();
  private final BHDescriptor myNodeTypeSetCheckOperation__BehaviorDescriptor = new NodeTypeSetCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myDragMouseStatement__BehaviorDescriptor = new DragMouseStatement__BehaviorDescriptor();
  private final BHDescriptor myNodeTypeSystemErrorCheckOperation__BehaviorDescriptor = new NodeTypeSystemErrorCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myScopesTest__BehaviorDescriptor = new ScopesTest__BehaviorDescriptor();
  private final BHDescriptor myActionReference__BehaviorDescriptor = new ActionReference__BehaviorDescriptor();
  private final BHDescriptor myBootstrapActionReference__BehaviorDescriptor = new BootstrapActionReference__BehaviorDescriptor();
  private final BHDescriptor myINodesTestMethod__BehaviorDescriptor = new INodesTestMethod__BehaviorDescriptor();
  private final BHDescriptor myMockScopeProvider__BehaviorDescriptor = new MockScopeProvider__BehaviorDescriptor();
  private final BHDescriptor myNodeInfoCheckOperation__BehaviorDescriptor = new NodeInfoCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myInfoStatementReference__BehaviorDescriptor = new InfoStatementReference__BehaviorDescriptor();
  private final BHDescriptor myIReferenceAttachable__BehaviorDescriptor = new IReferenceAttachable__BehaviorDescriptor();
  private final BHDescriptor myMPSActionReference__BehaviorDescriptor = new MPSActionReference__BehaviorDescriptor();
  private final BHDescriptor myNodeRuleCheckOperation__BehaviorDescriptor = new NodeRuleCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeExpectedTypeCheckOperation__BehaviorDescriptor = new NodeExpectedTypeCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myReportErrorStatementReference__BehaviorDescriptor = new ReportErrorStatementReference__BehaviorDescriptor();
  private final BHDescriptor myWarningStatementReference__BehaviorDescriptor = new WarningStatementReference__BehaviorDescriptor();
  private final BHDescriptor myTestInfo__BehaviorDescriptor = new TestInfo__BehaviorDescriptor();
  private final BHDescriptor myNodeTypeSystemRuleCheckOperation__BehaviorDescriptor = new NodeTypeSystemRuleCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myMigrationTestCase__BehaviorDescriptor = new MigrationTestCase__BehaviorDescriptor();
  private final BHDescriptor myUnknownRuleReference__BehaviorDescriptor = new UnknownRuleReference__BehaviorDescriptor();
  private final BHDescriptor myIRuleReference__BehaviorDescriptor = new IRuleReference__BehaviorDescriptor();
  private final BHDescriptor myNodeUnknownErrorCheckOperation__BehaviorDescriptor = new NodeUnknownErrorCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myAbstractNodeErrorCheckOperation__BehaviorDescriptor = new AbstractNodeErrorCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeConstraintsErrorCheckOperation__BehaviorDescriptor = new NodeConstraintsErrorCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myAbstractNodeWarningCheckOperation__BehaviorDescriptor = new AbstractNodeWarningCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeConstraintsWarningCheckOperation__BehaviorDescriptor = new NodeConstraintsWarningCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeUnknownWarningCheckOperation__BehaviorDescriptor = new NodeUnknownWarningCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myIChecksRules__BehaviorDescriptor = new IChecksRules__BehaviorDescriptor();
  private final BHDescriptor myNodeTypeSystemWarningCheckOperation__BehaviorDescriptor = new NodeTypeSystemWarningCheckOperation__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myAbstractNodeErrorCheckOperation__BehaviorDescriptor;
      case 1:
        return myAbstractNodeWarningCheckOperation__BehaviorDescriptor;
      case 2:
        return myActionReference__BehaviorDescriptor;
      case 3:
        return myAnonymousCellAnnotation__BehaviorDescriptor;
      case 4:
        return myBootstrapActionReference__BehaviorDescriptor;
      case 5:
        return myCheckDataFlowOperation__BehaviorDescriptor;
      case 6:
        return myCheckNodeForErrorMessagesOperation__BehaviorDescriptor;
      case 7:
        return myDragMouseStatement__BehaviorDescriptor;
      case 8:
        return myEditorTestCase__BehaviorDescriptor;
      case 9:
        return myIChecksRules__BehaviorDescriptor;
      case 10:
        return myINodeAnnotation__BehaviorDescriptor;
      case 11:
        return myINodesTestMethod__BehaviorDescriptor;
      case 12:
        return myIReferenceAttachable__BehaviorDescriptor;
      case 13:
        return myIRuleReference__BehaviorDescriptor;
      case 14:
        return myInfoStatementReference__BehaviorDescriptor;
      case 15:
        return myMPSActionReference__BehaviorDescriptor;
      case 16:
        return myMigrationTestCase__BehaviorDescriptor;
      case 17:
        return myMockAnnotation__BehaviorDescriptor;
      case 18:
        return myMockScopeProvider__BehaviorDescriptor;
      case 19:
        return myNodeCheckOperation__BehaviorDescriptor;
      case 20:
        return myNodeConstraintsErrorCheckOperation__BehaviorDescriptor;
      case 21:
        return myNodeConstraintsWarningCheckOperation__BehaviorDescriptor;
      case 22:
        return myNodeErrorCheckOperation__BehaviorDescriptor;
      case 23:
        return myNodeExpectedTypeCheckOperation__BehaviorDescriptor;
      case 24:
        return myNodeInfoCheckOperation__BehaviorDescriptor;
      case 25:
        return myNodeOperationsContainer__BehaviorDescriptor;
      case 26:
        return myNodePropertiesContainer__BehaviorDescriptor;
      case 27:
        return myNodeReachable__BehaviorDescriptor;
      case 28:
        return myNodeRuleCheckOperation__BehaviorDescriptor;
      case 29:
        return myNodeTypeCheckOperation__BehaviorDescriptor;
      case 30:
        return myNodeTypeSetCheckOperation__BehaviorDescriptor;
      case 31:
        return myNodeTypeSystemErrorCheckOperation__BehaviorDescriptor;
      case 32:
        return myNodeTypeSystemRuleCheckOperation__BehaviorDescriptor;
      case 33:
        return myNodeTypeSystemWarningCheckOperation__BehaviorDescriptor;
      case 34:
        return myNodeUnknownErrorCheckOperation__BehaviorDescriptor;
      case 35:
        return myNodeUnknownWarningCheckOperation__BehaviorDescriptor;
      case 36:
        return myNodeUnreachable__BehaviorDescriptor;
      case 37:
        return myNodeWarningCheckOperation__BehaviorDescriptor;
      case 38:
        return myNodesTestCase__BehaviorDescriptor;
      case 39:
        return myNodesTestMethod__BehaviorDescriptor;
      case 40:
        return myReportErrorStatementReference__BehaviorDescriptor;
      case 41:
        return myScopesTest__BehaviorDescriptor;
      case 42:
        return myTestInfo__BehaviorDescriptor;
      case 43:
        return myUnknownRuleReference__BehaviorDescriptor;
      case 44:
        return myVariableAlive__BehaviorDescriptor;
      case 45:
        return myVariableInitialized__BehaviorDescriptor;
      case 46:
        return myWarningStatementReference__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x6cbc57bb7a195a9aL), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x73a7cdcfbbbf1ec9L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0xf48c620dd899bf4L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11e31babe12L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0xf48c620dd899d06L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b081c90baL), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07d3d54aL), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x2ec0ea8c55ca0a3L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11e314b20e0L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x770c2c9f6ef97f30L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11e0d52da47L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x1510445f8a2c272dL), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x2827acdc621ed3acL), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x6abc06f5f4afab9dL), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x1de1fbd5fbfe9cf9L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x3ad5e12a687a89d9L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x4c010b30d9be4be7L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11e6f14cfccL), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x1de1fbd5fbf63919L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x73a7cdcfba5276dfL), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x73a7cdcfbbbf8aadL), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b01e7283dL), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x3cff387beb174046L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x1de1fbd5fbfe6272L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07a3d4b5L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b01e50b53L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b02f9eeb8L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x3bc62fcd9b027d04L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b03034484L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x15404cb86444497L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x5f2a921acc5d63aL), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x4a391b6dc8e619d9L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x770c2c9f6f1bbfcaL), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x6cbc57bb7a1917bdL), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x73a7cdcfbbc0b900L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b082d1cb9L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b0224b421L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b55b49e46L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b55b54d88L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x3ee2cbee8b19b06dL), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x7181d929c720809L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x46bca02bfb6e730aL), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x6abc06f5f4af0d67L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b086b4872L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b0843a235L), MetaIdFactory.conceptId(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x3ee2cbee8b386d76L)).seal();
}
