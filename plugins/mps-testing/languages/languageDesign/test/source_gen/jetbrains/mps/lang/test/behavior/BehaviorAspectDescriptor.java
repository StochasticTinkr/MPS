package jetbrains.mps.lang.test.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myNodePropertiesContainer__BehaviorDescriptor = new NodePropertiesContainer__BehaviorDescriptor();
  private final BHDescriptor myNodeErrorCheckOperation__BehaviorDescriptor = new NodeErrorCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeWarningCheckOperation__BehaviorDescriptor = new NodeWarningCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeReachable__BehaviorDescriptor = new NodeReachable__BehaviorDescriptor();
  private final BHDescriptor myNodeTypeCheckOperation__BehaviorDescriptor = new NodeTypeCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeCheckOperation__BehaviorDescriptor = new NodeCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeOperationsContainer__BehaviorDescriptor = new NodeOperationsContainer__BehaviorDescriptor();
  private final BHDescriptor myCheckNodeForErrorMessagesOperation__BehaviorDescriptor = new CheckNodeForErrorMessagesOperation__BehaviorDescriptor();
  private final BHDescriptor myCheckDataFlowOperation__BehaviorDescriptor = new CheckDataFlowOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeUnreachable__BehaviorDescriptor = new NodeUnreachable__BehaviorDescriptor();
  private final BHDescriptor myVariableInitialized__BehaviorDescriptor = new VariableInitialized__BehaviorDescriptor();
  private final BHDescriptor myVariableAlive__BehaviorDescriptor = new VariableAlive__BehaviorDescriptor();
  private final BHDescriptor myNodesTestCase__BehaviorDescriptor = new NodesTestCase__BehaviorDescriptor();
  private final BHDescriptor myNodesTestMethod__BehaviorDescriptor = new NodesTestMethod__BehaviorDescriptor();
  private final BHDescriptor myINodeAnnotation__BehaviorDescriptor = new INodeAnnotation__BehaviorDescriptor();
  private final BHDescriptor myEditorTestCase__BehaviorDescriptor = new EditorTestCase__BehaviorDescriptor();
  private final BHDescriptor myAnonymousCellAnnotation__BehaviorDescriptor = new AnonymousCellAnnotation__BehaviorDescriptor();
  private final BHDescriptor myMockAnnotation__BehaviorDescriptor = new MockAnnotation__BehaviorDescriptor();
  private final BHDescriptor myNodeTypeSetCheckOperation__BehaviorDescriptor = new NodeTypeSetCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myDragMouseStatement__BehaviorDescriptor = new DragMouseStatement__BehaviorDescriptor();
  private final BHDescriptor myNodeTypeSystemErrorCheckOperation__BehaviorDescriptor = new NodeTypeSystemErrorCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myScopesTest__BehaviorDescriptor = new ScopesTest__BehaviorDescriptor();
  private final BHDescriptor myActionReference__BehaviorDescriptor = new ActionReference__BehaviorDescriptor();
  private final BHDescriptor myBootstrapActionReference__BehaviorDescriptor = new BootstrapActionReference__BehaviorDescriptor();
  private final BHDescriptor myNodeInfoCheckOperation__BehaviorDescriptor = new NodeInfoCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myInfoStatementReference__BehaviorDescriptor = new InfoStatementReference__BehaviorDescriptor();
  private final BHDescriptor myIReferenceAttachable__BehaviorDescriptor = new IReferenceAttachable__BehaviorDescriptor();
  private final BHDescriptor myMPSActionReference__BehaviorDescriptor = new MPSActionReference__BehaviorDescriptor();
  private final BHDescriptor myNodeRuleCheckOperation__BehaviorDescriptor = new NodeRuleCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeExpectedTypeCheckOperation__BehaviorDescriptor = new NodeExpectedTypeCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myReportErrorStatementReference__BehaviorDescriptor = new ReportErrorStatementReference__BehaviorDescriptor();
  private final BHDescriptor myWarningStatementReference__BehaviorDescriptor = new WarningStatementReference__BehaviorDescriptor();
  private final BHDescriptor myTestInfo__BehaviorDescriptor = new TestInfo__BehaviorDescriptor();
  private final BHDescriptor myNodeTypeSystemRuleCheckOperation__BehaviorDescriptor = new NodeTypeSystemRuleCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myUnknownRuleReference__BehaviorDescriptor = new UnknownRuleReference__BehaviorDescriptor();
  private final BHDescriptor myIRuleReference__BehaviorDescriptor = new IRuleReference__BehaviorDescriptor();
  private final BHDescriptor myNodeUnknownErrorCheckOperation__BehaviorDescriptor = new NodeUnknownErrorCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myAbstractNodeErrorCheckOperation__BehaviorDescriptor = new AbstractNodeErrorCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeConstraintsErrorCheckOperation__BehaviorDescriptor = new NodeConstraintsErrorCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myAbstractNodeWarningCheckOperation__BehaviorDescriptor = new AbstractNodeWarningCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeConstraintsWarningCheckOperation__BehaviorDescriptor = new NodeConstraintsWarningCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeUnknownWarningCheckOperation__BehaviorDescriptor = new NodeUnknownWarningCheckOperation__BehaviorDescriptor();
  private final BHDescriptor myIChecksRules__BehaviorDescriptor = new IChecksRules__BehaviorDescriptor();
  private final BHDescriptor myNodeTypeSystemWarningCheckOperation__BehaviorDescriptor = new NodeTypeSystemWarningCheckOperation__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0vb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myAbstractNodeErrorCheckOperation__BehaviorDescriptor;
          }
          break;
        case 1:
          if (true) {
            return myAbstractNodeWarningCheckOperation__BehaviorDescriptor;
          }
          break;
        case 2:
          if (true) {
            return myActionReference__BehaviorDescriptor;
          }
          break;
        case 3:
          if (true) {
            return myAnonymousCellAnnotation__BehaviorDescriptor;
          }
          break;
        case 4:
          if (true) {
            return myBootstrapActionReference__BehaviorDescriptor;
          }
          break;
        case 5:
          if (true) {
            return myCheckDataFlowOperation__BehaviorDescriptor;
          }
          break;
        case 6:
          if (true) {
            return myCheckNodeForErrorMessagesOperation__BehaviorDescriptor;
          }
          break;
        case 7:
          if (true) {
            return myDragMouseStatement__BehaviorDescriptor;
          }
          break;
        case 8:
          if (true) {
            return myEditorTestCase__BehaviorDescriptor;
          }
          break;
        case 9:
          if (true) {
            return myIChecksRules__BehaviorDescriptor;
          }
          break;
        case 10:
          if (true) {
            return myINodeAnnotation__BehaviorDescriptor;
          }
          break;
        case 11:
          if (true) {
            return myIReferenceAttachable__BehaviorDescriptor;
          }
          break;
        case 12:
          if (true) {
            return myIRuleReference__BehaviorDescriptor;
          }
          break;
        case 13:
          if (true) {
            return myInfoStatementReference__BehaviorDescriptor;
          }
          break;
        case 14:
          if (true) {
            return myMPSActionReference__BehaviorDescriptor;
          }
          break;
        case 15:
          if (true) {
            return myMockAnnotation__BehaviorDescriptor;
          }
          break;
        case 16:
          if (true) {
            return myNodeCheckOperation__BehaviorDescriptor;
          }
          break;
        case 17:
          if (true) {
            return myNodeConstraintsErrorCheckOperation__BehaviorDescriptor;
          }
          break;
        case 18:
          if (true) {
            return myNodeConstraintsWarningCheckOperation__BehaviorDescriptor;
          }
          break;
        case 19:
          if (true) {
            return myNodeErrorCheckOperation__BehaviorDescriptor;
          }
          break;
        case 20:
          if (true) {
            return myNodeExpectedTypeCheckOperation__BehaviorDescriptor;
          }
          break;
        case 21:
          if (true) {
            return myNodeInfoCheckOperation__BehaviorDescriptor;
          }
          break;
        case 22:
          if (true) {
            return myNodeOperationsContainer__BehaviorDescriptor;
          }
          break;
        case 23:
          if (true) {
            return myNodePropertiesContainer__BehaviorDescriptor;
          }
          break;
        case 24:
          if (true) {
            return myNodeReachable__BehaviorDescriptor;
          }
          break;
        case 25:
          if (true) {
            return myNodeRuleCheckOperation__BehaviorDescriptor;
          }
          break;
        case 26:
          if (true) {
            return myNodeTypeCheckOperation__BehaviorDescriptor;
          }
          break;
        case 27:
          if (true) {
            return myNodeTypeSetCheckOperation__BehaviorDescriptor;
          }
          break;
        case 28:
          if (true) {
            return myNodeTypeSystemErrorCheckOperation__BehaviorDescriptor;
          }
          break;
        case 29:
          if (true) {
            return myNodeTypeSystemRuleCheckOperation__BehaviorDescriptor;
          }
          break;
        case 30:
          if (true) {
            return myNodeTypeSystemWarningCheckOperation__BehaviorDescriptor;
          }
          break;
        case 31:
          if (true) {
            return myNodeUnknownErrorCheckOperation__BehaviorDescriptor;
          }
          break;
        case 32:
          if (true) {
            return myNodeUnknownWarningCheckOperation__BehaviorDescriptor;
          }
          break;
        case 33:
          if (true) {
            return myNodeUnreachable__BehaviorDescriptor;
          }
          break;
        case 34:
          if (true) {
            return myNodeWarningCheckOperation__BehaviorDescriptor;
          }
          break;
        case 35:
          if (true) {
            return myNodesTestCase__BehaviorDescriptor;
          }
          break;
        case 36:
          if (true) {
            return myNodesTestMethod__BehaviorDescriptor;
          }
          break;
        case 37:
          if (true) {
            return myReportErrorStatementReference__BehaviorDescriptor;
          }
          break;
        case 38:
          if (true) {
            return myScopesTest__BehaviorDescriptor;
          }
          break;
        case 39:
          if (true) {
            return myTestInfo__BehaviorDescriptor;
          }
          break;
        case 40:
          if (true) {
            return myUnknownRuleReference__BehaviorDescriptor;
          }
          break;
        case 41:
          if (true) {
            return myVariableAlive__BehaviorDescriptor;
          }
          break;
        case 42:
          if (true) {
            return myVariableInitialized__BehaviorDescriptor;
          }
          break;
        case 43:
          if (true) {
            return myWarningStatementReference__BehaviorDescriptor;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0vb = buildConceptIndices(MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x6cbc57bb7a195a9aL, "jetbrains.mps.lang.test.structure.AbstractNodeErrorCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x73a7cdcfbbbf1ec9L, "jetbrains.mps.lang.test.structure.AbstractNodeWarningCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0xf48c620dd899bf4L, "jetbrains.mps.lang.test.structure.ActionReference"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11e31babe12L, "jetbrains.mps.lang.test.structure.AnonymousCellAnnotation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0xf48c620dd899d06L, "jetbrains.mps.lang.test.structure.BootstrapActionReference"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b081c90baL, "jetbrains.mps.lang.test.structure.CheckDataFlowOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07d3d54aL, "jetbrains.mps.lang.test.structure.CheckNodeForErrorMessagesOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x2ec0ea8c55ca0a3L, "jetbrains.mps.lang.test.structure.DragMouseStatement"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11e314b20e0L, "jetbrains.mps.lang.test.structure.EditorTestCase"), MetaAdapterFactory.getInterfaceConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x770c2c9f6ef97f30L, "jetbrains.mps.lang.test.structure.IChecksRules"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11e0d52da47L, "jetbrains.mps.lang.test.structure.INodeAnnotation"), MetaAdapterFactory.getInterfaceConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x2827acdc621ed3acL, "jetbrains.mps.lang.test.structure.IReferenceAttachable"), MetaAdapterFactory.getInterfaceConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x6abc06f5f4afab9dL, "jetbrains.mps.lang.test.structure.IRuleReference"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x1de1fbd5fbfe9cf9L, "jetbrains.mps.lang.test.structure.InfoStatementReference"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x3ad5e12a687a89d9L, "jetbrains.mps.lang.test.structure.MPSActionReference"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11e6f14cfccL, "jetbrains.mps.lang.test.structure.MockAnnotation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07797e20L, "jetbrains.mps.lang.test.structure.NodeCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x73a7cdcfba5276dfL, "jetbrains.mps.lang.test.structure.NodeConstraintsErrorCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x73a7cdcfbbbf8aadL, "jetbrains.mps.lang.test.structure.NodeConstraintsWarningCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b01e7283dL, "jetbrains.mps.lang.test.structure.NodeErrorCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x3cff387beb174046L, "jetbrains.mps.lang.test.structure.NodeExpectedTypeCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x1de1fbd5fbfe6272L, "jetbrains.mps.lang.test.structure.NodeInfoCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b07a3d4b5L, "jetbrains.mps.lang.test.structure.NodeOperationsContainer"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b01e50b53L, "jetbrains.mps.lang.test.structure.NodePropertiesContainer"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b02f9eeb8L, "jetbrains.mps.lang.test.structure.NodeReachable"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x3bc62fcd9b027d04L, "jetbrains.mps.lang.test.structure.NodeRuleCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b03034484L, "jetbrains.mps.lang.test.structure.NodeTypeCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x15404cb86444497L, "jetbrains.mps.lang.test.structure.NodeTypeSetCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x5f2a921acc5d63aL, "jetbrains.mps.lang.test.structure.NodeTypeSystemErrorCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x4a391b6dc8e619d9L, "jetbrains.mps.lang.test.structure.NodeTypeSystemRuleCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x770c2c9f6f1bbfcaL, "jetbrains.mps.lang.test.structure.NodeTypeSystemWarningCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x6cbc57bb7a1917bdL, "jetbrains.mps.lang.test.structure.NodeUnknownErrorCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x73a7cdcfbbc0b900L, "jetbrains.mps.lang.test.structure.NodeUnknownWarningCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b082d1cb9L, "jetbrains.mps.lang.test.structure.NodeUnreachable"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b0224b421L, "jetbrains.mps.lang.test.structure.NodeWarningCheckOperation"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b55b49e46L, "jetbrains.mps.lang.test.structure.NodesTestCase"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b55b54d88L, "jetbrains.mps.lang.test.structure.NodesTestMethod"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x3ee2cbee8b19b06dL, "jetbrains.mps.lang.test.structure.ReportErrorStatementReference"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x7181d929c720809L, "jetbrains.mps.lang.test.structure.ScopesTest"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x46bca02bfb6e730aL, "jetbrains.mps.lang.test.structure.TestInfo"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x6abc06f5f4af0d67L, "jetbrains.mps.lang.test.structure.UnknownRuleReference"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b086b4872L, "jetbrains.mps.lang.test.structure.VariableAlive"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x11b0843a235L, "jetbrains.mps.lang.test.structure.VariableInitialized"), MetaAdapterFactory.getConcept(0x8585453e6bfb4d80L, 0x98deb16074f1d86cL, 0x3ee2cbee8b386d76L, "jetbrains.mps.lang.test.structure.WarningStatementReference"));
}
