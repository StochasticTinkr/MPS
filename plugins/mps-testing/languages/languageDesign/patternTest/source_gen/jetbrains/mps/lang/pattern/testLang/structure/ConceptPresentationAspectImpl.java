package jetbrains.mps.lang.pattern.testLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ListValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PatternTest = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestListReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestPropertyVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableValue = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_ListValue;
      case 1:
        return props_PatternTest;
      case 2:
        return props_PropertyValue;
      case 3:
        return props_TestListReference;
      case 4:
        return props_TestPropertyVariableReference;
      case 5:
        return props_TestVariableReference;
      case 6:
        return props_VariableValue;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
