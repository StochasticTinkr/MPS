package jetbrains.mps.lang.editor.editorTest.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Abstract_SubstTestChild_WithNextApplicableEditorAndMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttractsFocusBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributeChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributeWithChildren = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributedConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BracesBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BracesStubBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClassReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CollapsedByDefault = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CollapsedConditionally = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CollapsibleConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Composition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DelTestAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DelTestChild1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DelTestChildContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DelTestChildSpecialContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DelTestRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DelTestSpecialAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DelTestSpecialChild1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DeleteWrapperChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DeleteWrapperRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FoldingContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IBaseTestBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IDelTestChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IDelTestConcreteChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISpecialDelTestChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISpecialDelTestConcreteChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitChildWithDirectCycle_card1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitChildWithDirectCycle_card1n = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitChildWithIndirectCycle_card1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitChildWithIndirectCycle_card1n = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitChildWithTwoSameConceptChildren = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitGrandChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitGrandChildWithIndirectCycle_card1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitGrandChildWithIndirectCycle_card1n = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InspectorBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntegerLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LabelConceptWithProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NonEmptyProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotEditableVaraileReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PlusExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceAnnotataion = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SelectionChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SelectionContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SideTranformWrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleNodeHidingAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleNodesContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimplePropertyAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimplePropertyContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleParent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstMiddlewareChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstTestAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstTestBooleanPropertyChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstTestChild_WithNextApplicableEditorAndMenu_1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstTestChild_WithNextApplicableEditorAndMenu_2 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstTestEnumPropertyChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstTestRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestBlockList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableDeclarationBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableDeclarationReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VerticalLayoutBlockList = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Abstract_SubstTestChild_WithNextApplicableEditorAndMenu:
        return props_Abstract_SubstTestChild_WithNextApplicableEditorAndMenu;
      case LanguageConceptSwitch.AttractsFocusBlock:
        return props_AttractsFocusBlock;
      case LanguageConceptSwitch.AttributeChild:
        return props_AttributeChild;
      case LanguageConceptSwitch.AttributeWithChildren:
        return props_AttributeWithChildren;
      case LanguageConceptSwitch.AttributedConcept:
        return props_AttributedConcept;
      case LanguageConceptSwitch.BinaryExpression:
        return props_BinaryExpression;
      case LanguageConceptSwitch.BracesBlock:
        return props_BracesBlock;
      case LanguageConceptSwitch.BracesStubBlock:
        return props_BracesStubBlock;
      case LanguageConceptSwitch.ClassReference:
        return props_ClassReference;
      case LanguageConceptSwitch.CollapsedByDefault:
        return props_CollapsedByDefault;
      case LanguageConceptSwitch.CollapsedConditionally:
        return props_CollapsedConditionally;
      case LanguageConceptSwitch.CollapsibleConcept:
        return props_CollapsibleConcept;
      case LanguageConceptSwitch.Composition:
        return props_Composition;
      case LanguageConceptSwitch.DelTestAbstractChild:
        return props_DelTestAbstractChild;
      case LanguageConceptSwitch.DelTestChild1:
        return props_DelTestChild1;
      case LanguageConceptSwitch.DelTestChildContainer:
        return props_DelTestChildContainer;
      case LanguageConceptSwitch.DelTestChildSpecialContainer:
        return props_DelTestChildSpecialContainer;
      case LanguageConceptSwitch.DelTestRoot:
        return props_DelTestRoot;
      case LanguageConceptSwitch.DelTestSpecialAbstractChild:
        return props_DelTestSpecialAbstractChild;
      case LanguageConceptSwitch.DelTestSpecialChild1:
        return props_DelTestSpecialChild1;
      case LanguageConceptSwitch.DeleteWrapperChild:
        return props_DeleteWrapperChild;
      case LanguageConceptSwitch.DeleteWrapperRoot:
        return props_DeleteWrapperRoot;
      case LanguageConceptSwitch.FoldingContainer:
        return props_FoldingContainer;
      case LanguageConceptSwitch.IBaseTestBlock:
        return props_IBaseTestBlock;
      case LanguageConceptSwitch.IDelTestChild:
        return props_IDelTestChild;
      case LanguageConceptSwitch.IDelTestConcreteChild:
        return props_IDelTestConcreteChild;
      case LanguageConceptSwitch.ISpecialDelTestChild:
        return props_ISpecialDelTestChild;
      case LanguageConceptSwitch.ISpecialDelTestConcreteChild:
        return props_ISpecialDelTestConcreteChild;
      case LanguageConceptSwitch.InitAbstractChild:
        return props_InitAbstractChild;
      case LanguageConceptSwitch.InitChildWithDirectCycle_card1:
        return props_InitChildWithDirectCycle_card1;
      case LanguageConceptSwitch.InitChildWithDirectCycle_card1n:
        return props_InitChildWithDirectCycle_card1n;
      case LanguageConceptSwitch.InitChildWithIndirectCycle_card1:
        return props_InitChildWithIndirectCycle_card1;
      case LanguageConceptSwitch.InitChildWithIndirectCycle_card1n:
        return props_InitChildWithIndirectCycle_card1n;
      case LanguageConceptSwitch.InitChildWithTwoSameConceptChildren:
        return props_InitChildWithTwoSameConceptChildren;
      case LanguageConceptSwitch.InitContainer:
        return props_InitContainer;
      case LanguageConceptSwitch.InitGrandChild:
        return props_InitGrandChild;
      case LanguageConceptSwitch.InitGrandChildWithIndirectCycle_card1:
        return props_InitGrandChildWithIndirectCycle_card1;
      case LanguageConceptSwitch.InitGrandChildWithIndirectCycle_card1n:
        return props_InitGrandChildWithIndirectCycle_card1n;
      case LanguageConceptSwitch.InspectorBlock:
        return props_InspectorBlock;
      case LanguageConceptSwitch.IntegerLiteral:
        return props_IntegerLiteral;
      case LanguageConceptSwitch.LabelConceptWithProperty:
        return props_LabelConceptWithProperty;
      case LanguageConceptSwitch.NonEmptyProperty:
        return props_NonEmptyProperty;
      case LanguageConceptSwitch.NotEditableVaraileReference:
        return props_NotEditableVaraileReference;
      case LanguageConceptSwitch.PlusExpression:
        return props_PlusExpression;
      case LanguageConceptSwitch.ReferenceAnnotataion:
        return props_ReferenceAnnotataion;
      case LanguageConceptSwitch.SelectionChild:
        return props_SelectionChild;
      case LanguageConceptSwitch.SelectionContainer:
        return props_SelectionContainer;
      case LanguageConceptSwitch.SideTranformWrapper:
        return props_SideTranformWrapper;
      case LanguageConceptSwitch.SimpleNode:
        return props_SimpleNode;
      case LanguageConceptSwitch.SimpleNodeHidingAttribute:
        return props_SimpleNodeHidingAttribute;
      case LanguageConceptSwitch.SimpleNodesContainer:
        return props_SimpleNodesContainer;
      case LanguageConceptSwitch.SimplePropertyAttribute:
        return props_SimplePropertyAttribute;
      case LanguageConceptSwitch.SimplePropertyContainer:
        return props_SimplePropertyContainer;
      case LanguageConceptSwitch.StubBlock:
        return props_StubBlock;
      case LanguageConceptSwitch.StyleChild:
        return props_StyleChild;
      case LanguageConceptSwitch.StyleParent:
        return props_StyleParent;
      case LanguageConceptSwitch.SubstMiddlewareChild:
        return props_SubstMiddlewareChild;
      case LanguageConceptSwitch.SubstTestAbstractChild:
        return props_SubstTestAbstractChild;
      case LanguageConceptSwitch.SubstTestBooleanPropertyChild:
        return props_SubstTestBooleanPropertyChild;
      case LanguageConceptSwitch.SubstTestChild_WithNextApplicableEditorAndMenu_1:
        return props_SubstTestChild_WithNextApplicableEditorAndMenu_1;
      case LanguageConceptSwitch.SubstTestChild_WithNextApplicableEditorAndMenu_2:
        return props_SubstTestChild_WithNextApplicableEditorAndMenu_2;
      case LanguageConceptSwitch.SubstTestEnumPropertyChild:
        return props_SubstTestEnumPropertyChild;
      case LanguageConceptSwitch.SubstTestRoot:
        return props_SubstTestRoot;
      case LanguageConceptSwitch.TestBlockList:
        return props_TestBlockList;
      case LanguageConceptSwitch.VariableDeclarationBlock:
        return props_VariableDeclarationBlock;
      case LanguageConceptSwitch.VariableDeclarationReference:
        return props_VariableDeclarationReference;
      case LanguageConceptSwitch.VerticalLayoutBlockList:
        return props_VerticalLayoutBlockList;
    }
    return null;
  }
}
