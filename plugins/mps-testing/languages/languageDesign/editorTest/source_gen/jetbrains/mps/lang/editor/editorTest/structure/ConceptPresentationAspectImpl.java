package jetbrains.mps.lang.editor.editorTest.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AttractsFocusBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BracesBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BracesStubBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClassReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CollapsedByDefault = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CollapsedConditionally = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CollapsibleConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Composition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DelTestAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DelTestChild1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DelTestChildContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DelTestRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FoldingContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IBaseTestBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitChildWithDirectCycle_card1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitChildWithDirectCycle_card1n = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitChildWithIndirectCycle_card1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitChildWithIndirectCycle_card1n = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitChildWithTwoSameConceptChildren = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitGrandChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitGrandChildWithIndirectCycle_card1 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitGrandChildWithIndirectCycle_card1n = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InspectorBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntegerLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NonEmptyProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotEditableVaraileReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PlusExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceAnnotataion = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SelectionChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SelectionContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SideTranformWrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimplePropertyAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimplePropertyContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleParent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstMiddlewareChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstTestAbstractChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstTestBooleanPropertyChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstTestEnumPropertyChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstTestRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestBlockList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableDeclarationBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableDeclarationReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VerticalLayoutBlockList = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("81f0abb8-d71e-4d13-a0c1-d2291fbb28b7"), "jetbrains.mps.lang.editor.editorTest")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AttractsFocusBlock;
      case 1:
        return props_BinaryExpression;
      case 2:
        return props_BracesBlock;
      case 3:
        return props_BracesStubBlock;
      case 4:
        return props_ClassReference;
      case 5:
        return props_CollapsedByDefault;
      case 6:
        return props_CollapsedConditionally;
      case 7:
        return props_CollapsibleConcept;
      case 8:
        return props_Composition;
      case 9:
        return props_DelTestAbstractChild;
      case 10:
        return props_DelTestChild1;
      case 11:
        return props_DelTestChildContainer;
      case 12:
        return props_DelTestRoot;
      case 13:
        return props_FoldingContainer;
      case 14:
        return props_IBaseTestBlock;
      case 15:
        return props_InitAbstractChild;
      case 16:
        return props_InitChildWithDirectCycle_card1;
      case 17:
        return props_InitChildWithDirectCycle_card1n;
      case 18:
        return props_InitChildWithIndirectCycle_card1;
      case 19:
        return props_InitChildWithIndirectCycle_card1n;
      case 20:
        return props_InitChildWithTwoSameConceptChildren;
      case 21:
        return props_InitContainer;
      case 22:
        return props_InitGrandChild;
      case 23:
        return props_InitGrandChildWithIndirectCycle_card1;
      case 24:
        return props_InitGrandChildWithIndirectCycle_card1n;
      case 25:
        return props_InspectorBlock;
      case 26:
        return props_IntegerLiteral;
      case 27:
        return props_NonEmptyProperty;
      case 28:
        return props_NotEditableVaraileReference;
      case 29:
        return props_PlusExpression;
      case 30:
        return props_ReferenceAnnotataion;
      case 31:
        return props_SelectionChild;
      case 32:
        return props_SelectionContainer;
      case 33:
        return props_SideTranformWrapper;
      case 34:
        return props_SimplePropertyAttribute;
      case 35:
        return props_SimplePropertyContainer;
      case 36:
        return props_StubBlock;
      case 37:
        return props_StyleChild;
      case 38:
        return props_StyleParent;
      case 39:
        return props_SubstMiddlewareChild;
      case 40:
        return props_SubstTestAbstractChild;
      case 41:
        return props_SubstTestBooleanPropertyChild;
      case 42:
        return props_SubstTestEnumPropertyChild;
      case 43:
        return props_SubstTestRoot;
      case 44:
        return props_TestBlockList;
      case 45:
        return props_VariableDeclarationBlock;
      case 46:
        return props_VariableDeclarationReference;
      case 47:
        return props_VerticalLayoutBlockList;
    }
    throw new IllegalStateException();
  }
}
