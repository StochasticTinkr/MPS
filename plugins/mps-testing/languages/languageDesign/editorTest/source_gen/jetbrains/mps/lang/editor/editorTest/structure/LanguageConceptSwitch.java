package jetbrains.mps.lang.editor.editorTest.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AttractsFocusBlock = 0;
  public static final int AttributeChild = 1;
  public static final int AttributeWithChildren = 2;
  public static final int AttributedConcept = 3;
  public static final int BinaryExpression = 4;
  public static final int BracesBlock = 5;
  public static final int BracesStubBlock = 6;
  public static final int ClassReference = 7;
  public static final int CollapsedByDefault = 8;
  public static final int CollapsedConditionally = 9;
  public static final int CollapsibleConcept = 10;
  public static final int Composition = 11;
  public static final int DelTestAbstractChild = 12;
  public static final int DelTestChild1 = 13;
  public static final int DelTestChildContainer = 14;
  public static final int DelTestRoot = 15;
  public static final int FoldingContainer = 16;
  public static final int IBaseTestBlock = 17;
  public static final int InitAbstractChild = 18;
  public static final int InitChildWithDirectCycle_card1 = 19;
  public static final int InitChildWithDirectCycle_card1n = 20;
  public static final int InitChildWithIndirectCycle_card1 = 21;
  public static final int InitChildWithIndirectCycle_card1n = 22;
  public static final int InitChildWithTwoSameConceptChildren = 23;
  public static final int InitContainer = 24;
  public static final int InitGrandChild = 25;
  public static final int InitGrandChildWithIndirectCycle_card1 = 26;
  public static final int InitGrandChildWithIndirectCycle_card1n = 27;
  public static final int InspectorBlock = 28;
  public static final int IntegerLiteral = 29;
  public static final int NonEmptyProperty = 30;
  public static final int NotEditableVaraileReference = 31;
  public static final int PlusExpression = 32;
  public static final int ReferenceAnnotataion = 33;
  public static final int SelectionChild = 34;
  public static final int SelectionContainer = 35;
  public static final int SideTranformWrapper = 36;
  public static final int SimplePropertyAttribute = 37;
  public static final int SimplePropertyContainer = 38;
  public static final int StubBlock = 39;
  public static final int StyleChild = 40;
  public static final int StyleParent = 41;
  public static final int SubstMiddlewareChild = 42;
  public static final int SubstTestAbstractChild = 43;
  public static final int SubstTestBooleanPropertyChild = 44;
  public static final int SubstTestEnumPropertyChild = 45;
  public static final int SubstTestRoot = 46;
  public static final int TestBlockList = 47;
  public static final int VariableDeclarationBlock = 48;
  public static final int VariableDeclarationReference = 49;
  public static final int VerticalLayoutBlockList = 50;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L);
    builder.put(0x2444dad137f8d778L, AttractsFocusBlock);
    builder.put(0x50d5d1397cfbad50L, AttributeChild);
    builder.put(0x5ed256cba0c5b00L, AttributeWithChildren);
    builder.put(0x5ed256cba0c5c3eL, AttributedConcept);
    builder.put(0x46eb259b12f761daL, BinaryExpression);
    builder.put(0x3361ce1b17d7eaa8L, BracesBlock);
    builder.put(0x75ed75ef06861df4L, BracesStubBlock);
    builder.put(0x214b16e1c73042cfL, ClassReference);
    builder.put(0x569b712fbc626858L, CollapsedByDefault);
    builder.put(0xc06e5dab9716359L, CollapsedConditionally);
    builder.put(0x671b139f12ae357fL, CollapsibleConcept);
    builder.put(0x2fd7ff1ee43ef592L, Composition);
    builder.put(0x6c4cdc7b1a84c447L, DelTestAbstractChild);
    builder.put(0x6c4cdc7b1a84c480L, DelTestChild1);
    builder.put(0x6c4cdc7b1a84c222L, DelTestChildContainer);
    builder.put(0x6c4cdc7b1a8839faL, DelTestRoot);
    builder.put(0x569b712fbc6572f0L, FoldingContainer);
    builder.put(0x3361ce1b17d7eaa9L, IBaseTestBlock);
    builder.put(0x1b00debf2d3601a8L, InitAbstractChild);
    builder.put(0x1b00debf2d3601a5L, InitChildWithDirectCycle_card1);
    builder.put(0x78d10d0e00c2593aL, InitChildWithDirectCycle_card1n);
    builder.put(0x78d10d0e00c41e6eL, InitChildWithIndirectCycle_card1);
    builder.put(0x78d10d0e00c48499L, InitChildWithIndirectCycle_card1n);
    builder.put(0x67739d157f7a404bL, InitChildWithTwoSameConceptChildren);
    builder.put(0x1b00debf2d3601a4L, InitContainer);
    builder.put(0x67739d157f7a404cL, InitGrandChild);
    builder.put(0x78d10d0e00c41e70L, InitGrandChildWithIndirectCycle_card1);
    builder.put(0x78d10d0e00c4849dL, InitGrandChildWithIndirectCycle_card1n);
    builder.put(0x31b7f1691792b1f4L, InspectorBlock);
    builder.put(0x46eb259b12f68107L, IntegerLiteral);
    builder.put(0x4e2db2c9f6d76026L, NonEmptyProperty);
    builder.put(0x44e7cb3605ec4004L, NotEditableVaraileReference);
    builder.put(0x46eb259b12fa01d4L, PlusExpression);
    builder.put(0x6a48144fa856f460L, ReferenceAnnotataion);
    builder.put(0x617705b269dc8251L, SelectionChild);
    builder.put(0x617705b269dc6674L, SelectionContainer);
    builder.put(0x46eb259b12ef5172L, SideTranformWrapper);
    builder.put(0x2c59702023f915adL, SimplePropertyAttribute);
    builder.put(0x2c59702023f8181eL, SimplePropertyContainer);
    builder.put(0x3361ce1b17d9420cL, StubBlock);
    builder.put(0x5a79ee4e778a5efcL, StyleChild);
    builder.put(0x5a79ee4e778a5efbL, StyleParent);
    builder.put(0x7ebf3747d08cab96L, SubstMiddlewareChild);
    builder.put(0xd4944c0b03c34aeL, SubstTestAbstractChild);
    builder.put(0xd4944c0b03c352dL, SubstTestBooleanPropertyChild);
    builder.put(0xd4944c0b03c35aeL, SubstTestEnumPropertyChild);
    builder.put(0xd4944c0b03c33b7L, SubstTestRoot);
    builder.put(0x3361ce1b17d62dbbL, TestBlockList);
    builder.put(0x2444dad137f90ed1L, VariableDeclarationBlock);
    builder.put(0x2444dad137fa9b5cL, VariableDeclarationReference);
    builder.put(0x5f322b2c7f2c2abaL, VerticalLayoutBlockList);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
