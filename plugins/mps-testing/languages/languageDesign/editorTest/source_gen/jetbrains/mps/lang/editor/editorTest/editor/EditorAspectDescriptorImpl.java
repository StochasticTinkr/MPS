package jetbrains.mps.lang.editor.editorTest.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (index_xbvbvu_a0a.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AttractsFocusBlock_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AttributeChild_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AttributeWithChildren_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new AttributedConcept_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new BinaryExpression_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new BracesBlock_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new BracesStubBlock_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new ClassReference_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new CollapsedByDefault_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new CollapsedConditionally_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new CollapsibleConcept_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new Composition_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new DelTestChildContainer_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new FoldingContainer_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new IBaseTestBlock_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new InitChildWithDirectCycle_card1_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new InitChildWithDirectCycle_card1n_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new InitChildWithTwoSameConceptChildren_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new InitContainer_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new InspectorBlock_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new IntegerLiteral_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new NonEmptyProperty_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new NotEditableVaraileReference_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new ReferenceAnnotataion_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new SelectionChild_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new SelectionContainer_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new SideTranformWrapper_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new SimpleNode_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new SimpleNodeHidingAttribute_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new SimpleNodesContainer_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new SimplePropertyAttribute_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new SimplePropertyContainer_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new StubBlock_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new StyleChild_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new StyleParent_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new SubstTestBooleanPropertyChild_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new SubstTestEnumPropertyChild_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new SubstTestRoot_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new TestBlockList_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new VariableDeclarationBlock_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new VariableDeclarationReference_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new VerticalLayoutBlockList_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (index_xbvbvu_a0d.index(cncpt)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new IBaseTestBlock_TransformationMenu());
      case 1:
        return Collections.<TransformationMenu>singletonList(new SimplePropertyContainer_TransformationMenu());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (index_xbvbvu_a0e.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new SubstTestAbstractChild_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new SubstTestBooleanPropertyChild_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new SubstTestEnumPropertyChild_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex index_xbvbvu_a0a = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x2444dad137f8d778L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x50d5d1397cfbad50L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x5ed256cba0c5b00L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x5ed256cba0c5c3eL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x46eb259b12f761daL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x3361ce1b17d7eaa8L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x75ed75ef06861df4L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x214b16e1c73042cfL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x569b712fbc626858L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0xc06e5dab9716359L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x671b139f12ae357fL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x2fd7ff1ee43ef592L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x6c4cdc7b1a84c222L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x569b712fbc6572f0L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x3361ce1b17d7eaa9L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x1b00debf2d3601a5L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x78d10d0e00c2593aL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x67739d157f7a404bL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x1b00debf2d3601a4L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x31b7f1691792b1f4L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x46eb259b12f68107L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x4e2db2c9f6d76026L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x44e7cb3605ec4004L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x6a48144fa856f460L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x617705b269dc8251L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x617705b269dc6674L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x46eb259b12ef5172L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x36c6196241a7cd02L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x36c6196241a7cd03L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x36c6196241a7cd1cL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x2c59702023f915adL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x2c59702023f8181eL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x3361ce1b17d9420cL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x5a79ee4e778a5efcL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x5a79ee4e778a5efbL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0xd4944c0b03c352dL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0xd4944c0b03c35aeL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0xd4944c0b03c33b7L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x3361ce1b17d62dbbL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x2444dad137f90ed1L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x2444dad137fa9b5cL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x5f322b2c7f2c2abaL)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0d = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x3361ce1b17d7eaa9L), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0x2c59702023f8181eL)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0e = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0xd4944c0b03c34aeL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0xd4944c0b03c352dL), MetaIdFactory.conceptId(0x81f0abb8d71e4d13L, 0xa0c1d2291fbb28b7L, 0xd4944c0b03c35aeL)).seal();
}
