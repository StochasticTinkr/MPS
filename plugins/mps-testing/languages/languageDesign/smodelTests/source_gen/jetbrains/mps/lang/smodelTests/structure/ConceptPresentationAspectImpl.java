package jetbrains.mps.lang.smodelTests.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Child = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ChildSubConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GrandChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceContainerSubConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Root = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Child:
        return props_Child;
      case LanguageConceptSwitch.ChildSubConcept:
        return props_ChildSubConcept;
      case LanguageConceptSwitch.GrandChild:
        return props_GrandChild;
      case LanguageConceptSwitch.ReferenceContainer:
        return props_ReferenceContainer;
      case LanguageConceptSwitch.ReferenceContainerSubConcept:
        return props_ReferenceContainerSubConcept;
      case LanguageConceptSwitch.Root:
        return props_Root;
    }
    return null;
  }
}
