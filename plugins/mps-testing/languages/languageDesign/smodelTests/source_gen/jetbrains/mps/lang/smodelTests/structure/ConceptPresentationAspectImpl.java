package jetbrains.mps.lang.smodelTests.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Child;
  private ConceptPresentation props_ChildSubConcept;
  private ConceptPresentation props_GrandChild;
  private ConceptPresentation props_NPTypesystem_ConceptA;
  private ConceptPresentation props_NPTypesystem_ConceptB;
  private ConceptPresentation props_NPTypesystem_IntA;
  private ConceptPresentation props_NPTypesystem_IntB;
  private ConceptPresentation props_NPTypesystem_RefToIntA;
  private ConceptPresentation props_ReferenceContainer;
  private ConceptPresentation props_ReferenceContainerSubConcept;
  private ConceptPresentation props_Root;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Child:
        if (props_Child == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Child = cpb.create();
        }
        return props_Child;
      case LanguageConceptSwitch.ChildSubConcept:
        if (props_ChildSubConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ChildSubConcept = cpb.create();
        }
        return props_ChildSubConcept;
      case LanguageConceptSwitch.GrandChild:
        if (props_GrandChild == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("GrandChild");
          props_GrandChild = cpb.create();
        }
        return props_GrandChild;
      case LanguageConceptSwitch.NPTypesystem_ConceptA:
        if (props_NPTypesystem_ConceptA == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NPTypesystem_ConceptA");
          props_NPTypesystem_ConceptA = cpb.create();
        }
        return props_NPTypesystem_ConceptA;
      case LanguageConceptSwitch.NPTypesystem_ConceptB:
        if (props_NPTypesystem_ConceptB == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NPTypesystem_ConceptB");
          props_NPTypesystem_ConceptB = cpb.create();
        }
        return props_NPTypesystem_ConceptB;
      case LanguageConceptSwitch.NPTypesystem_IntA:
        if (props_NPTypesystem_IntA == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_NPTypesystem_IntA = cpb.create();
        }
        return props_NPTypesystem_IntA;
      case LanguageConceptSwitch.NPTypesystem_IntB:
        if (props_NPTypesystem_IntB == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_NPTypesystem_IntB = cpb.create();
        }
        return props_NPTypesystem_IntB;
      case LanguageConceptSwitch.NPTypesystem_RefToIntA:
        if (props_NPTypesystem_RefToIntA == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xb02ae39f4c164545L, 0x8dfa88df16804e7eL, 0x76fa9e459e19e64L, 0x76fa9e459e19e65L, "ref", "", "");
          props_NPTypesystem_RefToIntA = cpb.create();
        }
        return props_NPTypesystem_RefToIntA;
      case LanguageConceptSwitch.ReferenceContainer:
        if (props_ReferenceContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ReferenceContainer");
          props_ReferenceContainer = cpb.create();
        }
        return props_ReferenceContainer;
      case LanguageConceptSwitch.ReferenceContainerSubConcept:
        if (props_ReferenceContainerSubConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ReferenceContainerSubConcept");
          props_ReferenceContainerSubConcept = cpb.create();
        }
        return props_ReferenceContainerSubConcept;
      case LanguageConceptSwitch.Root:
        if (props_Root == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Root = cpb.create();
        }
        return props_Root;
    }
    return null;
  }
}
