package jetbrains.mps.baseLanguage.unitTest.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import jetbrains.mps.smodel.runtime.ConstrainedStringDatatypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAfterTest = createDescriptorForAfterTest();
  /*package*/ final ConceptDescriptor myConceptAssertEquals = createDescriptorForAssertEquals();
  /*package*/ final ConceptDescriptor myConceptAssertFalse = createDescriptorForAssertFalse();
  /*package*/ final ConceptDescriptor myConceptAssertIsNotNull = createDescriptorForAssertIsNotNull();
  /*package*/ final ConceptDescriptor myConceptAssertIsNull = createDescriptorForAssertIsNull();
  /*package*/ final ConceptDescriptor myConceptAssertSame = createDescriptorForAssertSame();
  /*package*/ final ConceptDescriptor myConceptAssertThrows = createDescriptorForAssertThrows();
  /*package*/ final ConceptDescriptor myConceptAssertTrue = createDescriptorForAssertTrue();
  /*package*/ final ConceptDescriptor myConceptBTestCase = createDescriptorForBTestCase();
  /*package*/ final ConceptDescriptor myConceptBeforeTest = createDescriptorForBeforeTest();
  /*package*/ final ConceptDescriptor myConceptBinaryAssert = createDescriptorForBinaryAssert();
  /*package*/ final ConceptDescriptor myConceptFail = createDescriptorForFail();
  /*package*/ final ConceptDescriptor myConceptITestCase = createDescriptorForITestCase();
  /*package*/ final ConceptDescriptor myConceptITestMethod = createDescriptorForITestMethod();
  /*package*/ final ConceptDescriptor myConceptITestable = createDescriptorForITestable();
  /*package*/ final ConceptDescriptor myConceptMessage = createDescriptorForMessage();
  /*package*/ final ConceptDescriptor myConceptMessageHolder = createDescriptorForMessageHolder();
  /*package*/ final ConceptDescriptor myConceptPrepareMethod = createDescriptorForPrepareMethod();
  /*package*/ final ConceptDescriptor myConceptTestMethod = createDescriptorForTestMethod();
  /*package*/ final ConceptDescriptor myConceptTestMethodList = createDescriptorForTestMethodList();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAfterTest, myConceptAssertEquals, myConceptAssertFalse, myConceptAssertIsNotNull, myConceptAssertIsNull, myConceptAssertSame, myConceptAssertThrows, myConceptAssertTrue, myConceptBTestCase, myConceptBeforeTest, myConceptBinaryAssert, myConceptFail, myConceptITestCase, myConceptITestMethod, myConceptITestable, myConceptMessage, myConceptMessageHolder, myConceptPrepareMethod, myConceptTestMethod, myConceptTestMethodList);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.AfterTest:
        return myConceptAfterTest;
      case LanguageConceptSwitch.AssertEquals:
        return myConceptAssertEquals;
      case LanguageConceptSwitch.AssertFalse:
        return myConceptAssertFalse;
      case LanguageConceptSwitch.AssertIsNotNull:
        return myConceptAssertIsNotNull;
      case LanguageConceptSwitch.AssertIsNull:
        return myConceptAssertIsNull;
      case LanguageConceptSwitch.AssertSame:
        return myConceptAssertSame;
      case LanguageConceptSwitch.AssertThrows:
        return myConceptAssertThrows;
      case LanguageConceptSwitch.AssertTrue:
        return myConceptAssertTrue;
      case LanguageConceptSwitch.BTestCase:
        return myConceptBTestCase;
      case LanguageConceptSwitch.BeforeTest:
        return myConceptBeforeTest;
      case LanguageConceptSwitch.BinaryAssert:
        return myConceptBinaryAssert;
      case LanguageConceptSwitch.Fail:
        return myConceptFail;
      case LanguageConceptSwitch.ITestCase:
        return myConceptITestCase;
      case LanguageConceptSwitch.ITestMethod:
        return myConceptITestMethod;
      case LanguageConceptSwitch.ITestable:
        return myConceptITestable;
      case LanguageConceptSwitch.Message:
        return myConceptMessage;
      case LanguageConceptSwitch.MessageHolder:
        return myConceptMessageHolder;
      case LanguageConceptSwitch.PrepareMethod:
        return myConceptPrepareMethod;
      case LanguageConceptSwitch.TestMethod:
        return myConceptTestMethod;
      case LanguageConceptSwitch.TestMethodList:
        return myConceptTestMethodList;
      default:
        return null;
    }
  }

  @Override
  public Collection<EnumerationDescriptor> getEnumerationDescriptors() {
    return Arrays.asList();
  }

  @Override
  public Collection<ConstrainedStringDatatypeDescriptor> getConstrainedStringDatatypeDescriptors() {
    return Arrays.asList();
  }


  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAfterTest() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "AfterTest", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x72682467022fd3ddL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x72682467022fdbbaL);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/8243879142738613213");
    b.version(2);
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    b.alias("afterTest");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssertEquals() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "AssertEquals", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110df569442L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x74f562a3a993fd3dL);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/1171978097730");
    b.version(2);
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("assert equals");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssertFalse() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "AssertFalse", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110dfae1d08L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Statement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L);
    b.parent(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e5250918L);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/1171983834376");
    b.version(2);
    b.aggregate("condition", 0x110dfae6d5cL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("1171983854940").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("assert false");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssertIsNotNull() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "AssertIsNotNull", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x624233a5cf1ae0f7L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Statement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L);
    b.parent(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e5250918L);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/7080278351417106679");
    b.version(2);
    b.aggregate("expression", 0x624233a5cf1ae0f9L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("7080278351417106681").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("assert is not null");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssertIsNull() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "AssertIsNull", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e252ba91L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Statement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L);
    b.parent(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e5250918L);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/1172028177041");
    b.version(2);
    b.aggregate("expression", 0x110e253a30fL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("1172028236559").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("assert is null");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssertSame() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "AssertSame", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110dfcb1f43L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.unitTest.structure.BinaryAssert", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x74f562a3a993fd3dL);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/1171985735491");
    b.version(2);
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("assert same (\"==\")");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssertThrows() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "AssertThrows", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e4cee82cL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Statement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L);
    b.parent(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e5250918L);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/1172069869612");
    b.version(2);
    b.aggregate("statement", 0x110e4d1571eL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L).optional(false).ordered(true).multiple(false).origin("1172070029086").done();
    b.aggregate("exceptionType", 0x110e4d906cfL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL).optional(false).ordered(true).multiple(false).origin("1172070532815").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("assert throws");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForAssertTrue() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "AssertTrue", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110df833483L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Statement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L);
    b.parent(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e5250918L);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/1171981022339");
    b.version(2);
    b.aggregate("condition", 0x110df83bc87L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("1171981057159").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("assert true");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBTestCase() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "BTestCase", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110dc94e923L);
    b.class_(false, false, true);
    b.super_("jetbrains.mps.baseLanguage.structure.ClassConcept", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L);
    b.parent(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x12509ddfaa7c0557L);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/1171931851043");
    b.version(2);
    b.property("testCaseName", 0x110dc94e925L).type(MetaIdFactory.dataTypeId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc2bbf5889L)).origin("1171931851045").done();
    b.aggregate("testMethodList", 0x110dc94e924L).target(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110dc95061dL).optional(false).ordered(true).multiple(false).origin("1171931851044").done();
    b.aggregate("beforeTest", 0x72682467022fd3e3L).target(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x72682467022fc039L).optional(true).ordered(true).multiple(false).origin("8243879142738613219").done();
    b.aggregate("afterTest", 0x72682467022fd3e4L).target(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x72682467022fd3ddL).optional(true).ordered(true).multiple(false).origin("8243879142738613220").done();
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBeforeTest() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "BeforeTest", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x72682467022fc039L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.unitTest.structure.PrepareMethod", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x72682467022fdbbaL);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/8243879142738608185");
    b.version(2);
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    b.alias("beforeTest");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryAssert() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "BinaryAssert", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x74f562a3a993fd3dL);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Statement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L);
    b.parent(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e5250918L);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/8427750732757990717");
    b.version(2);
    b.aggregate("expected", 0x74f562a3a993fd44L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("8427750732757990724").done();
    b.aggregate("actual", 0x74f562a3a993fd45L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("8427750732757990725").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFail() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "Fail", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e1ab948aL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Statement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L);
    b.parent(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e5250918L);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/1172017222794");
    b.version(2);
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("fail");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForITestCase() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "ITestCase", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L);
    b.interface_();
    b.parent(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b08a01119L);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/1216130694486");
    b.version(2);
    b.property("canNotRunInProcess", 0x59337dc8dffe0d9dL).type(PrimitiveTypeId.BOOLEAN).origin("6427619394892729757").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForITestMethod() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "ITestMethod", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b27438a3dL);
    b.interface_();
    b.parent(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b08a01119L);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/1216134482493");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForITestable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "ITestable", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b08a01119L);
    b.interface_();
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/1215620452633");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMessage() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "Message", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e5064e8fL);
    b.class_(false, false, false);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/1172073500303");
    b.version(2);
    b.aggregate("message", 0x110e50678bdL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(true).ordered(true).multiple(false).origin("1172073511101").done();
    b.alias("message");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMessageHolder() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "MessageHolder", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e5250918L);
    b.interface_();
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/1172075514136");
    b.version(2);
    b.aggregate("message", 0x110e52557daL).target(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e5064e8fL).optional(true).ordered(true).multiple(false).origin("1172075534298").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPrepareMethod() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "PrepareMethod", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x72682467022fdbbaL);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunction", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/8243879142738615226");
    b.version(2);
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTestMethod() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "TestMethod", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110dc92748eL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL);
    b.parent(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b27438a3dL);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/1171931690126");
    b.version(2);
    b.property("methodName", 0x110dc927490L).type(PrimitiveTypeId.STRING).origin("1171931690128").done();
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTestMethodList() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.unitTest", "TestMethodList", 0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110dc95061dL);
    b.class_(false, false, false);
    b.origin("r:00000000-0000-4000-0000-011c895902d7(jetbrains.mps.baseLanguage.unitTest.structure)/1171931858461");
    b.version(2);
    b.aggregate("testMethod", 0x110dc95061eL).target(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110dc92748eL).optional(true).ordered(true).multiple(true).origin("1171931858462").done();
    return b.create();
  }
}
