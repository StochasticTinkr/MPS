package jetbrains.mps.baseLanguage.unitTest.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AfterTest = 0;
  public static final int AssertEquals = 1;
  public static final int AssertFalse = 2;
  public static final int AssertInNotNull = 3;
  public static final int AssertIsNull = 4;
  public static final int AssertSame = 5;
  public static final int AssertThrows = 6;
  public static final int AssertTrue = 7;
  public static final int BTestCase = 8;
  public static final int BeforeTest = 9;
  public static final int BinaryAssert = 10;
  public static final int Fail = 11;
  public static final int ITestCase = 12;
  public static final int ITestMethod = 13;
  public static final int ITestable = 14;
  public static final int Message = 15;
  public static final int MessageHolder = 16;
  public static final int PrepareMethod = 17;
  public static final int TestMethod = 18;
  public static final int TestMethodList = 19;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L);
    builder.put(0x72682467022fd3ddL, AfterTest);
    builder.put(0x110df569442L, AssertEquals);
    builder.put(0x110dfae1d08L, AssertFalse);
    builder.put(0x624233a5cf1ae0f7L, AssertInNotNull);
    builder.put(0x110e252ba91L, AssertIsNull);
    builder.put(0x110dfcb1f43L, AssertSame);
    builder.put(0x110e4cee82cL, AssertThrows);
    builder.put(0x110df833483L, AssertTrue);
    builder.put(0x110dc94e923L, BTestCase);
    builder.put(0x72682467022fc039L, BeforeTest);
    builder.put(0x74f562a3a993fd3dL, BinaryAssert);
    builder.put(0x110e1ab948aL, Fail);
    builder.put(0x11b2709bd56L, ITestCase);
    builder.put(0x11b27438a3dL, ITestMethod);
    builder.put(0x11b08a01119L, ITestable);
    builder.put(0x110e5064e8fL, Message);
    builder.put(0x110e5250918L, MessageHolder);
    builder.put(0x72682467022fdbbaL, PrepareMethod);
    builder.put(0x110dc92748eL, TestMethod);
    builder.put(0x110dc95061dL, TestMethodList);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
