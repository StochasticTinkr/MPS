package jetbrains.mps.baseLanguage.unitTest.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AfterTest = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertEquals = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertFalse = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertInNotNull = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertIsNull = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertSame = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertThrows = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertTrue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BTestCase = new ConceptPresentationBuilder().icon("testClass.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_BeforeTest = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryAssert = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Fail = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITestCase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITestMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITestable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Message = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MessageHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrepareMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestMethodList = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_lpa09p_a0v.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AfterTest;
          }
          break;
        case 1:
          if (true) {
            return props_AssertEquals;
          }
          break;
        case 2:
          if (true) {
            return props_AssertFalse;
          }
          break;
        case 3:
          if (true) {
            return props_AssertInNotNull;
          }
          break;
        case 4:
          if (true) {
            return props_AssertIsNull;
          }
          break;
        case 5:
          if (true) {
            return props_AssertSame;
          }
          break;
        case 6:
          if (true) {
            return props_AssertThrows;
          }
          break;
        case 7:
          if (true) {
            return props_AssertTrue;
          }
          break;
        case 8:
          if (true) {
            return props_BTestCase;
          }
          break;
        case 9:
          if (true) {
            return props_BeforeTest;
          }
          break;
        case 10:
          if (true) {
            return props_BinaryAssert;
          }
          break;
        case 11:
          if (true) {
            return props_Fail;
          }
          break;
        case 12:
          if (true) {
            return props_ITestCase;
          }
          break;
        case 13:
          if (true) {
            return props_ITestMethod;
          }
          break;
        case 14:
          if (true) {
            return props_ITestable;
          }
          break;
        case 15:
          if (true) {
            return props_Message;
          }
          break;
        case 16:
          if (true) {
            return props_MessageHolder;
          }
          break;
        case 17:
          if (true) {
            return props_PrepareMethod;
          }
          break;
        case 18:
          if (true) {
            return props_TestMethod;
          }
          break;
        case 19:
          if (true) {
            return props_TestMethodList;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_lpa09p_a0v = buildConceptIndices(MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x72682467022fd3ddL, "AfterTest"), MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110df569442L, "AssertEquals"), MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110dfae1d08L, "AssertFalse"), MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x624233a5cf1ae0f7L, "AssertInNotNull"), MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e252ba91L, "AssertIsNull"), MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110dfcb1f43L, "AssertSame"), MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e4cee82cL, "AssertThrows"), MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110df833483L, "AssertTrue"), MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110dc94e923L, "BTestCase"), MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x72682467022fc039L, "BeforeTest"), MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x74f562a3a993fd3dL, "BinaryAssert"), MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e1ab948aL, "Fail"), MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b2709bd56L, "ITestCase"), MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b27438a3dL, "ITestMethod"), MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x11b08a01119L, "ITestable"), MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e5064e8fL, "Message"), MetaAdapterFactory.getInterfaceConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110e5250918L, "MessageHolder"), MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x72682467022fdbbaL, "PrepareMethod"), MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110dc92748eL, "TestMethod"), MetaAdapterFactory.getConcept(0xf61473f9130f42f6L, 0xb98d6c438812c2f6L, 0x110dc95061dL, "TestMethodList"));
}
