package jetbrains.mps.baseLanguage.unitTest.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AfterTest = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertEquals = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertFalse = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertInNotNull = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertIsNull = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertSame = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertThrows = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertTrue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BTestCase = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0i).create();
  private final ConceptPresentation props_BeforeTest = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryAssert = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Fail = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITestCase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITestMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITestable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Message = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MessageHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrepareMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestMethodList = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("f61473f9-130f-42f6-b98d-6c438812c2f6"), "jetbrains.mps.baseLanguage.unitTest")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AfterTest;
      case 1:
        return props_AssertEquals;
      case 2:
        return props_AssertFalse;
      case 3:
        return props_AssertInNotNull;
      case 4:
        return props_AssertIsNull;
      case 5:
        return props_AssertSame;
      case 6:
        return props_AssertThrows;
      case 7:
        return props_AssertTrue;
      case 8:
        return props_BTestCase;
      case 9:
        return props_BeforeTest;
      case 10:
        return props_BinaryAssert;
      case 11:
        return props_Fail;
      case 12:
        return props_ITestCase;
      case 13:
        return props_ITestMethod;
      case 14:
        return props_ITestable;
      case 15:
        return props_Message;
      case 16:
        return props_MessageHolder;
      case 17:
        return props_PrepareMethod;
      case 18:
        return props_TestMethod;
      case 19:
        return props_TestMethodList;
    }
    throw new IllegalStateException();
  }
}
