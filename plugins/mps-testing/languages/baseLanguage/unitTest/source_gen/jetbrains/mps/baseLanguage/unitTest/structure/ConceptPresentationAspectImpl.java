package jetbrains.mps.baseLanguage.unitTest.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AfterTest = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertEquals = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertFalse = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertInNotNull = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertIsNull = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertSame = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertThrows = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertTrue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BTestCase = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0i).create();
  private final ConceptPresentation props_BeforeTest = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryAssert = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Fail = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITestCase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITestMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITestable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Message = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MessageHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrepareMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TestMethodList = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AfterTest:
        return props_AfterTest;
      case LanguageConceptSwitch.AssertEquals:
        return props_AssertEquals;
      case LanguageConceptSwitch.AssertFalse:
        return props_AssertFalse;
      case LanguageConceptSwitch.AssertInNotNull:
        return props_AssertInNotNull;
      case LanguageConceptSwitch.AssertIsNull:
        return props_AssertIsNull;
      case LanguageConceptSwitch.AssertSame:
        return props_AssertSame;
      case LanguageConceptSwitch.AssertThrows:
        return props_AssertThrows;
      case LanguageConceptSwitch.AssertTrue:
        return props_AssertTrue;
      case LanguageConceptSwitch.BTestCase:
        return props_BTestCase;
      case LanguageConceptSwitch.BeforeTest:
        return props_BeforeTest;
      case LanguageConceptSwitch.BinaryAssert:
        return props_BinaryAssert;
      case LanguageConceptSwitch.Fail:
        return props_Fail;
      case LanguageConceptSwitch.ITestCase:
        return props_ITestCase;
      case LanguageConceptSwitch.ITestMethod:
        return props_ITestMethod;
      case LanguageConceptSwitch.ITestable:
        return props_ITestable;
      case LanguageConceptSwitch.Message:
        return props_Message;
      case LanguageConceptSwitch.MessageHolder:
        return props_MessageHolder;
      case LanguageConceptSwitch.PrepareMethod:
        return props_PrepareMethod;
      case LanguageConceptSwitch.TestMethod:
        return props_TestMethod;
      case LanguageConceptSwitch.TestMethodList:
        return props_TestMethodList;
    }
    return null;
  }
}
