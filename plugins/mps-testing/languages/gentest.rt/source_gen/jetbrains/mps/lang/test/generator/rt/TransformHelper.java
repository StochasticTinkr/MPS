package jetbrains.mps.lang.test.generator.rt;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.generator.ModelGenerationPlan;
import jetbrains.mps.project.Project;
import jetbrains.mps.generator.GenerationStatus;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.generator.TransientModelsProvider;
import jetbrains.mps.generator.GenerationOptions;
import jetbrains.mps.generator.GenerationFacade;
import jetbrains.mps.generator.GenerationTaskRecorder;
import jetbrains.mps.generator.GeneratorTask;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.ide.messages.DefaultMessageHandler;
import jetbrains.mps.progress.EmptyProgressMonitor;

public final class TransformHelper {
  private SModel myInputModel;
  private ModelGenerationPlan myGenerationPlan;
  private Project myProject;
  private GenerationStatus myGenOutcome;

  /*package*/ TransformHelper(Project mpsProject) {
    myProject = mpsProject;
  }
  public TransformHelper setInput(SModel inputModel) {
    myInputModel = inputModel;
    return this;
  }
  public TransformHelper setPlan(ModelGenerationPlan generationPlan) {
    myGenerationPlan = generationPlan;
    return this;
  }

  public TransformHelper transform() {
    final SRepository repo = myProject.getRepository();
    // XXX Guess, I shall re-use TMP if TransformHelper is reused.  
    // FIXME Need a mechanism to dispose transients! 
    final TransientModelsProvider tmp = new TransientModelsProvider(repo, null);
    tmp.getRepository().getModelAccess().runWriteAction(new Runnable() {
      public void run() {
        GenerationOptions.OptionsBuilder optBuilder = GenerationOptions.getDefaults();
        if (myGenerationPlan != null) {
          optBuilder.customPlan(myInputModel, myGenerationPlan);
        }
        GenerationFacade genFacade = new GenerationFacade(repo, optBuilder.create());
        final GenerationTaskRecorder<GeneratorTask> taskHandler = new GenerationTaskRecorder<GeneratorTask>(null);
        // FIXME DefaultMessageHandler shall not demand IDEA project, shall tolerate any MPS project 
        com.intellij.openapi.project.Project ideaProject = ProjectHelper.toIdeaProject(myProject);
        genFacade.transients(tmp).messages(new DefaultMessageHandler(ideaProject)).taskHandler(taskHandler);
        genFacade.process(new EmptyProgressMonitor(), myInputModel);
        myGenOutcome = taskHandler.getAllRecorded().get(0);
      }
    });
    return this;

  }

  public GenerationStatus getResult() {
    assert myGenOutcome != null : "invoke() transform first!";
    return myGenOutcome;
  }

  public SModel getOutputModel() {
    return getResult().getOutputModel();
  }
}
