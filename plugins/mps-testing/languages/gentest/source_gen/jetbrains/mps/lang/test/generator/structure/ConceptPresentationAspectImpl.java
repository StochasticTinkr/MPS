package jetbrains.mps.lang.test.generator.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ArgumentReference;
  private ConceptPresentation props_GeneratorTest;
  private ConceptPresentation props_ModelArgument;
  private ConceptPresentation props_TestArgument;
  private ConceptPresentation props_TestAssertion;
  private ConceptPresentation props_TransformationMatchAssertion;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ArgumentReference:
        if (props_ArgumentReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x68015e26cc4d49dbL, 0x8715b643faea1769L, 0x7b1db36ecf0d05bL, 0x7b1db36ecf0d05cL, "arg", "", "");
          props_ArgumentReference = cpb.create();
        }
        return props_ArgumentReference;
      case LanguageConceptSwitch.GeneratorTest:
        if (props_GeneratorTest == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_GeneratorTest = cpb.create();
        }
        return props_GeneratorTest;
      case LanguageConceptSwitch.ModelArgument:
        if (props_ModelArgument == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ModelArgument = cpb.create();
        }
        return props_ModelArgument;
      case LanguageConceptSwitch.TestArgument:
        if (props_TestArgument == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TestArgument = cpb.create();
        }
        return props_TestArgument;
      case LanguageConceptSwitch.TestAssertion:
        if (props_TestAssertion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TestAssertion = cpb.create();
        }
        return props_TestAssertion;
      case LanguageConceptSwitch.TransformationMatchAssertion:
        if (props_TransformationMatchAssertion == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TransformationMatchAssertion");
          props_TransformationMatchAssertion = cpb.create();
        }
        return props_TransformationMatchAssertion;
    }
    return null;
  }
}
