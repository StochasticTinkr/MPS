package jetbrains.mps.build.workflow.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_BwfAntStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfAntTaskBundleDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfAntTaskDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfCustomMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfFileSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfJavaClassPath = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfJavaDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfJavaDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfJavaLibrary = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfJavaLibraryReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfJavaModule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfJavaModuleReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfMacroListImport = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfPathDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfPathReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfProject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfProjectPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfProjectPartStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfSubTask = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfSubTaskDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfTask = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfTaskDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfTaskLibrary = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfTaskLibraryDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BwfTaskPart = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BwfAntStatement:
        return props_BwfAntStatement;
      case LanguageConceptSwitch.BwfAntTaskBundleDeclaration:
        return props_BwfAntTaskBundleDeclaration;
      case LanguageConceptSwitch.BwfAntTaskDeclaration:
        return props_BwfAntTaskDeclaration;
      case LanguageConceptSwitch.BwfCustomMacro:
        return props_BwfCustomMacro;
      case LanguageConceptSwitch.BwfDependency:
        return props_BwfDependency;
      case LanguageConceptSwitch.BwfFileSet:
        return props_BwfFileSet;
      case LanguageConceptSwitch.BwfJavaClassPath:
        return props_BwfJavaClassPath;
      case LanguageConceptSwitch.BwfJavaDependency:
        return props_BwfJavaDependency;
      case LanguageConceptSwitch.BwfJavaDescriptor:
        return props_BwfJavaDescriptor;
      case LanguageConceptSwitch.BwfJavaLibrary:
        return props_BwfJavaLibrary;
      case LanguageConceptSwitch.BwfJavaLibraryReference:
        return props_BwfJavaLibraryReference;
      case LanguageConceptSwitch.BwfJavaModule:
        return props_BwfJavaModule;
      case LanguageConceptSwitch.BwfJavaModuleReference:
        return props_BwfJavaModuleReference;
      case LanguageConceptSwitch.BwfMacro:
        return props_BwfMacro;
      case LanguageConceptSwitch.BwfMacroListImport:
        return props_BwfMacroListImport;
      case LanguageConceptSwitch.BwfPathDeclaration:
        return props_BwfPathDeclaration;
      case LanguageConceptSwitch.BwfPathReference:
        return props_BwfPathReference;
      case LanguageConceptSwitch.BwfProject:
        return props_BwfProject;
      case LanguageConceptSwitch.BwfProjectPart:
        return props_BwfProjectPart;
      case LanguageConceptSwitch.BwfProjectPartStatement:
        return props_BwfProjectPartStatement;
      case LanguageConceptSwitch.BwfStatement:
        return props_BwfStatement;
      case LanguageConceptSwitch.BwfSubTask:
        return props_BwfSubTask;
      case LanguageConceptSwitch.BwfSubTaskDependency:
        return props_BwfSubTaskDependency;
      case LanguageConceptSwitch.BwfTask:
        return props_BwfTask;
      case LanguageConceptSwitch.BwfTaskDependency:
        return props_BwfTaskDependency;
      case LanguageConceptSwitch.BwfTaskLibrary:
        return props_BwfTaskLibrary;
      case LanguageConceptSwitch.BwfTaskLibraryDependency:
        return props_BwfTaskLibraryDependency;
      case LanguageConceptSwitch.BwfTaskPart:
        return props_BwfTaskPart;
    }
    return null;
  }
}
