package jetbrains.mps.build.mps.testManifest.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(3);
  /*package*/ final ConceptDescriptor myConceptTestModuleManifest = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.testManifest.structure.TestModuleManifest", MetaIdFactory.conceptId(0x9f846aef4e4a4a84L, 0x828e7e83fe2697f2L, 0x2dc6844997876882L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(563004820749542528L, "language", MetaIdFactory.conceptId(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x38130dc4e3dc174aL), true, true, false)).children(new String[]{"language"}, new boolean[]{true}).alias("Test Module", "").create();
  /*package*/ final ConceptDescriptor myConceptTestModuleManifestRef = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.testManifest.structure.TestModuleManifestRef", MetaIdFactory.conceptId(0x9f846aef4e4a4a84L, 0x828e7e83fe2697f2L, 0x2dc684499788c1c4L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(3298469228705268165L, "manifest", MetaIdFactory.conceptId(0x9f846aef4e4a4a84L, 0x828e7e83fe2697f2L, 0x2dc6844997876882L), false)).references("manifest").create();
  /*package*/ final ConceptDescriptor myConceptTestProjectConfiguration = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.testManifest.structure.TestProjectConfiguration", MetaIdFactory.conceptId(0x9f846aef4e4a4a84L, 0x828e7e83fe2697f2L, 0x2dc6844997876885L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(3298469228705274820L, "manifest", MetaIdFactory.conceptId(0x9f846aef4e4a4a84L, 0x828e7e83fe2697f2L, 0x2dc684499788c1c4L), true, true, false), new ConceptDescriptorBuilder.Link(7673173258527586849L, "target", MetaIdFactory.conceptId(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x7c3f2da20e92b62L), true, false, false)).children(new String[]{"manifest", "target"}, new boolean[]{true, false}).alias("Test Project Configuration", "").create();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptTestModuleManifest.getId(), 0);
    myIndexMap.put(myConceptTestModuleManifestRef.getId(), 1);
    myIndexMap.put(myConceptTestProjectConfiguration.getId(), 2);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptTestModuleManifest, myConceptTestModuleManifestRef, myConceptTestProjectConfiguration);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptTestModuleManifest;
      case 1:
        return myConceptTestModuleManifestRef;
      case 2:
        return myConceptTestProjectConfiguration;
      default:
        throw new IllegalStateException();
    }
  }
}
