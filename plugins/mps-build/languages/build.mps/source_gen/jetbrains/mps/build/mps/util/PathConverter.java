package jetbrains.mps.build.mps.util;

/*Generated by MPS */

import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.build.behavior.BuildProject__BehaviorDescriptor;
import jetbrains.mps.build.util.Context;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.build.behavior.BuildFolderMacro__BehaviorDescriptor;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.model.SModel;
import java.io.File;
import java.io.IOException;

public class PathConverter {
  private String workingDirectory;
  private final Iterable<Tuples._2<String, SNode>> macros;
  private final Iterable<SNode> macrosWithoutPath;
  public PathConverter(SNode project) {
    String workingDir = BuildProject__BehaviorDescriptor.getBasePath_id4jjtc7WZOyG.invoke(project, Context.defaultContext());
    this.workingDirectory = normalizePath(workingDir, true);

    final List<Tuples._2<String, SNode>> result = ListSequence.fromList(new ArrayList<Tuples._2<String, SNode>>());
    final List<SNode> withoutPath = ListSequence.fromList(new ArrayList<SNode>());
    ListSequence.fromList(SLinkOperations.getChildren(project, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, 0x4df58c6f18f84a22L, "macros"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x668c6cfbafadd002L, "jetbrains.mps.build.structure.BuildFolderMacro"));
      }
    }).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        String path = normalizePath(BuildFolderMacro__BehaviorDescriptor.evaluate_id4jjtc7WZOzA.invoke(SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x668c6cfbafadd002L, "jetbrains.mps.build.structure.BuildFolderMacro")), Context.defaultContext()), true);
        if (path != null && path.length() > 1) {
          ListSequence.fromList(result).addElement(MultiTuple.<String,SNode>from(path, SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x668c6cfbafadd002L, "jetbrains.mps.build.structure.BuildFolderMacro"))));
        } else {
          ListSequence.fromList(withoutPath).addElement(SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x668c6cfbafadd002L, "jetbrains.mps.build.structure.BuildFolderMacro")));
        }
      }
    });
    if (workingDirectory != null) {
      ListSequence.fromList(result).addElement(MultiTuple.<String,SNode>from(this.workingDirectory, (SNode) null));
    }
    macros = ListSequence.fromList(result).sort(new ISelector<Tuples._2<String, SNode>, Integer>() {
      public Integer select(Tuples._2<String, SNode> it) {
        return it._0().length() * 2 - ((it._1() == null ? 1 : 0));
      }
    }, false);
    macrosWithoutPath = withoutPath;
  }

  /**
   * Produce a path node using supplied path factory/builder to instatiate them
   * 
   * @return never null
   */
  public List<SNode> convertPath(String path, PathBuilder pathBuilder) throws PathConverter.PathConvertException {
    path = normalizePath(path, false);
    String withSlash = normalizePath(path, true);
    List<SNode> result = new ArrayList<SNode>();
    for (Tuples._2<String, SNode> m : Sequence.fromIterable(macros)) {
      String mdir = (path.startsWith("$") && m._1() != null ? "${" + SPropertyOperations.getString(m._1(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "}/" : m._0());
      mdir = (mdir == null ? "" : mdir);
      String currPath = (path.length() < mdir.length() ? withSlash : path);

      if (currPath.startsWith(mdir)) {
        currPath = currPath.substring(mdir.length());
        ListSequence.fromList(result).addElement(pathBuilder.buildRelative(m._1(), currPath));
      }
    }
    for (SNode m : Sequence.fromIterable(macrosWithoutPath)) {
      String mdir = "${" + SPropertyOperations.getString(m, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "}/";
      String currPath = (path.length() < mdir.length() ? withSlash : path);
      if (currPath.startsWith(mdir)) {
        currPath = currPath.substring(mdir.length());
        ListSequence.fromList(result).addElement(pathBuilder.buildRelative(m, currPath));
      }
    }
    if (ListSequence.fromList(result).isEmpty()) {
      throw new PathConverter.PathConvertException("source path (" + path + ") should be under working directory (" + workingDirectory + "), or any macros default directory");

    }
    return result;
  }

  public static SNode createRelative(String baseDir, String fullPath, SModel model) throws PathConverter.PathConvertException {
    baseDir = normalizePath(baseDir, true);
    fullPath = normalizePath(fullPath, false);
    if (!(fullPath.startsWith(baseDir))) {
      throw new PathConverter.PathConvertException(String.format("specified path '%s' does not start with base dir '%s'", fullPath, baseDir));
    }
    return new PathBuilder(model).buildRelative(fullPath.substring(baseDir.length(), fullPath.length()));
  }

  private static String normalizePath(String path, boolean addSlash) {
    if (path == null || (path == null || path.length() == 0)) {
      return null;
    }
    try {
      path = (path.startsWith("${") ? path : new File(path).getCanonicalPath());
      path = path.replace("\\", "/");
    } catch (IOException ignore) {
      // ignore 
    }
    if (addSlash && !(path.endsWith("/"))) {
      path = path + "/";
    }
    return path;
  }

  public static class PathConvertException extends Exception {
    public PathConvertException(String message) {
      super(message);
    }
  }



}
