package jetbrains.mps.build.mps.typesystem;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import java.util.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.annotations.Nullable;
import java.util.Objects;
import jetbrains.mps.build.behavior.BuildSource_SingleFolder__BehaviorDescriptor;

/**
 * Primitive logic though I do not aim to predict all the cases when user is about to make a mistake in packaging.
 */
/*package*/ class PluginLibFolderDetector {
  private static final String LIB_FOLDER_NAME = "lib";
  private final SNode myPlugin;

  public PluginLibFolderDetector(SNode plugin) {
    myPlugin = plugin;
  }

  public Iterable<SNode> getAllLibFolders() {
    return getAllLibFolders0(myPlugin);
  }

  public static Iterable<SNode> getAllLibFolders0(SNode container) {
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    Queue<SNode> libLikeContainers = QueueSequence.fromQueueWithValues(new LinkedList<SNode>(), PluginLibFolderDetector.getLibLikeContainers(container));
    // here we unfold all the impor files of construction directly under our 'lib' folders 
    while (QueueSequence.fromQueue(libLikeContainers).isNotEmpty()) {
      SNode top = QueueSequence.fromQueue(libLikeContainers).removeFirstElement();
      ListSequence.fromList(result).addElement(top);
      for (SNode child : ListSequence.fromList(SLinkOperations.getChildren(top, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4140393b234482c3L, 0x668c6cfbafac4c8eL, "children")))) {
        if (SNodeOperations.isInstanceOf(child, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4ddcec86af9fdb53L, "jetbrains.mps.build.structure.BuildLayout_ImportContent"))) {
          QueueSequence.fromQueue(libLikeContainers).addLastElement(SLinkOperations.getTarget(SNodeOperations.cast(child, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4ddcec86af9fdb53L, "jetbrains.mps.build.structure.BuildLayout_ImportContent")), MetaAdapterFactory.getReferenceLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4ddcec86af9fdb53L, 0x4ddcec86af9fdb55L, "target")));
        }
      }
    }

    return result;
  }

  private static List<SNode> getLibLikeContainers(SNode container) {
    List<SNode> libLikeContainers = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode child : ListSequence.fromList(SLinkOperations.getChildren(container, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4140393b234482c3L, 0x668c6cfbafac4c8eL, "children")))) {
      if (SNodeOperations.isInstanceOf(child, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4ddcec86af9fdb53L, "jetbrains.mps.build.structure.BuildLayout_ImportContent"))) {
        ListSequence.fromList(libLikeContainers).addSequence(ListSequence.fromList(getLibLikeContainers(SLinkOperations.getTarget(SNodeOperations.cast(child, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4ddcec86af9fdb53L, "jetbrains.mps.build.structure.BuildLayout_ImportContent")), MetaAdapterFactory.getReferenceLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4ddcec86af9fdb53L, 0x4ddcec86af9fdb55L, "target")))));
      } else {
        SNode libContainerIfItIsOne = getLibContainerIfItIsOne(child);
        if ((libContainerIfItIsOne != null)) {
          ListSequence.fromList(libLikeContainers).addElement(libContainerIfItIsOne);
        }
      }
    }
    return libLikeContainers;
  }

  @Nullable
  private static SNode getLibContainerIfItIsOne(SNode node) {
    if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x668c6cfbafac7f8cL, "jetbrains.mps.build.structure.BuildLayout_NamedContainer")) && Objects.equals(BuildSource_SingleFolder__BehaviorDescriptor.getApproximateName_id4RsV8qJH_Br.invoke(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x668c6cfbafac7f8cL, "jetbrains.mps.build.structure.BuildLayout_NamedContainer"))), LIB_FOLDER_NAME)) {
      return SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x668c6cfbafac7f8cL, "jetbrains.mps.build.structure.BuildLayout_NamedContainer"));
    } else if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0xbabdfbeee1350f2L, "jetbrains.mps.build.structure.BuildLayout_Import"))) {
      return getLibContainerIfItIsOne(SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0xbabdfbeee1350f2L, "jetbrains.mps.build.structure.BuildLayout_Import")), MetaAdapterFactory.getReferenceLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0xbabdfbeee1350f2L, 0xbabdfbeee1350f4L, "target")));
    }
    return null;
  }
}
