package jetbrains.mps.build.mps.util;

/*Generated by MPS */

import jetbrains.mps.util.MacroHelper;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.build.util.Context;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.messages.IMessageHandler;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.util.IFileUtil;
import jetbrains.mps.messages.Message;
import jetbrains.mps.messages.MessageKind;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.build.behavior.BuildFolderMacro__BehaviorDescriptor;

public class ModuleLoaderUtils {

  /*package*/ static class ModuleMacroHelper implements MacroHelper {
    private final IFile moduleSourceDir;
    private final Context myContext;
    private final SNode myProject;
    private final IMessageHandler reporter;

    public ModuleMacroHelper(@NotNull IFile moduleSourceDir, Context context, SNode buildProject, IMessageHandler reporter) {
      this.moduleSourceDir = moduleSourceDir;
      this.myContext = context;
      this.myProject = buildProject;
      this.reporter = reporter;
    }
    @Override
    public String expandPath(@Nullable String path) {
      if (path == null) {
        return null;
      }

      if (moduleSourceDir != null && path.startsWith(MacrosFactory.MODULE)) {
        String relPath = path.substring(path.indexOf('}') + 1);
        return IFileUtil.getCanonicalPath(moduleSourceDir.getDescendant(relPath));
      }
      if (path.startsWith("${")) {
        int index = path.indexOf("}");
        if (index == -1) {
          String msg = String.format("invalid macro in `%s'", path);
          reporter.handle(Message.createMessage(MessageKind.ERROR, getClass().getName(), msg));
          return path;
        }

        String macroName = path.substring(2, index);
        SNode found = null;
        for (SNode macro : Sequence.fromIterable(SNodeOperations.ofConcept(SLinkOperations.getChildren(myProject, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, 0x4df58c6f18f84a22L, "macros")), MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x668c6cfbafadd002L, "jetbrains.mps.build.structure.BuildFolderMacro")))) {
          if (Objects.equals(SPropertyOperations.getString(macro, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), macroName)) {
            found = macro;
            break;
          }
        }
        if (found == null) {
          reporter.handle(Message.createMessage(MessageKind.ERROR, getClass().getName(), "macro is not declared in build script: " + path));
          return path;
        }

        String localPath = BuildFolderMacro__BehaviorDescriptor.evaluate_id4jjtc7WZOzA.invoke(found, myContext);
        if (localPath == null) {
          String msg = String.format("cannot resolve local path: %s, macro has no default value", path);
          reporter.handle(Message.createMessage(MessageKind.ERROR, getClass().getName(), msg, SNodeOperations.getPointer(found)));
          return path;
        }

        String relPath = path.substring(index + 1);
        return IFileUtil.getCanonicalPath(moduleSourceDir.getFileSystem().getFile(localPath).getDescendant(relPath));
      }
      return path;
    }
    @Override
    public String shrinkPath(@Nullable String string) {
      throw new UnsupportedOperationException("cannot shrink");
    }
  }
}
