<project name="buildPlugin" default="build" basedir="../">
  <!-- Generated by MPS -->
  <property name="build.dir" location="build" />
  <property name="build.tmp" location="${build.dir}/tmp/buildPlugin" />
  <property name="build.layout" location="${build.dir}/artifacts/buildPlugin" />
  <property name="ds" location="${basedir}" />
  <property name="artifacts.buildCore" location="${build.dir}/artifacts/buildCore" />
  <property name="artifacts.buildA" location="${build.dir}/artifacts/buildA" />
  <property name="artifacts.buildB" location="subprojects/buildB/build/artifacts/buildB" />
  <property file="${artifacts.buildCore}/build.properties" prefix="import.buildCore" />
  <property file="${artifacts.buildA}/build.properties" prefix="import.buildA" />
  <property name="buildCore.build.number" value="${import.buildCore.buildCore.build.number}" />
  <property name="buildCore.ver" value="${import.buildCore.buildCore.ver}" />
  <property name="buildCore.MPS" value="${import.buildCore.buildCore.MPS}" />
  <property name="buildA.aver" value="${import.buildA.buildA.aver}" />
  <property name="environment" value="env" />
  <property name="env.JAVA_HOME" value="${java.home}/.." />
  <property name="jdk.home" value="${env.JAVA_HOME}" />
  
  <target name="assemble" depends="classes">
    <aaa />
    <mkdir dir="${build.layout}/xx" />
    <mkdir dir="${build.tmp}/default/xx" />
    <mkdir dir="${build.tmp}/default/xx/test" />
    <jar destfile="${build.tmp}/default/xx/test/aaa${buildCore.ver}.war" duplicate="preserve">
      <fileset dir="${build.tmp}/java/out/test1" />
    </jar>
    <jar destfile="${build.layout}/xx/xx" duplicate="preserve">
      <fileset dir="${build.tmp}/default/xx" />
    </jar>
    <echo file="${build.layout}/build.properties">buildCore.build.number=${buildCore.build.number}${line.separator}buildCore.ver=${buildCore.ver}${line.separator}buildCore.MPS=${buildCore.MPS}${line.separator}buildA.aver=${buildA.aver}</echo>
  </target>
  
  <target name="buildDependents">
    <ant antfile="buildCore/buildCore.xml" inheritAll="false" useNativeBasedir="true" />
    <ant antfile="buildA/buildA.xml" inheritAll="false" useNativeBasedir="true" />
    <ant antfile="subprojects/buildB/buildB.xml" inheritAll="false" useNativeBasedir="true" />
  </target>
  
  <target name="fetchDependencies">
    <mkdir dir="${build.tmp}/deps/buildCore/release.zip" />
    <unzip src="${artifacts.buildCore}/default/release.zip" dest="${build.tmp}/deps/buildCore/release.zip" />
    <mkdir dir="${build.tmp}/deps/buildCore/inrelease.zip" />
    <unzip src="${build.tmp}/deps/buildCore/release.zip/inrelease.zip" dest="${build.tmp}/deps/buildCore/inrelease.zip" />
  </target>
  
  <target name="build" depends="assemble" />
  
  <target name="clean">
    <delete dir="${build.tmp}" />
    <delete dir="${build.layout}" />
  </target>
  
  <target name="compileJava" depends="java.compile.test1" />
  
  <target name="processResources" />
  
  <target name="classes" depends="compileJava, processResources" />
  
  <target name="test" depends="classes" />
  
  <target name="check" depends="test" />
  
  <target name="java.compile.test1" depends="fetchDependencies">
    <mkdir dir="${build.tmp}/java/out/test1" />
    <javac destdir="${build.tmp}/java/out/test1" fork="true" encoding="utf8" includeantruntime="false" debug="true">
      <compilerarg value="-Xlint:none" />
      <src />
      <classpath>
        <fileset file="${build.tmp}/deps/buildCore/inrelease.zip/mps-core${buildCore.ver}.jar" />
      </classpath>
    </javac>
  </target>
  
  <target name="layout.custom1">
    <mkdir dir="${build.tmp}/custom1/qas.zip" />
    <mkdir dir="${build.tmp}/custom1/qas.zip/a" />
    <jar destfile="${build.tmp}/custom1/qas.zip/a/test1${buildCore.ver}.jar" duplicate="preserve" />
    <zip destfile="${build.layout.custom1}/qas.zip">
      <fileset dir="${build.tmp}/custom1/qas.zip" />
    </zip>
  </target>
</project>