package jetbrains.mps.build.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.editor.runtime.deletionApprover.DeletionApproverUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class delete_reexport_inJavaDependencyImportedJar {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new delete_reexport_inJavaDependencyImportedJar.delete_reexport_inJavaDependencyImportedJar_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new delete_reexport_inJavaDependencyImportedJar.delete_reexport_inJavaDependencyImportedJar_BACKSPACE(node));
  }
  public static class delete_reexport_inJavaDependencyImportedJar_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public delete_reexport_inJavaDependencyImportedJar_DELETE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      if (DeletionApproverUtil.approve(editorContext, node, "reexportKeyword")) {
        return;
      }
      SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x5f32ae3ef3770dd4L, 0x5f32ae3ef3778cd6L, "reexport"), "" + (false));
    }
  }
  public static class delete_reexport_inJavaDependencyImportedJar_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public delete_reexport_inJavaDependencyImportedJar_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      if (DeletionApproverUtil.approve(editorContext, node, "reexportKeyword")) {
        return;
      }
      SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x5f32ae3ef3770dd4L, 0x5f32ae3ef3778cd6L, "reexport"), "" + (false));
    }
  }
}
