package jetbrains.mps.build.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_BuildAspect = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildCompositePath = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildCustomWorkflow = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildExternalDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildExternalLayout = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0f).create();
  private final ConceptPresentation props_BuildExternalLayoutDependency = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0g).create();
  private final ConceptPresentation props_BuildFileExcludeSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildFileIncludeSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildFileIncludesSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildFileSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildFileSelectorInAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildFolderMacro = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0m).create();
  private final ConceptPresentation props_BuildInputFileSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildInputFiles = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildInputFolderSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildInputFolders = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildInputResourceSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildInputSingleFile = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildInputSingleFolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildJavaPlugin = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0v).create();
  private final ConceptPresentation props_BuildLayout_AbstractContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_AbstractCopy = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Comment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CompileOutputOf = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Container = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_ContainerAcceptingFileSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Copy = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyFilter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyFilterFixCRLF = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyFilterReplaceRegex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyFilterReplaceTokens = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyFlattenMapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyGlobMapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyMapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyProcessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyRegexMapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CustomCopy = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_EchoProperties = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_EchoPropertyEntry = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_EchoXml = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_ExportAsJavaLibrary = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_File = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_FileSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_FileStub = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Filemode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Files = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_FilesOf = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Folder = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0zb).create();
  private final ConceptPresentation props_BuildLayout_Import = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_ImportContent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_InJarNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Jar = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0dc).create();
  private final ConceptPresentation props_BuildLayout_JarManifest = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_JarManifest_Attribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_JarManifest_Part = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_JarManifest_Section = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_NamedContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Node = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_PathElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_PureNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Tar = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0mc).create();
  private final ConceptPresentation props_BuildLayout_TransparentContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_War = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Zip = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0pc).create();
  private final ConceptPresentation props_BuildMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildNamedLayout = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildPlugin = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildProject = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0tc).create();
  private final ConceptPresentation props_BuildProjectDependency = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0uc).create();
  private final ConceptPresentation props_BuildProjectPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildRelativePath = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSourceArchiveRelativePath = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSourceMacroRelativePath = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0yc).create();
  private final ConceptPresentation props_BuildSourcePath = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSourceProjectRelativePath = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ad).create();
  private final ConceptPresentation props_BuildSourceSetContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_CompilablePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_FilesetProjectPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaCP = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaClassFolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaContentFolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaContentRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaDependencyExternalJar = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaDependencyExternalJarInFolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaDependencyFileset = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaDependencyJar = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaDependencyLibrary = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaDependencyModule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaExternalJarFolderRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaExternalJarRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaFiles = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaJar = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaJars = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaLibrary = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ud).create();
  private final ConceptPresentation props_BuildSource_JavaLibraryCP = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaLibraryElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaLibraryExternalJar = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaLibraryExternalJarFolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaModule = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0zd).create();
  private final ConceptPresentation props_BuildSource_JavaModuleOptions = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaOptions = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0be).create();
  private final ConceptPresentation props_BuildSource_JavaResources = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaSources = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_SingleFile = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_SingleFolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildString = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ge).create();
  private final ConceptPresentation props_BuildStringContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildStringNotEmpty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildStringPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildTextStringPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildVarRefStringPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildVariableMacro = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0me).create();
  private final ConceptPresentation props_BuildVariableMacroInitValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildVariableMacroInitWithDate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildVariableMacroInitWithFileContent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildVariableMacroInitWithString = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildVariableMacroInitWithValueFromFile = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_BuildSource_Folder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_BuildSource_JarFolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_BuildSource_JavaJar = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_BuildSource_JavaLibrary = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_BuildSource_JavaModule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_BuildSource_SingleFile = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_IWorkflowParticipantReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_IWorkfowParticipants = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_LibraryArtifacts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_Mapping = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_ProjectDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IWorkflowParticipant = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_BuildAspect;
      case 1:
        return props_BuildCompositePath;
      case 2:
        return props_BuildCustomWorkflow;
      case 3:
        return props_BuildDependency;
      case 4:
        return props_BuildExternalDependency;
      case 5:
        return props_BuildExternalLayout;
      case 6:
        return props_BuildExternalLayoutDependency;
      case 7:
        return props_BuildFileExcludeSelector;
      case 8:
        return props_BuildFileIncludeSelector;
      case 9:
        return props_BuildFileIncludesSelector;
      case 10:
        return props_BuildFileSelector;
      case 11:
        return props_BuildFileSelectorInAttribute;
      case 12:
        return props_BuildFolderMacro;
      case 13:
        return props_BuildInputFileSet;
      case 14:
        return props_BuildInputFiles;
      case 15:
        return props_BuildInputFolderSet;
      case 16:
        return props_BuildInputFolders;
      case 17:
        return props_BuildInputResourceSet;
      case 18:
        return props_BuildInputSingleFile;
      case 19:
        return props_BuildInputSingleFolder;
      case 20:
        return props_BuildJavaPlugin;
      case 21:
        return props_BuildLayout;
      case 22:
        return props_BuildLayout_AbstractContainer;
      case 23:
        return props_BuildLayout_AbstractCopy;
      case 24:
        return props_BuildLayout_Comment;
      case 25:
        return props_BuildLayout_CompileOutputOf;
      case 26:
        return props_BuildLayout_Container;
      case 27:
        return props_BuildLayout_ContainerAcceptingFileSet;
      case 28:
        return props_BuildLayout_Copy;
      case 29:
        return props_BuildLayout_CopyFilter;
      case 30:
        return props_BuildLayout_CopyFilterFixCRLF;
      case 31:
        return props_BuildLayout_CopyFilterReplaceRegex;
      case 32:
        return props_BuildLayout_CopyFilterReplaceTokens;
      case 33:
        return props_BuildLayout_CopyFlattenMapper;
      case 34:
        return props_BuildLayout_CopyGlobMapper;
      case 35:
        return props_BuildLayout_CopyHandler;
      case 36:
        return props_BuildLayout_CopyMapper;
      case 37:
        return props_BuildLayout_CopyParameter;
      case 38:
        return props_BuildLayout_CopyProcessor;
      case 39:
        return props_BuildLayout_CopyRegexMapper;
      case 40:
        return props_BuildLayout_CustomCopy;
      case 41:
        return props_BuildLayout_EchoProperties;
      case 42:
        return props_BuildLayout_EchoPropertyEntry;
      case 43:
        return props_BuildLayout_EchoXml;
      case 44:
        return props_BuildLayout_ExportAsJavaLibrary;
      case 45:
        return props_BuildLayout_File;
      case 46:
        return props_BuildLayout_FileSet;
      case 47:
        return props_BuildLayout_FileStub;
      case 48:
        return props_BuildLayout_Filemode;
      case 49:
        return props_BuildLayout_Files;
      case 50:
        return props_BuildLayout_FilesOf;
      case 51:
        return props_BuildLayout_Folder;
      case 52:
        return props_BuildLayout_Import;
      case 53:
        return props_BuildLayout_ImportContent;
      case 54:
        return props_BuildLayout_InJarNode;
      case 55:
        return props_BuildLayout_Jar;
      case 56:
        return props_BuildLayout_JarManifest;
      case 57:
        return props_BuildLayout_JarManifest_Attribute;
      case 58:
        return props_BuildLayout_JarManifest_Part;
      case 59:
        return props_BuildLayout_JarManifest_Section;
      case 60:
        return props_BuildLayout_NamedContainer;
      case 61:
        return props_BuildLayout_Node;
      case 62:
        return props_BuildLayout_PathElement;
      case 63:
        return props_BuildLayout_PureNode;
      case 64:
        return props_BuildLayout_Tar;
      case 65:
        return props_BuildLayout_TransparentContainer;
      case 66:
        return props_BuildLayout_War;
      case 67:
        return props_BuildLayout_Zip;
      case 68:
        return props_BuildMacro;
      case 69:
        return props_BuildNamedLayout;
      case 70:
        return props_BuildPlugin;
      case 71:
        return props_BuildProject;
      case 72:
        return props_BuildProjectDependency;
      case 73:
        return props_BuildProjectPart;
      case 74:
        return props_BuildRelativePath;
      case 75:
        return props_BuildSourceArchiveRelativePath;
      case 76:
        return props_BuildSourceMacroRelativePath;
      case 77:
        return props_BuildSourcePath;
      case 78:
        return props_BuildSourceProjectRelativePath;
      case 79:
        return props_BuildSourceSetContainer;
      case 80:
        return props_BuildSource_CompilablePart;
      case 81:
        return props_BuildSource_FilesetProjectPart;
      case 82:
        return props_BuildSource_JavaCP;
      case 83:
        return props_BuildSource_JavaClassFolder;
      case 84:
        return props_BuildSource_JavaContentFolder;
      case 85:
        return props_BuildSource_JavaContentRoot;
      case 86:
        return props_BuildSource_JavaDependency;
      case 87:
        return props_BuildSource_JavaDependencyExternalJar;
      case 88:
        return props_BuildSource_JavaDependencyExternalJarInFolder;
      case 89:
        return props_BuildSource_JavaDependencyFileset;
      case 90:
        return props_BuildSource_JavaDependencyJar;
      case 91:
        return props_BuildSource_JavaDependencyLibrary;
      case 92:
        return props_BuildSource_JavaDependencyModule;
      case 93:
        return props_BuildSource_JavaExternalJarFolderRef;
      case 94:
        return props_BuildSource_JavaExternalJarRef;
      case 95:
        return props_BuildSource_JavaFiles;
      case 96:
        return props_BuildSource_JavaJar;
      case 97:
        return props_BuildSource_JavaJars;
      case 98:
        return props_BuildSource_JavaLibrary;
      case 99:
        return props_BuildSource_JavaLibraryCP;
      case 100:
        return props_BuildSource_JavaLibraryElement;
      case 101:
        return props_BuildSource_JavaLibraryExternalJar;
      case 102:
        return props_BuildSource_JavaLibraryExternalJarFolder;
      case 103:
        return props_BuildSource_JavaModule;
      case 104:
        return props_BuildSource_JavaModuleOptions;
      case 105:
        return props_BuildSource_JavaOptions;
      case 106:
        return props_BuildSource_JavaResources;
      case 107:
        return props_BuildSource_JavaSources;
      case 108:
        return props_BuildSource_SingleFile;
      case 109:
        return props_BuildSource_SingleFolder;
      case 110:
        return props_BuildString;
      case 111:
        return props_BuildStringContainer;
      case 112:
        return props_BuildStringNotEmpty;
      case 113:
        return props_BuildStringPart;
      case 114:
        return props_BuildTextStringPart;
      case 115:
        return props_BuildVarRefStringPart;
      case 116:
        return props_BuildVariableMacro;
      case 117:
        return props_BuildVariableMacroInitValue;
      case 118:
        return props_BuildVariableMacroInitWithDate;
      case 119:
        return props_BuildVariableMacroInitWithFileContent;
      case 120:
        return props_BuildVariableMacroInitWithString;
      case 121:
        return props_BuildVariableMacroInitWithValueFromFile;
      case 122:
        return props_GeneratorInternal_BuildSource_Folder;
      case 123:
        return props_GeneratorInternal_BuildSource_JarFolder;
      case 124:
        return props_GeneratorInternal_BuildSource_JavaJar;
      case 125:
        return props_GeneratorInternal_BuildSource_JavaLibrary;
      case 126:
        return props_GeneratorInternal_BuildSource_JavaModule;
      case 127:
        return props_GeneratorInternal_BuildSource_SingleFile;
      case 128:
        return props_GeneratorInternal_IWorkflowParticipantReference;
      case 129:
        return props_GeneratorInternal_IWorkfowParticipants;
      case 130:
        return props_GeneratorInternal_LibraryArtifacts;
      case 131:
        return props_GeneratorInternal_Mapping;
      case 132:
        return props_GeneratorInternal_ProjectDependency;
      case 133:
        return props_IWorkflowParticipant;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
