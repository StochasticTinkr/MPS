package jetbrains.mps.build.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_BuildAspect = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildCompositePath = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildCustomWorkflow = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildExternalDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildExternalLayout = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0f).create();
  private final ConceptPresentation props_BuildExternalLayoutDependency = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0g).create();
  private final ConceptPresentation props_BuildFileExcludeSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildFileIncludeSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildFileIncludesSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildFileSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildFileSelectorInAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildFolderMacro = new ConceptPresentationBuilder().shortDesc("defines folder macro with default value (for local build)").icon(IconContainer.RESOURCE_a0a0m).create();
  private final ConceptPresentation props_BuildInputFileSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildInputFiles = new ConceptPresentationBuilder().shortDesc("folder on local filesystem").create();
  private final ConceptPresentation props_BuildInputFolderSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildInputFolders = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildInputResourceSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildInputSingleFile = new ConceptPresentationBuilder().shortDesc("single file on local filesystem").create();
  private final ConceptPresentation props_BuildInputSingleFolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildJavaPlugin = new ConceptPresentationBuilder().shortDesc("adds Java capabilities (compile, test & bundling) to the project").create();
  private final ConceptPresentation props_BuildLayout = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0v).create();
  private final ConceptPresentation props_BuildLayout_AbstractContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_AbstractCopy = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Comment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CompileOutputOf = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Container = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_ContainerAcceptingFileSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Copy = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyFilter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyFilterFixCRLF = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyFilterReplaceRegex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyFilterReplaceTokens = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyFlattenMapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyGlobMapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyMapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyProcessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CopyRegexMapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_CustomCopy = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_EchoProperties = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_EchoPropertyEntry = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_EchoXml = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_ExportAsJavaLibrary = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_File = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_FileSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_FileStub = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Filemode = new ConceptPresentationBuilder().shortDesc("customize file modes in archive").create();
  private final ConceptPresentation props_BuildLayout_Files = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_FilesOf = new ConceptPresentationBuilder().shortDesc("copy files of project element").create();
  private final ConceptPresentation props_BuildLayout_Folder = new ConceptPresentationBuilder().shortDesc("create a folder").icon(IconContainer.RESOURCE_a0a0zb).create();
  private final ConceptPresentation props_BuildLayout_Import = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_ImportContent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_InJarNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Jar = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0dc).create();
  private final ConceptPresentation props_BuildLayout_JarManifest = new ConceptPresentationBuilder().shortDesc("jar manifest file").create();
  private final ConceptPresentation props_BuildLayout_JarManifest_Attribute = new ConceptPresentationBuilder().shortDesc("jar manifest attribute").create();
  private final ConceptPresentation props_BuildLayout_JarManifest_Part = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_JarManifest_Section = new ConceptPresentationBuilder().shortDesc("jar manifest section").create();
  private final ConceptPresentation props_BuildLayout_NamedContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Node = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_PathElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_PureNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Tar = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0mc).create();
  private final ConceptPresentation props_BuildLayout_TransparentContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_War = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildLayout_Zip = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0pc).create();
  private final ConceptPresentation props_BuildMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildNamedLayout = new ConceptPresentationBuilder().shortDesc("custom named layout").create();
  private final ConceptPresentation props_BuildPlugin = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildProject = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0tc).create();
  private final ConceptPresentation props_BuildProjectDependency = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0uc).create();
  private final ConceptPresentation props_BuildProjectPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildRelativePath = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSourceArchiveRelativePath = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSourceMacroRelativePath = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0yc).create();
  private final ConceptPresentation props_BuildSourcePath = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSourceProjectRelativePath = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ad).create();
  private final ConceptPresentation props_BuildSourceSetContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_CompilablePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_FilesetProjectPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaCP = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaClassFolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaContentFolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaContentRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaDependencyExternalJar = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaDependencyExternalJarInFolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaDependencyFileset = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaDependencyJar = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaDependencyLibrary = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaDependencyModule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaExternalJarFolderRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaExternalJarRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaFiles = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaJar = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaJars = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaLibrary = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ud).create();
  private final ConceptPresentation props_BuildSource_JavaLibraryCP = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaLibraryElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaLibraryExternalJar = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaLibraryExternalJarFolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaModule = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0zd).create();
  private final ConceptPresentation props_BuildSource_JavaModuleOptions = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaOptions = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0be).create();
  private final ConceptPresentation props_BuildSource_JavaResources = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_JavaSources = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_SingleFile = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildSource_SingleFolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildString = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ge).create();
  private final ConceptPresentation props_BuildStringContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildStringNotEmpty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildStringPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildTextStringPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildVarRefStringPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildVariableMacro = new ConceptPresentationBuilder().shortDesc("defines variable macro").icon(IconContainer.RESOURCE_a0a0me).create();
  private final ConceptPresentation props_BuildVariableMacroInitValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildVariableMacroInitWithDate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildVariableMacroInitWithFileContent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildVariableMacroInitWithString = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuildVariableMacroInitWithValueFromFile = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_BuildSource_Folder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_BuildSource_JarFolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_BuildSource_JavaJar = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_BuildSource_JavaLibrary = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_BuildSource_JavaModule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_BuildSource_SingleFile = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_IWorkflowParticipantReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_IWorkfowParticipants = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_LibraryArtifacts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_Mapping = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_ProjectDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IWorkflowParticipant = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BuildAspect:
        return props_BuildAspect;
      case LanguageConceptSwitch.BuildCompositePath:
        return props_BuildCompositePath;
      case LanguageConceptSwitch.BuildCustomWorkflow:
        return props_BuildCustomWorkflow;
      case LanguageConceptSwitch.BuildDependency:
        return props_BuildDependency;
      case LanguageConceptSwitch.BuildExternalDependency:
        return props_BuildExternalDependency;
      case LanguageConceptSwitch.BuildExternalLayout:
        return props_BuildExternalLayout;
      case LanguageConceptSwitch.BuildExternalLayoutDependency:
        return props_BuildExternalLayoutDependency;
      case LanguageConceptSwitch.BuildFileExcludeSelector:
        return props_BuildFileExcludeSelector;
      case LanguageConceptSwitch.BuildFileIncludeSelector:
        return props_BuildFileIncludeSelector;
      case LanguageConceptSwitch.BuildFileIncludesSelector:
        return props_BuildFileIncludesSelector;
      case LanguageConceptSwitch.BuildFileSelector:
        return props_BuildFileSelector;
      case LanguageConceptSwitch.BuildFileSelectorInAttribute:
        return props_BuildFileSelectorInAttribute;
      case LanguageConceptSwitch.BuildFolderMacro:
        return props_BuildFolderMacro;
      case LanguageConceptSwitch.BuildInputFileSet:
        return props_BuildInputFileSet;
      case LanguageConceptSwitch.BuildInputFiles:
        return props_BuildInputFiles;
      case LanguageConceptSwitch.BuildInputFolderSet:
        return props_BuildInputFolderSet;
      case LanguageConceptSwitch.BuildInputFolders:
        return props_BuildInputFolders;
      case LanguageConceptSwitch.BuildInputResourceSet:
        return props_BuildInputResourceSet;
      case LanguageConceptSwitch.BuildInputSingleFile:
        return props_BuildInputSingleFile;
      case LanguageConceptSwitch.BuildInputSingleFolder:
        return props_BuildInputSingleFolder;
      case LanguageConceptSwitch.BuildJavaPlugin:
        return props_BuildJavaPlugin;
      case LanguageConceptSwitch.BuildLayout:
        return props_BuildLayout;
      case LanguageConceptSwitch.BuildLayout_AbstractContainer:
        return props_BuildLayout_AbstractContainer;
      case LanguageConceptSwitch.BuildLayout_AbstractCopy:
        return props_BuildLayout_AbstractCopy;
      case LanguageConceptSwitch.BuildLayout_Comment:
        return props_BuildLayout_Comment;
      case LanguageConceptSwitch.BuildLayout_CompileOutputOf:
        return props_BuildLayout_CompileOutputOf;
      case LanguageConceptSwitch.BuildLayout_Container:
        return props_BuildLayout_Container;
      case LanguageConceptSwitch.BuildLayout_ContainerAcceptingFileSet:
        return props_BuildLayout_ContainerAcceptingFileSet;
      case LanguageConceptSwitch.BuildLayout_Copy:
        return props_BuildLayout_Copy;
      case LanguageConceptSwitch.BuildLayout_CopyFilter:
        return props_BuildLayout_CopyFilter;
      case LanguageConceptSwitch.BuildLayout_CopyFilterFixCRLF:
        return props_BuildLayout_CopyFilterFixCRLF;
      case LanguageConceptSwitch.BuildLayout_CopyFilterReplaceRegex:
        return props_BuildLayout_CopyFilterReplaceRegex;
      case LanguageConceptSwitch.BuildLayout_CopyFilterReplaceTokens:
        return props_BuildLayout_CopyFilterReplaceTokens;
      case LanguageConceptSwitch.BuildLayout_CopyFlattenMapper:
        return props_BuildLayout_CopyFlattenMapper;
      case LanguageConceptSwitch.BuildLayout_CopyGlobMapper:
        return props_BuildLayout_CopyGlobMapper;
      case LanguageConceptSwitch.BuildLayout_CopyHandler:
        return props_BuildLayout_CopyHandler;
      case LanguageConceptSwitch.BuildLayout_CopyMapper:
        return props_BuildLayout_CopyMapper;
      case LanguageConceptSwitch.BuildLayout_CopyParameter:
        return props_BuildLayout_CopyParameter;
      case LanguageConceptSwitch.BuildLayout_CopyProcessor:
        return props_BuildLayout_CopyProcessor;
      case LanguageConceptSwitch.BuildLayout_CopyRegexMapper:
        return props_BuildLayout_CopyRegexMapper;
      case LanguageConceptSwitch.BuildLayout_CustomCopy:
        return props_BuildLayout_CustomCopy;
      case LanguageConceptSwitch.BuildLayout_EchoProperties:
        return props_BuildLayout_EchoProperties;
      case LanguageConceptSwitch.BuildLayout_EchoPropertyEntry:
        return props_BuildLayout_EchoPropertyEntry;
      case LanguageConceptSwitch.BuildLayout_EchoXml:
        return props_BuildLayout_EchoXml;
      case LanguageConceptSwitch.BuildLayout_ExportAsJavaLibrary:
        return props_BuildLayout_ExportAsJavaLibrary;
      case LanguageConceptSwitch.BuildLayout_File:
        return props_BuildLayout_File;
      case LanguageConceptSwitch.BuildLayout_FileSet:
        return props_BuildLayout_FileSet;
      case LanguageConceptSwitch.BuildLayout_FileStub:
        return props_BuildLayout_FileStub;
      case LanguageConceptSwitch.BuildLayout_Filemode:
        return props_BuildLayout_Filemode;
      case LanguageConceptSwitch.BuildLayout_Files:
        return props_BuildLayout_Files;
      case LanguageConceptSwitch.BuildLayout_FilesOf:
        return props_BuildLayout_FilesOf;
      case LanguageConceptSwitch.BuildLayout_Folder:
        return props_BuildLayout_Folder;
      case LanguageConceptSwitch.BuildLayout_Import:
        return props_BuildLayout_Import;
      case LanguageConceptSwitch.BuildLayout_ImportContent:
        return props_BuildLayout_ImportContent;
      case LanguageConceptSwitch.BuildLayout_InJarNode:
        return props_BuildLayout_InJarNode;
      case LanguageConceptSwitch.BuildLayout_Jar:
        return props_BuildLayout_Jar;
      case LanguageConceptSwitch.BuildLayout_JarManifest:
        return props_BuildLayout_JarManifest;
      case LanguageConceptSwitch.BuildLayout_JarManifest_Attribute:
        return props_BuildLayout_JarManifest_Attribute;
      case LanguageConceptSwitch.BuildLayout_JarManifest_Part:
        return props_BuildLayout_JarManifest_Part;
      case LanguageConceptSwitch.BuildLayout_JarManifest_Section:
        return props_BuildLayout_JarManifest_Section;
      case LanguageConceptSwitch.BuildLayout_NamedContainer:
        return props_BuildLayout_NamedContainer;
      case LanguageConceptSwitch.BuildLayout_Node:
        return props_BuildLayout_Node;
      case LanguageConceptSwitch.BuildLayout_PathElement:
        return props_BuildLayout_PathElement;
      case LanguageConceptSwitch.BuildLayout_PureNode:
        return props_BuildLayout_PureNode;
      case LanguageConceptSwitch.BuildLayout_Tar:
        return props_BuildLayout_Tar;
      case LanguageConceptSwitch.BuildLayout_TransparentContainer:
        return props_BuildLayout_TransparentContainer;
      case LanguageConceptSwitch.BuildLayout_War:
        return props_BuildLayout_War;
      case LanguageConceptSwitch.BuildLayout_Zip:
        return props_BuildLayout_Zip;
      case LanguageConceptSwitch.BuildMacro:
        return props_BuildMacro;
      case LanguageConceptSwitch.BuildNamedLayout:
        return props_BuildNamedLayout;
      case LanguageConceptSwitch.BuildPlugin:
        return props_BuildPlugin;
      case LanguageConceptSwitch.BuildProject:
        return props_BuildProject;
      case LanguageConceptSwitch.BuildProjectDependency:
        return props_BuildProjectDependency;
      case LanguageConceptSwitch.BuildProjectPart:
        return props_BuildProjectPart;
      case LanguageConceptSwitch.BuildRelativePath:
        return props_BuildRelativePath;
      case LanguageConceptSwitch.BuildSourceArchiveRelativePath:
        return props_BuildSourceArchiveRelativePath;
      case LanguageConceptSwitch.BuildSourceMacroRelativePath:
        return props_BuildSourceMacroRelativePath;
      case LanguageConceptSwitch.BuildSourcePath:
        return props_BuildSourcePath;
      case LanguageConceptSwitch.BuildSourceProjectRelativePath:
        return props_BuildSourceProjectRelativePath;
      case LanguageConceptSwitch.BuildSourceSetContainer:
        return props_BuildSourceSetContainer;
      case LanguageConceptSwitch.BuildSource_CompilablePart:
        return props_BuildSource_CompilablePart;
      case LanguageConceptSwitch.BuildSource_FilesetProjectPart:
        return props_BuildSource_FilesetProjectPart;
      case LanguageConceptSwitch.BuildSource_JavaCP:
        return props_BuildSource_JavaCP;
      case LanguageConceptSwitch.BuildSource_JavaClassFolder:
        return props_BuildSource_JavaClassFolder;
      case LanguageConceptSwitch.BuildSource_JavaContentFolder:
        return props_BuildSource_JavaContentFolder;
      case LanguageConceptSwitch.BuildSource_JavaContentRoot:
        return props_BuildSource_JavaContentRoot;
      case LanguageConceptSwitch.BuildSource_JavaDependency:
        return props_BuildSource_JavaDependency;
      case LanguageConceptSwitch.BuildSource_JavaDependencyExternalJar:
        return props_BuildSource_JavaDependencyExternalJar;
      case LanguageConceptSwitch.BuildSource_JavaDependencyExternalJarInFolder:
        return props_BuildSource_JavaDependencyExternalJarInFolder;
      case LanguageConceptSwitch.BuildSource_JavaDependencyFileset:
        return props_BuildSource_JavaDependencyFileset;
      case LanguageConceptSwitch.BuildSource_JavaDependencyJar:
        return props_BuildSource_JavaDependencyJar;
      case LanguageConceptSwitch.BuildSource_JavaDependencyLibrary:
        return props_BuildSource_JavaDependencyLibrary;
      case LanguageConceptSwitch.BuildSource_JavaDependencyModule:
        return props_BuildSource_JavaDependencyModule;
      case LanguageConceptSwitch.BuildSource_JavaExternalJarFolderRef:
        return props_BuildSource_JavaExternalJarFolderRef;
      case LanguageConceptSwitch.BuildSource_JavaExternalJarRef:
        return props_BuildSource_JavaExternalJarRef;
      case LanguageConceptSwitch.BuildSource_JavaFiles:
        return props_BuildSource_JavaFiles;
      case LanguageConceptSwitch.BuildSource_JavaJar:
        return props_BuildSource_JavaJar;
      case LanguageConceptSwitch.BuildSource_JavaJars:
        return props_BuildSource_JavaJars;
      case LanguageConceptSwitch.BuildSource_JavaLibrary:
        return props_BuildSource_JavaLibrary;
      case LanguageConceptSwitch.BuildSource_JavaLibraryCP:
        return props_BuildSource_JavaLibraryCP;
      case LanguageConceptSwitch.BuildSource_JavaLibraryElement:
        return props_BuildSource_JavaLibraryElement;
      case LanguageConceptSwitch.BuildSource_JavaLibraryExternalJar:
        return props_BuildSource_JavaLibraryExternalJar;
      case LanguageConceptSwitch.BuildSource_JavaLibraryExternalJarFolder:
        return props_BuildSource_JavaLibraryExternalJarFolder;
      case LanguageConceptSwitch.BuildSource_JavaModule:
        return props_BuildSource_JavaModule;
      case LanguageConceptSwitch.BuildSource_JavaModuleOptions:
        return props_BuildSource_JavaModuleOptions;
      case LanguageConceptSwitch.BuildSource_JavaOptions:
        return props_BuildSource_JavaOptions;
      case LanguageConceptSwitch.BuildSource_JavaResources:
        return props_BuildSource_JavaResources;
      case LanguageConceptSwitch.BuildSource_JavaSources:
        return props_BuildSource_JavaSources;
      case LanguageConceptSwitch.BuildSource_SingleFile:
        return props_BuildSource_SingleFile;
      case LanguageConceptSwitch.BuildSource_SingleFolder:
        return props_BuildSource_SingleFolder;
      case LanguageConceptSwitch.BuildString:
        return props_BuildString;
      case LanguageConceptSwitch.BuildStringContainer:
        return props_BuildStringContainer;
      case LanguageConceptSwitch.BuildStringNotEmpty:
        return props_BuildStringNotEmpty;
      case LanguageConceptSwitch.BuildStringPart:
        return props_BuildStringPart;
      case LanguageConceptSwitch.BuildTextStringPart:
        return props_BuildTextStringPart;
      case LanguageConceptSwitch.BuildVarRefStringPart:
        return props_BuildVarRefStringPart;
      case LanguageConceptSwitch.BuildVariableMacro:
        return props_BuildVariableMacro;
      case LanguageConceptSwitch.BuildVariableMacroInitValue:
        return props_BuildVariableMacroInitValue;
      case LanguageConceptSwitch.BuildVariableMacroInitWithDate:
        return props_BuildVariableMacroInitWithDate;
      case LanguageConceptSwitch.BuildVariableMacroInitWithFileContent:
        return props_BuildVariableMacroInitWithFileContent;
      case LanguageConceptSwitch.BuildVariableMacroInitWithString:
        return props_BuildVariableMacroInitWithString;
      case LanguageConceptSwitch.BuildVariableMacroInitWithValueFromFile:
        return props_BuildVariableMacroInitWithValueFromFile;
      case LanguageConceptSwitch.GeneratorInternal_BuildSource_Folder:
        return props_GeneratorInternal_BuildSource_Folder;
      case LanguageConceptSwitch.GeneratorInternal_BuildSource_JarFolder:
        return props_GeneratorInternal_BuildSource_JarFolder;
      case LanguageConceptSwitch.GeneratorInternal_BuildSource_JavaJar:
        return props_GeneratorInternal_BuildSource_JavaJar;
      case LanguageConceptSwitch.GeneratorInternal_BuildSource_JavaLibrary:
        return props_GeneratorInternal_BuildSource_JavaLibrary;
      case LanguageConceptSwitch.GeneratorInternal_BuildSource_JavaModule:
        return props_GeneratorInternal_BuildSource_JavaModule;
      case LanguageConceptSwitch.GeneratorInternal_BuildSource_SingleFile:
        return props_GeneratorInternal_BuildSource_SingleFile;
      case LanguageConceptSwitch.GeneratorInternal_IWorkflowParticipantReference:
        return props_GeneratorInternal_IWorkflowParticipantReference;
      case LanguageConceptSwitch.GeneratorInternal_IWorkfowParticipants:
        return props_GeneratorInternal_IWorkfowParticipants;
      case LanguageConceptSwitch.GeneratorInternal_LibraryArtifacts:
        return props_GeneratorInternal_LibraryArtifacts;
      case LanguageConceptSwitch.GeneratorInternal_Mapping:
        return props_GeneratorInternal_Mapping;
      case LanguageConceptSwitch.GeneratorInternal_ProjectDependency:
        return props_GeneratorInternal_ProjectDependency;
      case LanguageConceptSwitch.IWorkflowParticipant:
        return props_IWorkflowParticipant;
    }
    return null;
  }
}
