package jetbrains.mps.build.actions;

/*Generated by MPS */

import jetbrains.mps.actions.descriptor.BaseActionAspectDescriptor;
import jetbrains.mps.openapi.actions.descriptor.ActionAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.actions.descriptor.PasteWrapper;

public class ActionAspectDescriptorImpl extends BaseActionAspectDescriptor implements ActionAspectDescriptor {
  private static final String LANGUAGE_FQ_NAME = "jetbrains.mps.build";

  @Override
  public Collection<NodeFactory> getFactories(SAbstractConcept concept) {
    if (LANGUAGE_FQ_NAME.equals(concept.getLanguage().getQualifiedName())) {
      switch (Arrays.binarySearch(stringSwitchCases_tpto26_a0a0a0c, concept.getName())) {
        case 0:
          return Collections.<NodeFactory>singletonList(new buildScript_nodeFactories.NodeFactory_1258644073389160421());
        case 1:
          return Collections.<NodeFactory>singletonList(new buildScript_nodeFactories.NodeFactory_1258644073389160370());
        case 2:
          return Collections.<NodeFactory>singletonList(new buildScript_nodeFactories.NodeFactory_6977615362526183835());
        case 3:
          return Collections.<NodeFactory>singletonList(new buildScript_nodeFactories.NodeFactory_6099797596647438149());
        case 4:
          return Collections.<NodeFactory>singletonList(new buildScript_nodeFactories.NodeFactory_6099797596647440630());
        case 5:
          return Collections.<NodeFactory>singletonList(new buildScript_nodeFactories.NodeFactory_6099797596647447256());
        case 6:
          return Collections.<NodeFactory>singletonList(new buildScript_nodeFactories.NodeFactory_6099797596647417250());
        case 7:
          return Collections.<NodeFactory>singletonList(new buildScript_nodeFactories.NodeFactory_7389400916848172015());
        case 8:
          return Collections.<NodeFactory>singletonList(new buildScript_nodeFactories.NodeFactory_5481553824944787386());
        default:
      }
    }
    return Collections.<NodeFactory>emptyList();
  }

  @Override
  public Collection<PasteWrapper> getPasteWrappers() {
    return Arrays.asList(new PasteWrapper[]{new wrappers_PasteWrapper_0(), new wrappers_PasteWrapper_1(), new wrappers_PasteWrapper_2(), new wrappers_PasteWrapper_3()});
  }
  private static String[] stringSwitchCases_tpto26_a0a0a0c = new String[]{"BuildInputFiles", "BuildInputSingleFile", "BuildLayout_AbstractCopy", "BuildLayout_NamedContainer", "BuildMacro", "BuildProject", "BuildProjectPart", "BuildSourceMacroRelativePath", "BuildSourceProjectRelativePath"};
}
