package jetbrains.mps.build.util;

/*Generated by MPS */

import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.util.FileUtil;
import java.io.File;

public class RelativePathHelper {
  private String myBasePath;
  public RelativePathHelper(String basePath) {
    myBasePath = basePath.replace("\\", "/");
  }

  /**
   * Transition method to avoid uses of Context.defaultContext().getRelativePathHelper() when we know for sure module is not transient
   */
  @Nullable
  public static RelativePathHelper forModule(SModule module) {
    if (module == null || ((AbstractModule) module).getDescriptorFile() == null || module.isPackaged()) {
      return null;
    }
    String basePath = ((AbstractModule) module).getDescriptorFile().getParent().getPath();
    return new RelativePathHelper(basePath);
  }

  public String makeRelative(String fullPath) throws RelativePathHelper.PathException {
    if ((fullPath == null || fullPath.length() == 0)) {
      return "";
    }
    String normalized = FileUtil.getAbsolutePath(fullPath).replace("\\", "/");
    try {
      return FileUtil.getRelativePath(normalized, (myBasePath.endsWith("/") ? myBasePath : myBasePath + "/"), "/");
    } catch (Exception ex) {
      throw new RelativePathHelper.PathException(ex, ex.getMessage());
    }
  }
  public String makeAbsolute(String shortPath) throws RelativePathHelper.PathException {
    if ((shortPath == null || shortPath.length() == 0)) {
      return myBasePath;
    }
    shortPath = shortPath.replace("\\", "/");
    if (shortPath.startsWith("./")) {
      shortPath = shortPath.substring(2);
    }
    File res = new File(myBasePath, shortPath);
    try {
      return res.getCanonicalPath().replace("\\", "/");
    } catch (Exception ex) {
      throw new RelativePathHelper.PathException(ex, ex.getMessage());
    }
  }
  public String getBasePath() {
    return myBasePath;
  }
  public static class PathException extends Exception {
    public PathException(Throwable cause, String message) {
      super(message, cause);
    }
  }
}
