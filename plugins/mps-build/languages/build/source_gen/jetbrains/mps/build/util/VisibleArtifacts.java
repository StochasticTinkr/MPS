package jetbrains.mps.build.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.template.TemplateQueryContext;
import java.util.Map;
import java.util.HashMap;
import java.util.List;
import java.util.ArrayList;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.generator.TransientModelsModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.build.behavior.BuildLayout_Node__BehaviorDescriptor;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import jetbrains.mps.build.behavior.BuildSourcePath__BehaviorDescriptor;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import java.util.concurrent.ConcurrentMap;
import jetbrains.mps.smodel.ModelAccess;

public class VisibleArtifacts {
  protected final SNode project;
  protected final TemplateQueryContext genContext;
  protected final Map<SNode, SNode> parentMap = new HashMap<SNode, SNode>();
  private final List<SNode> visibleArtifacts = new ArrayList<SNode>();
  private final List<SNode> visibleLayouts = new ArrayList<SNode>();
  protected DependenciesHelper dependenciesHelper;

  public VisibleArtifacts(SNode project, @Nullable TemplateQueryContext genContext) {
    this.project = project;
    this.genContext = genContext;
    this.dependenciesHelper = (genContext != null ? new DependenciesHelper(genContext, project) : null);
    if (genContext == null && SNodeOperations.getModel(project).getModule() instanceof TransientModelsModule) {
      throw new IllegalArgumentException("cannot instantiate VisibleArtifacts for transient model without generation context");
    }
  }

  public void collect() {
    for (SNode layoutDependency : SNodeOperations.ofConcept(SLinkOperations.getChildren(project, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, 0x4df58c6f18f84a25L, "dependencies")), MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x63a87b9320d3d0a4L, "jetbrains.mps.build.structure.BuildExternalLayoutDependency"))) {
      SNode target = SLinkOperations.getTarget(layoutDependency, MetaAdapterFactory.getReferenceLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x63a87b9320d3d0a4L, 0x63a87b9320d3d0a7L, "layout"));
      collectInExternalLayout(layoutDependency, target);
    }
    for (SNode projectDependency : SNodeOperations.ofConcept(SLinkOperations.getChildren(project, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, 0x4df58c6f18f84a25L, "dependencies")), MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x454b730dd908c220L, "jetbrains.mps.build.structure.BuildProjectDependency"))) {
      SNode target = SLinkOperations.getTarget(projectDependency, MetaAdapterFactory.getReferenceLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x454b730dd908c220L, 0x4df58c6f18f84a24L, "script"));
      collectInProject(projectDependency, target);
    }
    collectProjectArtifacts();
  }

  @Nullable
  public DependenciesHelper getDependenciesHelper() {
    return dependenciesHelper;
  }

  private void collectProjectArtifacts() {
    SNode originalProject = SNodeOperations.cast(toOriginalNode(project), MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, "jetbrains.mps.build.structure.BuildProject"));
    collectInProject(SLinkOperations.getTarget(originalProject, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, 0x4df58c6f18f84a1cL, "layout")), originalProject);
  }
  protected void collectInProject(SNode parent, SNode target) {
    target = (target != project ? SNodeOperations.as(toOriginalNode(target), MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, "jetbrains.mps.build.structure.BuildProject")) : project);
    if (target == null) {
      return;
    }
    assert project == target || !(SNodeOperations.getModel(target).getModule() instanceof TransientModelsModule);

    ListSequence.fromList(visibleLayouts).addElement(SLinkOperations.getTarget(target, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, 0x4df58c6f18f84a1cL, "layout")));
    if (SLinkOperations.getTarget(target, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, 0x4df58c6f18f84a1cL, "layout")) != parent) {
      parentMap.put(SLinkOperations.getTarget(target, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, 0x4df58c6f18f84a1cL, "layout")), parent);
    }
    for (SNode node : SLinkOperations.getChildren(SLinkOperations.getTarget(target, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, 0x4df58c6f18f84a1cL, "layout")), MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4140393b234482c3L, 0x668c6cfbafac4c8eL, "children"))) {
      collectInLayout(parent, node);
    }
  }
  private void collectInExternalLayout(SNode parent, SNode target) {
    target = SNodeOperations.as(toOriginalNode(target), MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x63a87b9320d0bfc9L, "jetbrains.mps.build.structure.BuildExternalLayout"));
    if (target == null) {
      return;
    }
    assert !(SNodeOperations.getModel(target).getModule() instanceof TransientModelsModule);

    ListSequence.fromList(visibleLayouts).addElement(target);
    parentMap.put(target, parent);
    for (SNode node : SLinkOperations.getChildren(target, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4140393b234482c3L, 0x668c6cfbafac4c8eL, "children"))) {
      collectInLayout(parent, node);
    }
  }
  protected void collectInLayout(SNode parent, SNode node) {
    if (parentMap.containsKey(node)) {
      return;
    }

    ListSequence.fromList(visibleArtifacts).addElement(node);
    parentMap.put(node, parent);

    if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x668c6cfbafabcf0cL, "jetbrains.mps.build.structure.BuildLayout_AbstractContainer"))) {
      for (SNode child : SLinkOperations.getChildren(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x668c6cfbafabcf0cL, "jetbrains.mps.build.structure.BuildLayout_AbstractContainer")), MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4140393b234482c3L, 0x668c6cfbafac4c8eL, "children"))) {
        collectInLayout(node, child);
      }
    } else if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4ddcec86af9fdb53L, "jetbrains.mps.build.structure.BuildLayout_ImportContent"))) {
      SNode target = SNodeOperations.as(toOriginalNode(SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4ddcec86af9fdb53L, "jetbrains.mps.build.structure.BuildLayout_ImportContent")), MetaAdapterFactory.getReferenceLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4ddcec86af9fdb53L, 0x4ddcec86af9fdb55L, "target"))), MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x668c6cfbafabcf0cL, "jetbrains.mps.build.structure.BuildLayout_AbstractContainer"));
      if (target != null) {
        for (SNode child : ListSequence.fromList(SLinkOperations.getChildren(target, MetaAdapterFactory.getContainmentLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4140393b234482c3L, 0x668c6cfbafac4c8eL, "children")))) {
          collectInLayout(parent, child);
        }
      }
    } else if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0xbabdfbeee1350f2L, "jetbrains.mps.build.structure.BuildLayout_Import"))) {
      SNode target = SNodeOperations.as(toOriginalNode(SLinkOperations.getTarget(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0xbabdfbeee1350f2L, "jetbrains.mps.build.structure.BuildLayout_Import")), MetaAdapterFactory.getReferenceLink(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0xbabdfbeee1350f2L, 0xbabdfbeee1350f4L, "target"))), MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x668c6cfbafac4c85L, "jetbrains.mps.build.structure.BuildLayout_Node"));
      if (target != null) {
        collectInLayout(parent, target);
      }
    }
  }
  public SNode toOriginalNode(SNode node) {
    return dependenciesHelper.getOriginalNode(node);
  }
  public SNode getProject() {
    return project;
  }
  public Iterable<SNode> getArtifacts() {
    return ListSequence.fromList(visibleArtifacts).asUnmodifiable();
  }
  public Iterable<SNode> getLayouts() {
    return ListSequence.fromList(visibleLayouts).asUnmodifiable();
  }
  public boolean contains(SNode node) {
    return parentMap.containsKey(node);
  }
  public SNode parent(SNode node) {
    SNode result = parentMap.get(node);
    if (result == node) {
      throw new IllegalStateException();
    }
    return result;
  }
  public void needsFetch(SNode node) {
    if ((node == null)) {
      return;
    }
    node = toOriginalNode(node);
    if ((node == null)) {
      return;
    }
    if (dependenciesHelper == null) {
      throw new IllegalStateException("needsFetch() should be called in generation context only");
    }
    dependenciesHelper.requiresFetch().put(node, "");
  }
  public SNode findArtifact(Object id) {
    if (id == null) {
      return null;
    }
    if (id instanceof SNode) {
      SNode node = (SNode) id;
      if (parentMap.containsKey(node) && SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getInterfaceConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x62ec2ed0f87da183L, "jetbrains.mps.build.structure.BuildLayout_PathElement"))) {
        return SNodeOperations.cast(node, MetaAdapterFactory.getInterfaceConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x62ec2ed0f87da183L, "jetbrains.mps.build.structure.BuildLayout_PathElement"));
      }
      node = toOriginalNode(node);
      if (SNodeOperations.getModel(node).getModule() instanceof TransientModelsModule) {
        throw new IllegalArgumentException("findArtifact() cannot be called for transient nodes: " + node);
      }
      id = node;
    }
    if (dependenciesHelper == null) {
      throw new IllegalStateException("findArtifact() should be called in generation context only: ");
    }
    SNode result = dependenciesHelper.artifacts().get(id);
    if (result != null) {
      return result;
    }
    for (SNode artifact : this.getArtifacts()) {
      assert !(SNodeOperations.getModel(artifact).getModule() instanceof TransientModelsModule);
      if ((boolean) BuildLayout_Node__BehaviorDescriptor.exports_id5FtnUVJQES1.invoke(artifact, id)) {
        dependenciesHelper.artifacts().put(id, artifact);
        return artifact;
      }
    }
    return null;
  }
  @NotNull
  public Tuples._2<SNode, String> getResource(SNode path) {
    SNode result = findArtifact(path);
    if (result != null) {
      return MultiTuple.<SNode,String>from(result, "");
    }

    StringBuilder suffix = new StringBuilder();
    SNode current = SNodeOperations.as(path, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x65997a657729f6fbL, "jetbrains.mps.build.structure.BuildRelativePath"));
    if (current != null) {
      suffix.append("/").append(BuildSourcePath__BehaviorDescriptor.getLastSegment_id1bWeed$oUb5.invoke(path, null));
      current = SNodeOperations.as(BuildSourcePath__BehaviorDescriptor.getParent_id7wpYgMyTXsR.invoke(current), MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x65997a657729f6fbL, "jetbrains.mps.build.structure.BuildRelativePath"));
    }
    SNode containingRoot = SNodeOperations.getContainingRoot(path);
    while (current != null) {
      result = findArtifact(new LocalSourcePathArtifact(containingRoot, BuildSourcePath__BehaviorDescriptor.getRelativePath_id4Kip2_918YF.invoke(current), true));
      if (result != null) {
        return MultiTuple.<SNode,String>from(result, suffix.toString());
      }

      suffix.insert(0, BuildSourcePath__BehaviorDescriptor.getLastSegment_id1bWeed$oUb5.invoke(current, null)).insert(0, "/");
      current = SNodeOperations.as(BuildSourcePath__BehaviorDescriptor.getParent_id7wpYgMyTXsR.invoke(current), MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x65997a657729f6fbL, "jetbrains.mps.build.structure.BuildRelativePath"));
    }

    return MultiTuple.<SNode,String>from((SNode) null, (String) null);
  }

  /**
   * 
   * @deprecated VA shall not care about gencontext. There's no direct replacement for the method, just try not to use genContext
   */
  @Deprecated
  public TemplateQueryContext getGenContext() {
    return genContext;
  }
  public static VisibleArtifacts createFor(final SNode project) {
    assert !(SNodeOperations.getModel(project).getModule() instanceof TransientModelsModule);
    return getFromCache(VisibleArtifacts.class, project, new _FunctionTypes._return_P0_E0<VisibleArtifacts>() {
      public VisibleArtifacts invoke() {
        VisibleArtifacts artifacts = new VisibleArtifacts(project, null);
        artifacts.collect();
        return artifacts;
      }
    });
  }
  public static <K, V> V getFromCache(Class clazz, K key, _FunctionTypes._return_P0_E0<? extends V> creator) {
    ConcurrentMap<K, V> cache = ModelAccess.instance().getRepositoryStateCache(clazz.getName());
    if (cache == null) {
      return creator.invoke();
    }

    V v = cache.get(key);
    if (v != null) {
      return v;
    }
    v = creator.invoke();
    cache.putIfAbsent(key, v);
    return v;
  }
}
