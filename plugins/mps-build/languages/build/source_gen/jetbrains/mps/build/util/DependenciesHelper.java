package jetbrains.mps.build.util;

/*Generated by MPS */

import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.generator.TransientModelsModule;

public class DependenciesHelper {
  private final Map<SNode, String> locationMap;
  private final Map<SNode, String> contentLocationMap;
  private final Map<Object, SNode> idToArtifactMap;
  private final Map<SNode, String> requiresFetch;
  protected final MacroHelper macros;
  public DependenciesHelper(@NotNull TemplateQueryContext genContext, SNode project) {
    this.locationMap = GenerationUtil.<SNode,String>getSessionMap(project, genContext, "location");
    this.contentLocationMap = GenerationUtil.<SNode,String>getSessionMap(project, genContext, "contentLocation");
    this.idToArtifactMap = GenerationUtil.<Object,SNode>getSessionMap(project, genContext, "IDToArtifact");
    this.macros = new MacroHelper.MacroContext(project, genContext).getMacros(project);
    this.requiresFetch = GenerationUtil.<SNode,String>getSessionMap(project, genContext, "requiresFetch");
  }
  public Map<SNode, String> locations() {
    return locationMap;
  }
  public Map<SNode, String> contentLocations() {
    return contentLocationMap;
  }
  public Map<Object, SNode> artifacts() {
    return idToArtifactMap;
  }
  public Map<SNode, String> requiresFetch() {
    return requiresFetch;
  }
  public MacroHelper getMacroHelper() {
    return macros;
  }
  public static SNode getOriginalNode(SNode node, TemplateQueryContext genContext) {
    if (SNodeOperations.getModel(node) == null) {
      return node;
    }

    SModule module = SNodeOperations.getModel(node).getModule();
    if (module != null && !((module instanceof TransientModelsModule))) {
      return node;
    }

    if (genContext == null) {
      throw new IllegalStateException("transient model is not expected");
    }

    SNode originalNode = genContext.getOriginalCopiedInputNode(node);
    if ((originalNode == null)) {
      genContext.showErrorMessage(node, "cannot resolve dependency on transient model, no original node is available");
      return null;
    }

    if (SNodeOperations.getModel(originalNode).getModule() instanceof TransientModelsModule) {
      genContext.showErrorMessage(node, "internal error: cannot get original node");
      return null;
    }

    return originalNode;
  }
}
