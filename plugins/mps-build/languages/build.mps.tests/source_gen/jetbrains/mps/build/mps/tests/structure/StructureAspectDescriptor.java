package jetbrains.mps.build.mps.tests.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(5);
  /*package*/ final ConceptDescriptor myConceptBuildModuleTestsPlugin = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.tests.structure.BuildModuleTestsPlugin", MetaIdFactory.conceptId(0x3600cb0a44dd4a5bL, 0x996822924406419eL, 0x37967cbe67d9eca4L)).super_("jetbrains.mps.build.structure.BuildPlugin").super_(MetaIdFactory.conceptId(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x5c3f3e2c1ce9819eL)).parents("jetbrains.mps.build.structure.BuildPlugin", "jetbrains.mps.build.structure.BuildExternalDependency").parentIds(MetaIdFactory.conceptId(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x5c3f3e2c1ce9819eL), MetaIdFactory.conceptId(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0xbabdfbeee1a36a3L)).alias("module-testing", "adds ability to execute module tests to the project").create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsLayout_TestModule = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModule", MetaIdFactory.conceptId(0x3600cb0a44dd4a5bL, 0x996822924406419eL, 0x3f496e80bd8ef372L)).super_("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModules_Content").super_(MetaIdFactory.conceptId(0x3600cb0a44dd4a5bL, 0x996822924406419eL, 0x3f496e80bd8ef371L)).parents("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModules_Content").parentIds(MetaIdFactory.conceptId(0x3600cb0a44dd4a5bL, 0x996822924406419eL, 0x3f496e80bd8ef371L)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x3f496e80bd8ef373L, "module", MetaIdFactory.conceptId(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x2c446791464290f7L), false)).references("module").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsLayout_TestModuleGroup = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModuleGroup", MetaIdFactory.conceptId(0x3600cb0a44dd4a5bL, 0x996822924406419eL, 0x3f496e80bd8ef36bL)).super_("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModules_Content").super_(MetaIdFactory.conceptId(0x3600cb0a44dd4a5bL, 0x996822924406419eL, 0x3f496e80bd8ef371L)).parents("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModules_Content").parentIds(MetaIdFactory.conceptId(0x3600cb0a44dd4a5bL, 0x996822924406419eL, 0x3f496e80bd8ef371L)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x3f496e80bd8ef36cL, "group", MetaIdFactory.conceptId(0xcf935df46994e9cL, 0xa132fa109541cba3L, 0x14d3fb6fb843ebddL), false)).references("group").create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsLayout_TestModules = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModules", MetaIdFactory.conceptId(0x3600cb0a44dd4a5bL, 0x996822924406419eL, 0x3f496e80bd8ef36dL)).super_("jetbrains.mps.build.structure.BuildAspect").super_(MetaIdFactory.conceptId(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x31292e1a60dd541dL)).parents("jetbrains.mps.build.structure.BuildAspect", "jetbrains.mps.build.structure.BuildExternalDependency", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.lang.core.structure.ScopeProvider").parentIds(MetaIdFactory.conceptId(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x31292e1a60dd541dL), MetaIdFactory.conceptId(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0xbabdfbeee1a36a3L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x6402cbb11c1307aeL, "haltonfailure", MetaIdFactory.conceptId(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x3cca41cd0fe51d4fL), true, false, false), new ConceptDescriptorBuilder.Link(0x3f496e80bd8ef370L, "modules", MetaIdFactory.conceptId(0x3600cb0a44dd4a5bL, 0x996822924406419eL, 0x3f496e80bd8ef371L), true, true, false)).children(new String[]{"haltonfailure", "modules"}, new boolean[]{false, true}).alias("test modules", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBuildMpsLayout_TestModules_Content = new ConceptDescriptorBuilder("jetbrains.mps.build.mps.tests.structure.BuildMpsLayout_TestModules_Content", MetaIdFactory.conceptId(0x3600cb0a44dd4a5bL, 0x996822924406419eL, 0x3f496e80bd8ef371L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().staticScope(StaticScope.NONE).create();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptBuildModuleTestsPlugin.getId(), 0);
    myIndexMap.put(myConceptBuildMpsLayout_TestModule.getId(), 1);
    myIndexMap.put(myConceptBuildMpsLayout_TestModuleGroup.getId(), 2);
    myIndexMap.put(myConceptBuildMpsLayout_TestModules.getId(), 3);
    myIndexMap.put(myConceptBuildMpsLayout_TestModules_Content.getId(), 4);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBuildModuleTestsPlugin, myConceptBuildMpsLayout_TestModule, myConceptBuildMpsLayout_TestModuleGroup, myConceptBuildMpsLayout_TestModules, myConceptBuildMpsLayout_TestModules_Content);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptBuildModuleTestsPlugin;
      case 1:
        return myConceptBuildMpsLayout_TestModule;
      case 2:
        return myConceptBuildMpsLayout_TestModuleGroup;
      case 3:
        return myConceptBuildMpsLayout_TestModules;
      case 4:
        return myConceptBuildMpsLayout_TestModules_Content;
      default:
        throw new IllegalStateException();
    }
  }
}
