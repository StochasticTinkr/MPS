package jetbrains.mps.build.mps.runner.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BuildSolutionRunnerAspect;
  private ConceptPresentation props_BuildSolutionRunnerPlugin;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BuildSolutionRunnerAspect:
        if (props_BuildSolutionRunnerAspect == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("run code");
          props_BuildSolutionRunnerAspect = cpb.create();
        }
        return props_BuildSolutionRunnerAspect;
      case LanguageConceptSwitch.BuildSolutionRunnerPlugin:
        if (props_BuildSolutionRunnerPlugin == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("adds ability to run MPS code after build");
          cpb.rawPresentation("mps-runner");
          props_BuildSolutionRunnerPlugin = cpb.create();
        }
        return props_BuildSolutionRunnerPlugin;
    }
    return null;
  }
}
