package jetbrains.mps.build.mps.pluginSolution.plugin;

/*Generated by MPS */

import com.intellij.ide.wizard.StepAdapter;
import javax.swing.JPanel;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import javax.swing.JComponent;
import javax.swing.Icon;
import java.awt.GridBagLayout;
import java.awt.Dimension;
import org.jetbrains.annotations.NotNull;
import javax.swing.JLabel;
import javax.swing.border.EmptyBorder;
import jetbrains.mps.ide.common.LayoutUtil;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EtchedBorder;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.net.URL;
import jetbrains.mps.workbench.MPSApplicationInfo;
import javax.swing.ImageIcon;
import java.awt.image.BufferedImage;
import javax.imageio.ImageIO;
import java.io.IOException;
import org.apache.log4j.Level;
import java.awt.Graphics;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.RenderingHints;

public abstract class AbstractStep extends StepAdapter {
  protected JPanel myMainPanel;
  public AbstractStep() {
  }
  @Override
  public void _init() {
    this.createComponent();
  }
  public GridBagConstraints createConstraint(int row, int wy) {
    GridBagConstraints c = new GridBagConstraints();
    c.fill = GridBagConstraints.HORIZONTAL;
    c.gridx = 0;
    c.gridy = row;
    c.weightx = 1;
    c.weighty = wy;
    c.insets = new Insets(1, 0, 1, 0);
    return c;
  }
  public abstract JComponent createMainComponent();
  public abstract String getDescription();
  @Override
  public JComponent getComponent() {
    this.createComponent();
    return this.myMainPanel;
  }
  @Override
  public Icon getIcon() {
    return null;
  }
  protected void createComponent() {
    if (myMainPanel == null) {

      GridBagLayout layout = new GridBagLayout();
      myMainPanel = new JPanel(layout);

      JComponent imagePanel = createImagePanel();
      GridBagConstraints imageConstraints = new GridBagConstraints();
      imageConstraints.gridx = 0;
      imageConstraints.gridy = 0;
      imageConstraints.gridheight = 1;
      imageConstraints.gridwidth = 1;
      imageConstraints.anchor = GridBagConstraints.NORTHWEST;
      imageConstraints.fill = GridBagConstraints.NONE;
      myMainPanel.add(imagePanel, imageConstraints);

      JPanel stepPanel = createStepPanel();
      GridBagConstraints stepConstraints = new GridBagConstraints();
      stepConstraints.gridx = 1;
      stepConstraints.gridy = 0;
      stepConstraints.gridheight = 1;
      stepConstraints.gridwidth = 1;
      stepConstraints.weightx = 1;
      stepConstraints.anchor = GridBagConstraints.NORTHWEST;
      stepConstraints.fill = GridBagConstraints.BOTH;
      if (doLimitStepPanelHeight()) {
        stepPanel.setPreferredSize(new Dimension(stepPanel.getPreferredSize().width, imagePanel.getPreferredSize().height));
      }
      myMainPanel.add(stepPanel, stepConstraints);
    }
    myMainPanel.doLayout();
  }
  @NotNull
  public String getImageText() {
    return "";
  }
  protected boolean doLimitStepPanelHeight() {
    return false;
  }
  protected JPanel createStepPanel() {
    JPanel stepPanel = new JPanel(new GridBagLayout());
    JLabel label = new JLabel(this.getDescription());
    label.setBorder(new EmptyBorder(5, 2, 10, 2));
    stepPanel.add(label, LayoutUtil.createLabelConstraints(0));
    JComponent mainComponent = this.createMainComponent();
    mainComponent.setBorder(new CompoundBorder(new EtchedBorder(), new EmptyBorder(2, 2, 2, 2)));
    stepPanel.add(mainComponent, LayoutUtil.createLabelConstraints(1));
    stepPanel.add(new JPanel(), LayoutUtil.createPanelConstraints(2));
    return stepPanel;
  }
  protected static Logger LOG = LogManager.getLogger(AbstractStep.class);
  private JComponent createImagePanel() {
    URL imageUrl = MPSApplicationInfo.getInstance().getDialogImageURL();
    String imageText = getImageText();

    ImageIcon info = new ImageIcon(imageUrl);
    BufferedImage bim = null;
    try {
      bim = ImageIO.read(imageUrl);
    } catch (IOException e) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("Can't read image", e);
      }
    }
    assert bim != null : "Icon was not read. The possible reason is that PNG format was not recognized";
    Graphics graphics = bim.getGraphics();
    graphics.setColor(new Color(126, 124, 124));
    graphics.setFont(new Font("Helvetica", Font.BOLD, 15));
    if (graphics instanceof Graphics2D) {
      ((Graphics2D) graphics).setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
    }

    int textWidth = graphics.getFontMetrics().charsWidth(imageText.toCharArray(), 0, imageText.length());
    int x = (info.getIconWidth() - textWidth) / 2;
    int y = 288;
    graphics.drawChars(imageText.toCharArray(), 0, imageText.length(), x, y);
    return new JLabel(new ImageIcon(bim));
  }
}
