package jetbrains.mps.build.mps.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.icons.MPSIcons;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.vfs.VirtualFile;
import com.intellij.openapi.fileChooser.FileChooser;
import com.intellij.openapi.fileChooser.FileChooserDescriptorFactory;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.ide.vfs.VirtualFileUtils;
import org.jetbrains.mps.openapi.module.ModelAccess;
import java.util.Collection;
import jetbrains.mps.library.ModulesMiner;
import jetbrains.mps.build.mps.util.VisibleModules;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.build.mps.util.PathConverter;
import jetbrains.mps.ide.messages.DefaultMessageHandler;
import org.jetbrains.mps.openapi.module.SModuleReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.messages.Message;
import jetbrains.mps.messages.MessageKind;
import jetbrains.mps.build.mps.util.ModuleLoader;

public class ImportAllModulesFromFolder_Action extends BaseAction {
  private static final Icon ICON = MPSIcons.Actions.ImportModulesFromFolder;

  public ImportAllModulesFromFolder_Action() {
    super("Import All Modules from Folder", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node != null && !(SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0x798100da4f0a421aL, 0xb99171f8c50ce5d2L, 0x4df58c6f18f84a13L, "jetbrains.mps.build.structure.BuildProject")))) {
        node = null;
      }
      MapSequence.fromMap(_params).put("node", node);
      if (node == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    VirtualFile chosenDir = FileChooser.chooseFile(FileChooserDescriptorFactory.createSingleFolderDescriptor(), ((MPSProject) MapSequence.fromMap(_params).get("project")).getProject(), ((MPSProject) MapSequence.fromMap(_params).get("project")).getProject().getBaseDir());
    if (chosenDir == null) {
      return;
    }

    final IFile dir = VirtualFileUtils.toIFile(chosenDir);
    ModelAccess modelAccess = ((MPSProject) MapSequence.fromMap(_params).get("project")).getRepository().getModelAccess();
    modelAccess.executeCommandInEDT(new Runnable() {
      public void run() {
        Collection<ModulesMiner.ModuleHandle> modules = new ModulesMiner(((MPSProject) MapSequence.fromMap(_params).get("project")).getPlatform()).collectModules(dir).getCollectedModules();
        VisibleModules visible = new VisibleModules(((SNode) MapSequence.fromMap(_params).get("node")));
        visible.collect();

        List<ImportModuleHelper> helpers = new ArrayList<ImportModuleHelper>();
        final PathConverter pathConverter = new PathConverter(((SNode) MapSequence.fromMap(_params).get("node")));

        DefaultMessageHandler msgHandler = new DefaultMessageHandler(((MPSProject) MapSequence.fromMap(_params).get("project")).getProject());

        for (ModulesMiner.ModuleHandle handle : modules) {
          SModuleReference modRef = handle.getDescriptor().getModuleReference();
          if (visible.resolve(modRef) != null) {
            continue;
          }

          try {
            SNode modulePath = ListSequence.fromList(pathConverter.convertPath(handle.getFile().getPath())).first();
            ImportModuleHelper helper = new ImportModuleHelper(((SNode) MapSequence.fromMap(_params).get("node")), modulePath, handle.getDescriptor());
            helper.create();
            helpers.add(helper);
          } catch (PathConverter.PathConvertException ex) {
            msgHandler.handle(Message.createMessage(MessageKind.ERROR, ImportModuleHelper.class.getName(), ex.getMessage(), ex));
          }
        }

        ModuleLoader ml = new ModuleLoader(((SNode) MapSequence.fromMap(_params).get("node")), null, msgHandler);
        for (ImportModuleHelper helper : helpers) {
          helper.update(ml);
        }
      }
    });
  }
}
