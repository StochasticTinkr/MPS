package jetbrains.mps.build.pluginSolution.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.part.ApplicationPluginPart;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.Deque;
import jetbrains.mps.execution.api.configurations.ConfigTypeEnvoy;
import java.util.ArrayDeque;
import java.util.List;
import com.intellij.execution.junit.RuntimeConfigurationProducer;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import com.intellij.openapi.extensions.ExtensionPoint;
import com.intellij.execution.configurations.ConfigurationType;
import com.intellij.openapi.extensions.Extensions;
import com.intellij.icons.AllIcons;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.apache.log4j.Level;
import com.intellij.util.containers.ContainerUtil;
import java.util.Iterator;

public class RunConfigurationsInitializer_AppPluginPart extends ApplicationPluginPart {
  private static final Logger LOG = LogManager.getLogger(RunConfigurationsInitializer_AppPluginPart.class);
  private Deque<ConfigTypeEnvoy> myRegisteredKinds = new ArrayDeque<ConfigTypeEnvoy>();
  private List<RuntimeConfigurationProducer> myRegisteredProducers = ListSequence.fromList(new ArrayList<RuntimeConfigurationProducer>());
  public RunConfigurationsInitializer_AppPluginPart() {
  }
  @Override
  public void init() {
    // register kinds 
    ExtensionPoint<ConfigurationType> configurationExtensionPoint = Extensions.getRootArea().getExtensionPoint(ConfigurationType.CONFIGURATION_TYPE_EP);
    {
      ConfigTypeEnvoy runConfigurationKind = new ConfigTypeEnvoy("Build Script", AllIcons.RunConfigurations.Application, "Build Script", "Build Script");
      runConfigurationKind.addFactory(new BuildScript_Configuration_Factory(runConfigurationKind));
      RunConfigurationsInitializer_AppPluginPart.this.myRegisteredKinds.add(runConfigurationKind);
      configurationExtensionPoint.registerExtension(runConfigurationKind);
    }

    // add foreign factories 
    _FunctionTypes._return_P1_E0<? extends Class<ConfigurationType>, ? super String> getClassFunction = new _FunctionTypes._return_P1_E0<Class<ConfigurationType>, String>() {
      public Class<ConfigurationType> invoke(String className) {
        try {
          return (Class<ConfigurationType>) getClass().getClassLoader().loadClass(className);
        } catch (ClassNotFoundException cl) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("Can not find configuration type " + className + ". Check languages dependency.", cl);
          }
          return (Class<ConfigurationType>) null;
        }
      }
    };

    // register creators 
    ExtensionPoint<RuntimeConfigurationProducer> producerExtensionPoint = Extensions.getArea(null).getExtensionPoint(RuntimeConfigurationProducer.RUNTIME_CONFIGURATION_PRODUCER);
    {
      ConfigurationType configurationType = ContainerUtil.findInstance(configurationExtensionPoint.getExtensions(), getClassFunction.invoke("jetbrains.mps.build.pluginSolution.plugin.BuildScript_Kind"));
      if (configurationType != null) {
        List<RuntimeConfigurationProducer> configurationProducers = BuildScript_Producer.getProducers(configurationType);
        ListSequence.fromList(RunConfigurationsInitializer_AppPluginPart.this.myRegisteredProducers).addSequence(ListSequence.fromList(configurationProducers));
        for (RuntimeConfigurationProducer producer : ListSequence.fromList(configurationProducers)) {
          producerExtensionPoint.registerExtension(producer);
        }
      }
    }
  }
  @Override
  public void dispose() {
    ExtensionPoint<ConfigurationType> configurationExtensionPoint = Extensions.getRootArea().getExtensionPoint(ConfigurationType.CONFIGURATION_TYPE_EP);
    for (Iterator<ConfigTypeEnvoy> it = RunConfigurationsInitializer_AppPluginPart.this.myRegisteredKinds.descendingIterator(); it.hasNext();) {
      ConfigTypeEnvoy configKind = it.next();
      configKind.invalidate();
      configurationExtensionPoint.unregisterExtension(configKind);
    }
    RunConfigurationsInitializer_AppPluginPart.this.myRegisteredKinds.clear();

    // FIXME why there's no code to unregister 'foreign' configuration factories? 

    ExtensionPoint<RuntimeConfigurationProducer> producerExtensionPoint = Extensions.getRootArea().getExtensionPoint(RuntimeConfigurationProducer.RUNTIME_CONFIGURATION_PRODUCER);
    for (RuntimeConfigurationProducer producer : ListSequence.fromList(RunConfigurationsInitializer_AppPluginPart.this.myRegisteredProducers)) {
      producerExtensionPoint.unregisterExtension(producer);
    }
    ListSequence.fromList(RunConfigurationsInitializer_AppPluginPart.this.myRegisteredProducers).clear();
  }
}
