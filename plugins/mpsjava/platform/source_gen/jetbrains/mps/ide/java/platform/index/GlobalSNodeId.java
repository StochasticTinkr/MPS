package jetbrains.mps.ide.java.platform.index;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class GlobalSNodeId {
  private String myModelReference;
  private String myNodeId;

  /*package*/ GlobalSNodeId(String modelReference, String nodeId) {
    assert modelReference != null;
    assert nodeId != null;
    myModelReference = modelReference;
    myNodeId = nodeId;
  }

  /*package*/ GlobalSNodeId(SNodeReference ptr) {
    this(PersistenceFacade.getInstance().asString(normalize(ptr.getModelReference())), ptr.getNodeId().toString());
  }

  public SNode getNode(SRepository repo) {
    PersistenceFacade pf = PersistenceFacade.getInstance();
    SModelReference sModelReference = pf.createModelReference(getModelReference());
    SModel sModelDescriptor = sModelReference.resolve(repo);
    return (sModelDescriptor == null ? null : sModelDescriptor.getNode(pf.createNodeId(getNodeId())));
  }

  @Override
  public int hashCode() {
    return getNodeId().hashCode();
  }

  @Override
  public boolean equals(Object other) {
    if (other instanceof GlobalSNodeId) {
      GlobalSNodeId otherNodeId = (GlobalSNodeId) other;
      return getModelReference().equals(otherNodeId.getModelReference()) && getNodeId().equals(otherNodeId.getNodeId());
    }
    return false;

  }
  public final String getModelReference() {
    return myModelReference;
  }

  public final String getNodeId() {
    return myNodeId;
  }

  public static GlobalSNodeId createSNodeId(SReference reference) {
    SNodeReference ptr;
    if (reference == null || (ptr = reference.getTargetNodeReference()) == null) {
      return null;
    }
    return new GlobalSNodeId(ptr);
  }

  public static GlobalSNodeId createSNodeId(SNode node) {
    return new GlobalSNodeId(SNodeOperations.getPointer(node));
  }

  private static SModelReference normalize(SModelReference reference) {
    // workaroung for https://youtrack.jetbrains.com/issue/MPS-22385 
    return (reference.getModuleReference() == null || !(reference.getModelId().isGloballyUnique()) ? reference : new jetbrains.mps.smodel.SModelReference(null, reference.getModelId(), reference.getModelName()));
  }
}
