package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.refactoring.framework.IRefactoring;
import jetbrains.mps.ide.platform.refactoring.MoveNodeDialog;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.model.SNodeUtil;

public class MoveStaticFieldExecutable extends MoveStaticMemberExecutable {

  /**
   * Shared between workbench action and plugin MoveContributor
   */
  @Override
  public void execute(final MPSProject project, final SNode target, final IRefactoring refactoring) {
    final SNode whereToMove;
    whereToMove = MoveNodeDialog.getSelectedObject(project.getProject(), target, new MoveNodeDialog.NodeFilter("Select class to move: refactoring can't be applied to selected node") {
      @Override
      public boolean check(SNode selectedObject, SNode nodeToMove, SModel modelOfSelectedObject) {
        return SNodeOperations.isInstanceOf(selectedObject, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier")) && !(ListSequence.fromList(SNodeOperations.getNodeAncestors(nodeToMove, null, false)).contains(selectedObject));
      }
    });

    if (whereToMove == null) {
      return;
    }
    project.getModelAccess().runReadInEDT(new Runnable() {
      @Override
      public void run() {
        if (!(SNodeUtil.isAccessible(target, project.getRepository()))) {
          return;
        }
        if (!(SNodeUtil.isAccessible(whereToMove, project.getRepository()))) {
          return;
        }

        performRefactoring(target, whereToMove, project, refactoring);
      }
    });
  }

}
