package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import jetbrains.mps.ide.platform.actions.core.MoveNodesAction;
import jetbrains.mps.smodel.structure.Extension;
import jetbrains.mps.project.MPSProject;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.MoveStaticFieldRefactoring;

public class MoveStaticField implements MoveNodesAction {

  public static class MoveStaticField_extension extends Extension.Default<MoveNodesAction> {
    public MoveStaticField_extension() {
      super("jetbrains.mps.ide.platform.MoveNodesAction");
    }
    public MoveNodesAction get() {
      return new MoveStaticField();
    }
  }

  public String getName() {
    return "Move Static Field";
  }
  public boolean isApplicable(MPSProject project, final List<SNode> nodes) {
    final Wrappers._boolean result = new Wrappers._boolean();
    project.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        result.value = ListSequence.fromList(nodes).count() == 1 && SNodeOperations.isInstanceOf(ListSequence.fromList(nodes).first(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93c84351fL, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"));
      }
    });
    return result.value;
  }
  public void execute(final MPSProject project, List<SNode> nodes) {
    final SNode target = SNodeOperations.cast(ListSequence.fromList(nodes).first(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93c84351fL, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"));

    MoveStaticFieldExecutable executable = new MoveStaticFieldExecutable();
    final SNode whereToMove = executable.askDestination(project, target);
    if (whereToMove == null) {
      return;
    }
    project.getRepository().getModelAccess().executeCommand(new Runnable() {
      public void run() {
        if (!(SNodeUtil.isAccessible(target, project.getRepository()))) {
          return;
        }
        if (!(SNodeUtil.isAccessible(whereToMove, project.getRepository()))) {
          return;
        }

        MoveStaticFieldRefactoring refactoring = new MoveStaticFieldRefactoring(project.getRepository(), project.getScope(), target, whereToMove);
        // todo: show refactoring view 
        refactoring.doRefactoring();
      }
    });
  }
}
