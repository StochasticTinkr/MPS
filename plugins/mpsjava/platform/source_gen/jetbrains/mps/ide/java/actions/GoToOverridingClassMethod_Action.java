package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.ide.findusages.findalgorithm.finders.IInterfacedFinder;
import jetbrains.mps.ide.findusages.view.FindUtils;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import jetbrains.mps.project.MPSProject;
import com.intellij.featureStatistics.FeatureUsageTracker;
import java.awt.event.InputEvent;
import com.intellij.ui.awt.RelativePoint;
import jetbrains.mps.ide.editor.util.GoToContextMenuHelper;
import jetbrains.mps.ide.editor.util.GoToHelper;
import jetbrains.mps.smodel.ModelAccessHelper;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class GoToOverridingClassMethod_Action extends BaseAction {
  private static final Icon ICON = null;

  public GoToOverridingClassMethod_Action() {
    super("Go to Overriding Methods", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    IInterfacedFinder finder = FindUtils.getFinder("jetbrains.mps.baseLanguage.findUsages.DerivedMethods_Finder");
    return finder != null && finder.isApplicable(((SNode) MapSequence.fromMap(_params).get("methodNode")));
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node != null && !(SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")))) {
        node = null;
      }
      MapSequence.fromMap(_params).put("methodNode", node);
      if (node == null) {
        return false;
      }
    }
    {
      EditorCell p = event.getData(MPSEditorDataKeys.EDITOR_CELL);
      MapSequence.fromMap(_params).put("selectedCell", p);
      if (p == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.gotoImplementation");
    EditorCell selectedCell = ((EditorCell) MapSequence.fromMap(_params).get("selectedCell"));
    InputEvent inputEvent = event.getInputEvent();
    String title = GoToOverridingClassMethod_Action.this.calcTitle(((MPSProject) MapSequence.fromMap(_params).get("project")), ((SNode) MapSequence.fromMap(_params).get("methodNode")), _params);
    RelativePoint relativePoint = GoToContextMenuHelper.getRelativePoint(selectedCell, inputEvent);
    GoToHelper.showPopupAndSearchNodeInBackground(((SNode) MapSequence.fromMap(_params).get("methodNode")), ((MPSProject) MapSequence.fromMap(_params).get("project")), title, FindUtils.getFinder("jetbrains.mps.baseLanguage.findUsages.DerivedMethods_Finder"), relativePoint);
  }
  private String calcTitle(final MPSProject mpsProject, final SNode node, final Map<String, Object> _params) {
    return new ModelAccessHelper(mpsProject.getRepository()).runReadAction(new Computable<String>() {
      public String compute() {
        return "Choose an overridden method of '" + SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "()' to navigate to";
      }
    });
  }
}
