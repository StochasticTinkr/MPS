package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import com.intellij.openapi.components.Storage;
import com.intellij.openapi.components.StoragePathMacros;
import com.intellij.openapi.components.ProjectComponent;
import com.intellij.openapi.components.PersistentStateComponent;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.MPSCoreComponents;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;

@com.intellij.openapi.components.State(name = "OverrideImplementMethodComponent", storages = @Storage(value = StoragePathMacros.WORKSPACE_FILE)
)
public class OverrideImplementMethodComponent implements ProjectComponent, PersistentStateComponent<OverrideImplementMethodComponent.State> {
  private OverrideImplementMethodComponent.State myState;
  public OverrideImplementMethodComponent(Project project, MPSCoreComponents coreComponents) {
  }
  @Override
  public void projectOpened() {
  }
  @NonNls
  @NotNull
  @Override
  public String getComponentName() {
    return "OverrideImplementMethodComponent";
  }
  @Override
  public void disposeComponent() {
    myState = null;
  }
  @Override
  public void initComponent() {
    if (myState == null) {
      myState = new OverrideImplementMethodComponent.State();
    }
  }
  @Override
  public void loadState(OverrideImplementMethodComponent.State state) {
    myState = state;
  }
  @Override
  public OverrideImplementMethodComponent.State getState() {
    return myState;
  }
  @Override
  public void projectClosed() {
  }
  public static class State {
    public boolean addReturnsOnImplement = false;
    public boolean addOverrideAnnotation = true;
    public boolean removeAttributes = true;
    public State() {
    }
  }
}
