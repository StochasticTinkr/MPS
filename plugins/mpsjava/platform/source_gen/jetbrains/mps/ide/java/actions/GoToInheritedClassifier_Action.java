package jetbrains.mps.ide.java.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.ide.editor.MPSEditorDataKeys;
import jetbrains.mps.openapi.editor.EditorContext;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.module.ModelAccess;
import com.intellij.featureStatistics.FeatureUsageTracker;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import java.util.Set;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.progress.Task;
import com.intellij.openapi.progress.PerformInBackgroundOption;
import com.intellij.openapi.progress.ProgressIndicator;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.progress.ProgressMonitorAdapter;
import jetbrains.mps.project.GlobalScope;
import java.util.function.Consumer;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import com.intellij.ui.awt.RelativePoint;
import jetbrains.mps.ide.editor.util.GoToContextMenuHelper;
import jetbrains.mps.ide.editor.util.CaptionFunction;
import jetbrains.mps.ide.editor.util.renderer.DefaultNodeRenderer;
import com.intellij.openapi.progress.ProgressManager;
import com.intellij.openapi.progress.impl.BackgroundableProcessIndicator;

public class GoToInheritedClassifier_Action extends BaseAction {
  private static final Icon ICON = null;

  public GoToInheritedClassifier_Action() {
    super("Go to Inherited Classifiers", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    return SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get("classifierNode")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept")) || SNodeOperations.isInstanceOf(((SNode) MapSequence.fromMap(_params).get("classifierNode")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101edd46144L, "jetbrains.mps.baseLanguage.structure.Interface"));
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node != null && !(SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier")))) {
        node = null;
      }
      MapSequence.fromMap(_params).put("classifierNode", node);
      if (node == null) {
        return false;
      }
    }
    {
      EditorCell p = event.getData(MPSEditorDataKeys.EDITOR_CELL);
      MapSequence.fromMap(_params).put("selectedCell", p);
      if (p == null) {
        return false;
      }
    }
    {
      EditorContext p = event.getData(MPSEditorDataKeys.EDITOR_CONTEXT);
      MapSequence.fromMap(_params).put("editorContext", p);
      if (p == null) {
        return false;
      }
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("mpsProject", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final SNode classifier = ((SNode) MapSequence.fromMap(_params).get("classifierNode"));
    final ModelAccess modelAccess = ((EditorContext) MapSequence.fromMap(_params).get("editorContext")).getRepository().getModelAccess();
    FeatureUsageTracker.getInstance().triggerFeatureUsed("navigation.gotoImplementation");
    final Wrappers._boolean isInterface = new Wrappers._boolean();
    modelAccess.runReadAction(new Runnable() {
      public void run() {
        if (SNodeOperations.isInstanceOf(classifier, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"))) {
          isInterface.value = true;
        } else {
          isInterface.value = false;
        }
      }
    });

    final Set<SNodeReference> nodes = SetSequence.fromSet(new HashSet<SNodeReference>());

    Task.Backgroundable task = new Task.Backgroundable(((Project) MapSequence.fromMap(_params).get("project")), "Searching...", true, PerformInBackgroundOption.ALWAYS_BACKGROUND) {
      @Override
      public void run(@NotNull final ProgressIndicator indicator) {
        modelAccess.runReadAction(new Runnable() {
          public void run() {
            final List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
            if (isInterface.value) {
              SearchResults results = FindUtils.getSearchResults(new ProgressMonitorAdapter(indicator), classifier, new GlobalScope(((EditorContext) MapSequence.fromMap(_params).get("editorContext")).getRepository()), "jetbrains.mps.baseLanguage.findUsages.DerivedClasses_Finder");
              results.getSearchResults().forEach(new Consumer<SearchResult<Object>>() {
                public void accept(SearchResult<Object> searchResult) {
                  ListSequence.fromList(result).addElement((SNode) searchResult.getObject());
                }
              });
            } else {
              SearchResults results1 = FindUtils.getSearchResults(new ProgressMonitorAdapter(indicator), classifier, new GlobalScope(((EditorContext) MapSequence.fromMap(_params).get("editorContext")).getRepository()), "jetbrains.mps.baseLanguage.findUsages.ImplementingClasses_Finder");
              results1.getSearchResults().forEach(new Consumer<SearchResult<Object>>() {
                public void accept(SearchResult<Object> searchResult) {
                  ListSequence.fromList(result).addElement((SNode) searchResult.getObject());
                }
              });
              SearchResults results2 = FindUtils.getSearchResults(new ProgressMonitorAdapter(indicator), classifier, new GlobalScope(((EditorContext) MapSequence.fromMap(_params).get("editorContext")).getRepository()), "jetbrains.mps.baseLanguage.findUsages.DerivedInterfaces_Finder");
              results2.getSearchResults().forEach(new Consumer<SearchResult<Object>>() {
                public void accept(SearchResult<Object> searchResult) {
                  ListSequence.fromList(result).addElement((SNode) searchResult.getObject());
                }
              });
            }
            SetSequence.fromSet(nodes).addSequence(ListSequence.fromList(result).select(new ISelector<SNode, SNodePointer>() {
              public SNodePointer select(SNode it) {
                return new SNodePointer(it);
              }
            }));
            SetSequence.fromSet(nodes).addSequence(ListSequence.fromList(result).where(new IWhereFilter<SNode>() {
              public boolean accept(SNode it) {
                return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367070a5L, "jetbrains.mps.baseLanguage.structure.EnumClass"));
              }
            }).translate(new ITranslator2<SNode, SNodePointer>() {
              public Iterable<SNodePointer> translate(SNode it) {
                return ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367070a5L, "jetbrains.mps.baseLanguage.structure.EnumClass")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367070a5L, 0xfc367503acL, "enumConstant"))).select(new ISelector<SNode, SNodePointer>() {
                  public SNodePointer select(SNode e) {
                    return new SNodePointer(e);
                  }
                });
              }
            }));
          }
        });
      }

      @Override
      public void onSuccess() {
        RelativePoint relativePoint = GoToContextMenuHelper.getRelativePoint(((EditorCell) MapSequence.fromMap(_params).get("selectedCell")), event.getInputEvent());
        CaptionFunction title = new CaptionFunction() {
          public String caption(int usagesFound, boolean finished) {
            return "Choose an inherited class to navigate to";
          }
        };
        new GoToContextMenuHelper(((MPSProject) MapSequence.fromMap(_params).get("mpsProject")), title, new DefaultNodeRenderer(((MPSProject) MapSequence.fromMap(_params).get("mpsProject")).getRepository())).showMenuWithNodes(SetSequence.fromSet(nodes).toListSequence(), relativePoint);
      }
    };
    ProgressManager.getInstance().runProcessWithProgressAsynchronously(task, new BackgroundableProcessIndicator(task));
  }
}
