package jetbrains.mps.ide.mpsmigration.v34;

/*Generated by MPS */

import jetbrains.mps.migration.global.BaseProjectMigration;
import jetbrains.mps.project.Project;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.compiler.CompilerSettingsComponent;
import jetbrains.mps.compiler.JavaCompilerOptionsComponent;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;

public class ProjectJavaVersionMigration_JDKDefault extends BaseProjectMigration {
  public static final String ID = "jetbrains.mps.javaVersionMigration_JDKDefault";
  public ProjectJavaVersionMigration_JDKDefault() {
    super(ID);
  }
  public boolean doExecute(Project project) {
    MPSProject mpsProject = ((MPSProject) project);
    if (mpsProject == null) {
      return false;
    }
    com.intellij.openapi.project.Project ideaProject = mpsProject.getProject();
    if (!((eq_h13tkv_a0a0d0c(CompilerSettingsComponent.getInstance(ideaProject).getState().getTargetVersion(), JavaCompilerOptionsComponent.JavaVersion.VERSION_1_6.getCompilerVersion())))) {
      return true;
    }
    CompilerSettingsComponent.CompilerState state = new CompilerSettingsComponent.CompilerState();
    state.setTargetVersion(null);
    CompilerSettingsComponent.getInstance(ideaProject).loadState(state);
    return true;
  }
  public String getDescription() {
    return "Set project java version to JDK Default";
  }
  @NonNls
  @NotNull
  public String getComponentName() {
    return "Java Version Migration JDK Default";
  }

  private static boolean eq_h13tkv_a0a0d0c(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
