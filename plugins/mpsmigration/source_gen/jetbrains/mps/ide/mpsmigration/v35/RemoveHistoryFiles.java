package jetbrains.mps.ide.mpsmigration.v35;

/*Generated by MPS */

import jetbrains.mps.migration.global.BaseProjectMigration;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.lang.smodel.query.runtime.CommandUtil;
import jetbrains.mps.lang.smodel.query.runtime.QueryExecutionContext;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.extapi.model.SModelBase;
import jetbrains.mps.internal.collections.runtime.ISelector;
import org.jetbrains.mps.openapi.persistence.DataSource;
import jetbrains.mps.extapi.persistence.FileDataSource;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.project.MPSExtentions;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class RemoveHistoryFiles extends BaseProjectMigration {
  public RemoveHistoryFiles() {
    super(RemoveHistoryFiles.class.getName());
  }
  @Override
  public boolean doExecute(Project project) {
    {
      final SearchScope scope = CommandUtil.createScope(project);
      QueryExecutionContext context = new QueryExecutionContext() {
        public SearchScope getDefaultSearchScope() {
          return scope;
        }
      };
      Iterable<IFile> modelFiles = Sequence.fromIterable(CommandUtil.models(CommandUtil.createConsoleScope(null, false, context))).ofType(SModelBase.class).select(new ISelector<SModelBase, DataSource>() {
        public DataSource select(SModelBase it) {
          return it.getSource();
        }
      }).ofType(FileDataSource.class).select(new ISelector<FileDataSource, IFile>() {
        public IFile select(FileDataSource it) {
          return it.getFile();
        }
      }).where(new IWhereFilter<IFile>() {
        public boolean accept(IFile it) {
          return it.getName().endsWith(MPSExtentions.DOT_MODEL);
        }
      });
      Sequence.fromIterable(modelFiles).visitAll(new IVisitor<IFile>() {
        public void visit(IFile it) {

          String name = it.getName();
          String histName = name.substring(0, name.lastIndexOf(MPSExtentions.DOT_MODEL)) + ".history";
          IFile histFile = it.getParent().getDescendant(histName);
          if (histFile == null) {
            return;
          }
          histFile.delete();
        }
      });
    }
    return true;
  }
  @Override
  public String getDescription() {
    return "Remove .history Files";
  }
}
