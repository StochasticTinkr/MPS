package jetbrains.mps.execution.api.configurations;

/*Generated by MPS */

import com.intellij.execution.configurations.RunConfigurationBase;
import com.intellij.execution.configurations.LocatableConfiguration;
import com.intellij.openapi.project.Project;
import com.intellij.execution.configurations.ConfigurationFactory;
import com.intellij.execution.executors.DefaultRunExecutor;

public abstract class BaseMpsRunConfiguration extends RunConfigurationBase implements LocatableConfiguration {
  public BaseMpsRunConfiguration(Project project, ConfigurationFactory factory, String name) {
    super(project, factory, name);
  }
  public boolean canExecute(String executorId) {
    return DefaultRunExecutor.EXECUTOR_ID.equals(executorId);
  }
  @Override
  public boolean isGeneratedName() {
    return true;
  }
  @Override
  public String suggestedName() {
    String name = getName();
    if (name == null) {
      return this.getClass().toString();
    }
    return name;
  }

  /**
   * MPS plugin part manages validity of configuration factories it provides according to MPS module/plugin/class reloading events.
   * When invalid, run configuration shall assume its classes are about to be disposed and its classloader is likely already non-functional.
   */
  protected final boolean isValid() {
    ConfigurationFactory factory = getFactory();
    if (factory instanceof ConfigFactoryEnvoy) {
      return ((ConfigFactoryEnvoy) factory).isValid();
    }
    return true;
  }
}
