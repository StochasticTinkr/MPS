package jetbrains.mps.execution.settings.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ApplyTo_Function;
  private ConceptPresentation props_CheckProperitesOperation;
  private ConceptPresentation props_CheckProperties_Function;
  private ConceptPresentation props_Configuration_Parameter;
  private ConceptPresentation props_CreateEditor_Function;
  private ConceptPresentation props_DeprecatedAnnotation;
  private ConceptPresentation props_Dispose_Function;
  private ConceptPresentation props_EditorExpression;
  private ConceptPresentation props_EditorOperationCall;
  private ConceptPresentation props_EditorOperationDeclaration;
  private ConceptPresentation props_EditorPropertyDeclaration;
  private ConceptPresentation props_EditorPropertyReference;
  private ConceptPresentation props_GetEditorOperation;
  private ConceptPresentation props_GridBagConstraints;
  private ConceptPresentation props_IPersistentPropertyHolder;
  private ConceptPresentation props_PersistentConfiguration;
  private ConceptPresentation props_PersistentConfigurationAssistent;
  private ConceptPresentation props_PersistentConfigurationMethod;
  private ConceptPresentation props_PersistentConfigurationTemplate;
  private ConceptPresentation props_PersistentConfigurationTemplateInitializer;
  private ConceptPresentation props_PersistentConfigurationType;
  private ConceptPresentation props_PersistentPropertyDeclaration;
  private ConceptPresentation props_PersistentPropertyReferenceOperation;
  private ConceptPresentation props_ProjectAccessExpression;
  private ConceptPresentation props_ReportConfigurationErrorStatement;
  private ConceptPresentation props_ResetFrom_Function;
  private ConceptPresentation props_SettingsEditor;
  private ConceptPresentation props_SettingsEditorType;
  private ConceptPresentation props_TemplateParameter;
  private ConceptPresentation props_TemplateParameterReference;
  private ConceptPresentation props_TemplatePersistentConfigurationType;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ApplyTo_Function:
        if (props_ApplyTo_Function == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("apply to");
          props_ApplyTo_Function = cpb.create();
        }
        return props_ApplyTo_Function;
      case LanguageConceptSwitch.CheckProperitesOperation:
        if (props_CheckProperitesOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("check configuration");
          props_CheckProperitesOperation = cpb.create();
        }
        return props_CheckProperitesOperation;
      case LanguageConceptSwitch.CheckProperties_Function:
        if (props_CheckProperties_Function == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CheckProperties_Function = cpb.create();
        }
        return props_CheckProperties_Function;
      case LanguageConceptSwitch.Configuration_Parameter:
        if (props_Configuration_Parameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("configuration");
          props_Configuration_Parameter = cpb.create();
        }
        return props_Configuration_Parameter;
      case LanguageConceptSwitch.CreateEditor_Function:
        if (props_CreateEditor_Function == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("create");
          props_CreateEditor_Function = cpb.create();
        }
        return props_CreateEditor_Function;
      case LanguageConceptSwitch.DeprecatedAnnotation:
        if (props_DeprecatedAnnotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DeprecatedAnnotation");
          props_DeprecatedAnnotation = cpb.create();
        }
        return props_DeprecatedAnnotation;
      case LanguageConceptSwitch.Dispose_Function:
        if (props_Dispose_Function == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("dispose");
          props_Dispose_Function = cpb.create();
        }
        return props_Dispose_Function;
      case LanguageConceptSwitch.EditorExpression:
        if (props_EditorExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("editor");
          props_EditorExpression = cpb.create();
        }
        return props_EditorExpression;
      case LanguageConceptSwitch.EditorOperationCall:
        if (props_EditorOperationCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91012eL);
          cpb.presentationByReference(0xd244b712f910131L, "editorOperationDeclaration", "", "");
          props_EditorOperationCall = cpb.create();
        }
        return props_EditorOperationCall;
      case LanguageConceptSwitch.EditorOperationDeclaration:
        if (props_EditorOperationDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EditorOperationDeclaration = cpb.create();
        }
        return props_EditorOperationDeclaration;
      case LanguageConceptSwitch.EditorPropertyDeclaration:
        if (props_EditorPropertyDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EditorPropertyDeclaration = cpb.create();
        }
        return props_EditorPropertyDeclaration;
      case LanguageConceptSwitch.EditorPropertyReference:
        if (props_EditorPropertyReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910133L);
          cpb.presentationByReference(0xf8cc6bf960L, "variableDeclaration", "", "");
          props_EditorPropertyReference = cpb.create();
        }
        return props_EditorPropertyReference;
      case LanguageConceptSwitch.GetEditorOperation:
        if (props_GetEditorOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("editor");
          props_GetEditorOperation = cpb.create();
        }
        return props_GetEditorOperation;
      case LanguageConceptSwitch.GridBagConstraints:
        if (props_GridBagConstraints == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("grid bag constraints");
          props_GridBagConstraints = cpb.create();
        }
        return props_GridBagConstraints;
      case LanguageConceptSwitch.IPersistentPropertyHolder:
        if (props_IPersistentPropertyHolder == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IPersistentPropertyHolder = cpb.create();
        }
        return props_IPersistentPropertyHolder;
      case LanguageConceptSwitch.PersistentConfiguration:
        if (props_PersistentConfiguration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PersistentConfiguration = cpb.create();
        }
        return props_PersistentConfiguration;
      case LanguageConceptSwitch.PersistentConfigurationAssistent:
        if (props_PersistentConfigurationAssistent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PersistentConfigurationAssistent = cpb.create();
        }
        return props_PersistentConfigurationAssistent;
      case LanguageConceptSwitch.PersistentConfigurationMethod:
        if (props_PersistentConfigurationMethod == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PersistentConfigurationMethod = cpb.create();
        }
        return props_PersistentConfigurationMethod;
      case LanguageConceptSwitch.PersistentConfigurationTemplate:
        if (props_PersistentConfigurationTemplate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PersistentConfigurationTemplate = cpb.create();
        }
        return props_PersistentConfigurationTemplate;
      case LanguageConceptSwitch.PersistentConfigurationTemplateInitializer:
        if (props_PersistentConfigurationTemplateInitializer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910116L);
          cpb.presentationByReference(0xd244b712f910117L, "template", "", "");
          props_PersistentConfigurationTemplateInitializer = cpb.create();
        }
        return props_PersistentConfigurationTemplateInitializer;
      case LanguageConceptSwitch.PersistentConfigurationType:
        if (props_PersistentConfigurationType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("persistent configuration type");
          cpb.rawPresentation("configuration");
          props_PersistentConfigurationType = cpb.create();
        }
        return props_PersistentConfigurationType;
      case LanguageConceptSwitch.PersistentPropertyDeclaration:
        if (props_PersistentPropertyDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PersistentPropertyDeclaration = cpb.create();
        }
        return props_PersistentPropertyDeclaration;
      case LanguageConceptSwitch.PersistentPropertyReferenceOperation:
        if (props_PersistentPropertyReferenceOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91010eL);
          cpb.shortDesc("persistent property reference");
          cpb.presentationByReference(0xd244b712f91010fL, "variableDeclaration", "", "");
          props_PersistentPropertyReferenceOperation = cpb.create();
        }
        return props_PersistentPropertyReferenceOperation;
      case LanguageConceptSwitch.ProjectAccessExpression:
        if (props_ProjectAccessExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("project");
          props_ProjectAccessExpression = cpb.create();
        }
        return props_ProjectAccessExpression;
      case LanguageConceptSwitch.ReportConfigurationErrorStatement:
        if (props_ReportConfigurationErrorStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("report error");
          props_ReportConfigurationErrorStatement = cpb.create();
        }
        return props_ReportConfigurationErrorStatement;
      case LanguageConceptSwitch.ResetFrom_Function:
        if (props_ResetFrom_Function == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("reset from");
          props_ResetFrom_Function = cpb.create();
        }
        return props_ResetFrom_Function;
      case LanguageConceptSwitch.SettingsEditor:
        if (props_SettingsEditor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SettingsEditor");
          props_SettingsEditor = cpb.create();
        }
        return props_SettingsEditor;
      case LanguageConceptSwitch.SettingsEditorType:
        if (props_SettingsEditorType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("editor");
          props_SettingsEditorType = cpb.create();
        }
        return props_SettingsEditorType;
      case LanguageConceptSwitch.TemplateParameter:
        if (props_TemplateParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_TemplateParameter = cpb.create();
        }
        return props_TemplateParameter;
      case LanguageConceptSwitch.TemplateParameterReference:
        if (props_TemplateParameterReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910101L);
          cpb.presentationByReference(0xf8cc6bf960L, "variableDeclaration", "", "");
          props_TemplateParameterReference = cpb.create();
        }
        return props_TemplateParameterReference;
      case LanguageConceptSwitch.TemplatePersistentConfigurationType:
        if (props_TemplatePersistentConfigurationType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("template configuration reference");
          cpb.rawPresentation("template configuration");
          props_TemplatePersistentConfigurationType = cpb.create();
        }
        return props_TemplatePersistentConfigurationType;
    }
    return null;
  }
}
