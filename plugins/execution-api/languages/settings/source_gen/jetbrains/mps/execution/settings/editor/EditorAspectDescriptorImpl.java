package jetbrains.mps.execution.settings.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new CheckProperitesOperation_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new DeprecatedAnnotation_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new EditorExpression_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new EditorOperationCall_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new EditorPropertyDeclaration_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new EditorPropertyReference_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new GetEditorOperation_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new GridBagConstraints_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new PersistentConfiguration_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new PersistentConfigurationTemplate_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new PersistentConfigurationTemplateInitializer_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new PersistentConfigurationType_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new PersistentPropertyDeclaration_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new PersistentPropertyReferenceOperation_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new ReportConfigurationErrorStatement_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new SettingsEditor_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new SettingsEditorType_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new TemplateParameter_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new TemplateParameterReference_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new TemplatePersistentConfigurationType_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0a1a2, editorComponentId)) {
            case 0:
              return Collections.<ConceptEditorComponent>singletonList(new EditorComponent());
            case 1:
              return Collections.<ConceptEditorComponent>singletonList(new PersistentMethodsComponent());
            case 2:
              return Collections.<ConceptEditorComponent>singletonList(new PersistentPropertiesComponent());
            default:
              return Collections.<ConceptEditorComponent>emptyList();
          }
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }

  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new EditorOperationCall_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new EditorPropertyReference_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new PersistentConfigurationTemplateInitializer_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new PersistentPropertyReferenceOperation_SubstituteMenu());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new TemplateParameterReference_SubstituteMenu());
      case 5:
        return Collections.<SubstituteMenu>singletonList(new PersistentConfigurationType_Contribution());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91011fL), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0x7f8de21e263f5819L), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91011cL), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91012eL), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910132L), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910133L), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0x4a75ebd58602caa5L), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0x25c8b83a7e4bb488L), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910020L), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910113L), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910116L), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91001cL), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910119L), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91010eL), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910103L), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91013dL), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91013aL), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91011aL), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910101L), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f9100fdL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910020L)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91012eL), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910133L), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910116L), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91010eL), MetaIdFactory.conceptId(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f910101L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).seal();
  private static String[] stringSwitchCases_xbvbvu_a0a0a0a1a2 = new String[]{"jetbrains.mps.execution.settings.editor.EditorComponent", "jetbrains.mps.execution.settings.editor.PersistentMethodsComponent", "jetbrains.mps.execution.settings.editor.PersistentPropertiesComponent"};
}
