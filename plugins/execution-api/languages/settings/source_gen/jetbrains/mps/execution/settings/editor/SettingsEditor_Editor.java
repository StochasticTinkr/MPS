package jetbrains.mps.execution.settings.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellProviders.AbstractCellListHandler;
import jetbrains.mps.nodeEditor.cellLayout.CellLayout_Vertical;
import jetbrains.mps.lang.editor.cellProviders.RefNodeListHandler;
import jetbrains.mps.smodel.action.NodeFactoryManager;
import jetbrains.mps.openapi.editor.menus.transformation.MenuLookup;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SLanguage;
import java.util.Collections;
import jetbrains.mps.lang.editor.menus.transformation.DefaultEmptyCellMenu;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cellMenu.OldNewCompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.OldChildNodeSubstituteInfoHolder;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import org.jetbrains.mps.openapi.language.SContainmentLink;

public class SettingsEditor_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_2l0ivi_a(editorContext, node);
  }
  private EditorCell createCollection_2l0ivi_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_2l0ivi_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createRefNodeList_2l0ivi_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_2l0ivi_b0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_2l0ivi_c0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_2l0ivi_d0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_2l0ivi_e0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_2l0ivi_f0(editorContext, node));
    return editorCell;
  }
  private EditorCell createRefNodeList_2l0ivi_a0(EditorContext editorContext, SNode node) {
    AbstractCellListHandler handler = new SettingsEditor_Editor.propertyDeclarationListHandler_2l0ivi_a0(node, "propertyDeclaration", editorContext);
    EditorCell_Collection editorCell = handler.createCells(editorContext, new CellLayout_Vertical(), false);
    editorCell.setCellId("refNodeList_propertyDeclaration");
    editorCell.setRole(handler.getElementRole());
    return editorCell;
  }
  private static class propertyDeclarationListHandler_2l0ivi_a0 extends RefNodeListHandler {
    public propertyDeclarationListHandler_2l0ivi_a0(SNode ownerNode, String childRole, EditorContext context) {
      super(ownerNode, childRole, context, false);
    }
    public SNode createNodeToInsert(EditorContext editorContext) {
      SNode listOwner = super.getOwner();
      return NodeFactoryManager.createNode(listOwner, editorContext, super.getElementRole());
    }
    public EditorCell createNodeCell(EditorContext editorContext, SNode elementNode) {
      EditorCell elementCell = super.createNodeCell(editorContext, elementNode);
      this.installElementCellActions(this.getOwner(), elementNode, elementCell, editorContext);
      return elementCell;
    }
    public EditorCell createEmptyCell(EditorContext editorContext) {
      EditorCell emptyCell = null;
      emptyCell = super.createEmptyCell(editorContext);
      this.installElementCellActions(super.getOwner(), null, emptyCell, editorContext);
      emptyCell.setTransformationMenuLookup(new MenuLookup<TransformationMenu>() {
        public Collection<TransformationMenu> lookup(@NotNull Collection<SLanguage> p0) {
          return Collections.<TransformationMenu>singleton(new DefaultEmptyCellMenu(MetaAdapterFactory.getContainmentLink(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91013dL, 0xd244b712f910142L, "propertyDeclaration")));
        }
      });
      return emptyCell;
    }
    public void installElementCellActions(SNode listOwner, SNode elementNode, EditorCell elementCell, EditorContext editorContext) {
      if (elementCell.getUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET) == null) {
        elementCell.putUserObject(AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET, AbstractCellListHandler.ELEMENT_CELL_ACTIONS_SET);
        if (elementNode != null) {
          elementCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.FORWARD));
          elementCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(elementNode, CellAction_DeleteNode.DeleteDirection.BACKWARD));
        }
        elementCell.setSubstituteInfo(new OldNewCompositeSubstituteInfo(myEditorContext, new SChildSubstituteInfo(elementCell), new OldChildNodeSubstituteInfoHolder(new DefaultChildSubstituteInfo(myOwnerNode, elementNode, super.getLinkDeclaration(), myEditorContext))));
      }
    }
  }
  private EditorCell createConstant_2l0ivi_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_2l0ivi_b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_2l0ivi_c0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new SettingsEditor_Editor.createEditorSingleRoleHandler_2l0ivi_c0(node, MetaAdapterFactory.getContainmentLink(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91013dL, 0xd244b712f91013eL, "createEditor"), editorContext);
    return provider.createCell();
  }
  private class createEditorSingleRoleHandler_2l0ivi_c0 extends SingleRoleCellProvider {
    public createEditorSingleRoleHandler_2l0ivi_c0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new OldNewCompositeSubstituteInfo(myEditorContext, new SChildSubstituteInfo(editorCell), new OldChildNodeSubstituteInfoHolder(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext))));
      if (editorCell.getRole() == null) {
        editorCell.setRole("createEditor");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_createEditor");
      installCellInfo(null, editorCell);

      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no createEditor>";
    }
  }
  private EditorCell createRefNode_2l0ivi_d0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new SettingsEditor_Editor.resetFromSingleRoleHandler_2l0ivi_d0(node, MetaAdapterFactory.getContainmentLink(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91013dL, 0xd244b712f910140L, "resetFrom"), editorContext);
    return provider.createCell();
  }
  private class resetFromSingleRoleHandler_2l0ivi_d0 extends SingleRoleCellProvider {
    public resetFromSingleRoleHandler_2l0ivi_d0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new OldNewCompositeSubstituteInfo(myEditorContext, new SChildSubstituteInfo(editorCell), new OldChildNodeSubstituteInfoHolder(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext))));
      if (editorCell.getRole() == null) {
        editorCell.setRole("resetFrom");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_resetFrom");
      installCellInfo(null, editorCell);

      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no resetFrom>";
    }
  }
  private EditorCell createRefNode_2l0ivi_e0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new SettingsEditor_Editor.applyToSingleRoleHandler_2l0ivi_e0(node, MetaAdapterFactory.getContainmentLink(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91013dL, 0xd244b712f91013fL, "applyTo"), editorContext);
    return provider.createCell();
  }
  private class applyToSingleRoleHandler_2l0ivi_e0 extends SingleRoleCellProvider {
    public applyToSingleRoleHandler_2l0ivi_e0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new OldNewCompositeSubstituteInfo(myEditorContext, new SChildSubstituteInfo(editorCell), new OldChildNodeSubstituteInfoHolder(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext))));
      if (editorCell.getRole() == null) {
        editorCell.setRole("applyTo");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_applyTo");
      installCellInfo(null, editorCell);

      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no applyTo>";
    }
  }
  private EditorCell createRefNode_2l0ivi_f0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new SettingsEditor_Editor.disposeSingleRoleHandler_2l0ivi_f0(node, MetaAdapterFactory.getContainmentLink(0x756e911c3f1f4a48L, 0xbdf5a2ceb91b723cL, 0xd244b712f91013dL, 0xd244b712f910141L, "dispose"), editorContext);
    return provider.createCell();
  }
  private class disposeSingleRoleHandler_2l0ivi_f0 extends SingleRoleCellProvider {
    public disposeSingleRoleHandler_2l0ivi_f0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new OldNewCompositeSubstituteInfo(myEditorContext, new SChildSubstituteInfo(editorCell), new OldChildNodeSubstituteInfoHolder(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext))));
      if (editorCell.getRole() == null) {
        editorCell.setRole("dispose");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_dispose");
      installCellInfo(null, editorCell);

      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no dispose>";
    }
  }
}
