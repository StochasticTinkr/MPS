package jetbrains.mps.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.navigation.NavigationProvider;
import jetbrains.mps.project.MPSProject;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.rmi.RemoteException;
import jetbrains.mps.ide.ThreadUtils;
import com.intellij.openapi.application.ApplicationManager;
import java.io.File;

public class IdeaNavigationProvider implements NavigationProvider {
  public IdeaNavigationProvider() {
  }

  @Override
  public boolean canNavigate(MPSProject p, SNode node) {
    SModelReference ref = SModelOperations.getPointer(SNodeOperations.getModel(node));
    boolean isClassifier = SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
    boolean isConstructor = SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration"));
    boolean isMethod = SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
    boolean isField = (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca68L, "jetbrains.mps.baseLanguage.structure.FieldDeclaration")) || SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93c84351fL, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"))) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
    return isClassifier || isConstructor || isMethod || isField;
  }

  private String getClassifierName(SNode targetNode, SModelReference ref) {
    SNode classifier = SNodeOperations.cast(SNodeOperations.getParent(targetNode), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
    assert classifier != null;
    return ref.getName().getLongName() + '.' + SPropertyOperations.getString(classifier, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
  }

  @Override
  public boolean navigate(MPSProject p, SNode node) {
    SModelReference ref = SModelOperations.getPointer(SNodeOperations.getModel(node));
    boolean isClassifier = SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
    boolean isConstructor = SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration"));
    boolean isMethod = SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
    boolean isField = (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca68L, "jetbrains.mps.baseLanguage.structure.FieldDeclaration")) || SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93c84351fL, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"))) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
    assert isClassifier || isConstructor || isMethod || isField;

    boolean opened = false;
    final String projectPath = check_3kmw26_a0i0g(p.getProjectFile());
    if (isClassifier) {
      String fqName = SModelOperations.getModelName(SNodeOperations.getModel(node)) + '.' + SPropertyOperations.getString(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
      for (NavigationProvider np : EP_NAME.getExtensions()) {
        opened |= np.openClass(projectPath, fqName);
      }
    } else if (isConstructor) {
      String classifierName = getClassifierName(node, ref);
      int paramCount = ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"))).count();
      for (NavigationProvider np : EP_NAME.getExtensions()) {
        opened |= np.openConstructor(projectPath, classifierName, paramCount);
      }
    } else if (isMethod) {
      String classifierName = getClassifierName(node, ref);
      SNode method = SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"));
      for (NavigationProvider np : EP_NAME.getExtensions()) {
        opened |= np.openMethod(projectPath, classifierName, SPropertyOperations.getString(method, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")), ListSequence.fromList(SLinkOperations.getChildren(method, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"))).count());
      }
    } else {
      String classifierName = getClassifierName(node, ref);
      for (NavigationProvider np : EP_NAME.getExtensions()) {
        opened |= np.openField(projectPath, classifierName, node.getName());
      }
    }
    return opened;
  }

  @Override
  public boolean openClass(final String projectPath, final String fqName) {
    final boolean[] result = new boolean[]{false};
    Runnable runnable = new Runnable() {
      @Override
      public void run() {
        try {
          IProjectHandler handler = MPSPlugin.getInstance().getProjectHandler(projectPath);
          if (handler != null) {
            handler.openClass(fqName);
            result[0] = true;
          }
        } catch (RemoteException e) {
          e.printStackTrace();
        }
      }
    };
    if (ThreadUtils.isInEDT()) {
      ApplicationManager.getApplication().executeOnPooledThread(runnable);
    } else {
      runnable.run();
    }
    return result[0];
  }
  @Override
  public boolean openMethod(final String projectPath, final String className, final String name, final int parameterCount) {
    final boolean[] result = new boolean[]{false};
    Runnable runnable = new Runnable() {
      @Override
      public void run() {
        try {
          IProjectHandler handler = MPSPlugin.getInstance().getProjectHandler(projectPath);
          if (handler != null) {
            handler.openMethod(className, name, parameterCount);
            result[0] = true;
          }
        } catch (RemoteException e) {
          e.printStackTrace();
        }
      }
    };
    if (ThreadUtils.isInEDT()) {
      ApplicationManager.getApplication().executeOnPooledThread(runnable);
    } else {
      runnable.run();
    }
    return result[0];
  }
  @Override
  public boolean openField(final String projectPath, final String className, final String name) {
    final boolean[] result = new boolean[]{false};
    Runnable runnable = new Runnable() {
      @Override
      public void run() {
        try {
          IProjectHandler handler = MPSPlugin.getInstance().getProjectHandler(projectPath);
          if (handler != null) {
            handler.openField(className, name);
            result[0] = true;
          }
        } catch (RemoteException e) {
          e.printStackTrace();
        }
      }
    };
    if (ThreadUtils.isInEDT()) {
      ApplicationManager.getApplication().executeOnPooledThread(runnable);
    } else {
      runnable.run();
    }
    return result[0];
  }
  @Override
  public boolean openConstructor(final String projectPath, final String className, final int parameterCount) {
    final boolean[] result = new boolean[]{false};
    Runnable runnable = new Runnable() {
      @Override
      public void run() {
        try {
          IProjectHandler handler = MPSPlugin.getInstance().getProjectHandler(projectPath);
          if (handler != null) {
            handler.openConstructor(className, parameterCount);
            result[0] = true;
          }
        } catch (RemoteException e) {
          e.printStackTrace();
        }
      }
    };
    if (ThreadUtils.isInEDT()) {
      ApplicationManager.getApplication().executeOnPooledThread(runnable);
    } else {
      runnable.run();
    }
    return result[0];
  }

  @Override
  public boolean navigate(final String projectPath, final String fileName, final int startLine, final int startPosition, final int endLine, final int endPosition) {
    final boolean[] result = new boolean[]{false};
    Runnable runnable = new Runnable() {
      @Override
      public void run() {
        try {
          IProjectHandler handler = MPSPlugin.getInstance().getProjectHandler(projectPath);
          if (handler != null) {
            handler.open(fileName, startLine, startPosition, endLine, endPosition);
            result[0] = true;
          }
        } catch (RemoteException e) {
          e.printStackTrace();
        }
      }
    };
    if (ThreadUtils.isInEDT()) {
      ApplicationManager.getApplication().executeOnPooledThread(runnable);
    } else {
      runnable.run();
    }
    return result[0];
  }

  private static String check_3kmw26_a0i0g(File checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getAbsolutePath();
    }
    return null;
  }
}
