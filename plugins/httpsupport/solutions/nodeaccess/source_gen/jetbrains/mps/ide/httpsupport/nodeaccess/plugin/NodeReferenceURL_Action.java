package jetbrains.mps.ide.httpsupport.nodeaccess.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.extapi.model.TransientSModel;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.datatransfer.CopyPasteUtil;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.project.Project;
import io.netty.handler.codec.http.QueryStringEncoder;
import jetbrains.mps.ide.httpsupport.manager.plugin.MPSInternalPortManager;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;

public class NodeReferenceURL_Action extends BaseAction {
  private static final Icon ICON = null;

  public NodeReferenceURL_Action() {
    super("Copy Node Reference as URL", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    SModel model = SNodeOperations.getModel(event.getData(MPSCommonDataKeys.NODE));
    return !(TemporaryModels.isTemporary(model)) && !((model instanceof TransientSModel));
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    CopyPasteUtil.copyTextToClipboard(buildRequest_njdhnr_a0a0a7(SNodeOperations.getPointer(event.getData(MPSCommonDataKeys.NODE)), event.getData(MPSCommonDataKeys.MPS_PROJECT)));
  }
  private static String buildRequest_njdhnr_a0a0a7(SNodeReference ref, Project project) {
    QueryStringEncoder encoder = new QueryStringEncoder("http://127.0.0.1:" + MPSInternalPortManager.PORT + "/node");

    encoder.addParam("ref", PersistenceFacade.getInstance().asString(ref));
    encoder.addParam("project", project.getName());

    return encoder.toString();
  }
}
