package jetbrains.mps.ide.httpsupport.nodeaccess.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.httpsupport.runtime.base.HttpRequestHandlerBase;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.project.Project;
import jetbrains.mps.ide.httpsupport.manager.plugin.HttpRequest;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.ide.httpsupport.runtime.base.HttpSupportUtil;
import jetbrains.mps.project.ProjectManager;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.apache.log4j.Level;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.buffer.Unpooled;

public class NodeOpener_RequestHandler extends HttpRequestHandlerBase {

  private static final List<String> QUERY_PREFIX = ListSequence.fromListAndArray(new ArrayList<String>(), "node_ref");

  private final boolean myCorrectRequest;
  private final SNodeReference ref;
  private final Project project;

  public NodeOpener_RequestHandler(HttpRequest request) {
    super(request);
    boolean correctRequest = true;
    {
      String ref_serialized = ListSequence.fromList(this.request.getParameterValue("ref")).getElement(0);
      if (ref_serialized != null) {
        this.ref = PersistenceFacade.getInstance().createNodeReference(ref_serialized);
      } else {
        correctRequest = false;
        this.ref = null;
      }
    }
    {
      String project_serialized = ListSequence.fromList(this.request.getParameterValue("project")).getElement(0);
      if (project_serialized != null) {
        this.project = HttpSupportUtil.getProjectByName(project_serialized);
      } else {
        this.project = ProjectManager.getInstance().getOpenedProjects().get(0);
      }
    }
    myCorrectRequest = correctRequest;
  }


  @Override
  protected List<String> getQueryPrefix() {
    return QUERY_PREFIX;
  }


  @Override
  public boolean canHandle() {
    if (!(myCorrectRequest) && super.canHandle()) {
      return false;
    }

    return true;
  }

  protected static Logger LOG = LogManager.getLogger(NodeOpener_RequestHandler.class);
  @Override
  public void handle() throws Exception {
    if (this.project != null) {
      this.project.getModelAccess().runWriteInEDT(new Runnable() {
        public void run() {
          HandlerUtil.openNode(NodeOpener_RequestHandler.this.request, NodeOpener_RequestHandler.this.project, NodeOpener_RequestHandler.this.ref);
        }
      });
    } else {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("No project is available.");
      }
      this.request.sendResponse(HttpResponseStatus.OK, "", Unpooled.copiedBuffer(HandlerUtil.FAILURE_STREAM));
    }
  }
}
