package jetbrains.mps.ide.httpsupport.nodeaccess.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.httpsupport.manager.plugin.HttpRequestHandlerBase;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.ide.httpsupport.manager.plugin.HttpRequest;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.jetbrains.mps.openapi.model.SNode;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class NodeOpener extends HttpRequestHandlerBase {

  @NotNull
  public String applicationID() {
    return "node";
  }

  private String ref;
  private String project;

  @Override
  protected void initParameterValues() {
    this.ref = ListSequence.fromList(request.getQueryParameterValue("ref")).getElement(0);
    this.project = ListSequence.fromList(request.getQueryParameterValue("project")).getElement(0);
  }


  @Override
  public boolean canHandle(@NotNull HttpRequest request) {
    if (!(super.canHandle(request))) {
      return false;
    }

    if (this.ref == null) {
      return false;
    }
    return true;
  }

  @Override
  public void handle(@NotNull HttpRequest request) throws Exception {
    super.handle(request);

    final Project project = HandlerUtil.getProjectByName(this.project);
    if (project != null) {
      final SNodeReference nodeReference = PersistenceFacade.getInstance().createNodeReference(this.ref);
      project.getModelAccess().runWriteInEDT(new Runnable() {
        public void run() {
          SNode node = HandlerUtil.openNode(project, nodeReference);
          if (node == null) {
            NodeOpener.this.request.sendReponse("image/gif", HandlerUtil.FAILURE_STREAM);
            return;
          }
          NodeOpener.this.request.sendReponse("image/gif", HandlerUtil.SUCCESS_STREAM);
          HandlerUtil.requestFocus(project);
        }
      });
    } else {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("No project is available.");
      }
      this.request.sendReponse("image/gif", HandlerUtil.FAILURE_STREAM);
    }
  }
  protected static Logger LOG = LogManager.getLogger(NodeOpener.class);
}
