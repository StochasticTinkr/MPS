package jetbrains.mps.ide.httpsupport.nodeaccess.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.httpsupport.runtime.base.HttpRequestHandlerBase;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.ide.httpsupport.runtime.base.QueryParameterConvertUtil;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.httpsupport.manager.plugin.HttpRequest;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.EditableModelDescriptor;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import jetbrains.mps.project.MPSProject;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.buffer.Unpooled;
import org.apache.log4j.Level;

public class NodeReceiver_RequestHandler extends HttpRequestHandlerBase {

  @Override
  protected String getQueryPrefix() {
    return "node";
  }

  private SNode node;
  private Project project;

  @Override
  protected boolean initParameterValues() {

    {
      String node_serialized = ListSequence.fromList(request.getParameterValue("node")).getElement(0);
      if (node_serialized == null) {
        return false;
      }
      this.node = new nodeByModelPersistence_Converter().fromString(node_serialized);

    }
    {
      String project_serialized = ListSequence.fromList(request.getParameterValue("project")).getElement(0);
      this.project = QueryParameterConvertUtil.getProjectByName(project_serialized);

    }
    return true;
  }


  @Override
  public boolean canHandle(@NotNull HttpRequest request) {
    if (!(init(request))) {
      return false;
    }

    return true;
  }

  protected static Logger LOG = LogManager.getLogger(NodeReceiver_RequestHandler.class);
  @Override
  public void handle(@NotNull HttpRequest request) throws Exception {

    this.project.getModelAccess().executeCommandInEDT(new Runnable() {
      public void run() {
        try {
          EditableModelDescriptor tmpModel = as_how0yc_a0a0a0a0a0a0a1a21(TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModule()), EditableModelDescriptor.class);

          tmpModel.addRootNode(NodeReceiver_RequestHandler.this.node);
          TemporaryModels.getInstance().addMissingImports(tmpModel);

          ReceivedNodeDialog dialog = new ReceivedNodeDialog(as_how0yc_a0a0a5a0a0a0a0a1a21(NodeReceiver_RequestHandler.this.project, MPSProject.class), NodeReceiver_RequestHandler.this.node);
          dialog.show();

          NodeReceiver_RequestHandler.this.request.sendResponse(HttpResponseStatus.OK, "image/gif", Unpooled.copiedBuffer((dialog.isOK() ? HandlerUtil.SUCCESS_STREAM : HandlerUtil.FAILURE_STREAM)));
        } catch (Exception e) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("", e);
          }
          NodeReceiver_RequestHandler.this.request.sendResponse(HttpResponseStatus.OK, "image/gif", Unpooled.copiedBuffer(HandlerUtil.FAILURE_STREAM));
        }
      }
    });
  }
  private static <T> T as_how0yc_a0a0a0a0a0a0a1a21(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_how0yc_a0a0a5a0a0a0a0a1a21(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
