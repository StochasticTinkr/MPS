package jetbrains.mps.ide.httpsupport.nodeaccess.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.httpsupport.runtime.base.ParameterConverter;
import org.jetbrains.mps.openapi.model.SNode;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.DefaultSModel;
import jetbrains.mps.smodel.persistence.def.ModelPersistence;
import jetbrains.mps.smodel.persistence.def.ModelReadException;
import org.apache.log4j.Level;
import jetbrains.mps.smodel.EditableModelDescriptor;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class nodeByModelPersistence_Converter implements ParameterConverter<SNode> {

  protected static Logger LOG = LogManager.getLogger(nodeByModelPersistence_Converter.class);
  @Override
  public SNode fromString(String serializedValue) {
    try {
      DefaultSModel model = ModelPersistence.readModel(serializedValue, false);
      SNode node = model.getRootNodes().iterator().next();
      model.dispose();
      return node;
    } catch (ModelReadException e) {
      if (LOG.isEnabledFor(Level.WARN)) {
        LOG.warn("Exception on node deserializing", e);
      }
      return null;
    }
  }

  @Override
  public String toString(SNode value) {
    EditableModelDescriptor tempModel = as_cmiiko_a0a0a4(TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModule()), EditableModelDescriptor.class);
    tempModel.addRootNode(SNodeOperations.copyNode(value));
    TemporaryModels.getInstance().addMissingImports(tempModel);
    String result = ModelPersistence.modelToString(tempModel.getSModelInternal());
    TemporaryModels.getInstance().dispose(tempModel);

    return result;
  }
  private static <T> T as_cmiiko_a0a0a4(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
