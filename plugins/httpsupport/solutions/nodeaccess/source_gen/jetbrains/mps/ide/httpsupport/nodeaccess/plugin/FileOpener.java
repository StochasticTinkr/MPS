package jetbrains.mps.ide.httpsupport.nodeaccess.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.httpsupport.manager.plugin.HttpRequestHandlerBase;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.httpsupport.manager.plugin.HttpRequest;
import jetbrains.mps.project.Project;
import java.util.Iterator;
import jetbrains.mps.textgen.trace.DebugInfo;
import jetbrains.mps.textgen.trace.DefaultTraceInfoProvider;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.textgen.trace.BaseLanguageNodeLookup;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.buffer.Unpooled;
import org.apache.log4j.Level;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;

public class FileOpener extends HttpRequestHandlerBase {

  @Override
  protected String getQueryPrefix() {
    return "file";
  }

  @Override
  public boolean isTrustful() {
    return true;
  }

  private String file;
  private String line;
  private String project;

  @Override
  protected void initParameterValues() {
    this.file = ListSequence.fromList(request.getParameterValue("file")).getElement(0);
    this.line = ListSequence.fromList(request.getParameterValue("line")).getElement(0);
    this.project = ListSequence.fromList(request.getParameterValue("project")).getElement(0);
  }


  @Override
  public boolean canHandle(@NotNull HttpRequest request) {
    if (!(super.canHandle(request))) {
      return false;
    }

    if (this.file == null) {
      return false;
    }
    return true;
  }

  @Override
  public void handle(@NotNull HttpRequest request) throws Exception {
    super.handle(request);

    final Project project = HandlerUtil.getProjectByName(this.project);

    if (project != null) {
      final int line = HandlerUtil.parseNumber(this.line);


      int sourceGen = this.file.lastIndexOf(HandlerUtil.SOURCE_GEN);
      int fileNamePosition = (sourceGen == -1 ? 0 : sourceGen + HandlerUtil.SOURCE_GEN.length());

      int lastSeparator = this.file.lastIndexOf("/");
      final String namespace = this.file.substring(fileNamePosition, lastSeparator).replace('/', '.');
      final String simpleFileName = this.file.substring(lastSeparator + 1);

      project.getModelAccess().runWriteInEDT(new Runnable() {
        public void run() {
          Iterator<DebugInfo> it = new DefaultTraceInfoProvider(project.getRepository()).debugInfo(namespace).iterator();
          while (it.hasNext()) {
            final SNodeReference nodeReference = new BaseLanguageNodeLookup(it.next()).getNodeAt(simpleFileName, line);
            if (nodeReference != null) {
              HandlerUtil.openNode(project, nodeReference);
              FileOpener.this.request.sendResponse(HttpResponseStatus.OK, "image/gif", Unpooled.copiedBuffer(HandlerUtil.SUCCESS_STREAM));
              HandlerUtil.requestFocus(project);
              return;
            }
          }
          FileOpener.this.request.sendResponse(HttpResponseStatus.OK, "image/gif", Unpooled.copiedBuffer(HandlerUtil.FAILURE_STREAM));

        }
      });
    } else {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("No project is available.");
      }
      this.request.sendResponse(HttpResponseStatus.OK, "image/gif", Unpooled.copiedBuffer(HandlerUtil.FAILURE_STREAM));
    }
  }
  protected static Logger LOG = LogManager.getLogger(FileOpener.class);
}
