package jetbrains.mps.ide.httpsupport.nodeaccess.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.annotations.NotNull;
import io.netty.handler.codec.http.QueryStringEncoder;
import jetbrains.mps.ide.datatransfer.CopyPasteUtil;
import jetbrains.mps.smodel.EditableModelDescriptor;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.persistence.def.ModelPersistence;

public class NodeURI_Action extends BaseAction {
  private static final Icon ICON = null;

  public NodeURI_Action() {
    super("Copy Node as URI", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    QueryStringEncoder encoder = HandlerUtil.createURItoMPS("node");
    encoder.addParam("node", NodeURI_Action.this.serializeNode(event.getData(MPSCommonDataKeys.NODE), event));
    CopyPasteUtil.copyTextToClipboard(encoder.toString());
  }
  private String serializeNode(SNode node, final AnActionEvent event) {
    EditableModelDescriptor tempModel = as_aha6g5_a0a0a6(TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModule()), EditableModelDescriptor.class);
    tempModel.addRootNode(SNodeOperations.copyNode(node));
    String result = ModelPersistence.modelToString(tempModel.getSModelInternal());
    TemporaryModels.getInstance().dispose(tempModel);

    return result;
  }
  private static <T> T as_aha6g5_a0a0a6(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
