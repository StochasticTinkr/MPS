package jetbrains.mps.ide.httpsupport.nodeaccess.plugin;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.project.Project;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.module.SRepository;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.openapi.navigation.NavigationSupport;
import jetbrains.mps.project.MPSProject;
import com.intellij.ide.impl.ProjectUtil;
import io.netty.handler.codec.http.QueryStringEncoder;
import jetbrains.mps.ide.httpsupport.manager.plugin.MPSRequestPortManager;
import io.netty.util.CharsetUtil;

public class HandlerUtil {

  public static final String SOURCE_GEN = "source_gen/";

  public static final byte[] SUCCESS_STREAM = new byte[]{(byte) 0x47, (byte) 0x49, (byte) 0x46, (byte) 0x38, (byte) 0x39, (byte) 0x61, (byte) 0x02, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x80, (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x2C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x02, (byte) 0x44, (byte) 0x01, (byte) 0x00, (byte) 0x3B};

  public static final byte[] FAILURE_STREAM = new byte[]{(byte) 0x47, (byte) 0x49, (byte) 0x46, (byte) 0x38, (byte) 0x39, (byte) 0x61, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x80, (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x2C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x02, (byte) 0x44, (byte) 0x01, (byte) 0x00, (byte) 0x3B};



  public static SNode openNode(final Project project, final SNodeReference nodeReference) {
    final SRepository repository = project.getRepository();

    SNode node = nodeReference.resolve(repository);
    if (node == null) {
      Messages.showErrorDialog("Can't find node  " + nodeReference + "\nMaybe it has been deleted?", "Error");
    } else {
      NavigationSupport.getInstance().openNode(project, node, true, true);
    }
    return node;
  }

  public static void requestFocus(Project project) {
    if (project instanceof MPSProject) {
      ProjectUtil.focusProjectWindow(((MPSProject) project).getProject(), true);
    }
  }

  public static QueryStringEncoder createURItoMPS(String path) {
    return new QueryStringEncoder("http://127.0.0.1:" + MPSRequestPortManager.getCurrentPort() + "/" + path, CharsetUtil.UTF_8);
  }
}
