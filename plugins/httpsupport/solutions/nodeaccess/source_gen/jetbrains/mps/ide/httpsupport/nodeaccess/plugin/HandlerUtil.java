package jetbrains.mps.ide.httpsupport.nodeaccess.plugin;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.project.Project;
import java.util.List;
import jetbrains.mps.project.ProjectManager;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.apache.log4j.Level;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.module.SRepository;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.openapi.navigation.NavigationSupport;
import jetbrains.mps.project.MPSProject;
import com.intellij.ide.impl.ProjectUtil;

public class HandlerUtil {

  public static final String SOURCE_GEN = "source_gen/";

  public static final byte[] SUCCESS_STREAM = new byte[]{(byte) 0x47, (byte) 0x49, (byte) 0x46, (byte) 0x38, (byte) 0x39, (byte) 0x61, (byte) 0x02, (byte) 0x00, (byte) 0x02, (byte) 0x00, (byte) 0x80, (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x2C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x02, (byte) 0x44, (byte) 0x01, (byte) 0x00, (byte) 0x3B};

  public static final byte[] FAILURE_STREAM = new byte[]{(byte) 0x47, (byte) 0x49, (byte) 0x46, (byte) 0x38, (byte) 0x39, (byte) 0x61, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x80, (byte) 0xFF, (byte) 0x00, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x2C, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x01, (byte) 0x00, (byte) 0x00, (byte) 0x02, (byte) 0x02, (byte) 0x44, (byte) 0x01, (byte) 0x00, (byte) 0x3B};



  protected static Logger LOG = LogManager.getLogger(HandlerUtil.class);
  public static Project getProjectByName(final String projectName) {
    List<Project> openedProjects = ProjectManager.getInstance().getOpenedProjects();
    if (ListSequence.fromList(openedProjects).isEmpty()) {
      return null;
    }

    Project project;
    if ((projectName == null || projectName.length() == 0)) {
      project = ListSequence.fromList(openedProjects).first();
    } else {
      project = ListSequence.fromList(openedProjects).findFirst(new IWhereFilter<Project>() {
        public boolean accept(Project it) {
          return it.getName().equals(projectName);
        }
      });
      if (project == null) {
        project = ListSequence.fromList(openedProjects).first();
        if (LOG.isEnabledFor(Level.WARN)) {
          LOG.warn("Can't find project '" + projectName + "'. Using '" + project.getName() + "' instead.");
        }
      }
    }
    return project;
  }

  public static SNode openNode(final Project project, final SNodeReference nodeReference) {
    final SRepository repository = project.getRepository();

    SNode node = nodeReference.resolve(repository);
    if (node == null) {
      Messages.showErrorDialog("Can't find node  " + nodeReference + "\nMaybe it has been deleted?", "Error");
    } else {
      NavigationSupport.getInstance().openNode(project, node, true, true);
    }
    return node;
  }

  public static int parseNumber(String numberAsString) {
    try {
      return Integer.parseUnsignedInt(numberAsString);
    } catch (NumberFormatException e) {
      return 0;
    }
  }

  public static void requestFocus(Project project) {
    if (project instanceof MPSProject) {
      ProjectUtil.focusProjectWindow(((MPSProject) project).getProject(), true);
    }
  }
}
