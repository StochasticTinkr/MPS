package jetbrains.mps.ide.httpsupport.nodeaccess.plugin;

/*Generated by MPS */

import jetbrains.mps.ide.httpsupport.manager.plugin.HttpRequestHandlerBase;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.httpsupport.manager.plugin.HttpRequest;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.DefaultSModel;
import jetbrains.mps.smodel.persistence.def.ModelPersistence;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.EditableModelDescriptor;
import jetbrains.mps.smodel.tempmodel.TemporaryModels;
import jetbrains.mps.smodel.tempmodel.TempModuleOptions;
import jetbrains.mps.project.MPSProject;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.buffer.Unpooled;
import org.apache.log4j.Level;
import jetbrains.mps.ide.httpsupport.converters.plugin.ProjectResolveUtil;

public class NodeReveiver extends HttpRequestHandlerBase {

  @Override
  protected String getQueryPrefix() {
    return "node";
  }

  @Override
  public boolean isTrustful() {
    return true;
  }

  private String node;
  private Project project;

  @Override
  protected void initParameterValues() {
    this.node = deserialize_node(ListSequence.fromList(request.getParameterValue("node")).getElement(0));
    this.project = deserialize_project(ListSequence.fromList(request.getParameterValue("project")).getElement(0));
  }


  @Override
  public boolean canHandle(@NotNull HttpRequest request) {
    if (!(super.canHandle(request))) {
      return false;
    }

    if (this.node == null) {
      return false;
    }
    return true;
  }

  protected static Logger LOG = LogManager.getLogger(NodeReveiver.class);
  @Override
  public void handle(@NotNull HttpRequest request) throws Exception {
    super.handle(request);

    this.project.getModelAccess().executeCommandInEDT(new Runnable() {
      public void run() {
        try {
          final DefaultSModel loadedModel = ModelPersistence.readModel(NodeReveiver.this.node, false);
          SNode loadedNode = loadedModel.getRootNodes().iterator().next();

          EditableModelDescriptor tmpModel = as_rm47i7_a0a3a0a0a0a0a2a41(TemporaryModels.getInstance().create(false, TempModuleOptions.forDefaultModule()), EditableModelDescriptor.class);

          loadedModel.removeRootNode(loadedNode);

          tmpModel.addRootNode(loadedNode);
          TemporaryModels.getInstance().addMissingImports(tmpModel);

          loadedModel.dispose();

          ReceivedNodeDialog dialog = new ReceivedNodeDialog(as_rm47i7_a0a0a21a0a0a0a0a2a41(NodeReveiver.this.project, MPSProject.class), loadedNode);
          dialog.show();

          NodeReveiver.this.request.sendResponse(HttpResponseStatus.OK, "image/gif", Unpooled.copiedBuffer((dialog.isOK() ? HandlerUtil.SUCCESS_STREAM : HandlerUtil.FAILURE_STREAM)));
        } catch (Exception e) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("", e);
          }
          NodeReveiver.this.request.sendResponse(HttpResponseStatus.OK, "image/gif", Unpooled.copiedBuffer(HandlerUtil.FAILURE_STREAM));
        }
      }
    });
  }

  public String deserialize_node(String serializedValue) {
    return serializedValue;
  }
  public Project deserialize_project(String serializedValue) {
    return ProjectResolveUtil.getProjectByName(serializedValue);
  }
  private static <T> T as_rm47i7_a0a3a0a0a0a0a2a41(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
  private static <T> T as_rm47i7_a0a0a21a0a0a0a0a2a41(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
