package jetbrains.mps.ide.httpsupport.nodeaccess.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.plugins.projectplugins.ProjectPluginManager;
import jetbrains.mps.ide.actions.ModuleDependenies_Tool;
import io.netty.handler.codec.http.QueryStringEncoder;
import jetbrains.mps.ide.datatransfer.CopyPasteUtil;

public class NodeReferenceURI_Action extends BaseAction {
  private static final Icon ICON = null;

  public NodeReferenceURI_Action() {
    super("Copy Node Reference as URI", "", ICON);
    this.setIsAlwaysVisible(true);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
    }
    {
      SNode node = event.getData(MPSCommonDataKeys.NODE);
      if (node == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    event.getData(CommonDataKeys.PROJECT).getComponent(ProjectPluginManager.class).getTool(ModuleDependenies_Tool.class);
    QueryStringEncoder encoder = HandlerUtil.createURItoMPS("node_ref");
    encoder.addParam("ref", event.getData(MPSCommonDataKeys.NODE).getReference().toString());
    if (event.getData(CommonDataKeys.PROJECT) != null) {
      encoder.addParam("project", event.getData(CommonDataKeys.PROJECT).getName());
    }
    CopyPasteUtil.copyTextToClipboard(encoder.toString());
  }
}
