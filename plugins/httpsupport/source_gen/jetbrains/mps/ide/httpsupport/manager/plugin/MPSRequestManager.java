package jetbrains.mps.ide.httpsupport.manager.plugin;

/*Generated by MPS */

import org.jetbrains.ide.HttpRequestHandler;
import java.util.Hashtable;
import org.jetbrains.annotations.NotNull;
import io.netty.handler.codec.http.FullHttpRequest;
import io.netty.handler.codec.http.HttpMethod;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import io.netty.handler.codec.http.QueryStringDecoder;
import io.netty.channel.ChannelHandlerContext;
import java.io.IOException;
import java.net.URISyntaxException;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.structure.ExtensionPoint;
import io.netty.handler.codec.http.HttpResponseStatus;
import io.netty.buffer.Unpooled;
import com.intellij.util.ExceptionUtil;
import io.netty.util.CharsetUtil;
import org.apache.log4j.Level;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import javax.swing.SwingUtilities;
import com.intellij.openapi.ui.Messages;

public class MPSRequestManager extends HttpRequestHandler {

  private final Hashtable<String, Boolean> trustedHostTable = new Hashtable<String, Boolean>();

  @Override
  public boolean isSupported(@NotNull FullHttpRequest request) {
    return request.method() == HttpMethod.GET;
  }

  protected static Logger LOG = LogManager.getLogger(MPSRequestManager.class);
  @Override
  public boolean process(@NotNull QueryStringDecoder decoder, @NotNull FullHttpRequest request, @NotNull ChannelHandlerContext context) throws IOException {
    HttpRequest boxedRequest;
    try {
      boxedRequest = new HttpRequest(request, decoder, context.channel());
    } catch (URISyntaxException exception) {
      return false;
    }

    for (IHttpRequestHandler handler : Sequence.fromIterable(new ExtensionPoint<IHttpRequestHandler>("jetbrains.mps.ide.httpsupport.HttpRequestHandlerEP").getObjects())) {
      if (handler.canHandle(boxedRequest)) {

        if (!(handler.isTrustful())) {
          if (!(isTrustedHost(boxedRequest.getReferrerHost(), handler))) {
            return false;
          }
        }

        try {
          handler.handle(boxedRequest);
        } catch (Exception e) {
          String errorHeader = "Request handler '" + handler.getName() + "' throws exception";

          boxedRequest.sendResponse(HttpResponseStatus.INTERNAL_SERVER_ERROR, "text/plain", Unpooled.copiedBuffer(errorHeader + "\n\n" + ExceptionUtil.getThrowableText(e), CharsetUtil.UTF_8));
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error(errorHeader, e);
          }
        } finally {
          return true;
        }
      }
    }
    return false;
  }


  private final boolean isTrustedHost(final String host, final IHttpRequestHandler handler) {
    if (host != null && trustedHostTable.containsKey(host)) {
      return trustedHostTable.get(host);
    }


    final Wrappers._int exitCode = new Wrappers._int();
    try {
      SwingUtilities.invokeAndWait(new Runnable() {
        public void run() {
          exitCode.value = Messages.showYesNoDialog(getTrustDialogMessage(host, handler), "HTTP Support Plugin", null);
        }
      });
    } catch (Exception exception) {
      if (LOG.isEnabledFor(Level.ERROR)) {
        LOG.error("", exception);
      }
      return false;
    }

    if (host != null) {
      if (exitCode.value == Messages.YES) {
        trustedHostTable.put(host, true);
      } else if (exitCode.value == Messages.NO) {
        trustedHostTable.put(host, false);
      }
    }

    return exitCode.value == Messages.YES;
  }

  private static String getTrustDialogMessage(String host, IHttpRequestHandler handler) {
    return "'" + handler.getName() + "' handler is requested. Do you trust to '" + ((host == null ? "unknown host" : host)) + "'?";
  }
}
