package jetbrains.mps.ide.httpsupport.manager.plugin;

/*Generated by MPS */

import java.nio.charset.Charset;
import io.netty.handler.codec.http.QueryStringDecoder;
import io.netty.channel.Channel;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.io.NettyKt;
import io.netty.handler.codec.http.HttpResponse;
import org.jetbrains.io.Responses;
import io.netty.buffer.Unpooled;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class HttpRequest {

  public static final Charset DEFAULT_CHARSET = Charset.forName("UTF-8");

  private final io.netty.handler.codec.http.HttpRequest request;
  private final QueryStringDecoder decoder;
  private final Channel channel;
  private final List<String> segments;

  public HttpRequest(@NotNull io.netty.handler.codec.http.HttpRequest request, @NotNull QueryStringDecoder decoder, @NotNull Channel channel) {
    this.request = request;
    this.decoder = decoder;
    this.channel = channel;
    this.segments = getSegmentsFor(getPath());
  }

  public List<String> getQueryParameterValue(String key) {
    return decoder.parameters().get(key);
  }

  public String getPath() {
    return decoder.path();
  }

  public List<String> getSegments() {
    return segments;
  }

  public String getHost() {
    return NettyKt.getHost(request);
  }

  public void sendResponse(String contentType, String content) {
    HttpResponse response = Responses.response(contentType, Unpooled.copiedBuffer(content, DEFAULT_CHARSET));
    Responses.send(response, channel, request);
  }

  public void sendReponse(String contentType, byte[] content) {
    HttpResponse response = Responses.response(contentType, Unpooled.copiedBuffer(content));
    Responses.send(response, channel, request);
  }

  public static List<String> getSegmentsFor(String path) {
    return Sequence.fromIterable(Sequence.fromArray(path.split("/"))).where(new IWhereFilter<String>() {
      public boolean accept(String it) {
        return (it != null && it.length() > 0);
      }
    }).toListSequence();
  }

}
