package jetbrains.mps.ide.httpsupport.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(26);
  /*package*/ final ConceptDescriptor myConceptCanHandleRequestFunction = createDescriptorForCanHandleRequestFunction();
  /*package*/ final ConceptDescriptor myConceptDefaultParameterConverter = createDescriptorForDefaultParameterConverter();
  /*package*/ final ConceptDescriptor myConceptDefaultValueFunction = createDescriptorForDefaultValueFunction();
  /*package*/ final ConceptDescriptor myConceptDeserializeFunction = createDescriptorForDeserializeFunction();
  /*package*/ final ConceptDescriptor myConceptHandleRequestFunction = createDescriptorForHandleRequestFunction();
  /*package*/ final ConceptDescriptor myConceptHttpRequestOperation = createDescriptorForHttpRequestOperation();
  /*package*/ final ConceptDescriptor myConceptHttpRequestParameter = createDescriptorForHttpRequestParameter();
  /*package*/ final ConceptDescriptor myConceptIDEAPlatformPortProvider = createDescriptorForIDEAPlatformPortProvider();
  /*package*/ final ConceptDescriptor myConceptIParameterConverter = createDescriptorForIParameterConverter();
  /*package*/ final ConceptDescriptor myConceptMPSPortProvider = createDescriptorForMPSPortProvider();
  /*package*/ final ConceptDescriptor myConceptParameterConverterDeclaration = createDescriptorForParameterConverterDeclaration();
  /*package*/ final ConceptDescriptor myConceptParameterConverterReference = createDescriptorForParameterConverterReference();
  /*package*/ final ConceptDescriptor myConceptParameterInitializer = createDescriptorForParameterInitializer();
  /*package*/ final ConceptDescriptor myConceptPort = createDescriptorForPort();
  /*package*/ final ConceptDescriptor myConceptPortProvider = createDescriptorForPortProvider();
  /*package*/ final ConceptDescriptor myConceptQueryParameter = createDescriptorForQueryParameter();
  /*package*/ final ConceptDescriptor myConceptQueryParameterReference = createDescriptorForQueryParameterReference();
  /*package*/ final ConceptDescriptor myConceptQueryPath = createDescriptorForQueryPath();
  /*package*/ final ConceptDescriptor myConceptQuerySegment = createDescriptorForQuerySegment();
  /*package*/ final ConceptDescriptor myConceptRequestHandler = createDescriptorForRequestHandler();
  /*package*/ final ConceptDescriptor myConceptRequestType = createDescriptorForRequestType();
  /*package*/ final ConceptDescriptor myConceptRequestURIBuilderExpression = createDescriptorForRequestURIBuilderExpression();
  /*package*/ final ConceptDescriptor myConceptResponseSendOperation = createDescriptorForResponseSendOperation();
  /*package*/ final ConceptDescriptor myConceptSerializeFunction = createDescriptorForSerializeFunction();
  /*package*/ final ConceptDescriptor myConceptSerializedValueParameter = createDescriptorForSerializedValueParameter();
  /*package*/ final ConceptDescriptor myConceptValueToSerializeParameter = createDescriptorForValueToSerializeParameter();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptCanHandleRequestFunction.getId(), 0);
    myIndexMap.put(myConceptDefaultParameterConverter.getId(), 1);
    myIndexMap.put(myConceptDefaultValueFunction.getId(), 2);
    myIndexMap.put(myConceptDeserializeFunction.getId(), 3);
    myIndexMap.put(myConceptHandleRequestFunction.getId(), 4);
    myIndexMap.put(myConceptHttpRequestOperation.getId(), 5);
    myIndexMap.put(myConceptHttpRequestParameter.getId(), 6);
    myIndexMap.put(myConceptIDEAPlatformPortProvider.getId(), 7);
    myIndexMap.put(myConceptIParameterConverter.getId(), 8);
    myIndexMap.put(myConceptMPSPortProvider.getId(), 9);
    myIndexMap.put(myConceptParameterConverterDeclaration.getId(), 10);
    myIndexMap.put(myConceptParameterConverterReference.getId(), 11);
    myIndexMap.put(myConceptParameterInitializer.getId(), 12);
    myIndexMap.put(myConceptPort.getId(), 13);
    myIndexMap.put(myConceptPortProvider.getId(), 14);
    myIndexMap.put(myConceptQueryParameter.getId(), 15);
    myIndexMap.put(myConceptQueryParameterReference.getId(), 16);
    myIndexMap.put(myConceptQueryPath.getId(), 17);
    myIndexMap.put(myConceptQuerySegment.getId(), 18);
    myIndexMap.put(myConceptRequestHandler.getId(), 19);
    myIndexMap.put(myConceptRequestType.getId(), 20);
    myIndexMap.put(myConceptRequestURIBuilderExpression.getId(), 21);
    myIndexMap.put(myConceptResponseSendOperation.getId(), 22);
    myIndexMap.put(myConceptSerializeFunction.getId(), 23);
    myIndexMap.put(myConceptSerializedValueParameter.getId(), 24);
    myIndexMap.put(myConceptValueToSerializeParameter.getId(), 25);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCanHandleRequestFunction, myConceptDefaultParameterConverter, myConceptDefaultValueFunction, myConceptDeserializeFunction, myConceptHandleRequestFunction, myConceptHttpRequestOperation, myConceptHttpRequestParameter, myConceptIDEAPlatformPortProvider, myConceptIParameterConverter, myConceptMPSPortProvider, myConceptParameterConverterDeclaration, myConceptParameterConverterReference, myConceptParameterInitializer, myConceptPort, myConceptPortProvider, myConceptQueryParameter, myConceptQueryParameterReference, myConceptQueryPath, myConceptQuerySegment, myConceptRequestHandler, myConceptRequestType, myConceptRequestURIBuilderExpression, myConceptResponseSendOperation, myConceptSerializeFunction, myConceptSerializedValueParameter, myConceptValueToSerializeParameter);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptCanHandleRequestFunction;
      case 1:
        return myConceptDefaultParameterConverter;
      case 2:
        return myConceptDefaultValueFunction;
      case 3:
        return myConceptDeserializeFunction;
      case 4:
        return myConceptHandleRequestFunction;
      case 5:
        return myConceptHttpRequestOperation;
      case 6:
        return myConceptHttpRequestParameter;
      case 7:
        return myConceptIDEAPlatformPortProvider;
      case 8:
        return myConceptIParameterConverter;
      case 9:
        return myConceptMPSPortProvider;
      case 10:
        return myConceptParameterConverterDeclaration;
      case 11:
        return myConceptParameterConverterReference;
      case 12:
        return myConceptParameterInitializer;
      case 13:
        return myConceptPort;
      case 14:
        return myConceptPortProvider;
      case 15:
        return myConceptQueryParameter;
      case 16:
        return myConceptQueryParameterReference;
      case 17:
        return myConceptQueryPath;
      case 18:
        return myConceptQuerySegment;
      case 19:
        return myConceptRequestHandler;
      case 20:
        return myConceptRequestType;
      case 21:
        return myConceptRequestURIBuilderExpression;
      case 22:
        return myConceptResponseSendOperation;
      case 23:
        return myConceptSerializeFunction;
      case 24:
        return myConceptSerializedValueParameter;
      case 25:
        return myConceptValueToSerializeParameter;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForCanHandleRequestFunction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "CanHandleRequestFunction", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x5354a94149f37316L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunction", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/6004610301070373654");
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    b.alias("canHandle");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDefaultParameterConverter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "DefaultParameterConverter", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x46f064803fbdcb2eL);
    b.class_(false, false, false);
    b.parent(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x46f064803fbdb3f3L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/5111696079053507374");
    b.aggregate("parameterType", 0x46f064803fbdcb48L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL).optional(false).ordered(true).multiple(false).origin("5111696079053507400").done();
    b.alias("default");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDefaultValueFunction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "DefaultValueFunction", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x2d9d5d4572ccaf5cL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunction", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/3286885855910473564");
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    b.alias("default");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDeserializeFunction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "DeserializeFunction", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x3d1bb14fe83a1b05L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunction", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/4403308017441446661");
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    b.alias("deserialize");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForHandleRequestFunction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "HandleRequestFunction", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x4d5ac72154f64136L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunction", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/5573986434797682998");
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    b.alias("handle");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForHttpRequestOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "HttpRequestOperation", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x5f91294323b595d2L);
    b.class_(false, true, false);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/6886330673564849618");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForHttpRequestParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "HttpRequestParameter", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x4d5ac72154f781d2L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/5573986434797765074");
    b.alias("request");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIDEAPlatformPortProvider() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "IDEAPlatformPortProvider", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x6f2759b713980630L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.ide.httpsupport.structure.PortProvider", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x6f2759b713980586L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/8009469105144333872");
    b.alias("IDEA Platform port");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIParameterConverter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "IParameterConverter", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x46f064803fbdb3f3L);
    b.interface_();
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/5111696079053501427");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMPSPortProvider() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "MPSPortProvider", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x6f2759b71399ad9bL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.ide.httpsupport.structure.PortProvider", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x6f2759b713980586L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/8009469105144442267");
    b.alias("MPS port");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParameterConverterDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "ParameterConverterDeclaration", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x3d1bb14fe8385046L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0xc0080a477e374558L, 0xbee99ae18e690549L, 0x2b7651d49ee9d72L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/4403308017441329222");
    b.aggregate("parameterType", 0x3d1bb14fe83869abL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL).optional(false).ordered(true).multiple(false).origin("4403308017441335723").done();
    b.aggregate("serializeFunction", 0x3d1bb14fe83a1afeL).target(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x3d1bb14fe838a4f9L).optional(false).ordered(true).multiple(false).origin("4403308017441446654").done();
    b.aggregate("deserializeFunctinon", 0x3d1bb14fe83a1b01L).target(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x3d1bb14fe83a1b05L).optional(false).ordered(true).multiple(false).origin("4403308017441446657").done();
    b.aggregate("defaultValueFunction", 0x2d9d5d4572ccb260L).target(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x2d9d5d4572ccaf5cL).optional(true).ordered(true).multiple(false).origin("3286885855910474336").done();
    b.alias("Parameter Converter");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParameterConverterReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "ParameterConverterReference", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x46f064803fbdb465L);
    b.class_(false, false, false);
    b.parent(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x46f064803fbdb3f3L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/5111696079053501541");
    b.associate("declaration", 0x46f064803fbdb466L).target(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x3d1bb14fe8385046L).optional(false).origin("5111696079053501542").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParameterInitializer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "ParameterInitializer", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x4027f9073ff5cf17L);
    b.class_(false, false, false);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/4622937352052264727");
    b.associate("parameter", 0x4027f9073ff5cf18L).target(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x205f4376c585b439L).optional(false).origin("4622937352052264728").done();
    b.aggregate("value", 0x4027f9073ff5cf1aL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("4622937352052264730").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPort() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "Port", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x6f2759b7139c32c2L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.ide.httpsupport.structure.PortProvider", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x6f2759b713980586L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/8009469105144607426");
    b.prop("portNumber", 0x6f2759b7139c32c3L, "8009469105144607427");
    b.alias("custom port");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPortProvider() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "PortProvider", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x6f2759b713980586L);
    b.class_(false, true, false);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/8009469105144333702");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForQueryParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "QueryParameter", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x205f4376c585b439L);
    b.class_(false, false, false);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x4b64b50fb2fc7720L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/2332657309400282169");
    b.prop("required", 0x205f4376c585b43dL, "2332657309400282173");
    b.aggregate("parameterConverter", 0x46f064803fbfba0fL).target(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x46f064803fbdb3f3L).optional(false).ordered(true).multiple(false).origin("5111696079053634063").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForQueryParameterReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "QueryParameterReference", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x205f4376c5884e95L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xe34de34746464f2L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/2332657309400452757");
    b.associate("queryParameter", 0x205f4376c5884e96L).target(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x205f4376c585b439L).optional(false).origin("2332657309400452758").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForQueryPath() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "QueryPath", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x53d29f104fa64ed7L);
    b.class_(false, false, false);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/6040064942661848791");
    b.aggregate("segmetns", 0x53d29f104fa64ef2L).target(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x53d29f104fa64ed8L).optional(true).ordered(true).multiple(true).origin("6040064942661848818").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForQuerySegment() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "QuerySegment", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x53d29f104fa64ed8L);
    b.class_(false, false, false);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/6040064942661848792");
    b.prop("segment", 0x53d29f104face44fL, "6040064942662280271");
    b.alias("/");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRequestHandler() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "RequestHandler", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x4d5ac72154f4d780L);
    b.class_(false, false, true);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.parent(0xc0080a477e374558L, 0xbee99ae18e690549L, 0x2b7651d49ee9d72L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/5573986434797590400");
    b.aggregate("queryPrefix", 0x53d29f104fa64ef9L).target(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x53d29f104fa64ed7L).optional(false).ordered(true).multiple(false).origin("6040064942661848825").done();
    b.aggregate("queryParameters", 0x205f4376c585d782L).target(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x205f4376c585b439L).optional(true).ordered(true).multiple(true).origin("2332657309400291202").done();
    b.aggregate("canHandleFunction", 0x5354a94149f3cfcaL).target(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x5354a94149f37316L).optional(true).ordered(true).multiple(false).origin("6004610301070397386").done();
    b.aggregate("handleFunction", 0x4d5ac72154f835efL).target(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x4d5ac72154f64136L).optional(false).ordered(true).multiple(false).origin("5573986434797811183").done();
    b.alias("Request Handler");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRequestType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "RequestType", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x878f56dbf94c377L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Type", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/610507601223140215");
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    b.alias("request");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRequestURIBuilderExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "RequestURIBuilderExpression", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x4027f9073ff5ce93L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/4622937352052264595");
    b.associate("requestHandler", 0x4027f9073ff5cebeL).target(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x4d5ac72154f4d780L).optional(false).origin("4622937352052264638").done();
    b.aggregate("initializer", 0x4027f9073ff652f7L).target(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x4027f9073ff5cf17L).optional(true).ordered(true).multiple(true).origin("4622937352052298487").done();
    b.aggregate("port", 0x6f2759b71399b650L).target(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x6f2759b713980586L).optional(false).ordered(true).multiple(false).origin("8009469105144444496").done();
    b.alias("request URI");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForResponseSendOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "ResponseSendOperation", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x5f91294323b64fc1L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.ide.httpsupport.structure.HttpRequestOperation", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x5f91294323b595d2L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/6886330673564897217");
    b.prop("type", 0x5f91294323b6503dL, "6886330673564897341");
    b.aggregate("buffer", 0x5f91294323b6503fL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("6886330673564897343").done();
    b.alias("send response");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSerializeFunction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "SerializeFunction", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x3d1bb14fe838a4f9L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunction", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/4403308017441350905");
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    b.alias("serialize");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSerializedValueParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "SerializedValueParameter", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x3d1bb14fe838c5e4L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/4403308017441359332");
    b.alias("string");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForValueToSerializeParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.ide.httpsupport", "ValueToSerializeParameter", 0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x3d1bb14fe8393f24L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.origin("r:3c30b5c5-2f86-4daf-bab8-b406cfefcb4f(jetbrains.mps.ide.httpsupport.structure)/4403308017441390372");
    b.alias("value");
    return b.create();
  }
}
