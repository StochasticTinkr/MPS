package jetbrains.mps.ide.httpsupport.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_CanHandleRequestFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DeserializeFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HandleRequestFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HttpRequestOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HttpRequestParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterConverter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryPath = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QuerySegment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequestHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequestType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequestURIBuilderExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResponseSendOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SerializeFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SerializedValueParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ValueToSerializeParameter = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("817e4e70-961e-4a95-98a1-15e9f32231f1"), "jetbrains.mps.ide.httpsupport")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_CanHandleRequestFunction;
      case 1:
        return props_DeserializeFunction;
      case 2:
        return props_HandleRequestFunction;
      case 3:
        return props_HttpRequestOperation;
      case 4:
        return props_HttpRequestParameter;
      case 5:
        return props_ParameterConverter;
      case 6:
        return props_ParameterInitializer;
      case 7:
        return props_QueryParameter;
      case 8:
        return props_QueryParameterReference;
      case 9:
        return props_QueryPath;
      case 10:
        return props_QuerySegment;
      case 11:
        return props_RequestHandler;
      case 12:
        return props_RequestType;
      case 13:
        return props_RequestURIBuilderExpression;
      case 14:
        return props_ResponseSendOperation;
      case 15:
        return props_SerializeFunction;
      case 16:
        return props_SerializedValueParameter;
      case 17:
        return props_ValueToSerializeParameter;
    }
    throw new IllegalStateException();
  }
}
