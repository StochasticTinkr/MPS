package jetbrains.mps.ide.httpsupport.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_CanHandleRequestFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HandleRequestFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HttpRequestParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequestHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResponseSendStatement = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("817e4e70-961e-4a95-98a1-15e9f32231f1"), "jetbrains.mps.ide.httpsupport")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_CanHandleRequestFunction;
      case 1:
        return props_HandleRequestFunction;
      case 2:
        return props_HttpRequestParameter;
      case 3:
        return props_QueryParameter;
      case 4:
        return props_QueryParameterReference;
      case 5:
        return props_RequestHandler;
      case 6:
        return props_ResponseSendStatement;
    }
    throw new IllegalStateException();
  }
}
