package jetbrains.mps.ide.httpsupport.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_CanHandleRequestFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultParameterConverter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultValueFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DeserializeFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HandleRequestFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HttpRequestOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HttpRequestParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IDEAPlatformPortProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IParameterConverter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MPSIntegrationPortProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MPSInternalPortProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_getURLOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterConverterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterConverterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Port = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PortProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryPath = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QuerySegment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequestHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequestType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequestURLBuilderExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResponseSendOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SerializeFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SerializedValueParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ValueToSerializeParameter = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.CanHandleRequestFunction:
        return props_CanHandleRequestFunction;
      case LanguageConceptSwitch.DefaultParameterConverter:
        return props_DefaultParameterConverter;
      case LanguageConceptSwitch.DefaultValueFunction:
        return props_DefaultValueFunction;
      case LanguageConceptSwitch.DeserializeFunction:
        return props_DeserializeFunction;
      case LanguageConceptSwitch.HandleRequestFunction:
        return props_HandleRequestFunction;
      case LanguageConceptSwitch.HttpRequestOperation:
        return props_HttpRequestOperation;
      case LanguageConceptSwitch.HttpRequestParameter:
        return props_HttpRequestParameter;
      case LanguageConceptSwitch.IDEAPlatformPortProvider:
        return props_IDEAPlatformPortProvider;
      case LanguageConceptSwitch.IParameterConverter:
        return props_IParameterConverter;
      case LanguageConceptSwitch.MPSIntegrationPortProvider:
        return props_MPSIntegrationPortProvider;
      case LanguageConceptSwitch.MPSInternalPortProvider:
        return props_MPSInternalPortProvider;
      case LanguageConceptSwitch.Node_getURLOperation:
        return props_Node_getURLOperation;
      case LanguageConceptSwitch.ParameterConverterDeclaration:
        return props_ParameterConverterDeclaration;
      case LanguageConceptSwitch.ParameterConverterReference:
        return props_ParameterConverterReference;
      case LanguageConceptSwitch.ParameterInitializer:
        return props_ParameterInitializer;
      case LanguageConceptSwitch.Port:
        return props_Port;
      case LanguageConceptSwitch.PortProvider:
        return props_PortProvider;
      case LanguageConceptSwitch.QueryParameter:
        return props_QueryParameter;
      case LanguageConceptSwitch.QueryParameterReference:
        return props_QueryParameterReference;
      case LanguageConceptSwitch.QueryPath:
        return props_QueryPath;
      case LanguageConceptSwitch.QuerySegment:
        return props_QuerySegment;
      case LanguageConceptSwitch.RequestHandler:
        return props_RequestHandler;
      case LanguageConceptSwitch.RequestType:
        return props_RequestType;
      case LanguageConceptSwitch.RequestURLBuilderExpression:
        return props_RequestURLBuilderExpression;
      case LanguageConceptSwitch.ResponseSendOperation:
        return props_ResponseSendOperation;
      case LanguageConceptSwitch.SerializeFunction:
        return props_SerializeFunction;
      case LanguageConceptSwitch.SerializedValueParameter:
        return props_SerializedValueParameter;
      case LanguageConceptSwitch.ValueToSerializeParameter:
        return props_ValueToSerializeParameter;
    }
    return null;
  }
}
