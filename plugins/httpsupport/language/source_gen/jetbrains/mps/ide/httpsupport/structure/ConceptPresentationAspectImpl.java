package jetbrains.mps.ide.httpsupport.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_CanHandleRequestFunction;
  private ConceptPresentation props_DefaultParameterConverter;
  private ConceptPresentation props_DefaultValueFunction;
  private ConceptPresentation props_DeserializeFunction;
  private ConceptPresentation props_HandleRequestFunction;
  private ConceptPresentation props_HttpRequestOperation;
  private ConceptPresentation props_HttpRequestParameter;
  private ConceptPresentation props_IDEAPlatformPortProvider;
  private ConceptPresentation props_IParameterConverter;
  private ConceptPresentation props_MPSIntegrationPortProvider;
  private ConceptPresentation props_MPSInternalPortProvider;
  private ConceptPresentation props_Node_getURLOperation;
  private ConceptPresentation props_ParameterConverterDeclaration;
  private ConceptPresentation props_ParameterConverterReference;
  private ConceptPresentation props_ParameterInitializer;
  private ConceptPresentation props_Port;
  private ConceptPresentation props_PortProvider;
  private ConceptPresentation props_QueryParameter;
  private ConceptPresentation props_QueryParameterReference;
  private ConceptPresentation props_QueryPath;
  private ConceptPresentation props_QuerySegment;
  private ConceptPresentation props_RequestHandler;
  private ConceptPresentation props_RequestType;
  private ConceptPresentation props_RequestURLBuilderExpression;
  private ConceptPresentation props_ResponseSendOperation;
  private ConceptPresentation props_SerializeFunction;
  private ConceptPresentation props_SerializedValueParameter;
  private ConceptPresentation props_ValueToSerializeParameter;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.CanHandleRequestFunction:
        if (props_CanHandleRequestFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Checks that handler can handle given HTTP Request");
          cpb.rawPresentation("canHandle");
          props_CanHandleRequestFunction = cpb.create();
        }
        return props_CanHandleRequestFunction;
      case LanguageConceptSwitch.DefaultParameterConverter:
        if (props_DefaultParameterConverter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Default Parameter Converter");
          cpb.rawPresentation("default");
          props_DefaultParameterConverter = cpb.create();
        }
        return props_DefaultParameterConverter;
      case LanguageConceptSwitch.DefaultValueFunction:
        if (props_DefaultValueFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("default");
          props_DefaultValueFunction = cpb.create();
        }
        return props_DefaultValueFunction;
      case LanguageConceptSwitch.DeserializeFunction:
        if (props_DeserializeFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("deserialize");
          props_DeserializeFunction = cpb.create();
        }
        return props_DeserializeFunction;
      case LanguageConceptSwitch.HandleRequestFunction:
        if (props_HandleRequestFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Handle given HTTP Request");
          cpb.rawPresentation("handle");
          props_HandleRequestFunction = cpb.create();
        }
        return props_HandleRequestFunction;
      case LanguageConceptSwitch.HttpRequestOperation:
        if (props_HttpRequestOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_HttpRequestOperation = cpb.create();
        }
        return props_HttpRequestOperation;
      case LanguageConceptSwitch.HttpRequestParameter:
        if (props_HttpRequestParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Incoming HTTP Request");
          cpb.rawPresentation("request");
          props_HttpRequestParameter = cpb.create();
        }
        return props_HttpRequestParameter;
      case LanguageConceptSwitch.IDEAPlatformPortProvider:
        if (props_IDEAPlatformPortProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("current bound port by IDEA Platform");
          cpb.rawPresentation("IDEA Platform port");
          props_IDEAPlatformPortProvider = cpb.create();
        }
        return props_IDEAPlatformPortProvider;
      case LanguageConceptSwitch.IParameterConverter:
        if (props_IParameterConverter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IParameterConverter = cpb.create();
        }
        return props_IParameterConverter;
      case LanguageConceptSwitch.MPSIntegrationPortProvider:
        if (props_MPSIntegrationPortProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("current bound port by MPS to integrate with YouTrack/TeamCity");
          cpb.rawPresentation("MPS Integration port");
          props_MPSIntegrationPortProvider = cpb.create();
        }
        return props_MPSIntegrationPortProvider;
      case LanguageConceptSwitch.MPSInternalPortProvider:
        if (props_MPSInternalPortProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("current bound port by MPS for internal features");
          cpb.rawPresentation("MPS Internal Port");
          props_MPSInternalPortProvider = cpb.create();
        }
        return props_MPSInternalPortProvider;
      case LanguageConceptSwitch.Node_getURLOperation:
        if (props_Node_getURLOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("provides URL to this node");
          cpb.rawPresentation("getURL");
          props_Node_getURLOperation = cpb.create();
        }
        return props_Node_getURLOperation;
      case LanguageConceptSwitch.ParameterConverterDeclaration:
        if (props_ParameterConverterDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ParameterConverterDeclaration = cpb.create();
        }
        return props_ParameterConverterDeclaration;
      case LanguageConceptSwitch.ParameterConverterReference:
        if (props_ParameterConverterReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x46f064803fbdb465L);
          cpb.shortDesc("Parameter Converter");
          cpb.presentationByReference(0x46f064803fbdb466L, "declaration", "", "");
          props_ParameterConverterReference = cpb.create();
        }
        return props_ParameterConverterReference;
      case LanguageConceptSwitch.ParameterInitializer:
        if (props_ParameterInitializer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x4027f9073ff5cf17L);
          cpb.presentationByReference(0x4027f9073ff5cf18L, "parameter", "", "");
          props_ParameterInitializer = cpb.create();
        }
        return props_ParameterInitializer;
      case LanguageConceptSwitch.Port:
        if (props_Port == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("port defined by user");
          cpb.rawPresentation("custom port");
          props_Port = cpb.create();
        }
        return props_Port;
      case LanguageConceptSwitch.PortProvider:
        if (props_PortProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PortProvider = cpb.create();
        }
        return props_PortProvider;
      case LanguageConceptSwitch.QueryParameter:
        if (props_QueryParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Query Parameter");
          cpb.presentationByName();
          props_QueryParameter = cpb.create();
        }
        return props_QueryParameter;
      case LanguageConceptSwitch.QueryParameterReference:
        if (props_QueryParameterReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x817e4e70961e4a95L, 0x98a115e9f32231f1L, 0x205f4376c5884e95L);
          cpb.shortDesc("reference to query parameter");
          cpb.presentationByReference(0x205f4376c5884e96L, "queryParameter", "", "");
          props_QueryParameterReference = cpb.create();
        }
        return props_QueryParameterReference;
      case LanguageConceptSwitch.QueryPath:
        if (props_QueryPath == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("QueryPath");
          props_QueryPath = cpb.create();
        }
        return props_QueryPath;
      case LanguageConceptSwitch.QuerySegment:
        if (props_QuerySegment == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("query segment");
          cpb.rawPresentation("/");
          props_QuerySegment = cpb.create();
        }
        return props_QuerySegment;
      case LanguageConceptSwitch.RequestHandler:
        if (props_RequestHandler == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RequestHandler = cpb.create();
        }
        return props_RequestHandler;
      case LanguageConceptSwitch.RequestType:
        if (props_RequestType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("request");
          props_RequestType = cpb.create();
        }
        return props_RequestType;
      case LanguageConceptSwitch.RequestURLBuilderExpression:
        if (props_RequestURLBuilderExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("request URL");
          props_RequestURLBuilderExpression = cpb.create();
        }
        return props_RequestURLBuilderExpression;
      case LanguageConceptSwitch.ResponseSendOperation:
        if (props_ResponseSendOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("send response");
          props_ResponseSendOperation = cpb.create();
        }
        return props_ResponseSendOperation;
      case LanguageConceptSwitch.SerializeFunction:
        if (props_SerializeFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("serialize");
          props_SerializeFunction = cpb.create();
        }
        return props_SerializeFunction;
      case LanguageConceptSwitch.SerializedValueParameter:
        if (props_SerializedValueParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Serialized Value");
          cpb.rawPresentation("string");
          props_SerializedValueParameter = cpb.create();
        }
        return props_SerializedValueParameter;
      case LanguageConceptSwitch.ValueToSerializeParameter:
        if (props_ValueToSerializeParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Value to Serialize");
          cpb.rawPresentation("value");
          props_ValueToSerializeParameter = cpb.create();
        }
        return props_ValueToSerializeParameter;
    }
    return null;
  }
}
