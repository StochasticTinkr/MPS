package jetbrains.mps.ide.modelchecker.actions;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import jetbrains.mps.icons.MPSIcons;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import java.util.List;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import jetbrains.mps.ide.modelchecker.platform.actions.ModelCheckerTool;
import java.util.ArrayList;

public class CheckModule_Action extends BaseAction {
  private static final Icon ICON = MPSIcons.General.ModelChecker;

  public CheckModule_Action() {
    super("Check [Module]", "Check [module] for structure and typesystem rules", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
    this.addPlace(null);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    List<SModule> modulesToCheck = CheckModule_Action.this.modules2check(_params);

    String whatToCheck = "Module";

    if (modulesToCheck.size() == 1) {
      whatToCheck = modulesToCheck.get(0).getClass().getSimpleName();
    } else if (modulesToCheck.size() > 1) {
      whatToCheck = modulesToCheck.size() + " Modules";
    }

    event.getPresentation().setText("Check " + whatToCheck);
    event.getPresentation().setDescription("Check " + whatToCheck.toLowerCase() + " for structure and typesystem rules");
    event.getPresentation().setEnabled(!(modulesToCheck.isEmpty()));

  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SModule p = event.getData(MPSCommonDataKeys.CONTEXT_MODULE);
      MapSequence.fromMap(_params).put("module", p);
    }
    {
      List<SModule> p = event.getData(MPSCommonDataKeys.MODULES);
      MapSequence.fromMap(_params).put("modules", p);
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    List<SModule> modulesToCheck = CheckModule_Action.this.modules2check(_params);

    if (modulesToCheck.isEmpty()) {
      return;
    }

    ModelCheckerTool.getInstance(((Project) MapSequence.fromMap(_params).get("project"))).checkModulesAndShowResult(modulesToCheck);
  }
  /*package*/ List<SModule> modules2check(final Map<String, Object> _params) {
    List<SModule> modulesToCheck = new ArrayList<SModule>();
    if (((List<SModule>) MapSequence.fromMap(_params).get("modules")) != null) {
      modulesToCheck.addAll(((List<SModule>) MapSequence.fromMap(_params).get("modules")));
    }
    if (((SModule) MapSequence.fromMap(_params).get("module")) != null && !(modulesToCheck.contains(((SModule) MapSequence.fromMap(_params).get("module"))))) {
      modulesToCheck.add(((SModule) MapSequence.fromMap(_params).get("module")));
    }
    return modulesToCheck;
  }
}
