package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import com.intellij.openapi.components.BaseComponent;
import java.util.List;
import jetbrains.mps.checkers.IChecker;
import jetbrains.mps.ide.MPSCoreComponents;
import jetbrains.mps.errors.CheckerRegistry;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class SpecificCheckersComponent implements BaseComponent {
  private List<IChecker<?, ?>> myCheckers;
  private final MPSCoreComponents myCoreComponents;

  public SpecificCheckersComponent(MPSCoreComponents mpsCore) {
    myCoreComponents = mpsCore;
  }

  @Override
  public void initComponent() {
    CheckerRegistry checkerRegistry = myCoreComponents.getPlatform().findComponent(CheckerRegistry.class);
    if (checkerRegistry == null) {
      return;
    }
    myCheckers = ListSequence.fromListAndArray(new ArrayList<IChecker<?, ?>>(), new UnresolvedReferencesChecker(), new GeneratorTemplatesChecker());
    for (IChecker<?, ?> checker : ListSequence.fromList(myCheckers)) {
      checkerRegistry.registerChecker(checker);
    }
  }
  @Override
  public void disposeComponent() {
    CheckerRegistry checkerRegistry = myCoreComponents.getPlatform().findComponent(CheckerRegistry.class);
    if (checkerRegistry == null) {
      return;
    }
    for (IChecker<?, ?> checker : ListSequence.fromList(myCheckers)) {
      checkerRegistry.unregisterChecker(checker);
    }
  }
}
