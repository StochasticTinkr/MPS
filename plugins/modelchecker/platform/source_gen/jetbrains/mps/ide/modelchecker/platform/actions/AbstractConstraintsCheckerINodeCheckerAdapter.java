package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import java.util.Set;
import jetbrains.mps.checkers.AbstractConstraintsChecker;
import org.jetbrains.mps.util.Condition;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.util.InstanceOfCondition;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.util.Processor;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.util.DescendantsTreeIterator;
import jetbrains.mps.util.Reference;
import jetbrains.mps.checkers.LanguageErrorsCollector;

public class AbstractConstraintsCheckerINodeCheckerAdapter implements INodeChecker {
  private Set<AbstractConstraintsChecker> myRules;
  private Condition<SNode> myStopCondition;

  public static final Condition<SNode> SKIP_CONSTRAINTS_CONDITION = new InstanceOfCondition(MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x50ef06e32fec9043L, "jetbrains.mps.lang.core.structure.ISkipConstraintsChecking"));

  public AbstractConstraintsCheckerINodeCheckerAdapter(@NotNull Condition<SNode> stopCondition, AbstractConstraintsChecker... rules) {
    myRules = SetSequence.fromSetWithValues(new HashSet<AbstractConstraintsChecker>(), Sequence.fromArray(rules));
    myStopCondition = stopCondition;
  }
  public AbstractConstraintsCheckerINodeCheckerAdapter(AbstractConstraintsChecker... rules) {
    this(Condition.FALSE_CONDITION, rules);
  }
  @Override
  public Set<IErrorReporter> getErrors(SNode rootNode, SRepository repository) {
    final Set<IErrorReporter> result = SetSequence.fromSet(new HashSet<IErrorReporter>());
    processErrors(rootNode, repository, new Processor<IErrorReporter>() {
      public boolean process(IErrorReporter error) {
        SetSequence.fromSet(result).addElement(error);
        return true;
      }
    });
    return result;
  }
  @Override
  public void processErrors(SNode rootNode, SRepository repository, final Processor<IErrorReporter> processor) {
    SModel model = SNodeOperations.getModel(rootNode);
    assert model != null;

    DescendantsTreeIterator fullCheckIterator = new DescendantsTreeIterator(rootNode);

    final Reference<Boolean> cancelled = new Reference<Boolean>();

    LanguageErrorsCollector errorsCollector = new LanguageErrorsCollector() {
      public void addError(IErrorReporter errorReporter) {
        cancelled.set(cancelled.get() || processor.process(errorReporter));
      }
    };

    while (fullCheckIterator.hasNext() && !(cancelled.get())) {
      SNode node = fullCheckIterator.next();
      if (myStopCondition.met(node)) {
        fullCheckIterator.skipChildren();
        continue;
      }
      for (AbstractConstraintsChecker checker : myRules) {
        checker.checkNode(node, errorsCollector, repository);
      }
    }
  }
}
