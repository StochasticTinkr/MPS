package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import com.intellij.openapi.components.State;
import com.intellij.openapi.components.Storage;
import com.intellij.openapi.components.PersistentStateComponent;
import com.intellij.openapi.components.ApplicationComponent;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import javax.swing.Icon;
import com.intellij.openapi.application.ApplicationManager;
import java.util.List;
import jetbrains.mps.checkers.IChecker;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.errors.item.IssueKindReportItem;
import jetbrains.mps.validation.ValidationSettings;
import jetbrains.mps.typesystemEngine.checker.TypesystemChecker;
import jetbrains.mps.checkers.ConstraintsChecker;
import jetbrains.mps.checkers.RefScopeChecker;
import jetbrains.mps.checkers.TargetConceptChecker;
import jetbrains.mps.checkers.UsedLanguagesChecker;
import jetbrains.mps.checkers.AbstractNodeCheckerInEditor;
import jetbrains.mps.project.validation.StructureChecker;
import jetbrains.mps.checkers.ModelPropertiesChecker;
import jetbrains.mps.checkers.ModuleChecker;

@State(name = "ModelCheckerSettings", storages = @Storage(value = "modelCheckerSettings.xml")
)
public class ModelCheckerSettings implements PersistentStateComponent<ModelCheckerSettings.MyState>, ApplicationComponent {
  private ModelCheckerSettings.MyState myState = new ModelCheckerSettings.MyState();
  public ModelCheckerSettings() {
  }
  @NonNls
  @NotNull
  @Override
  public String getComponentName() {
    return "Model Checker Settings";
  }
  @Override
  public void initComponent() {
  }
  @Override
  public void disposeComponent() {
  }
  @Override
  public ModelCheckerSettings.MyState getState() {
    return myState;
  }
  @Override
  public void loadState(ModelCheckerSettings.MyState state) {
    myState = state;
  }
  @Nullable
  public Icon getIcon() {
    return null;
  }
  public static ModelCheckerSettings getInstance() {
    return ApplicationManager.getApplication().getComponent(ModelCheckerSettings.class);
  }
  public List<IChecker<?, ?>> getSpecificCheckers(@NotNull Project mpsProject) {
    List<IChecker<?, ?>> result = ListSequence.fromList(new ArrayList<IChecker<?, ?>>());
    IssueKindReportItem.KindLevel checkingLevel = myState.myCheckingLevel.getKindLevel();
    for (IChecker<?, ?> checker : ListSequence.fromList(ValidationSettings.getInstance().getCheckerRegistry().getCheckers())) {
      IssueKindReportItem.KindLevel checkerLevel = checker.getCategory().getKindLevel();
      switch (checkerLevel) {
        case MANUAL:
          if (isIncludeAdditionalChecks()) {
            ListSequence.fromList(result).addElement(checker);
          }
        default:
          if (checkerLevel.compareTo(checkingLevel) <= 0) {
            ListSequence.fromList(result).addElement(checker);
          }
      }
    }

    return result;
  }
  public List<IChecker<?, ?>> getSpecificCheckers_(@NotNull Project mpsProject) {
    List<IChecker<?, ?>> checkers = ListSequence.fromList(new ArrayList<IChecker<?, ?>>());
    switch (myState.myCheckingLevel) {
      case TYPESYSTEM:
        ListSequence.fromList(checkers).addElement(new TypesystemChecker());
      case CONSTRAINTS:
        ListSequence.fromList(checkers).addElement(new ConstraintsChecker());
        ListSequence.fromList(checkers).addElement(new RefScopeChecker());
        ListSequence.fromList(checkers).addElement(new TargetConceptChecker());
        ListSequence.fromList(checkers).addElement(new UsedLanguagesChecker());
      case STRUCTURE:
        ListSequence.fromList(checkers).addElement((AbstractNodeCheckerInEditor) (AbstractNodeCheckerInEditor) new StructureChecker().withoutBrokenReferences());
      default:
        ListSequence.fromList(checkers).addElement(new ModelPropertiesChecker());
        ListSequence.fromList(checkers).addElement(new UnresolvedReferencesChecker(mpsProject));
        ListSequence.fromList(checkers).addElement(new ModuleChecker());
    }

    if (isIncludeAdditionalChecks()) {
      ListSequence.fromList(checkers).addElement(new GeneratorTemplatesChecker());
    }
    return checkers;
  }

  public ModelCheckerSettings.CheckingLevel getCheckingLevel() {
    return myState.myCheckingLevel;
  }
  public void setCheckingLevel(ModelCheckerSettings.CheckingLevel checkingLevel) {
    myState.myCheckingLevel = checkingLevel;
  }
  public boolean isIncludeAdditionalChecks() {
    return myState.myIncludeAdditionalChecks;
  }
  public void setIncludeAdditionalChecks(boolean checkSpecific) {
    myState.myIncludeAdditionalChecks = checkSpecific;
  }
  public boolean isCheckStubs() {
    return myState.myCheckStubs;
  }
  public void setCheckStubs(boolean checkStubs) {
    myState.myCheckStubs = checkStubs;
  }
  public boolean isCheckBeforeCommit() {
    return myState.myCheckBeforeCommit;
  }
  public void setCheckBeforeCommit(boolean checkBeforeCommit) {
    myState.myCheckBeforeCommit = checkBeforeCommit;
  }

  public static class MyState {
    public ModelCheckerSettings.CheckingLevel myCheckingLevel = ModelCheckerSettings.CheckingLevel.TYPESYSTEM;
    public boolean myIncludeAdditionalChecks = true;
    public boolean myCheckBeforeCommit = true;
    public boolean myCheckStubs = false;
    public MyState() {
    }
  }
  public enum CheckingLevel {
    BASIC(IssueKindReportItem.KindLevel.PROJECT, "Basic", "Project structure is correct"),
    STRUCTURE(IssueKindReportItem.KindLevel.STRUCTURE, "Structure", "Code conforms with languages' structure", "Each reference has target"),
    CONSTRAINTS(IssueKindReportItem.KindLevel.CONSTRAINTS, "Constraints", "Code satisfies languages' constraints"),
    TYPESYSTEM(IssueKindReportItem.KindLevel.TYPESYSTEM, "Typesystem", "Code passes typesystem checks");


    private IssueKindReportItem.KindLevel myKindLevel;
    private String myPresentation;
    private String[] myChecks;
    CheckingLevel(IssueKindReportItem.KindLevel kindLevel, String presentation, String... checks) {
      myKindLevel = kindLevel;
      myPresentation = presentation;
      myChecks = checks;
    }
    public IssueKindReportItem.KindLevel getKindLevel() {
      return myKindLevel;
    }
    public String getPresentation() {
      return myPresentation;
    }
    public String getLongDescription() {
      StringBuilder sb = new StringBuilder("Checks that:\n");
      for (int i = 0; i <= this.ordinal(); i++) {
        for (String s : ModelCheckerSettings.CheckingLevel.values()[i].myChecks) {
          sb.append("-").append(s).append("\n");
        }
      }
      return sb.toString();
    }
  }
}
