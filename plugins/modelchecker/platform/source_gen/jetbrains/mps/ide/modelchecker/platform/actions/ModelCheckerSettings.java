package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import com.intellij.openapi.components.State;
import com.intellij.openapi.components.Storage;
import com.intellij.openapi.components.PersistentStateComponent;
import com.intellij.openapi.components.ApplicationComponent;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import javax.swing.Icon;
import com.intellij.openapi.application.ApplicationManager;
import java.util.List;
import jetbrains.mps.project.Project;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.typesystemEngine.checker.TypesystemChecker;
import jetbrains.mps.checkers.LanguageChecker;

@State(name = "ModelCheckerSettings", storages = {@Storage(id = "other", file = "$APP_CONFIG$/modelCheckerSettings.xml")
})
public class ModelCheckerSettings implements PersistentStateComponent<ModelCheckerSettings.MyState>, ApplicationComponent {
  private ModelCheckerSettings.MyState myState = new ModelCheckerSettings.MyState();
  public ModelCheckerSettings() {
  }
  @NonNls
  @NotNull
  @Override
  public String getComponentName() {
    return "Model Checker Settings";
  }
  @Override
  public void initComponent() {
  }
  @Override
  public void disposeComponent() {
  }
  @Override
  public ModelCheckerSettings.MyState getState() {
    return myState;
  }
  @Override
  public void loadState(ModelCheckerSettings.MyState state) {
    myState = state;
    if (!(myState.myCheckTypesystem)) {
      myState.myCheckingLevel = ModelCheckerSettings.CheckingLevel.CONSTRAINTS;
      if (!(myState.myCheckConstraints)) {
        myState.myCheckingLevel = ModelCheckerSettings.CheckingLevel.STRUCTURE;
      }
    }
    myState.myCheckTypesystem = true;
    myState.myCheckConstraints = true;
  }
  @Nullable
  public Icon getIcon() {
    return null;
  }
  public static ModelCheckerSettings getInstance() {
    return ApplicationManager.getApplication().getComponent(ModelCheckerSettings.class);
  }
  public List<SpecificChecker> getSpecificCheckers(@NotNull Project mpsProject) {
    List<SpecificChecker> checkers = ListSequence.fromList(new ArrayList<SpecificChecker>());
    switch (myState.myCheckingLevel) {
      case TYPESYSTEM:
        ListSequence.fromList(checkers).addElement(new INodeCheckerSpecificCheckerAdapter(new TypesystemChecker(), "typesystem", mpsProject.getRepository()));
      case CONSTRAINTS:
        ListSequence.fromList(checkers).addElement(new INodeCheckerSpecificCheckerAdapter(new LanguageChecker(), "constraints", mpsProject.getRepository()));
      case STRUCTURE:
        ListSequence.fromList(checkers).addElement(new StructureChecker());
      default:
        ListSequence.fromList(checkers).addElement(new ModelPropertiesChecker());
        ListSequence.fromList(checkers).addElement(new UnresolvedReferencesChecker(mpsProject));
    }

    if (isCheckSpecific()) {
      ListSequence.fromList(checkers).addElement(new GeneratorTemplatesChecker());
    }
    return checkers;
  }

  public ModelCheckerSettings.CheckingLevel getCheckingLevel() {
    return myState.myCheckingLevel;
  }
  public void setCheckingLevel(ModelCheckerSettings.CheckingLevel checkingLevel) {
    myState.myCheckingLevel = checkingLevel;
  }
  public boolean isCheckSpecific() {
    return myState.myCheckSpecific;
  }
  public void setCheckSpecific(boolean checkSpecific) {
    myState.myCheckSpecific = checkSpecific;
  }
  public boolean isCheckStubs() {
    return myState.myCheckStubs;
  }
  public void setCheckStubs(boolean checkStubs) {
    myState.myCheckStubs = checkStubs;
  }
  public boolean isCheckBeforeCommit() {
    return myState.myCheckBeforeCommit;
  }
  public void setCheckBeforeCommit(boolean checkBeforeCommit) {
    myState.myCheckBeforeCommit = checkBeforeCommit;
  }

  public static class MyState {
    /**
     * 
     * @deprecated remove following 4 fields after 3.3, left just to make settings compatible
     */
    @Deprecated
    public boolean myCheckUnresolvedReferences = true;
    @Deprecated
    public boolean myCheckConstraints = true;
    @Deprecated
    public boolean myCheckModelProperties = true;
    @Deprecated
    public boolean myCheckTypesystem = true;

    public ModelCheckerSettings.CheckingLevel myCheckingLevel = ModelCheckerSettings.CheckingLevel.TYPESYSTEM;
    public boolean myCheckSpecific = true;
    public boolean myCheckBeforeCommit = true;
    public boolean myCheckStubs = false;
    public MyState() {
    }
  }
  public enum CheckingLevel {
    BASIC("Basic", "Project structure is correct", "Each reference has target"),
    STRUCTURE("Structure", "Code conforms with languages' structure"),
    CONSTRAINTS("Constraints", "Code satisfies languages' constraints"),
    TYPESYSTEM("Typesystem", "Code passes typesystem checks");


    private String myPresentation;
    private String[] myChecks;
    CheckingLevel(String presentation, String... checks) {
      myPresentation = presentation;
      myChecks = checks;
    }
    public String getPresentation() {
      return myPresentation;
    }
    public String getLongDescription() {
      StringBuilder sb = new StringBuilder("Checks that:\n");
      for (int i = 0; i <= this.ordinal(); i++) {
        for (String s : ModelCheckerSettings.CheckingLevel.values()[i].myChecks) {
          sb.append("-").append(s).append("\n");
        }
      }
      return sb.toString();
    }
  }
}
