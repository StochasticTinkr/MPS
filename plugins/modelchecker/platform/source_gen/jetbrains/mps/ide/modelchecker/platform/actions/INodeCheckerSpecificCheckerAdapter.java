package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import jetbrains.mps.checkers.INodeChecker;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import jetbrains.mps.errors.QuickFixProvider;
import jetbrains.mps.errors.QuickFix_Runtime;

public class INodeCheckerSpecificCheckerAdapter extends SpecificChecker {
  private final INodeChecker myChecker;
  private final String myCategory;
  private final SRepository myRepository;

  public INodeCheckerSpecificCheckerAdapter(INodeChecker checker, String category, @NotNull SRepository repository) {
    myChecker = checker;
    myCategory = category;
    myRepository = repository;
  }

  public List<SearchResult<ModelCheckerIssue>> checkModel(SModel model, ProgressMonitor monitor) {
    final List<SearchResult<ModelCheckerIssue>> results = ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());

    monitor.start(myCategory, 1);
    for (final SNode rootNode : SModelOperations.roots(model, null)) {
      for (final IErrorReporter errorReporter : SetSequence.fromSet(myChecker.getErrors(rootNode, myRepository))) {
        QuickFixProvider provider = check_m7souj_a0a0a0d0g(errorReporter);
        IModelCheckerFix fix = null;
        if (provider != null) {
          final QuickFix_Runtime quickFix = provider.getQuickFix();
          if (quickFix != null && provider.isExecutedImmediately()) {
            fix = new IModelCheckerFix() {
              public boolean doFix() {
                quickFix.execute(errorReporter.getSNode());
                return true;
              }
            };
          }
        }
        SpecificChecker.addIssue(results, errorReporter.getSNode(), errorReporter.reportError(), SpecificChecker.getResultCategory(errorReporter.getMessageStatus()), myCategory, fix);
      }
    }
    monitor.done();
    return results;
  }
  private static QuickFixProvider check_m7souj_a0a0a0d0g(IErrorReporter checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getIntentionProvider();
    }
    return null;
  }
}
