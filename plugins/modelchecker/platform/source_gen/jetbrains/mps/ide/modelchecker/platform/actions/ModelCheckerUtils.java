package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.project.Project;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.findusages.model.SearchResults;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.ide.findusages.model.SearchResult;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ModelCheckerUtils {
  private ModelCheckerUtils() {
  }
  public static List<SModel> getModelDescriptors(SModule module) {
    List<SModel> modelDescrpitors = ListSequence.fromList(new ArrayList<SModel>());
    for (SModel modelDescriptor : Sequence.fromIterable(module.getModels())) {
      if (SModelStereotype.isUserModel(modelDescriptor)) {
        ListSequence.fromList(modelDescrpitors).addElement(modelDescriptor);
      }
      if (ModelCheckerSettings.getInstance().isCheckStubs() && SModelStereotype.isStubModelStereotype(SModelStereotype.getStereotype(modelDescriptor))) {
        ListSequence.fromList(modelDescrpitors).addElement(modelDescriptor);
      }
    }
    if (module instanceof Language) {
      Language language = (Language) module;
      for (Generator generator : CollectionSequence.fromCollection(language.getGenerators())) {
        ListSequence.fromList(modelDescrpitors).addSequence(ListSequence.fromList(getModelDescriptors(generator)));
      }
    }
    return modelDescrpitors;
  }
  public static List<SModel> getModelDescriptors(Iterable<SModule> modules) {
    List<SModel> modelDescrpitors = ListSequence.fromList(new ArrayList<SModel>());
    for (SModule module : Sequence.fromIterable(modules)) {
      ListSequence.fromList(modelDescrpitors).addSequence(ListSequence.fromList(getModelDescriptors(module)));
    }
    return modelDescrpitors;
  }
  public static List<SModel> getModelDescriptors(Project project) {
    return getModelDescriptors(project.getProjectModules());
  }
  public static int getIssueCountForSeverity(@NotNull SearchResults<ModelCheckerIssue> issues, @Nullable String severity) {
    if (severity == null) {
      return 0;
    }
    int issueCount = 0;
    for (SearchResult<ModelCheckerIssue> issue : ListSequence.fromList(issues.getSearchResults())) {
      if (severity.equals(issue.getCategories().get(0).o2)) {
        issueCount++;
      }
    }
    return issueCount;
  }
  public static boolean isDeclaredLink(SNode linkDeclaration, boolean child) {
    return ((linkDeclaration != null) && child ? SPropertyOperations.hasValue(linkDeclaration, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf980556927L, "metaClass"), "aggregation", "reference") : SPropertyOperations.hasValue(linkDeclaration, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf980556927L, "metaClass"), "reference", "reference"));
  }
}
