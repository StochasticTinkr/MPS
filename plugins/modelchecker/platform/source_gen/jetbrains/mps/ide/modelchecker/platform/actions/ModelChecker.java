package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import jetbrains.mps.checkers.IChecker;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.errors.item.IssueKindReportItem;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import java.util.List;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.mps.openapi.util.Consumer;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.SModule;
import org.apache.log4j.Level;
import org.jetbrains.mps.openapi.util.SubProgressKind;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.errors.item.NodeReportItem;

public class ModelChecker implements IChecker<SModel, IssueKindReportItem> {
  private static final Logger LOG = LogManager.getLogger(ModelChecker.class);
  private final List<SpecificChecker> mySpecificCheckers;
  public ModelChecker(@NotNull List<SpecificChecker> specificCheckers) {
    mySpecificCheckers = specificCheckers;
  }
  @Override
  public void check(SModel toCheck, SRepository repository, Consumer<IssueKindReportItem> errorCollector, ProgressMonitor monitor) {
    List<? extends IssueKindReportItem> errors = checkModel(toCheck, monitor);
    for (IssueKindReportItem error : ListSequence.fromList(errors)) {
      errorCollector.consume(error);
    }
  }
  public List<IssueKindReportItem> checkModel(final SModel model, ProgressMonitor monitor) {
    monitor.start("Checking " + model.getName(), ListSequence.fromList(mySpecificCheckers).count());
    List<IssueKindReportItem> results = ListSequence.fromList(new ArrayList<IssueKindReportItem>());
    try {
      SModule module = model.getModule();

      if (module == null) {
        if (LOG.isEnabledFor(Level.WARN)) {
          LOG.warn("Module is null for " + model.getName() + " model");
        }
        return results;
      }

      for (final SpecificChecker specificChecker : ListSequence.fromList(mySpecificCheckers)) {
        try {
          List<? extends IssueKindReportItem> specificCheckerResults = specificChecker.checkModel(model, monitor.subTask(1, SubProgressKind.AS_COMMENT));
          ListSequence.fromList(results).addSequence(ListSequence.fromList(specificCheckerResults).where(new IWhereFilter<IssueKindReportItem>() {
            public boolean accept(IssueKindReportItem it) {
              SNodeReference node = NodeReportItem.FLAVOUR_NODE.tryToGet(it);
              if (node != null) {
                if (ModelCheckerIssueFinder.filterIssue(node.resolve(model.getRepository()))) {
                  return true;
                } else {
                  if (LOG.isEnabledFor(Level.ERROR)) {
                    LOG.error("Specific checker " + specificChecker + " returned error that is supposed to be skipped. Node " + node.getNodeId() + " in model " + node.getModelReference());
                  }
                  return false;
                }
              } else {
                return true;
              }
            }
          }));
        } catch (Throwable t) {
          if (LOG.isEnabledFor(Level.ERROR)) {
            LOG.error("Error while " + model.getName() + " model checking", t);
          }
        }
        if (monitor.isCanceled()) {
          break;
        }
      }
      return results;
    } finally {
      monitor.done();
    }
  }
}
