package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import com.intellij.openapi.vcs.checkin.CheckinHandler;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.vcs.CheckinProjectPanel;
import org.jetbrains.annotations.Nullable;
import com.intellij.openapi.vcs.ui.RefreshableOnComponent;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JPanel;
import java.awt.GridLayout;
import java.util.List;
import org.jetbrains.mps.openapi.model.SModel;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.project.ProjectHelper;
import jetbrains.mps.ide.vfs.IdeaFileSystem;
import jetbrains.mps.smodel.SModelFileTracker;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.NotNullWhereFilter;
import com.intellij.openapi.vcs.checkin.CheckinHandlerFactory;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.vcs.changes.CommitContext;

public class ModelCheckerCheckinHandler extends CheckinHandler {
  private Project myProject;
  private CheckinProjectPanel myPanel;
  public ModelCheckerCheckinHandler(Project project, CheckinProjectPanel panel) {
    myProject = project;
    myPanel = panel;
  }
  @Nullable
  @Override
  public RefreshableOnComponent getBeforeCheckinConfigurationPanel() {
    final JCheckBox checkModelCheckBox = new JCheckBox("Perform check for affected models");
    return new RefreshableOnComponent() {
      @Override
      public JComponent getComponent() {
        JPanel panel = new JPanel(new GridLayout(1, 0));
        panel.add(checkModelCheckBox);
        return panel;
      }
      @Override
      public void restoreState() {
        checkModelCheckBox.setSelected(ModelCheckerSettings.getInstance().isCheckBeforeCommit());
      }
      @Override
      public void saveState() {
        ModelCheckerSettings.getInstance().setCheckBeforeCommit(checkModelCheckBox.isSelected());
      }
      @Override
      public void refresh() {
      }
    };
  }
  @Override
  public CheckinHandler.ReturnResult beforeCheckin() {
    if (!(ModelCheckerSettings.getInstance().isCheckBeforeCommit())) {
      return CheckinHandler.ReturnResult.COMMIT;
    }

    return ModelCheckerTool.getInstance(myProject).checkModelsBeforeCommit(getModelsByFiles(myPanel.getVirtualFiles()));
  }
  private List<SModel> getModelsByFiles(Iterable<VirtualFile> files) {
    final MPSProject mpsProject = ProjectHelper.fromIdeaProject(myProject);
    final IdeaFileSystem fs = mpsProject.getFileSystem();
    final SModelFileTracker ft = SModelFileTracker.getInstance(mpsProject.getRepository());
    return Sequence.fromIterable(files).select(new ISelector<VirtualFile, SModel>() {
      public SModel select(VirtualFile file) {
        return ft.findModel(fs.fromVirtualFile(file));
      }
    }).where(new NotNullWhereFilter<SModel>()).toListSequence();
  }

  public static class ModelCheckerCheckinHandlerFactory extends CheckinHandlerFactory {
    public ModelCheckerCheckinHandlerFactory() {
    }
    @NotNull
    @Override
    public CheckinHandler createHandler(CheckinProjectPanel panel, CommitContext commitContext) {
      return new ModelCheckerCheckinHandler(panel.getProject(), panel);
    }
  }
}
