package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.project.validation.SuppressingAwareProcessorDecorator;
import org.jetbrains.mps.openapi.util.Processor;
import jetbrains.mps.project.validation.NodeValidationProblem;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.project.validation.ValidationUtil;

public class StructureChecker extends SpecificChecker {
  public StructureChecker() {
  }
  @Override
  public List<SearchResult<ModelCheckerIssue>> checkModel(SModel model, final ProgressMonitor monitor) {
    monitor.start("structure", 1);
    final List<SearchResult<ModelCheckerIssue>> results = ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());
    SuppressingAwareProcessorDecorator processor = new SuppressingAwareProcessorDecorator(new Processor<NodeValidationProblem>() {
      public boolean process(NodeValidationProblem vp) {
        if (monitor.isCanceled()) {
          return false;
        }
        SpecificChecker.addIssue(results, vp.getNode(), vp.getMessage(), ModelChecker.SEVERITY_ERROR, "structure error", null);
        return true;
      }
    });
    for (SNode node : ListSequence.fromList(SModelOperations.nodes(model, null))) {
      ValidationUtil.validateSingleNode(node, processor);
    }
    monitor.done();

    return results;
  }
}
