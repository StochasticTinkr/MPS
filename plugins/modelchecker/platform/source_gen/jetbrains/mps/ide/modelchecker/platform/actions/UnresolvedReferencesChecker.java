package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import jetbrains.mps.project.Project;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.errors.item.IssueKindReportItem;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.project.dependency.VisibilityUtil;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.model.SNodeUtil;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.AttributeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.IAttributeDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.errors.item.UnresolvedReferenceReportItem;
import jetbrains.mps.resolve.ResolverComponent;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.errors.item.TargetModuleNotImportedReportItem;
import jetbrains.mps.checkers.ModuleImportQuickFix;

public class UnresolvedReferencesChecker extends SpecificChecker {
  private final Project myProject;
  public UnresolvedReferencesChecker(@NotNull Project mpsProject) {
    myProject = mpsProject;
  }
  @Override
  public List<? extends IssueKindReportItem> checkModel(SModel model, ProgressMonitor monitor) {
    List<IssueKindReportItem> results = ListSequence.fromList(new ArrayList<IssueKindReportItem>());
    if (model == null || model.getModule() == null) {
      return results;
    }
    VisibilityUtil visibilityHelper = VisibilityUtil.forModel(model);
    for (SNode node : SNodeUtil.getDescendants(model)) {
      if (monitor.isCanceled()) {
        break;
      }
      // Check for unresolved references 
      for (final SReference ref : ListSequence.fromList(SNodeOperations.getReferences(node))) {
        if ((AttributeOperations.getAttribute(node, new IAttributeDescriptor.LinkAttribute(MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfd7f44d616L, "jetbrains.mps.lang.generator.structure.ReferenceMacro"), ref.getLink())) != null)) {
          continue;
        }
        if (jetbrains.mps.util.SNodeOperations.getTargetNodeSilently(ref) == null) {
          ListSequence.fromList(results).addElement(new UnresolvedReferenceReportItem(ref, new Runnable() {
            public void run() {
              ResolverComponent.getInstance().resolve(ref, myProject.getRepository());
            }
          }));
        }
        SModelReference mref = ref.getTargetSModelReference();
        if (mref == null) {
          continue;
        }
        SModel m = mref.resolve(myProject.getRepository());
        if (m == null) {
          continue;
        }
        if (visibilityHelper.isVisible(m)) {
          continue;
        }
        ListSequence.fromList(results).addElement(new TargetModuleNotImportedReportItem(ref, m.getModule().getModuleReference(), new ModuleImportQuickFix(ref)));
      }
    }
    return results;
  }
  @Override
  public IssueKindReportItem.CheckerCategory getCategory() {
    return IssueKindReportItem.UNRESOLVED_REFERENCE;
  }
}
