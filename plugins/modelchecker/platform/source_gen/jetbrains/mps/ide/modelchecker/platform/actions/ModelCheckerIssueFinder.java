package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.BaseFinder;
import java.util.List;
import java.util.Arrays;
import jetbrains.mps.ide.findusages.model.SearchResults;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.ide.findusages.model.holders.IHolder;
import org.jetbrains.mps.openapi.module.SearchScope;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.ide.findusages.model.holders.ModelsHolder;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.mps.openapi.util.SubProgressKind;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.checkers.ErrorReportUtil;
import jetbrains.mps.internal.collections.runtime.IVisitor;

public class ModelCheckerIssueFinder extends BaseFinder {
  private final List<SpecificChecker> myExtraCheckers;

  public ModelCheckerIssueFinder(List<SpecificChecker> extraCheckers) {
    myExtraCheckers = extraCheckers;
  }
  public ModelCheckerIssueFinder(SpecificChecker... extraCheckers) {
    this(Arrays.asList(extraCheckers));
  }
  protected final List<SpecificChecker> getSpecificCheckers() {
    return myExtraCheckers;
  }
  @Override
  public SearchResults find(SearchQuery searchQuery, ProgressMonitor monitor) {
    IHolder objectHolder = searchQuery.getObjectHolder();
    final SearchScope scope = searchQuery.getScope();
    List<SModel> models = ListSequence.fromList(new ArrayList<SModel>());
    List<SModule> modules = ListSequence.fromList(new ArrayList<SModule>());
    if (objectHolder instanceof ModelsHolder) {
      ModelsHolder modelsHolder = (ModelsHolder) objectHolder;
      for (SModelReference ref : modelsHolder.getObject()) {
        SModel resolved = scope.resolve(ref);
        if (resolved != null) {
          ListSequence.fromList(models).addElement(resolved);
        }
      }
    } else if (objectHolder.getObject() instanceof SModuleReference) {
      SModuleReference mr = (SModuleReference) objectHolder.getObject();
      SModule resolved = scope.resolve(mr);
      if (resolved != null) {
        ListSequence.fromList(modules).addElement(resolved);
        ListSequence.fromList(models).addSequence(ListSequence.fromList(ModelCheckerUtils.getModelDescriptors(resolved)));
      }
    } else if (objectHolder.getObject() instanceof SModelReference) {
      SModelReference mr = (SModelReference) objectHolder.getObject();
      SModel resolved = scope.resolve(mr);
      if (resolved != null) {
        ListSequence.fromList(models).addElement(resolved);
      }
    } else {
      throw new IllegalArgumentException();
    }

    int work = ListSequence.fromList(modules).count() + ListSequence.fromList(models).count() + 1;
    monitor.start("Checking", work);

    try {
      final SearchResults<ModelCheckerIssue> rv = new SearchResults<ModelCheckerIssue>();
      if (!(ListSequence.fromList(modules).isEmpty())) {
        ModuleChecker moduleChecker = new ModuleChecker();
        for (SModule module : ListSequence.fromList(modules)) {
          moduleChecker.checkModule(module, monitor.subTask(1, SubProgressKind.REPLACING));
          if (monitor.isCanceled()) {
            break;
          }
        }
        rv.addAll(moduleChecker.getSearchResults());
      }
      monitor.advance(0);

      ModelChecker modelChecker = new ModelChecker(getSpecificCheckers());
      monitor.advance(1);
      for (SModel modelDescriptor : ListSequence.fromList(models)) {
        modelChecker.checkModel(modelDescriptor, monitor.subTask(1, SubProgressKind.REPLACING));
        if (monitor.isCanceled()) {
          break;
        }
      }
      rv.addAll(modelChecker.getSearchResults());

      // filter out suppressed 
      List<SearchResult<ModelCheckerIssue>> toRemove = ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());
      for (SearchResult<ModelCheckerIssue> result : ListSequence.fromList(rv.getSearchResults())) {
        if (result.getObject() instanceof ModelCheckerIssue.NodeIssue) {
          ModelCheckerIssue.NodeIssue mci = (ModelCheckerIssue.NodeIssue) result.getObject();
          if (!(ErrorReportUtil.shouldReportError(mci.getNode()))) {
            ListSequence.fromList(toRemove).addElement(result);
          }
        }
      }
      ListSequence.fromList(toRemove).visitAll(new IVisitor<SearchResult<ModelCheckerIssue>>() {
        public void visit(SearchResult<ModelCheckerIssue> it) {
          rv.remove(it);
        }
      });

      return rv;
    } finally {
      monitor.done();
    }
  }
}
