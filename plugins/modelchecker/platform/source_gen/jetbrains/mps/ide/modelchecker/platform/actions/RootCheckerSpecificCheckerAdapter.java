package jetbrains.mps.ide.modelchecker.platform.actions;

/*Generated by MPS */

import jetbrains.mps.checkers.IRootChecker;
import org.jetbrains.mps.openapi.module.SRepository;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.errors.item.NodeReportItem;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.errors.QuickFix_Runtime;
import jetbrains.mps.errors.item.TypesystemReportItemAdapter;
import org.jetbrains.mps.openapi.model.SNodeReference;
import java.util.List;
import jetbrains.mps.ide.findusages.model.SearchResult;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.util.Processor;

public class RootCheckerSpecificCheckerAdapter extends SpecificChecker {
  private final IRootChecker myChecker;
  private final String myCategory;
  private final SRepository myRepository;

  public RootCheckerSpecificCheckerAdapter(IRootChecker checker, String category, @NotNull SRepository repository) {
    myChecker = checker;
    myCategory = category;
    myRepository = repository;
  }

  public IModelCheckerFix getFix(NodeReportItem nodeReportItem) {
    final SNode reporterNode = nodeReportItem.getNode();
    final QuickFix_Runtime quickfix = TypesystemReportItemAdapter.FLAVOUR_QUICKFIX.getAutoApplicable(nodeReportItem);
    if (reporterNode != null && quickfix != null) {
      final SNodeReference reporterNodeRef = reporterNode.getReference();
      return new IModelCheckerFix() {
        public boolean doFix() {
          SNode resolved = reporterNodeRef.resolve(myRepository);
          if (resolved != null) {
            quickfix.execute(reporterNode);
            return true;
          } else {
            return false;
          }
        }
      };
    }
    return null;
  }

  public List<SearchResult<ModelCheckerIssue>> checkModel(SModel model, final ProgressMonitor monitor) {
    final List<SearchResult<ModelCheckerIssue>> results = ListSequence.fromList(new ArrayList<SearchResult<ModelCheckerIssue>>());

    monitor.start(myCategory, 1);
    for (final SNode rootNode : SModelOperations.roots(model, null)) {
      myChecker.processErrors(rootNode, myRepository, new Processor<NodeReportItem>() {
        public boolean process(NodeReportItem reportItem) {
          SpecificChecker.addIssue(results, reportItem.getNode(), reportItem.getMessage(), SpecificChecker.getResultCategory(reportItem.getSeverity()), myCategory, getFix(reportItem));
          return !(monitor.isCanceled());
        }
      });
    }
    monitor.done();
    return results;
  }

}
