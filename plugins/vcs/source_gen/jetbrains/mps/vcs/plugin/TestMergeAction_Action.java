package jetbrains.mps.vcs.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.actionSystem.CommonDataKeys;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import org.jetbrains.annotations.NotNull;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.vfs.VirtualFile;
import javax.swing.SwingUtilities;
import com.intellij.openapi.fileChooser.FileChooser;
import jetbrains.mps.smodel.SModel;
import jetbrains.mps.vcs.platform.util.MergeBackupUtil;
import java.io.File;
import jetbrains.mps.vcs.util.MergeVersion;
import com.intellij.openapi.diff.SimpleContent;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.persistence.def.ModelPersistence;
import jetbrains.mps.fileTypes.MPSFileTypeFactory;

public class TestMergeAction_Action extends BaseAction {
  private static final Icon ICON = null;
  public TestMergeAction_Action() {
    super("Merge test data from ZIP", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(true);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      Project p = event.getData(CommonDataKeys.PROJECT);
      MapSequence.fromMap(_params).put("project", p);
      if (p == null) {
        return false;
      }
    }
    {
      MPSProject p = event.getData(MPSCommonDataKeys.MPS_PROJECT);
      MapSequence.fromMap(_params).put("mpsProject", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    final FileChooserDescriptor descriptor = new FileChooserDescriptor(true, true, true, true, false, false) {
      @Override
      public boolean isFileSelectable(VirtualFile file) {
        return !((file.isDirectory())) && file.getName().toLowerCase().endsWith(".zip");
      }
    };

    descriptor.setTitle("select archive with merge files");
    descriptor.setDescription("Zip files (*.zip) ");
    SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        VirtualFile vFile = FileChooser.chooseFile(descriptor, ((Project) MapSequence.fromMap(_params).get("project")), null);

        final String resFile;
        SModel[] zipped;
        try {
          zipped = MergeBackupUtil.loadZippedModels(new File(vFile.getCanonicalPath()), new MergeVersion[]{MergeVersion.BASE, MergeVersion.MINE, MergeVersion.REPOSITORY});
          resFile = File.createTempFile("mpstmp", ".result").getAbsolutePath();
        } catch (Exception e) {
          e.printStackTrace();
          return;
        }

        SimpleContent[] diffContents = Sequence.fromIterable(Sequence.fromArray(zipped)).select(new ISelector<SModel, SimpleContent>() {
          public SimpleContent select(final SModel m) {
            final Wrappers._T<String> content = new Wrappers._T<String>();
            ((MPSProject) MapSequence.fromMap(_params).get("mpsProject")).getRepository().getModelAccess().runReadAction(new Runnable() {
              public void run() {
                content.value = ModelPersistence.modelToString(m);
              }
            });
            return new SimpleContent(content.value, MPSFileTypeFactory.MPS_FILE_TYPE);
          }
        }).toGenericArray(SimpleContent.class);
      }
    });
  }
}
