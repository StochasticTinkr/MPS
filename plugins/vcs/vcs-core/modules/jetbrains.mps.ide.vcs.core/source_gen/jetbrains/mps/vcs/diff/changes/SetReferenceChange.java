package jetbrains.mps.vcs.diff.changes;

/*Generated by MPS */

import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.model.SModelReference;
import org.jetbrains.mps.openapi.model.SNodeId;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.vcs.diff.ChangeSet;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SReference;
import java.util.Objects;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.DynamicReference;
import jetbrains.mps.smodel.StaticReference;
import jetbrains.mps.vcs.util.MergeStrategy;
import jetbrains.mps.vcs.mergehints.runtime.VCSAspectUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;

public class SetReferenceChange extends NodeChange {
  private final SReferenceLink myRole;
  private final SModelReference myTargetModelReference;
  private final SNodeId myTargetNodeId;
  private final String myResolveInfo;
  private final boolean myResolveInfoOnly;
  public SetReferenceChange(@NotNull ChangeSet changeSet, @NotNull SNodeId sourceNodeId, @NotNull SReferenceLink role, @Nullable SModelReference targetModelReference, @Nullable SNodeId targetNodeId, @Nullable String resolveInfo) {
    super(changeSet, sourceNodeId);
    myRole = role;
    myTargetModelReference = targetModelReference;
    // if target node id is null and resolve info is not-null it's dynamic reference 
    myTargetNodeId = targetNodeId;
    myResolveInfo = resolveInfo;

    // check if only resolve info for static reference changed - then it cannot conflict with other changes 
    SReference oldRef = check_mgdhcs_a0i0f(changeSet.getOldModel().getNode(getAffectedNodeId(false)), myRole, this);
    myResolveInfoOnly = Objects.equals(check_mgdhcs_a0a0a9a5(oldRef), targetModelReference) && Objects.equals(check_mgdhcs_a0a0a9a5_0(oldRef), targetNodeId) && targetNodeId != null;
  }
  @NotNull
  public String getRole() {
    return myRole.getRoleName();
  }
  @NotNull
  public SReferenceLink getRoleLink() {
    return myRole;
  }
  public boolean isAbout(SReferenceLink link) {
    return myRole.equals(link);
  }
  @Nullable
  public SModelReference getTargetModelReference() {
    return myTargetModelReference;
  }
  @Nullable
  public SNodeId getTargetNodeId() {
    return myTargetNodeId;
  }
  @Nullable
  public String getResolveInfo() {
    return myResolveInfo;
  }
  @Override
  public void apply(@NotNull SModel model, @NotNull NodeCopier nodeCopier) {
    SNode node = model.getNode(getAffectedNodeId());
    assert node != null;
    if (myTargetNodeId == null && myResolveInfo == null) {
      node.setReferenceTarget(myRole, null);
    } else {
      SModelReference targetModelReference = (myTargetModelReference == null ? model.getReference() : myTargetModelReference);
      SReference reference;
      if (myTargetNodeId == null) {
        reference = new DynamicReference(myRole, node, targetModelReference, myResolveInfo);
      } else {
        reference = new StaticReference(myRole, node, targetModelReference, myTargetNodeId, myResolveInfo);
      }
      node.setReferenceTarget(myRole, null);
      node.setReference(myRole, reference);
    }
  }
  @Nullable
  @Override
  public MergeStrategy getMergeHint() {
    // get "nonconflicting" attribute in metamodel  
    SNode n = getChangeSet().getOldModel().getNode(getAffectedNodeId(false));
    MergeStrategy hint = VCSAspectUtil.getDefaultMergeStrategy(myRole);
    if (hint != null) {
      return hint;
    }
    return VCSAspectUtil.getDefaultMergeStrategy(SNodeOperations.getConcept(n));
  }
  @Override
  public boolean isNonConflicting() {
    return myResolveInfoOnly || super.isNonConflicting();
  }
  @Override
  public String toString() {
    String targetString = (myTargetModelReference == null ? "" + myTargetNodeId : String.format("%s|%s", myTargetModelReference, myTargetNodeId));
    return String.format("Set reference in role %s for node %s to %s [resolveInfo=%s]", myRole, getAffectedNodeId(false), targetString, myResolveInfo);
  }
  @Override
  public String getDescription() {
    // TODO consider dynamic references 
    SReference oldRef = getChangeSet().getOldModel().getNode(getAffectedNodeId(false)).getReference(myRole);
    SReference newRef = getChangeSet().getNewModel().getNode(getAffectedNodeId(true)).getReference(myRole);
    if (oldRef == null) {
      return String.format("Added %s reference", myRole);
    }
    if (newRef == null) {
      return String.format("Removed %s reference", myRole);
    }
    String what = "target";
    _FunctionTypes._return_P1_E0<? extends String, ? super SReference> formatRef = null;
    if (!(Objects.equals(oldRef.getTargetSModelReference(), newRef.getTargetSModelReference()))) {
      formatRef = new _FunctionTypes._return_P1_E0<String, SReference>() {
        public String invoke(SReference ref) {
          return String.format("[model=%s,\n  id=%s, resolveInfo=%s]", ref.getTargetSModelReference(), ref.getTargetNodeId(), ((jetbrains.mps.smodel.SReference) ref).getResolveInfo());
        }
      };
    } else if (!(Objects.equals(oldRef.getTargetNodeId(), newRef.getTargetNodeId()))) {
      formatRef = new _FunctionTypes._return_P1_E0<String, SReference>() {
        public String invoke(SReference ref) {
          return String.format("[id=%s, resolveInfo=%s]", ref.getTargetNodeId(), ref.getTargetNodeId());
        }
      };
    } else if (!(Objects.equals(((jetbrains.mps.smodel.SReference) oldRef).getResolveInfo(), ((jetbrains.mps.smodel.SReference) newRef).getResolveInfo()))) {
      what = "resolve info";
      formatRef = new _FunctionTypes._return_P1_E0<String, SReference>() {
        public String invoke(SReference ref) {
          return String.format("'%s'", ((jetbrains.mps.smodel.SReference) ref).getResolveInfo());
        }
      };
    }
    if (formatRef == null) {
      return toString();
    } else {
      return String.format("Changed %s reference %s from\n  %s\n  to\n  %s", myRole, what, formatRef.invoke(oldRef), formatRef.invoke(newRef));
    }
  }
  @NotNull
  @Override
  protected ModelChange createOppositeChange() {
    SNode node = getChangeSet().getOldModel().getNode(getAffectedNodeId(false));
    assert node != null;
    SReference ref = node.getReference(getRoleLink());
    SModelReference targetModel = check_mgdhcs_a0d0r(ref);
    if (Objects.equals(getChangeSet().getOldModel().getReference(), targetModel)) {
      // This is internal reference 
      targetModel = null;
    }

    return new SetReferenceChange(getChangeSet().getOppositeChangeSet(), getAffectedNodeId(true), myRole, targetModel, check_mgdhcs_e0a6a71(ref), check_mgdhcs_f0a6a71(((jetbrains.mps.smodel.SReference) ref)));
  }
  private static SReference check_mgdhcs_a0i0f(SNode checkedDotOperand, SReferenceLink myRole, SetReferenceChange checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getReference(myRole);
    }
    return null;
  }
  private static SModelReference check_mgdhcs_a0a0a9a5(SReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getTargetSModelReference();
    }
    return null;
  }
  private static SNodeId check_mgdhcs_a0a0a9a5_0(SReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getTargetNodeId();
    }
    return null;
  }
  private static SModelReference check_mgdhcs_a0d0r(SReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getTargetSModelReference();
    }
    return null;
  }
  private static SNodeId check_mgdhcs_e0a6a71(SReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getTargetNodeId();
    }
    return null;
  }
  private static String check_mgdhcs_f0a6a71(jetbrains.mps.smodel.SReference checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.getResolveInfo();
    }
    return null;
  }
}
