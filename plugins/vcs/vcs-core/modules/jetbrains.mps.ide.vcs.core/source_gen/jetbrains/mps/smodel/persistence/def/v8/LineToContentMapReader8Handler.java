package jetbrains.mps.smodel.persistence.def.v8;

/*Generated by MPS */

import jetbrains.mps.util.xml.XMLSAXHandler;
import java.util.List;
import jetbrains.mps.smodel.persistence.lines.LineContent;
import java.util.Stack;
import org.xml.sax.Locator;
import jetbrains.mps.smodel.persistence.def.LineContentAccumulator;
import org.xml.sax.SAXException;
import org.xml.sax.Attributes;
import org.xml.sax.SAXParseException;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.SNodeId;

public class LineToContentMapReader8Handler extends XMLSAXHandler<List<LineContent>> {
  private LineToContentMapReader8Handler.ModelElementHandler modelHandler = new LineToContentMapReader8Handler.ModelElementHandler();
  private LineToContentMapReader8Handler.NodeElementHandler nodeHandler = new LineToContentMapReader8Handler.NodeElementHandler();
  private LineToContentMapReader8Handler.PropertyElementHandler propertyHandler = new LineToContentMapReader8Handler.PropertyElementHandler();
  private LineToContentMapReader8Handler.LinkElementHandler linkHandler = new LineToContentMapReader8Handler.LinkElementHandler();
  private LineToContentMapReader8Handler.NullElementHandler nullHandler = new LineToContentMapReader8Handler.NullElementHandler();
  private Stack<LineToContentMapReader8Handler.ElementHandler> myHandlersStack = new Stack<LineToContentMapReader8Handler.ElementHandler>();
  private Stack<LineToContentMapReader8Handler.ChildHandler> myChildHandlersStack = new Stack<LineToContentMapReader8Handler.ChildHandler>();
  private Stack<Object> myValues = new Stack<Object>();
  private Locator myLocator;
  private List<LineContent> myResult;
  private LineContentAccumulator my_accumulatorField;
  public LineToContentMapReader8Handler() {
  }
  public List<LineContent> getResult() {
    return myResult;
  }
  @Override
  public void setDocumentLocator(Locator locator) {
    myLocator = locator;
  }
  @Override
  public void characters(char[] array, int start, int len) throws SAXException {
    globalHandleText(myValues.firstElement(), new String(array, start, len));
    LineToContentMapReader8Handler.ElementHandler current = (myHandlersStack.empty() ? (LineToContentMapReader8Handler.ElementHandler) null : myHandlersStack.peek());
    if (current != null) {
      current.handleText(myValues.peek(), new String(array, start, len));
    }
  }
  @Override
  public void endElement(String uri, String localName, String qName) throws SAXException {
    LineToContentMapReader8Handler.ElementHandler current = myHandlersStack.pop();
    Object childValue = myValues.pop();
    current.validate(childValue);
    if (myChildHandlersStack.empty()) {
      myResult = (List<LineContent>) childValue;
    } else {
      LineToContentMapReader8Handler.ChildHandler ch = myChildHandlersStack.pop();
      if (ch != null) {
        ch.apply(myValues.peek(), childValue);
      }
    }
  }
  @Override
  public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
    LineToContentMapReader8Handler.ElementHandler current = (myHandlersStack.empty() ? (LineToContentMapReader8Handler.ElementHandler) null : myHandlersStack.peek());
    if (current == null) {
      // root 
      current = modelHandler;
    } else {
      current = current.createChild(myValues.peek(), qName, attributes);
    }

    // check required 
    for (String attr : current.requiredAttributes()) {
      if (attributes.getValue(attr) == null) {
        throw new SAXParseException("attribute " + attr + " is absent", null);
      }
    }

    Object result = current.createObject(attributes);
    if (myHandlersStack.empty()) {
      myResult = (List<LineContent>) result;
    }

    // handle attributes 
    for (int i = 0; i < attributes.getLength(); i++) {
      String name = attributes.getQName(i);
      String value = attributes.getValue(i);
      current.handleAttribute(result, name, value);
    }
    myHandlersStack.push(current);
    myValues.push(result);
  }
  public void globalHandleText(Object resultObject, String value) {
    List<LineContent> result = (List<LineContent>) resultObject;
    my_accumulatorField.processText(value, myLocator);
  }
  private interface ChildHandler {
    void apply(Object resultObject, Object value) throws SAXException;
  }
  private class ElementHandler {
    private String[] requiredAttributes = new String[0];

    private ElementHandler() {
    }
    protected Object createObject(Attributes attrs) throws SAXException {
      return null;
    }
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
    }
    protected LineToContentMapReader8Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      throw new SAXParseException("unknown tag: " + tagName, null);
    }
    protected void handleText(Object resultObject, String value) throws SAXException {
      if (value.trim().length() == 0) {
        return;
      }
      throw new SAXParseException("text is not accepted: '" + value + "'", null);
    }
    protected String[] requiredAttributes() {
      return requiredAttributes;
    }
    protected void setRequiredAttributes(String... required) {
      requiredAttributes = required;
    }
    protected void validate(Object resultObject) throws SAXException {
    }
  }
  public class ModelElementHandler extends LineToContentMapReader8Handler.ElementHandler {
    public ModelElementHandler() {
    }
    @Override
    protected List<LineContent> createObject(Attributes attrs) throws SAXException {
      my_accumulatorField = new LineContentAccumulator();
      return my_accumulatorField.getLineToContentMap();
    }
    @Override
    protected LineToContentMapReader8Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("persistence".equals(tagName)) {
        myChildHandlersStack.push(null);
        return nullHandler;
      }
      if ("language".equals(tagName)) {
        myChildHandlersStack.push(null);
        return nullHandler;
      }
      if ("language-engaged-on-generation".equals(tagName)) {
        myChildHandlersStack.push(null);
        return nullHandler;
      }
      if ("devkit".equals(tagName)) {
        myChildHandlersStack.push(null);
        return nullHandler;
      }
      if ("import".equals(tagName)) {
        myChildHandlersStack.push(null);
        return nullHandler;
      }
      if ("root".equals(tagName)) {
        myChildHandlersStack.push(new LineToContentMapReader8Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_1361478912234927293(resultObject, value);
          }
        });
        return nodeHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private void handleChild_1361478912234927293(Object resultObject, Object value) throws SAXException {
      SNode child = (SNode) value;
      my_accumulatorField.popNode(myLocator);
    }
  }
  public class NodeElementHandler extends LineToContentMapReader8Handler.ElementHandler {
    public NodeElementHandler() {
    }
    @Override
    protected void handleAttribute(Object resultObject, String name, String value) throws SAXException {
      SNode result = (SNode) resultObject;
      if ("id".equals(name)) {
        my_accumulatorField.pushNode(SNodeId.fromString(value), myLocator);
        return;
      }
      super.handleAttribute(resultObject, name, value);
    }
    @Override
    protected LineToContentMapReader8Handler.ElementHandler createChild(Object resultObject, String tagName, Attributes attrs) throws SAXException {
      if ("property".equals(tagName)) {
        myChildHandlersStack.push(new LineToContentMapReader8Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_5797832288566425627(resultObject, value);
          }
        });
        return propertyHandler;
      }
      if ("link".equals(tagName)) {
        myChildHandlersStack.push(new LineToContentMapReader8Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_5797832288566425650(resultObject, value);
          }
        });
        return linkHandler;
      }
      if ("node".equals(tagName)) {
        myChildHandlersStack.push(new LineToContentMapReader8Handler.ChildHandler() {
          @Override
          public void apply(Object resultObject, Object value) throws SAXException {
            handleChild_5797832288566425695(resultObject, value);
          }
        });
        return nodeHandler;
      }
      return super.createChild(resultObject, tagName, attrs);
    }
    private void handleChild_5797832288566425627(Object resultObject, Object value) throws SAXException {
      String child = (String) value;
      if (child != null) {
        my_accumulatorField.saveProperty(child, myLocator);
      }
    }
    private void handleChild_5797832288566425650(Object resultObject, Object value) throws SAXException {
      String child = (String) value;
      if (child != null) {
        my_accumulatorField.saveReference(child, myLocator);
      }
    }
    private void handleChild_5797832288566425695(Object resultObject, Object value) throws SAXException {
      SNode child = (SNode) value;
      my_accumulatorField.popNode(myLocator);
    }
  }
  public class PropertyElementHandler extends LineToContentMapReader8Handler.ElementHandler {
    public PropertyElementHandler() {
      setRequiredAttributes("name");
    }
    @Override
    protected String createObject(Attributes attrs) throws SAXException {
      return attrs.getValue("name");
    }
  }
  public class LinkElementHandler extends LineToContentMapReader8Handler.ElementHandler {
    public LinkElementHandler() {
      setRequiredAttributes("role");
    }
    @Override
    protected String createObject(Attributes attrs) throws SAXException {
      return attrs.getValue("role");
    }
  }
  public class NullElementHandler extends LineToContentMapReader8Handler.ElementHandler {
    public NullElementHandler() {
    }
  }
}
