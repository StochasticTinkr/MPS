package jetbrains.mps.vcs.mergehints.plugin.plugin;

/*Generated by MPS */

import jetbrains.mps.plugins.relations.RelationDescriptor;
import javax.swing.Icon;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import java.util.List;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.persistence.ModelRoot;
import jetbrains.mps.project.SModuleOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class Version_Control_TabDescriptor extends RelationDescriptor {
  private static final Icon ICON = IconContainer.ICON_a0;

  public Version_Control_TabDescriptor() {
  }
  public String getTitle() {
    return "Version Control";
  }
  public int compareTo(RelationDescriptor descriptor) {
    return new VersionControl_Order().compare(this, descriptor);
  }
  public void startListening() {
  }
  public SNode getBaseNode(SNode node) {
    return null;
  }
  public boolean isApplicable(SNode node) {
    return SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"));
  }
  @Nullable
  public Icon getIcon() {
    return ICON;
  }
  public List<SNode> getNodes(SNode node) {
    List<SNode> nodes = new ArrayList<SNode>();
    SModule module = SNodeOperations.getModel(node).getModule();
    if (!((module instanceof Language))) {
      return nodes;
    }

    // todo [MM] use aspectModel// expression here when possible 
    Iterable<SModel> models = module.getModels();
    SModel vcsModel = Sequence.fromIterable(models).findFirst(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return it.getName().getSimpleName().equals("vcs");
      }
    });
    if (vcsModel == null) {
      return nodes;
    }

    ListSequence.fromList(nodes).addSequence(ListSequence.fromList(SModelOperations.roots(vcsModel, MetaAdapterFactory.getConcept(0x37e03aa1728949bcL, 0x826930de5eceec76L, 0x39744cf955c648f9L, "jetbrains.mps.vcs.mergehints.structure.VCSHints"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ListSequence.fromList(SLinkOperations.getChildren(it, MetaAdapterFactory.getContainmentLink(0x37e03aa1728949bcL, 0x826930de5eceec76L, 0x39744cf955c648f9L, 0x39744cf955c648faL, "concepts"))).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return SLinkOperations.getTarget(it, MetaAdapterFactory.getReferenceLink(0x37e03aa1728949bcL, 0x826930de5eceec76L, 0x39744cf955c648fcL, 0x39744cf955c649b5L, "cncpt")) == node;
          }
        });
      }
    }));
    return nodes;
  }
  public boolean isSingle() {
    return false;
  }
  public Iterable<SConcept> getAspectConcepts(final SNode node) {
    return ListSequence.fromListAndArray(new ArrayList<SConcept>(), MetaAdapterFactory.getConcept(0x37e03aa1728949bcL, 0x826930de5eceec76L, 0x39744cf955c648f9L, "jetbrains.mps.vcs.mergehints.structure.VCSHints"));
  }
  public SNode createAspect(final SNode node, final SConcept concept) {
    SModule module = SNodeOperations.getModel(node).getModule();
    assert module instanceof Language;

    // todo [MM] use aspectModel// expression here when possible 
    Iterable<SModel> models = module.getModels();
    SModel aspectModel = Sequence.fromIterable(models).findFirst(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return it.getName().getSimpleName().equals("vcs");
      }
    });
    if (aspectModel == null) {
      Language l = (Language) module;
      SModel structureModel = l.getStructureModelDescriptor();
      ModelRoot modelRoot;
      if (structureModel == null) {
        modelRoot = l.getModelRoots().iterator().next();
      } else {
        modelRoot = structureModel.getModelRoot();
      }
      aspectModel = SModuleOperations.createModelWithAdjustments(l.getModuleName() + ".vcs", modelRoot);
    }

    assert aspectModel != null;
    SNode hints = SModelOperations.createNewRootNode(aspectModel, MetaAdapterFactory.getConcept(0x37e03aa1728949bcL, 0x826930de5eceec76L, 0x39744cf955c648f9L, "jetbrains.mps.vcs.mergehints.structure.VCSHints"));
    SPropertyOperations.assign(hints, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "_Hints");
    SNode conceptHint = SLinkOperations.addNewChild(hints, MetaAdapterFactory.getContainmentLink(0x37e03aa1728949bcL, 0x826930de5eceec76L, 0x39744cf955c648f9L, 0x39744cf955c648faL, "concepts"), null);
    SLinkOperations.setTarget(conceptHint, MetaAdapterFactory.getReferenceLink(0x37e03aa1728949bcL, 0x826930de5eceec76L, 0x39744cf955c648fcL, 0x39744cf955c649b5L, "cncpt"), node);

    return hints;
  }
}
