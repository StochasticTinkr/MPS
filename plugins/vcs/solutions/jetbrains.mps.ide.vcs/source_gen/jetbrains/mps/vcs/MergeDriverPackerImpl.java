package jetbrains.mps.vcs;

/*Generated by MPS */

import jetbrains.mps.vcs.platform.mergedriver.MergeDriverPacker;
import com.intellij.openapi.components.ApplicationComponent;
import com.intellij.openapi.application.PathManager;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.LinkedHashSet;
import java.io.File;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.reloading.CommonPaths;
import jetbrains.mps.util.ClassType;
import org.jetbrains.annotations.NonNls;
import org.jetbrains.annotations.NotNull;

public class MergeDriverPackerImpl extends MergeDriverPacker implements ApplicationComponent {
  public MergeDriverPackerImpl() {
  }
  @Override
  public String getMPSCorePath() {
    return PathManager.getLibPath();
  }
  @Override
  protected Set<String> getClasspathInternal() {
    Set<String> classpathItems = SetSequence.fromSet(new LinkedHashSet<String>());
    final String fsep = File.separator;
    SetSequence.fromSet(classpathItems).addSequence(Sequence.fromIterable(MergeDriverPacker.mpsAddJars).select(new ISelector<String, String>() {
      public String select(String it) {
        return PathManager.getLibPath() + fsep + it;
      }
    }));
    SetSequence.fromSet(classpathItems).addSequence(ListSequence.fromList(CommonPaths.getMPSPaths(ClassType.OPENAPI)));
    SetSequence.fromSet(classpathItems).addSequence(ListSequence.fromList(CommonPaths.getMPSPaths(ClassType.CORE)));
    SetSequence.fromSet(classpathItems).addSequence(ListSequence.fromList(CommonPaths.getMPSPaths(ClassType.ASPECTS)));
    SetSequence.fromSet(classpathItems).addElement(getVCSCorePluginPath() + fsep + "lib" + fsep + getVCSCoreFileName());
    return classpathItems;
  }
  @Override
  public void initComponent() {
    MergeDriverPacker.setInstance(this);
  }
  @NonNls
  @NotNull
  @Override
  public String getComponentName() {
    return "MPS-specific Merge Driver Packer implementation";
  }
  @Override
  public void disposeComponent() {
    MergeDriverPacker.setInstance(null);
  }
  @Override
  protected String getVCSCoreFileName() {
    return "vcs-core.jar";
  }
}
