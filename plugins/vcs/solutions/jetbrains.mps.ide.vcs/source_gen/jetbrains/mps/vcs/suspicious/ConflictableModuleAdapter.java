package jetbrains.mps.vcs.suspicious;

/*Generated by MPS */

import jetbrains.mps.project.AbstractModule;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.project.SModuleOperations;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.smodel.ModelAccess;

public class ConflictableModuleAdapter extends Conflictable {
  private final AbstractModule myModule;
  private final boolean myIsConflictDetected;
  public ConflictableModuleAdapter(SModule module, boolean isConflictDetected) {
    myModule = (AbstractModule) module;
    myIsConflictDetected = isConflictDetected;
  }
  @Override
  public boolean isConflictDetected() {
    return myIsConflictDetected;
  }
  @Override
  public IFile getFile() {
    return myModule.getDescriptorFile();
  }
  public SModule getModule() {
    return myModule;
  }
  @Override
  public void reloadFromDisk() {
    SModuleOperations.reloadFromDisk(myModule);
  }
  @Override
  public boolean needReloading() {
    final Wrappers._boolean result = new Wrappers._boolean(false);
    ModelAccess.instance().runReadAction(new Runnable() {
      public void run() {
        result.value = SModuleOperations.needReloading(myModule);
      }
    });
    return result.value;
  }
}
