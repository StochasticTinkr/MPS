package jetbrains.mps.ide.vcs.modelmetadata.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(3);
  /*package*/ final ConceptDescriptor myConceptModel = new ConceptDescriptorBuilder("jetbrains.mps.ide.vcs.modelmetadata.structure.Model", MetaIdFactory.conceptId(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x7439be589a4e116dL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(8374934269827355110L, "longname"), new ConceptDescriptorBuilder.Prop(8374934269827355112L, "uuid"), new ConceptDescriptorBuilder.Prop(8374934269827355124L, "donotgenerate")).properties("longname", "uuid", "donotgenerate").childDescriptors(new ConceptDescriptorBuilder.Link(4685150495576720950L, "language", MetaIdFactory.conceptId(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x39c8ca3b79aaafe1L), true, true, false), new ConceptDescriptorBuilder.Link(4685150495576720952L, "languageEngagedOnGeneration", MetaIdFactory.conceptId(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x39c8ca3b79aaafe1L), true, true, false), new ConceptDescriptorBuilder.Link(4685150495576720955L, "devkit", MetaIdFactory.conceptId(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x39c8ca3b79aaafe1L), true, true, false), new ConceptDescriptorBuilder.Link(4685150495576720959L, "import", MetaIdFactory.conceptId(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x39c8ca3b79aaafdeL), true, true, false)).children(new String[]{"language", "languageEngagedOnGeneration", "devkit", "import"}, new boolean[]{true, true, true, true}).create();
  /*package*/ final ConceptDescriptor myConceptModelReference = new ConceptDescriptorBuilder("jetbrains.mps.ide.vcs.modelmetadata.structure.ModelReference", MetaIdFactory.conceptId(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x39c8ca3b79aaafdeL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(4163800212297134047L, "stringValue")).properties("stringValue").create();
  /*package*/ final ConceptDescriptor myConceptModuleReference = new ConceptDescriptorBuilder("jetbrains.mps.ide.vcs.modelmetadata.structure.ModuleReference", MetaIdFactory.conceptId(0x6df0089f32884998L, 0x9d57e698e7c8e145L, 0x39c8ca3b79aaafe1L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(4163800212297134050L, "stringValue")).properties("stringValue").create();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptModel.getId(), 0);
    myIndexMap.put(myConceptModelReference.getId(), 1);
    myIndexMap.put(myConceptModuleReference.getId(), 2);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptModel, myConceptModelReference, myConceptModuleReference);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptModel;
      case 1:
        return myConceptModelReference;
      case 2:
        return myConceptModuleReference;
      default:
        throw new IllegalStateException();
    }
  }
}
