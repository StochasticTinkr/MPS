package jetbrains.mps.core.xml.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_XmlAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlBaseAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlBaseElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlBasePrologElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlCDATA = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlCharRef = new ConceptPresentationBuilder().shortDesc("single character").create();
  private final ConceptPresentation props_XmlCharRefValue = new ConceptPresentationBuilder().shortDesc("single character").create();
  private final ConceptPresentation props_XmlComment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlCommentLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlContent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlDeclaration = new ConceptPresentationBuilder().shortDesc("xml declaration").create();
  private final ConceptPresentation props_XmlDoctypeDeclaration = new ConceptPresentationBuilder().shortDesc("xml doctype declaration").create();
  private final ConceptPresentation props_XmlDocument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlEntityRef = new ConceptPresentationBuilder().shortDesc("entity reference").create();
  private final ConceptPresentation props_XmlEntityRefValue = new ConceptPresentationBuilder().shortDesc("entity reference").create();
  private final ConceptPresentation props_XmlExternalId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlFile = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlNoSpaceValue = new ConceptPresentationBuilder().shortDesc("concatenates two values without spaces").create();
  private final ConceptPresentation props_XmlPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlProcessingInstruction = new ConceptPresentationBuilder().shortDesc("processing instruction").create();
  private final ConceptPresentation props_XmlProlog = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlPrologElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlText = new ConceptPresentationBuilder().shortDesc("plain text").create();
  private final ConceptPresentation props_XmlTextValue = new ConceptPresentationBuilder().shortDesc("attribute value contains of text and entity references").create();
  private final ConceptPresentation props_XmlValuePart = new ConceptPresentationBuilder().shortDesc("attribute value").create();
  private final ConceptPresentation props_XmlWhitespace = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.XmlAttribute:
        return props_XmlAttribute;
      case LanguageConceptSwitch.XmlBaseAttribute:
        return props_XmlBaseAttribute;
      case LanguageConceptSwitch.XmlBaseElement:
        return props_XmlBaseElement;
      case LanguageConceptSwitch.XmlBasePrologElement:
        return props_XmlBasePrologElement;
      case LanguageConceptSwitch.XmlCDATA:
        return props_XmlCDATA;
      case LanguageConceptSwitch.XmlCharRef:
        return props_XmlCharRef;
      case LanguageConceptSwitch.XmlCharRefValue:
        return props_XmlCharRefValue;
      case LanguageConceptSwitch.XmlComment:
        return props_XmlComment;
      case LanguageConceptSwitch.XmlCommentLine:
        return props_XmlCommentLine;
      case LanguageConceptSwitch.XmlContent:
        return props_XmlContent;
      case LanguageConceptSwitch.XmlDeclaration:
        return props_XmlDeclaration;
      case LanguageConceptSwitch.XmlDoctypeDeclaration:
        return props_XmlDoctypeDeclaration;
      case LanguageConceptSwitch.XmlDocument:
        return props_XmlDocument;
      case LanguageConceptSwitch.XmlElement:
        return props_XmlElement;
      case LanguageConceptSwitch.XmlEntityRef:
        return props_XmlEntityRef;
      case LanguageConceptSwitch.XmlEntityRefValue:
        return props_XmlEntityRefValue;
      case LanguageConceptSwitch.XmlExternalId:
        return props_XmlExternalId;
      case LanguageConceptSwitch.XmlFile:
        return props_XmlFile;
      case LanguageConceptSwitch.XmlNoSpaceValue:
        return props_XmlNoSpaceValue;
      case LanguageConceptSwitch.XmlPart:
        return props_XmlPart;
      case LanguageConceptSwitch.XmlProcessingInstruction:
        return props_XmlProcessingInstruction;
      case LanguageConceptSwitch.XmlProlog:
        return props_XmlProlog;
      case LanguageConceptSwitch.XmlPrologElement:
        return props_XmlPrologElement;
      case LanguageConceptSwitch.XmlText:
        return props_XmlText;
      case LanguageConceptSwitch.XmlTextValue:
        return props_XmlTextValue;
      case LanguageConceptSwitch.XmlValuePart:
        return props_XmlValuePart;
      case LanguageConceptSwitch.XmlWhitespace:
        return props_XmlWhitespace;
    }
    return null;
  }
}
