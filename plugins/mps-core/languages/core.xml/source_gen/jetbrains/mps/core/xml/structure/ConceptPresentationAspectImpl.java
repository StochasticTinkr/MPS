package jetbrains.mps.core.xml.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_XmlAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlBaseAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlBaseElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlBasePrologElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlCDATA = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlCharRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlCharRefValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlComment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlCommentLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlContent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlDoctypeDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlDocument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlEntityRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlEntityRefValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlExternalId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlFile = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlNoSpaceValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlProcessingInstruction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlProlog = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlPrologElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlTextValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlValuePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlWhitespace = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_lpa09p_a0cb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_XmlAttribute;
          }
          break;
        case 1:
          if (true) {
            return props_XmlBaseAttribute;
          }
          break;
        case 2:
          if (true) {
            return props_XmlBaseElement;
          }
          break;
        case 3:
          if (true) {
            return props_XmlBasePrologElement;
          }
          break;
        case 4:
          if (true) {
            return props_XmlCDATA;
          }
          break;
        case 5:
          if (true) {
            return props_XmlCharRef;
          }
          break;
        case 6:
          if (true) {
            return props_XmlCharRefValue;
          }
          break;
        case 7:
          if (true) {
            return props_XmlComment;
          }
          break;
        case 8:
          if (true) {
            return props_XmlCommentLine;
          }
          break;
        case 9:
          if (true) {
            return props_XmlContent;
          }
          break;
        case 10:
          if (true) {
            return props_XmlDeclaration;
          }
          break;
        case 11:
          if (true) {
            return props_XmlDoctypeDeclaration;
          }
          break;
        case 12:
          if (true) {
            return props_XmlDocument;
          }
          break;
        case 13:
          if (true) {
            return props_XmlElement;
          }
          break;
        case 14:
          if (true) {
            return props_XmlEntityRef;
          }
          break;
        case 15:
          if (true) {
            return props_XmlEntityRefValue;
          }
          break;
        case 16:
          if (true) {
            return props_XmlExternalId;
          }
          break;
        case 17:
          if (true) {
            return props_XmlFile;
          }
          break;
        case 18:
          if (true) {
            return props_XmlNoSpaceValue;
          }
          break;
        case 19:
          if (true) {
            return props_XmlPart;
          }
          break;
        case 20:
          if (true) {
            return props_XmlProcessingInstruction;
          }
          break;
        case 21:
          if (true) {
            return props_XmlProlog;
          }
          break;
        case 22:
          if (true) {
            return props_XmlPrologElement;
          }
          break;
        case 23:
          if (true) {
            return props_XmlText;
          }
          break;
        case 24:
          if (true) {
            return props_XmlTextValue;
          }
          break;
        case 25:
          if (true) {
            return props_XmlValuePart;
          }
          break;
        case 26:
          if (true) {
            return props_XmlWhitespace;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_lpa09p_a0cb = buildConceptIndices(MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54b8df3L, "XmlAttribute"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54b10b3L, "XmlBaseAttribute"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c549486dL, "XmlBaseElement"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x1d9c27c394f08788L, "XmlBasePrologElement"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c549487aL, "XmlCDATA"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x2abf08504ffe9886L, "XmlCharRef"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x2abf08504ffed7feL, "XmlCharRefValue"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c5494878L, "XmlComment"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x16838b3fce9bec5eL, "XmlCommentLine"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c549486bL, "XmlContent"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x4890619bb401ef6eL, "XmlDeclaration"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x1d9c27c394f4069bL, "XmlDoctypeDeclaration"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5e2f66f285946ac9L, "XmlDocument"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54b10b2L, "XmlElement"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x16838b3fce9c6f4dL, "XmlEntityRef"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54cfd21L, "XmlEntityRefValue"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x1d9c27c394f6033fL, "XmlExternalId"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54c94c0L, "XmlFile"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x2abf085050020e3cL, "XmlNoSpaceValue"), MetaAdapterFactory.getInterfaceConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x1d9c27c394eff13eL, "XmlPart"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c5494875L, "XmlProcessingInstruction"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c5494871L, "XmlProlog"), MetaAdapterFactory.getInterfaceConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x6988ccb84e3bd0e5L, "XmlPrologElement"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x16838b3fce9aa513L, "XmlText"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54cfd1fL, "XmlTextValue"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x5c842a42c54cfd1cL, "XmlValuePart"), MetaAdapterFactory.getConcept(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, 0x6988ccb84e3cfaa8L, "XmlWhitespace"));
}
