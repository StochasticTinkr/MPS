package jetbrains.mps.core.xml.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_XmlAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlBaseAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlBaseElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlBasePrologElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlCDATA = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlCharRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlCharRefValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlComment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlCommentLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlContent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlDoctypeDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlDocument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlEntityRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlEntityRefValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlExternalId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlFile = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlNoSpaceValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlProcessingInstruction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlProlog = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlPrologElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlTextValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlValuePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XmlWhitespace = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_XmlAttribute;
      case 1:
        return props_XmlBaseAttribute;
      case 2:
        return props_XmlBaseElement;
      case 3:
        return props_XmlBasePrologElement;
      case 4:
        return props_XmlCDATA;
      case 5:
        return props_XmlCharRef;
      case 6:
        return props_XmlCharRefValue;
      case 7:
        return props_XmlComment;
      case 8:
        return props_XmlCommentLine;
      case 9:
        return props_XmlContent;
      case 10:
        return props_XmlDeclaration;
      case 11:
        return props_XmlDoctypeDeclaration;
      case 12:
        return props_XmlDocument;
      case 13:
        return props_XmlElement;
      case 14:
        return props_XmlEntityRef;
      case 15:
        return props_XmlEntityRefValue;
      case 16:
        return props_XmlExternalId;
      case 17:
        return props_XmlFile;
      case 18:
        return props_XmlNoSpaceValue;
      case 19:
        return props_XmlPart;
      case 20:
        return props_XmlProcessingInstruction;
      case 21:
        return props_XmlProlog;
      case 22:
        return props_XmlPrologElement;
      case 23:
        return props_XmlText;
      case 24:
        return props_XmlTextValue;
      case 25:
        return props_XmlValuePart;
      case 26:
        return props_XmlWhitespace;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
