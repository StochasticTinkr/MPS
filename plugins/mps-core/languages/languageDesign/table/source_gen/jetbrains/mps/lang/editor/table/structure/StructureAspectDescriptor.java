package jetbrains.mps.lang.editor.table.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(3);
  /*package*/ final ConceptDescriptor myConceptCellModel_HierarchycalTable = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.table.structure.CellModel_HierarchycalTable", MetaIdFactory.conceptId(0x272d3b44cc8481eL, 0x9e2f07793fbfcb41L, 0x1f44bcab4ea21b62L)).super_("jetbrains.mps.lang.editor.structure.EditorCellModel").super_(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L)).parents("jetbrains.mps.lang.editor.structure.EditorCellModel").parentIds(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1f44bcab4ea5d7f6L, "myProp")).properties("myProp").referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x5643e6bf317e9d11L, "headerRowLinkDeclaration", MetaIdFactory.conceptId(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL), true), new ConceptDescriptorBuilder.Ref(0x5643e6bf317e9d12L, "rowsLinkDeclaration", MetaIdFactory.conceptId(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL), false), new ConceptDescriptorBuilder.Ref(0x5643e6bf317e9d13L, "cellsInRowLinkDeclaration", MetaIdFactory.conceptId(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL), false)).references("headerRowLinkDeclaration", "rowsLinkDeclaration", "cellsInRowLinkDeclaration").alias("hierarchycal table", "").sourceNode(new SNodePointer("r:2ae43476-98ce-4354-9a55-d7b44e372d64(jetbrains.mps.lang.editor.table.structure)", "2253133157536766818")).create();
  /*package*/ final ConceptDescriptor myConceptCellModel_Table = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.table.structure.CellModel_Table", MetaIdFactory.conceptId(0x272d3b44cc8481eL, 0x9e2f07793fbfcb41L, 0x40e932ec28a2d18bL)).super_("jetbrains.mps.lang.editor.structure.EditorCellModel").super_(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L)).parents("jetbrains.mps.lang.editor.structure.EditorCellModel").parentIds(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x3e51593e83e95ca3L, "tableModel", MetaIdFactory.conceptId(0x272d3b44cc8481eL, 0x9e2f07793fbfcb41L, 0x3e51593e83e97a4dL), false, false, false)).children(new String[]{"tableModel"}, new boolean[]{false}).alias("table", "").sourceNode(new SNodePointer("r:2ae43476-98ce-4354-9a55-d7b44e372d64(jetbrains.mps.lang.editor.table.structure)", "4677325677876400523")).create();
  /*package*/ final ConceptDescriptor myConceptQueryFunction_TableModel = new ConceptDescriptorBuilder("jetbrains.mps.lang.editor.table.structure.QueryFunction_TableModel", MetaIdFactory.conceptId(0x272d3b44cc8481eL, 0x9e2f07793fbfcb41L, 0x3e51593e83e97a4dL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).alias("getTableModel", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:2ae43476-98ce-4354-9a55-d7b44e372d64(jetbrains.mps.lang.editor.table.structure)", "4490468428501056077")).create();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptCellModel_HierarchycalTable.getId(), 0);
    myIndexMap.put(myConceptCellModel_Table.getId(), 1);
    myIndexMap.put(myConceptQueryFunction_TableModel.getId(), 2);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCellModel_HierarchycalTable, myConceptCellModel_Table, myConceptQueryFunction_TableModel);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptCellModel_HierarchycalTable;
      case 1:
        return myConceptCellModel_Table;
      case 2:
        return myConceptQueryFunction_TableModel;
      default:
        throw new IllegalStateException();
    }
  }
}
