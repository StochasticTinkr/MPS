package jetbrains.mps.lang.editor.forms.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_AbstractCheckboxUI = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CellModel_Checkbox = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CheckboxUI_Platform = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CheckboxUI_Text = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StubCellModel_Checkbox = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0g.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractCheckboxUI;
          }
          break;
        case 1:
          if (true) {
            return props_CellModel_Checkbox;
          }
          break;
        case 2:
          if (true) {
            return props_CheckboxUI_Platform;
          }
          break;
        case 3:
          if (true) {
            return props_CheckboxUI_Text;
          }
          break;
        case 4:
          if (true) {
            return props_StubCellModel_Checkbox;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0g = buildConceptIndices(MetaAdapterFactory.getConcept(0x602c36adcc5547ffL, 0x8c4073d7f12f035cL, 0x1900c370e334d3daL, "AbstractCheckboxUI"), MetaAdapterFactory.getConcept(0x602c36adcc5547ffL, 0x8c4073d7f12f035cL, 0x455f8dda63d6378L, "CellModel_Checkbox"), MetaAdapterFactory.getConcept(0x602c36adcc5547ffL, 0x8c4073d7f12f035cL, 0x617bb6da72073973L, "CheckboxUI_Platform"), MetaAdapterFactory.getConcept(0x602c36adcc5547ffL, 0x8c4073d7f12f035cL, 0x1298d6f05780e83bL, "CheckboxUI_Text"), MetaAdapterFactory.getConcept(0x602c36adcc5547ffL, 0x8c4073d7f12f035cL, 0x455f8dda63eef06L, "StubCellModel_Checkbox"));
}
