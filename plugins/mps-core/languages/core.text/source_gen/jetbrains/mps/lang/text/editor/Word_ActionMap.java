package jetbrains.mps.lang.text.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Word_ActionMap {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.BACKSPACE, new Word_ActionMap.Word_ActionMap_BACKSPACE(node));
    editorCell.setAction(CellActionType.DELETE, new Word_ActionMap.Word_ActionMap_DELETE(node));
    editorCell.setAction(CellActionType.INSERT, new Word_ActionMap.Word_ActionMap_INSERT(node));
    editorCell.setAction(CellActionType.INSERT_BEFORE, new Word_ActionMap.Word_ActionMap_INSERT_BEFORE(node));
  }
  public static class Word_ActionMap_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public Word_ActionMap_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      TextDeleteStrategyFactory.createDeleteStrategy(node, editorContext, false).execute();
    }
  }
  public static class Word_ActionMap_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public Word_ActionMap_DELETE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      TextDeleteStrategyFactory.createDeleteStrategy(node, editorContext, true).execute();
    }
  }
  public static class Word_ActionMap_INSERT extends AbstractCellAction {
    /*package*/ SNode myNode;
    public Word_ActionMap_INSERT(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      NewElementStrategyFactory.createNewLineStrategy(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word")), editorContext, true, false).execute();
    }
  }
  public static class Word_ActionMap_INSERT_BEFORE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public Word_ActionMap_INSERT_BEFORE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      NewElementStrategyFactory.createNewLineStrategy(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word")), editorContext, true, false).execute();
    }
  }
}
