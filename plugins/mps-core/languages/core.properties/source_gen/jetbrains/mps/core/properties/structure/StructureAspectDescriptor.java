package jetbrains.mps.core.properties.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(4);
  /*package*/ final ConceptDescriptor myConceptPropertiesComment = createDescriptorForPropertiesComment();
  /*package*/ final ConceptDescriptor myConceptPropertiesDeclaration = createDescriptorForPropertiesDeclaration();
  /*package*/ final ConceptDescriptor myConceptPropertiesFile = createDescriptorForPropertiesFile();
  /*package*/ final ConceptDescriptor myConceptPropertiesLine = createDescriptorForPropertiesLine();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptPropertiesComment.getId(), 0);
    myIndexMap.put(myConceptPropertiesDeclaration.getId(), 1);
    myIndexMap.put(myConceptPropertiesFile.getId(), 2);
    myIndexMap.put(myConceptPropertiesLine.getId(), 3);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptPropertiesComment, myConceptPropertiesDeclaration, myConceptPropertiesFile, myConceptPropertiesLine);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptPropertiesComment;
      case 1:
        return myConceptPropertiesDeclaration;
      case 2:
        return myConceptPropertiesFile;
      case 3:
        return myConceptPropertiesLine;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForPropertiesComment() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.core.properties", "PropertiesComment", 0x58f98fef90ad4b72L, 0xa390fad66ec7005aL, 0x36fb0dc9fd3a3ad9L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.core.properties.structure.PropertiesLine", 0x58f98fef90ad4b72L, 0xa390fad66ec7005aL, 0x36fb0dc9fd3a3ac2L);
    b.origin("r:9da2e6e5-b7a9-4059-9bac-c3700f7d675c(jetbrains.mps.core.properties.structure)/3961775458390522585");
    b.prop("text", 0x36fb0dc9fd3a3adaL, "3961775458390522586");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("#");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPropertiesDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.core.properties", "PropertiesDeclaration", 0x58f98fef90ad4b72L, 0xa390fad66ec7005aL, 0x36fb0dc9fd3a3ac1L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.core.properties.structure.PropertiesLine", 0x58f98fef90ad4b72L, 0xa390fad66ec7005aL, 0x36fb0dc9fd3a3ac2L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:9da2e6e5-b7a9-4059-9bac-c3700f7d675c(jetbrains.mps.core.properties.structure)/3961775458390522561");
    b.prop("value", 0x36fb0dc9fd3a3ae4L, "3961775458390522596");
    b.alias("property");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPropertiesFile() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.core.properties", "PropertiesFile", 0x58f98fef90ad4b72L, 0xa390fad66ec7005aL, 0x36fb0dc9fd3a2754L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x9ded098bad6a4657L, 0xbfd948636cfe8bc3L, 0x465516cf87c705a4L);
    b.origin("r:9da2e6e5-b7a9-4059-9bac-c3700f7d675c(jetbrains.mps.core.properties.structure)/3961775458390517588");
    b.aggregate("lines", 0x36fb0dc9fd3a3ac3L).target(0x58f98fef90ad4b72L, 0xa390fad66ec7005aL, 0x36fb0dc9fd3a3ac2L).optional(true).ordered(true).multiple(true).origin("3961775458390522563").done();
    b.alias("properties file");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPropertiesLine() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.core.properties", "PropertiesLine", 0x58f98fef90ad4b72L, 0xa390fad66ec7005aL, 0x36fb0dc9fd3a3ac2L);
    b.class_(false, false, false);
    b.origin("r:9da2e6e5-b7a9-4059-9bac-c3700f7d675c(jetbrains.mps.core.properties.structure)/3961775458390522562");
    b.alias("<empty line>");
    return b.create();
  }
}
