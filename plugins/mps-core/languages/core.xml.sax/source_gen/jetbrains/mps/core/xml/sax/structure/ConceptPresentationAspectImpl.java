package jetbrains.mps.core.xml.sax.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_XMLSAXAttributeHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXAttributeHandler_value = new ConceptPresentationBuilder().shortDesc("attribute value").create();
  private final ConceptPresentation props_XMLSAXAttributeReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXAttributeRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXBreakStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXChildHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXChildHandler_childObject = new ConceptPresentationBuilder().shortDesc("parsed child object").create();
  private final ConceptPresentation props_XMLSAXChildRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXChildRuleCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXDefaultChildHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXDefaultChildHandler_tagName = new ConceptPresentationBuilder().shortDesc("tag name").create();
  private final ConceptPresentation props_XMLSAXDefaultChildRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXFieldDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXFieldReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXHandlerFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXHandler_resultObject = new ConceptPresentationBuilder().shortDesc("an object").create();
  private final ConceptPresentation props_XMLSAXLocatorExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXNodeCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXNodeRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXNodeRuleParam = new ConceptPresentationBuilder().shortDesc("parameter").create();
  private final ConceptPresentation props_XMLSAXNodeRuleParamRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXNodeValidator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXParser = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXTextHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXTextHandler_value = new ConceptPresentationBuilder().shortDesc("text value").create();
  private final ConceptPresentation props_XMLSAXTextRule = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.XMLSAXAttributeHandler:
        return props_XMLSAXAttributeHandler;
      case LanguageConceptSwitch.XMLSAXAttributeHandler_value:
        return props_XMLSAXAttributeHandler_value;
      case LanguageConceptSwitch.XMLSAXAttributeReference:
        return props_XMLSAXAttributeReference;
      case LanguageConceptSwitch.XMLSAXAttributeRule:
        return props_XMLSAXAttributeRule;
      case LanguageConceptSwitch.XMLSAXBreakStatement:
        return props_XMLSAXBreakStatement;
      case LanguageConceptSwitch.XMLSAXChildHandler:
        return props_XMLSAXChildHandler;
      case LanguageConceptSwitch.XMLSAXChildHandler_childObject:
        return props_XMLSAXChildHandler_childObject;
      case LanguageConceptSwitch.XMLSAXChildRule:
        return props_XMLSAXChildRule;
      case LanguageConceptSwitch.XMLSAXChildRuleCondition:
        return props_XMLSAXChildRuleCondition;
      case LanguageConceptSwitch.XMLSAXDefaultChildHandler:
        return props_XMLSAXDefaultChildHandler;
      case LanguageConceptSwitch.XMLSAXDefaultChildHandler_tagName:
        return props_XMLSAXDefaultChildHandler_tagName;
      case LanguageConceptSwitch.XMLSAXDefaultChildRule:
        return props_XMLSAXDefaultChildRule;
      case LanguageConceptSwitch.XMLSAXFieldDeclaration:
        return props_XMLSAXFieldDeclaration;
      case LanguageConceptSwitch.XMLSAXFieldReference:
        return props_XMLSAXFieldReference;
      case LanguageConceptSwitch.XMLSAXHandlerFunction:
        return props_XMLSAXHandlerFunction;
      case LanguageConceptSwitch.XMLSAXHandler_resultObject:
        return props_XMLSAXHandler_resultObject;
      case LanguageConceptSwitch.XMLSAXLocatorExpression:
        return props_XMLSAXLocatorExpression;
      case LanguageConceptSwitch.XMLSAXNodeCreator:
        return props_XMLSAXNodeCreator;
      case LanguageConceptSwitch.XMLSAXNodeRule:
        return props_XMLSAXNodeRule;
      case LanguageConceptSwitch.XMLSAXNodeRuleParam:
        return props_XMLSAXNodeRuleParam;
      case LanguageConceptSwitch.XMLSAXNodeRuleParamRef:
        return props_XMLSAXNodeRuleParamRef;
      case LanguageConceptSwitch.XMLSAXNodeValidator:
        return props_XMLSAXNodeValidator;
      case LanguageConceptSwitch.XMLSAXParser:
        return props_XMLSAXParser;
      case LanguageConceptSwitch.XMLSAXTextHandler:
        return props_XMLSAXTextHandler;
      case LanguageConceptSwitch.XMLSAXTextHandler_value:
        return props_XMLSAXTextHandler_value;
      case LanguageConceptSwitch.XMLSAXTextRule:
        return props_XMLSAXTextRule;
    }
    return null;
  }
}
