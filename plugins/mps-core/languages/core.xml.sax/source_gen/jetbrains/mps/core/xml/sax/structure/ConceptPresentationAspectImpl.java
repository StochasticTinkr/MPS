package jetbrains.mps.core.xml.sax.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_XMLSAXAttributeHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXAttributeHandler_value = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXAttributeReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXAttributeRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXBreakStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXChildHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXChildHandler_childObject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXChildRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXChildRuleCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXDefaultChildHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXDefaultChildHandler_tagName = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXDefaultChildRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXFieldDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXFieldReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXHandlerFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXHandler_resultObject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXLocatorExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXNodeCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXNodeRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXNodeRuleParam = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXNodeRuleParamRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXNodeValidator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXParser = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXTextHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXTextHandler_value = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XMLSAXTextRule = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_XMLSAXAttributeHandler;
      case 1:
        return props_XMLSAXAttributeHandler_value;
      case 2:
        return props_XMLSAXAttributeReference;
      case 3:
        return props_XMLSAXAttributeRule;
      case 4:
        return props_XMLSAXBreakStatement;
      case 5:
        return props_XMLSAXChildHandler;
      case 6:
        return props_XMLSAXChildHandler_childObject;
      case 7:
        return props_XMLSAXChildRule;
      case 8:
        return props_XMLSAXChildRuleCondition;
      case 9:
        return props_XMLSAXDefaultChildHandler;
      case 10:
        return props_XMLSAXDefaultChildHandler_tagName;
      case 11:
        return props_XMLSAXDefaultChildRule;
      case 12:
        return props_XMLSAXFieldDeclaration;
      case 13:
        return props_XMLSAXFieldReference;
      case 14:
        return props_XMLSAXHandlerFunction;
      case 15:
        return props_XMLSAXHandler_resultObject;
      case 16:
        return props_XMLSAXLocatorExpression;
      case 17:
        return props_XMLSAXNodeCreator;
      case 18:
        return props_XMLSAXNodeRule;
      case 19:
        return props_XMLSAXNodeRuleParam;
      case 20:
        return props_XMLSAXNodeRuleParamRef;
      case 21:
        return props_XMLSAXNodeValidator;
      case 22:
        return props_XMLSAXParser;
      case 23:
        return props_XMLSAXTextHandler;
      case 24:
        return props_XMLSAXTextHandler_value;
      case 25:
        return props_XMLSAXTextRule;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
