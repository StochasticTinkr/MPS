package jetbrains.mps.core.xml.sax.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_XMLSAXAttributeHandler = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXAttributeHandler_value = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXAttributeReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXAttributeRule = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXBreakStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXChildHandler = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXChildHandler_childObject = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXChildRule = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXChildRuleCondition = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXDefaultChildHandler = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXDefaultChildHandler_tagName = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXDefaultChildRule = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXFieldDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXFieldReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXHandlerFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXHandler_resultObject = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXLocatorExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXNodeCreator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXNodeRule = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXNodeRuleParam = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXNodeRuleParamRef = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXNodeValidator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXParser = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXTextHandler = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXTextHandler_value = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XMLSAXTextRule = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0bb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_XMLSAXAttributeHandler;
          }
          break;
        case 1:
          if (true) {
            return props_XMLSAXAttributeHandler_value;
          }
          break;
        case 2:
          if (true) {
            return props_XMLSAXAttributeReference;
          }
          break;
        case 3:
          if (true) {
            return props_XMLSAXAttributeRule;
          }
          break;
        case 4:
          if (true) {
            return props_XMLSAXBreakStatement;
          }
          break;
        case 5:
          if (true) {
            return props_XMLSAXChildHandler;
          }
          break;
        case 6:
          if (true) {
            return props_XMLSAXChildHandler_childObject;
          }
          break;
        case 7:
          if (true) {
            return props_XMLSAXChildRule;
          }
          break;
        case 8:
          if (true) {
            return props_XMLSAXChildRuleCondition;
          }
          break;
        case 9:
          if (true) {
            return props_XMLSAXDefaultChildHandler;
          }
          break;
        case 10:
          if (true) {
            return props_XMLSAXDefaultChildHandler_tagName;
          }
          break;
        case 11:
          if (true) {
            return props_XMLSAXDefaultChildRule;
          }
          break;
        case 12:
          if (true) {
            return props_XMLSAXFieldDeclaration;
          }
          break;
        case 13:
          if (true) {
            return props_XMLSAXFieldReference;
          }
          break;
        case 14:
          if (true) {
            return props_XMLSAXHandlerFunction;
          }
          break;
        case 15:
          if (true) {
            return props_XMLSAXHandler_resultObject;
          }
          break;
        case 16:
          if (true) {
            return props_XMLSAXLocatorExpression;
          }
          break;
        case 17:
          if (true) {
            return props_XMLSAXNodeCreator;
          }
          break;
        case 18:
          if (true) {
            return props_XMLSAXNodeRule;
          }
          break;
        case 19:
          if (true) {
            return props_XMLSAXNodeRuleParam;
          }
          break;
        case 20:
          if (true) {
            return props_XMLSAXNodeRuleParamRef;
          }
          break;
        case 21:
          if (true) {
            return props_XMLSAXNodeValidator;
          }
          break;
        case 22:
          if (true) {
            return props_XMLSAXParser;
          }
          break;
        case 23:
          if (true) {
            return props_XMLSAXTextHandler;
          }
          break;
        case 24:
          if (true) {
            return props_XMLSAXTextHandler_value;
          }
          break;
        case 25:
          if (true) {
            return props_XMLSAXTextRule;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0bb = buildConceptIndices(MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e2c1L, "XMLSAXAttributeHandler"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x30181d5ee4a76f2eL, "XMLSAXAttributeHandler_value"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e2c9L, "XMLSAXAttributeReference"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e2cbL, "XMLSAXAttributeRule"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e2cfL, "XMLSAXBreakStatement"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e2d2L, "XMLSAXChildHandler"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e2d5L, "XMLSAXChildHandler_childObject"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e2d8L, "XMLSAXChildRule"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x4180d2369bed9265L, "XMLSAXChildRuleCondition"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x3afd693759ffee07L, "XMLSAXDefaultChildHandler"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x3afd69375a089554L, "XMLSAXDefaultChildHandler_tagName"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x3afd693759ffa97fL, "XMLSAXDefaultChildRule"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e2ddL, "XMLSAXFieldDeclaration"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e2e0L, "XMLSAXFieldReference"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e2e3L, "XMLSAXHandlerFunction"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e2eaL, "XMLSAXHandler_resultObject"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e2edL, "XMLSAXLocatorExpression"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e2efL, "XMLSAXNodeCreator"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e2f2L, "XMLSAXNodeRule"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0xd9be961730be3edL, "XMLSAXNodeRuleParam"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x4180d2369b1f16c6L, "XMLSAXNodeRuleParamRef"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e2fcL, "XMLSAXNodeValidator"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e301L, "XMLSAXParser"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e308L, "XMLSAXTextHandler"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x30181d5ee4a78284L, "XMLSAXTextHandler_value"), MetaAdapterFactory.getConcept(0xdcb5a83a19a844ffL, 0xa4cbfc7d324ecc63L, 0x1f6c736337b5e310L, "XMLSAXTextRule"));
}
