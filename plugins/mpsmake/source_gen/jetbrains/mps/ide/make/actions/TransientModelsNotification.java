package jetbrains.mps.ide.make.actions;

/*Generated by MPS */

import jetbrains.mps.project.MPSProject;
import com.intellij.openapi.wm.StatusBar;
import jetbrains.mps.generator.IModifiableGenerationSettings;
import jetbrains.mps.make.IMakeNotificationListener;
import com.intellij.openapi.wm.WindowManager;
import jetbrains.mps.generator.GenerationSettingsProvider;
import com.intellij.openapi.util.Disposer;
import jetbrains.mps.make.MakeServiceComponent;
import jetbrains.mps.ide.ThreadUtils;
import jetbrains.mps.make.MakeNotification;

public class TransientModelsNotification {
  private final MPSProject myProject;
  private StatusBar myStatusBar;
  private TransientModelsWidget myWidget;
  private TransientModelBallonDisplayer myDisplayer;
  private final IModifiableGenerationSettings.Listener mySettingsListener = new IModifiableGenerationSettings.Listener() {
    public void settingsChanged() {
      // notification not necessarily comes in EDT 
      updateWidgetLater();
    }
  };
  private final IMakeNotificationListener myMakeNotificationListener = new TransientModelsNotification.MyMakeNotificationListener();

  public TransientModelsNotification(final MPSProject project) {
    myProject = project;
  }

  public void projectOpened() {
    myStatusBar = WindowManager.getInstance().getStatusBar(myProject.getProject());
    myWidget = new TransientModelsWidget(myStatusBar, myProject.getComponent(GenerationSettingsProvider.class).getGenerationSettings());
    myStatusBar.addWidget(myWidget);
    myWidget.update();

    myDisplayer = new TransientModelBallonDisplayer(myStatusBar, myWidget);
    Disposer.register(myWidget, myDisplayer);
    myDisplayer.init();
    myProject.getComponent(GenerationSettingsProvider.class).addSettingsListener(mySettingsListener);
    myProject.getComponent(MakeServiceComponent.class).get().addListener(myMakeNotificationListener);
  }

  public void projectClosed() {
    myProject.getComponent(MakeServiceComponent.class).get().removeListener(myMakeNotificationListener);
    myProject.getComponent(GenerationSettingsProvider.class).removeSettingsListener(mySettingsListener);
    myStatusBar.removeWidget(myWidget.ID());
    Disposer.dispose(myWidget);
    myStatusBar = null;
    myDisplayer = null;
    myWidget = null;
  }

  /*package*/ void updateWidgetLater() {
    ThreadUtils.runInUIThreadNoWait(new Runnable() {
      public void run() {
        if (myWidget != null && !(Disposer.isDisposed(myWidget))) {
          myWidget.update();
        }
      }
    });
  }

  /*package*/ void showBalloonLater() {
    GenerationSettingsProvider sp = myProject.getComponent(GenerationSettingsProvider.class);
    if (!(sp.getGenerationSettings().isSaveTransientModels()) || !(TransientModelBallonDisplayer.isPopupShown())) {
      return;
    }
    ThreadUtils.runInUIThreadNoWait(new Runnable() {
      public void run() {
        if (myDisplayer != null && !(Disposer.isDisposed(myDisplayer))) {
          myDisplayer.showBalloon();
        }
      }
    });
  }

  private class MyMakeNotificationListener extends IMakeNotificationListener.Stub {
    private volatile boolean mySessionJustOpened;

    @Override
    public void scriptAboutToStart(MakeNotification notification) {
      if (mySessionJustOpened) {
        showBalloonLater();
        mySessionJustOpened = false;
      }
    }
    @Override
    public void sessionOpened(MakeNotification notification) {
      mySessionJustOpened = true;
    }
    @Override
    public void sessionClosed(MakeNotification notification) {
      mySessionJustOpened = false;
    }
  }

}
