package jetbrains.mps.editor.contextActionsTool.lang.menus.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_QueryFunction_TransformationMenu_Icon;
  private ConceptPresentation props_QueryFunction_TransformationMenu_Tooltip;
  private ConceptPresentation props_TransformationFeature_Icon;
  private ConceptPresentation props_TransformationFeature_Tooltip;
  private ConceptPresentation props_TransformationLocation_ContextActionsTool;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.QueryFunction_TransformationMenu_Icon:
        if (props_QueryFunction_TransformationMenu_Icon == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("a block of code");
          cpb.rawPresentation("query");
          props_QueryFunction_TransformationMenu_Icon = cpb.create();
        }
        return props_QueryFunction_TransformationMenu_Icon;
      case LanguageConceptSwitch.QueryFunction_TransformationMenu_Tooltip:
        if (props_QueryFunction_TransformationMenu_Tooltip == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("a block of code");
          cpb.rawPresentation("query");
          props_QueryFunction_TransformationMenu_Tooltip = cpb.create();
        }
        return props_QueryFunction_TransformationMenu_Tooltip;
      case LanguageConceptSwitch.TransformationFeature_Icon:
        if (props_TransformationFeature_Icon == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("icon");
          props_TransformationFeature_Icon = cpb.create();
        }
        return props_TransformationFeature_Icon;
      case LanguageConceptSwitch.TransformationFeature_Tooltip:
        if (props_TransformationFeature_Tooltip == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("tooltip");
          props_TransformationFeature_Tooltip = cpb.create();
        }
        return props_TransformationFeature_Tooltip;
      case LanguageConceptSwitch.TransformationLocation_ContextActionsTool:
        if (props_TransformationLocation_ContextActionsTool == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("context actions tool window");
          cpb.rawPresentation("context actions tool");
          props_TransformationLocation_ContextActionsTool = cpb.create();
        }
        return props_TransformationLocation_ContextActionsTool;
    }
    return null;
  }
}
