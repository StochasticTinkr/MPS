<!--
  ~ Copyright 2003-2016 JetBrains s.r.o.
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License");
  ~ you may not use this file except in compliance with the License.
  ~ You may obtain a copy of the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS,
  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  ~ See the License for the specific language governing permissions and
  ~ limitations under the License.
  -->

<idea-plugin version="2" xmlns:xi="http://www.w3.org/2001/XInclude">
  <id>jetbrains.mps.core</id>
  <name>MPS Core</name>
  <category>Custom Languages</category>
  <description>MPS Core</description>
  <version>3.4</version>
  <vendor url="http://www.jetbrains.com/mps/">JetBrains MPS</vendor>
  <idea-version since-build="145.1" until-build="163.1"/>

  <depends optional="true" config-file="idea-support.xml">com.intellij.modules.java</depends>
  <depends optional="true" config-file="intellij-ides-support.xml">com.intellij.modules.ultimate</depends>

  <application-components>
    <component>
      <interface-class>jetbrains.mps.ide.vfs.IdeaFSComponent</interface-class>
      <implementation-class>jetbrains.mps.ide.vfs.IdeaFileSystem</implementation-class>
    </component>
    <component>
      <interface-class>jetbrains.mps.smodel.ModelAccess</interface-class>
      <implementation-class>jetbrains.mps.smodel.WorkbenchModelAccess</implementation-class>
    </component>
    <component>
      <interface-class>jetbrains.mps.smodel.UndoHandler</interface-class>
      <implementation-class>jetbrains.mps.ide.undo.WorkbenchUndoHandler</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.ide.MPSCoreComponents</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.ide.persistence.PersistenceComponent</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.idea.core.make.NoMakeService</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.idea.core.navigation.NavigationSupportImpl</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.idea.core.refactoring.RefactoringAccessImpl</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.ide.projectView.ProjectViewSelectInProvider</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.idea.core.project.stubs.MPSGlobalLibImporter</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.ide.platform.watching.ReloadManagerComponent</implementation-class>
    </component>
    <!--

      JdkStubSolutionManager was commented since we decided to use same logic as works in MPS with loading
      JDKclasses for now.In future should be uncommented and modified if necessary.
    -->

    <component>
      <implementation-class>jetbrains.mps.idea.core.project.stubs.JdkStubSolutionManager</implementation-class>
    </component>

    <component>
      <implementation-class>jetbrains.mps.idea.core.library.MpsModuleLibraryKindContainer</implementation-class>
    </component>
    <component>
      <interface-class>jetbrains.mps.workbench.action.IRegistryManager</interface-class>
      <implementation-class>jetbrains.mps.workbench.action.DummyRegistryManager</implementation-class>
    </component>
    <component>
      <interface-class>jetbrains.mps.repository.IdeaPluginFacetComponent</interface-class>
      <implementation-class>jetbrains.mps.repository.DummyIdeaPluginFacetComponent</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.repository.RepositoryInitializingComponent</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.ide.platform.watching.WatchedRoots</implementation-class>
    </component>
  </application-components>

  <xi:include href="../../../workbench/mps-platform/source/META-INF/MPSCore.xml" xpointer="xpointer(/components/*)"/>
  <xi:include href="../../../workbench/mps-editor/source/META-INF/MPSEditor.xml" xpointer="xpointer(/components/*)"/>
  <xi:include href="../../../workbench/mps-ui/source_gen/jetbrains/mps/ide/platform/actions/PlatformActions.xml"
              xpointer="xpointer(/components/*)"/>
  <xi:include href="../../../workbench/mps-editor/source_gen/jetbrains/mps/ide/editor/actions/MPSEditorActions.xml"
              xpointer="xpointer(/components/*)"/>

  <project-components>
    <!-- coped from MPSUI.xml -->
    <component>
      <implementation-class>jetbrains.mps.ide.messages.MessagesViewTool</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.ide.messages.navigation.NavigationManager</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.idea.core.project.stubs.MPSProjectLibImporter</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.project.MPSProject</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.ide.vfs.ProjectRootListenerComponent</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.idea.core.psi.impl.MPSPsiProvider</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.idea.core.psi.impl.PsiModelReloadListener</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.idea.core.project.UpgradeModelsPersistence</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.idea.core.project.ModuleIdSynchronizer</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.idea.core.refactoring.RegisterMoveNodePsiParticipant</implementation-class>
    </component>
    <component>
      <implementation-class>jetbrains.mps.idea.core.project.module.ModuleMPSSupportInit</implementation-class>
    </component>
  </project-components>

  <extensionPoints>
    <!-- copied from recently created MPSUI.xml; consider splitting it into MPSUIplatfrom.xml and workbench -->
    <extensionPoint qualifiedName="com.intellij.mps.modelRootEntry" beanClass="jetbrains.mps.ide.ui.dialogs.properties.persistence.ModelRootEntryEP"/>
    <extensionPoint qualifiedName="com.intellij.mps.modelRootContributor"
                    beanClass="jetbrains.mps.idea.core.project.ModelRootContributorEP"/>
    <extensionPoint qualifiedName="com.intellij.mps.modelTemplateProvider"
                    interface="jetbrains.mps.idea.core.actions.ModelTemplateProvider"/>
    <extensionPoint qualifiedName="com.intellij.mps.renameRefactoringContributor"
                    beanClass="jetbrains.mps.idea.core.refactoring.RenameRefactoringContributorEP"/>
    <extensionPoint qualifiedName="com.intellij.mps.psiFactory"
                    interface="jetbrains.mps.idea.core.psi.MPSPsiNodeFactory"/>
    <extensionPoint qualifiedName="com.intellij.mps.psiSourceFinder"
                    interface="jetbrains.mps.idea.core.psi.MPS2PsiMapper"/>
    <extensionPoint qualifiedName="com.intellij.mps.moduleMpsSupport"
                    interface="jetbrains.mps.idea.core.project.module.ModuleMPSSupport"/>
  </extensionPoints>

  <extensions defaultExtensionNs="com.intellij">
    <mps.modelRootContributor className="jetbrains.mps.idea.core.project.stubs.ModuleLibStubProvider"/>
    <editorOptionsProvider
            instance="jetbrains.mps.nodeEditor.EditorSettingsConfigurable$EditorSettingsConfigurableOptionsProvider"/>
    <facetType implementation="jetbrains.mps.idea.core.facet.MPSFacetType"/>
    <frameworkSupport implementation="jetbrains.mps.idea.core.facet.MPSFrameworkSupportProvider"/>
    <mps.LanguageLibrary dir="/languages"/>
    <mps.LanguageLibrary dir="/lib"/>
    <mps.renameRefactoringContributor className="jetbrains.mps.idea.core.refactoring.DefaultRenameContributor"
                                      id="mps-core-rename" order="last"/>

    <treeStructureProvider implementation="jetbrains.mps.idea.core.projectView.MPSTreeStructureProvider"/>
    <usageGroupingRuleProvider implementation="jetbrains.mps.idea.core.usages.rules.MPSUsageGroupingRuleProviderImpl"/>
    <errorHandler implementation="jetbrains.mps.ide.blame.CharismaReporter"/>
    <renameHandler implementation="jetbrains.mps.idea.core.refactoring.ModelRenameHandler"/>
    <renameHandler implementation="jetbrains.mps.idea.core.refactoring.MPSRenameRefactoringHandler"/>
    <vetoRenameCondition implementation="jetbrains.mps.idea.core.refactoring.MPSVetoRenameCondition"/>
    <refactoring.moveHandler implementation="jetbrains.mps.idea.core.refactoring.MPSMoveHandlerDelegate"
                             order="first"/> <!-- isn't first a bit too much -->
    <moduleRendererFactory implementation="jetbrains.mps.idea.core.navigation.MpsRendererFactory" order="first"/>
    <!-- FIXME: mps-editor-api.jar doesn't look good in jps classpath -->
    <!-- FIXME: added mps-platform.jar to avoid NoClassDefFound for VisibilityUtil from baseLanguage.search
    2 things should happen
      1) baseLanguage.search separated into its own jar, as we shouldn't need mps-platform here
      2) this jar should ideally go from this mps-core/plugin.xml to mps-java/plugin.xml
         It doesn't work currently (NoClassDef still occurs) most likely due to the fact that baseLanguage is part
         of mps-core not mps-java, so its generator works in the core jps plugin's classloader.
         Ideally baseLanguage must be part of mps-java

      mps-editor.jar added :( due to NoClassDef for IntentionAspectDescriptor
    -->
    <!-- IMORTANT keep it in sync with build.xml runTests target, otherwise jps tests fill fail -->
    <compileServer.plugin
            classpath="jps/mps-jps-plugin.jar;mps-common.jar;mps-tool.jar;mps-core.jar;mps-openapi.jar;mps-logging.jar;mps-messaging.jar;mps-collections.jar;mps-closures.jar;mps-tuples.jar;mps-editor.jar;mps-editor-api.jar;mps-platform.jar;mps-behavior-api.jar;mps-behavior-runtime.jar;mps-boot-util.jar"/>
    <buildProcess.parametersProvider implementation="jetbrains.mps.idea.build.MPSBuildProcessParametersProvider"/>
    <library.type implementation="jetbrains.mps.idea.core.library.ModuleLibraryType"/>
    <projectConfigurable instance="jetbrains.mps.idea.core.codeStyle.MpsCodeStyleSettingsConfigurable"
                         order="after colors"/>
    <projectConfigurable instance="jetbrains.mps.idea.core.compiler.MpsCompilerSettingsConfigurable"
                         order="after colors"/>
    <lang.fileViewProviderFactory language="MPS"
                                  implementationClass="jetbrains.mps.idea.core.psi.impl.file.MPSFileViewProviderFactory"/>
    <analyzeStacktraceFilter implementation="jetbrains.mps.ide.platform.actions.MPSStackTraceFilter" order="first"/>
    <navbar implementation="jetbrains.mps.idea.core.navbar.MPSNavBarExtension" id="MPSNavbar"/>
    <lang.parserDefinition language="MPS" implementationClass="jetbrains.mps.idea.core.fileType.MPSParserDefinition"/>
    <iconLayerProvider implementation="jetbrains.mps.idea.core.psi.impl.ModelFileIconLayerProvider"/>
    <getDataRule key="MPS_SModel" implementationClass="jetbrains.mps.idea.core.data.ModelDataRule"/>
    <getDataRule key="MPS_SModel_List" implementationClass="jetbrains.mps.idea.core.data.ModelsDataRule"/>
    <projectService serviceInterface="com.intellij.psi.search.ProjectScopeBuilder"
                    serviceImplementation="jetbrains.mps.idea.core.project.MPSProjectScopeBuilder"
                    overrides="true"/>
    <fileEditorProvider implementation="jetbrains.mps.idea.core.editor.ModelFileToRootDispatchingEditorProvider"></fileEditorProvider>
    <gotoClassContributor implementation="jetbrains.mps.idea.core.navigation.MPSIdeaGotoClassContributor"/>
  </extensions>

  <extensions defaultExtensionNs="jetbrains.mps">
    <NodeEditorFactory implementation="jetbrains.mps.idea.core.editor.IdeaMPSEditorOpenHandler"/>
  </extensions>


  <actions>
    <action
            id="test.modelRepository"
            class="jetbrains.mps.idea.core.actions.TestRepository"
            description="Test MPS model repository">
      <add-to-group group-id="ToolsMenu" relative-to-action="GenerateJavadoc" anchor="after"/>
    </action>
    <action id="jetbrains.mps.idea.core.actions.MarkModelRootAction"
            class="jetbrains.mps.idea.core.actions.MarkModelRootAction">
      <add-to-group group-id="MarkRootGroup"/>
    </action>
    <action id="jetbrains.mps.idea.core.actions.UnmarkModelRootAction"
            class="jetbrains.mps.idea.core.actions.UnmarkModelRootAction">
      <add-to-group group-id="MarkRootGroup"/>
    </action>
    <action id="jetbrains.mps.idea.core.actions.AddMissingDependencyAction"
            class="jetbrains.mps.idea.core.actions.AddMissingDependencyAction">
      <add-to-group group-id="jetbrains.mps.ide.editor.actions.ActionsAsIntentions_ActionGroup"/>
    </action>
    <!--This action should be moved to MPSCore.xml as soon as we use Idea Project Tree in IDE-->
    <action id="jetbrains.mps.workbench.goTo.GoToModelPlatformAction"
            class="jetbrains.mps.workbench.goTo.GoToModelPlatformAction"
            text="MPS Model...">
      <add-to-group group-id="GoToMenu"
                    anchor="first"/>
      <keyboard-shortcut first-keystroke="ctrl alt shift M" keymap="$default"/>
    </action>



    <group id="jetbrains.mps.NewGroup">
      <add-to-group group-id="NewGroup" anchor="first"/>
      <action id="jetbrains.mps.idea.core.actions.NewRootAction"
              class="jetbrains.mps.idea.core.actions.NewRootAction"/>
      <action id="jetbrains.mps.idea.core.actions.NewModelAction"
              class="jetbrains.mps.idea.core.actions.NewModelAction"/>
      <action id="jetbrains.mps.idea.core.actions.MakeDirAModel"
              class="jetbrains.mps.idea.core.actions.MakeDirAModel"/>
      <action id="jetbrains.mps.idea.core.actions.AddFirstLanguageImport"
              class="jetbrains.mps.idea.core.actions.AddFirstLanguageImport">
      </action>
    </group>
  </actions>
</idea-plugin>
