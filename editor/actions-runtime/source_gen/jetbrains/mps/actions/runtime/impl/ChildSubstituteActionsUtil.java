package jetbrains.mps.actions.runtime.impl;

/*Generated by MPS */

import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.SNodeUtil;
import java.util.List;
import jetbrains.mps.smodel.action.IChildNodeSetter;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.action.DefaultChildNodeSetter;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.ArrayList;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;
import jetbrains.mps.util.QueryMethodGenerated;
import jetbrains.mps.smodel.action.NodeSubstituteActionsFactoryContext;
import java.util.Collections;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.internal.collections.runtime.ISelector;
import java.util.Iterator;
import jetbrains.mps.smodel.action.RemoveSubstituteActionByConditionContext;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModuleOperations;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.smodel.action.NodeSubstitutePreconditionContext;

public class ChildSubstituteActionsUtil {
  private static final Logger LOG = LogManager.getLogger(ChildSubstituteActionsUtil.class);
  public ChildSubstituteActionsUtil() {
  }
  public static SNode getRefinedChildConcept(SNode currentChild) {
    SAbstractConcept childConcept = SNodeOperations.getConcept(currentChild);
    if (childConcept instanceof SConcept) {
      SConcept sconcept = ((SConcept) childConcept);
      while (sconcept.getSuperConcept() != null && !(sconcept.getSuperConcept().equals(SNodeUtil.concept_BaseConcept))) {
        sconcept = sconcept.getSuperConcept();
      }
      childConcept = sconcept;
    }
    return SNodeOperations.asNode(((SAbstractConcept) childConcept));
  }
  public static List<SNode> getActionsBuilders(SNode parentNode, SNode currentChild, SNode childConcept, IChildNodeSetter childSetter, IOperationContext context) {
    SNode link = null;
    if (childSetter instanceof DefaultChildNodeSetter) {
      link = SNodeOperations.cast(((DefaultChildNodeSetter) childSetter).getLinkDeclaration(), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration"));
    }

    List<SNode> allBuilders = new ArrayList<SNode>();
    List<Language> languages = SModelOperations.getLanguages(SNodeOperations.getModel(parentNode));
    boolean wrapped = !(childSetter instanceof DefaultChildNodeSetter);
    for (SNode actionsBuilder : ListSequence.fromList(getAllActionsBuilders(languages))) {
      SNode applicableConcept = SLinkOperations.getTarget(actionsBuilder, MetaAdapterFactory.getReferenceLink(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x102ebd2e9eaL, 0x102ebd3cd08L, "applicableConcept"));
      if (applicableConcept == null) {
        continue;
      }
      if (SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(applicableConcept), SNodeOperations.asSConcept(childConcept)) || SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(childConcept), SNodeOperations.asSConcept(applicableConcept))) {
        if (satisfiesPrecondition(actionsBuilder, parentNode, applicableConcept, link, currentChild, wrapped, context)) {
          ListSequence.fromList(allBuilders).addElement(actionsBuilder);
        }
      }
    }
    return allBuilders;
  }
  public static boolean containsRemoveDefaults(List<SNode> builders) {
    return ListSequence.fromList(builders).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ListSequence.fromList(SLinkOperations.getChildren(it, MetaAdapterFactory.getContainmentLink(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x102ebd2e9eaL, 0x1121dfcc035L, "part"))).any(new IWhereFilter<SNode>() {
          public boolean accept(SNode part) {
            return SNodeOperations.isInstanceOf(part, MetaAdapterFactory.getConcept(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x1122f4e71c0L, "jetbrains.mps.lang.actions.structure.RemoveDefaultsPart"));
          }
        });
      }
    });
  }
  public static List<SubstituteAction> invokeActionFactory(SNode builder, SNode parentNode, SNode currentChild, SNode childConcept, IChildNodeSetter childSetter, IOperationContext context) {

    String methodName = ((String) BHReflection.invoke(builder, SMethodTrimmedId.create("getBuilderQueryMethodName", MetaAdapterFactory.getConcept(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x102ebd2e9eaL, "jetbrains.mps.lang.actions.structure.NodeSubstituteActionsBuilder"), "hKuiFOW")));
    try {
      return (List<SubstituteAction>) QueryMethodGenerated.invoke(methodName, context, new NodeSubstituteActionsFactoryContext(parentNode, currentChild, childConcept, childSetter), SNodeOperations.getModel(builder));
    } catch (Throwable t) {
      LOG.error(null, t);
      return Collections.emptyList();
    }
  }
  public static List<SubstituteAction> applyActionFilter(SNode builder, List<SubstituteAction> actions, SNode parentNode, SNode currentChild, SNode childConcept, IOperationContext context) {

    // remove banned concepts 
    Set<SNode> conceptsToRemove = SetSequence.fromSetWithValues(new HashSet<SNode>(), ListSequence.fromList(SLinkOperations.getChildren(builder, MetaAdapterFactory.getContainmentLink(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x102ebd2e9eaL, 0x1121dfcc035L, "part"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x1122318438cL, "jetbrains.mps.lang.actions.structure.RemovePart")) && (SLinkOperations.getTarget(SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x1122318438cL, "jetbrains.mps.lang.actions.structure.RemovePart")), MetaAdapterFactory.getReferenceLink(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x1122318438cL, 0x11223185f62L, "conceptToRemove")) != null);
      }
    }).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode it) {
        return SLinkOperations.getTarget(SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x1122318438cL, "jetbrains.mps.lang.actions.structure.RemovePart")), MetaAdapterFactory.getReferenceLink(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x1122318438cL, 0x11223185f62L, "conceptToRemove"));
      }
    }));
    if (SetSequence.fromSet(conceptsToRemove).isNotEmpty()) {
      for (Iterator<SubstituteAction> it = ListSequence.fromList(actions).iterator(); it.hasNext();) {
        SubstituteAction action = it.next();
        if (SetSequence.fromSet(conceptsToRemove).contains(SNodeOperations.as(action.getOutputConcept(), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")))) {
          it.remove();
        }
      }
    }

    // apply custom filters 
    for (SNode removeByCondition : ListSequence.fromList(SLinkOperations.getChildren(builder, MetaAdapterFactory.getContainmentLink(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x102ebd2e9eaL, 0x1121dfcc035L, "part"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x11223561225L, "jetbrains.mps.lang.actions.structure.RemoveByConditionPart"));
      }
    })) {
      String methodName = "removeActionsByCondition_" + removeByCondition.getNodeId();
      try {
        QueryMethodGenerated.invoke(methodName, context, new RemoveSubstituteActionByConditionContext(ListSequence.fromList(actions).iterator(), parentNode, currentChild, childConcept), SNodeOperations.getModel(builder));
      } catch (Throwable t) {
        LOG.error(null, t);
      }
    }

    return actions;
  }
  public static boolean hasActionBuilders(Language language) {
    SModel actionsModelDescr = LanguageAspect.ACTIONS.get(language);
    if (actionsModelDescr == null) {
      return false;
    }
    SModel sModel = actionsModelDescr;
    return ListSequence.fromList(jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.roots(sModel, MetaAdapterFactory.getConcept(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x102ebc25367L, "jetbrains.mps.lang.actions.structure.NodeSubstituteActions"))).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return ListSequence.fromList(SLinkOperations.getChildren(it, MetaAdapterFactory.getContainmentLink(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x102ebc25367L, 0x102ebd353e0L, "actionsBuilder"))).isNotEmpty();
      }
    }).isNotEmpty();
  }
  private static List<SNode> getAllActionsBuilders(List<Language> languages) {
    List<SNode> result = new ArrayList<SNode>();
    for (Language language : ListSequence.fromList(languages)) {
      SModel actionsModelDescr = SModuleOperations.getAspect(language, "actions");
      if (actionsModelDescr == null) {
        continue;
      }
      SModel sModel = actionsModelDescr;
      ListSequence.fromList(result).addSequence(ListSequence.fromList(jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations.roots(sModel, MetaAdapterFactory.getConcept(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x102ebc25367L, "jetbrains.mps.lang.actions.structure.NodeSubstituteActions"))).translate(new ITranslator2<SNode, SNode>() {
        public Iterable<SNode> translate(SNode it) {
          return SLinkOperations.getChildren(it, MetaAdapterFactory.getContainmentLink(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x102ebc25367L, 0x102ebd353e0L, "actionsBuilder"));
        }
      }));
    }
    return result;
  }
  private static boolean satisfiesPrecondition(SNode actionsBuilder, SNode parentNode, SNode concept, SNode link, SNode currentTarget, boolean wrapped, IOperationContext context) {

    SNode precondition = SLinkOperations.getTarget(actionsBuilder, MetaAdapterFactory.getContainmentLink(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x102ebd2e9eaL, 0x10ccb7fcf83L, "precondition"));
    if (precondition != null) {
      String methodName = ((String) BHReflection.invoke(actionsBuilder, SMethodTrimmedId.create("getPreconditionQueryMethodName", MetaAdapterFactory.getConcept(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x102ebd2e9eaL, "jetbrains.mps.lang.actions.structure.NodeSubstituteActionsBuilder"), "hKuhHAJ")));
      try {
        return (Boolean) QueryMethodGenerated.invoke(methodName, context, new NodeSubstitutePreconditionContext(parentNode, concept, currentTarget, link, wrapped), SNodeOperations.getModel(actionsBuilder));
      } catch (Exception e) {
        LOG.error(null, e);
        return false;
      }
    }
    return true;
  }
}
