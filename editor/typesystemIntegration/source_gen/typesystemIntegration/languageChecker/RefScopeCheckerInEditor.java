package typesystemIntegration.languageChecker;

/*Generated by MPS */

import jetbrains.mps.checkers.RefScopeChecker;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.errors.item.EditorQuickFix;
import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.resolve.ResolverComponent;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.resolve.ReferenceResolverUtils;

public class RefScopeCheckerInEditor extends RefScopeChecker {
  private EditorComponent myEditorComponent;
  /*package*/ void setEditorComponent(EditorComponent editorContext) {
    myEditorComponent = editorContext;
  }
  @Override
  protected EditorQuickFix createResolveReferenceQuickfix(SReference reference, SRepository repository, boolean executeImmediately) {
    return new RefScopeCheckerInEditor.ResolveReferenceEditorBasedQuickFix(reference, repository, executeImmediately, myEditorComponent);
  }

  private static class ResolveReferenceEditorBasedQuickFix extends RefScopeChecker.ResolveReferenceQuickFix {
    private EditorComponent myEditorComponent;

    public ResolveReferenceEditorBasedQuickFix(SReference reference, SRepository repository, boolean executeImmediately, EditorComponent editorComponent) {
      super(reference, executeImmediately);
      myEditorComponent = editorComponent;
    }
    @Override
    public void execute(SRepository repository) {
      if (ResolverComponent.getInstance().resolveScopesOnly(myReference, repository)) {
        return;
      }
      SNode sourceNode = myReference.getSourceNode();
      if (sourceNode == null) {
        return;
      }
      final String resolveInfo = ReferenceResolverUtils.getResolveInfo(myReference, sourceNode);
      if (resolveInfo == null) {
        return;
      }
      EditorBasedReferenceResolverUtils.resolveInEditor(myEditorComponent, sourceNode, resolveInfo, myReference.getLink().getName());
    }
  }
}
