package typesystemIntegration.languageChecker;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SReference;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.model.SModelReference;
import java.util.Objects;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import java.awt.Component;
import jetbrains.mps.project.ModelImporter;

public class DependencyHelper {
  private final SReference myReference;

  public DependencyHelper(SReference reference) {
    myReference = reference;
  }

  public boolean isApplicable() {
    final SModel nodeOwner = myReference.getSourceNode().getModel();
    SModelReference targetModelRef = myReference.getTargetSModelReference();
    SModel modelToImport = (targetModelRef == null ? null : targetModelRef.resolve(nodeOwner.getRepository()));
    if (modelToImport == null || Objects.equals(nodeOwner, modelToImport)) {
      return false;
    }
    return !(ModelConstraints.getScope(myReference).contains(myReference.getTargetNode()));
  }

  public void execute(Component parentComponent) {
    if (!(isApplicable())) {
      return;
    }

    ModelImporter mi = new ModelImporter(myReference.getSourceNode().getModel());
    mi.prepare(myReference.getTargetSModelReference());

    boolean confirmed = true;
    if (mi.affectsModuleDependencies()) {
      confirmed = mi.confirmModuleChanges(parentComponent);
    }
    if (confirmed) {
      mi.execute();
    }
  }
}
