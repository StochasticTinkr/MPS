package jetbrains.mps.editor.runtime;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultEditorMessage;
import jetbrains.mps.nodeEditor.EditorMessageIconRenderer;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.message.EditorMessageOwner;
import java.awt.Graphics;
import jetbrains.mps.nodeEditor.EditorComponent;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.message.SimpleEditorMessage;
import java.awt.Cursor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeReference;
import javax.swing.JPopupMenu;

public abstract class AbstractLeftEditorHighlighterMessage extends DefaultEditorMessage implements EditorMessageIconRenderer {
  private String myTooltip;
  public AbstractLeftEditorHighlighterMessage(SNode node, EditorMessageOwner owner, String tooltip) {
    super(node, null, "", owner);
    myTooltip = tooltip;
  }

  @Override
  public void paint(Graphics graphics, EditorComponent component, EditorCell cell) {
  }
  @Override
  public boolean isValid(EditorComponent component) {
    return true;
  }
  @Override
  public boolean sameAs(SimpleEditorMessage message) {
    if (message instanceof AbstractLeftEditorHighlighterMessage) {
      AbstractLeftEditorHighlighterMessage other = (AbstractLeftEditorHighlighterMessage) message;
      return super.sameAs(other) && other.getType() == getType() && other.getTooltipText().equals(getTooltipText());
    }
    return false;
  }
  @Override
  public String getTooltipText() {
    return myTooltip;
  }
  @Override
  public Cursor getMouseOverCursor() {
    return Cursor.getPredefinedCursor(Cursor.HAND_CURSOR);
  }
  @Override
  public boolean showInGutter() {
    return false;
  }

  @Nullable
  @Override
  public SNodeReference getNodeReference() {
    SNode n = getNode();
    return (n == null ? null : n.getReference());
  }

  @Nullable
  @Override
  public EditorCell getNodeCell(jetbrains.mps.openapi.editor.EditorComponent editorComponent) {
    // DefaultEditorMessage has getNode but with legacy API component. 
    if (editorComponent instanceof EditorComponent) {
      return getCell((EditorComponent) editorComponent);
    }
    return editorComponent.findNodeCell(getNode(), true);
  }

  @Override
  public JPopupMenu getPopupMenu() {
    return null;
  }
}
