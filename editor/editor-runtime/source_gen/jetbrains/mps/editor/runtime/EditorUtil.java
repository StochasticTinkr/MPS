package jetbrains.mps.editor.runtime;

/*Generated by MPS */

import jetbrains.mps.util.annotation.ToRemove;
import javax.swing.JComponent;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.util.MacroHelper;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import org.jetbrains.annotations.NotNull;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import com.intellij.openapi.fileChooser.FileChooserDescriptor;
import com.intellij.openapi.fileChooser.FileChooserDescriptorFactory;
import com.intellij.openapi.util.Condition;
import com.intellij.openapi.vfs.VirtualFile;
import jetbrains.mps.baseLanguage.closures.runtime.Wrappers;
import jetbrains.mps.vfs.IFile;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import jetbrains.mps.vfs.FileSystem;
import jetbrains.mps.ide.vfs.IdeaFile;
import javax.swing.JButton;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;
import com.intellij.openapi.project.Project;
import jetbrains.mps.ide.project.ProjectHelper;
import com.intellij.openapi.fileChooser.FileChooser;
import jetbrains.mps.vfs.FileSystems;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.util.FileUtil;
import com.intellij.openapi.ui.Messages;
import jetbrains.mps.vfs.IFileUtils;
import java.awt.Dimension;
import java.beans.PropertyChangeListener;
import java.io.File;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import java.beans.PropertyChangeEvent;
import java.awt.Image;
import java.awt.Graphics;

public class EditorUtil {
  public EditorUtil() {
  }

  @Deprecated
  @ToRemove(version = 2018.1)
  public static JComponent createSelectIconButton(final SNode node, final SProperty property, final EditorContext context, boolean copy) {
    // was used in mbeddr at the moment of 2017.3 
    return createSelectImageButton(node, property, context);
  }

  public static JComponent createSelectImageButton(final SNode sourceNode, final SProperty property, final EditorContext context) {
    final MacroHelper macros = MacrosFactory.forModule(sourceNode.getModel().getModule());
    return createSelectImageButton(sourceNode, property, context, new _FunctionTypes._return_P1_E0<String, String>() {
      public String invoke(String fullPath) {
        return check_3m4h3r_a0a3a1a4(macros, fullPath);
      }
    }, new _FunctionTypes._return_P1_E0<String, String>() {
      public String invoke(String shortPath) {
        return check_3m4h3r_a0a4a1a4(macros, shortPath);
      }
    });
  }

  public static JComponent createSelectImageButton(final SNode node, final SProperty property, final EditorContext context, @NotNull final _FunctionTypes._return_P1_E0<? extends String, ? super String> shrinkPath, @NotNull final _FunctionTypes._return_P1_E0<? extends String, ? super String> expandPath) {
    final Set<String> allowed = SetSequence.fromSetAndArray(new HashSet<String>(), "tiff", "tif", "gif", "jpeg", "jpg", "png", "ico");
    final FileChooserDescriptor descriptor = FileChooserDescriptorFactory.createSingleFileNoJarsDescriptor().withFileFilter(new Condition<VirtualFile>() {
      public boolean value(VirtualFile f) {
        return SetSequence.fromSet(allowed).contains(f.getExtension());
      }
    });
    descriptor.setTitle("Select Image File");

    final Wrappers._T<IFile> oldFile = new Wrappers._T<IFile>(null);
    context.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        String filePath = expandPath.invoke(SNodeAccessUtil.getProperty(node, property));
        if (filePath != null) {
          oldFile.value = FileSystem.getInstance().getFile(filePath);
          if (!(oldFile.value.exists())) {
            oldFile.value = null;
          }
        }
      }
    });

    final VirtualFile oldVFile = (oldFile.value == null ? null : ((IdeaFile) oldFile.value).getVirtualFile());
    final JButton button = new JButton();
    button.setAction(new AbstractAction("...") {
      @Override
      public void actionPerformed(ActionEvent e) {
        Project project = ProjectHelper.toIdeaProject(context.getOperationContext().getProject());
        final VirtualFile chosenFile = FileChooser.chooseFile(descriptor, project, oldVFile);
        if (chosenFile == null) {
          return;
        }

        final Wrappers._T<IFile> result = new Wrappers._T<IFile>(FileSystems.getDefault().getFile(chosenFile.getCanonicalPath()));
        if (result.value == null) {
          return;
        }

        final Wrappers._T<IFile> moduleDir = new Wrappers._T<IFile>();
        final Wrappers._boolean isUnderModule = new Wrappers._boolean();
        context.getRepository().getModelAccess().runReadAction(new Runnable() {
          public void run() {
            moduleDir.value = ((AbstractModule) node.getModel().getModule()).getModuleSourceDir();
            isUnderModule.value = FileUtil.isAncestor(moduleDir.value.getPath(), chosenFile.getPath());
          }
        });

        if (!(isUnderModule.value)) {
          StringBuffer msg = new StringBuffer();
          msg.append("The image file is outside of the module directory ");
          msg.append("(" + moduleDir.value.getPath() + ").");
          msg.append("\n");
          msg.append("MPS will copy the file to <module>/icons folder.");
          msg.append("\n");
          msg.append("Would you like to proceed?");
          int copyAnswer = Messages.showYesNoDialog(msg.toString(), "Copy Image", Messages.getQuestionIcon());
          if (copyAnswer != Messages.YES) {
            return;
          }

          final Wrappers._boolean success = new Wrappers._boolean(true);
          context.getRepository().getModelAccess().runWriteAction(new Runnable() {
            public void run() {
              IFile copiedFile = moduleDir.value.getDescendant("icons").getDescendant(chosenFile.getName());
              if (copiedFile.exists()) {
                int rewriteAnswer = Messages.showYesNoDialog("File alread exists.\nRewrite?", "Error", Messages.getWarningIcon());
                if (rewriteAnswer != Messages.YES) {
                  success.value = false;
                  return;
                }
              }
              IFileUtils.copyFileContent(result.value, copiedFile);
              result.value = copiedFile;
            }
          });
          if (!(success.value)) {
            return;
          }
        }

        context.getRepository().getModelAccess().executeCommand(new Runnable() {
          public void run() {
            SNodeAccessUtil.setProperty(node, property, shrinkPath.invoke(result.value.getPath()));
          }
        });
      }
    });
    button.setPreferredSize(new Dimension(20, 20));
    button.setEnabled(!(context.getEditorComponent().isReadOnly()));
    return button;
  }

  private static class ImagePreview extends JComponent implements PropertyChangeListener {
    private File myFile;
    private ImageIcon myIcon;
    private static final int MAX_UNSCALED_ICON_SIZE = 128;

    private ImagePreview(JFileChooser fileChooser) {
      int borders = 4;
      setPreferredSize(new Dimension(MAX_UNSCALED_ICON_SIZE + borders, MAX_UNSCALED_ICON_SIZE + borders));
      fileChooser.addPropertyChangeListener(this);
    }

    @Override
    public void propertyChange(PropertyChangeEvent event) {
      String propertyName = event.getPropertyName();

      if (JFileChooser.DIRECTORY_CHANGED_PROPERTY.equals(propertyName)) {
        myFile = null;
      } else if (JFileChooser.SELECTED_FILE_CHANGED_PROPERTY.equals(propertyName)) {
        myFile = (File) event.getNewValue();
      } else {
        return;
      }

      myIcon = getIcon();
      if (isShowing()) {
        repaint();
      }
    }

    private ImageIcon getIcon() {
      if (myFile == null) {
        return null;
      }

      ImageIcon icon = new ImageIcon(myFile.getPath());
      if (icon != null) {
        int iconHeight = icon.getIconHeight();
        int iconWidth = icon.getIconWidth();
        if (iconHeight > MAX_UNSCALED_ICON_SIZE || iconWidth > MAX_UNSCALED_ICON_SIZE) {
          int scaledWidth = (iconHeight > iconWidth ? MAX_UNSCALED_ICON_SIZE * iconWidth / iconHeight : MAX_UNSCALED_ICON_SIZE);
          int scaledHeight = (iconHeight > iconWidth ? MAX_UNSCALED_ICON_SIZE : MAX_UNSCALED_ICON_SIZE * iconHeight / iconWidth);
          icon = new ImageIcon(icon.getImage().getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_FAST));
        }
      }
      return icon;
    }

    @Override
    protected void paintComponent(Graphics graphics) {
      if (myIcon == null) {
        myIcon = getIcon();
      }
      if (myIcon != null) {
        int x = (getWidth() - getIcon().getIconWidth()) / 2;
        int y = (getHeight() - getIcon().getIconHeight()) / 2;

        myIcon.paintIcon(this, graphics, x, y);
      }
    }
  }
  private static String check_3m4h3r_a0a3a1a4(MacroHelper checkedDotOperand, String fullPath) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.shrinkPath(fullPath);
    }
    return null;
  }
  private static String check_3m4h3r_a0a4a1a4(MacroHelper checkedDotOperand, String shortPath) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.expandPath(shortPath);
    }
    return null;
  }
}
