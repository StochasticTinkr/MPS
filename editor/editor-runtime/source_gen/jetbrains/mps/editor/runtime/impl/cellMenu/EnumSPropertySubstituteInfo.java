package jetbrains.mps.editor.runtime.impl.cellMenu;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.cellMenu.AbstractNodeSubstituteInfo;
import jetbrains.mps.openapi.editor.cells.DefaultSubstituteInfo;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.openapi.editor.EditorContext;
import java.util.List;
import jetbrains.mps.openapi.editor.cells.SubstituteAction;
import org.jetbrains.mps.openapi.language.SDataType;
import org.jetbrains.mps.openapi.language.SEnumeration;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.smodel.action.SPropertySubstituteAction;
import jetbrains.mps.openapi.editor.menus.EditorMenuTraceInfo;
import jetbrains.mps.nodeEditor.menus.EditorMenuTraceInfoImpl;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;

public class EnumSPropertySubstituteInfo extends AbstractNodeSubstituteInfo implements DefaultSubstituteInfo {
  private SNode myNode;
  private SProperty myProperty;
  public EnumSPropertySubstituteInfo(SNode node, SProperty property, EditorContext editorContext) {
    super(editorContext);
    myNode = node;
    myProperty = property;
  }
  @Override
  protected List<SubstituteAction> createActions() {
    SDataType type = myProperty.getType();
    if (!((type instanceof SEnumeration))) {
      return Collections.<SubstituteAction>emptyList();
    }
    SEnumeration enumm = as_u10lvr_a0a2a3(type, SEnumeration.class);
    List<SubstituteAction> actions = ListSequence.fromList(new ArrayList<SubstituteAction>(enumm.getLiterals().size()));
    for (final SEnumerationLiteral literal : enumm.getLiterals()) {
      ListSequence.fromList(actions).addElement(new SPropertySubstituteAction(myNode, myProperty, literal) {
        @Override
        public EditorMenuTraceInfo getEditorMenuTraceInfo() {
          EditorMenuTraceInfoImpl info = new EditorMenuTraceInfoImpl();
          info.setDescriptor(new EditorMenuDescriptorBase("Enum member substitute action: " + getMatchingText(""), literal.getSourceNode(), true));
          return info;
        }
      });
    }
    return actions;
  }
  private static <T> T as_u10lvr_a0a2a3(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
