package jetbrains.mps.editor.runtime.impl;

/*Generated by MPS */

import com.intellij.openapi.components.ApplicationComponent;
import java.util.Map;
import jetbrains.mps.smodel.Language;
import java.util.List;
import jetbrains.mps.openapi.editor.cells.KeyMap;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import org.jetbrains.mps.openapi.module.SRepository;
import jetbrains.mps.classloading.ClassLoaderManager;
import jetbrains.mps.classloading.MPSClassesListener;
import jetbrains.mps.classloading.MPSClassesListenerAdapter;
import java.util.Set;
import jetbrains.mps.module.ReloadableModuleBase;
import jetbrains.mps.ide.MPSCoreComponents;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.NonNls;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModuleOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.apache.log4j.Level;
import java.util.Collections;
import jetbrains.mps.smodel.behaviour.BHReflection;
import jetbrains.mps.core.aspects.behaviour.SMethodTrimmedId;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.MPSModuleRepository;
import com.intellij.openapi.application.ApplicationManager;
import org.jetbrains.mps.openapi.module.SRepositoryListenerBase;
import org.jetbrains.mps.openapi.module.SModule;

public class LanguagesKeymapManager implements ApplicationComponent {
  private final Map<Language, List<KeyMap>> myLanguagesToKeyMaps = MapSequence.fromMap(new HashMap<Language, List<KeyMap>>());
  private final LanguagesKeymapManager.MyModuleRepositoryListener myListener = new LanguagesKeymapManager.MyModuleRepositoryListener();
  private final SRepository myRepository;
  private final ClassLoaderManager myClassLoaderManager;
  private final MPSClassesListener myCleanupListener = new MPSClassesListenerAdapter() {
    @Override
    public void beforeClassesUnloaded(Set<? extends ReloadableModuleBase> modules) {
      LanguagesKeymapManager.this.clearCaches();
    }
  };

  public LanguagesKeymapManager(MPSCoreComponents coreComponents) {
    myRepository = coreComponents.getModuleRepository();
    myClassLoaderManager = coreComponents.getClassLoaderManager();
  }

  public List<KeyMap> getKeyMapsForLanguage(@NotNull Language l) {
    if (!(MapSequence.fromMap(myLanguagesToKeyMaps).containsKey(l))) {
      registerLanguageKeyMaps(l);
    }
    return MapSequence.fromMap(myLanguagesToKeyMaps).get(l);
  }

  @Override
  public void initComponent() {
    myClassLoaderManager.addClassesHandler(myCleanupListener);
    myRepository.addRepositoryListener(myListener);
  }

  @NonNls
  @NotNull
  @Override
  public String getComponentName() {
    return "Language KeyMap Manager";
  }

  @Override
  public void disposeComponent() {
    myRepository.removeRepositoryListener(myListener);
    myClassLoaderManager.removeClassesHandler(myCleanupListener);
  }

  private void clearCaches() {
    MapSequence.fromMap(myLanguagesToKeyMaps).clear();
  }

  protected static Logger LOG = LogManager.getLogger(LanguagesKeymapManager.class);
  private void registerLanguageKeyMaps(Language language) {
    SModel editorModelDescriptor = SModuleOperations.getAspect(language, "editor");
    SModel editorModel = (editorModelDescriptor != null ? editorModelDescriptor : null);
    List<KeyMap> keyMaps;
    if (editorModel != null) {
      keyMaps = ListSequence.fromList(new ArrayList<KeyMap>());
      for (SNode keyMapDeclaration : ListSequence.fromList(SModelOperations.roots(editorModel, MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfbc216b31bL, "jetbrains.mps.lang.editor.structure.CellKeyMapDeclaration")))) {
        Class<KeyMap> keyMapClass = findKeyMapClassByDeclaration(keyMapDeclaration);
        if (keyMapClass != null) {
          try {
            KeyMap keyMap = keyMapClass.newInstance();
            if (keyMap.isApplicableToEveryModel()) {
              ListSequence.fromList(keyMaps).addElement(keyMap);
            }
          } catch (InstantiationException e) {
            if (LOG.isEnabledFor(Level.ERROR)) {
              LOG.error("", e);
            }
          } catch (IllegalAccessException e) {
            if (LOG.isEnabledFor(Level.ERROR)) {
              LOG.error("", e);
            }
          }
        }
      }
    } else {
      keyMaps = Collections.emptyList();
    }
    MapSequence.fromMap(myLanguagesToKeyMaps).put(language, keyMaps);
  }

  private Class<KeyMap> findKeyMapClassByDeclaration(SNode declaration) {
    String fqName = ((String) BHReflection.invoke(declaration, SMethodTrimmedId.create("getFqName", null, "hEwIO9y")));
    String namespace = NameUtil.namespaceFromLongName(fqName);
    assert namespace.endsWith(".editor");
    String languageNamespace = namespace.substring(0, namespace.length() - ".editor".length());
    Language language = (Language) MPSModuleRepository.getInstance().getModuleByFqName(languageNamespace);
    if (language == null) {
      return null;
    }
    try {
      return ((Class<KeyMap>) language.getOwnClass(fqName));
    } catch (ClassNotFoundException ignored) {
      return null;
    }
  }

  private void unregisterLanguageKeyMaps(Language language) {
    MapSequence.fromMap(myLanguagesToKeyMaps).removeKey(language);
  }

  public static LanguagesKeymapManager getInstance() {
    return ApplicationManager.getApplication().getComponent(LanguagesKeymapManager.class);
  }

  private class MyModuleRepositoryListener extends SRepositoryListenerBase {
    private MyModuleRepositoryListener() {
    }

    @Override
    public void beforeModuleRemoved(@NotNull SModule module) {
      if (module instanceof Language) {
        unregisterLanguageKeyMaps((Language) module);
      }
    }
  }
}
