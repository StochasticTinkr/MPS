package jetbrains.mps.editor.runtime.impl.cellMenu;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import org.jetbrains.mps.openapi.language.SDataType;
import org.jetbrains.mps.openapi.language.SEnumeration;
import java.util.Collections;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.language.SEnumerationLiteral;
import jetbrains.mps.smodel.constraints.ModelConstraints;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.lang.editor.menus.transformation.PropertyTransformationMenuItem;

public class EnumSPropertyTransformationItemFactory {
  private EnumSPropertyTransformationItemFactory() {
  }
  public static List<TransformationMenuItem> createItems(SProperty property, TransformationMenuContext transformationMenuContext) {
    SDataType type = property.getType();
    if (!((type instanceof SEnumeration))) {
      return Collections.<TransformationMenuItem>emptyList();
    }
    SEnumeration enumm = as_7biv4j_a0a2a1(type, SEnumeration.class);
    List<TransformationMenuItem> items = ListSequence.fromList(new ArrayList<TransformationMenuItem>(enumm.getLiterals().size()));
    for (final SEnumerationLiteral literal : enumm.getLiterals()) {
      if (ModelConstraints.validatePropertyValue(transformationMenuContext.getNode(), property, literal)) {
        transformationMenuContext.getEditorMenuTrace().pushTraceInfo();

        try {
          transformationMenuContext.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("Enum member substitute action: " + literal.getPresentation(), literal.getSourceNode(), true));
          PropertyTransformationMenuItem item = new PropertyTransformationMenuItem(property, literal, transformationMenuContext);
          ListSequence.fromList(items).addElement(item);
        } finally {
          transformationMenuContext.getEditorMenuTrace().popTraceInfo();
        }
      }
    }

    return items;
  }
  private static <T> T as_7biv4j_a0a2a1(Object o, Class<T> type) {
    return (type.isInstance(o) ? (T) o : null);
  }
}
