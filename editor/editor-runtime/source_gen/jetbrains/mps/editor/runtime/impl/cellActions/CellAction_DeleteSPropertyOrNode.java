package jetbrains.mps.editor.runtime.impl.cellActions;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

public class CellAction_DeleteSPropertyOrNode extends AbstractCellAction {
  private SNode mySemanticNode;
  private SProperty myProperty;
  private boolean myIsBackspace;
  public CellAction_DeleteSPropertyOrNode(SNode semanticNode, SProperty property) {
    mySemanticNode = semanticNode;
    myProperty = property;
  }
  public CellAction_DeleteSPropertyOrNode(SNode semanticNode, SProperty property, boolean isBackspace) {
    mySemanticNode = semanticNode;
    myProperty = property;
    myIsBackspace = isBackspace;
  }
  @Override
  public boolean canExecute(EditorContext context) {
    return true;
  }
  @Override
  public void execute(EditorContext context) {
    if (SNodeAccessUtil.getProperty(mySemanticNode, myProperty) != null) {
      SNodeAccessUtil.setProperty(mySemanticNode, myProperty, null);
    } else {
      CellAction_DeleteEasily deleteAction = new CellAction_DeleteEasily(mySemanticNode, myIsBackspace);
      if (deleteAction.canExecute(context)) {
        deleteAction.execute(context);
      }
    }
  }
}
