package jetbrains.mps.editor.runtime.impl.cellActions;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.MetaAdapterByDeclaration;
import java.util.Objects;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.editor.runtime.cells.ReadOnlyUtil;
import jetbrains.mps.editor.runtime.deletionApprover.DeletionApproverUtil;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class CellAction_DeleteSmart extends AbstractCellAction {

  @NotNull
  private SNode mySource;
  @NotNull
  private SNode myTarget;
  private boolean myCanBeNull = true;
  private boolean myEnabled = true;

  @NotNull
  private SContainmentLink myLink;

  private SAbstractConcept myLinkTargetConcept;
  public CellAction_DeleteSmart(@NotNull SNode source, @NotNull SContainmentLink link, @NotNull SNode target) {
    this(source, link, target, null);
  }
  public CellAction_DeleteSmart(@NotNull SNode source, @NotNull SContainmentLink link, @NotNull SNode target, @Nullable SAbstractConcept specificTargetConcept) {
    mySource = source;
    myLink = link;
    myTarget = target;
    if (specificTargetConcept != null) {
      myLinkTargetConcept = MetaAdapterByDeclaration.asInstanceConcept(specificTargetConcept);
    } else {
      myLinkTargetConcept = MetaAdapterByDeclaration.asInstanceConcept(myLink.getTargetConcept());
    }
    myCanBeNull = link.isOptional();
    if (myCanBeNull) {
      return;
    }
    myEnabled = !(link.isMultiple()) && !(Objects.equals(SNodeOperations.getConcept(myTarget), myLinkTargetConcept));
  }

  @Override
  public boolean canExecute(EditorContext context) {
    if (!(myEnabled)) {
      return false;
    }
    EditorCell myTargetCell = context.getEditorComponent().findNodeCell(myTarget);
    return !(ReadOnlyUtil.isCellOrSelectionReadOnlyInEditor(context.getEditorComponent(), myTargetCell));
  }
  @Override
  public void execute(EditorContext context) {
    if (DeletionApproverUtil.approve(context, myTarget)) {
      return;
    }
    SNodeOperations.deleteNode(myTarget);
    if (!(myCanBeNull)) {
      SNode defaultTarget = SModelUtil_new.instantiateConceptDeclaration(myLinkTargetConcept, SNodeOperations.getModel(mySource), null, true);
      SLinkOperations.setTarget(mySource, myLink, defaultTarget);
    }
  }
}
