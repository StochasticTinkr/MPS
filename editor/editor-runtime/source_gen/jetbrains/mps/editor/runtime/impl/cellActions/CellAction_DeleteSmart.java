package jetbrains.mps.editor.runtime.impl.cellActions;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.editor.runtime.cells.ReadOnlyUtil;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.legacy.ConceptMetaInfoConverter;

public class CellAction_DeleteSmart extends AbstractCellAction {
  private SNode mySource;
  private SContainmentLink myLink;
  private SNode myTarget;
  private boolean myCanBeNull = true;
  private boolean myEnabled = true;
  private String myRole;
  public CellAction_DeleteSmart(SNode source, SContainmentLink link, SNode target) {
    mySource = source;
    myLink = link;
    myTarget = target;
    myRole = link.getName();
    myCanBeNull = link.isOptional();
    if (myCanBeNull) {
      return;
    }

    myEnabled = !(link.isMultiple()) && neq_89lc4r_a0a0h0g(SNodeOperations.getConcept(myTarget), myLink.getTargetConcept());
  }
  @Override
  public boolean canExecute(EditorContext context) {
    if (!(myEnabled)) {
      return false;
    }
    EditorCell myTargetCell = context.getEditorComponent().findNodeCell(myTarget);
    return !(ReadOnlyUtil.isCellOrSelectionReadOnlyInEditor(context.getEditorComponent(), myTargetCell));
  }
  @Override
  public void execute(EditorContext context) {
    SNodeOperations.deleteNode(myTarget);
    if (!(myCanBeNull)) {
      SNode defaultTarget = SModelUtil_new.instantiateConceptDeclaration(myLink.getTargetConcept(), SNodeOperations.getModel(mySource), null, true);
      SLinkOperations.setTarget(mySource, ((ConceptMetaInfoConverter) mySource.getConcept()).convertAggregation(myRole), defaultTarget);
    }
  }
  private static boolean neq_89lc4r_a0a0h0g(Object a, Object b) {
    return !(((a != null ? a.equals(b) : a == b)));
  }
}
