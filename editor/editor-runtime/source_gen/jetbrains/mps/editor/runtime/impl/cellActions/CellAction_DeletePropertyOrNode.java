package jetbrains.mps.editor.runtime.impl.cellActions;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;

/**
 * 
 * @deprecated use CellActionDeleteSPropertyOrNode
 */
@Deprecated
public class CellAction_DeletePropertyOrNode extends AbstractCellAction {
  private SNode mySemanticNode;
  private String myPropertyName;
  private boolean myIsBackspace;
  @Deprecated
  public CellAction_DeletePropertyOrNode(SNode semanticNode, String propertyName) {
    mySemanticNode = semanticNode;
    myPropertyName = propertyName;
  }
  @Deprecated
  public CellAction_DeletePropertyOrNode(SNode semanticNode, String propertyName, boolean isBackspace) {
    mySemanticNode = semanticNode;
    myPropertyName = propertyName;
    this.myIsBackspace = isBackspace;
  }
  @Override
  public boolean canExecute(EditorContext context) {
    return true;
  }
  @Override
  public void execute(EditorContext context) {
    if (SNodeAccessUtil.getProperty(mySemanticNode, myPropertyName) != null) {
      SNodeAccessUtil.setProperty(mySemanticNode, myPropertyName, null);
    } else {
      CellAction_DeleteEasily deleteAction = new CellAction_DeleteEasily(mySemanticNode, myIsBackspace);
      if (deleteAction.canExecute(context)) {
        deleteAction.execute(context);
      }
    }
  }
}
