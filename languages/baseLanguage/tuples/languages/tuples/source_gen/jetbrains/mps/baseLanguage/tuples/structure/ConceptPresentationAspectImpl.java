package jetbrains.mps.baseLanguage.tuples.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_IndexedTupleLiteral = new ConceptPresentationBuilder().shortDesc("indexed tuple").create();
  private final ConceptPresentation props_IndexedTupleMemberAccessExpression = new ConceptPresentationBuilder().shortDesc("access tuple member by index").create();
  private final ConceptPresentation props_IndexedTupleType = new ConceptPresentationBuilder().shortDesc("indexed tuple type").create();
  private final ConceptPresentation props_NamedTupleComponentAccessOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NamedTupleComponentDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NamedTupleComponentReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NamedTupleDeclaration = new ConceptPresentationBuilder().shortDesc("Named tuple declaration").icon(IconContainer.RESOURCE_a0a0g).create();
  private final ConceptPresentation props_NamedTupleLiteral = new ConceptPresentationBuilder().shortDesc("tuple literal").create();
  private final ConceptPresentation props_NamedTupleType = new ConceptPresentationBuilder().shortDesc("reference to named tuple declaration").create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.IndexedTupleLiteral:
        return props_IndexedTupleLiteral;
      case LanguageConceptSwitch.IndexedTupleMemberAccessExpression:
        return props_IndexedTupleMemberAccessExpression;
      case LanguageConceptSwitch.IndexedTupleType:
        return props_IndexedTupleType;
      case LanguageConceptSwitch.NamedTupleComponentAccessOperation:
        return props_NamedTupleComponentAccessOperation;
      case LanguageConceptSwitch.NamedTupleComponentDeclaration:
        return props_NamedTupleComponentDeclaration;
      case LanguageConceptSwitch.NamedTupleComponentReference:
        return props_NamedTupleComponentReference;
      case LanguageConceptSwitch.NamedTupleDeclaration:
        return props_NamedTupleDeclaration;
      case LanguageConceptSwitch.NamedTupleLiteral:
        return props_NamedTupleLiteral;
      case LanguageConceptSwitch.NamedTupleType:
        return props_NamedTupleType;
    }
    return null;
  }
}
