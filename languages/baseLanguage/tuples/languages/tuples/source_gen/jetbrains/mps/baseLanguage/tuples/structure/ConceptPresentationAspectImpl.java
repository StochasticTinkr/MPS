package jetbrains.mps.baseLanguage.tuples.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_IndexedTupleLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndexedTupleMemberAccessExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndexedTupleType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NamedTupleComponentAccessOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NamedTupleComponentDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NamedTupleComponentReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NamedTupleDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0g).create();
  private final ConceptPresentation props_NamedTupleLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NamedTupleType = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("a247e09e-2435-45ba-b8d2-07e93feba96a"), "jetbrains.mps.baseLanguage.tuples")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_IndexedTupleLiteral;
      case 1:
        return props_IndexedTupleMemberAccessExpression;
      case 2:
        return props_IndexedTupleType;
      case 3:
        return props_NamedTupleComponentAccessOperation;
      case 4:
        return props_NamedTupleComponentDeclaration;
      case 5:
        return props_NamedTupleComponentReference;
      case 6:
        return props_NamedTupleDeclaration;
      case 7:
        return props_NamedTupleLiteral;
      case 8:
        return props_NamedTupleType;
    }
    throw new IllegalStateException();
  }
}
