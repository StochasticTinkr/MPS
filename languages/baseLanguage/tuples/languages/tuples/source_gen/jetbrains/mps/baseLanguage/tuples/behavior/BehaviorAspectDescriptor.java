package jetbrains.mps.baseLanguage.tuples.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myIndexedTupleType__BehaviorDescriptor = new IndexedTupleType__BehaviorDescriptor();
  private final BHDescriptor myIndexedTupleLiteral__BehaviorDescriptor = new IndexedTupleLiteral__BehaviorDescriptor();
  private final BHDescriptor myIndexedTupleMemberAccessExpression__BehaviorDescriptor = new IndexedTupleMemberAccessExpression__BehaviorDescriptor();
  private final BHDescriptor myNamedTupleDeclaration__BehaviorDescriptor = new NamedTupleDeclaration__BehaviorDescriptor();
  private final BHDescriptor myNamedTupleComponentDeclaration__BehaviorDescriptor = new NamedTupleComponentDeclaration__BehaviorDescriptor();
  private final BHDescriptor myNamedTupleType__BehaviorDescriptor = new NamedTupleType__BehaviorDescriptor();
  private final BHDescriptor myNamedTupleLiteral__BehaviorDescriptor = new NamedTupleLiteral__BehaviorDescriptor();
  private final BHDescriptor myNamedTupleComponentAccessOperation__BehaviorDescriptor = new NamedTupleComponentAccessOperation__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myIndexedTupleLiteral__BehaviorDescriptor;
      case 1:
        return myIndexedTupleMemberAccessExpression__BehaviorDescriptor;
      case 2:
        return myIndexedTupleType__BehaviorDescriptor;
      case 3:
        return myNamedTupleComponentAccessOperation__BehaviorDescriptor;
      case 4:
        return myNamedTupleComponentDeclaration__BehaviorDescriptor;
      case 5:
        return myNamedTupleDeclaration__BehaviorDescriptor;
      case 6:
        return myNamedTupleLiteral__BehaviorDescriptor;
      case 7:
        return myNamedTupleType__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xa247e09e243545baL, 0xb8d207e93feba96aL, 0x12071708c13L), MetaIdFactory.conceptId(0xa247e09e243545baL, 0xb8d207e93feba96aL, 0x12071acfb50L), MetaIdFactory.conceptId(0xa247e09e243545baL, 0xb8d207e93feba96aL, 0x1207157a8dcL), MetaIdFactory.conceptId(0xa247e09e243545baL, 0xb8d207e93feba96aL, 0x1209c84a4eaL), MetaIdFactory.conceptId(0xa247e09e243545baL, 0xb8d207e93feba96aL, 0x12095b3e54fL), MetaIdFactory.conceptId(0xa247e09e243545baL, 0xb8d207e93feba96aL, 0x1208fa48aa5L), MetaIdFactory.conceptId(0xa247e09e243545baL, 0xb8d207e93feba96aL, 0x1209b88731cL), MetaIdFactory.conceptId(0xa247e09e243545baL, 0xb8d207e93feba96aL, 0x12099dc1365L)).seal();
}
