package jetbrains.mps.baseLanguage.javadoc.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AuthorBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseDocComment = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_BaseDocReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseInlineDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseVariableDocReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClassifierDocComment = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ClassifierDocReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CodeInlineDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CodeSnippet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommentLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommentLinePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DeprecatedBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DocMethodParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DocTypeParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmptyBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FieldDocComment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FieldDocReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HTMLElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InheritDocInlineDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineTagCommentLinePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkInlineDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MethodDocComment = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_MethodDocReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReturnBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SeeBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SinceBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StaticFieldDocReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextCommentLinePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ThrowsBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ValueInlineDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VersionBlockDocTag = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_lpa09p_a0jb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AuthorBlockDocTag;
          }
          break;
        case 1:
          if (true) {
            return props_BaseBlockDocTag;
          }
          break;
        case 2:
          if (true) {
            return props_BaseDocComment;
          }
          break;
        case 3:
          if (true) {
            return props_BaseDocReference;
          }
          break;
        case 4:
          if (true) {
            return props_BaseInlineDocTag;
          }
          break;
        case 5:
          if (true) {
            return props_BaseParameterReference;
          }
          break;
        case 6:
          if (true) {
            return props_BaseVariableDocReference;
          }
          break;
        case 7:
          if (true) {
            return props_ClassifierDocComment;
          }
          break;
        case 8:
          if (true) {
            return props_ClassifierDocReference;
          }
          break;
        case 9:
          if (true) {
            return props_CodeInlineDocTag;
          }
          break;
        case 10:
          if (true) {
            return props_CodeSnippet;
          }
          break;
        case 11:
          if (true) {
            return props_CommentLine;
          }
          break;
        case 12:
          if (true) {
            return props_CommentLinePart;
          }
          break;
        case 13:
          if (true) {
            return props_DeprecatedBlockDocTag;
          }
          break;
        case 14:
          if (true) {
            return props_DocMethodParameterReference;
          }
          break;
        case 15:
          if (true) {
            return props_DocTypeParameterReference;
          }
          break;
        case 16:
          if (true) {
            return props_EmptyBlockDocTag;
          }
          break;
        case 17:
          if (true) {
            return props_FieldDocComment;
          }
          break;
        case 18:
          if (true) {
            return props_FieldDocReference;
          }
          break;
        case 19:
          if (true) {
            return props_HTMLElement;
          }
          break;
        case 20:
          if (true) {
            return props_InheritDocInlineDocTag;
          }
          break;
        case 21:
          if (true) {
            return props_InlineTagCommentLinePart;
          }
          break;
        case 22:
          if (true) {
            return props_LinkInlineDocTag;
          }
          break;
        case 23:
          if (true) {
            return props_MethodDocComment;
          }
          break;
        case 24:
          if (true) {
            return props_MethodDocReference;
          }
          break;
        case 25:
          if (true) {
            return props_ParameterBlockDocTag;
          }
          break;
        case 26:
          if (true) {
            return props_ReturnBlockDocTag;
          }
          break;
        case 27:
          if (true) {
            return props_SeeBlockDocTag;
          }
          break;
        case 28:
          if (true) {
            return props_SinceBlockDocTag;
          }
          break;
        case 29:
          if (true) {
            return props_StaticFieldDocReference;
          }
          break;
        case 30:
          if (true) {
            return props_TextCommentLinePart;
          }
          break;
        case 31:
          if (true) {
            return props_ThrowsBlockDocTag;
          }
          break;
        case 32:
          if (true) {
            return props_ValueInlineDocTag;
          }
          break;
        case 33:
          if (true) {
            return props_VersionBlockDocTag;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_lpa09p_a0jb = buildConceptIndices(MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7faee13eL, "jetbrains.mps.baseLanguage.javadoc.structure.AuthorBlockDocTag"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7faee13dL, "jetbrains.mps.baseLanguage.javadoc.structure.BaseBlockDocTag"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7fae70d3L, "jetbrains.mps.baseLanguage.javadoc.structure.BaseDocComment"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x1ec532ec252c9a26L, "jetbrains.mps.baseLanguage.javadoc.structure.BaseDocReference"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x60a0f9237ac5e838L, "jetbrains.mps.baseLanguage.javadoc.structure.BaseInlineDocTag"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x5ed0d79d7dbe86d7L, "jetbrains.mps.baseLanguage.javadoc.structure.BaseParameterReference"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4d316b5973d644c2L, "jetbrains.mps.baseLanguage.javadoc.structure.BaseVariableDocReference"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x1cb65d9fe66a764cL, "jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocComment"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x1ec532ec2531d2e4L, "jetbrains.mps.baseLanguage.javadoc.structure.ClassifierDocReference"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x1ec532ec252a7b73L, "jetbrains.mps.baseLanguage.javadoc.structure.CodeInlineDocTag"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x2398cefbc261e3ffL, "jetbrains.mps.baseLanguage.javadoc.structure.CodeSnippet"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x757ba20a4c87f96cL, "jetbrains.mps.baseLanguage.javadoc.structure.CommentLine"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x7c7f5b2f31990286L, "jetbrains.mps.baseLanguage.javadoc.structure.CommentLinePart"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x757ba20a4c87f964L, "jetbrains.mps.baseLanguage.javadoc.structure.DeprecatedBlockDocTag"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x5ed0d79d7dbe86d8L, "jetbrains.mps.baseLanguage.javadoc.structure.DocMethodParameterReference"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x5ed0d79d7dbe86dbL, "jetbrains.mps.baseLanguage.javadoc.structure.DocTypeParameterReference"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x44ac82392ce5c6b0L, "jetbrains.mps.baseLanguage.javadoc.structure.EmptyBlockDocTag"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x5ed0d79d7dc44bf2L, "jetbrains.mps.baseLanguage.javadoc.structure.FieldDocComment"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x1ec532ec252c9a28L, "jetbrains.mps.baseLanguage.javadoc.structure.FieldDocReference"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x5bc4aa08e154b399L, "jetbrains.mps.baseLanguage.javadoc.structure.HTMLElement"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x41a6af3499e5305fL, "jetbrains.mps.baseLanguage.javadoc.structure.InheritDocInlineDocTag"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x7c7f5b2f31990289L, "jetbrains.mps.baseLanguage.javadoc.structure.InlineTagCommentLinePart"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x235789022a5d3a2fL, "jetbrains.mps.baseLanguage.javadoc.structure.LinkInlineDocTag"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x4a3c146b7faeeb34L, "jetbrains.mps.baseLanguage.javadoc.structure.MethodDocComment"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x1ec532ec2531d2d3L, "jetbrains.mps.baseLanguage.javadoc.structure.MethodDocReference"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x757ba20a4c905f8aL, "jetbrains.mps.baseLanguage.javadoc.structure.ParameterBlockDocTag"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x514c0f687050918eL, "jetbrains.mps.baseLanguage.javadoc.structure.ReturnBlockDocTag"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x1ec532ec252ca3abL, "jetbrains.mps.baseLanguage.javadoc.structure.SeeBlockDocTag"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x757ba20a4c87ddadL, "jetbrains.mps.baseLanguage.javadoc.structure.SinceBlockDocTag"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x5a38b07c2d6d7c7bL, "jetbrains.mps.baseLanguage.javadoc.structure.StaticFieldDocReference"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x7c7f5b2f31990287L, "jetbrains.mps.baseLanguage.javadoc.structure.TextCommentLinePart"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x514c0f68704ec270L, "jetbrains.mps.baseLanguage.javadoc.structure.ThrowsBlockDocTag"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x60a0f9237ac5e83bL, "jetbrains.mps.baseLanguage.javadoc.structure.ValueInlineDocTag"), MetaAdapterFactory.getConcept(0xf280165065d5424eL, 0xbb1b463a8781b786L, 0x757ba20a4c87dda0L, "jetbrains.mps.baseLanguage.javadoc.structure.VersionBlockDocTag"));
}
