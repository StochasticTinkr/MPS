package jetbrains.mps.baseLanguage.javadoc.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AuthorBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseDocComment = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_BaseDocReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseInlineDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseVariableDocReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClassifierDocComment = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ClassifierDocReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CodeInlineDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CodeSnippet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommentLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommentLinePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DeprecatedBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DocMethodParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DocTypeParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmptyBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FieldDocComment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FieldDocReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HTMLElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InheritDocInlineDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineTagCommentLinePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkInlineDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MethodDocComment = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_MethodDocReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReturnBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SeeBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SinceBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StaticFieldDocReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextCommentLinePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ThrowsBlockDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ValueInlineDocTag = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VersionBlockDocTag = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AuthorBlockDocTag;
      case 1:
        return props_BaseBlockDocTag;
      case 2:
        return props_BaseDocComment;
      case 3:
        return props_BaseDocReference;
      case 4:
        return props_BaseInlineDocTag;
      case 5:
        return props_BaseParameterReference;
      case 6:
        return props_BaseVariableDocReference;
      case 7:
        return props_ClassifierDocComment;
      case 8:
        return props_ClassifierDocReference;
      case 9:
        return props_CodeInlineDocTag;
      case 10:
        return props_CodeSnippet;
      case 11:
        return props_CommentLine;
      case 12:
        return props_CommentLinePart;
      case 13:
        return props_DeprecatedBlockDocTag;
      case 14:
        return props_DocMethodParameterReference;
      case 15:
        return props_DocTypeParameterReference;
      case 16:
        return props_EmptyBlockDocTag;
      case 17:
        return props_FieldDocComment;
      case 18:
        return props_FieldDocReference;
      case 19:
        return props_HTMLElement;
      case 20:
        return props_InheritDocInlineDocTag;
      case 21:
        return props_InlineTagCommentLinePart;
      case 22:
        return props_LinkInlineDocTag;
      case 23:
        return props_MethodDocComment;
      case 24:
        return props_MethodDocReference;
      case 25:
        return props_ParameterBlockDocTag;
      case 26:
        return props_ReturnBlockDocTag;
      case 27:
        return props_SeeBlockDocTag;
      case 28:
        return props_SinceBlockDocTag;
      case 29:
        return props_StaticFieldDocReference;
      case 30:
        return props_TextCommentLinePart;
      case 31:
        return props_ThrowsBlockDocTag;
      case 32:
        return props_ValueInlineDocTag;
      case 33:
        return props_VersionBlockDocTag;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
