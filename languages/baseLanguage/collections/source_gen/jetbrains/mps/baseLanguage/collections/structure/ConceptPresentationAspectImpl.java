package jetbrains.mps.baseLanguage.collections.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractContainerCreator;
  private ConceptPresentation props_AbstractContainerType;
  private ConceptPresentation props_AbstractEnumeratorOperation;
  private ConceptPresentation props_AbstractIteratorOperation;
  private ConceptPresentation props_AbstractMappingOperation;
  private ConceptPresentation props_AbstractSetOperation;
  private ConceptPresentation props_AddAllElementsOperation;
  private ConceptPresentation props_AddAllSetElementsOperation;
  private ConceptPresentation props_AddElementOperation;
  private ConceptPresentation props_AddFirstElementOperation;
  private ConceptPresentation props_AddLastElementOperation;
  private ConceptPresentation props_AddSetElementOperation;
  private ConceptPresentation props_AllConstant;
  private ConceptPresentation props_AllOperation;
  private ConceptPresentation props_AlsoSortOperation;
  private ConceptPresentation props_AnyOperation;
  private ConceptPresentation props_AsSequenceOperation;
  private ConceptPresentation props_AsSynchronizedOperation;
  private ConceptPresentation props_AsUnmodifiableOperation;
  private ConceptPresentation props_BinaryOperation;
  private ConceptPresentation props_ChunkOperation;
  private ConceptPresentation props_ClearAllElementsOperation;
  private ConceptPresentation props_ClearSetOperation;
  private ConceptPresentation props_CollectionType;
  private ConceptPresentation props_ComparatorSortOperation;
  private ConceptPresentation props_ConcatOperation;
  private ConceptPresentation props_ContainerIteratorType;
  private ConceptPresentation props_ContainsAllOperation;
  private ConceptPresentation props_ContainsKeyOperation;
  private ConceptPresentation props_ContainsOperation;
  private ConceptPresentation props_ContainsValueOperation;
  private ConceptPresentation props_CustomContainerCreator;
  private ConceptPresentation props_CustomContainerDeclaration;
  private ConceptPresentation props_CustomContainers;
  private ConceptPresentation props_CustomMapCreator;
  private ConceptPresentation props_CutOperation;
  private ConceptPresentation props_DequeType;
  private ConceptPresentation props_DisjunctOperation;
  private ConceptPresentation props_DistinctOperation;
  private ConceptPresentation props_DowncastExpression;
  private ConceptPresentation props_EnumeratorType;
  private ConceptPresentation props_ExcludeOperation;
  private ConceptPresentation props_FindFirstOperation;
  private ConceptPresentation props_FindLastOperation;
  private ConceptPresentation props_FoldLeftOperation;
  private ConceptPresentation props_FoldRightOperation;
  private ConceptPresentation props_ForEachStatement;
  private ConceptPresentation props_ForEachVariable;
  private ConceptPresentation props_ForEachVariableReference;
  private ConceptPresentation props_GetCurrentOperation;
  private ConceptPresentation props_GetElementOperation;
  private ConceptPresentation props_GetEnumeratorOperation;
  private ConceptPresentation props_GetFirstOperation;
  private ConceptPresentation props_GetIndexOfOperation;
  private ConceptPresentation props_GetIteratorOperation;
  private ConceptPresentation props_GetKeysOperation;
  private ConceptPresentation props_GetLastIndexOfOperation;
  private ConceptPresentation props_GetLastOperation;
  private ConceptPresentation props_GetNextOperation;
  private ConceptPresentation props_GetSizeOperation;
  private ConceptPresentation props_GetValuesOperation;
  private ConceptPresentation props_HasNextOperation;
  private ConceptPresentation props_HashMapCreator;
  private ConceptPresentation props_HashSetCreator;
  private ConceptPresentation props_HeadListOperation;
  private ConceptPresentation props_HeadMapOperation;
  private ConceptPresentation props_HeadSetOperation;
  private ConceptPresentation props_IApplicableToCollection;
  private ConceptPresentation props_IApplicableToDeque;
  private ConceptPresentation props_IApplicableToList;
  private ConceptPresentation props_IApplicableToNothing;
  private ConceptPresentation props_IApplicableToQueue;
  private ConceptPresentation props_IApplicableToStack;
  private ConceptPresentation props_ICollectionOperation;
  private ConceptPresentation props_IContainerOperation;
  private ConceptPresentation props_IDequeOperation;
  private ConceptPresentation props_IListOperation;
  private ConceptPresentation props_IQueueOperation;
  private ConceptPresentation props_IStackOperation;
  private ConceptPresentation props_InsertElementOperation;
  private ConceptPresentation props_InternalSequenceOperation;
  private ConceptPresentation props_IntersectOperation;
  private ConceptPresentation props_IsEmptyOperation;
  private ConceptPresentation props_IsNotEmptyOperation;
  private ConceptPresentation props_IteratorType;
  private ConceptPresentation props_JoinOperation;
  private ConceptPresentation props_KeyAccessOperation;
  private ConceptPresentation props_LinkedHashMapCreator;
  private ConceptPresentation props_LinkedHashSetCreator;
  private ConceptPresentation props_LinkedListCreator;
  private ConceptPresentation props_LinkedListType;
  private ConceptPresentation props_ListCreatorWithInit;
  private ConceptPresentation props_ListElementAccessExpression;
  private ConceptPresentation props_ListType;
  private ConceptPresentation props_MapAsSequenceVarRef;
  private ConceptPresentation props_MapClearOperation;
  private ConceptPresentation props_MapElement;
  private ConceptPresentation props_MapEntry;
  private ConceptPresentation props_MapInitializer;
  private ConceptPresentation props_MapOperation;
  private ConceptPresentation props_MapOperationExpression;
  private ConceptPresentation props_MapRemoveOperation;
  private ConceptPresentation props_MapType;
  private ConceptPresentation props_MappingType;
  private ConceptPresentation props_MappingsSetOperation;
  private ConceptPresentation props_MoveNextOperation;
  private ConceptPresentation props_MultiForEachPair;
  private ConceptPresentation props_MultiForEachStatement;
  private ConceptPresentation props_MultiForEachVariable;
  private ConceptPresentation props_MultiForEachVariableReference;
  private ConceptPresentation props_NoArgumentsSequenceOperation;
  private ConceptPresentation props_OfTypeOperation;
  private ConceptPresentation props_PageOperation;
  private ConceptPresentation props_PeekOperation;
  private ConceptPresentation props_PopOperation;
  private ConceptPresentation props_PriorityQueueCreator;
  private ConceptPresentation props_PushOperation;
  private ConceptPresentation props_PutAllOperation;
  private ConceptPresentation props_QueueType;
  private ConceptPresentation props_ReduceLeftOperation;
  private ConceptPresentation props_ReduceRightOperation;
  private ConceptPresentation props_RemoveAllElementsOperation;
  private ConceptPresentation props_RemoveAllSetElementsOperation;
  private ConceptPresentation props_RemoveAtElementOperation;
  private ConceptPresentation props_RemoveElementOperation;
  private ConceptPresentation props_RemoveFirstElementOperation;
  private ConceptPresentation props_RemoveLastElementOperation;
  private ConceptPresentation props_RemoveOperation;
  private ConceptPresentation props_RemoveSetElementOperation;
  private ConceptPresentation props_RemoveWhereOperation;
  private ConceptPresentation props_ReverseOperation;
  private ConceptPresentation props_SelectNotNullOperation;
  private ConceptPresentation props_SelectOperation;
  private ConceptPresentation props_SequenceCreator;
  private ConceptPresentation props_SequenceOperation;
  private ConceptPresentation props_SequenceType;
  private ConceptPresentation props_SetElementOperation;
  private ConceptPresentation props_SetType;
  private ConceptPresentation props_SingleArgumentSequenceOperation;
  private ConceptPresentation props_SingletonSequenceCreator;
  private ConceptPresentation props_SkipOperation;
  private ConceptPresentation props_SkipStatement;
  private ConceptPresentation props_SmartClosureParameterDeclaration;
  private ConceptPresentation props_SortDirection;
  private ConceptPresentation props_SortOperation;
  private ConceptPresentation props_SortedMapOperation;
  private ConceptPresentation props_SortedMapType;
  private ConceptPresentation props_SortedSetOperation;
  private ConceptPresentation props_SortedSetType;
  private ConceptPresentation props_StackType;
  private ConceptPresentation props_StopStatement;
  private ConceptPresentation props_SubListOperation;
  private ConceptPresentation props_SubMapOperation;
  private ConceptPresentation props_SubSetOperation;
  private ConceptPresentation props_TailListOperation;
  private ConceptPresentation props_TailMapOperation;
  private ConceptPresentation props_TailOperation;
  private ConceptPresentation props_TailSetOperation;
  private ConceptPresentation props_TakeOperation;
  private ConceptPresentation props_TestAddElementOperation;
  private ConceptPresentation props_TestRemoveElementOperation;
  private ConceptPresentation props_ToArrayOperation;
  private ConceptPresentation props_ToIteratorOperation;
  private ConceptPresentation props_ToListOperation;
  private ConceptPresentation props_TranslateOperation;
  private ConceptPresentation props_TreeMapCreator;
  private ConceptPresentation props_TreeSetCreator;
  private ConceptPresentation props_UnionOperation;
  private ConceptPresentation props_ValueAccessOperation;
  private ConceptPresentation props_VisitAllOperation;
  private ConceptPresentation props_WhereOperation;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractContainerCreator:
        if (props_AbstractContainerCreator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractContainerCreator = cpb.create();
        }
        return props_AbstractContainerCreator;
      case LanguageConceptSwitch.AbstractContainerType:
        if (props_AbstractContainerType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("container type");
          props_AbstractContainerType = cpb.create();
        }
        return props_AbstractContainerType;
      case LanguageConceptSwitch.AbstractEnumeratorOperation:
        if (props_AbstractEnumeratorOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractEnumeratorOperation = cpb.create();
        }
        return props_AbstractEnumeratorOperation;
      case LanguageConceptSwitch.AbstractIteratorOperation:
        if (props_AbstractIteratorOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractIteratorOperation = cpb.create();
        }
        return props_AbstractIteratorOperation;
      case LanguageConceptSwitch.AbstractMappingOperation:
        if (props_AbstractMappingOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractMappingOperation = cpb.create();
        }
        return props_AbstractMappingOperation;
      case LanguageConceptSwitch.AbstractSetOperation:
        if (props_AbstractSetOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractSetOperation = cpb.create();
        }
        return props_AbstractSetOperation;
      case LanguageConceptSwitch.AddAllElementsOperation:
        if (props_AddAllElementsOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("add all elements");
          props_AddAllElementsOperation = cpb.create();
        }
        return props_AddAllElementsOperation;
      case LanguageConceptSwitch.AddAllSetElementsOperation:
        if (props_AddAllSetElementsOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.shortDesc("add all elements");
          props_AddAllSetElementsOperation = cpb.create();
        }
        return props_AddAllSetElementsOperation;
      case LanguageConceptSwitch.AddElementOperation:
        if (props_AddElementOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("add an element");
          props_AddElementOperation = cpb.create();
        }
        return props_AddElementOperation;
      case LanguageConceptSwitch.AddFirstElementOperation:
        if (props_AddFirstElementOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("add element as first");
          props_AddFirstElementOperation = cpb.create();
        }
        return props_AddFirstElementOperation;
      case LanguageConceptSwitch.AddLastElementOperation:
        if (props_AddLastElementOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("add element as last");
          props_AddLastElementOperation = cpb.create();
        }
        return props_AddLastElementOperation;
      case LanguageConceptSwitch.AddSetElementOperation:
        if (props_AddSetElementOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.shortDesc("add an element");
          props_AddSetElementOperation = cpb.create();
        }
        return props_AddSetElementOperation;
      case LanguageConceptSwitch.AllConstant:
        if (props_AllConstant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("all elements");
          props_AllConstant = cpb.create();
        }
        return props_AllConstant;
      case LanguageConceptSwitch.AllOperation:
        if (props_AllOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("check if all elements match the condition");
          props_AllOperation = cpb.create();
        }
        return props_AllOperation;
      case LanguageConceptSwitch.AlsoSortOperation:
        if (props_AlsoSortOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("sort by secondary key");
          props_AlsoSortOperation = cpb.create();
        }
        return props_AlsoSortOperation;
      case LanguageConceptSwitch.AnyOperation:
        if (props_AnyOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("check if there are any elements matching the condition");
          props_AnyOperation = cpb.create();
        }
        return props_AnyOperation;
      case LanguageConceptSwitch.AsSequenceOperation:
        if (props_AsSequenceOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AsSequenceOperation = cpb.create();
        }
        return props_AsSequenceOperation;
      case LanguageConceptSwitch.AsSynchronizedOperation:
        if (props_AsSynchronizedOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("synchronized collection");
          props_AsSynchronizedOperation = cpb.create();
        }
        return props_AsSynchronizedOperation;
      case LanguageConceptSwitch.AsUnmodifiableOperation:
        if (props_AsUnmodifiableOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("unmodifiable collection");
          props_AsUnmodifiableOperation = cpb.create();
        }
        return props_AsUnmodifiableOperation;
      case LanguageConceptSwitch.BinaryOperation:
        if (props_BinaryOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BinaryOperation = cpb.create();
        }
        return props_BinaryOperation;
      case LanguageConceptSwitch.ChunkOperation:
        if (props_ChunkOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ChunkOperation = cpb.create();
        }
        return props_ChunkOperation;
      case LanguageConceptSwitch.ClearAllElementsOperation:
        if (props_ClearAllElementsOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("clear all elements");
          props_ClearAllElementsOperation = cpb.create();
        }
        return props_ClearAllElementsOperation;
      case LanguageConceptSwitch.ClearSetOperation:
        if (props_ClearSetOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("clear all elements");
          props_ClearSetOperation = cpb.create();
        }
        return props_ClearSetOperation;
      case LanguageConceptSwitch.CollectionType:
        if (props_CollectionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("abstract collection type");
          props_CollectionType = cpb.create();
        }
        return props_CollectionType;
      case LanguageConceptSwitch.ComparatorSortOperation:
        if (props_ComparatorSortOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("sort using comparator");
          props_ComparatorSortOperation = cpb.create();
        }
        return props_ComparatorSortOperation;
      case LanguageConceptSwitch.ConcatOperation:
        if (props_ConcatOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("produce a sequence concatenation");
          props_ConcatOperation = cpb.create();
        }
        return props_ConcatOperation;
      case LanguageConceptSwitch.ContainerIteratorType:
        if (props_ContainerIteratorType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ContainerIteratorType = cpb.create();
        }
        return props_ContainerIteratorType;
      case LanguageConceptSwitch.ContainsAllOperation:
        if (props_ContainsAllOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("test if sequence contains all element");
          props_ContainsAllOperation = cpb.create();
        }
        return props_ContainsAllOperation;
      case LanguageConceptSwitch.ContainsKeyOperation:
        if (props_ContainsKeyOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ContainsKeyOperation = cpb.create();
        }
        return props_ContainsKeyOperation;
      case LanguageConceptSwitch.ContainsOperation:
        if (props_ContainsOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("test if sequence contains an element");
          props_ContainsOperation = cpb.create();
        }
        return props_ContainsOperation;
      case LanguageConceptSwitch.ContainsValueOperation:
        if (props_ContainsValueOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ContainsValueOperation = cpb.create();
        }
        return props_ContainsValueOperation;
      case LanguageConceptSwitch.CustomContainerCreator:
        if (props_CustomContainerCreator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_CustomContainerCreator = cpb.create();
        }
        return props_CustomContainerCreator;
      case LanguageConceptSwitch.CustomContainerDeclaration:
        if (props_CustomContainerDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_CustomContainerDeclaration = cpb.create();
        }
        return props_CustomContainerDeclaration;
      case LanguageConceptSwitch.CustomContainers:
        if (props_CustomContainers == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_CustomContainers = cpb.create();
        }
        return props_CustomContainers;
      case LanguageConceptSwitch.CustomMapCreator:
        if (props_CustomMapCreator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_CustomMapCreator = cpb.create();
        }
        return props_CustomMapCreator;
      case LanguageConceptSwitch.CutOperation:
        if (props_CutOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("exclude elements from the end");
          props_CutOperation = cpb.create();
        }
        return props_CutOperation;
      case LanguageConceptSwitch.DequeType:
        if (props_DequeType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DequeType = cpb.create();
        }
        return props_DequeType;
      case LanguageConceptSwitch.DisjunctOperation:
        if (props_DisjunctOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("produce an exclusive disjunction");
          props_DisjunctOperation = cpb.create();
        }
        return props_DisjunctOperation;
      case LanguageConceptSwitch.DistinctOperation:
        if (props_DistinctOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("produce sequence with unique elements");
          props_DistinctOperation = cpb.create();
        }
        return props_DistinctOperation;
      case LanguageConceptSwitch.DowncastExpression:
        if (props_DowncastExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DowncastExpression = cpb.create();
        }
        return props_DowncastExpression;
      case LanguageConceptSwitch.EnumeratorType:
        if (props_EnumeratorType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EnumeratorType = cpb.create();
        }
        return props_EnumeratorType;
      case LanguageConceptSwitch.ExcludeOperation:
        if (props_ExcludeOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("subtract a sequence");
          props_ExcludeOperation = cpb.create();
        }
        return props_ExcludeOperation;
      case LanguageConceptSwitch.FindFirstOperation:
        if (props_FindFirstOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("find first element that matches");
          props_FindFirstOperation = cpb.create();
        }
        return props_FindFirstOperation;
      case LanguageConceptSwitch.FindLastOperation:
        if (props_FindLastOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("find last element that matches");
          props_FindLastOperation = cpb.create();
        }
        return props_FindLastOperation;
      case LanguageConceptSwitch.FoldLeftOperation:
        if (props_FoldLeftOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("perform left folding");
          props_FoldLeftOperation = cpb.create();
        }
        return props_FoldLeftOperation;
      case LanguageConceptSwitch.FoldRightOperation:
        if (props_FoldRightOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("perform right folding");
          props_FoldRightOperation = cpb.create();
        }
        return props_FoldRightOperation;
      case LanguageConceptSwitch.ForEachStatement:
        if (props_ForEachStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("foreach <e> in <sequence>");
          props_ForEachStatement = cpb.create();
        }
        return props_ForEachStatement;
      case LanguageConceptSwitch.ForEachVariable:
        if (props_ForEachVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.icon(IconContainer.RESOURCE_a0a1a0a74b0qg);
          props_ForEachVariable = cpb.create();
        }
        return props_ForEachVariable;
      case LanguageConceptSwitch.ForEachVariableReference:
        if (props_ForEachVariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ForEachVariableReference = cpb.create();
        }
        return props_ForEachVariableReference;
      case LanguageConceptSwitch.GetCurrentOperation:
        if (props_GetCurrentOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_GetCurrentOperation = cpb.create();
        }
        return props_GetCurrentOperation;
      case LanguageConceptSwitch.GetElementOperation:
        if (props_GetElementOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("get element by index");
          props_GetElementOperation = cpb.create();
        }
        return props_GetElementOperation;
      case LanguageConceptSwitch.GetEnumeratorOperation:
        if (props_GetEnumeratorOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("get the enumerator");
          props_GetEnumeratorOperation = cpb.create();
        }
        return props_GetEnumeratorOperation;
      case LanguageConceptSwitch.GetFirstOperation:
        if (props_GetFirstOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("get the first element");
          props_GetFirstOperation = cpb.create();
        }
        return props_GetFirstOperation;
      case LanguageConceptSwitch.GetIndexOfOperation:
        if (props_GetIndexOfOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("get the index of an element");
          props_GetIndexOfOperation = cpb.create();
        }
        return props_GetIndexOfOperation;
      case LanguageConceptSwitch.GetIteratorOperation:
        if (props_GetIteratorOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("get the iterator");
          props_GetIteratorOperation = cpb.create();
        }
        return props_GetIteratorOperation;
      case LanguageConceptSwitch.GetKeysOperation:
        if (props_GetKeysOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_GetKeysOperation = cpb.create();
        }
        return props_GetKeysOperation;
      case LanguageConceptSwitch.GetLastIndexOfOperation:
        if (props_GetLastIndexOfOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("get the index of an element");
          props_GetLastIndexOfOperation = cpb.create();
        }
        return props_GetLastIndexOfOperation;
      case LanguageConceptSwitch.GetLastOperation:
        if (props_GetLastOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("get the last element");
          props_GetLastOperation = cpb.create();
        }
        return props_GetLastOperation;
      case LanguageConceptSwitch.GetNextOperation:
        if (props_GetNextOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_GetNextOperation = cpb.create();
        }
        return props_GetNextOperation;
      case LanguageConceptSwitch.GetSizeOperation:
        if (props_GetSizeOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("get the sequence size");
          props_GetSizeOperation = cpb.create();
        }
        return props_GetSizeOperation;
      case LanguageConceptSwitch.GetValuesOperation:
        if (props_GetValuesOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_GetValuesOperation = cpb.create();
        }
        return props_GetValuesOperation;
      case LanguageConceptSwitch.HasNextOperation:
        if (props_HasNextOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_HasNextOperation = cpb.create();
        }
        return props_HasNextOperation;
      case LanguageConceptSwitch.HashMapCreator:
        if (props_HashMapCreator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_HashMapCreator = cpb.create();
        }
        return props_HashMapCreator;
      case LanguageConceptSwitch.HashSetCreator:
        if (props_HashSetCreator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("create new hashset");
          props_HashSetCreator = cpb.create();
        }
        return props_HashSetCreator;
      case LanguageConceptSwitch.HeadListOperation:
        if (props_HeadListOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("head list");
          props_HeadListOperation = cpb.create();
        }
        return props_HeadListOperation;
      case LanguageConceptSwitch.HeadMapOperation:
        if (props_HeadMapOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_HeadMapOperation = cpb.create();
        }
        return props_HeadMapOperation;
      case LanguageConceptSwitch.HeadSetOperation:
        if (props_HeadSetOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_HeadSetOperation = cpb.create();
        }
        return props_HeadSetOperation;
      case LanguageConceptSwitch.IApplicableToCollection:
        if (props_IApplicableToCollection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IApplicableToCollection = cpb.create();
        }
        return props_IApplicableToCollection;
      case LanguageConceptSwitch.IApplicableToDeque:
        if (props_IApplicableToDeque == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IApplicableToDeque = cpb.create();
        }
        return props_IApplicableToDeque;
      case LanguageConceptSwitch.IApplicableToList:
        if (props_IApplicableToList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IApplicableToList = cpb.create();
        }
        return props_IApplicableToList;
      case LanguageConceptSwitch.IApplicableToNothing:
        if (props_IApplicableToNothing == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IApplicableToNothing = cpb.create();
        }
        return props_IApplicableToNothing;
      case LanguageConceptSwitch.IApplicableToQueue:
        if (props_IApplicableToQueue == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IApplicableToQueue = cpb.create();
        }
        return props_IApplicableToQueue;
      case LanguageConceptSwitch.IApplicableToStack:
        if (props_IApplicableToStack == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IApplicableToStack = cpb.create();
        }
        return props_IApplicableToStack;
      case LanguageConceptSwitch.ICollectionOperation:
        if (props_ICollectionOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ICollectionOperation = cpb.create();
        }
        return props_ICollectionOperation;
      case LanguageConceptSwitch.IContainerOperation:
        if (props_IContainerOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IContainerOperation = cpb.create();
        }
        return props_IContainerOperation;
      case LanguageConceptSwitch.IDequeOperation:
        if (props_IDequeOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IDequeOperation = cpb.create();
        }
        return props_IDequeOperation;
      case LanguageConceptSwitch.IListOperation:
        if (props_IListOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IListOperation = cpb.create();
        }
        return props_IListOperation;
      case LanguageConceptSwitch.IQueueOperation:
        if (props_IQueueOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IQueueOperation = cpb.create();
        }
        return props_IQueueOperation;
      case LanguageConceptSwitch.IStackOperation:
        if (props_IStackOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IStackOperation = cpb.create();
        }
        return props_IStackOperation;
      case LanguageConceptSwitch.InsertElementOperation:
        if (props_InsertElementOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("insert element at an index");
          props_InsertElementOperation = cpb.create();
        }
        return props_InsertElementOperation;
      case LanguageConceptSwitch.InternalSequenceOperation:
        if (props_InternalSequenceOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_InternalSequenceOperation = cpb.create();
        }
        return props_InternalSequenceOperation;
      case LanguageConceptSwitch.IntersectOperation:
        if (props_IntersectOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("produce an intersection");
          props_IntersectOperation = cpb.create();
        }
        return props_IntersectOperation;
      case LanguageConceptSwitch.IsEmptyOperation:
        if (props_IsEmptyOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("test if sequence is empty");
          props_IsEmptyOperation = cpb.create();
        }
        return props_IsEmptyOperation;
      case LanguageConceptSwitch.IsNotEmptyOperation:
        if (props_IsNotEmptyOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("test if sequence is not empty");
          props_IsNotEmptyOperation = cpb.create();
        }
        return props_IsNotEmptyOperation;
      case LanguageConceptSwitch.IteratorType:
        if (props_IteratorType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IteratorType = cpb.create();
        }
        return props_IteratorType;
      case LanguageConceptSwitch.JoinOperation:
        if (props_JoinOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_JoinOperation = cpb.create();
        }
        return props_JoinOperation;
      case LanguageConceptSwitch.KeyAccessOperation:
        if (props_KeyAccessOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_KeyAccessOperation = cpb.create();
        }
        return props_KeyAccessOperation;
      case LanguageConceptSwitch.LinkedHashMapCreator:
        if (props_LinkedHashMapCreator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_LinkedHashMapCreator = cpb.create();
        }
        return props_LinkedHashMapCreator;
      case LanguageConceptSwitch.LinkedHashSetCreator:
        if (props_LinkedHashSetCreator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("create new linked hashset");
          props_LinkedHashSetCreator = cpb.create();
        }
        return props_LinkedHashSetCreator;
      case LanguageConceptSwitch.LinkedListCreator:
        if (props_LinkedListCreator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("create new linked list");
          props_LinkedListCreator = cpb.create();
        }
        return props_LinkedListCreator;
      case LanguageConceptSwitch.LinkedListType:
        if (props_LinkedListType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_LinkedListType = cpb.create();
        }
        return props_LinkedListType;
      case LanguageConceptSwitch.ListCreatorWithInit:
        if (props_ListCreatorWithInit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("create new array list");
          props_ListCreatorWithInit = cpb.create();
        }
        return props_ListCreatorWithInit;
      case LanguageConceptSwitch.ListElementAccessExpression:
        if (props_ListElementAccessExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ListElementAccessExpression = cpb.create();
        }
        return props_ListElementAccessExpression;
      case LanguageConceptSwitch.ListType:
        if (props_ListType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ListType = cpb.create();
        }
        return props_ListType;
      case LanguageConceptSwitch.MapAsSequenceVarRef:
        if (props_MapAsSequenceVarRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MapAsSequenceVarRef = cpb.create();
        }
        return props_MapAsSequenceVarRef;
      case LanguageConceptSwitch.MapClearOperation:
        if (props_MapClearOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MapClearOperation = cpb.create();
        }
        return props_MapClearOperation;
      case LanguageConceptSwitch.MapElement:
        if (props_MapElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MapElement = cpb.create();
        }
        return props_MapElement;
      case LanguageConceptSwitch.MapEntry:
        if (props_MapEntry == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MapEntry = cpb.create();
        }
        return props_MapEntry;
      case LanguageConceptSwitch.MapInitializer:
        if (props_MapInitializer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MapInitializer = cpb.create();
        }
        return props_MapInitializer;
      case LanguageConceptSwitch.MapOperation:
        if (props_MapOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MapOperation = cpb.create();
        }
        return props_MapOperation;
      case LanguageConceptSwitch.MapOperationExpression:
        if (props_MapOperationExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MapOperationExpression = cpb.create();
        }
        return props_MapOperationExpression;
      case LanguageConceptSwitch.MapRemoveOperation:
        if (props_MapRemoveOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MapRemoveOperation = cpb.create();
        }
        return props_MapRemoveOperation;
      case LanguageConceptSwitch.MapType:
        if (props_MapType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MapType = cpb.create();
        }
        return props_MapType;
      case LanguageConceptSwitch.MappingType:
        if (props_MappingType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MappingType = cpb.create();
        }
        return props_MappingType;
      case LanguageConceptSwitch.MappingsSetOperation:
        if (props_MappingsSetOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MappingsSetOperation = cpb.create();
        }
        return props_MappingsSetOperation;
      case LanguageConceptSwitch.MoveNextOperation:
        if (props_MoveNextOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MoveNextOperation = cpb.create();
        }
        return props_MoveNextOperation;
      case LanguageConceptSwitch.MultiForEachPair:
        if (props_MultiForEachPair == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MultiForEachPair = cpb.create();
        }
        return props_MultiForEachPair;
      case LanguageConceptSwitch.MultiForEachStatement:
        if (props_MultiForEachStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("foreach loop over multiple variables");
          props_MultiForEachStatement = cpb.create();
        }
        return props_MultiForEachStatement;
      case LanguageConceptSwitch.MultiForEachVariable:
        if (props_MultiForEachVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MultiForEachVariable = cpb.create();
        }
        return props_MultiForEachVariable;
      case LanguageConceptSwitch.MultiForEachVariableReference:
        if (props_MultiForEachVariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MultiForEachVariableReference = cpb.create();
        }
        return props_MultiForEachVariableReference;
      case LanguageConceptSwitch.NoArgumentsSequenceOperation:
        if (props_NoArgumentsSequenceOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_NoArgumentsSequenceOperation = cpb.create();
        }
        return props_NoArgumentsSequenceOperation;
      case LanguageConceptSwitch.OfTypeOperation:
        if (props_OfTypeOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("select elements of the specified type");
          props_OfTypeOperation = cpb.create();
        }
        return props_OfTypeOperation;
      case LanguageConceptSwitch.PageOperation:
        if (props_PageOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("select a subsequence");
          props_PageOperation = cpb.create();
        }
        return props_PageOperation;
      case LanguageConceptSwitch.PeekOperation:
        if (props_PeekOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PeekOperation = cpb.create();
        }
        return props_PeekOperation;
      case LanguageConceptSwitch.PopOperation:
        if (props_PopOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PopOperation = cpb.create();
        }
        return props_PopOperation;
      case LanguageConceptSwitch.PriorityQueueCreator:
        if (props_PriorityQueueCreator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("create new priority queue");
          props_PriorityQueueCreator = cpb.create();
        }
        return props_PriorityQueueCreator;
      case LanguageConceptSwitch.PushOperation:
        if (props_PushOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PushOperation = cpb.create();
        }
        return props_PushOperation;
      case LanguageConceptSwitch.PutAllOperation:
        if (props_PutAllOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PutAllOperation = cpb.create();
        }
        return props_PutAllOperation;
      case LanguageConceptSwitch.QueueType:
        if (props_QueueType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_QueueType = cpb.create();
        }
        return props_QueueType;
      case LanguageConceptSwitch.ReduceLeftOperation:
        if (props_ReduceLeftOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("perform left reduction");
          props_ReduceLeftOperation = cpb.create();
        }
        return props_ReduceLeftOperation;
      case LanguageConceptSwitch.ReduceRightOperation:
        if (props_ReduceRightOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("perform right reduction");
          props_ReduceRightOperation = cpb.create();
        }
        return props_ReduceRightOperation;
      case LanguageConceptSwitch.RemoveAllElementsOperation:
        if (props_RemoveAllElementsOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("remove all elements");
          props_RemoveAllElementsOperation = cpb.create();
        }
        return props_RemoveAllElementsOperation;
      case LanguageConceptSwitch.RemoveAllSetElementsOperation:
        if (props_RemoveAllSetElementsOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.shortDesc("remove all elements");
          props_RemoveAllSetElementsOperation = cpb.create();
        }
        return props_RemoveAllSetElementsOperation;
      case LanguageConceptSwitch.RemoveAtElementOperation:
        if (props_RemoveAtElementOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("remove element at an index");
          props_RemoveAtElementOperation = cpb.create();
        }
        return props_RemoveAtElementOperation;
      case LanguageConceptSwitch.RemoveElementOperation:
        if (props_RemoveElementOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("remove an element");
          props_RemoveElementOperation = cpb.create();
        }
        return props_RemoveElementOperation;
      case LanguageConceptSwitch.RemoveFirstElementOperation:
        if (props_RemoveFirstElementOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("remove first element");
          props_RemoveFirstElementOperation = cpb.create();
        }
        return props_RemoveFirstElementOperation;
      case LanguageConceptSwitch.RemoveLastElementOperation:
        if (props_RemoveLastElementOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("remove last element");
          props_RemoveLastElementOperation = cpb.create();
        }
        return props_RemoveLastElementOperation;
      case LanguageConceptSwitch.RemoveOperation:
        if (props_RemoveOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_RemoveOperation = cpb.create();
        }
        return props_RemoveOperation;
      case LanguageConceptSwitch.RemoveSetElementOperation:
        if (props_RemoveSetElementOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.shortDesc("remove an element");
          props_RemoveSetElementOperation = cpb.create();
        }
        return props_RemoveSetElementOperation;
      case LanguageConceptSwitch.RemoveWhereOperation:
        if (props_RemoveWhereOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("filter out the matched elements");
          props_RemoveWhereOperation = cpb.create();
        }
        return props_RemoveWhereOperation;
      case LanguageConceptSwitch.ReverseOperation:
        if (props_ReverseOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("create a list with elements in reverse order");
          props_ReverseOperation = cpb.create();
        }
        return props_ReverseOperation;
      case LanguageConceptSwitch.SelectNotNullOperation:
        if (props_SelectNotNullOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("exclude null elements");
          props_SelectNotNullOperation = cpb.create();
        }
        return props_SelectNotNullOperation;
      case LanguageConceptSwitch.SelectOperation:
        if (props_SelectOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("transform each element to another type");
          props_SelectOperation = cpb.create();
        }
        return props_SelectOperation;
      case LanguageConceptSwitch.SequenceCreator:
        if (props_SequenceCreator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("create new sequence");
          props_SequenceCreator = cpb.create();
        }
        return props_SequenceCreator;
      case LanguageConceptSwitch.SequenceOperation:
        if (props_SequenceOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SequenceOperation = cpb.create();
        }
        return props_SequenceOperation;
      case LanguageConceptSwitch.SequenceType:
        if (props_SequenceType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SequenceType = cpb.create();
        }
        return props_SequenceType;
      case LanguageConceptSwitch.SetElementOperation:
        if (props_SetElementOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("set an element at an index");
          props_SetElementOperation = cpb.create();
        }
        return props_SetElementOperation;
      case LanguageConceptSwitch.SetType:
        if (props_SetType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SetType = cpb.create();
        }
        return props_SetType;
      case LanguageConceptSwitch.SingleArgumentSequenceOperation:
        if (props_SingleArgumentSequenceOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SingleArgumentSequenceOperation = cpb.create();
        }
        return props_SingleArgumentSequenceOperation;
      case LanguageConceptSwitch.SingletonSequenceCreator:
        if (props_SingletonSequenceCreator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("create singleton sequence");
          props_SingletonSequenceCreator = cpb.create();
        }
        return props_SingletonSequenceCreator;
      case LanguageConceptSwitch.SkipOperation:
        if (props_SkipOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("exclude elements from the beginning");
          props_SkipOperation = cpb.create();
        }
        return props_SkipOperation;
      case LanguageConceptSwitch.SkipStatement:
        if (props_SkipStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("skip to next element in input sequence");
          props_SkipStatement = cpb.create();
        }
        return props_SkipStatement;
      case LanguageConceptSwitch.SmartClosureParameterDeclaration:
        if (props_SmartClosureParameterDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("smart closure parameter");
          props_SmartClosureParameterDeclaration = cpb.create();
        }
        return props_SmartClosureParameterDeclaration;
      case LanguageConceptSwitch.SortDirection:
        if (props_SortDirection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SortDirection = cpb.create();
        }
        return props_SortDirection;
      case LanguageConceptSwitch.SortOperation:
        if (props_SortOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("sort by key");
          props_SortOperation = cpb.create();
        }
        return props_SortOperation;
      case LanguageConceptSwitch.SortedMapOperation:
        if (props_SortedMapOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SortedMapOperation = cpb.create();
        }
        return props_SortedMapOperation;
      case LanguageConceptSwitch.SortedMapType:
        if (props_SortedMapType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SortedMapType = cpb.create();
        }
        return props_SortedMapType;
      case LanguageConceptSwitch.SortedSetOperation:
        if (props_SortedSetOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SortedSetOperation = cpb.create();
        }
        return props_SortedSetOperation;
      case LanguageConceptSwitch.SortedSetType:
        if (props_SortedSetType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SortedSetType = cpb.create();
        }
        return props_SortedSetType;
      case LanguageConceptSwitch.StackType:
        if (props_StackType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_StackType = cpb.create();
        }
        return props_StackType;
      case LanguageConceptSwitch.StopStatement:
        if (props_StopStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("stop iterating input sequence");
          props_StopStatement = cpb.create();
        }
        return props_StopStatement;
      case LanguageConceptSwitch.SubListOperation:
        if (props_SubListOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("sub list");
          props_SubListOperation = cpb.create();
        }
        return props_SubListOperation;
      case LanguageConceptSwitch.SubMapOperation:
        if (props_SubMapOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SubMapOperation = cpb.create();
        }
        return props_SubMapOperation;
      case LanguageConceptSwitch.SubSetOperation:
        if (props_SubSetOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SubSetOperation = cpb.create();
        }
        return props_SubSetOperation;
      case LanguageConceptSwitch.TailListOperation:
        if (props_TailListOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("tail list");
          props_TailListOperation = cpb.create();
        }
        return props_TailListOperation;
      case LanguageConceptSwitch.TailMapOperation:
        if (props_TailMapOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TailMapOperation = cpb.create();
        }
        return props_TailMapOperation;
      case LanguageConceptSwitch.TailOperation:
        if (props_TailOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("include elements at the end");
          props_TailOperation = cpb.create();
        }
        return props_TailOperation;
      case LanguageConceptSwitch.TailSetOperation:
        if (props_TailSetOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TailSetOperation = cpb.create();
        }
        return props_TailSetOperation;
      case LanguageConceptSwitch.TakeOperation:
        if (props_TakeOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("include elements at the beginning");
          props_TakeOperation = cpb.create();
        }
        return props_TakeOperation;
      case LanguageConceptSwitch.TestAddElementOperation:
        if (props_TestAddElementOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("add an element and test the outcome");
          props_TestAddElementOperation = cpb.create();
        }
        return props_TestAddElementOperation;
      case LanguageConceptSwitch.TestRemoveElementOperation:
        if (props_TestRemoveElementOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("remove an element and test the outcome");
          props_TestRemoveElementOperation = cpb.create();
        }
        return props_TestRemoveElementOperation;
      case LanguageConceptSwitch.ToArrayOperation:
        if (props_ToArrayOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("convert to an array");
          props_ToArrayOperation = cpb.create();
        }
        return props_ToArrayOperation;
      case LanguageConceptSwitch.ToIteratorOperation:
        if (props_ToIteratorOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("convert to an iterator");
          props_ToIteratorOperation = cpb.create();
        }
        return props_ToIteratorOperation;
      case LanguageConceptSwitch.ToListOperation:
        if (props_ToListOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("convert to a list");
          props_ToListOperation = cpb.create();
        }
        return props_ToListOperation;
      case LanguageConceptSwitch.TranslateOperation:
        if (props_TranslateOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("transform each element to a sequence");
          props_TranslateOperation = cpb.create();
        }
        return props_TranslateOperation;
      case LanguageConceptSwitch.TreeMapCreator:
        if (props_TreeMapCreator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TreeMapCreator = cpb.create();
        }
        return props_TreeMapCreator;
      case LanguageConceptSwitch.TreeSetCreator:
        if (props_TreeSetCreator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("create new treeset");
          props_TreeSetCreator = cpb.create();
        }
        return props_TreeSetCreator;
      case LanguageConceptSwitch.UnionOperation:
        if (props_UnionOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("produce an union");
          props_UnionOperation = cpb.create();
        }
        return props_UnionOperation;
      case LanguageConceptSwitch.ValueAccessOperation:
        if (props_ValueAccessOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ValueAccessOperation = cpb.create();
        }
        return props_ValueAccessOperation;
      case LanguageConceptSwitch.VisitAllOperation:
        if (props_VisitAllOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("execute for each element");
          props_VisitAllOperation = cpb.create();
        }
        return props_VisitAllOperation;
      case LanguageConceptSwitch.WhereOperation:
        if (props_WhereOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("include only matched element");
          props_WhereOperation = cpb.create();
        }
        return props_WhereOperation;
    }
    return null;
  }
}
