package jetbrains.mps.baseLanguage.collections.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractContainerCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractContainerType = new ConceptPresentationBuilder().shortDesc("container type").create();
  private final ConceptPresentation props_AbstractEnumeratorOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractIteratorOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractMappingOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractSetOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AddAllElementsOperation = new ConceptPresentationBuilder().shortDesc("add all elements").create();
  private final ConceptPresentation props_AddAllSetElementsOperation = new ConceptPresentationBuilder().deprecated(true).shortDesc("add all elements").create();
  private final ConceptPresentation props_AddElementOperation = new ConceptPresentationBuilder().shortDesc("add an element").create();
  private final ConceptPresentation props_AddFirstElementOperation = new ConceptPresentationBuilder().shortDesc("add element as first").create();
  private final ConceptPresentation props_AddLastElementOperation = new ConceptPresentationBuilder().shortDesc("add element as last").create();
  private final ConceptPresentation props_AddSetElementOperation = new ConceptPresentationBuilder().deprecated(true).shortDesc("add an element").create();
  private final ConceptPresentation props_AllConstant = new ConceptPresentationBuilder().shortDesc("all elements").create();
  private final ConceptPresentation props_AllOperation = new ConceptPresentationBuilder().shortDesc("check if all elements match the condition").create();
  private final ConceptPresentation props_AlsoSortOperation = new ConceptPresentationBuilder().shortDesc("sort by secondary key").create();
  private final ConceptPresentation props_AnyOperation = new ConceptPresentationBuilder().shortDesc("check if there are any elements matching the condition").create();
  private final ConceptPresentation props_AsSequenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AsSynchronizedOperation = new ConceptPresentationBuilder().shortDesc("synchronized collection").create();
  private final ConceptPresentation props_AsUnmodifiableOperation = new ConceptPresentationBuilder().shortDesc("unmodifiable collection").create();
  private final ConceptPresentation props_BinaryOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ChunkOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClearAllElementsOperation = new ConceptPresentationBuilder().shortDesc("clear all elements").create();
  private final ConceptPresentation props_ClearSetOperation = new ConceptPresentationBuilder().shortDesc("clear all elements").create();
  private final ConceptPresentation props_CollectionType = new ConceptPresentationBuilder().shortDesc("abstract collection type").create();
  private final ConceptPresentation props_ComparatorSortOperation = new ConceptPresentationBuilder().shortDesc("sort using comparator").create();
  private final ConceptPresentation props_ConcatOperation = new ConceptPresentationBuilder().shortDesc("produce a sequence concatenation").create();
  private final ConceptPresentation props_ContainerIteratorType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContainsAllOperation = new ConceptPresentationBuilder().shortDesc("test if sequence contains all element").create();
  private final ConceptPresentation props_ContainsKeyOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContainsOperation = new ConceptPresentationBuilder().shortDesc("test if sequence contains an element").create();
  private final ConceptPresentation props_ContainsValueOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomContainerCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomContainerDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomContainers = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomMapCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CutOperation = new ConceptPresentationBuilder().shortDesc("exclude elements from the end").create();
  private final ConceptPresentation props_DequeType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DisjunctOperation = new ConceptPresentationBuilder().shortDesc("produce an exclusive disjunction").create();
  private final ConceptPresentation props_DistinctOperation = new ConceptPresentationBuilder().shortDesc("produce sequence with unique elements").create();
  private final ConceptPresentation props_DowncastExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumeratorType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExcludeOperation = new ConceptPresentationBuilder().shortDesc("subtract a sequence").create();
  private final ConceptPresentation props_FindFirstOperation = new ConceptPresentationBuilder().shortDesc("find first element that matches").create();
  private final ConceptPresentation props_FindLastOperation = new ConceptPresentationBuilder().shortDesc("find last element that matches").create();
  private final ConceptPresentation props_FoldLeftOperation = new ConceptPresentationBuilder().shortDesc("perform left folding").create();
  private final ConceptPresentation props_FoldRightOperation = new ConceptPresentationBuilder().shortDesc("perform right folding").create();
  private final ConceptPresentation props_ForEachStatement = new ConceptPresentationBuilder().shortDesc("foreach <e> in <sequence>").create();
  private final ConceptPresentation props_ForEachVariable = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0vb).create();
  private final ConceptPresentation props_ForEachVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetCurrentOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetElementOperation = new ConceptPresentationBuilder().shortDesc("get element by index").create();
  private final ConceptPresentation props_GetEnumeratorOperation = new ConceptPresentationBuilder().shortDesc("get the enumerator").create();
  private final ConceptPresentation props_GetFirstOperation = new ConceptPresentationBuilder().shortDesc("get the first element").create();
  private final ConceptPresentation props_GetIndexOfOperation = new ConceptPresentationBuilder().shortDesc("get the index of an element").create();
  private final ConceptPresentation props_GetIteratorOperation = new ConceptPresentationBuilder().shortDesc("get the iterator").create();
  private final ConceptPresentation props_GetKeysOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetLastIndexOfOperation = new ConceptPresentationBuilder().shortDesc("get the index of an element").create();
  private final ConceptPresentation props_GetLastOperation = new ConceptPresentationBuilder().shortDesc("get the last element").create();
  private final ConceptPresentation props_GetNextOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetSizeOperation = new ConceptPresentationBuilder().shortDesc("get the sequence size").create();
  private final ConceptPresentation props_GetValuesOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HasNextOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HashMapCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HashSetCreator = new ConceptPresentationBuilder().shortDesc("create new hashset").create();
  private final ConceptPresentation props_HeadListOperation = new ConceptPresentationBuilder().shortDesc("head list").create();
  private final ConceptPresentation props_HeadMapOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HeadSetOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IApplicableToCollection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IApplicableToDeque = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IApplicableToList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IApplicableToNothing = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IApplicableToQueue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IApplicableToStack = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ICollectionOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IContainerOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IDequeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IListOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IQueueOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStackOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InsertElementOperation = new ConceptPresentationBuilder().shortDesc("insert element at an index").create();
  private final ConceptPresentation props_InternalSequenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntersectOperation = new ConceptPresentationBuilder().shortDesc("produce an intersection").create();
  private final ConceptPresentation props_IsEmptyOperation = new ConceptPresentationBuilder().shortDesc("test if sequence is empty").create();
  private final ConceptPresentation props_IsNotEmptyOperation = new ConceptPresentationBuilder().shortDesc("test if sequence is not empty").create();
  private final ConceptPresentation props_IteratorType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_JoinOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_KeyAccessOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkedHashMapCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkedHashSetCreator = new ConceptPresentationBuilder().shortDesc("create new linked hashset").create();
  private final ConceptPresentation props_LinkedListCreator = new ConceptPresentationBuilder().shortDesc("create new linked list").create();
  private final ConceptPresentation props_LinkedListType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListCreatorWithInit = new ConceptPresentationBuilder().shortDesc("create new array list").create();
  private final ConceptPresentation props_ListElementAccessExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapAsSequenceVarRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapClearOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapEntry = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapOperationExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapRemoveOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingsSetOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveNextOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultiForEachPair = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultiForEachStatement = new ConceptPresentationBuilder().shortDesc("foreach loop over multiple variables").create();
  private final ConceptPresentation props_MultiForEachVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultiForEachVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NoArgumentsSequenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OfTypeOperation = new ConceptPresentationBuilder().shortDesc("select elements of the specified type").create();
  private final ConceptPresentation props_PageOperation = new ConceptPresentationBuilder().shortDesc("select a subsequence").create();
  private final ConceptPresentation props_PeekOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PopOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PriorityQueueCreator = new ConceptPresentationBuilder().shortDesc("create new priority queue").create();
  private final ConceptPresentation props_PushOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PutAllOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueueType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReduceLeftOperation = new ConceptPresentationBuilder().shortDesc("perform left reduction").create();
  private final ConceptPresentation props_ReduceRightOperation = new ConceptPresentationBuilder().shortDesc("perform right reduction").create();
  private final ConceptPresentation props_RemoveAllElementsOperation = new ConceptPresentationBuilder().shortDesc("remove all elements").create();
  private final ConceptPresentation props_RemoveAllSetElementsOperation = new ConceptPresentationBuilder().deprecated(true).shortDesc("remove all elements").create();
  private final ConceptPresentation props_RemoveAtElementOperation = new ConceptPresentationBuilder().shortDesc("remove element at an index").create();
  private final ConceptPresentation props_RemoveElementOperation = new ConceptPresentationBuilder().shortDesc("remove an element").create();
  private final ConceptPresentation props_RemoveFirstElementOperation = new ConceptPresentationBuilder().shortDesc("remove first element").create();
  private final ConceptPresentation props_RemoveLastElementOperation = new ConceptPresentationBuilder().shortDesc("remove last element").create();
  private final ConceptPresentation props_RemoveOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RemoveSetElementOperation = new ConceptPresentationBuilder().deprecated(true).shortDesc("remove an element").create();
  private final ConceptPresentation props_RemoveWhereOperation = new ConceptPresentationBuilder().shortDesc("filter out the matched elements").create();
  private final ConceptPresentation props_ReverseOperation = new ConceptPresentationBuilder().shortDesc("create a list with elements in reverse order").create();
  private final ConceptPresentation props_SelectNotNullOperation = new ConceptPresentationBuilder().shortDesc("exclude null elements").create();
  private final ConceptPresentation props_SelectOperation = new ConceptPresentationBuilder().shortDesc("transform each element to another type").create();
  private final ConceptPresentation props_SequenceCreator = new ConceptPresentationBuilder().shortDesc("create new sequence").create();
  private final ConceptPresentation props_SequenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SequenceType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SetElementOperation = new ConceptPresentationBuilder().shortDesc("set an element at an index").create();
  private final ConceptPresentation props_SetType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SingleArgumentSequenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SingletonSequenceCreator = new ConceptPresentationBuilder().shortDesc("create singleton sequence").create();
  private final ConceptPresentation props_SkipOperation = new ConceptPresentationBuilder().shortDesc("exclude elements from the beginning").create();
  private final ConceptPresentation props_SkipStatement = new ConceptPresentationBuilder().shortDesc("skip to next element in input sequence").create();
  private final ConceptPresentation props_SmartClosureParameterDeclaration = new ConceptPresentationBuilder().shortDesc("smart closure parameter").create();
  private final ConceptPresentation props_SortDirection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SortOperation = new ConceptPresentationBuilder().shortDesc("sort by key").create();
  private final ConceptPresentation props_SortedMapOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SortedMapType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SortedSetOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SortedSetType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StackType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StopStatement = new ConceptPresentationBuilder().shortDesc("stop iterating input sequence").create();
  private final ConceptPresentation props_SubListOperation = new ConceptPresentationBuilder().shortDesc("sub list").create();
  private final ConceptPresentation props_SubMapOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubSetOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TailListOperation = new ConceptPresentationBuilder().shortDesc("tail list").create();
  private final ConceptPresentation props_TailMapOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TailOperation = new ConceptPresentationBuilder().shortDesc("include elements at the end").create();
  private final ConceptPresentation props_TailSetOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TakeOperation = new ConceptPresentationBuilder().shortDesc("include elements at the beginning").create();
  private final ConceptPresentation props_TestAddElementOperation = new ConceptPresentationBuilder().shortDesc("add an element and test the outcome").create();
  private final ConceptPresentation props_TestRemoveElementOperation = new ConceptPresentationBuilder().shortDesc("remove an element and test the outcome").create();
  private final ConceptPresentation props_ToArrayOperation = new ConceptPresentationBuilder().shortDesc("convert to an array").create();
  private final ConceptPresentation props_ToIteratorOperation = new ConceptPresentationBuilder().shortDesc("convert to an iterator").create();
  private final ConceptPresentation props_ToListOperation = new ConceptPresentationBuilder().shortDesc("convert to a list").create();
  private final ConceptPresentation props_TranslateOperation = new ConceptPresentationBuilder().shortDesc("transform each element to a sequence").create();
  private final ConceptPresentation props_TreeMapCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TreeSetCreator = new ConceptPresentationBuilder().shortDesc("create new treeset").create();
  private final ConceptPresentation props_UnionOperation = new ConceptPresentationBuilder().shortDesc("produce an union").create();
  private final ConceptPresentation props_ValueAccessOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VisitAllOperation = new ConceptPresentationBuilder().shortDesc("execute for each element").create();
  private final ConceptPresentation props_WhereOperation = new ConceptPresentationBuilder().shortDesc("include only matched element").create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractContainerCreator:
        return props_AbstractContainerCreator;
      case LanguageConceptSwitch.AbstractContainerType:
        return props_AbstractContainerType;
      case LanguageConceptSwitch.AbstractEnumeratorOperation:
        return props_AbstractEnumeratorOperation;
      case LanguageConceptSwitch.AbstractIteratorOperation:
        return props_AbstractIteratorOperation;
      case LanguageConceptSwitch.AbstractMappingOperation:
        return props_AbstractMappingOperation;
      case LanguageConceptSwitch.AbstractSetOperation:
        return props_AbstractSetOperation;
      case LanguageConceptSwitch.AddAllElementsOperation:
        return props_AddAllElementsOperation;
      case LanguageConceptSwitch.AddAllSetElementsOperation:
        return props_AddAllSetElementsOperation;
      case LanguageConceptSwitch.AddElementOperation:
        return props_AddElementOperation;
      case LanguageConceptSwitch.AddFirstElementOperation:
        return props_AddFirstElementOperation;
      case LanguageConceptSwitch.AddLastElementOperation:
        return props_AddLastElementOperation;
      case LanguageConceptSwitch.AddSetElementOperation:
        return props_AddSetElementOperation;
      case LanguageConceptSwitch.AllConstant:
        return props_AllConstant;
      case LanguageConceptSwitch.AllOperation:
        return props_AllOperation;
      case LanguageConceptSwitch.AlsoSortOperation:
        return props_AlsoSortOperation;
      case LanguageConceptSwitch.AnyOperation:
        return props_AnyOperation;
      case LanguageConceptSwitch.AsSequenceOperation:
        return props_AsSequenceOperation;
      case LanguageConceptSwitch.AsSynchronizedOperation:
        return props_AsSynchronizedOperation;
      case LanguageConceptSwitch.AsUnmodifiableOperation:
        return props_AsUnmodifiableOperation;
      case LanguageConceptSwitch.BinaryOperation:
        return props_BinaryOperation;
      case LanguageConceptSwitch.ChunkOperation:
        return props_ChunkOperation;
      case LanguageConceptSwitch.ClearAllElementsOperation:
        return props_ClearAllElementsOperation;
      case LanguageConceptSwitch.ClearSetOperation:
        return props_ClearSetOperation;
      case LanguageConceptSwitch.CollectionType:
        return props_CollectionType;
      case LanguageConceptSwitch.ComparatorSortOperation:
        return props_ComparatorSortOperation;
      case LanguageConceptSwitch.ConcatOperation:
        return props_ConcatOperation;
      case LanguageConceptSwitch.ContainerIteratorType:
        return props_ContainerIteratorType;
      case LanguageConceptSwitch.ContainsAllOperation:
        return props_ContainsAllOperation;
      case LanguageConceptSwitch.ContainsKeyOperation:
        return props_ContainsKeyOperation;
      case LanguageConceptSwitch.ContainsOperation:
        return props_ContainsOperation;
      case LanguageConceptSwitch.ContainsValueOperation:
        return props_ContainsValueOperation;
      case LanguageConceptSwitch.CustomContainerCreator:
        return props_CustomContainerCreator;
      case LanguageConceptSwitch.CustomContainerDeclaration:
        return props_CustomContainerDeclaration;
      case LanguageConceptSwitch.CustomContainers:
        return props_CustomContainers;
      case LanguageConceptSwitch.CustomMapCreator:
        return props_CustomMapCreator;
      case LanguageConceptSwitch.CutOperation:
        return props_CutOperation;
      case LanguageConceptSwitch.DequeType:
        return props_DequeType;
      case LanguageConceptSwitch.DisjunctOperation:
        return props_DisjunctOperation;
      case LanguageConceptSwitch.DistinctOperation:
        return props_DistinctOperation;
      case LanguageConceptSwitch.DowncastExpression:
        return props_DowncastExpression;
      case LanguageConceptSwitch.EnumeratorType:
        return props_EnumeratorType;
      case LanguageConceptSwitch.ExcludeOperation:
        return props_ExcludeOperation;
      case LanguageConceptSwitch.FindFirstOperation:
        return props_FindFirstOperation;
      case LanguageConceptSwitch.FindLastOperation:
        return props_FindLastOperation;
      case LanguageConceptSwitch.FoldLeftOperation:
        return props_FoldLeftOperation;
      case LanguageConceptSwitch.FoldRightOperation:
        return props_FoldRightOperation;
      case LanguageConceptSwitch.ForEachStatement:
        return props_ForEachStatement;
      case LanguageConceptSwitch.ForEachVariable:
        return props_ForEachVariable;
      case LanguageConceptSwitch.ForEachVariableReference:
        return props_ForEachVariableReference;
      case LanguageConceptSwitch.GetCurrentOperation:
        return props_GetCurrentOperation;
      case LanguageConceptSwitch.GetElementOperation:
        return props_GetElementOperation;
      case LanguageConceptSwitch.GetEnumeratorOperation:
        return props_GetEnumeratorOperation;
      case LanguageConceptSwitch.GetFirstOperation:
        return props_GetFirstOperation;
      case LanguageConceptSwitch.GetIndexOfOperation:
        return props_GetIndexOfOperation;
      case LanguageConceptSwitch.GetIteratorOperation:
        return props_GetIteratorOperation;
      case LanguageConceptSwitch.GetKeysOperation:
        return props_GetKeysOperation;
      case LanguageConceptSwitch.GetLastIndexOfOperation:
        return props_GetLastIndexOfOperation;
      case LanguageConceptSwitch.GetLastOperation:
        return props_GetLastOperation;
      case LanguageConceptSwitch.GetNextOperation:
        return props_GetNextOperation;
      case LanguageConceptSwitch.GetSizeOperation:
        return props_GetSizeOperation;
      case LanguageConceptSwitch.GetValuesOperation:
        return props_GetValuesOperation;
      case LanguageConceptSwitch.HasNextOperation:
        return props_HasNextOperation;
      case LanguageConceptSwitch.HashMapCreator:
        return props_HashMapCreator;
      case LanguageConceptSwitch.HashSetCreator:
        return props_HashSetCreator;
      case LanguageConceptSwitch.HeadListOperation:
        return props_HeadListOperation;
      case LanguageConceptSwitch.HeadMapOperation:
        return props_HeadMapOperation;
      case LanguageConceptSwitch.HeadSetOperation:
        return props_HeadSetOperation;
      case LanguageConceptSwitch.IApplicableToCollection:
        return props_IApplicableToCollection;
      case LanguageConceptSwitch.IApplicableToDeque:
        return props_IApplicableToDeque;
      case LanguageConceptSwitch.IApplicableToList:
        return props_IApplicableToList;
      case LanguageConceptSwitch.IApplicableToNothing:
        return props_IApplicableToNothing;
      case LanguageConceptSwitch.IApplicableToQueue:
        return props_IApplicableToQueue;
      case LanguageConceptSwitch.IApplicableToStack:
        return props_IApplicableToStack;
      case LanguageConceptSwitch.ICollectionOperation:
        return props_ICollectionOperation;
      case LanguageConceptSwitch.IContainerOperation:
        return props_IContainerOperation;
      case LanguageConceptSwitch.IDequeOperation:
        return props_IDequeOperation;
      case LanguageConceptSwitch.IListOperation:
        return props_IListOperation;
      case LanguageConceptSwitch.IQueueOperation:
        return props_IQueueOperation;
      case LanguageConceptSwitch.IStackOperation:
        return props_IStackOperation;
      case LanguageConceptSwitch.InsertElementOperation:
        return props_InsertElementOperation;
      case LanguageConceptSwitch.InternalSequenceOperation:
        return props_InternalSequenceOperation;
      case LanguageConceptSwitch.IntersectOperation:
        return props_IntersectOperation;
      case LanguageConceptSwitch.IsEmptyOperation:
        return props_IsEmptyOperation;
      case LanguageConceptSwitch.IsNotEmptyOperation:
        return props_IsNotEmptyOperation;
      case LanguageConceptSwitch.IteratorType:
        return props_IteratorType;
      case LanguageConceptSwitch.JoinOperation:
        return props_JoinOperation;
      case LanguageConceptSwitch.KeyAccessOperation:
        return props_KeyAccessOperation;
      case LanguageConceptSwitch.LinkedHashMapCreator:
        return props_LinkedHashMapCreator;
      case LanguageConceptSwitch.LinkedHashSetCreator:
        return props_LinkedHashSetCreator;
      case LanguageConceptSwitch.LinkedListCreator:
        return props_LinkedListCreator;
      case LanguageConceptSwitch.LinkedListType:
        return props_LinkedListType;
      case LanguageConceptSwitch.ListCreatorWithInit:
        return props_ListCreatorWithInit;
      case LanguageConceptSwitch.ListElementAccessExpression:
        return props_ListElementAccessExpression;
      case LanguageConceptSwitch.ListType:
        return props_ListType;
      case LanguageConceptSwitch.MapAsSequenceVarRef:
        return props_MapAsSequenceVarRef;
      case LanguageConceptSwitch.MapClearOperation:
        return props_MapClearOperation;
      case LanguageConceptSwitch.MapElement:
        return props_MapElement;
      case LanguageConceptSwitch.MapEntry:
        return props_MapEntry;
      case LanguageConceptSwitch.MapInitializer:
        return props_MapInitializer;
      case LanguageConceptSwitch.MapOperation:
        return props_MapOperation;
      case LanguageConceptSwitch.MapOperationExpression:
        return props_MapOperationExpression;
      case LanguageConceptSwitch.MapRemoveOperation:
        return props_MapRemoveOperation;
      case LanguageConceptSwitch.MapType:
        return props_MapType;
      case LanguageConceptSwitch.MappingType:
        return props_MappingType;
      case LanguageConceptSwitch.MappingsSetOperation:
        return props_MappingsSetOperation;
      case LanguageConceptSwitch.MoveNextOperation:
        return props_MoveNextOperation;
      case LanguageConceptSwitch.MultiForEachPair:
        return props_MultiForEachPair;
      case LanguageConceptSwitch.MultiForEachStatement:
        return props_MultiForEachStatement;
      case LanguageConceptSwitch.MultiForEachVariable:
        return props_MultiForEachVariable;
      case LanguageConceptSwitch.MultiForEachVariableReference:
        return props_MultiForEachVariableReference;
      case LanguageConceptSwitch.NoArgumentsSequenceOperation:
        return props_NoArgumentsSequenceOperation;
      case LanguageConceptSwitch.OfTypeOperation:
        return props_OfTypeOperation;
      case LanguageConceptSwitch.PageOperation:
        return props_PageOperation;
      case LanguageConceptSwitch.PeekOperation:
        return props_PeekOperation;
      case LanguageConceptSwitch.PopOperation:
        return props_PopOperation;
      case LanguageConceptSwitch.PriorityQueueCreator:
        return props_PriorityQueueCreator;
      case LanguageConceptSwitch.PushOperation:
        return props_PushOperation;
      case LanguageConceptSwitch.PutAllOperation:
        return props_PutAllOperation;
      case LanguageConceptSwitch.QueueType:
        return props_QueueType;
      case LanguageConceptSwitch.ReduceLeftOperation:
        return props_ReduceLeftOperation;
      case LanguageConceptSwitch.ReduceRightOperation:
        return props_ReduceRightOperation;
      case LanguageConceptSwitch.RemoveAllElementsOperation:
        return props_RemoveAllElementsOperation;
      case LanguageConceptSwitch.RemoveAllSetElementsOperation:
        return props_RemoveAllSetElementsOperation;
      case LanguageConceptSwitch.RemoveAtElementOperation:
        return props_RemoveAtElementOperation;
      case LanguageConceptSwitch.RemoveElementOperation:
        return props_RemoveElementOperation;
      case LanguageConceptSwitch.RemoveFirstElementOperation:
        return props_RemoveFirstElementOperation;
      case LanguageConceptSwitch.RemoveLastElementOperation:
        return props_RemoveLastElementOperation;
      case LanguageConceptSwitch.RemoveOperation:
        return props_RemoveOperation;
      case LanguageConceptSwitch.RemoveSetElementOperation:
        return props_RemoveSetElementOperation;
      case LanguageConceptSwitch.RemoveWhereOperation:
        return props_RemoveWhereOperation;
      case LanguageConceptSwitch.ReverseOperation:
        return props_ReverseOperation;
      case LanguageConceptSwitch.SelectNotNullOperation:
        return props_SelectNotNullOperation;
      case LanguageConceptSwitch.SelectOperation:
        return props_SelectOperation;
      case LanguageConceptSwitch.SequenceCreator:
        return props_SequenceCreator;
      case LanguageConceptSwitch.SequenceOperation:
        return props_SequenceOperation;
      case LanguageConceptSwitch.SequenceType:
        return props_SequenceType;
      case LanguageConceptSwitch.SetElementOperation:
        return props_SetElementOperation;
      case LanguageConceptSwitch.SetType:
        return props_SetType;
      case LanguageConceptSwitch.SingleArgumentSequenceOperation:
        return props_SingleArgumentSequenceOperation;
      case LanguageConceptSwitch.SingletonSequenceCreator:
        return props_SingletonSequenceCreator;
      case LanguageConceptSwitch.SkipOperation:
        return props_SkipOperation;
      case LanguageConceptSwitch.SkipStatement:
        return props_SkipStatement;
      case LanguageConceptSwitch.SmartClosureParameterDeclaration:
        return props_SmartClosureParameterDeclaration;
      case LanguageConceptSwitch.SortDirection:
        return props_SortDirection;
      case LanguageConceptSwitch.SortOperation:
        return props_SortOperation;
      case LanguageConceptSwitch.SortedMapOperation:
        return props_SortedMapOperation;
      case LanguageConceptSwitch.SortedMapType:
        return props_SortedMapType;
      case LanguageConceptSwitch.SortedSetOperation:
        return props_SortedSetOperation;
      case LanguageConceptSwitch.SortedSetType:
        return props_SortedSetType;
      case LanguageConceptSwitch.StackType:
        return props_StackType;
      case LanguageConceptSwitch.StopStatement:
        return props_StopStatement;
      case LanguageConceptSwitch.SubListOperation:
        return props_SubListOperation;
      case LanguageConceptSwitch.SubMapOperation:
        return props_SubMapOperation;
      case LanguageConceptSwitch.SubSetOperation:
        return props_SubSetOperation;
      case LanguageConceptSwitch.TailListOperation:
        return props_TailListOperation;
      case LanguageConceptSwitch.TailMapOperation:
        return props_TailMapOperation;
      case LanguageConceptSwitch.TailOperation:
        return props_TailOperation;
      case LanguageConceptSwitch.TailSetOperation:
        return props_TailSetOperation;
      case LanguageConceptSwitch.TakeOperation:
        return props_TakeOperation;
      case LanguageConceptSwitch.TestAddElementOperation:
        return props_TestAddElementOperation;
      case LanguageConceptSwitch.TestRemoveElementOperation:
        return props_TestRemoveElementOperation;
      case LanguageConceptSwitch.ToArrayOperation:
        return props_ToArrayOperation;
      case LanguageConceptSwitch.ToIteratorOperation:
        return props_ToIteratorOperation;
      case LanguageConceptSwitch.ToListOperation:
        return props_ToListOperation;
      case LanguageConceptSwitch.TranslateOperation:
        return props_TranslateOperation;
      case LanguageConceptSwitch.TreeMapCreator:
        return props_TreeMapCreator;
      case LanguageConceptSwitch.TreeSetCreator:
        return props_TreeSetCreator;
      case LanguageConceptSwitch.UnionOperation:
        return props_UnionOperation;
      case LanguageConceptSwitch.ValueAccessOperation:
        return props_ValueAccessOperation;
      case LanguageConceptSwitch.VisitAllOperation:
        return props_VisitAllOperation;
      case LanguageConceptSwitch.WhereOperation:
        return props_WhereOperation;
    }
    return null;
  }
}
