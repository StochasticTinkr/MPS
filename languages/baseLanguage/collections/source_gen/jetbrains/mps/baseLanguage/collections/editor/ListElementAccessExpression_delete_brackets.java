package jetbrains.mps.baseLanguage.collections.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.editor.runtime.deletionApprover.DeletionApproverUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ListElementAccessExpression_delete_brackets {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new ListElementAccessExpression_delete_brackets.ListElementAccessExpression_delete_brackets_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new ListElementAccessExpression_delete_brackets.ListElementAccessExpression_delete_brackets_BACKSPACE(node));
  }
  public static class ListElementAccessExpression_delete_brackets_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public ListElementAccessExpression_delete_brackets_DELETE(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "delete the brackets";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      if (DeletionApproverUtil.approve(editorContext, node, "accessCollection")) {
        return;
      }
      SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x11d6213c318L, 0x11d621460b5L, "list")));
    }
  }
  public static class ListElementAccessExpression_delete_brackets_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public ListElementAccessExpression_delete_brackets_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public String getDescriptionText() {
      return "delete the brackets";
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      if (DeletionApproverUtil.approve(editorContext, node, "accessCollection")) {
        return;
      }
      SNodeOperations.replaceWithAnother(node, SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x11d6213c318L, 0x11d621460b5L, "list")));
    }
  }
}
