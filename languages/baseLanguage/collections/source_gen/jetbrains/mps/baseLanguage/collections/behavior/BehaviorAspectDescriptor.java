package jetbrains.mps.baseLanguage.collections.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myListType__BehaviorDescriptor = new ListType__BehaviorDescriptor();
  private final BHDescriptor mySequenceType__BehaviorDescriptor = new SequenceType__BehaviorDescriptor();
  private final BHDescriptor mySequenceOperation__BehaviorDescriptor = new SequenceOperation__BehaviorDescriptor();
  private final BHDescriptor myForEachStatement__BehaviorDescriptor = new ForEachStatement__BehaviorDescriptor();
  private final BHDescriptor myForEachVariableReference__BehaviorDescriptor = new ForEachVariableReference__BehaviorDescriptor();
  private final BHDescriptor myListCreatorWithInit__BehaviorDescriptor = new ListCreatorWithInit__BehaviorDescriptor();
  private final BHDescriptor mySortDirection__BehaviorDescriptor = new SortDirection__BehaviorDescriptor();
  private final BHDescriptor myConcatOperation__BehaviorDescriptor = new ConcatOperation__BehaviorDescriptor();
  private final BHDescriptor myMapType__BehaviorDescriptor = new MapType__BehaviorDescriptor();
  private final BHDescriptor myHashMapCreator__BehaviorDescriptor = new HashMapCreator__BehaviorDescriptor();
  private final BHDescriptor myMapElement__BehaviorDescriptor = new MapElement__BehaviorDescriptor();
  private final BHDescriptor myMapOperation__BehaviorDescriptor = new MapOperation__BehaviorDescriptor();
  private final BHDescriptor myWhereOperation__BehaviorDescriptor = new WhereOperation__BehaviorDescriptor();
  private final BHDescriptor mySortOperation__BehaviorDescriptor = new SortOperation__BehaviorDescriptor();
  private final BHDescriptor mySkipStatement__BehaviorDescriptor = new SkipStatement__BehaviorDescriptor();
  private final BHDescriptor myListElementAccessExpression__BehaviorDescriptor = new ListElementAccessExpression__BehaviorDescriptor();
  private final BHDescriptor mySetType__BehaviorDescriptor = new SetType__BehaviorDescriptor();
  private final BHDescriptor myHashSetCreator__BehaviorDescriptor = new HashSetCreator__BehaviorDescriptor();
  private final BHDescriptor myLinkedListCreator__BehaviorDescriptor = new LinkedListCreator__BehaviorDescriptor();
  private final BHDescriptor myIteratorType__BehaviorDescriptor = new IteratorType__BehaviorDescriptor();
  private final BHDescriptor myEnumeratorType__BehaviorDescriptor = new EnumeratorType__BehaviorDescriptor();
  private final BHDescriptor myAbstractContainerCreator__BehaviorDescriptor = new AbstractContainerCreator__BehaviorDescriptor();
  private final BHDescriptor myAllConstant__BehaviorDescriptor = new AllConstant__BehaviorDescriptor();
  private final BHDescriptor myLinkedHashMapCreator__BehaviorDescriptor = new LinkedHashMapCreator__BehaviorDescriptor();
  private final BHDescriptor myLinkedHashSetCreator__BehaviorDescriptor = new LinkedHashSetCreator__BehaviorDescriptor();
  private final BHDescriptor mySortedMapType__BehaviorDescriptor = new SortedMapType__BehaviorDescriptor();
  private final BHDescriptor myTreeMapCreator__BehaviorDescriptor = new TreeMapCreator__BehaviorDescriptor();
  private final BHDescriptor mySortedSetType__BehaviorDescriptor = new SortedSetType__BehaviorDescriptor();
  private final BHDescriptor myTreeSetCreator__BehaviorDescriptor = new TreeSetCreator__BehaviorDescriptor();
  private final BHDescriptor myMappingType__BehaviorDescriptor = new MappingType__BehaviorDescriptor();
  private final BHDescriptor myValueAccessOperation__BehaviorDescriptor = new ValueAccessOperation__BehaviorDescriptor();
  private final BHDescriptor myCustomContainerCreator__BehaviorDescriptor = new CustomContainerCreator__BehaviorDescriptor();
  private final BHDescriptor myCustomMapCreator__BehaviorDescriptor = new CustomMapCreator__BehaviorDescriptor();
  private final BHDescriptor myIContainerOperation__BehaviorDescriptor = new IContainerOperation__BehaviorDescriptor();
  private final BHDescriptor myIListOperation__BehaviorDescriptor = new IListOperation__BehaviorDescriptor();
  private final BHDescriptor myDequeType__BehaviorDescriptor = new DequeType__BehaviorDescriptor();
  private final BHDescriptor myPriorityQueueCreator__BehaviorDescriptor = new PriorityQueueCreator__BehaviorDescriptor();
  private final BHDescriptor myQueueType__BehaviorDescriptor = new QueueType__BehaviorDescriptor();
  private final BHDescriptor myAbstractContainerType__BehaviorDescriptor = new AbstractContainerType__BehaviorDescriptor();
  private final BHDescriptor myIApplicableToNothing__BehaviorDescriptor = new IApplicableToNothing__BehaviorDescriptor();
  private final BHDescriptor myIApplicableToCollection__BehaviorDescriptor = new IApplicableToCollection__BehaviorDescriptor();
  private final BHDescriptor myIApplicableToList__BehaviorDescriptor = new IApplicableToList__BehaviorDescriptor();
  private final BHDescriptor myIApplicableToDeque__BehaviorDescriptor = new IApplicableToDeque__BehaviorDescriptor();
  private final BHDescriptor myIApplicableToQueue__BehaviorDescriptor = new IApplicableToQueue__BehaviorDescriptor();
  private final BHDescriptor myIApplicableToStack__BehaviorDescriptor = new IApplicableToStack__BehaviorDescriptor();
  private final BHDescriptor myStackType__BehaviorDescriptor = new StackType__BehaviorDescriptor();
  private final BHDescriptor myCollectionType__BehaviorDescriptor = new CollectionType__BehaviorDescriptor();
  private final BHDescriptor myMultiForEachStatement__BehaviorDescriptor = new MultiForEachStatement__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0zb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          return myAbstractContainerCreator__BehaviorDescriptor;
        case 1:
          return myAbstractContainerType__BehaviorDescriptor;
        case 2:
          return myAllConstant__BehaviorDescriptor;
        case 3:
          return myCollectionType__BehaviorDescriptor;
        case 4:
          return myConcatOperation__BehaviorDescriptor;
        case 5:
          return myCustomContainerCreator__BehaviorDescriptor;
        case 6:
          return myCustomMapCreator__BehaviorDescriptor;
        case 7:
          return myDequeType__BehaviorDescriptor;
        case 8:
          return myEnumeratorType__BehaviorDescriptor;
        case 9:
          return myForEachStatement__BehaviorDescriptor;
        case 10:
          return myForEachVariableReference__BehaviorDescriptor;
        case 11:
          return myHashMapCreator__BehaviorDescriptor;
        case 12:
          return myHashSetCreator__BehaviorDescriptor;
        case 13:
          return myIApplicableToCollection__BehaviorDescriptor;
        case 14:
          return myIApplicableToDeque__BehaviorDescriptor;
        case 15:
          return myIApplicableToList__BehaviorDescriptor;
        case 16:
          return myIApplicableToNothing__BehaviorDescriptor;
        case 17:
          return myIApplicableToQueue__BehaviorDescriptor;
        case 18:
          return myIApplicableToStack__BehaviorDescriptor;
        case 19:
          return myIContainerOperation__BehaviorDescriptor;
        case 20:
          return myIListOperation__BehaviorDescriptor;
        case 21:
          return myIteratorType__BehaviorDescriptor;
        case 22:
          return myLinkedHashMapCreator__BehaviorDescriptor;
        case 23:
          return myLinkedHashSetCreator__BehaviorDescriptor;
        case 24:
          return myLinkedListCreator__BehaviorDescriptor;
        case 25:
          return myListCreatorWithInit__BehaviorDescriptor;
        case 26:
          return myListElementAccessExpression__BehaviorDescriptor;
        case 27:
          return myListType__BehaviorDescriptor;
        case 28:
          return myMapElement__BehaviorDescriptor;
        case 29:
          return myMapOperation__BehaviorDescriptor;
        case 30:
          return myMapType__BehaviorDescriptor;
        case 31:
          return myMappingType__BehaviorDescriptor;
        case 32:
          return myMultiForEachStatement__BehaviorDescriptor;
        case 33:
          return myPriorityQueueCreator__BehaviorDescriptor;
        case 34:
          return myQueueType__BehaviorDescriptor;
        case 35:
          return mySequenceOperation__BehaviorDescriptor;
        case 36:
          return mySequenceType__BehaviorDescriptor;
        case 37:
          return mySetType__BehaviorDescriptor;
        case 38:
          return mySkipStatement__BehaviorDescriptor;
        case 39:
          return mySortDirection__BehaviorDescriptor;
        case 40:
          return mySortOperation__BehaviorDescriptor;
        case 41:
          return mySortedMapType__BehaviorDescriptor;
        case 42:
          return mySortedSetType__BehaviorDescriptor;
        case 43:
          return myStackType__BehaviorDescriptor;
        case 44:
          return myTreeMapCreator__BehaviorDescriptor;
        case 45:
          return myTreeSetCreator__BehaviorDescriptor;
        case 46:
          return myValueAccessOperation__BehaviorDescriptor;
        case 47:
          return myWhereOperation__BehaviorDescriptor;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0zb = buildConceptIndices(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x1202df1ada0L, "jetbrains.mps.baseLanguage.collections.structure.AbstractContainerCreator"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x4eec26fcbaf8c39bL, "jetbrains.mps.baseLanguage.collections.structure.AbstractContainerType"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x12031a066ecL, "jetbrains.mps.baseLanguage.collections.structure.AllConstant"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x62e1df06bd2172b2L, "jetbrains.mps.baseLanguage.collections.structure.CollectionType"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x112f6f0e9beL, "jetbrains.mps.baseLanguage.collections.structure.ConcatOperation"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x127be81db92655b3L, "jetbrains.mps.baseLanguage.collections.structure.CustomContainerCreator"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x15e2150d4bff8a67L, "jetbrains.mps.baseLanguage.collections.structure.CustomMapCreator"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x2e99e9ab97de7711L, "jetbrains.mps.baseLanguage.collections.structure.DequeType"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x12020864111L, "jetbrains.mps.baseLanguage.collections.structure.EnumeratorType"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x10cac65f399L, "jetbrains.mps.baseLanguage.collections.structure.ForEachStatement"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x10cac6fa5c3L, "jetbrains.mps.baseLanguage.collections.structure.ForEachVariableReference"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x116dbb34f2dL, "jetbrains.mps.baseLanguage.collections.structure.HashMapCreator"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x11d9210de65L, "jetbrains.mps.baseLanguage.collections.structure.HashSetCreator"), MetaAdapterFactory.getInterfaceConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x53310200e8d9eef7L, "jetbrains.mps.baseLanguage.collections.structure.IApplicableToCollection"), MetaAdapterFactory.getInterfaceConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x53310200e8d9eefbL, "jetbrains.mps.baseLanguage.collections.structure.IApplicableToDeque"), MetaAdapterFactory.getInterfaceConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x53310200e8d9eef8L, "jetbrains.mps.baseLanguage.collections.structure.IApplicableToList"), MetaAdapterFactory.getInterfaceConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x53310200e8d9eaf6L, "jetbrains.mps.baseLanguage.collections.structure.IApplicableToNothing"), MetaAdapterFactory.getInterfaceConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x53310200e8d9eefcL, "jetbrains.mps.baseLanguage.collections.structure.IApplicableToQueue"), MetaAdapterFactory.getInterfaceConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x53310200e8d9eefdL, "jetbrains.mps.baseLanguage.collections.structure.IApplicableToStack"), MetaAdapterFactory.getInterfaceConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x1db93187ffc4d808L, "jetbrains.mps.baseLanguage.collections.structure.IContainerOperation"), MetaAdapterFactory.getInterfaceConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x1db93187ffc7e7efL, "jetbrains.mps.baseLanguage.collections.structure.IListOperation"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x1201ed2b158L, "jetbrains.mps.baseLanguage.collections.structure.IteratorType"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x120c2ad6432L, "jetbrains.mps.baseLanguage.collections.structure.LinkedHashMapCreator"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x120c2b5bbfdL, "jetbrains.mps.baseLanguage.collections.structure.LinkedHashSetCreator"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x11daf69a138L, "jetbrains.mps.baseLanguage.collections.structure.LinkedListCreator"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x10e39306c2eL, "jetbrains.mps.baseLanguage.collections.structure.ListCreatorWithInit"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x11d6213c318L, "jetbrains.mps.baseLanguage.collections.structure.ListElementAccessExpression"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x10c25fb076aL, "jetbrains.mps.baseLanguage.collections.structure.ListType"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x116ea555a25L, "jetbrains.mps.baseLanguage.collections.structure.MapElement"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x117aea47a16L, "jetbrains.mps.baseLanguage.collections.structure.MapOperation"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x116db7e6bcbL, "jetbrains.mps.baseLanguage.collections.structure.MapType"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x120cf0ddd15L, "jetbrains.mps.baseLanguage.collections.structure.MappingType"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x7d7db8f4181fe9f2L, "jetbrains.mps.baseLanguage.collections.structure.MultiForEachStatement"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x2e9a0b9a89009f6cL, "jetbrains.mps.baseLanguage.collections.structure.PriorityQueueCreator"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x4eec26fcbaf74491L, "jetbrains.mps.baseLanguage.collections.structure.QueueType"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x10c26c9a2d9L, "jetbrains.mps.baseLanguage.collections.structure.SequenceOperation"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x10c260e9444L, "jetbrains.mps.baseLanguage.collections.structure.SequenceType"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x11d91cbbcd0L, "jetbrains.mps.baseLanguage.collections.structure.SetType"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x11d16b423daL, "jetbrains.mps.baseLanguage.collections.structure.SkipStatement"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x11257567b07L, "jetbrains.mps.baseLanguage.collections.structure.SortDirection"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x118b81cc8f6L, "jetbrains.mps.baseLanguage.collections.structure.SortOperation"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x120c4067207L, "jetbrains.mps.baseLanguage.collections.structure.SortedMapType"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x120c482dd1aL, "jetbrains.mps.baseLanguage.collections.structure.SortedSetType"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x5e6446aa46ee5eecL, "jetbrains.mps.baseLanguage.collections.structure.StackType"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x120c408d37aL, "jetbrains.mps.baseLanguage.collections.structure.TreeMapCreator"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x120c4838d33L, "jetbrains.mps.baseLanguage.collections.structure.TreeSetCreator"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x120e6ec6b83L, "jetbrains.mps.baseLanguage.collections.structure.ValueAccessOperation"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x117e3fd45c4L, "jetbrains.mps.baseLanguage.collections.structure.WhereOperation"));
}
