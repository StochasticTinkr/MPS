package jetbrains.mps.baseLanguage.overloadedOperators.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(10);
  /*package*/ final ConceptDescriptor myConceptBinaryOperationReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.overloadedOperators.structure.BinaryOperationReference", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x2764eda929d23eb4L)).super_("jetbrains.mps.baseLanguage.overloadedOperators.structure.Operator").super_(MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x2764eda929d06ca6L)).parents("jetbrains.mps.baseLanguage.overloadedOperators.structure.Operator").parentIds(MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x2764eda929d06ca6L)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x2764eda929d23eb5L, "binaryOperation", MetaIdFactory.conceptId(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L), false)).references("binaryOperation").sourceNode(new SNodePointer("r:a258f9a5-18d3-4bea-a833-20735290774c(jetbrains.mps.baseLanguage.overloadedOperators.structure)", "2838654975957155508")).create();
  /*package*/ final ConceptDescriptor myConceptContainerImport = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.overloadedOperators.structure.ContainerImport", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x66302c3c8df72c49L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x66302c3c8df72d45L, "container", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x6b6f5c413011207L), false)).references("container").sourceNode(new SNodePointer("r:a258f9a5-18d3-4bea-a833-20735290774c(jetbrains.mps.baseLanguage.overloadedOperators.structure)", "7363434029342207049")).create();
  /*package*/ final ConceptDescriptor myConceptCustomOperator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.overloadedOperators.structure.CustomOperator", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x2764eda929d60237L)).super_("jetbrains.mps.baseLanguage.overloadedOperators.structure.Operator").super_(MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x2764eda929d06ca6L)).parents("jetbrains.mps.baseLanguage.overloadedOperators.structure.Operator").parentIds(MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x2764eda929d06ca6L)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x2764eda929d60239L, "declaration", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x15c86fdc60940541L), false)).references("declaration").sourceNode(new SNodePointer("r:a258f9a5-18d3-4bea-a833-20735290774c(jetbrains.mps.baseLanguage.overloadedOperators.structure)", "2838654975957402167")).create();
  /*package*/ final ConceptDescriptor myConceptCustomOperatorDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.overloadedOperators.structure.CustomOperatorDeclaration", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x15c86fdc60940541L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).sourceNode(new SNodePointer("r:a258f9a5-18d3-4bea-a833-20735290774c(jetbrains.mps.baseLanguage.overloadedOperators.structure)", "1569627462442419521")).create();
  /*package*/ final ConceptDescriptor myConceptCustomOperatorUsage = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.overloadedOperators.structure.CustomOperatorUsage", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x15c86fdc6084766fL)).super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL)).parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x15c86fdc60847670L, "operator", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x15c86fdc60940541L), false)).references("operator").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:a258f9a5-18d3-4bea-a833-20735290774c(jetbrains.mps.baseLanguage.overloadedOperators.structure)", "1569627462441399919")).create();
  /*package*/ final ConceptDescriptor myConceptLeftOperand = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.overloadedOperators.structure.LeftOperand", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x6b6f5c4130926a0L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).alias("left", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:a258f9a5-18d3-4bea-a833-20735290774c(jetbrains.mps.baseLanguage.overloadedOperators.structure)", "483844232470668960")).create();
  /*package*/ final ConceptDescriptor myConceptOperator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.overloadedOperators.structure.Operator", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x2764eda929d06ca6L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().sourceNode(new SNodePointer("r:a258f9a5-18d3-4bea-a833-20735290774c(jetbrains.mps.baseLanguage.overloadedOperators.structure)", "2838654975957036198")).create();
  /*package*/ final ConceptDescriptor myConceptOverloadedBinaryOperator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.overloadedOperators.structure.OverloadedBinaryOperator", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x6b6f5c41300f84dL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x2519632ce12e26e2L, "commutative")).properties("commutative").childDescriptors(new ConceptDescriptorBuilder.Link(0x5cab13b82be03a0dL, "returnType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), false, false, false), new ConceptDescriptorBuilder.Link(0x5cab13b82bf359b1L, "leftType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), false, false, false), new ConceptDescriptorBuilder.Link(0x5cab13b82bf359b2L, "rightType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), false, false, false), new ConceptDescriptorBuilder.Link(0x2764eda929d23eb6L, "operator", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x2764eda929d06ca6L), false, false, false)).children(new String[]{"returnType", "leftType", "rightType", "operator"}, new boolean[]{false, false, false, false}).staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:a258f9a5-18d3-4bea-a833-20735290774c(jetbrains.mps.baseLanguage.overloadedOperators.structure)", "483844232470132813")).create();
  /*package*/ final ConceptDescriptor myConceptOverloadedOperatorContainer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.overloadedOperators.structure.OverloadedOperatorContainer", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x6b6f5c413011207L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x6b6f5c413011208L, "operators", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x6b6f5c41300f84dL), true, true, false), new ConceptDescriptorBuilder.Link(0x2764eda929cc329cL, "customOperators", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x15c86fdc60940541L), true, true, false)).children(new String[]{"operators", "customOperators"}, new boolean[]{true, true}).sourceNode(new SNodePointer("r:a258f9a5-18d3-4bea-a833-20735290774c(jetbrains.mps.baseLanguage.overloadedOperators.structure)", "483844232470139399")).create();
  /*package*/ final ConceptDescriptor myConceptRightOperand = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.overloadedOperators.structure.RightOperand", MetaIdFactory.conceptId(0xfc8d557e5de64dd8L, 0xb749aab2fb23aefcL, 0x6c1973240c8fe3e1L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).alias("right", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:a258f9a5-18d3-4bea-a833-20735290774c(jetbrains.mps.baseLanguage.overloadedOperators.structure)", "7789383629180756961")).create();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptBinaryOperationReference.getId(), 0);
    myIndexMap.put(myConceptContainerImport.getId(), 1);
    myIndexMap.put(myConceptCustomOperator.getId(), 2);
    myIndexMap.put(myConceptCustomOperatorDeclaration.getId(), 3);
    myIndexMap.put(myConceptCustomOperatorUsage.getId(), 4);
    myIndexMap.put(myConceptLeftOperand.getId(), 5);
    myIndexMap.put(myConceptOperator.getId(), 6);
    myIndexMap.put(myConceptOverloadedBinaryOperator.getId(), 7);
    myIndexMap.put(myConceptOverloadedOperatorContainer.getId(), 8);
    myIndexMap.put(myConceptRightOperand.getId(), 9);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBinaryOperationReference, myConceptContainerImport, myConceptCustomOperator, myConceptCustomOperatorDeclaration, myConceptCustomOperatorUsage, myConceptLeftOperand, myConceptOperator, myConceptOverloadedBinaryOperator, myConceptOverloadedOperatorContainer, myConceptRightOperand);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptBinaryOperationReference;
      case 1:
        return myConceptContainerImport;
      case 2:
        return myConceptCustomOperator;
      case 3:
        return myConceptCustomOperatorDeclaration;
      case 4:
        return myConceptCustomOperatorUsage;
      case 5:
        return myConceptLeftOperand;
      case 6:
        return myConceptOperator;
      case 7:
        return myConceptOverloadedBinaryOperator;
      case 8:
        return myConceptOverloadedOperatorContainer;
      case 9:
        return myConceptRightOperand;
      default:
        throw new IllegalStateException();
    }
  }
}
