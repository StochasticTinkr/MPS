package jetbrains.mps.baseLanguage.overloadedOperators.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_BinaryOperationReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContainerImport = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomOperator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomOperatorDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomOperatorUsage = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LeftOperand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Operator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OverloadedBinaryOperator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OverloadedOperatorContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RightOperand = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BinaryOperationReference:
        return props_BinaryOperationReference;
      case LanguageConceptSwitch.ContainerImport:
        return props_ContainerImport;
      case LanguageConceptSwitch.CustomOperator:
        return props_CustomOperator;
      case LanguageConceptSwitch.CustomOperatorDeclaration:
        return props_CustomOperatorDeclaration;
      case LanguageConceptSwitch.CustomOperatorUsage:
        return props_CustomOperatorUsage;
      case LanguageConceptSwitch.LeftOperand:
        return props_LeftOperand;
      case LanguageConceptSwitch.Operator:
        return props_Operator;
      case LanguageConceptSwitch.OverloadedBinaryOperator:
        return props_OverloadedBinaryOperator;
      case LanguageConceptSwitch.OverloadedOperatorContainer:
        return props_OverloadedOperatorContainer;
      case LanguageConceptSwitch.RightOperand:
        return props_RightOperand;
    }
    return null;
  }
}
