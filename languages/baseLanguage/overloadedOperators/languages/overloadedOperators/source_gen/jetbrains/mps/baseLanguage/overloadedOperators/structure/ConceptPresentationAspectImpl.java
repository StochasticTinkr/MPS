package jetbrains.mps.baseLanguage.overloadedOperators.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_BinaryOperationReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContainerImport = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomOperator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomOperatorDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomOperatorUsage = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LeftOperand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Operator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OverloadedBinaryOperator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OverloadedOperatorContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RightOperand = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_BinaryOperationReference;
      case 1:
        return props_ContainerImport;
      case 2:
        return props_CustomOperator;
      case 3:
        return props_CustomOperatorDeclaration;
      case 4:
        return props_CustomOperatorUsage;
      case 5:
        return props_LeftOperand;
      case 6:
        return props_Operator;
      case 7:
        return props_OverloadedBinaryOperator;
      case 8:
        return props_OverloadedOperatorContainer;
      case 9:
        return props_RightOperand;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
