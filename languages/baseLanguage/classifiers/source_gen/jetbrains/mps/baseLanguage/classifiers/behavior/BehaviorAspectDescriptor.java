package jetbrains.mps.baseLanguage.classifiers.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myIClassifier__BehaviorDescriptor = new IClassifier__BehaviorDescriptor();
  private final BHDescriptor myIMember__BehaviorDescriptor = new IMember__BehaviorDescriptor();
  private final BHDescriptor myIClassifierPart__BehaviorDescriptor = new IClassifierPart__BehaviorDescriptor();
  private final BHDescriptor myThisClassifierExpression__BehaviorDescriptor = new ThisClassifierExpression__BehaviorDescriptor();
  private final BHDescriptor myBaseClassifierType__BehaviorDescriptor = new BaseClassifierType__BehaviorDescriptor();
  private final BHDescriptor myDefaultClassifierType__BehaviorDescriptor = new DefaultClassifierType__BehaviorDescriptor();
  private final BHDescriptor myIMemberOperation__BehaviorDescriptor = new IMemberOperation__BehaviorDescriptor();
  private final BHDescriptor myDefaultClassifierMethodDeclaration__BehaviorDescriptor = new DefaultClassifierMethodDeclaration__BehaviorDescriptor();
  private final BHDescriptor myDefaultClassifierFieldDeclaration__BehaviorDescriptor = new DefaultClassifierFieldDeclaration__BehaviorDescriptor();
  private final BHDescriptor myDefaultClassifierFieldAccessOperation__BehaviorDescriptor = new DefaultClassifierFieldAccessOperation__BehaviorDescriptor();
  private final BHDescriptor mySuperClassifierExpresson__BehaviorDescriptor = new SuperClassifierExpresson__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      switch (index_846f5o_a0o.index(cncpt)) {
        case 0:
          return myBaseClassifierType__BehaviorDescriptor;
        case 1:
          return myDefaultClassifierFieldAccessOperation__BehaviorDescriptor;
        case 2:
          return myDefaultClassifierFieldDeclaration__BehaviorDescriptor;
        case 3:
          return myDefaultClassifierMethodDeclaration__BehaviorDescriptor;
        case 4:
          return myDefaultClassifierType__BehaviorDescriptor;
        case 5:
          return myIClassifier__BehaviorDescriptor;
        case 6:
          return myIClassifierPart__BehaviorDescriptor;
        case 7:
          return myIMember__BehaviorDescriptor;
        case 8:
          return myIMemberOperation__BehaviorDescriptor;
        case 9:
          return mySuperClassifierExpresson__BehaviorDescriptor;
        case 10:
          return myThisClassifierExpression__BehaviorDescriptor;
        default:
          // default 
      }
    }
    return null;
  }
  private static final ConceptSwitchIndex index_846f5o_a0o = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x443f4c36fcf54eb6L, 0x95008d06ed259e3eL, 0x118bc77d845L), MetaIdFactory.conceptId(0x443f4c36fcf54eb6L, 0x95008d06ed259e3eL, 0x11aa7fc7570L), MetaIdFactory.conceptId(0x443f4c36fcf54eb6L, 0x95008d06ed259e3eL, 0x11aa7fc0293L), MetaIdFactory.conceptId(0x443f4c36fcf54eb6L, 0x95008d06ed259e3eL, 0x118bd6ee3c3L), MetaIdFactory.conceptId(0x443f4c36fcf54eb6L, 0x95008d06ed259e3eL, 0x118bc7942feL), MetaIdFactory.conceptId(0x443f4c36fcf54eb6L, 0x95008d06ed259e3eL, 0x118bc6b2af5L), MetaIdFactory.conceptId(0x443f4c36fcf54eb6L, 0x95008d06ed259e3eL, 0x118bc6e188eL), MetaIdFactory.conceptId(0x443f4c36fcf54eb6L, 0x95008d06ed259e3eL, 0x118bc6becc0L), MetaIdFactory.conceptId(0x443f4c36fcf54eb6L, 0x95008d06ed259e3eL, 0x118bca97396L), MetaIdFactory.conceptId(0x443f4c36fcf54eb6L, 0x95008d06ed259e3eL, 0x11b74b0357cL), MetaIdFactory.conceptId(0x443f4c36fcf54eb6L, 0x95008d06ed259e3eL, 0x118bc751a81L)).seal();
}
