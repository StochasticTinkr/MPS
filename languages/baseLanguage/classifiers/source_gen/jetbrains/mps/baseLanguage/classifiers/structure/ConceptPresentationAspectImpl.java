package jetbrains.mps.baseLanguage.classifiers.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_BaseClassifierType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultClassifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultClassifierFieldAccessOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultClassifierFieldDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultClassifierMethodCallOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultClassifierMethodDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultClassifierType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IClassifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IClassifierPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMemberOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SuperClassifierExpresson = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ThisClassifierExpression = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("443f4c36-fcf5-4eb6-9500-8d06ed259e3e"), "jetbrains.mps.baseLanguage.classifiers")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_BaseClassifierType;
      case 1:
        return props_DefaultClassifier;
      case 2:
        return props_DefaultClassifierFieldAccessOperation;
      case 3:
        return props_DefaultClassifierFieldDeclaration;
      case 4:
        return props_DefaultClassifierMethodCallOperation;
      case 5:
        return props_DefaultClassifierMethodDeclaration;
      case 6:
        return props_DefaultClassifierType;
      case 7:
        return props_IClassifier;
      case 8:
        return props_IClassifierPart;
      case 9:
        return props_IMember;
      case 10:
        return props_IMemberOperation;
      case 11:
        return props_SuperClassifierExpresson;
      case 12:
        return props_ThisClassifierExpression;
    }
    throw new IllegalStateException();
  }
}
