package jetbrains.mps.baseLanguage.scopes;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.scope.EmptyScope;
import jetbrains.mps.scope.FilteringScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

/**
 * Used by deprecated concepts only
 * 
 * @deprecated 
 */
@Deprecated
public class MigrationScopes {
  @Deprecated
  private MigrationScopes() {
  }
  public static Scope forVariables(SConcept declarationConcept, SNode contextNode, String contextRole, int position) {
    return filterByConceptScope(Scope.getScope(contextNode, contextRole, position, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, "jetbrains.mps.baseLanguage.structure.VariableDeclaration").getDeclarationNode()), declarationConcept);
  }
  public static Scope forMethods(SConcept declarationConcept, SNode contextNode, String contextRole, int position) {
    return filterByConceptScope(Scope.getScope(contextNode, contextRole, position, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c6b6a1e379f9408L, "jetbrains.mps.baseLanguage.structure.MethodDeclaration").getDeclarationNode()), declarationConcept);
  }
  private static Scope filterByConceptScope(@Nullable Scope innerScope, @NotNull SAbstractConcept concept) {
    if (innerScope != null) {
      return new MigrationScopes.FilterByConceptScope(innerScope, concept);
    } else {
      return new EmptyScope();
    }
  }
  private static class FilterByConceptScope extends FilteringScope {
    private final SAbstractConcept myConcept;
    public FilterByConceptScope(@NotNull Scope innerScope, @NotNull SAbstractConcept concept) {
      // todo: move this scope to mps.core? 
      super(innerScope);
      this.myConcept = concept;
    }
    @Override
    public boolean isExcluded(SNode node) {
      return !(SNodeOperations.isInstanceOf(node, SNodeOperations.asSConcept(myConcept)));
    }
  }
}
