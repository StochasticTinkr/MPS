package jetbrains.mps.baseLanguage.generator.java.strings;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.CreateRootRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.baseLanguage.behavior.IOperation__BehaviorDescriptor;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.generator.template.TemplateVarContext;
import jetbrains.mps.baseLanguage.behavior.IClassifierMember__BehaviorDescriptor;
import java.util.Map;
import jetbrains.mps.generator.impl.query.ReductionRuleCondition;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.template.ReductionRuleQueryContext;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.CreateRootCondition;
import jetbrains.mps.generator.impl.query.SourceNodeQuery;
import jetbrains.mps.generator.impl.query.QueryKeyImpl;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.generator.impl.query.PropertyValueQuery;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.generator.impl.query.IfMacroCondition;
import jetbrains.mps.generator.impl.query.InlineSwitchCaseCondition;
import jetbrains.mps.generator.template.InlineSwitchCaseContext;
import jetbrains.mps.generator.impl.query.ReferenceTargetQuery;
import jetbrains.mps.generator.impl.query.VariableValueQuery;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static boolean createRootRule_Condition_s50umg_a0(final CreateRootRuleContext _context) {
    return !(SModelOperations.nodes(_context.getInputModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47df21f3L, "jetbrains.mps.baseLanguage.structure.SubstringExpression")).isEmpty()) || ListSequence.fromList(SModelOperations.nodes(_context.getInputModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47e0122aL, "jetbrains.mps.baseLanguage.structure.TrimOperation"))).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !(SPropertyOperations.hasValue(it, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47e0122aL, 0x11d47e0122dL, "trimKind"), "both", "both"));
      }
    });
  }
  public static boolean baseMappingRule_Condition_a0(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47dc8da1L, "jetbrains.mps.baseLanguage.structure.BaseStringOperation"));
  }
  public static boolean baseMappingRule_Condition_a1(final BaseMappingRuleContext _context) {
    return !(SNodeOperations.isInstanceOf(IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode()), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xe34de34746464f2L, "jetbrains.mps.baseLanguage.structure.IVariableReference")));
  }
  public static boolean baseMappingRule_Condition_a2(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode()), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xe34de34746464f2L, "jetbrains.mps.baseLanguage.structure.IVariableReference"));
  }
  public static boolean baseMappingRule_Condition_a3(final BaseMappingRuleContext _context) {
    return !(SNodeOperations.isInstanceOf(IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode()), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xe34de34746464f2L, "jetbrains.mps.baseLanguage.structure.IVariableReference")));
  }
  public static boolean baseMappingRule_Condition_a4(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode()), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xe34de34746464f2L, "jetbrains.mps.baseLanguage.structure.IVariableReference"));
  }
  public static boolean baseMappingRule_Condition_a0a5(final BaseMappingRuleContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47e0122aL, 0x11d47e0122dL, "trimKind"), "leading", "both");
  }
  public static boolean baseMappingRule_Condition_a1a5(final BaseMappingRuleContext _context) {
    return SPropertyOperations.hasValue(_context.getNode(), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47e0122aL, 0x11d47e0122dL, "trimKind"), "trailing", "both");
  }
  public static boolean baseMappingRule_Condition_a2a5(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode()), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xe34de34746464f2L, "jetbrains.mps.baseLanguage.structure.IVariableReference"));
  }
  public static Object propertyMacro_GetPropertyValue_39873197765427167410(final PropertyMacroContext _context) {
    return jetbrains.mps.util.SNodeOperations.getModelLongName(SNodeOperations.getModel(_context.getNode())) + ".StringUtils";
  }
  public static Object propertyMacro_GetPropertyValue_45928269452448501430(final PropertyMacroContext _context) {
    return _context.createUniqueName("trim", SNodeOperations.getContainingRoot(_context.getNode()));
  }
  public static Object propertyMacro_GetPropertyValue_26967705079704635640(final PropertyMacroContext _context) {
    return jetbrains.mps.util.SNodeOperations.getModelLongName(SNodeOperations.getModel(_context.getNode())) + ".StringUtils";
  }
  public static Object propertyMacro_GetPropertyValue_26967705079705381180(final PropertyMacroContext _context) {
    return jetbrains.mps.util.SNodeOperations.getModelLongName(SNodeOperations.getModel(_context.getNode())) + ".StringUtils";
  }
  public static Object referenceMacro_GetReferent_35055625781257977990(final ReferenceMacroContext _context) {
    // To destinguish generated isEmpty of the same session in different classes, need an object we've replaced 
    // with extract statement. With it, can get output by label and input 
    SNode firstOp = (SNode) _context.getSessionObject(((String) _context.getVariable("var:methodNameKey")));
    return SLinkOperations.getTarget(_context.getOutputNodeByInputNodeAndMappingLabel(firstOp, "IsEmptyExtractExpr"), MetaAdapterFactory.getContainmentLink(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x31c3f88088ea0ac4L, 0x31c3f88088ea0ac6L, "method"));
  }
  public static Object referenceMacro_GetReferent_14824958847965678020(final ReferenceMacroContext _context) {
    SNode firstOp = (SNode) _context.getSessionObject(((String) _context.getVariable("var:methodNameKey")));
    return SLinkOperations.getTarget(_context.getOutputNodeByInputNodeAndMappingLabel(firstOp, "IsNotEmptyExtractExpr"), MetaAdapterFactory.getContainmentLink(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x31c3f88088ea0ac4L, 0x31c3f88088ea0ac6L, "method"));
  }
  public static boolean ifMacro_Condition_26967705079704552860(final IfMacroContext _context) {
    return ListSequence.fromList(SModelOperations.nodes(_context.getInputModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47e0122aL, "jetbrains.mps.baseLanguage.structure.TrimOperation"))).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.hasValue(it, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47e0122aL, 0x11d47e0122dL, "trimKind"), "leading", "both");
      }
    });
  }
  public static boolean ifMacro_Condition_26967705079704552270(final IfMacroContext _context) {
    return ListSequence.fromList(SModelOperations.nodes(_context.getInputModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47e0122aL, "jetbrains.mps.baseLanguage.structure.TrimOperation"))).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SPropertyOperations.hasValue(it, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47e0122aL, 0x11d47e0122dL, "trimKind"), "trailing", "both");
      }
    });
  }
  public static boolean ifMacro_Condition_39873197765427158700(final IfMacroContext _context) {
    return !(SModelOperations.nodes(_context.getInputModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47df21f3L, "jetbrains.mps.baseLanguage.structure.SubstringExpression")).isEmpty());
  }
  public static boolean ifMacro_Condition_2573149484537113840(final IfMacroContext _context) {
    return !(SModelOperations.nodes(_context.getInputModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47df21f3L, "jetbrains.mps.baseLanguage.structure.SubstringExpression")).isEmpty());
  }
  public static boolean ifMacro_Condition_45928269452448500490(final IfMacroContext _context) {
    if (_context.getSessionObject(((String) _context.getVariable("var:methodNameKey"))) == null) {
      _context.putSessionObject(((String) _context.getVariable("var:methodNameKey")), _context.getNode());
      return true;
    }
    return false;
  }
  public static boolean ifMacro_Condition_45928269452448501070(final IfMacroContext _context) {
    if (_context.getSessionObject(((String) _context.getVariable("var:methodNameKey"))) == null) {
      _context.putSessionObject(((String) _context.getVariable("var:methodNameKey")), _context.getNode());
      return true;
    }
    return false;
  }
  public static boolean ifMacro_Condition_39873197765427167660(final IfMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47df21f3L, 0x11d47df21f5L, "startIndex")) != null;
  }
  public static SNode ifMacro_Condition_14614246600154359370(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode());
  }
  public static SNode ifMacro_Condition_45928269452448500710(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode());
  }
  public static SNode ifMacro_Condition_35055625781257978000(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode());
  }
  public static SNode ifMacro_Condition_45928269452448501250(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode());
  }
  public static SNode ifMacro_Condition_14824958847965678030(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode());
  }
  public static SNode ifMacro_Condition_17504389683556822020(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL, 0xfbdeb7a11cL, "leftExpression"));
  }
  public static SNode ifMacro_Condition_17504389683556822470(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL, 0xfbdeb7a11bL, "rightExpression"));
  }
  public static SNode ifMacro_Condition_17504389683556832380(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL, 0xfbdeb7a11cL, "leftExpression"));
  }
  public static SNode ifMacro_Condition_17504389683556832950(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL, 0xfbdeb7a11bL, "rightExpression"));
  }
  public static SNode ifMacro_Condition_39873197765427167420(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47df21f3L, 0x11d47df21f4L, "operand"));
  }
  public static SNode ifMacro_Condition_39873197765427167661(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47df21f3L, 0x11d47df21f5L, "startIndex"));
  }
  public static SNode ifMacro_Condition_39873197765427167850(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47df21f3L, 0x11d47df21f6L, "endIndex"));
  }
  public static SNode ifMacro_Condition_45928269452448501600(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode());
  }
  public static SNode ifMacro_Condition_26967705079704635710(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode());
  }
  public static SNode ifMacro_Condition_26967705079705381190(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode());
  }
  public static SNode ifMacro_Condition_12252770598210(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation"));
  }
  public static SNode ifMacro_Condition_45928269452437690290(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode());
  }
  public static SNode ifMacro_Condition_45928269452437689810(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode());
  }
  public static SNode ifMacro_Condition_45928269452437715590(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode());
  }
  public static SNode ifMacro_Condition_45928269452437715940(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode());
  }
  public static SNode ifMacro_Condition_45928269452437704000(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode());
  }
  public static SNode ifMacro_Condition_45928269452437703500(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) IOperation__BehaviorDescriptor.getOperand_idhEwIP$m.invoke(_context.getNode());
  }
  public static Object insertMacro_varValue_45928269452448500490(final TemplateVarContext _context) {
    // ExtractStaticMethodExpression looks for first non static class 
    // and as long as there's no alternative to ESME, this code shall 
    // respect the way ContextUtil.getContextForMethod works 
    return SPropertyOperations.getString(ListSequence.fromList(SNodeOperations.getNodeAncestors(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (boolean) IClassifierMember__BehaviorDescriptor.isStatic_id6r77ob2USS8.invoke(it);
      }
    }).first(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + ".IsEmptyStringMethod";
  }
  public static Object insertMacro_varValue_45928269452448501070(final TemplateVarContext _context) {
    return SPropertyOperations.getString(ListSequence.fromList(SNodeOperations.getNodeAncestors(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return (boolean) IClassifierMember__BehaviorDescriptor.isStatic_id6r77ob2USS8.invoke(it);
      }
    }).first(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + ".IsNotEmptyStringMethod";
  }
  private final Map<String, ReductionRuleCondition> rrcMethods = new HashMap<String, ReductionRuleCondition>();
  {
    int i = 0;
    rrcMethods.put("1225277059819", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1225277059838", new QueriesGenerated.RRC(i++));
    rrcMethods.put("4592826945243768925", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1225277059840", new QueriesGenerated.RRC(i++));
    rrcMethods.put("4592826945243771511", new QueriesGenerated.RRC(i++));
  }
  @Override
  @NotNull
  public ReductionRuleCondition getReductionRuleCondition(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(rrcMethods.containsKey(id))) {
      return super.getReductionRuleCondition(identity);
    }
    return rrcMethods.get(id);
  }
  private static class RRC implements ReductionRuleCondition {
    private final int methodKey;
    public RRC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(ReductionRuleQueryContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.baseMappingRule_Condition_a0(ctx);
        case 1:
          return QueriesGenerated.baseMappingRule_Condition_a1(ctx);
        case 2:
          return QueriesGenerated.baseMappingRule_Condition_a2(ctx);
        case 3:
          return QueriesGenerated.baseMappingRule_Condition_a3(ctx);
        case 4:
          return QueriesGenerated.baseMappingRule_Condition_a4(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for rule %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, CreateRootCondition> crcMethods = new HashMap<String, CreateRootCondition>();
  {
    int i = 0;
    crcMethods.put("2696770507970454879", new QueriesGenerated.CRC(i++));
  }
  @Override
  @NotNull
  public CreateRootCondition getCreateRootRuleCondition(@NotNull QueryKey identity) {
    String id = identity.getTemplateNode().getNodeId().toString();
    if (!(crcMethods.containsKey(id))) {
      return super.getCreateRootRuleCondition(identity);
    }
    return crcMethods.get(id);
  }
  private static class CRC implements CreateRootCondition {
    private final int methodKey;
    public CRC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull CreateRootRuleContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.createRootRule_Condition_s50umg_a0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for rule %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, SourceNodeQuery> snqMethods = new HashMap<String, SourceNodeQuery>();
  {
    int i = 0;
    snqMethods.put("4592826945244850127", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1482495884796567805", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1750438968355682278", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1750438968355682703", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1750438968355684573", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1750438968355683333", new QueriesGenerated.SNQ(i++));
    snqMethods.put("3987319776542716744", new QueriesGenerated.SNQ(i++));
    snqMethods.put("3987319776542716779", new QueriesGenerated.SNQ(i++));
    snqMethods.put("3987319776542716787", new QueriesGenerated.SNQ(i++));
    snqMethods.put("4592826945244850162", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1225277059823", new QueriesGenerated.SNQ(i++));
    snqMethods.put("4592826945243769794", new QueriesGenerated.SNQ(i++));
    snqMethods.put("4592826945243769762", new QueriesGenerated.SNQ(i++));
    snqMethods.put("4592826945243771561", new QueriesGenerated.SNQ(i++));
    snqMethods.put("4592826945243771596", new QueriesGenerated.SNQ(i++));
    snqMethods.put("4592826945243770430", new QueriesGenerated.SNQ(i++));
    snqMethods.put("4592826945243770434", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1461424660015435939", new QueriesGenerated.SNQ(i++));
    snqMethods.put("2696770507970538121", new QueriesGenerated.SNQ(i++));
    snqMethods.put("2696770507970463573", new QueriesGenerated.SNQ(i++));
    snqMethods.put("4592826945244850077", new QueriesGenerated.SNQ(i++));
    snqMethods.put("3505562578125797802", new QueriesGenerated.SNQ(i++));
  }
  @NotNull
  @Override
  public SourceNodeQuery getSourceNodeQuery(@NotNull QueryKey identity) {
    final String id = ((QueryKeyImpl) identity).getQueryNodeId().toString();
    if (!(snqMethods.containsKey(id))) {
      return super.getSourceNodeQuery(identity);
    }
    return snqMethods.get(id);
  }
  private static class SNQ implements SourceNodeQuery {
    private final int methodKey;
    public SNQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull SourceSubstituteMacroNodeContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.ifMacro_Condition_45928269452448501250(ctx);
        case 1:
          return QueriesGenerated.ifMacro_Condition_14824958847965678030(ctx);
        case 2:
          return QueriesGenerated.ifMacro_Condition_17504389683556822020(ctx);
        case 3:
          return QueriesGenerated.ifMacro_Condition_17504389683556822470(ctx);
        case 4:
          return QueriesGenerated.ifMacro_Condition_17504389683556832380(ctx);
        case 5:
          return QueriesGenerated.ifMacro_Condition_17504389683556832950(ctx);
        case 6:
          return QueriesGenerated.ifMacro_Condition_39873197765427167420(ctx);
        case 7:
          return QueriesGenerated.ifMacro_Condition_39873197765427167661(ctx);
        case 8:
          return QueriesGenerated.ifMacro_Condition_39873197765427167850(ctx);
        case 9:
          return QueriesGenerated.ifMacro_Condition_45928269452448501600(ctx);
        case 10:
          return QueriesGenerated.ifMacro_Condition_12252770598210(ctx);
        case 11:
          return QueriesGenerated.ifMacro_Condition_45928269452437690290(ctx);
        case 12:
          return QueriesGenerated.ifMacro_Condition_45928269452437689810(ctx);
        case 13:
          return QueriesGenerated.ifMacro_Condition_45928269452437715590(ctx);
        case 14:
          return QueriesGenerated.ifMacro_Condition_45928269452437715940(ctx);
        case 15:
          return QueriesGenerated.ifMacro_Condition_45928269452437704000(ctx);
        case 16:
          return QueriesGenerated.ifMacro_Condition_45928269452437703500(ctx);
        case 17:
          return QueriesGenerated.ifMacro_Condition_14614246600154359370(ctx);
        case 18:
          return QueriesGenerated.ifMacro_Condition_26967705079705381190(ctx);
        case 19:
          return QueriesGenerated.ifMacro_Condition_26967705079704635710(ctx);
        case 20:
          return QueriesGenerated.ifMacro_Condition_45928269452448500710(ctx);
        case 21:
          return QueriesGenerated.ifMacro_Condition_35055625781257978000(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, PropertyValueQuery> pvqMethods = new HashMap<String, PropertyValueQuery>();
  {
    int i = 0;
    pvqMethods.put("3987319776542716752", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1115749abe3L, 0x1115767a8eeL, "fqClassName"), "StringUtils"));
    pvqMethods.put("4592826945245316728", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "trim"));
    pvqMethods.put("2696770507970538130", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1115749abe3L, 0x1115767a8eeL, "fqClassName"), "StringUtils"));
    pvqMethods.put("2696770507970471605", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1115749abe3L, 0x1115767a8eeL, "fqClassName"), "StringUtils"));
  }
  @NotNull
  @Override
  public PropertyValueQuery getPropertyValueQuery(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(pvqMethods.containsKey(id))) {
      return super.getPropertyValueQuery(identity);
    }
    return pvqMethods.get(id);
  }
  private static class PVQ extends PropertyValueQuery.Base {
    private final int methodKey;
    /*package*/ PVQ(int methodKey, SProperty property, String templateValue) {
      super(property, templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull PropertyMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.propertyMacro_GetPropertyValue_39873197765427167410(ctx);
        case 1:
          return QueriesGenerated.propertyMacro_GetPropertyValue_45928269452448501430(ctx);
        case 2:
          return QueriesGenerated.propertyMacro_GetPropertyValue_26967705079705381180(ctx);
        case 3:
          return QueriesGenerated.propertyMacro_GetPropertyValue_26967705079704635640(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, IfMacroCondition> imcMethods = new HashMap<String, IfMacroCondition>();
  {
    int i = 0;
    imcMethods.put("6269300764715607366", new QueriesGenerated.IfMC(i++));
    imcMethods.put("3987319776542716767", new QueriesGenerated.IfMC(i++));
    imcMethods.put("4592826945243771478", new QueriesGenerated.IfMC(i++));
    imcMethods.put("4592826945243771380", new QueriesGenerated.IfMC(i++));
    imcMethods.put("4592826945243769898", new QueriesGenerated.IfMC(i++));
    imcMethods.put("4592826945243769922", new QueriesGenerated.IfMC(i++));
    imcMethods.put("6269300764714516438", new QueriesGenerated.IfMC(i++));
  }
  @NotNull
  @Override
  public IfMacroCondition getIfMacroCondition(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(imcMethods.containsKey(id))) {
      return super.getIfMacroCondition(identity);
    }
    return imcMethods.get(id);
  }
  private static class IfMC implements IfMacroCondition {
    private final int methodKey;
    public IfMC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull IfMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.ifMacro_Condition_45928269452448501070(ctx);
        case 1:
          return QueriesGenerated.ifMacro_Condition_39873197765427167660(ctx);
        case 2:
          return QueriesGenerated.ifMacro_Condition_26967705079704552860(ctx);
        case 3:
          return QueriesGenerated.ifMacro_Condition_26967705079704552270(ctx);
        case 4:
          return QueriesGenerated.ifMacro_Condition_39873197765427158700(ctx);
        case 5:
          return QueriesGenerated.ifMacro_Condition_2573149484537113840(ctx);
        case 6:
          return QueriesGenerated.ifMacro_Condition_45928269452448500490(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for if macro %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, InlineSwitchCaseCondition> isccMethods = new HashMap<String, InlineSwitchCaseCondition>();
  {
    int i = 0;
    isccMethods.put("1225277059845", new QueriesGenerated.ISCC(i++));
    isccMethods.put("1225277059856", new QueriesGenerated.ISCC(i++));
    isccMethods.put("4592826945243770284", new QueriesGenerated.ISCC(i++));
  }
  @NotNull
  @Override
  public InlineSwitchCaseCondition getInlineSwitchCaseCondition(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(isccMethods.containsKey(id))) {
      return super.getInlineSwitchCaseCondition(identity);
    }
    return isccMethods.get(id);
  }
  private static class ISCC implements InlineSwitchCaseCondition {
    private final int methodKey;
    public ISCC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull InlineSwitchCaseContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.baseMappingRule_Condition_a0a5(ctx);
        case 1:
          return QueriesGenerated.baseMappingRule_Condition_a1a5(ctx);
        case 2:
          return QueriesGenerated.baseMappingRule_Condition_a2a5(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for inline switch's case %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, ReferenceTargetQuery> rtqMethods = new HashMap<String, ReferenceTargetQuery>();
  {
    rtqMethods.put("1482495884796568566", new QueriesGenerated.RTQ(0, "isNotEmptyString"));
    rtqMethods.put("1482495884796522425", new QueriesGenerated.RTQ(1, "isEmptyString"));
  }
  @NotNull
  @Override
  public ReferenceTargetQuery getReferenceTargetQuery(@NotNull QueryKey queryKey) {
    final String id = queryKey.getTemplateNode().getNodeId().toString();
    if (!(rtqMethods.containsKey(id))) {
      return super.getReferenceTargetQuery(queryKey);
    }
    return rtqMethods.get(id);
  }
  private static class RTQ extends ReferenceTargetQuery.Base {
    private final int methodKey;
    /*package*/ RTQ(int methodKey, String templateValue) {
      super(templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull ReferenceMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.referenceMacro_GetReferent_14824958847965678020(ctx);
        case 1:
          return QueriesGenerated.referenceMacro_GetReferent_35055625781257977990(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, VariableValueQuery> vvqMethods = new HashMap<String, VariableValueQuery>();
  {
    vvqMethods.put("6269300764715623911", new QueriesGenerated.VVQ(0));
    vvqMethods.put("6269300764714539611", new QueriesGenerated.VVQ(1));
  }
  @NotNull
  @Override
  public VariableValueQuery getVariableValueQuery(@NotNull QueryKey queryKey) {
    final String id = queryKey.getTemplateNode().getNodeId().toString();
    if (!(vvqMethods.containsKey(id))) {
      return super.getVariableValueQuery(queryKey);
    }
    return vvqMethods.get(id);
  }
  private static class VVQ implements VariableValueQuery {
    private final int methodKey;
    /*package*/ VVQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull TemplateVarContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.insertMacro_varValue_45928269452448501070(ctx);
        case 1:
          return QueriesGenerated.insertMacro_varValue_45928269452448500490(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
}
