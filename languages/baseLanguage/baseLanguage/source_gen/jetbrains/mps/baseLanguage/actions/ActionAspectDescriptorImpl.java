package jetbrains.mps.baseLanguage.actions;

/*Generated by MPS */

import jetbrains.mps.actions.descriptor.BaseActionAspectDescriptor;
import jetbrains.mps.openapi.actions.descriptor.ActionAspectDescriptor;
import java.util.Collection;
import jetbrains.mps.openapi.actions.descriptor.NodeFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.openapi.actions.descriptor.CopyPreProcessor;
import jetbrains.mps.openapi.actions.descriptor.PastePostProcessor;
import jetbrains.mps.openapi.actions.descriptor.PasteWrapper;

public class ActionAspectDescriptorImpl extends BaseActionAspectDescriptor implements ActionAspectDescriptor {
  private static final String LANGUAGE_FQ_NAME = "jetbrains.mps.baseLanguage";

  @Override
  public Collection<NodeFactory> getFactories(SAbstractConcept concept) {
    if (LANGUAGE_FQ_NAME.equals(concept.getLanguage().getQualifiedName())) {
      switch (Arrays.binarySearch(stringSwitchCases_tpto26_a0a0a0c, concept.getName())) {
        case 0:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_5649551303341182515());
        case 1:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_2256531611052034561());
        case 2:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_6624237184120886046());
        case 3:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1231770721117());
        case 4:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1158797366354());
        case 5:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1225896127900());
        case 6:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1205764418295());
        case 7:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1213605907036());
        case 8:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1178291598889());
        case 9:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_3450034536571911403());
        case 10:
          return Collections.<NodeFactory>singletonList(new FieldConversions.NodeFactory_3207672282897664378());
        case 11:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1188991552884());
        case 12:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1188991457470());
        case 13:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1187945171249());
        case 14:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1178272045313());
        case 15:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_2580416627845395972());
        case 16:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_8355037393041908808());
        case 17:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_3073231036166227544());
        case 18:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1704216628350805216());
        case 19:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1159218040860());
        case 20:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1158857529258());
        case 21:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_434283027167909682());
        case 22:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_434283027167909705());
        case 23:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1158938591701());
        case 24:
          return Collections.<NodeFactory>singletonList(new SingleLineComment_factories.NodeFactory_4123120730936387298());
        case 25:
          return Arrays.asList(new NodeFactory[]{new BL_node_factories.NodeFactory_1178291730239(), new FieldConversions.NodeFactory_3207672282897614589()});
        case 26:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_2509912883396146006());
        case 27:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1183997671100());
        case 28:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_1183997675651());
        case 29:
          return Collections.<NodeFactory>singletonList(new BL_node_factories.NodeFactory_3450034536571911384());
        default:
      }
    }
    return Collections.<NodeFactory>emptyList();
  }

  @Override
  public Collection<CopyPreProcessor> getCopyPreProcessors() {
    return Arrays.asList(new CopyPreProcessor[]{new BL_CopyPasteHandlers_CopyPreProcessor_0()});
  }
  @Override
  public Collection<PastePostProcessor> getPastePostProcessors() {
    return Arrays.asList(new PastePostProcessor[]{new BL_CopyPasteHandlers_PastePostProcessor_0(), new BL_CopyPasteHandlers_PastePostProcessor_1()});
  }
  @Override
  public Collection<PasteWrapper> getPasteWrappers() {
    return Arrays.asList(new PasteWrapper[]{new wrappers_PasteWrapper_0(), new wrappers_PasteWrapper_1(), new wrappers_PasteWrapper_2(), new wrappers_PasteWrapper_3(), new wrappers_PasteWrapper_4(), new wrappers_PasteWrapper_5(), new wrappers_PasteWrapper_6(), new wrappers_PasteWrapper_7(), new wrappers_PasteWrapper_8(), new wrappers_PasteWrapper_9(), new wrappers_PasteWrapper_10(), new wrappers_PasteWrapper_11(), new wrappers_PasteWrapper_12(), new wrappers_PasteWrapper_13(), new wrappers_PasteWrapper_14(), new wrappers_PasteWrapper_15(), new wrappers_PasteWrapper_16(), new wrappers_PasteWrapper_17()});
  }
  private static String[] stringSwitchCases_tpto26_a0a0a0c = new String[]{"AbstractForStatement", "AdditionalForLoopVariable", "AnnotationMethodDeclaration", "BaseAssignmentExpression", "BinaryOperation", "BitwiseNotExpression", "BlockStatement", "ClassConcept", "ConstructorDeclaration", "DoWhileStatement", "FieldDeclaration", "ForStatement", "ForeachStatement", "GenericNewExpression", "IfStatement", "ImplicitAnnotationInstanceValue", "InstanceMethodDeclaration", "Interface", "LocalVariableDeclaration", "NotExpression", "ParenthesizedExpression", "PrefixDecrementExpression", "PrefixIncrementExpression", "ReturnStatement", "SingleLineComment", "StaticFieldDeclaration", "StaticMethodDeclaration", "TryCatchStatement", "TryStatement", "WhileStatement"};
}
