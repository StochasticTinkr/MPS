package jetbrains.mps.baseLanguage.actions;

/*Generated by MPS */

import jetbrains.mps.openapi.actions.descriptor.CopyPreProcessor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.behavior.VariableDeclaration__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public final class BL_CopyPasteHandlers_CopyPreProcessor_0 implements CopyPreProcessor {
  @Override
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, "jetbrains.mps.baseLanguage.structure.VariableReference");
  }
  @Override
  public void preProcessNode(SNode copy, SNode original) {
    SNode qualifiedReference = VariableDeclaration__BehaviorDescriptor.getQualifiedReference_id3Zg$dTLuqo9.invoke(SLinkOperations.getTarget(copy, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, "variableDeclaration")));
    if ((qualifiedReference != null)) {
      SNodeOperations.replaceWithAnother(copy, qualifiedReference);
    }
  }
}
