package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.substitute.SubstituteMenuBase;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.menus.ParameterizedMenuPart;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.editor.menus.substitute.SingleItemSubstituteMenuPart;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuItem;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.presentation.NodePresentationUtil;
import jetbrains.mps.smodel.runtime.IconResource;
import jetbrains.mps.smodel.runtime.IconResourceUtil;

public class PrimitiveClassExpression extends SubstituteMenuBase {
  @Override
  protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts(final SubstituteMenuContext _context) {
    List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> result = new ArrayList<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>();
    result.add(new PrimitiveClassExpression.SubstituteMenuPart_Parameterized_vqoe2c_a());
    return result;
  }
  private class SubstituteMenuPart_Parameterized_vqoe2c_a extends ParameterizedMenuPart<SConcept, SubstituteMenuItem, SubstituteMenuContext> {
    @NotNull
    @Override
    protected List<SubstituteMenuItem> createItems(SConcept parameter, SubstituteMenuContext context) {
      return new PrimitiveClassExpression.SubstituteMenuPart_Parameterized_vqoe2c_a.SubstituteMenuPart_Action_vqoe2c_a0(parameter).createItems(context);
    }
    @Nullable
    @Override
    protected Iterable<? extends SConcept> getParameters(SubstituteMenuContext _context) {
      List<SConcept> result = ListSequence.fromList(new ArrayList<SConcept>());
      for (SAbstractConcept concept : MetaAdapterFactory.getLanguage(MetaIdFactory.langId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L), "jetbrains.mps.baseLanguage").getConcepts()) {
        if (!(concept.isAbstract()) && SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f0ad8bde4L, "jetbrains.mps.baseLanguage.structure.PrimitiveType")) && !(SConceptOperations.isSubConceptOf(SNodeOperations.asSConcept(concept), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL, "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"))) && isNotEmptyString(concept.getConceptAlias())) {
          ListSequence.fromList(result).addElement((SConcept) concept);
        }
      }
      return result;
    }
    private class SubstituteMenuPart_Action_vqoe2c_a0 extends SingleItemSubstituteMenuPart {
      private final SConcept myParameterObject;
      public SubstituteMenuPart_Action_vqoe2c_a0(SConcept parameterObject) {
        myParameterObject = parameterObject;
      }

      @Nullable
      @Override
      protected SubstituteMenuItem createItem(SubstituteMenuContext _context) {
        return new PrimitiveClassExpression.SubstituteMenuPart_Parameterized_vqoe2c_a.SubstituteMenuPart_Action_vqoe2c_a0.Item(_context);
      }
      private class Item extends DefaultSubstituteMenuItem {
        private final SubstituteMenuContext _context;
        public Item(SubstituteMenuContext context) {
          super(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3f57ea36bd70a4e1L, "jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression"), context.getParentNode(), context.getCurrentTargetNode(), context.getEditorContext());
          _context = context;
        }

        @Override
        public SNode createNode(@NotNull String pattern) {
          SNode result = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3f57ea36bd70a4e1L, "jetbrains.mps.baseLanguage.structure.PrimitiveClassExpression")), null);
          SLinkOperations.setTarget(result, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3f57ea36bd70a4e1L, 0x3f57ea36bd70a4e2L, "primitiveType"), SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(myParameterObject), null));
          return result;
        }
        @Override
        public String getDescriptionText(@NotNull String pattern) {
          if (myParameterObject instanceof SAbstractConcept) {
            return NodePresentationUtil.descriptionText((SAbstractConcept) myParameterObject);
          }
          return "" + myParameterObject;
        }
        @Override
        public IconResource getIcon(@NotNull String pattern) {
          if (myParameterObject instanceof SAbstractConcept) {
            return IconResourceUtil.getIconResourceForConcept(((SAbstractConcept) myParameterObject));
          }
          return null;
        }
        @Override
        public String getMatchingText(String pattern) {
          String alias = myParameterObject.getConceptAlias();
          return alias + ".class";
        }
      }
    }

  }
  private static boolean isNotEmptyString(String str) {
    return str != null && str.length() > 0;
  }
}
