package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import jetbrains.mps.openapi.editor.descriptor.EditorHintsProvider;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorHint;
import java.util.Arrays;
import jetbrains.mps.editor.runtime.descriptor.ConceptEditorHintImpl;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.NamedMenuId;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase implements EditorHintsProvider {
  private Collection<ConceptEditorHint> myHints = Arrays.<ConceptEditorHint>asList(new ConceptEditorHintImpl("VisibleExpressionBoundaries", "Visible Expression Boundaries", true, "jetbrains.mps.baseLanguage.editor.BLHints.VisibleExpressionBoundaries"));
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AbstractClassifierReference_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AbstractCreator_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AbstractOperation_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new AdditionalForLoopVariable_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Annotation_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new AnnotationInstance_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new AnnotationInstanceExpression_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new AnnotationInstanceValue_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new AnnotationMethodDeclaration_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new AnonymousClass_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new AnonymousClassCreator_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new ArrayAccessExpression_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new ArrayClassExpression_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new ArrayCloneOperation_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new ArrayCreator_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new ArrayCreatorWithInitializer_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new ArrayLengthOperation_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new ArrayLiteral_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new ArrayType_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new AsExpression_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new AssertStatement_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new BLBottomType_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new BaseAssignmentExpression_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new BaseVariableDeclaration_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new BaseVariableReference_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new BinaryOperation_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new BitwiseNotExpression_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new BlockStatement_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new BooleanConstant_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new BreakStatement_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new CastExpression_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new CatchClause_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new CharConstant_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new ClassConcept_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new ClassCreator_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new ClassifierClassExpression_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new ClassifierType_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new ClosureParameter_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new ClosureParameterReference_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new CommentedStatement_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new CommentedStatementsBlock_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new ConceptFunction_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new ConceptFunctionParameter_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new ConstructorDeclaration_Editor());
      case 44:
        return Collections.<ConceptEditor>singletonList(new ContinueStatement_Editor());
      case 45:
        return Collections.<ConceptEditor>singletonList(new CustomPropertyImplementation_Editor());
      case 46:
        return Collections.<ConceptEditor>singletonList(new CustomSetterPropertyImplementation_Editor());
      case 47:
        return Collections.<ConceptEditor>singletonList(new DefaultClassCreator_Editor());
      case 48:
        return Collections.<ConceptEditor>singletonList(new DefaultGetAccessor_Editor());
      case 49:
        return Collections.<ConceptEditor>singletonList(new DefaultPropertyImplementation_Editor());
      case 50:
        return Collections.<ConceptEditor>singletonList(new DefaultSetAccessor_Editor());
      case 51:
        return Collections.<ConceptEditor>singletonList(new DimensionExpression_Editor());
      case 52:
        return Collections.<ConceptEditor>singletonList(new DoWhileStatement_Editor());
      case 53:
        return Collections.<ConceptEditor>singletonList(new DotExpression_Editor());
      case 54:
        return Collections.<ConceptEditor>singletonList(new ElsifClause_Editor());
      case 55:
        return Collections.<ConceptEditor>singletonList(new EnumClass_Editor());
      case 56:
        return Collections.<ConceptEditor>singletonList(new EnumConstantDeclaration_Editor());
      case 57:
        return Collections.<ConceptEditor>singletonList(new EnumConstantReference_Editor());
      case 58:
        return Collections.<ConceptEditor>singletonList(new EnumValueOfExpression_Editor());
      case 59:
        return Collections.<ConceptEditor>singletonList(new EnumValuesExpression_Editor());
      case 60:
        return Collections.<ConceptEditor>singletonList(new EscapeOperation_Editor());
      case 61:
        return Arrays.asList(new ConceptEditor[]{new Expression_Editor(), new Expression_VisibleExpressionBoundaries_Editor()});
      case 62:
        return Collections.<ConceptEditor>singletonList(new ExpressionStatement_Editor());
      case 63:
        return Collections.<ConceptEditor>singletonList(new FieldDeclaration_Editor());
      case 64:
        return Collections.<ConceptEditor>singletonList(new FieldReferenceOperation_Editor());
      case 65:
        return Collections.<ConceptEditor>singletonList(new FloatingPointConstant_Editor());
      case 66:
        return Collections.<ConceptEditor>singletonList(new FloatingPointFloatConstant_Editor());
      case 67:
        return Collections.<ConceptEditor>singletonList(new ForStatement_Editor());
      case 68:
        return Collections.<ConceptEditor>singletonList(new ForeachStatement_Editor());
      case 69:
        return Collections.<ConceptEditor>singletonList(new GenericNewExpression_Editor());
      case 70:
        return Collections.<ConceptEditor>singletonList(new GetAccessor_Editor());
      case 71:
        return Collections.<ConceptEditor>singletonList(new HexIntegerLiteral_Editor());
      case 72:
        return Collections.<ConceptEditor>singletonList(new IfStatement_Editor());
      case 73:
        return Collections.<ConceptEditor>singletonList(new ImplicitAnnotationInstanceValue_Editor());
      case 74:
        return Collections.<ConceptEditor>singletonList(new IncompleteLeftParen_Editor());
      case 75:
        return Collections.<ConceptEditor>singletonList(new IncompleteMemberDeclaration_Editor());
      case 76:
        return Collections.<ConceptEditor>singletonList(new IncompleteRightParen_Editor());
      case 77:
        return Collections.<ConceptEditor>singletonList(new InstanceInitializer_Editor());
      case 78:
        return Collections.<ConceptEditor>singletonList(new InstanceMethodCallOperation_Editor());
      case 79:
        return Collections.<ConceptEditor>singletonList(new InstanceMethodDeclaration_Editor());
      case 80:
        return Collections.<ConceptEditor>singletonList(new InstanceOfExpression_Editor());
      case 81:
        return Collections.<ConceptEditor>singletonList(new IntegerConstant_Editor());
      case 82:
        return Collections.<ConceptEditor>singletonList(new Interface_Editor());
      case 83:
        return Collections.<ConceptEditor>singletonList(new JavaImport_Editor());
      case 84:
        return Collections.<ConceptEditor>singletonList(new JavaImports_Editor());
      case 85:
        return Collections.<ConceptEditor>singletonList(new LocalMethodCall_Editor());
      case 86:
        return Collections.<ConceptEditor>singletonList(new LocalPropertyReference_Editor());
      case 87:
        return Collections.<ConceptEditor>singletonList(new LocalVariableDeclaration_Editor());
      case 88:
        return Collections.<ConceptEditor>singletonList(new LocalVariableDeclarationStatement_Editor());
      case 89:
        return Collections.<ConceptEditor>singletonList(new LongLiteral_Editor());
      case 90:
        return Collections.<ConceptEditor>singletonList(new LoopLabel_Editor());
      case 91:
        return Collections.<ConceptEditor>singletonList(new LoopLabelReference_Editor());
      case 92:
        return Collections.<ConceptEditor>singletonList(new LowerBoundType_Editor());
      case 93:
        return Collections.<ConceptEditor>singletonList(new NestedNewExpression_Editor());
      case 94:
        return Collections.<ConceptEditor>singletonList(new NotExpression_Editor());
      case 95:
        return Collections.<ConceptEditor>singletonList(new NullLiteral_Editor());
      case 96:
        return Collections.<ConceptEditor>singletonList(new Number_Editor());
      case 97:
        return Collections.<ConceptEditor>singletonList(new ParameterDeclaration_Editor());
      case 98:
        return Collections.<ConceptEditor>singletonList(new ParenthesizedExpression_Editor());
      case 99:
        return Collections.<ConceptEditor>singletonList(new PlaceholderMember_Editor());
      case 100:
        return Collections.<ConceptEditor>singletonList(new PostfixDecrementExpression_Editor());
      case 101:
        return Collections.<ConceptEditor>singletonList(new PostfixIncrementExpression_Editor());
      case 102:
        return Collections.<ConceptEditor>singletonList(new PrefixDecrementExpression_Editor());
      case 103:
        return Collections.<ConceptEditor>singletonList(new PrefixIncrementExpression_Editor());
      case 104:
        return Collections.<ConceptEditor>singletonList(new PrimitiveClassExpression_Editor());
      case 105:
        return Collections.<ConceptEditor>singletonList(new Property_Editor());
      case 106:
        return Collections.<ConceptEditor>singletonList(new PropertyReference_Editor());
      case 107:
        return Collections.<ConceptEditor>singletonList(new PropertyValueReference_Editor());
      case 108:
        return Collections.<ConceptEditor>singletonList(new QualifiedSuperMethodCall_Editor());
      case 109:
        return Collections.<ConceptEditor>singletonList(new RemarkStatement_Editor());
      case 110:
        return Collections.<ConceptEditor>singletonList(new ReturnStatement_Editor());
      case 111:
        return Collections.<ConceptEditor>singletonList(new SetAccessor_Editor());
      case 112:
        return Collections.<ConceptEditor>singletonList(new SingleLineComment_Editor());
      case 113:
        return Arrays.asList(new ConceptEditor[]{new Statement_Editor(), new Statement_comment_Editor()});
      case 114:
        return Collections.<ConceptEditor>singletonList(new StatementCommentPart_Editor());
      case 115:
        return Collections.<ConceptEditor>singletonList(new StatementList_Editor());
      case 116:
        return Collections.<ConceptEditor>singletonList(new StaticFieldDeclaration_Editor());
      case 117:
        return Collections.<ConceptEditor>singletonList(new StaticFieldReference_Editor());
      case 118:
        return Collections.<ConceptEditor>singletonList(new StaticInitializer_Editor());
      case 119:
        return Collections.<ConceptEditor>singletonList(new StaticMethodCall_Editor());
      case 120:
        return Collections.<ConceptEditor>singletonList(new StaticMethodDeclaration_Editor());
      case 121:
        return Collections.<ConceptEditor>singletonList(new StringBooleanOperation_Editor());
      case 122:
        return Collections.<ConceptEditor>singletonList(new StringLiteral_Editor());
      case 123:
        return Collections.<ConceptEditor>singletonList(new StringToken_Editor());
      case 124:
        return Collections.<ConceptEditor>singletonList(new StubStatementList_Editor());
      case 125:
        return Collections.<ConceptEditor>singletonList(new SubstringExpression_Editor());
      case 126:
        return Collections.<ConceptEditor>singletonList(new SuperConstructorInvocation_Editor());
      case 127:
        return Collections.<ConceptEditor>singletonList(new SuperMethodCall_Editor());
      case 128:
        return Collections.<ConceptEditor>singletonList(new SwitchCase_Editor());
      case 129:
        return Collections.<ConceptEditor>singletonList(new SwitchStatement_Editor());
      case 130:
        return Collections.<ConceptEditor>singletonList(new SynchronizedStatement_Editor());
      case 131:
        return Collections.<ConceptEditor>singletonList(new TernaryOperatorExpression_Editor());
      case 132:
        return Collections.<ConceptEditor>singletonList(new TextCommentPart_Editor());
      case 133:
        return Collections.<ConceptEditor>singletonList(new ThisConstructorInvocation_Editor());
      case 134:
        return Collections.<ConceptEditor>singletonList(new ThisExpression_Editor());
      case 135:
        return Collections.<ConceptEditor>singletonList(new ThrowStatement_Editor());
      case 136:
        return Collections.<ConceptEditor>singletonList(new TrimOperation_Editor());
      case 137:
        return Collections.<ConceptEditor>singletonList(new TryCatchStatement_Editor());
      case 138:
        return Collections.<ConceptEditor>singletonList(new TryStatement_Editor());
      case 139:
        return Collections.<ConceptEditor>singletonList(new Type_Editor());
      case 140:
        return Collections.<ConceptEditor>singletonList(new TypeVariableDeclaration_Editor());
      case 141:
        return Collections.<ConceptEditor>singletonList(new TypeVariableReference_Editor());
      case 142:
        return Collections.<ConceptEditor>singletonList(new UnaryMinus_Editor());
      case 143:
        return Collections.<ConceptEditor>singletonList(new UndefinedType_Editor());
      case 144:
        return Collections.<ConceptEditor>singletonList(new UnknownConsCall_Editor());
      case 145:
        return Collections.<ConceptEditor>singletonList(new UnknownDotCall_Editor());
      case 146:
        return Collections.<ConceptEditor>singletonList(new UnknownLocalCall_Editor());
      case 147:
        return Collections.<ConceptEditor>singletonList(new UnknownNameRef_Editor());
      case 148:
        return Collections.<ConceptEditor>singletonList(new UnknownNew_Editor());
      case 149:
        return Collections.<ConceptEditor>singletonList(new UnresolvedNameReference_Editor());
      case 150:
        return Collections.<ConceptEditor>singletonList(new UpperBoundType_Editor());
      case 151:
        return Collections.<ConceptEditor>singletonList(new UsingStatement_Editor());
      case 152:
        return Collections.<ConceptEditor>singletonList(new ValueParameter_Editor());
      case 153:
        return Collections.<ConceptEditor>singletonList(new VariableArityType_Editor());
      case 154:
        return Collections.<ConceptEditor>singletonList(new VariableReference_Editor());
      case 155:
        return Collections.<ConceptEditor>singletonList(new Visibility_Editor());
      case 156:
        return Collections.<ConceptEditor>singletonList(new WhileStatement_Editor());
      case 157:
        return Collections.<ConceptEditor>singletonList(new WildCardType_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0a1a3, editorComponentId)) {
            case 0:
              return Collections.<ConceptEditorComponent>singletonList(new BaseMethodDeclaration_BodyComponent());
            case 1:
              return Collections.<ConceptEditorComponent>singletonList(new BaseMethodDeclaration_NameCellComponent());
            case 2:
              return Collections.<ConceptEditorComponent>singletonList(new BaseMethodDeclaration_ThrowsCollection_Component());
            default:
              return Collections.<ConceptEditorComponent>emptyList();
          }
        }
        break;
      case 1:
        if (true) {
          if ("jetbrains.mps.baseLanguage.editor.ClassifierMembers_Component".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new ClassifierMembersAdvanced_Component());
          }
        }
        break;
      case 2:
        if (true) {
          if ("jetbrains.mps.baseLanguage.editor.ClassifierMembers_Component".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new ClassifierMembers_Component());
          }
        }
        break;
      case 3:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0d1a3, editorComponentId)) {
            case 0:
              return Collections.<ConceptEditorComponent>singletonList(new ConceptFunctionAliased_Component());
            case 1:
              return Collections.<ConceptEditorComponent>singletonList(new ConceptFunction_Component());
            case 2:
              return Collections.<ConceptEditorComponent>singletonList(new ConceptFunction_Folded_Component());
            default:
              return Collections.<ConceptEditorComponent>emptyList();
          }
        }
        break;
      case 4:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0e1a3, editorComponentId)) {
            case 0:
              return Collections.<ConceptEditorComponent>singletonList(new GenericDeclaration_FoldedCodeBlock_Component());
            case 1:
              return Collections.<ConceptEditorComponent>singletonList(new _GenericDeclaration_TypeVariables_Component());
            case 2:
              return Collections.<ConceptEditorComponent>singletonList(new _GenericDeclaration_TypeVariables_WithAnchor_Component());
            default:
              return Collections.<ConceptEditorComponent>emptyList();
          }
        }
        break;
      case 5:
        if (true) {
          if ("jetbrains.mps.baseLanguage.editor.HasAnnotation_AnnotationComponent".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new HasAnnotation_AnnotationComponent());
          }
        }
        break;
      case 6:
        if (true) {
          if ("jetbrains.mps.baseLanguage.editor._DeprecatedPart".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new _DeprecatedPart());
          }
        }
        break;
      case 7:
        if (true) {
          if ("jetbrains.mps.baseLanguage.editor.ModifiersComponent".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new ModifiersComponent());
          }
        }
        break;
      case 8:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0i1a3, editorComponentId)) {
            case 0:
              return Collections.<ConceptEditorComponent>singletonList(new IMethodCall_actualArguments());
            case 1:
              return Collections.<ConceptEditorComponent>singletonList(new IMethodCall_typeArguments());
            default:
              return Collections.<ConceptEditorComponent>emptyList();
          }
        }
        break;
      case 9:
        if (true) {
          if ("jetbrains.mps.baseLanguage.editor._Component_Visibility".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new _Component_Visibility());
          }
        }
        break;
      case 10:
        if (true) {
          if ("jetbrains.mps.baseLanguage.editor.SuperMethodCallComponent".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new SuperMethodCallComponent());
          }
        }
        break;
      case 11:
        if (true) {
          if ("jetbrains.mps.baseLanguage.editor.UnknownQualifiedName".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new UnknownQualifiedName());
          }
        }
        break;
      case 12:
        if (true) {
          if ("jetbrains.mps.baseLanguage.editor.VariableDeclaration_NameCellComponent".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new VariableDeclaration_NameCellComponent());
          }
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }
  public Collection<ConceptEditorHint> getHints() {
    return myHints;
  }

  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex2.index(cncpt)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new AbstractClassifierReference_TransformationMenu());
      case 1:
        return Collections.<TransformationMenu>singletonList(new AbstractCreator_TransformationMenu());
      case 2:
        return Collections.<TransformationMenu>singletonList(new AnonymousClass_TransformationMenu());
      case 3:
        return Collections.<TransformationMenu>singletonList(new ArrayCreator_TransformationMenu());
      case 4:
        return Collections.<TransformationMenu>singletonList(new ArrayType_TransformationMenu());
      case 5:
        return Collections.<TransformationMenu>singletonList(new BinaryOperation_TransformationMenu());
      case 6:
        return Collections.<TransformationMenu>singletonList(new BreakStatement_TransformationMenu());
      case 7:
        return Collections.<TransformationMenu>singletonList(new CatchClause_TransformationMenu());
      case 8:
        return Collections.<TransformationMenu>singletonList(new ClassConcept_TransformationMenu());
      case 9:
        return Collections.<TransformationMenu>singletonList(new ClassCreator_TransformationMenu());
      case 10:
        return Collections.<TransformationMenu>singletonList(new ClassifierType_TransformationMenu());
      case 11:
        return Collections.<TransformationMenu>singletonList(new ContinueStatement_TransformationMenu());
      case 12:
        return Collections.<TransformationMenu>singletonList(new DefaultClassCreator_TransformationMenu());
      case 13:
        return Collections.<TransformationMenu>singletonList(new DimensionExpression_TransformationMenu());
      case 14:
        return Collections.<TransformationMenu>singletonList(new ElsifClause_TransformationMenu());
      case 15:
        return Collections.<TransformationMenu>singletonList(new Expression_TransformationMenu());
      case 16:
        return Collections.<TransformationMenu>singletonList(new ExpressionStatement_TransformationMenu());
      case 17:
        return Collections.<TransformationMenu>singletonList(new FieldDeclaration_TransformationMenu());
      case 18:
        return Collections.<TransformationMenu>singletonList(new GenericDeclaration_TransformationMenu());
      case 19:
        return Collections.<TransformationMenu>singletonList(new IOperation_TransformationMenu());
      case 20:
        return Collections.<TransformationMenu>singletonList(new IncompleteMemberDeclaration_TransformationMenu());
      case 21:
        return Collections.<TransformationMenu>singletonList(new InstanceMethodDeclaration_TransformationMenu());
      case 22:
        return Collections.<TransformationMenu>singletonList(new Interface_TransformationMenu());
      case 23:
        return Collections.<TransformationMenu>singletonList(new LocalMethodCall_TransformationMenu());
      case 24:
        return Collections.<TransformationMenu>singletonList(new MethodDeclaration_TransformationMenu());
      case 25:
        return Collections.<TransformationMenu>singletonList(new Modifier_TransformationMenu());
      case 26:
        return Collections.<TransformationMenu>singletonList(new PlaceholderMember_TransformationMenu());
      case 27:
        return Collections.<TransformationMenu>singletonList(new ReturnStatement_TransformationMenu());
      case 28:
        return Collections.<TransformationMenu>singletonList(new Statement_TransformationMenu());
      case 29:
        return Collections.<TransformationMenu>singletonList(new StaticFieldDeclaration_TransformationMenu());
      case 30:
        return Collections.<TransformationMenu>singletonList(new SwitchStatement_TransformationMenu());
      case 31:
        return Collections.<TransformationMenu>singletonList(new ThisExpression_TransformationMenu());
      case 32:
        return Collections.<TransformationMenu>singletonList(new TryCatchStatement_TransformationMenu());
      case 33:
        return Collections.<TransformationMenu>singletonList(new TryStatement_TransformationMenu());
      case 34:
        return Collections.<TransformationMenu>singletonList(new Type_TransformationMenu());
      case 35:
        return Collections.<TransformationMenu>singletonList(new VariableDeclaration_TransformationMenu());
      case 36:
        return Collections.<TransformationMenu>singletonList(new VariableReference_TransformationMenu());
      case 37:
        return Collections.<TransformationMenu>singletonList(new Visibility_TransformationMenu());
      case 38:
        return Collections.<TransformationMenu>singletonList(new WildCardType_TransformationMenu());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredNamedTransformationMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (conceptIndex3.index(cncpt)) {
      case 0:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0a1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new loopLabels()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new loopLabelsAndIfStatement()});
            default:
          }
        }
        break;
      case 1:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0b1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new AddAnnotationMemberDefaultValue()});
            default:
          }
        }
        break;
      case 2:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0c1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new AnonymousClass_ApplySideTransforms()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new expressionRTAfterAnonymous()});
            default:
          }
        }
        break;
      case 3:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0d1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new AddSquareBracketsToarrayCreatorWithInitializer()});
            default:
          }
        }
        break;
      case 4:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0e1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new BaseAssignmentExpression_Alias_TransformationMenu()});
            default:
          }
        }
        break;
      case 5:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0f1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new AddThrowsToMethods()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new AddThrowsToMethods_ext_5()});
            default:
          }
        }
        break;
      case 6:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0g1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new BinaryOperation_Alias_TransformationMenu()});
            default:
          }
        }
        break;
      case 7:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0h1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new convertToTry()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new tryCatch_CatchClause()});
            default:
          }
        }
        break;
      case 8:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0i1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new ClassConceptModifiersExtendsAndImplements()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new ClassConceptModifiersExtendsAndImplements_ext_3()});
            case 2:
              return Arrays.asList(new TransformationMenu[]{new ClassConceptModifiersExtendsAndImplements_ext_4()});
            case 3:
              return Arrays.asList(new TransformationMenu[]{new ClassConceptModifiersExtendsAndImplements_ext_5()});
            case 4:
              return Arrays.asList(new TransformationMenu[]{new ClassConcept_ApplySideTransforms()});
            default:
          }
        }
        break;
      case 9:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0j1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new ClassCreator_ApplySideTransforms()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new newExpression_ClassCreator_ext_2()});
            default:
          }
        }
        break;
      case 10:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0k1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new ClassifierClassExpressionToArray()});
            default:
          }
        }
        break;
      case 11:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0l1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new ExtendedClassImplementTransform()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new addGenericParameter()});
            case 2:
              return Arrays.asList(new TransformationMenu[]{new binaryOperations()});
            case 3:
              return Arrays.asList(new TransformationMenu[]{new classifierTypeInLocalVarRT()});
            case 4:
              return Arrays.asList(new TransformationMenu[]{new csharp_rTransform()});
            default:
          }
        }
        break;
      case 12:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0m1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new ConstructorDeclaration_ApplySideTransforms()});
            default:
          }
        }
        break;
      case 13:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0n1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new newExpression_DefaultClassCreator_ext_2()});
            default:
          }
        }
        break;
      case 14:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0o1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new EnumClass_ApplySideTransforms()});
            default:
          }
        }
        break;
      case 15:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0p1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new EnumConstantDeclaration_ApplySideTransforms()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new enumConstant_rt()});
            default:
          }
        }
        break;
      case 16:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0q1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new Expression_to_type_Cast()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new SubstringExpression_Transform()});
            case 2:
              return Arrays.asList(new TransformationMenu[]{new UnaryMinusLeftTransform()});
            case 3:
              return Arrays.asList(new TransformationMenu[]{new addComment_Expression()});
            case 4:
              return Arrays.asList(new TransformationMenu[]{new arrayAccess()});
            case 5:
              return Arrays.asList(new TransformationMenu[]{new assert_()});
            case 6:
              return Arrays.asList(new TransformationMenu[]{new assignment_to_variable_declaration()});
            case 7:
              return Arrays.asList(new TransformationMenu[]{new assignments()});
            case 8:
              return Arrays.asList(new TransformationMenu[]{new binaryOperations_Expression()});
            case 9:
              return Arrays.asList(new TransformationMenu[]{new csharp_rTransform_Expression()});
            case 10:
              return Arrays.asList(new TransformationMenu[]{new dotExpression()});
            case 11:
              return Arrays.asList(new TransformationMenu[]{new expressionStatement()});
            case 12:
              return Arrays.asList(new TransformationMenu[]{new expressionToNotExpression()});
            case 13:
              return Arrays.asList(new TransformationMenu[]{new expressionToParenthesis()});
            case 14:
              return Arrays.asList(new TransformationMenu[]{new expression_to_varaible_declaration()});
            case 15:
              return Arrays.asList(new TransformationMenu[]{new instanceOf()});
            case 16:
              return Arrays.asList(new TransformationMenu[]{new postfix()});
            case 17:
              return Arrays.asList(new TransformationMenu[]{new prefix()});
            case 18:
              return Arrays.asList(new TransformationMenu[]{new ternaryOperator()});
            default:
          }
        }
        break;
      case 17:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0r1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new FieldDeclaration_ApplySideTransforms()});
            default:
          }
        }
        break;
      case 18:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0s1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new addGenericTypeVariableInDeclaration()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new genericDeclaration_right()});
            default:
          }
        }
        break;
      case 19:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0t1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new AddMethodCallTypeArgument()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new AddMethodCallTypeArgument_ext_1()});
            case 2:
              return Arrays.asList(new TransformationMenu[]{new MethodCallFixer_AddFirstArgument()});
            default:
          }
        }
        break;
      case 20:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0u1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new Empty_Visibility_TransformtaionMenu()});
            default:
          }
        }
        break;
      case 21:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0v1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new ifStatement()});
            default:
          }
        }
        break;
      case 22:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0w1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new IncompleteMemberDeclaration_ApplySideTransforms()});
            default:
          }
        }
        break;
      case 23:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0x1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new InstanceMethodCallOperation_ApplySideTransforms()});
            default:
          }
        }
        break;
      case 24:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0y1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new InstanceMethodDeclaration_ApplySideTransforms()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new InstanceMethodDeclaration_ApplySideTransforms_1()});
            case 2:
              return Arrays.asList(new TransformationMenu[]{new InstanceMethodDeclaration_static_abstract()});
            default:
          }
        }
        break;
      case 25:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0z1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new InterfaceModifiersAndExtends_ext_2()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new InterfaceModifiersAndExtends_ext_4()});
            case 2:
              return Arrays.asList(new TransformationMenu[]{new InterfaceModifiersAndExtends_ext_5()});
            case 3:
              return Arrays.asList(new TransformationMenu[]{new Interface_ApplySideTransforms()});
            default:
          }
        }
        break;
      case 26:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0ab1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new MethodDeclaration_final_native_sync_all_mods()});
            default:
          }
        }
        break;
      case 27:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0bb1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new ModifierTransformationMenuHelper_TOREMOVE()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new addTypeAfterModifier()});
            default:
          }
        }
        break;
      case 28:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0cb1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new StaticFieldDeclaration_ApplySideTransforms()});
            default:
          }
        }
        break;
      case 29:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0db1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new StaticMethodDeclaration_ApplySideTransforms()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new StaticMethodDeclaration_ApplySideTransforms_1()});
            default:
          }
        }
        break;
      case 30:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0eb1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new SwitchStatement_ApplySideTransforms()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new switchLabels()});
            default:
          }
        }
        break;
      case 31:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0fb1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new convertToTry_TryCatchStatement()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new tryCatch_TryCatchStatement()});
            default:
          }
        }
        break;
      case 32:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0gb1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new AddFieldModifiersOnTypes()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new AddMethodModifiersOnTypes()});
            case 2:
              return Arrays.asList(new TransformationMenu[]{new AddStaticFieldModifiersOnTypes()});
            case 3:
              return Arrays.asList(new TransformationMenu[]{new ForReturnTypeOfTheMethod()});
            case 4:
              return Arrays.asList(new TransformationMenu[]{new addComment_Type()});
            case 5:
              return Arrays.asList(new TransformationMenu[]{new addGenericTypeDeclaration_Type_default()});
            case 6:
              return Arrays.asList(new TransformationMenu[]{new arrayBrackets()});
            case 7:
              return Arrays.asList(new TransformationMenu[]{new finalOnTypesInVariables()});
            case 8:
              return Arrays.asList(new TransformationMenu[]{new instanceOfIntoTernary()});
            case 9:
              return Arrays.asList(new TransformationMenu[]{new variableArityType()});
            default:
          }
        }
        break;
      case 33:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0hb1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new AddBoundToTypeVariableDeclaration()});
            default:
          }
        }
        break;
      case 34:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0ib1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new ArrayAndGenericTypesFromTypesInVarDeclarations()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new VariableDeclaration_ApplySideTransforms()});
            case 2:
              return Arrays.asList(new TransformationMenu[]{new variableDeclarationInitializer()});
            default:
          }
        }
        break;
      case 35:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0jb1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new LocalInstanceFieldReference_Transform()});
            case 1:
              return Arrays.asList(new TransformationMenu[]{new convertVariableAssignmentToVarDeclaration()});
            default:
          }
        }
        break;
      case 36:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0kb1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new addAbstract()});
            default:
          }
        }
        break;
      case 37:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0lb1a7, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new WildCardType_ApplySideTransforms()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex4.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new AbstractClassifierReference_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new AbstractCreator_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new AnnotationInstance_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new AnnotationInstanceExpression_SubstituteMenu());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new AnnotationInstanceValue_SubstituteMenu());
      case 5:
        return Collections.<SubstituteMenu>singletonList(new AnonymousClass_SubstituteMenu());
      case 6:
        return Collections.<SubstituteMenu>singletonList(new AnonymousClassCreator_SubstituteMenu());
      case 7:
        return Collections.<SubstituteMenu>singletonList(new ArrayLiteral_SubstituteMenu());
      case 8:
        return Collections.<SubstituteMenu>singletonList(new ArrayType_SubstituteMenu());
      case 9:
        return Collections.<SubstituteMenu>singletonList(new AsExpression_SubstituteMenu());
      case 10:
        return Collections.<SubstituteMenu>singletonList(new BLBottomType_SubstituteMenu());
      case 11:
        return Collections.<SubstituteMenu>singletonList(new BooleanConstant_SubstituteMenu());
      case 12:
        return Collections.<SubstituteMenu>singletonList(new BreakStatement_SubstituteMenu());
      case 13:
        return Collections.<SubstituteMenu>singletonList(new CastExpression_SubstituteMenu());
      case 14:
        return Collections.<SubstituteMenu>singletonList(new ClassCreator_SubstituteMenu());
      case 15:
        return Collections.<SubstituteMenu>singletonList(new ClassifierClassExpression_SubstituteMenu());
      case 16:
        return Collections.<SubstituteMenu>singletonList(new ClassifierMember_SubstituteMenu());
      case 17:
        return Collections.<SubstituteMenu>singletonList(new ClassifierType_SubstituteMenu());
      case 18:
        return Collections.<SubstituteMenu>singletonList(new ClosureParameterReference_SubstituteMenu());
      case 19:
        return Collections.<SubstituteMenu>singletonList(new CommentedStatement_SubstituteMenu());
      case 20:
        return Collections.<SubstituteMenu>singletonList(new CommentedStatementsBlock_SubstituteMenu());
      case 21:
        return Collections.<SubstituteMenu>singletonList(new ConceptFunctionParameter_SubstituteMenu());
      case 22:
        return Collections.<SubstituteMenu>singletonList(new ContinueStatement_SubstituteMenu());
      case 23:
        return Collections.<SubstituteMenu>singletonList(new DefaultClassCreator_SubstituteMenu());
      case 24:
        return Collections.<SubstituteMenu>singletonList(new DotExpression_SubstituteMenu());
      case 25:
        return Collections.<SubstituteMenu>singletonList(new EnumConstantDeclaration_SubstituteMenu());
      case 26:
        return Collections.<SubstituteMenu>singletonList(new EnumValueOfExpression_SubstituteMenu());
      case 27:
        return Collections.<SubstituteMenu>singletonList(new EnumValuesExpression_SubstituteMenu());
      case 28:
        return Collections.<SubstituteMenu>singletonList(new Expression_SubstituteMenu());
      case 29:
        return Collections.<SubstituteMenu>singletonList(new FieldReferenceOperation_SubstituteMenu());
      case 30:
        return Collections.<SubstituteMenu>singletonList(new FloatingPointConstant_SubstituteMenu());
      case 31:
        return Collections.<SubstituteMenu>singletonList(new FloatingPointFloatConstant_SubstituteMenu());
      case 32:
        return Collections.<SubstituteMenu>singletonList(new IfStatement_SubstituteMenu());
      case 33:
        return Collections.<SubstituteMenu>singletonList(new ImplicitAnnotationInstanceValue_SubstituteMenu());
      case 34:
        return Collections.<SubstituteMenu>singletonList(new IncompleteMemberDeclaration_SubstituteMenu());
      case 35:
        return Collections.<SubstituteMenu>singletonList(new InstanceMethodCallOperation_SubstituteMenu());
      case 36:
        return Collections.<SubstituteMenu>singletonList(new IntegerConstant_SubstituteMenu());
      case 37:
        return Collections.<SubstituteMenu>singletonList(new JavaModifier_SubstituteMenu());
      case 38:
        return Collections.<SubstituteMenu>singletonList(new LocalInstanceFieldReference_SubstituteMenu());
      case 39:
        return Collections.<SubstituteMenu>singletonList(new LocalInstanceMethodCall_SubstituteMenu());
      case 40:
        return Collections.<SubstituteMenu>singletonList(new LocalMethodCall_SubstituteMenu());
      case 41:
        return Collections.<SubstituteMenu>singletonList(new LocalPropertyReference_SubstituteMenu());
      case 42:
        return Collections.<SubstituteMenu>singletonList(new LocalStaticFieldReference_SubstituteMenu());
      case 43:
        return Collections.<SubstituteMenu>singletonList(new LocalStaticMethodCall_SubstituteMenu());
      case 44:
        return Collections.<SubstituteMenu>singletonList(new LocalVariableDeclaration_SubstituteMenu());
      case 45:
        return Collections.<SubstituteMenu>singletonList(new LongLiteral_SubstituteMenu());
      case 46:
        return Collections.<SubstituteMenu>singletonList(new LoopLabelReference_SubstituteMenu());
      case 47:
        return Collections.<SubstituteMenu>singletonList(new Modifier_SubstituteMenu());
      case 48:
        return Collections.<SubstituteMenu>singletonList(new NullType_SubstituteMenu());
      case 49:
        return Collections.<SubstituteMenu>singletonList(new ParameterDeclaration_SubstituteMenu());
      case 50:
        return Collections.<SubstituteMenu>singletonList(new PlaceholderMember_SubstituteMenu());
      case 51:
        return Collections.<SubstituteMenu>singletonList(new PrimitiveClassExpression_SubstituteMenu());
      case 52:
        return Collections.<SubstituteMenu>singletonList(new PropertyReference_SubstituteMenu());
      case 53:
        return Collections.<SubstituteMenu>singletonList(new PropertyValueReference_SubstituteMenu());
      case 54:
        return Collections.<SubstituteMenu>singletonList(new RemarkStatement_SubstituteMenu());
      case 55:
        return Collections.<SubstituteMenu>singletonList(new Statement_SubstituteMenu());
      case 56:
        return Collections.<SubstituteMenu>singletonList(new StatementCommentPart_SubstituteMenu());
      case 57:
        return Collections.<SubstituteMenu>singletonList(new StatementList_SubstituteMenu());
      case 58:
        return Collections.<SubstituteMenu>singletonList(new StaticFieldDeclaration_SubstituteMenu());
      case 59:
        return Collections.<SubstituteMenu>singletonList(new StaticMethodDeclaration_SubstituteMenu());
      case 60:
        return Collections.<SubstituteMenu>singletonList(new StringLiteral_SubstituteMenu());
      case 61:
        return Collections.<SubstituteMenu>singletonList(new StringToken_SubstituteMenu());
      case 62:
        return Collections.<SubstituteMenu>singletonList(new StubStatementList_SubstituteMenu());
      case 63:
        return Collections.<SubstituteMenu>singletonList(new SubstringExpression_SubstituteMenu());
      case 64:
        return Collections.<SubstituteMenu>singletonList(new SuperConstructorInvocation_SubstituteMenu());
      case 65:
        return Collections.<SubstituteMenu>singletonList(new TextCommentPart_SubstituteMenu());
      case 66:
        return Collections.<SubstituteMenu>singletonList(new ThisConstructorInvocation_SubstituteMenu());
      case 67:
        return Collections.<SubstituteMenu>singletonList(new Type_SubstituteMenu());
      case 68:
        return Collections.<SubstituteMenu>singletonList(new TypeVariableReference_SubstituteMenu());
      case 69:
        return Collections.<SubstituteMenu>singletonList(new UndefinedType_SubstituteMenu());
      case 70:
        return Collections.<SubstituteMenu>singletonList(new UnknownConsCall_SubstituteMenu());
      case 71:
        return Collections.<SubstituteMenu>singletonList(new UnknownDotCall_SubstituteMenu());
      case 72:
        return Collections.<SubstituteMenu>singletonList(new UnknownLocalCall_SubstituteMenu());
      case 73:
        return Collections.<SubstituteMenu>singletonList(new UnknownNameRef_SubstituteMenu());
      case 74:
        return Collections.<SubstituteMenu>singletonList(new UnknownNew_SubstituteMenu());
      case 75:
        return Collections.<SubstituteMenu>singletonList(new UnresolvedNameReference_SubstituteMenu());
      case 76:
        return Collections.<SubstituteMenu>singletonList(new ValueParameter_SubstituteMenu());
      case 77:
        return Collections.<SubstituteMenu>singletonList(new VariableReference_SubstituteMenu());
      case 78:
        return Collections.<SubstituteMenu>singletonList(new Visibility_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredNamedSubstituteMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
    switch (conceptIndex5.index(cncpt)) {
      case 0:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0a1a9, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new SubstituteMenu[]{new AnnotationInstanceValue_SmartReference()});
            default:
          }
        }
        break;
      case 1:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0b1a9, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new SubstituteMenu[]{new BaseAssignmentExpression_Alias_SubstituteMenu()});
            default:
          }
        }
        break;
      case 2:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0c1a9, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new SubstituteMenu[]{new BinaryOperation_Alias_SubstituteMenu()});
            default:
          }
        }
        break;
      case 3:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0d1a9, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new SubstituteMenu[]{new ClassCreator_SmartReference()});
            default:
          }
        }
        break;
      case 4:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0e1a9, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new SubstituteMenu[]{new ClassifierClassExpression_SmartReference()});
            default:
          }
        }
        break;
      case 5:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0f1a9, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new SubstituteMenu[]{new StaticFieldInClassifier()});
            case 1:
              return Arrays.asList(new SubstituteMenu[]{new ctor_IncompleteFromModifier()});
            case 2:
              return Arrays.asList(new SubstituteMenu[]{new ctor_IncompleteMember()});
            case 3:
              return Arrays.asList(new SubstituteMenu[]{new ctor_IncompleteMemberInInterface()});
            case 4:
              return Arrays.asList(new SubstituteMenu[]{new ctor_InterfaceMemberBasedOnIncomplete()});
            case 5:
              return Arrays.asList(new SubstituteMenu[]{new ctor_MemberBasedOnIncomplete()});
            default:
          }
        }
        break;
      case 6:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0g1a9, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new SubstituteMenu[]{new ClassifierType_SmartReference()});
            default:
          }
        }
        break;
      case 7:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0h1a9, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new SubstituteMenu[]{new DefaultClassCreator_SmartReference()});
            default:
          }
        }
        break;
      case 8:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0i1a9, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new SubstituteMenu[]{new CreateEnumConstantReferences()});
            case 1:
              return Arrays.asList(new SubstituteMenu[]{new ParensAroundEmptyExpression()});
            case 2:
              return Arrays.asList(new SubstituteMenu[]{new PrimitiveClassExpression()});
            case 3:
              return Arrays.asList(new SubstituteMenu[]{new conceptFunctionParameters()});
            case 4:
              return Arrays.asList(new SubstituteMenu[]{new constants()});
            case 5:
              return Arrays.asList(new SubstituteMenu[]{new liveTemplates_Expression()});
            case 6:
              return Arrays.asList(new SubstituteMenu[]{new new_()});
            case 7:
              return Arrays.asList(new SubstituteMenu[]{new qualifiedSuperMethodCallExpression()});
            case 8:
              return Arrays.asList(new SubstituteMenu[]{new smartCast()});
            case 9:
              return Arrays.asList(new SubstituteMenu[]{new staticAccess()});
            case 10:
              return Arrays.asList(new SubstituteMenu[]{new thisExpression()});
            case 11:
              return Arrays.asList(new SubstituteMenu[]{new valueParameter()});
            default:
          }
        }
        break;
      case 9:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0j1a9, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new SubstituteMenu[]{new menuForSubstitutingInIf()});
            default:
          }
        }
        break;
      case 10:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0k1a9, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new SubstituteMenu[]{new expressionStatement_()});
            case 1:
              return Arrays.asList(new SubstituteMenu[]{new ifStatement_()});
            case 2:
              return Arrays.asList(new SubstituteMenu[]{new localVariables()});
            case 3:
              return Arrays.asList(new SubstituteMenu[]{new localVariablesWithType()});
            case 4:
              return Arrays.asList(new SubstituteMenu[]{new loopStatements()});
            case 5:
              return Arrays.asList(new SubstituteMenu[]{new thisAndSuperConstructor()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c6c91efa5ec8cd7L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ab844af9bL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1196792d150L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x19659b074928781eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a69dc80cL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a6b4ccabL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a71a2770L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a71b1af4L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a6a17a27L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1107e0cb103L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1133e3b449aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11126b40c25L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x115f7830a32a65e7L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x483ee9d7f09580d6L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x113e4952f12L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cd01b77ddL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1197781411dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a770dc0dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d00538bdfL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10e50ecba3dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1210c38a8adL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11b0d00332cL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x4c4b92003e49a704L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d6d026f5fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc092b6b77L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b201L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbe39a867fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940dabe4aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f39a56e2fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1177d44b21bL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a59b0fbceL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x103fb730c14L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c7edb2aa8L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c7edba8b3L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11ef4675fccL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1121e2102fdL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbf3043726L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b8f1b18eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3b7a2005a14cfe5eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2724644c0ac833a5L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117e0abf7abL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b7633177L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117e16a7273L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x113e4b2dfdaL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11232674988L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118ceceb41aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367070a5L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367388b3L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc37588bc8L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d1e5db156L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d1e4bce56L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x144805fc3e36da43L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca68L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b483d77aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102cb19a434L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x494547eeedc219b9L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a698082feL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a6933ce33L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ab8473cc5L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b9245fc5L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1129761e073L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x23cf7b405b3b9761L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x64a1ef64cd9b42ceL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x32175ac2e6fcc181L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2052c4520af308e1L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118f0b909f7L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbff03700L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101edd46144L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x64c0181e603bcfL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x53f7c33f069862f2L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c6b6a1e379f9404L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x515d7a8d927e9fb3L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3b418722717710b4L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x50c493bf9552f6aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x50c493bf9555129L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110dae9d53dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x650f9fedfcb5b664L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbcf6bd10dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940cd6167L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10d68c2ecd3L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfb4ed32b7fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1458378889e6d166L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11aded05fe6L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11adecdb4f0L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x120a472f0e8L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x120a46df580L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3f57ea36bd70a4e1L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b744dafeL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b821eaaeL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2463999e524f3bf5L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x37f722a7ce38076aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1101757c8faL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7feL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117bd9ac3d9L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af16ff67L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93c84351fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940c80846L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11c7538039dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbebabf09L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbebabf0aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47de7e99L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x5eb0cab441189a51L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x4975dc2bdcfa0c49L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47df21f3L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d512e1eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf9d78b55aaL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02cdd1bL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02a8c6aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1106df1d8d8L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef01239c9L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1127b878882L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d4da00cL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f3ee082d8L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47e0122aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f383e6771L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cacebf556L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1024639ed74L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6fea7de6103549b1L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x431d52a5d09a4ea9L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x7e4a5cff51167b74L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x245faa02186fc7b5L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x245faa02186fc5d6L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x759937a5973279b7L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2dda7700ec3ae154L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x28e9fc3ba3fa3940L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110daeaa84aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d0053f19bL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117dd047c70L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11c08f42e7bL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10af957d96eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfaa4bf0f2fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110dae5f4a3L)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102463b447aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a6be947aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d2ea8a339L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x203eeb62af522fa5L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112670d273fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf9d78b55aaL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x759937a5973279b7L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL)).seal();
  private static final ConceptSwitchIndex conceptIndex2 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c6c91efa5ec8cd7L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ab844af9bL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1107e0cb103L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x113e4952f12L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbe39a867fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f39a56e2fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a59b0fbceL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbf3043726L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2724644c0ac833a5L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x113e4b2dfdaL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118ceceb41aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca68L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102463b447aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x32175ac2e6fcc181L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101edd46144L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c6b6a1e379f9404L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c6b6a1e379f9408L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x21592d9e7375c5a6L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1458378889e6d166L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7feL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93c84351fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02a8c6aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d4da00cL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f383e6771L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cacebf556L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10af957d96eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110dae5f4a3L)).seal();
  private static final ConceptSwitchIndex conceptIndex3 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cb1ac5adeL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a6a17a27L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1107e0cb103L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cd01b77ddL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11b0d00332cL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f39a56e2fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a59b0fbceL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x103fb730c14L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2724644c0ac833a5L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367070a5L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367388b3L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca68L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102463b447aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112670d273fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x32175ac2e6fcc181L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101edd46144L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c6b6a1e379f9408L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x21592d9e7375c5a6L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93c84351fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbebabf0aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02a8c6aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f383e6771L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1024639ed74L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10af957d96eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110dae5f4a3L)).seal();
  private static final ConceptSwitchIndex conceptIndex4 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c6c91efa5ec8cd7L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ab844af9bL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a6b4ccabL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a71a2770L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a71b1af4L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1107e0cb103L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1133e3b449aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a770dc0dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d00538bdfL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1210c38a8adL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b201L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbe39a867fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940dabe4aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a59b0fbceL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x103fb730c14L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112574373bdL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c7edba8b3L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11ef4675fccL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1121e2102fdL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbf3043726L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2724644c0ac833a5L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367388b3L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d1e5db156L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d1e4bce56L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b483d77aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102cb19a434L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x494547eeedc219b9L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x23cf7b405b3b9761L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x32175ac2e6fcc181L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1027dd744a287198L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c0ba864df016178L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2a8fe0cadfaa8af2L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c6b6a1e379f9404L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x515d7a8d927e9fb3L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110e12d8c7dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110e4207559L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3b418722717710b4L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x50c493bf9555129L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x21592d9e7375c5a6L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1185ff468caL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1458378889e6d166L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3f57ea36bd70a4e1L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b821eaaeL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2463999e524f3bf5L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1101757c8faL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af16ff67L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93c84351fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbebabf0aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x5eb0cab441189a51L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x4975dc2bdcfa0c49L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47df21f3L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d512e1eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1127b878882L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x431d52a5d09a4ea9L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x7e4a5cff51167b74L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x245faa02186fc7b5L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x245faa02186fc5d6L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x759937a5973279b7L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2dda7700ec3ae154L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x28e9fc3ba3fa3940L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117dd047c70L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10af957d96eL)).seal();
  private static final ConceptSwitchIndex conceptIndex5 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a71b1af4L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11b0d00332cL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a59b0fbceL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x103fb730c14L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112574373bdL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2724644c0ac833a5L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).seal();
  private static String[] stringSwitchCases_xbvbvu_a0a0a0a1a3 = new String[]{"jetbrains.mps.baseLanguage.editor.BaseMethodDeclaration_BodyComponent", "jetbrains.mps.baseLanguage.editor.BaseMethodDeclaration_NameCellComponent", "jetbrains.mps.baseLanguage.editor.BaseMethodDeclaration_ThrowsCollection_Component"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0d1a3 = new String[]{"jetbrains.mps.baseLanguage.editor.ConceptFunctionAliased_Component", "jetbrains.mps.baseLanguage.editor.ConceptFunction_Component", "jetbrains.mps.baseLanguage.editor.ConceptFunction_Folded_Component"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0e1a3 = new String[]{"jetbrains.mps.baseLanguage.editor.GenericDeclaration_FoldedCodeBlock_Component", "jetbrains.mps.baseLanguage.editor._GenericDeclaration_TypeVariables_Component", "jetbrains.mps.baseLanguage.editor._GenericDeclaration_TypeVariables_WithAnchor_Component"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0i1a3 = new String[]{"jetbrains.mps.baseLanguage.editor.IMethodCall_actualArguments", "jetbrains.mps.baseLanguage.editor.IMethodCall_typeArguments"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0a1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.loopLabels", "jetbrains.mps.baseLanguage.editor.loopLabelsAndIfStatement"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0b1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.AddAnnotationMemberDefaultValue"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0c1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.AnonymousClass_ApplySideTransforms", "jetbrains.mps.baseLanguage.editor.expressionRTAfterAnonymous"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0d1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.AddSquareBracketsToarrayCreatorWithInitializer"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0e1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.BaseAssignmentExpression_Alias_TransformationMenu"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0f1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.AddThrowsToMethods", "jetbrains.mps.baseLanguage.editor.AddThrowsToMethods_ext_5"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0g1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.BinaryOperation_Alias_TransformationMenu"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0h1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.convertToTry", "jetbrains.mps.baseLanguage.editor.tryCatch_CatchClause"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0i1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.ClassConceptModifiersExtendsAndImplements", "jetbrains.mps.baseLanguage.editor.ClassConceptModifiersExtendsAndImplements_ext_3", "jetbrains.mps.baseLanguage.editor.ClassConceptModifiersExtendsAndImplements_ext_4", "jetbrains.mps.baseLanguage.editor.ClassConceptModifiersExtendsAndImplements_ext_5", "jetbrains.mps.baseLanguage.editor.ClassConcept_ApplySideTransforms"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0j1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.ClassCreator_ApplySideTransforms", "jetbrains.mps.baseLanguage.editor.newExpression_ClassCreator_ext_2"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0k1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.ClassifierClassExpressionToArray"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0l1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.ExtendedClassImplementTransform", "jetbrains.mps.baseLanguage.editor.addGenericParameter", "jetbrains.mps.baseLanguage.editor.binaryOperations", "jetbrains.mps.baseLanguage.editor.classifierTypeInLocalVarRT", "jetbrains.mps.baseLanguage.editor.csharp_rTransform"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0m1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.ConstructorDeclaration_ApplySideTransforms"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0n1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.newExpression_DefaultClassCreator_ext_2"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0o1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.EnumClass_ApplySideTransforms"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0p1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.EnumConstantDeclaration_ApplySideTransforms", "jetbrains.mps.baseLanguage.editor.enumConstant_rt"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0q1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.Expression_to_type_Cast", "jetbrains.mps.baseLanguage.editor.SubstringExpression_Transform", "jetbrains.mps.baseLanguage.editor.UnaryMinusLeftTransform", "jetbrains.mps.baseLanguage.editor.addComment_Expression", "jetbrains.mps.baseLanguage.editor.arrayAccess", "jetbrains.mps.baseLanguage.editor.assert_", "jetbrains.mps.baseLanguage.editor.assignment_to_variable_declaration", "jetbrains.mps.baseLanguage.editor.assignments", "jetbrains.mps.baseLanguage.editor.binaryOperations_Expression", "jetbrains.mps.baseLanguage.editor.csharp_rTransform_Expression", "jetbrains.mps.baseLanguage.editor.dotExpression", "jetbrains.mps.baseLanguage.editor.expressionStatement", "jetbrains.mps.baseLanguage.editor.expressionToNotExpression", "jetbrains.mps.baseLanguage.editor.expressionToParenthesis", "jetbrains.mps.baseLanguage.editor.expression_to_varaible_declaration", "jetbrains.mps.baseLanguage.editor.instanceOf", "jetbrains.mps.baseLanguage.editor.postfix", "jetbrains.mps.baseLanguage.editor.prefix", "jetbrains.mps.baseLanguage.editor.ternaryOperator"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0r1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.FieldDeclaration_ApplySideTransforms"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0s1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.addGenericTypeVariableInDeclaration", "jetbrains.mps.baseLanguage.editor.genericDeclaration_right"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0t1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.AddMethodCallTypeArgument", "jetbrains.mps.baseLanguage.editor.AddMethodCallTypeArgument_ext_1", "jetbrains.mps.baseLanguage.editor.MethodCallFixer_AddFirstArgument"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0u1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.Empty_Visibility_TransformtaionMenu"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0v1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.ifStatement"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0w1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.IncompleteMemberDeclaration_ApplySideTransforms"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0x1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.InstanceMethodCallOperation_ApplySideTransforms"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0y1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.InstanceMethodDeclaration_ApplySideTransforms", "jetbrains.mps.baseLanguage.editor.InstanceMethodDeclaration_ApplySideTransforms_1", "jetbrains.mps.baseLanguage.editor.InstanceMethodDeclaration_static_abstract"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0z1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.InterfaceModifiersAndExtends_ext_2", "jetbrains.mps.baseLanguage.editor.InterfaceModifiersAndExtends_ext_4", "jetbrains.mps.baseLanguage.editor.InterfaceModifiersAndExtends_ext_5", "jetbrains.mps.baseLanguage.editor.Interface_ApplySideTransforms"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0ab1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.MethodDeclaration_final_native_sync_all_mods"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0bb1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.ModifierTransformationMenuHelper_TOREMOVE", "jetbrains.mps.baseLanguage.editor.addTypeAfterModifier"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0cb1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.StaticFieldDeclaration_ApplySideTransforms"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0db1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.StaticMethodDeclaration_ApplySideTransforms", "jetbrains.mps.baseLanguage.editor.StaticMethodDeclaration_ApplySideTransforms_1"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0eb1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.SwitchStatement_ApplySideTransforms", "jetbrains.mps.baseLanguage.editor.switchLabels"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0fb1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.convertToTry_TryCatchStatement", "jetbrains.mps.baseLanguage.editor.tryCatch_TryCatchStatement"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0gb1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.AddFieldModifiersOnTypes", "jetbrains.mps.baseLanguage.editor.AddMethodModifiersOnTypes", "jetbrains.mps.baseLanguage.editor.AddStaticFieldModifiersOnTypes", "jetbrains.mps.baseLanguage.editor.ForReturnTypeOfTheMethod", "jetbrains.mps.baseLanguage.editor.addComment_Type", "jetbrains.mps.baseLanguage.editor.addGenericTypeDeclaration_Type_default", "jetbrains.mps.baseLanguage.editor.arrayBrackets", "jetbrains.mps.baseLanguage.editor.finalOnTypesInVariables", "jetbrains.mps.baseLanguage.editor.instanceOfIntoTernary", "jetbrains.mps.baseLanguage.editor.variableArityType"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0hb1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.AddBoundToTypeVariableDeclaration"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0ib1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.ArrayAndGenericTypesFromTypesInVarDeclarations", "jetbrains.mps.baseLanguage.editor.VariableDeclaration_ApplySideTransforms", "jetbrains.mps.baseLanguage.editor.variableDeclarationInitializer"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0jb1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.LocalInstanceFieldReference_Transform", "jetbrains.mps.baseLanguage.editor.convertVariableAssignmentToVarDeclaration"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0kb1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.addAbstract"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0lb1a7 = new String[]{"jetbrains.mps.baseLanguage.editor.WildCardType_ApplySideTransforms"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0a1a9 = new String[]{"jetbrains.mps.baseLanguage.editor.AnnotationInstanceValue_SmartReference"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0b1a9 = new String[]{"jetbrains.mps.baseLanguage.editor.BaseAssignmentExpression_Alias_SubstituteMenu"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0c1a9 = new String[]{"jetbrains.mps.baseLanguage.editor.BinaryOperation_Alias_SubstituteMenu"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0d1a9 = new String[]{"jetbrains.mps.baseLanguage.editor.ClassCreator_SmartReference"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0e1a9 = new String[]{"jetbrains.mps.baseLanguage.editor.ClassifierClassExpression_SmartReference"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0f1a9 = new String[]{"jetbrains.mps.baseLanguage.editor.StaticFieldInClassifier", "jetbrains.mps.baseLanguage.editor.ctor_IncompleteFromModifier", "jetbrains.mps.baseLanguage.editor.ctor_IncompleteMember", "jetbrains.mps.baseLanguage.editor.ctor_IncompleteMemberInInterface", "jetbrains.mps.baseLanguage.editor.ctor_InterfaceMemberBasedOnIncomplete", "jetbrains.mps.baseLanguage.editor.ctor_MemberBasedOnIncomplete"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0g1a9 = new String[]{"jetbrains.mps.baseLanguage.editor.ClassifierType_SmartReference"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0h1a9 = new String[]{"jetbrains.mps.baseLanguage.editor.DefaultClassCreator_SmartReference"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0i1a9 = new String[]{"jetbrains.mps.baseLanguage.editor.CreateEnumConstantReferences", "jetbrains.mps.baseLanguage.editor.ParensAroundEmptyExpression", "jetbrains.mps.baseLanguage.editor.PrimitiveClassExpression", "jetbrains.mps.baseLanguage.editor.conceptFunctionParameters", "jetbrains.mps.baseLanguage.editor.constants", "jetbrains.mps.baseLanguage.editor.liveTemplates_Expression", "jetbrains.mps.baseLanguage.editor.new_", "jetbrains.mps.baseLanguage.editor.qualifiedSuperMethodCallExpression", "jetbrains.mps.baseLanguage.editor.smartCast", "jetbrains.mps.baseLanguage.editor.staticAccess", "jetbrains.mps.baseLanguage.editor.thisExpression", "jetbrains.mps.baseLanguage.editor.valueParameter"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0j1a9 = new String[]{"jetbrains.mps.baseLanguage.editor.menuForSubstitutingInIf"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0k1a9 = new String[]{"jetbrains.mps.baseLanguage.editor.expressionStatement_", "jetbrains.mps.baseLanguage.editor.ifStatement_", "jetbrains.mps.baseLanguage.editor.localVariables", "jetbrains.mps.baseLanguage.editor.localVariablesWithType", "jetbrains.mps.baseLanguage.editor.loopStatements", "jetbrains.mps.baseLanguage.editor.thisAndSuperConstructor"};
}
