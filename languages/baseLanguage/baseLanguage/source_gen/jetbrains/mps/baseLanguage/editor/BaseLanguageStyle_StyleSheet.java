package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.baseLanguage.behavior.CommentPart__BehaviorDescriptor;
import jetbrains.mps.baseLanguage.behavior.IClassifierMember__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class BaseLanguageStyle_StyleSheet {
  public static void apply_KeyWord(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("KEYWORD");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_CompactKeyWord(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_KeyWord(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_Comment(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("LINE_COMMENT");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 1);
    }
  }
  public static void apply_TODO(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a0d(editorContext, node)) {
      {
        Style styleToPut = StyleRegistry.getInstance().getStyle("TODO");
        if (styleToPut == null) {
          styleToPut = new StyleImpl();
        }
        style.putAll(styleToPut, 2);
      }
    }
  }
  public static void apply_BlockComment(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("BLOCK_COMMENT");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 1);
    }
  }
  public static void apply_JavaDoc(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("DOC_COMMENT");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_JavaDocTag(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("DOC_TAG");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_Field(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("INSTANCE_FIELD");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_LocalVariable(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("LOCAL_VARIABLE");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_Parameter(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("PARAMETER");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_StaticField(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_VariableName(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_StringLiteral(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("STRING");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_NumericLiteral(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("NUMBER");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_EmptyCell(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("NOT_USED_ELEMENT");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_InstanceMethod(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
  }
  public static void apply_StaticMethod(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("STATIC_METHOD");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_Annotation(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("ANNOTATION");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_Operator(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("OPERATION_SIGN");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_AnyBracket(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    style.set(StyleAttributes.INDENT_LAYOUT_NO_WRAP, 0, true);
    style.set(StyleAttributes.FONT_STYLE, 0, MPSFonts.PLAIN);
  }
  public static void apply_Parenthesis(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_AnyBracket(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("PARENTH");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.MATCHING_LABEL, 0, "parenthesis");
  }
  public static void apply_LeftParen(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_Parenthesis(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
  }
  public static void apply_LeftParenAfterName(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_LeftParen(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);
  }
  public static void apply_RightParen(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_Parenthesis(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);
  }
  public static void apply_Brace(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_AnyBracket(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("BRACES");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.MATCHING_LABEL, 0, "brace");
  }
  public static void apply_LeftBrace(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_Brace(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_RightBrace(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_Brace(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_Bracket(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_AnyBracket(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("BRACKETS");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.MATCHING_LABEL, 0, "bracket");
  }
  public static void apply_LeftBracket(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_Bracket(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
  }
  public static void apply_RightBracket(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_Bracket(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);
  }
  public static void apply_AngleBracket(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_AnyBracket(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.MATCHING_LABEL, 0, "angleBracket");
  }
  public static void apply_LeftAngleBracket(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_AngleBracket(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
  }
  public static void apply_RightAngleBracket(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_AngleBracket(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
  }
  public static void apply_MethodName(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("METHOD_DECLARATION");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_MPSMethodCall(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("METHOD_CALL");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a1hb(editorContext, node)) {
      {
        Style styleToPut = StyleRegistry.getInstance().getStyle("STATIC_METHOD");
        if (styleToPut == null) {
          styleToPut = new StyleImpl();
        }
        style.putAll(styleToPut, 0);
      }
    }
  }
  public static void apply_VariableName(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a0ib(editorContext, node)) {
      {
        Style styleToPut = StyleRegistry.getInstance().getStyle("STATIC_FINAL_FIELD");
        if (styleToPut == null) {
          styleToPut = new StyleImpl();
        }
        style.putAll(styleToPut, 0);
      }
    }
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a1ib(editorContext, node)) {
      {
        Style styleToPut = StyleRegistry.getInstance().getStyle("STATIC_FIELD");
        if (styleToPut == null) {
          styleToPut = new StyleImpl();
        }
        style.putAll(styleToPut, 0);
      }
    }
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a2ib(editorContext, node)) {
      {
        Style styleToPut = StyleRegistry.getInstance().getStyle("INSTANCE_FIELD");
        if (styleToPut == null) {
          styleToPut = new StyleImpl();
        }
        style.putAll(styleToPut, 0);
      }
    }
    if (BaseLanguageStyle_StyleSheet._StyleParameter_QueryFunction_the604_a3ib(editorContext, node)) {
      {
        Style styleToPut = StyleRegistry.getInstance().getStyle("LOCAL_VARIABLE");
        if (styleToPut == null) {
          styleToPut = new StyleImpl();
        }
        style.putAll(styleToPut, 0);
      }
    }
  }
  public static void apply_ClassName(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = new StyleImpl();
      BaseLanguageStyle_StyleSheet.apply_ConceptName(styleToPut, editorCell);
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_ConceptName(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("CLASS_NAME");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_Semicolon(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("SEMICOLON");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.EDITABLE, 0, false);
    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);
  }
  public static void apply_Dot(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("DOT");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
    style.set(StyleAttributes.SELECTABLE, 0, false);
  }
  public static void apply_BaseAngleBracket(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    style.set(StyleAttributes.MATCHING_LABEL, 0, "AngleBracket");
  }
  public static void apply_Matching(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    style.set(StyleAttributes.MATCHING_LABEL, 0, "matching");
  }
  public static void apply_FoldedCell(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("FOLDED_TEXT");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_Url(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    {
      Style styleToPut = StyleRegistry.getInstance().getStyle("URL");
      if (styleToPut == null) {
        styleToPut = new StyleImpl();
      }
      style.putAll(styleToPut, 0);
    }
  }
  public static void apply_Label(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.DARK_GREEN));
  }
  public static void apply_FirstLevel(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.darkGray));
  }
  public static void apply_SecondLevel(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.gray));
  }
  public static void apply_ThirdLevel(Style style, EditorCell editorCell) {
    SNode node = (editorCell == null ? null : editorCell.getSNode());
    EditorContext editorContext = (editorCell == null ? null : editorCell.getContext());
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.lightGray));
  }

  private static boolean _StyleParameter_QueryFunction_the604_a0d(EditorContext editorContext, SNode node) {
    return SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3dL, "jetbrains.mps.baseLanguage.structure.TextCommentPart")) && (boolean) CommentPart__BehaviorDescriptor.isToDo_id6hHyb3YSGHZ.invoke(SNodeOperations.as(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3dL, "jetbrains.mps.baseLanguage.structure.TextCommentPart")));
  }
  private static boolean _StyleParameter_QueryFunction_the604_a1hb(EditorContext editorContext, SNode node) {
    return SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbebabf0aL, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"));
  }
  private static boolean _StyleParameter_QueryFunction_the604_a0ib(EditorContext editorContext, SNode node) {
    if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112574373bdL, "jetbrains.mps.baseLanguage.structure.ClassifierMember"))) {
      if ((boolean) IClassifierMember__BehaviorDescriptor.isStatic_id6r77ob2USS8.invoke(SNodeOperations.cast(node, MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112574373bdL, "jetbrains.mps.baseLanguage.structure.ClassifierMember")))) {
        if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, "jetbrains.mps.baseLanguage.structure.VariableDeclaration")) && SPropertyOperations.getBoolean(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, "jetbrains.mps.baseLanguage.structure.VariableDeclaration")), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0x111f9e9f00cL, "isFinal"))) {
          return true;
        }
      }
    }
    return false;
  }
  private static boolean _StyleParameter_QueryFunction_the604_a1ib(EditorContext editorContext, SNode node) {
    if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112574373bdL, "jetbrains.mps.baseLanguage.structure.ClassifierMember"))) {
      if ((boolean) IClassifierMember__BehaviorDescriptor.isStatic_id6r77ob2USS8.invoke(SNodeOperations.cast(node, MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112574373bdL, "jetbrains.mps.baseLanguage.structure.ClassifierMember")))) {
        if (!((SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, "jetbrains.mps.baseLanguage.structure.VariableDeclaration")) && SPropertyOperations.getBoolean(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, "jetbrains.mps.baseLanguage.structure.VariableDeclaration")), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0x111f9e9f00cL, "isFinal"))))) {
          return true;
        }
      }
    }
    return false;
  }
  private static boolean _StyleParameter_QueryFunction_the604_a2ib(EditorContext editorContext, SNode node) {
    if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112574373bdL, "jetbrains.mps.baseLanguage.structure.ClassifierMember"))) {
      if (!((boolean) IClassifierMember__BehaviorDescriptor.isStatic_id6r77ob2USS8.invoke(SNodeOperations.cast(node, MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112574373bdL, "jetbrains.mps.baseLanguage.structure.ClassifierMember"))))) {
        return true;
      }
    }
    return false;
  }
  private static boolean _StyleParameter_QueryFunction_the604_a3ib(EditorContext editorContext, SNode node) {
    if (!(SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112574373bdL, "jetbrains.mps.baseLanguage.structure.ClassifierMember")))) {
      return true;
    }
    return false;
  }
}
