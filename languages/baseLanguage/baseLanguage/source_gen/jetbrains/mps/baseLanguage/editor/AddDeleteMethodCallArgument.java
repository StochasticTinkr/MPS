package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.baseLanguage.search.MethodResolveUtil;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;

public class AddDeleteMethodCallArgument {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new AddDeleteMethodCallArgument.AddDeleteMethodCallArgument_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new AddDeleteMethodCallArgument.AddDeleteMethodCallArgument_BACKSPACE(node));
    editorCell.setAction(CellActionType.INSERT, new AddDeleteMethodCallArgument.AddDeleteMethodCallArgument_INSERT(node));
  }
  public static class AddDeleteMethodCallArgument_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public AddDeleteMethodCallArgument_DELETE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      if (SNodeOperations.hasRole(node, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"))) {
        SNode methodCall = SNodeOperations.cast(SNodeOperations.getParent(node), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, "jetbrains.mps.baseLanguage.structure.IMethodCall"));
        SNode prevSibling = SNodeOperations.getPrevSibling(node);
        SNode nextSibling = SNodeOperations.getNextSibling(node);
        SNodeOperations.deleteNode(node);
        MethodResolveUtil.replaceFromEditor(methodCall);
        if ((nextSibling != null)) {
          SelectionUtil.selectLabelCellAnSetCaret(editorContext, nextSibling, SelectionManager.FIRST_CELL, 0);
        } else if ((prevSibling != null)) {
          SelectionUtil.selectNode(editorContext, prevSibling);
        } else {
          SelectionUtil.selectCell(editorContext, methodCall, "EMPTY_PARAMETER_LIST");
        }
      } else {
        SNodeOperations.deleteNode(node);
      }
    }
  }
  public static class AddDeleteMethodCallArgument_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public AddDeleteMethodCallArgument_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      if (SNodeOperations.hasRole(node, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"))) {
        SNode methodCall = SNodeOperations.cast(SNodeOperations.getParent(node), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, "jetbrains.mps.baseLanguage.structure.IMethodCall"));
        SNode prevSibling = SNodeOperations.getPrevSibling(node);
        SNode nextSibling = SNodeOperations.getNextSibling(node);
        SNodeOperations.deleteNode(node);
        MethodResolveUtil.replaceFromEditor(methodCall);
        if ((prevSibling != null)) {
          SelectionUtil.selectLabelCellAnSetCaret(editorContext, prevSibling, SelectionManager.LAST_CELL, -1);
        } else if ((nextSibling != null)) {
          SelectionUtil.selectNode(editorContext, nextSibling);
        } else {
          SelectionUtil.selectCell(editorContext, methodCall, "EMPTY_PARAMETER_LIST");
        }
      } else {
        SNodeOperations.deleteNode(node);
      }
    }
  }
  public static class AddDeleteMethodCallArgument_INSERT extends AbstractCellAction {
    /*package*/ SNode myNode;
    public AddDeleteMethodCallArgument_INSERT(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode contextNode = editorContext.getSelectedNode();
      if (SNodeOperations.hasRole(contextNode, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"))) {
        SNode newArgument = SNodeOperations.insertNextSiblingChild(contextNode, SNodeFactoryOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL, "jetbrains.mps.baseLanguage.structure.Expression"), null));
        MethodResolveUtil.replaceFromEditor(node);
        SelectionUtil.selectNode(editorContext, newArgument);
      }
    }
  }
}
