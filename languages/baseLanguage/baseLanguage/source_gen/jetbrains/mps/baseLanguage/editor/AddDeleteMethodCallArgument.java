package jetbrains.mps.baseLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.baseLanguage.search.MethodResolveUtil;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.cells.CellAction;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import java.util.Objects;

public class AddDeleteMethodCallArgument {

  /*package*/ static AbstractCellAction createAction_DELETE(final SNode node) {
    return new AbstractCellAction() {
      public void execute(EditorContext editorContext) {
        this.execute_internal(editorContext, node);
      }
      public void execute_internal(EditorContext editorContext, SNode node) {
        if (SNodeOperations.hasRole(node, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"))) {
          SNode methodCall = SNodeOperations.cast(SNodeOperations.getParent(node), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, "jetbrains.mps.baseLanguage.structure.IMethodCall"));
          SNode prevSibling = SNodeOperations.getPrevSibling(node);
          SNode nextSibling = SNodeOperations.getNextSibling(node);
          SNodeOperations.deleteNode(node);
          MethodResolveUtil.replaceFromEditor(methodCall);
          if ((nextSibling != null)) {
            SelectionUtil.selectLabelCellAnSetCaret(editorContext, nextSibling, SelectionManager.FIRST_CELL, 0);
          } else if ((prevSibling != null)) {
            SelectionUtil.selectNode(editorContext, prevSibling);
          } else {
            SelectionUtil.selectCell(editorContext, methodCall, "EMPTY_PARAMETER_LIST");
          }
        } else {
          SNodeOperations.deleteNode(node);
        }
      }

    };
  }
  /*package*/ static AbstractCellAction createAction_BACKSPACE(final SNode node) {
    return new AbstractCellAction() {
      public void execute(EditorContext editorContext) {
        this.execute_internal(editorContext, node);
      }
      public void execute_internal(EditorContext editorContext, SNode node) {
        if (SNodeOperations.hasRole(node, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"))) {
          SNode methodCall = SNodeOperations.cast(SNodeOperations.getParent(node), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, "jetbrains.mps.baseLanguage.structure.IMethodCall"));
          SNode prevSibling = SNodeOperations.getPrevSibling(node);
          SNode nextSibling = SNodeOperations.getNextSibling(node);
          SNodeOperations.deleteNode(node);
          MethodResolveUtil.replaceFromEditor(methodCall);
          if ((prevSibling != null)) {
            SelectionUtil.selectLabelCellAnSetCaret(editorContext, prevSibling, SelectionManager.LAST_CELL, -1);
          } else if ((nextSibling != null)) {
            SelectionUtil.selectNode(editorContext, nextSibling);
          } else {
            SelectionUtil.selectCell(editorContext, methodCall, "EMPTY_PARAMETER_LIST");
          }
        } else {
          SNodeOperations.deleteNode(node);
        }
      }

    };
  }
  /*package*/ static AbstractCellAction createAction_INSERT(final SNode node) {
    return new AbstractCellAction() {
      public void execute(EditorContext editorContext) {
        this.execute_internal(editorContext, node);
      }
      public void execute_internal(EditorContext editorContext, SNode node) {
        SNode contextNode = editorContext.getSelectedNode();
        List<SNode> ancestors = SNodeOperations.getNodeAncestors(contextNode, null, true);
        if (!(ListSequence.fromList(ancestors).contains(node))) {
          throw new IllegalStateException("ancestors: " + ancestors.toString());
        }
        SNode lastArgument = ListSequence.fromList(ancestors).getElement(ListSequence.fromList(ancestors).indexOf(node) - 1);
        if (SNodeOperations.hasRole(lastArgument, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"))) {
          SNode newArgument = SNodeOperations.insertNextSiblingChild(lastArgument, SNodeFactoryOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL, "jetbrains.mps.baseLanguage.structure.Expression"), null));
          MethodResolveUtil.replaceFromEditor(node);
          SelectionUtil.selectNode(editorContext, newArgument);
        }
      }

    };
  }

  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    CellAction originalDelete = editorCell.getAction(CellActionType.DELETE);
    CellAction originalBackspace = editorCell.getAction(CellActionType.BACKSPACE);

    // set actions that were actually defined 
    setDefinedCellActions(editorCell, node, context);

    // If we set a DELETE action but no BACKSPACE action, 
    // use the DELETE action for BACKSPACE as well. 
    CellAction deleteAction = editorCell.getAction(CellActionType.DELETE);
    CellAction backspaceAction = editorCell.getAction(CellActionType.BACKSPACE);
    if (deleteAction != originalDelete && backspaceAction == originalBackspace) {
      editorCell.setAction(CellActionType.BACKSPACE, deleteAction);
    }
  }

  public static void setDefinedCellActions(EditorCell editorCell, SNode node, EditorContext context) {

    // set cell actions from all imported action maps 

    // set cell actions defined directly in this action map 
    editorCell.setAction(CellActionType.DELETE, createAction_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, createAction_BACKSPACE(node));
    editorCell.setAction(CellActionType.INSERT, createAction_INSERT(node));

  }

  public static void setDefinedCellActionsOfType(EditorCell editorCell, SNode node, EditorContext context, CellActionType actionType) {

    // set cell action(s) of the given type from imported action maps 

    // set cell action of the given type defined directly in this action map 
    if (Objects.equals(actionType, CellActionType.DELETE)) {
      editorCell.setAction(actionType, createAction_DELETE(node));
    }
    if (Objects.equals(actionType, CellActionType.BACKSPACE)) {
      editorCell.setAction(actionType, createAction_BACKSPACE(node));
    }
    if (Objects.equals(actionType, CellActionType.INSERT)) {
      editorCell.setAction(actionType, createAction_INSERT(node));
    }
  }
}
