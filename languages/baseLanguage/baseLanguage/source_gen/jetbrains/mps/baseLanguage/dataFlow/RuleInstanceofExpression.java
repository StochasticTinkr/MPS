package jetbrains.mps.baseLanguage.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.framework.DataFlowConstructor;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.dataFlow.framework.Program;
import jetbrains.mps.baseLanguage.behavior.NextProgramPoint;
import jetbrains.mps.baseLanguage.behavior.IConditional__BehaviorDescriptor;
import jetbrains.mps.lang.dataFlow.framework.instructions.Instruction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class RuleInstanceofExpression implements DataFlowConstructor {
  public boolean isApplicable(SNode node) {
    SAbstractConcept concept = SNodeOperations.getConcept(node);
    SAbstractConcept applicableConcept = getApplicableConcept();
    return concept.equals(applicableConcept) || concept.isSubConceptOf(applicableConcept);
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbff03700L, "jetbrains.mps.baseLanguage.structure.InstanceOfExpression");
  }
  public void performActions(Program o, SNode node) {
    if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(node), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3ac89e1b122cd5c2L, "jetbrains.mps.baseLanguage.structure.IConditional")))) {
      return;
    }
    SNode conditional = SNodeOperations.cast(SNodeOperations.getParent(node), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3ac89e1b122cd5c2L, "jetbrains.mps.baseLanguage.structure.IConditional"));

    NextProgramPoint pp = IConditional__BehaviorDescriptor.getNextProgramPoint_id3F8BxGibk8h.invoke(conditional, node, ((boolean) true));
    if (pp != null) {
      // instanceof match branch 
      if (pp.willJump()) {
        // XXX no idea what willJump means, just copied from RuleNotEqualsExpression 
        {
          Object object = node;
          if (((Program) o).contains(object)) {
            boolean before = false;
            int position = ((Program) (o)).getEnd(object);
            Instruction instruction = new notNullInstruction(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbff03700L, 0xfbbff06218L, "leftExpression")));
            instruction.setRuleReference("r:00000000-0000-4000-0000-011c895902c2(jetbrains.mps.baseLanguage.dataFlow)/7701013275659709424");
            instruction.setSource(node);
            ((Program) (o)).insert(instruction, position, true, before);
          }
        }
      } else {
        {
          Object object = pp.getSucceedingNode();
          if (((Program) o).contains(object)) {
            boolean before = true;
            int position = ((Program) (o)).getStart(pp.getSucceedingNode());
            Instruction instruction = new notNullInstruction(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbff03700L, 0xfbbff06218L, "leftExpression")));
            instruction.setRuleReference("r:00000000-0000-4000-0000-011c895902c2(jetbrains.mps.baseLanguage.dataFlow)/7701013275659713511");
            instruction.setSource(node);
            ((Program) (o)).insert(instruction, position, true, before);
          }
        }
      }
    }
    // If instanceof didn't match, no idea whether leftExpression is nullable or not. 
  }
}
