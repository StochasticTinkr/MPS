package jetbrains.mps.baseLanguage.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.framework.DataFlowAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.lang.dataFlow.framework.DataFlowConstructor;
import java.util.Arrays;
import java.util.Collections;
import jetbrains.mps.lang.dataFlow.framework.IDataFlowBuilder;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class DataFlowAspectDescriptorImpl extends DataFlowAspectDescriptorBase {
  @NotNull
  @Override
  public Collection<DataFlowConstructor> getConstructors(String analyzerId) {
    switch (Arrays.binarySearch(stringSwitchCases_vhxjlb_a0a0a, analyzerId)) {
      case 0:
        return Arrays.asList(new DataFlowConstructor[]{new RuleAfterDotExpression(), new RuleAssertNotNull(), new RuleCreator(), new RuleEqualsExpression(), new RuleFieldReference(), new RuleMethodCall(), new RuleNotEqualsExpression(), new RuleNullLiteral(), new RuleTernaryOperation(), new RuleVariableDeclaration()});
      default:
    }
    return Collections.<DataFlowConstructor>emptyList();
  }

  @NotNull
  @Override
  public Collection<IDataFlowBuilder> getDataFlowBuilders(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = ((SAbstractConcept) concept);
      Integer preIndex = indices_vhxjlb_a0c.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          return Collections.<IDataFlowBuilder>singletonList(new AbstractUnaryNumberOperation_DataFlow());
        case 1:
          return Collections.<IDataFlowBuilder>singletonList(new AndExpression_DataFlow());
        case 2:
          return Collections.<IDataFlowBuilder>singletonList(new AnonymousClassCreator_DataFlow());
        case 3:
          return Collections.<IDataFlowBuilder>singletonList(new ArrayAccessExpression_DataFlow());
        case 4:
          return Collections.<IDataFlowBuilder>singletonList(new ArrayCreator_DataFlow());
        case 5:
          return Collections.<IDataFlowBuilder>singletonList(new ArrayCreatorWithInitializer_DataFlow());
        case 6:
          return Collections.<IDataFlowBuilder>singletonList(new ArrayLiteral_DataFlow());
        case 7:
          return Collections.<IDataFlowBuilder>singletonList(new AsExpression_DataFlow());
        case 8:
          return Collections.<IDataFlowBuilder>singletonList(new AssertStatement_DataFlow());
        case 9:
          return Collections.<IDataFlowBuilder>singletonList(new AssignmentExpression_DataFlow());
        case 10:
          return Collections.<IDataFlowBuilder>singletonList(new BaseAssignmentExpression_DataFlow());
        case 11:
          return Collections.<IDataFlowBuilder>singletonList(new BaseMethodCall_DataFlow());
        case 12:
          return Collections.<IDataFlowBuilder>singletonList(new BaseMethodDeclaration_DataFlow());
        case 13:
          return Collections.<IDataFlowBuilder>singletonList(new BinaryOperation_DataFlow());
        case 14:
          return Collections.<IDataFlowBuilder>singletonList(new BitwiseNotExpression_DataFlow());
        case 15:
          return Collections.<IDataFlowBuilder>singletonList(new BlockStatement_DataFlow());
        case 16:
          return Collections.<IDataFlowBuilder>singletonList(new BreakStatement_DataFlow());
        case 17:
          return Collections.<IDataFlowBuilder>singletonList(new CastExpression_DataFlow());
        case 18:
          return Collections.<IDataFlowBuilder>singletonList(new CatchClause_DataFlow());
        case 19:
          return Collections.<IDataFlowBuilder>singletonList(new Closure_DataFlow());
        case 20:
          return Collections.<IDataFlowBuilder>singletonList(new CommentedStatementsBlock_DataFlow());
        case 21:
          return Collections.<IDataFlowBuilder>singletonList(new ConceptFunction_DataFlow());
        case 22:
          return Collections.<IDataFlowBuilder>singletonList(new ContinueStatement_DataFlow());
        case 23:
          return Collections.<IDataFlowBuilder>singletonList(new DimensionExpression_DataFlow());
        case 24:
          return Collections.<IDataFlowBuilder>singletonList(new DoWhileStatement_DataFlow());
        case 25:
          return Collections.<IDataFlowBuilder>singletonList(new DotExpression_DataFlow());
        case 26:
          return Collections.<IDataFlowBuilder>singletonList(new ElsifClause_DataFlow());
        case 27:
          return Collections.<IDataFlowBuilder>singletonList(new Expression_DataFlow());
        case 28:
          return Collections.<IDataFlowBuilder>singletonList(new ExpressionStatement_DataFlow());
        case 29:
          return Collections.<IDataFlowBuilder>singletonList(new FieldReferenceOperation_DataFlow());
        case 30:
          return Collections.<IDataFlowBuilder>singletonList(new ForStatement_DataFlow());
        case 31:
          return Collections.<IDataFlowBuilder>singletonList(new ForeachStatement_DataFlow());
        case 32:
          return Collections.<IDataFlowBuilder>singletonList(new GenericNewExpression_DataFlow());
        case 33:
          return Collections.<IDataFlowBuilder>singletonList(new IMethodCall_DataFlow());
        case 34:
          return Collections.<IDataFlowBuilder>singletonList(new IfStatement_DataFlow());
        case 35:
          return Collections.<IDataFlowBuilder>singletonList(new InstanceInitializer_DataFlow());
        case 36:
          return Collections.<IDataFlowBuilder>singletonList(new InstanceMethodCallOperation_DataFlow());
        case 37:
          return Collections.<IDataFlowBuilder>singletonList(new InstanceOfExpression_DataFlow());
        case 38:
          return Collections.<IDataFlowBuilder>singletonList(new LocalVariableDeclaration_DataFlow());
        case 39:
          return Collections.<IDataFlowBuilder>singletonList(new LocalVariableDeclarationStatement_DataFlow());
        case 40:
          return Collections.<IDataFlowBuilder>singletonList(new NestedNewExpression_DataFlow());
        case 41:
          return Collections.<IDataFlowBuilder>singletonList(new NotExpression_DataFlow());
        case 42:
          return Collections.<IDataFlowBuilder>singletonList(new OrExpression_DataFlow());
        case 43:
          return Collections.<IDataFlowBuilder>singletonList(new ParameterDeclaration_DataFlow());
        case 44:
          return Collections.<IDataFlowBuilder>singletonList(new ParenthesizedExpression_DataFlow());
        case 45:
          return Collections.<IDataFlowBuilder>singletonList(new PostfixDecrementExpression_DataFlow());
        case 46:
          return Collections.<IDataFlowBuilder>singletonList(new PostfixIncrementExpression_DataFlow());
        case 47:
          return Collections.<IDataFlowBuilder>singletonList(new PrefixDecrementExpression_DataFlow());
        case 48:
          return Collections.<IDataFlowBuilder>singletonList(new PrefixIncrementExpression_DataFlow());
        case 49:
          return Collections.<IDataFlowBuilder>singletonList(new RemarkStatement_DataFlow());
        case 50:
          return Collections.<IDataFlowBuilder>singletonList(new ReturnStatement_DataFlow());
        case 51:
          return Collections.<IDataFlowBuilder>singletonList(new StatementList_DataFlow());
        case 52:
          return Collections.<IDataFlowBuilder>singletonList(new StaticInitializer_DataFlow());
        case 53:
          return Collections.<IDataFlowBuilder>singletonList(new StaticMethodCall_DataFlow());
        case 54:
          return Collections.<IDataFlowBuilder>singletonList(new StubStatementList_DataFlow());
        case 55:
          return Collections.<IDataFlowBuilder>singletonList(new SubstringExpression_DataFlow());
        case 56:
          return Collections.<IDataFlowBuilder>singletonList(new SwitchCase_DataFlow());
        case 57:
          return Collections.<IDataFlowBuilder>singletonList(new SwitchStatement_DataFlow());
        case 58:
          return Collections.<IDataFlowBuilder>singletonList(new SynchronizedStatement_DataFlow());
        case 59:
          return Collections.<IDataFlowBuilder>singletonList(new TernaryOperatorExpression_DataFlow());
        case 60:
          return Collections.<IDataFlowBuilder>singletonList(new ThrowStatement_DataFlow());
        case 61:
          return Collections.<IDataFlowBuilder>singletonList(new TryCatchStatement_DataFlow());
        case 62:
          return Collections.<IDataFlowBuilder>singletonList(new TryStatement_DataFlow());
        case 63:
          return Collections.<IDataFlowBuilder>singletonList(new VariableDeclaration_DataFlow());
        case 64:
          return Collections.<IDataFlowBuilder>singletonList(new VariableReference_DataFlow());
        case 65:
          return Collections.<IDataFlowBuilder>singletonList(new WhileStatement_DataFlow());
        default:
          // default 
      }
    }
    return Collections.<IDataFlowBuilder>emptyList();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_vhxjlb_a0c = buildConceptIndices(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x120a4c1f269L, "jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfb7c3070eeL, "jetbrains.mps.baseLanguage.structure.AndExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1133e3b449aL, "jetbrains.mps.baseLanguage.structure.AnonymousClassCreator"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11126b40c25L, "jetbrains.mps.baseLanguage.structure.ArrayAccessExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x113e4952f12L, "jetbrains.mps.baseLanguage.structure.ArrayCreator"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cd01b77ddL, "jetbrains.mps.baseLanguage.structure.ArrayCreatorWithInitializer"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a770dc0dL, "jetbrains.mps.baseLanguage.structure.ArrayLiteral"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d00538bdfL, "jetbrains.mps.baseLanguage.structure.AsExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10e50ecba3dL, "jetbrains.mps.baseLanguage.structure.AssertStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e96L, "jetbrains.mps.baseLanguage.structure.AssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11b0d00332cL, "jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c78301acL, "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL, "jetbrains.mps.baseLanguage.structure.BinaryOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d6d026f5fL, "jetbrains.mps.baseLanguage.structure.BitwiseNotExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc092b6b77L, "jetbrains.mps.baseLanguage.structure.BlockStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbe39a867fL, "jetbrains.mps.baseLanguage.structure.BreakStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940dabe4aL, "jetbrains.mps.baseLanguage.structure.CastExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f39a56e2fL, "jetbrains.mps.baseLanguage.structure.CatchClause"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c63f4f3f3L, "jetbrains.mps.baseLanguage.structure.Closure"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1121e2102fdL, "jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L, "jetbrains.mps.baseLanguage.structure.ConceptFunction"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbf3043726L, "jetbrains.mps.baseLanguage.structure.ContinueStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x113e4b2dfdaL, "jetbrains.mps.baseLanguage.structure.DimensionExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11232674988L, "jetbrains.mps.baseLanguage.structure.DoWhileStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, "jetbrains.mps.baseLanguage.structure.DotExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118ceceb41aL, "jetbrains.mps.baseLanguage.structure.ElsifClause"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL, "jetbrains.mps.baseLanguage.structure.Expression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, "jetbrains.mps.baseLanguage.structure.ExpressionStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b483d77aL, "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a698082feL, "jetbrains.mps.baseLanguage.structure.ForStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a6933ce33L, "jetbrains.mps.baseLanguage.structure.ForeachStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ab8473cc5L, "jetbrains.mps.baseLanguage.structure.GenericNewExpression"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, "jetbrains.mps.baseLanguage.structure.IMethodCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, "jetbrains.mps.baseLanguage.structure.IfStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118f0b909f7L, "jetbrains.mps.baseLanguage.structure.InstanceInitializer"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbff03700L, "jetbrains.mps.baseLanguage.structure.InstanceOfExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x650f9fedfcb5b664L, "jetbrains.mps.baseLanguage.structure.NestedNewExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbcf6bd10dL, "jetbrains.mps.baseLanguage.structure.NotExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfb8255689fL, "jetbrains.mps.baseLanguage.structure.OrExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfb4ed32b7fL, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11aded05fe6L, "jetbrains.mps.baseLanguage.structure.PostfixDecrementExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11adecdb4f0L, "jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x120a472f0e8L, "jetbrains.mps.baseLanguage.structure.PrefixDecrementExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x120a46df580L, "jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1101757c8faL, "jetbrains.mps.baseLanguage.structure.RemarkStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7feL, "jetbrains.mps.baseLanguage.structure.ReturnStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, "jetbrains.mps.baseLanguage.structure.StatementList"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11c7538039dL, "jetbrains.mps.baseLanguage.structure.StaticInitializer"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbebabf09L, "jetbrains.mps.baseLanguage.structure.StaticMethodCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x4975dc2bdcfa0c49L, "jetbrains.mps.baseLanguage.structure.StubStatementList"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47df21f3L, "jetbrains.mps.baseLanguage.structure.SubstringExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02cdd1bL, "jetbrains.mps.baseLanguage.structure.SwitchCase"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02a8c6aL, "jetbrains.mps.baseLanguage.structure.SwitchStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1106df1d8d8L, "jetbrains.mps.baseLanguage.structure.SynchronizedStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef01239c9L, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f3ee082d8L, "jetbrains.mps.baseLanguage.structure.ThrowStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f383e6771L, "jetbrains.mps.baseLanguage.structure.TryCatchStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cacebf556L, "jetbrains.mps.baseLanguage.structure.TryStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, "jetbrains.mps.baseLanguage.structure.VariableDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, "jetbrains.mps.baseLanguage.structure.VariableReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfaa4bf0f2fL, "jetbrains.mps.baseLanguage.structure.WhileStatement"));
  private static String[] stringSwitchCases_vhxjlb_a0a0a = new String[]{"jetbrains.mps.baseLanguage.dataFlow.Nullable"};
}
