package jetbrains.mps.baseLanguage.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myClassConcept__BehaviorDescriptor = new ClassConcept__BehaviorDescriptor();
  private final BHDescriptor myFieldDeclaration__BehaviorDescriptor = new FieldDeclaration__BehaviorDescriptor();
  private final BHDescriptor myVariableDeclaration__BehaviorDescriptor = new VariableDeclaration__BehaviorDescriptor();
  private final BHDescriptor myType__BehaviorDescriptor = new Type__BehaviorDescriptor();
  private final BHDescriptor myExpression__BehaviorDescriptor = new Expression__BehaviorDescriptor();
  private final BHDescriptor myParameterDeclaration__BehaviorDescriptor = new ParameterDeclaration__BehaviorDescriptor();
  private final BHDescriptor myAssignmentExpression__BehaviorDescriptor = new AssignmentExpression__BehaviorDescriptor();
  private final BHDescriptor myVariableReference__BehaviorDescriptor = new VariableReference__BehaviorDescriptor();
  private final BHDescriptor myBaseMethodCall__BehaviorDescriptor = new BaseMethodCall__BehaviorDescriptor();
  private final BHDescriptor myBaseMethodDeclaration__BehaviorDescriptor = new BaseMethodDeclaration__BehaviorDescriptor();
  private final BHDescriptor myStatementList__BehaviorDescriptor = new StatementList__BehaviorDescriptor();
  private final BHDescriptor myBooleanConstant__BehaviorDescriptor = new BooleanConstant__BehaviorDescriptor();
  private final BHDescriptor myConstructorDeclaration__BehaviorDescriptor = new ConstructorDeclaration__BehaviorDescriptor();
  private final BHDescriptor myEqualsExpression__BehaviorDescriptor = new EqualsExpression__BehaviorDescriptor();
  private final BHDescriptor myExpressionStatement__BehaviorDescriptor = new ExpressionStatement__BehaviorDescriptor();
  private final BHDescriptor myStatement__BehaviorDescriptor = new Statement__BehaviorDescriptor();
  private final BHDescriptor myIfStatement__BehaviorDescriptor = new IfStatement__BehaviorDescriptor();
  private final BHDescriptor myInstanceMethodDeclaration__BehaviorDescriptor = new InstanceMethodDeclaration__BehaviorDescriptor();
  private final BHDescriptor myIntegerConstant__BehaviorDescriptor = new IntegerConstant__BehaviorDescriptor();
  private final BHDescriptor myLocalVariableDeclaration__BehaviorDescriptor = new LocalVariableDeclaration__BehaviorDescriptor();
  private final BHDescriptor myLocalVariableDeclarationStatement__BehaviorDescriptor = new LocalVariableDeclarationStatement__BehaviorDescriptor();
  private final BHDescriptor myLocalVariableReference__BehaviorDescriptor = new LocalVariableReference__BehaviorDescriptor();
  private final BHDescriptor myLongType__BehaviorDescriptor = new LongType__BehaviorDescriptor();
  private final BHDescriptor myMinusExpression__BehaviorDescriptor = new MinusExpression__BehaviorDescriptor();
  private final BHDescriptor myParameterReference__BehaviorDescriptor = new ParameterReference__BehaviorDescriptor();
  private final BHDescriptor myPlusExpression__BehaviorDescriptor = new PlusExpression__BehaviorDescriptor();
  private final BHDescriptor myReturnStatement__BehaviorDescriptor = new ReturnStatement__BehaviorDescriptor();
  private final BHDescriptor myVoidType__BehaviorDescriptor = new VoidType__BehaviorDescriptor();
  private final BHDescriptor myStaticFieldDeclaration__BehaviorDescriptor = new StaticFieldDeclaration__BehaviorDescriptor();
  private final BHDescriptor myThisExpression__BehaviorDescriptor = new ThisExpression__BehaviorDescriptor();
  private final BHDescriptor mySuperConstructorInvocation__BehaviorDescriptor = new SuperConstructorInvocation__BehaviorDescriptor();
  private final BHDescriptor myStringLiteral__BehaviorDescriptor = new StringLiteral__BehaviorDescriptor();
  private final BHDescriptor myStaticFieldReference__BehaviorDescriptor = new StaticFieldReference__BehaviorDescriptor();
  private final BHDescriptor myShortType__BehaviorDescriptor = new ShortType__BehaviorDescriptor();
  private final BHDescriptor myNullLiteral__BehaviorDescriptor = new NullLiteral__BehaviorDescriptor();
  private final BHDescriptor myIntegerType__BehaviorDescriptor = new IntegerType__BehaviorDescriptor();
  private final BHDescriptor myFloatType__BehaviorDescriptor = new FloatType__BehaviorDescriptor();
  private final BHDescriptor myDoubleType__BehaviorDescriptor = new DoubleType__BehaviorDescriptor();
  private final BHDescriptor myCharType__BehaviorDescriptor = new CharType__BehaviorDescriptor();
  private final BHDescriptor myByteType__BehaviorDescriptor = new ByteType__BehaviorDescriptor();
  private final BHDescriptor myBooleanType__BehaviorDescriptor = new BooleanType__BehaviorDescriptor();
  private final BHDescriptor myArrayType__BehaviorDescriptor = new ArrayType__BehaviorDescriptor();
  private final BHDescriptor myCastExpression__BehaviorDescriptor = new CastExpression__BehaviorDescriptor();
  private final BHDescriptor mySuperMethodCall__BehaviorDescriptor = new SuperMethodCall__BehaviorDescriptor();
  private final BHDescriptor myNotEqualsExpression__BehaviorDescriptor = new NotEqualsExpression__BehaviorDescriptor();
  private final BHDescriptor myWhileStatement__BehaviorDescriptor = new WhileStatement__BehaviorDescriptor();
  private final BHDescriptor myParenthesizedExpression__BehaviorDescriptor = new ParenthesizedExpression__BehaviorDescriptor();
  private final BHDescriptor myAndExpression__BehaviorDescriptor = new AndExpression__BehaviorDescriptor();
  private final BHDescriptor myOrExpression__BehaviorDescriptor = new OrExpression__BehaviorDescriptor();
  private final BHDescriptor myStaticMethodCall__BehaviorDescriptor = new StaticMethodCall__BehaviorDescriptor();
  private final BHDescriptor myStaticMethodDeclaration__BehaviorDescriptor = new StaticMethodDeclaration__BehaviorDescriptor();
  private final BHDescriptor myGreaterThanExpression__BehaviorDescriptor = new GreaterThanExpression__BehaviorDescriptor();
  private final BHDescriptor myLessThanExpression__BehaviorDescriptor = new LessThanExpression__BehaviorDescriptor();
  private final BHDescriptor myNotExpression__BehaviorDescriptor = new NotExpression__BehaviorDescriptor();
  private final BHDescriptor myBinaryOperation__BehaviorDescriptor = new BinaryOperation__BehaviorDescriptor();
  private final BHDescriptor myBreakStatement__BehaviorDescriptor = new BreakStatement__BehaviorDescriptor();
  private final BHDescriptor myContinueStatement__BehaviorDescriptor = new ContinueStatement__BehaviorDescriptor();
  private final BHDescriptor myBlockStatement__BehaviorDescriptor = new BlockStatement__BehaviorDescriptor();
  private final BHDescriptor myEnumClass__BehaviorDescriptor = new EnumClass__BehaviorDescriptor();
  private final BHDescriptor myEnumConstantDeclaration__BehaviorDescriptor = new EnumConstantDeclaration__BehaviorDescriptor();
  private final BHDescriptor myEnumConstantReference__BehaviorDescriptor = new EnumConstantReference__BehaviorDescriptor();
  private final BHDescriptor myMulExpression__BehaviorDescriptor = new MulExpression__BehaviorDescriptor();
  private final BHDescriptor myDivExpression__BehaviorDescriptor = new DivExpression__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter__BehaviorDescriptor = new ConceptFunctionParameter__BehaviorDescriptor();
  private final BHDescriptor myClassifier__BehaviorDescriptor = new Classifier__BehaviorDescriptor();
  private final BHDescriptor myClassifierType__BehaviorDescriptor = new ClassifierType__BehaviorDescriptor();
  private final BHDescriptor myInterface__BehaviorDescriptor = new Interface__BehaviorDescriptor();
  private final BHDescriptor myTypeVariableDeclaration__BehaviorDescriptor = new TypeVariableDeclaration__BehaviorDescriptor();
  private final BHDescriptor myGenericDeclaration__BehaviorDescriptor = new GenericDeclaration__BehaviorDescriptor();
  private final BHDescriptor myTypeVariableReference__BehaviorDescriptor = new TypeVariableReference__BehaviorDescriptor();
  private final BHDescriptor myFloatingPointConstant__BehaviorDescriptor = new FloatingPointConstant__BehaviorDescriptor();
  private final BHDescriptor myClassifierClassExpression__BehaviorDescriptor = new ClassifierClassExpression__BehaviorDescriptor();
  private final BHDescriptor myConceptFunction__BehaviorDescriptor = new ConceptFunction__BehaviorDescriptor();
  private final BHDescriptor myForeachStatement__BehaviorDescriptor = new ForeachStatement__BehaviorDescriptor();
  private final BHDescriptor myAbstractForStatement__BehaviorDescriptor = new AbstractForStatement__BehaviorDescriptor();
  private final BHDescriptor myForStatement__BehaviorDescriptor = new ForStatement__BehaviorDescriptor();
  private final BHDescriptor myGenericNewExpression__BehaviorDescriptor = new GenericNewExpression__BehaviorDescriptor();
  private final BHDescriptor myClosure__BehaviorDescriptor = new Closure__BehaviorDescriptor();
  private final BHDescriptor myClosureParameterReference__BehaviorDescriptor = new ClosureParameterReference__BehaviorDescriptor();
  private final BHDescriptor myGreaterThanOrEqualsExpression__BehaviorDescriptor = new GreaterThanOrEqualsExpression__BehaviorDescriptor();
  private final BHDescriptor myRemExpression__BehaviorDescriptor = new RemExpression__BehaviorDescriptor();
  private final BHDescriptor myLessThanOrEqualsExpression__BehaviorDescriptor = new LessThanOrEqualsExpression__BehaviorDescriptor();
  private final BHDescriptor myTryStatement__BehaviorDescriptor = new TryStatement__BehaviorDescriptor();
  private final BHDescriptor myAbstractLoopStatement__BehaviorDescriptor = new AbstractLoopStatement__BehaviorDescriptor();
  private final BHDescriptor myTernaryOperatorExpression__BehaviorDescriptor = new TernaryOperatorExpression__BehaviorDescriptor();
  private final BHDescriptor mySwitchStatement__BehaviorDescriptor = new SwitchStatement__BehaviorDescriptor();
  private final BHDescriptor mySwitchCase__BehaviorDescriptor = new SwitchCase__BehaviorDescriptor();
  private final BHDescriptor myPrimitiveType__BehaviorDescriptor = new PrimitiveType__BehaviorDescriptor();
  private final BHDescriptor myTryCatchStatement__BehaviorDescriptor = new TryCatchStatement__BehaviorDescriptor();
  private final BHDescriptor myCatchClause__BehaviorDescriptor = new CatchClause__BehaviorDescriptor();
  private final BHDescriptor myThrowStatement__BehaviorDescriptor = new ThrowStatement__BehaviorDescriptor();
  private final BHDescriptor myRemarkStatement__BehaviorDescriptor = new RemarkStatement__BehaviorDescriptor();
  private final BHDescriptor mySynchronizedStatement__BehaviorDescriptor = new SynchronizedStatement__BehaviorDescriptor();
  private final BHDescriptor myAnonymousClass__BehaviorDescriptor = new AnonymousClass__BehaviorDescriptor();
  private final BHDescriptor myWildCardType__BehaviorDescriptor = new WildCardType__BehaviorDescriptor();
  private final BHDescriptor myLowerBoundType__BehaviorDescriptor = new LowerBoundType__BehaviorDescriptor();
  private final BHDescriptor myUpperBoundType__BehaviorDescriptor = new UpperBoundType__BehaviorDescriptor();
  private final BHDescriptor myLocalStaticFieldReference__BehaviorDescriptor = new LocalStaticFieldReference__BehaviorDescriptor();
  private final BHDescriptor myLocalStaticMethodCall__BehaviorDescriptor = new LocalStaticMethodCall__BehaviorDescriptor();
  private final BHDescriptor myArrayAccessExpression__BehaviorDescriptor = new ArrayAccessExpression__BehaviorDescriptor();
  private final BHDescriptor myCommentedStatementsBlock__BehaviorDescriptor = new CommentedStatementsBlock__BehaviorDescriptor();
  private final BHDescriptor myDoWhileStatement__BehaviorDescriptor = new DoWhileStatement__BehaviorDescriptor();
  private final BHDescriptor myClassifierMember__BehaviorDescriptor = new ClassifierMember__BehaviorDescriptor();
  private final BHDescriptor myIVisible__BehaviorDescriptor = new IVisible__BehaviorDescriptor();
  private final BHDescriptor myThisConstructorInvocation__BehaviorDescriptor = new ThisConstructorInvocation__BehaviorDescriptor();
  private final BHDescriptor myHexIntegerLiteral__BehaviorDescriptor = new HexIntegerLiteral__BehaviorDescriptor();
  private final BHDescriptor myIntegerLiteral__BehaviorDescriptor = new IntegerLiteral__BehaviorDescriptor();
  private final BHDescriptor myAnnotation__BehaviorDescriptor = new Annotation__BehaviorDescriptor();
  private final BHDescriptor myAnnotationMethodDeclaration__BehaviorDescriptor = new AnnotationMethodDeclaration__BehaviorDescriptor();
  private final BHDescriptor myAnnotationInstance__BehaviorDescriptor = new AnnotationInstance__BehaviorDescriptor();
  private final BHDescriptor myHasAnnotation__BehaviorDescriptor = new HasAnnotation__BehaviorDescriptor();
  private final BHDescriptor myAnnotationInstanceValue__BehaviorDescriptor = new AnnotationInstanceValue__BehaviorDescriptor();
  private final BHDescriptor myIMemberContainer__BehaviorDescriptor = new IMemberContainer__BehaviorDescriptor();
  private final BHDescriptor myDotExpression__BehaviorDescriptor = new DotExpression__BehaviorDescriptor();
  private final BHDescriptor myIOperation__BehaviorDescriptor = new IOperation__BehaviorDescriptor();
  private final BHDescriptor myFieldReferenceOperation__BehaviorDescriptor = new FieldReferenceOperation__BehaviorDescriptor();
  private final BHDescriptor myIStatementListContainer__BehaviorDescriptor = new IStatementListContainer__BehaviorDescriptor();
  private final BHDescriptor myCharConstant__BehaviorDescriptor = new CharConstant__BehaviorDescriptor();
  private final BHDescriptor myTypeDerivable__BehaviorDescriptor = new TypeDerivable__BehaviorDescriptor();
  private final BHDescriptor myProperty__BehaviorDescriptor = new Property__BehaviorDescriptor();
  private final BHDescriptor myPropertyImplementation__BehaviorDescriptor = new PropertyImplementation__BehaviorDescriptor();
  private final BHDescriptor myDefaultPropertyImplementation__BehaviorDescriptor = new DefaultPropertyImplementation__BehaviorDescriptor();
  private final BHDescriptor myPropertyReference__BehaviorDescriptor = new PropertyReference__BehaviorDescriptor();
  private final BHDescriptor myCustomPropertyImplementation__BehaviorDescriptor = new CustomPropertyImplementation__BehaviorDescriptor();
  private final BHDescriptor myGetAccessor__BehaviorDescriptor = new GetAccessor__BehaviorDescriptor();
  private final BHDescriptor mySetAccessor__BehaviorDescriptor = new SetAccessor__BehaviorDescriptor();
  private final BHDescriptor myDefaultSetAccessor__BehaviorDescriptor = new DefaultSetAccessor__BehaviorDescriptor();
  private final BHDescriptor myInstanceMethodCallOperation__BehaviorDescriptor = new InstanceMethodCallOperation__BehaviorDescriptor();
  private final BHDescriptor myIMethodCall__BehaviorDescriptor = new IMethodCall__BehaviorDescriptor();
  private final BHDescriptor myIInternalType__BehaviorDescriptor = new IInternalType__BehaviorDescriptor();
  private final BHDescriptor myElsifClause__BehaviorDescriptor = new ElsifClause__BehaviorDescriptor();
  private final BHDescriptor myInstanceInitializer__BehaviorDescriptor = new InstanceInitializer__BehaviorDescriptor();
  private final BHDescriptor myArrayLengthOperation__BehaviorDescriptor = new ArrayLengthOperation__BehaviorDescriptor();
  private final BHDescriptor myIValidIdentifier__BehaviorDescriptor = new IValidIdentifier__BehaviorDescriptor();
  private final BHDescriptor myClassCreator__BehaviorDescriptor = new ClassCreator__BehaviorDescriptor();
  private final BHDescriptor myPostfixIncrementExpression__BehaviorDescriptor = new PostfixIncrementExpression__BehaviorDescriptor();
  private final BHDescriptor myPostfixDecrementExpression__BehaviorDescriptor = new PostfixDecrementExpression__BehaviorDescriptor();
  private final BHDescriptor myBaseAssignmentExpression__BehaviorDescriptor = new BaseAssignmentExpression__BehaviorDescriptor();
  private final BHDescriptor myVariableArityType__BehaviorDescriptor = new VariableArityType__BehaviorDescriptor();
  private final BHDescriptor myIExtractMethodAvailable__BehaviorDescriptor = new IExtractMethodAvailable__BehaviorDescriptor();
  private final BHDescriptor myStaticInitializer__BehaviorDescriptor = new StaticInitializer__BehaviorDescriptor();
  private final BHDescriptor myIStaticContainerForMethods__BehaviorDescriptor = new IStaticContainerForMethods__BehaviorDescriptor();
  private final BHDescriptor myIVariableAssignment__BehaviorDescriptor = new IVariableAssignment__BehaviorDescriptor();
  private final BHDescriptor myUsingStatement__BehaviorDescriptor = new UsingStatement__BehaviorDescriptor();
  private final BHDescriptor myBitwiseAndExpression__BehaviorDescriptor = new BitwiseAndExpression__BehaviorDescriptor();
  private final BHDescriptor myBitwiseOrExpression__BehaviorDescriptor = new BitwiseOrExpression__BehaviorDescriptor();
  private final BHDescriptor myBitwiseXorExpression__BehaviorDescriptor = new BitwiseXorExpression__BehaviorDescriptor();
  private final BHDescriptor myIBLDeprecatable__BehaviorDescriptor = new IBLDeprecatable__BehaviorDescriptor();
  private final BHDescriptor myStringType__BehaviorDescriptor = new StringType__BehaviorDescriptor();
  private final BHDescriptor myNPENotEqualsExpression__BehaviorDescriptor = new NPENotEqualsExpression__BehaviorDescriptor();
  private final BHDescriptor myNPEEqualsExpression__BehaviorDescriptor = new NPEEqualsExpression__BehaviorDescriptor();
  private final BHDescriptor myBaseStringOperation__BehaviorDescriptor = new BaseStringOperation__BehaviorDescriptor();
  private final BHDescriptor myIParameter__BehaviorDescriptor = new IParameter__BehaviorDescriptor();
  private final BHDescriptor myShiftLeftExpression__BehaviorDescriptor = new ShiftLeftExpression__BehaviorDescriptor();
  private final BHDescriptor myShiftRightExpression__BehaviorDescriptor = new ShiftRightExpression__BehaviorDescriptor();
  private final BHDescriptor myCommentedStatement__BehaviorDescriptor = new CommentedStatement__BehaviorDescriptor();
  private final BHDescriptor myTypeAnnotable__BehaviorDescriptor = new TypeAnnotable__BehaviorDescriptor();
  private final BHDescriptor myIContainsStatementList__BehaviorDescriptor = new IContainsStatementList__BehaviorDescriptor();
  private final BHDescriptor myILocalVariableElement__BehaviorDescriptor = new ILocalVariableElement__BehaviorDescriptor();
  private final BHDescriptor myILocalVariableElementList__BehaviorDescriptor = new ILocalVariableElementList__BehaviorDescriptor();
  private final BHDescriptor myIMethodLike__BehaviorDescriptor = new IMethodLike__BehaviorDescriptor();
  private final BHDescriptor myPrefixIncrementExpression__BehaviorDescriptor = new PrefixIncrementExpression__BehaviorDescriptor();
  private final BHDescriptor myPrefixDecrementExpression__BehaviorDescriptor = new PrefixDecrementExpression__BehaviorDescriptor();
  private final BHDescriptor myAbstractUnaryNumberOperation__BehaviorDescriptor = new AbstractUnaryNumberOperation__BehaviorDescriptor();
  private final BHDescriptor myConstructorInvocationStatement__BehaviorDescriptor = new ConstructorInvocationStatement__BehaviorDescriptor();
  private final BHDescriptor myShiftRightUnsignedExpression__BehaviorDescriptor = new ShiftRightUnsignedExpression__BehaviorDescriptor();
  private final BHDescriptor myIVariableReference__BehaviorDescriptor = new IVariableReference__BehaviorDescriptor();
  private final BHDescriptor myIIncompleteParen__BehaviorDescriptor = new IIncompleteParen__BehaviorDescriptor();
  private final BHDescriptor myPlaceholderMember__BehaviorDescriptor = new PlaceholderMember__BehaviorDescriptor();
  private final BHDescriptor myIBinaryLike__BehaviorDescriptor = new IBinaryLike__BehaviorDescriptor();
  private final BHDescriptor myUnknownLocalCall__BehaviorDescriptor = new UnknownLocalCall__BehaviorDescriptor();
  private final BHDescriptor myUnknownDotCall__BehaviorDescriptor = new UnknownDotCall__BehaviorDescriptor();
  private final BHDescriptor myPropertyValueReference__BehaviorDescriptor = new PropertyValueReference__BehaviorDescriptor();
  private final BHDescriptor myLocalInstanceMethodCall__BehaviorDescriptor = new LocalInstanceMethodCall__BehaviorDescriptor();
  private final BHDescriptor myILocalDeclaration__BehaviorDescriptor = new ILocalDeclaration__BehaviorDescriptor();
  private final BHDescriptor myILocalReference__BehaviorDescriptor = new ILocalReference__BehaviorDescriptor();
  private final BHDescriptor myUnknownNew__BehaviorDescriptor = new UnknownNew__BehaviorDescriptor();
  private final BHDescriptor myIncompleteMemberDeclaration__BehaviorDescriptor = new IncompleteMemberDeclaration__BehaviorDescriptor();
  private final BHDescriptor myITryCatchStatement__BehaviorDescriptor = new ITryCatchStatement__BehaviorDescriptor();
  private final BHDescriptor myIGenericType__BehaviorDescriptor = new IGenericType__BehaviorDescriptor();
  private final BHDescriptor myIConditional__BehaviorDescriptor = new IConditional__BehaviorDescriptor();
  private final BHDescriptor myLongLiteral__BehaviorDescriptor = new LongLiteral__BehaviorDescriptor();
  private final BHDescriptor myCustomSetterPropertyImplementation__BehaviorDescriptor = new CustomSetterPropertyImplementation__BehaviorDescriptor();
  private final BHDescriptor myIWillBeClassifier__BehaviorDescriptor = new IWillBeClassifier__BehaviorDescriptor();
  private final BHDescriptor myFloatingPointFloatConstant__BehaviorDescriptor = new FloatingPointFloatConstant__BehaviorDescriptor();
  private final BHDescriptor myLocalPropertyReference__BehaviorDescriptor = new LocalPropertyReference__BehaviorDescriptor();
  private final BHDescriptor myJavaImports__BehaviorDescriptor = new JavaImports__BehaviorDescriptor();
  private final BHDescriptor mySingleLineComment__BehaviorDescriptor = new SingleLineComment__BehaviorDescriptor();
  private final BHDescriptor myCommentPart__BehaviorDescriptor = new CommentPart__BehaviorDescriptor();
  private final BHDescriptor myTextCommentPart__BehaviorDescriptor = new TextCommentPart__BehaviorDescriptor();
  private final BHDescriptor myTokens__BehaviorDescriptor = new Tokens__BehaviorDescriptor();
  private final BHDescriptor myIClassifier__BehaviorDescriptor = new IClassifier__BehaviorDescriptor();
  private final BHDescriptor myIClassifierMember__BehaviorDescriptor = new IClassifierMember__BehaviorDescriptor();
  private final BHDescriptor myIClassifierType__BehaviorDescriptor = new IClassifierType__BehaviorDescriptor();
  private final BHDescriptor myLocalInstanceFieldReference__BehaviorDescriptor = new LocalInstanceFieldReference__BehaviorDescriptor();
  private final BHDescriptor myLocalMethodCall__BehaviorDescriptor = new LocalMethodCall__BehaviorDescriptor();
  private final BHDescriptor myUnaryMinus__BehaviorDescriptor = new UnaryMinus__BehaviorDescriptor();
  private final BHDescriptor myIYetUnresolved__BehaviorDescriptor = new IYetUnresolved__BehaviorDescriptor();
  private final BHDescriptor myITypeApplicable__BehaviorDescriptor = new ITypeApplicable__BehaviorDescriptor();
  private final BHDescriptor myUnknownNameRef__BehaviorDescriptor = new UnknownNameRef__BehaviorDescriptor();
  private final BHDescriptor myUnknownConsCall__BehaviorDescriptor = new UnknownConsCall__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0wh.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myAbstractForStatement__BehaviorDescriptor;
          }
          break;
        case 1:
          if (true) {
            return myAbstractLoopStatement__BehaviorDescriptor;
          }
          break;
        case 2:
          if (true) {
            return myAbstractUnaryNumberOperation__BehaviorDescriptor;
          }
          break;
        case 3:
          if (true) {
            return myAndExpression__BehaviorDescriptor;
          }
          break;
        case 4:
          if (true) {
            return myAnnotation__BehaviorDescriptor;
          }
          break;
        case 5:
          if (true) {
            return myAnnotationInstance__BehaviorDescriptor;
          }
          break;
        case 6:
          if (true) {
            return myAnnotationInstanceValue__BehaviorDescriptor;
          }
          break;
        case 7:
          if (true) {
            return myAnnotationMethodDeclaration__BehaviorDescriptor;
          }
          break;
        case 8:
          if (true) {
            return myAnonymousClass__BehaviorDescriptor;
          }
          break;
        case 9:
          if (true) {
            return myArrayAccessExpression__BehaviorDescriptor;
          }
          break;
        case 10:
          if (true) {
            return myArrayLengthOperation__BehaviorDescriptor;
          }
          break;
        case 11:
          if (true) {
            return myArrayType__BehaviorDescriptor;
          }
          break;
        case 12:
          if (true) {
            return myAssignmentExpression__BehaviorDescriptor;
          }
          break;
        case 13:
          if (true) {
            return myBaseAssignmentExpression__BehaviorDescriptor;
          }
          break;
        case 14:
          if (true) {
            return myBaseMethodCall__BehaviorDescriptor;
          }
          break;
        case 15:
          if (true) {
            return myBaseMethodDeclaration__BehaviorDescriptor;
          }
          break;
        case 16:
          if (true) {
            return myBaseStringOperation__BehaviorDescriptor;
          }
          break;
        case 17:
          if (true) {
            return myBinaryOperation__BehaviorDescriptor;
          }
          break;
        case 18:
          if (true) {
            return myBitwiseAndExpression__BehaviorDescriptor;
          }
          break;
        case 19:
          if (true) {
            return myBitwiseOrExpression__BehaviorDescriptor;
          }
          break;
        case 20:
          if (true) {
            return myBitwiseXorExpression__BehaviorDescriptor;
          }
          break;
        case 21:
          if (true) {
            return myBlockStatement__BehaviorDescriptor;
          }
          break;
        case 22:
          if (true) {
            return myBooleanConstant__BehaviorDescriptor;
          }
          break;
        case 23:
          if (true) {
            return myBooleanType__BehaviorDescriptor;
          }
          break;
        case 24:
          if (true) {
            return myBreakStatement__BehaviorDescriptor;
          }
          break;
        case 25:
          if (true) {
            return myByteType__BehaviorDescriptor;
          }
          break;
        case 26:
          if (true) {
            return myCastExpression__BehaviorDescriptor;
          }
          break;
        case 27:
          if (true) {
            return myCatchClause__BehaviorDescriptor;
          }
          break;
        case 28:
          if (true) {
            return myCharConstant__BehaviorDescriptor;
          }
          break;
        case 29:
          if (true) {
            return myCharType__BehaviorDescriptor;
          }
          break;
        case 30:
          if (true) {
            return myClassConcept__BehaviorDescriptor;
          }
          break;
        case 31:
          if (true) {
            return myClassCreator__BehaviorDescriptor;
          }
          break;
        case 32:
          if (true) {
            return myClassifier__BehaviorDescriptor;
          }
          break;
        case 33:
          if (true) {
            return myClassifierClassExpression__BehaviorDescriptor;
          }
          break;
        case 34:
          if (true) {
            return myClassifierMember__BehaviorDescriptor;
          }
          break;
        case 35:
          if (true) {
            return myClassifierType__BehaviorDescriptor;
          }
          break;
        case 36:
          if (true) {
            return myClosure__BehaviorDescriptor;
          }
          break;
        case 37:
          if (true) {
            return myClosureParameterReference__BehaviorDescriptor;
          }
          break;
        case 38:
          if (true) {
            return myCommentPart__BehaviorDescriptor;
          }
          break;
        case 39:
          if (true) {
            return myCommentedStatement__BehaviorDescriptor;
          }
          break;
        case 40:
          if (true) {
            return myCommentedStatementsBlock__BehaviorDescriptor;
          }
          break;
        case 41:
          if (true) {
            return myConceptFunction__BehaviorDescriptor;
          }
          break;
        case 42:
          if (true) {
            return myConceptFunctionParameter__BehaviorDescriptor;
          }
          break;
        case 43:
          if (true) {
            return myConstructorDeclaration__BehaviorDescriptor;
          }
          break;
        case 44:
          if (true) {
            return myConstructorInvocationStatement__BehaviorDescriptor;
          }
          break;
        case 45:
          if (true) {
            return myContinueStatement__BehaviorDescriptor;
          }
          break;
        case 46:
          if (true) {
            return myCustomPropertyImplementation__BehaviorDescriptor;
          }
          break;
        case 47:
          if (true) {
            return myCustomSetterPropertyImplementation__BehaviorDescriptor;
          }
          break;
        case 48:
          if (true) {
            return myDefaultPropertyImplementation__BehaviorDescriptor;
          }
          break;
        case 49:
          if (true) {
            return myDefaultSetAccessor__BehaviorDescriptor;
          }
          break;
        case 50:
          if (true) {
            return myDivExpression__BehaviorDescriptor;
          }
          break;
        case 51:
          if (true) {
            return myDoWhileStatement__BehaviorDescriptor;
          }
          break;
        case 52:
          if (true) {
            return myDotExpression__BehaviorDescriptor;
          }
          break;
        case 53:
          if (true) {
            return myDoubleType__BehaviorDescriptor;
          }
          break;
        case 54:
          if (true) {
            return myElsifClause__BehaviorDescriptor;
          }
          break;
        case 55:
          if (true) {
            return myEnumClass__BehaviorDescriptor;
          }
          break;
        case 56:
          if (true) {
            return myEnumConstantDeclaration__BehaviorDescriptor;
          }
          break;
        case 57:
          if (true) {
            return myEnumConstantReference__BehaviorDescriptor;
          }
          break;
        case 58:
          if (true) {
            return myEqualsExpression__BehaviorDescriptor;
          }
          break;
        case 59:
          if (true) {
            return myExpression__BehaviorDescriptor;
          }
          break;
        case 60:
          if (true) {
            return myExpressionStatement__BehaviorDescriptor;
          }
          break;
        case 61:
          if (true) {
            return myFieldDeclaration__BehaviorDescriptor;
          }
          break;
        case 62:
          if (true) {
            return myFieldReferenceOperation__BehaviorDescriptor;
          }
          break;
        case 63:
          if (true) {
            return myFloatType__BehaviorDescriptor;
          }
          break;
        case 64:
          if (true) {
            return myFloatingPointConstant__BehaviorDescriptor;
          }
          break;
        case 65:
          if (true) {
            return myFloatingPointFloatConstant__BehaviorDescriptor;
          }
          break;
        case 66:
          if (true) {
            return myForStatement__BehaviorDescriptor;
          }
          break;
        case 67:
          if (true) {
            return myForeachStatement__BehaviorDescriptor;
          }
          break;
        case 68:
          if (true) {
            return myGenericDeclaration__BehaviorDescriptor;
          }
          break;
        case 69:
          if (true) {
            return myGenericNewExpression__BehaviorDescriptor;
          }
          break;
        case 70:
          if (true) {
            return myGetAccessor__BehaviorDescriptor;
          }
          break;
        case 71:
          if (true) {
            return myGreaterThanExpression__BehaviorDescriptor;
          }
          break;
        case 72:
          if (true) {
            return myGreaterThanOrEqualsExpression__BehaviorDescriptor;
          }
          break;
        case 73:
          if (true) {
            return myHasAnnotation__BehaviorDescriptor;
          }
          break;
        case 74:
          if (true) {
            return myHexIntegerLiteral__BehaviorDescriptor;
          }
          break;
        case 75:
          if (true) {
            return myIBLDeprecatable__BehaviorDescriptor;
          }
          break;
        case 76:
          if (true) {
            return myIBinaryLike__BehaviorDescriptor;
          }
          break;
        case 77:
          if (true) {
            return myIClassifier__BehaviorDescriptor;
          }
          break;
        case 78:
          if (true) {
            return myIClassifierMember__BehaviorDescriptor;
          }
          break;
        case 79:
          if (true) {
            return myIClassifierType__BehaviorDescriptor;
          }
          break;
        case 80:
          if (true) {
            return myIConditional__BehaviorDescriptor;
          }
          break;
        case 81:
          if (true) {
            return myIContainsStatementList__BehaviorDescriptor;
          }
          break;
        case 82:
          if (true) {
            return myIExtractMethodAvailable__BehaviorDescriptor;
          }
          break;
        case 83:
          if (true) {
            return myIGenericType__BehaviorDescriptor;
          }
          break;
        case 84:
          if (true) {
            return myIIncompleteParen__BehaviorDescriptor;
          }
          break;
        case 85:
          if (true) {
            return myIInternalType__BehaviorDescriptor;
          }
          break;
        case 86:
          if (true) {
            return myILocalDeclaration__BehaviorDescriptor;
          }
          break;
        case 87:
          if (true) {
            return myILocalReference__BehaviorDescriptor;
          }
          break;
        case 88:
          if (true) {
            return myILocalVariableElement__BehaviorDescriptor;
          }
          break;
        case 89:
          if (true) {
            return myILocalVariableElementList__BehaviorDescriptor;
          }
          break;
        case 90:
          if (true) {
            return myIMemberContainer__BehaviorDescriptor;
          }
          break;
        case 91:
          if (true) {
            return myIMethodCall__BehaviorDescriptor;
          }
          break;
        case 92:
          if (true) {
            return myIMethodLike__BehaviorDescriptor;
          }
          break;
        case 93:
          if (true) {
            return myIOperation__BehaviorDescriptor;
          }
          break;
        case 94:
          if (true) {
            return myIParameter__BehaviorDescriptor;
          }
          break;
        case 95:
          if (true) {
            return myIStatementListContainer__BehaviorDescriptor;
          }
          break;
        case 96:
          if (true) {
            return myIStaticContainerForMethods__BehaviorDescriptor;
          }
          break;
        case 97:
          if (true) {
            return myITryCatchStatement__BehaviorDescriptor;
          }
          break;
        case 98:
          if (true) {
            return myITypeApplicable__BehaviorDescriptor;
          }
          break;
        case 99:
          if (true) {
            return myIValidIdentifier__BehaviorDescriptor;
          }
          break;
        case 100:
          if (true) {
            return myIVariableAssignment__BehaviorDescriptor;
          }
          break;
        case 101:
          if (true) {
            return myIVariableReference__BehaviorDescriptor;
          }
          break;
        case 102:
          if (true) {
            return myIVisible__BehaviorDescriptor;
          }
          break;
        case 103:
          if (true) {
            return myIWillBeClassifier__BehaviorDescriptor;
          }
          break;
        case 104:
          if (true) {
            return myIYetUnresolved__BehaviorDescriptor;
          }
          break;
        case 105:
          if (true) {
            return myIfStatement__BehaviorDescriptor;
          }
          break;
        case 106:
          if (true) {
            return myIncompleteMemberDeclaration__BehaviorDescriptor;
          }
          break;
        case 107:
          if (true) {
            return myInstanceInitializer__BehaviorDescriptor;
          }
          break;
        case 108:
          if (true) {
            return myInstanceMethodCallOperation__BehaviorDescriptor;
          }
          break;
        case 109:
          if (true) {
            return myInstanceMethodDeclaration__BehaviorDescriptor;
          }
          break;
        case 110:
          if (true) {
            return myIntegerConstant__BehaviorDescriptor;
          }
          break;
        case 111:
          if (true) {
            return myIntegerLiteral__BehaviorDescriptor;
          }
          break;
        case 112:
          if (true) {
            return myIntegerType__BehaviorDescriptor;
          }
          break;
        case 113:
          if (true) {
            return myInterface__BehaviorDescriptor;
          }
          break;
        case 114:
          if (true) {
            return myJavaImports__BehaviorDescriptor;
          }
          break;
        case 115:
          if (true) {
            return myLessThanExpression__BehaviorDescriptor;
          }
          break;
        case 116:
          if (true) {
            return myLessThanOrEqualsExpression__BehaviorDescriptor;
          }
          break;
        case 117:
          if (true) {
            return myLocalInstanceFieldReference__BehaviorDescriptor;
          }
          break;
        case 118:
          if (true) {
            return myLocalInstanceMethodCall__BehaviorDescriptor;
          }
          break;
        case 119:
          if (true) {
            return myLocalMethodCall__BehaviorDescriptor;
          }
          break;
        case 120:
          if (true) {
            return myLocalPropertyReference__BehaviorDescriptor;
          }
          break;
        case 121:
          if (true) {
            return myLocalStaticFieldReference__BehaviorDescriptor;
          }
          break;
        case 122:
          if (true) {
            return myLocalStaticMethodCall__BehaviorDescriptor;
          }
          break;
        case 123:
          if (true) {
            return myLocalVariableDeclaration__BehaviorDescriptor;
          }
          break;
        case 124:
          if (true) {
            return myLocalVariableDeclarationStatement__BehaviorDescriptor;
          }
          break;
        case 125:
          if (true) {
            return myLocalVariableReference__BehaviorDescriptor;
          }
          break;
        case 126:
          if (true) {
            return myLongLiteral__BehaviorDescriptor;
          }
          break;
        case 127:
          if (true) {
            return myLongType__BehaviorDescriptor;
          }
          break;
        case 128:
          if (true) {
            return myLowerBoundType__BehaviorDescriptor;
          }
          break;
        case 129:
          if (true) {
            return myMinusExpression__BehaviorDescriptor;
          }
          break;
        case 130:
          if (true) {
            return myMulExpression__BehaviorDescriptor;
          }
          break;
        case 131:
          if (true) {
            return myNPEEqualsExpression__BehaviorDescriptor;
          }
          break;
        case 132:
          if (true) {
            return myNPENotEqualsExpression__BehaviorDescriptor;
          }
          break;
        case 133:
          if (true) {
            return myNotEqualsExpression__BehaviorDescriptor;
          }
          break;
        case 134:
          if (true) {
            return myNotExpression__BehaviorDescriptor;
          }
          break;
        case 135:
          if (true) {
            return myNullLiteral__BehaviorDescriptor;
          }
          break;
        case 136:
          if (true) {
            return myOrExpression__BehaviorDescriptor;
          }
          break;
        case 137:
          if (true) {
            return myParameterDeclaration__BehaviorDescriptor;
          }
          break;
        case 138:
          if (true) {
            return myParameterReference__BehaviorDescriptor;
          }
          break;
        case 139:
          if (true) {
            return myParenthesizedExpression__BehaviorDescriptor;
          }
          break;
        case 140:
          if (true) {
            return myPlaceholderMember__BehaviorDescriptor;
          }
          break;
        case 141:
          if (true) {
            return myPlusExpression__BehaviorDescriptor;
          }
          break;
        case 142:
          if (true) {
            return myPostfixDecrementExpression__BehaviorDescriptor;
          }
          break;
        case 143:
          if (true) {
            return myPostfixIncrementExpression__BehaviorDescriptor;
          }
          break;
        case 144:
          if (true) {
            return myPrefixDecrementExpression__BehaviorDescriptor;
          }
          break;
        case 145:
          if (true) {
            return myPrefixIncrementExpression__BehaviorDescriptor;
          }
          break;
        case 146:
          if (true) {
            return myPrimitiveType__BehaviorDescriptor;
          }
          break;
        case 147:
          if (true) {
            return myProperty__BehaviorDescriptor;
          }
          break;
        case 148:
          if (true) {
            return myPropertyImplementation__BehaviorDescriptor;
          }
          break;
        case 149:
          if (true) {
            return myPropertyReference__BehaviorDescriptor;
          }
          break;
        case 150:
          if (true) {
            return myPropertyValueReference__BehaviorDescriptor;
          }
          break;
        case 151:
          if (true) {
            return myRemExpression__BehaviorDescriptor;
          }
          break;
        case 152:
          if (true) {
            return myRemarkStatement__BehaviorDescriptor;
          }
          break;
        case 153:
          if (true) {
            return myReturnStatement__BehaviorDescriptor;
          }
          break;
        case 154:
          if (true) {
            return mySetAccessor__BehaviorDescriptor;
          }
          break;
        case 155:
          if (true) {
            return myShiftLeftExpression__BehaviorDescriptor;
          }
          break;
        case 156:
          if (true) {
            return myShiftRightExpression__BehaviorDescriptor;
          }
          break;
        case 157:
          if (true) {
            return myShiftRightUnsignedExpression__BehaviorDescriptor;
          }
          break;
        case 158:
          if (true) {
            return myShortType__BehaviorDescriptor;
          }
          break;
        case 159:
          if (true) {
            return mySingleLineComment__BehaviorDescriptor;
          }
          break;
        case 160:
          if (true) {
            return myStatement__BehaviorDescriptor;
          }
          break;
        case 161:
          if (true) {
            return myStatementList__BehaviorDescriptor;
          }
          break;
        case 162:
          if (true) {
            return myStaticFieldDeclaration__BehaviorDescriptor;
          }
          break;
        case 163:
          if (true) {
            return myStaticFieldReference__BehaviorDescriptor;
          }
          break;
        case 164:
          if (true) {
            return myStaticInitializer__BehaviorDescriptor;
          }
          break;
        case 165:
          if (true) {
            return myStaticMethodCall__BehaviorDescriptor;
          }
          break;
        case 166:
          if (true) {
            return myStaticMethodDeclaration__BehaviorDescriptor;
          }
          break;
        case 167:
          if (true) {
            return myStringLiteral__BehaviorDescriptor;
          }
          break;
        case 168:
          if (true) {
            return myStringType__BehaviorDescriptor;
          }
          break;
        case 169:
          if (true) {
            return mySuperConstructorInvocation__BehaviorDescriptor;
          }
          break;
        case 170:
          if (true) {
            return mySuperMethodCall__BehaviorDescriptor;
          }
          break;
        case 171:
          if (true) {
            return mySwitchCase__BehaviorDescriptor;
          }
          break;
        case 172:
          if (true) {
            return mySwitchStatement__BehaviorDescriptor;
          }
          break;
        case 173:
          if (true) {
            return mySynchronizedStatement__BehaviorDescriptor;
          }
          break;
        case 174:
          if (true) {
            return myTernaryOperatorExpression__BehaviorDescriptor;
          }
          break;
        case 175:
          if (true) {
            return myTextCommentPart__BehaviorDescriptor;
          }
          break;
        case 176:
          if (true) {
            return myThisConstructorInvocation__BehaviorDescriptor;
          }
          break;
        case 177:
          if (true) {
            return myThisExpression__BehaviorDescriptor;
          }
          break;
        case 178:
          if (true) {
            return myThrowStatement__BehaviorDescriptor;
          }
          break;
        case 179:
          if (true) {
            return myTokens__BehaviorDescriptor;
          }
          break;
        case 180:
          if (true) {
            return myTryCatchStatement__BehaviorDescriptor;
          }
          break;
        case 181:
          if (true) {
            return myTryStatement__BehaviorDescriptor;
          }
          break;
        case 182:
          if (true) {
            return myType__BehaviorDescriptor;
          }
          break;
        case 183:
          if (true) {
            return myTypeAnnotable__BehaviorDescriptor;
          }
          break;
        case 184:
          if (true) {
            return myTypeDerivable__BehaviorDescriptor;
          }
          break;
        case 185:
          if (true) {
            return myTypeVariableDeclaration__BehaviorDescriptor;
          }
          break;
        case 186:
          if (true) {
            return myTypeVariableReference__BehaviorDescriptor;
          }
          break;
        case 187:
          if (true) {
            return myUnaryMinus__BehaviorDescriptor;
          }
          break;
        case 188:
          if (true) {
            return myUnknownConsCall__BehaviorDescriptor;
          }
          break;
        case 189:
          if (true) {
            return myUnknownDotCall__BehaviorDescriptor;
          }
          break;
        case 190:
          if (true) {
            return myUnknownLocalCall__BehaviorDescriptor;
          }
          break;
        case 191:
          if (true) {
            return myUnknownNameRef__BehaviorDescriptor;
          }
          break;
        case 192:
          if (true) {
            return myUnknownNew__BehaviorDescriptor;
          }
          break;
        case 193:
          if (true) {
            return myUpperBoundType__BehaviorDescriptor;
          }
          break;
        case 194:
          if (true) {
            return myUsingStatement__BehaviorDescriptor;
          }
          break;
        case 195:
          if (true) {
            return myVariableArityType__BehaviorDescriptor;
          }
          break;
        case 196:
          if (true) {
            return myVariableDeclaration__BehaviorDescriptor;
          }
          break;
        case 197:
          if (true) {
            return myVariableReference__BehaviorDescriptor;
          }
          break;
        case 198:
          if (true) {
            return myVoidType__BehaviorDescriptor;
          }
          break;
        case 199:
          if (true) {
            return myWhileStatement__BehaviorDescriptor;
          }
          break;
        case 200:
          if (true) {
            return myWildCardType__BehaviorDescriptor;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0wh = buildConceptIndices(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a697996feL, "jetbrains.mps.baseLanguage.structure.AbstractForStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cb1ac5adeL, "jetbrains.mps.baseLanguage.structure.AbstractLoopStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x120a4c1f269L, "jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfb7c3070eeL, "jetbrains.mps.baseLanguage.structure.AndExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a69dc80cL, "jetbrains.mps.baseLanguage.structure.Annotation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a6b4ccabL, "jetbrains.mps.baseLanguage.structure.AnnotationInstance"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a71b1af4L, "jetbrains.mps.baseLanguage.structure.AnnotationInstanceValue"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a6a17a27L, "jetbrains.mps.baseLanguage.structure.AnnotationMethodDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1107e0cb103L, "jetbrains.mps.baseLanguage.structure.AnonymousClass"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11126b40c25L, "jetbrains.mps.baseLanguage.structure.ArrayAccessExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1197781411dL, "jetbrains.mps.baseLanguage.structure.ArrayLengthOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, "jetbrains.mps.baseLanguage.structure.ArrayType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e96L, "jetbrains.mps.baseLanguage.structure.AssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11b0d00332cL, "jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c78301acL, "jetbrains.mps.baseLanguage.structure.BaseMethodCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47dc8da1L, "jetbrains.mps.baseLanguage.structure.BaseStringOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL, "jetbrains.mps.baseLanguage.structure.BinaryOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d19eede01L, "jetbrains.mps.baseLanguage.structure.BitwiseAndExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d19ef4652L, "jetbrains.mps.baseLanguage.structure.BitwiseOrExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d19ef69abL, "jetbrains.mps.baseLanguage.structure.BitwiseXorExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc092b6b77L, "jetbrains.mps.baseLanguage.structure.BlockStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b201L, "jetbrains.mps.baseLanguage.structure.BooleanConstant"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d6513eL, "jetbrains.mps.baseLanguage.structure.BooleanType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbe39a867fL, "jetbrains.mps.baseLanguage.structure.BreakStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d5b617L, "jetbrains.mps.baseLanguage.structure.ByteType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940dabe4aL, "jetbrains.mps.baseLanguage.structure.CastExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f39a56e2fL, "jetbrains.mps.baseLanguage.structure.CatchClause"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1177d44b21bL, "jetbrains.mps.baseLanguage.structure.CharConstant"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d4f826L, "jetbrains.mps.baseLanguage.structure.CharType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a59b0fbceL, "jetbrains.mps.baseLanguage.structure.ClassCreator"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x103fb730c14L, "jetbrains.mps.baseLanguage.structure.ClassifierClassExpression"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112574373bdL, "jetbrains.mps.baseLanguage.structure.ClassifierMember"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c63f4f3f3L, "jetbrains.mps.baseLanguage.structure.Closure"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c7edba8b3L, "jetbrains.mps.baseLanguage.structure.ClosureParameterReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3bL, "jetbrains.mps.baseLanguage.structure.CommentPart"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11ef4675fccL, "jetbrains.mps.baseLanguage.structure.CommentedStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1121e2102fdL, "jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L, "jetbrains.mps.baseLanguage.structure.ConceptFunction"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL, "jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L, "jetbrains.mps.baseLanguage.structure.ConstructorDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x121119ae5ffL, "jetbrains.mps.baseLanguage.structure.ConstructorInvocationStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbf3043726L, "jetbrains.mps.baseLanguage.structure.ContinueStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b8f1b18eL, "jetbrains.mps.baseLanguage.structure.CustomPropertyImplementation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3b7a2005a14cfe5eL, "jetbrains.mps.baseLanguage.structure.CustomSetterPropertyImplementation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b7633177L, "jetbrains.mps.baseLanguage.structure.DefaultPropertyImplementation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117e16a7273L, "jetbrains.mps.baseLanguage.structure.DefaultSetAccessor"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xff2bbc13daL, "jetbrains.mps.baseLanguage.structure.DivExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11232674988L, "jetbrains.mps.baseLanguage.structure.DoWhileStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, "jetbrains.mps.baseLanguage.structure.DotExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d451a6L, "jetbrains.mps.baseLanguage.structure.DoubleType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118ceceb41aL, "jetbrains.mps.baseLanguage.structure.ElsifClause"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367070a5L, "jetbrains.mps.baseLanguage.structure.EnumClass"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367388b3L, "jetbrains.mps.baseLanguage.structure.EnumConstantDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc37588bc8L, "jetbrains.mps.baseLanguage.structure.EnumConstantReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b210L, "jetbrains.mps.baseLanguage.structure.EqualsExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL, "jetbrains.mps.baseLanguage.structure.Expression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, "jetbrains.mps.baseLanguage.structure.ExpressionStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca68L, "jetbrains.mps.baseLanguage.structure.FieldDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b483d77aL, "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d327fdL, "jetbrains.mps.baseLanguage.structure.FloatType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102cb19a434L, "jetbrains.mps.baseLanguage.structure.FloatingPointConstant"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x494547eeedc219b9L, "jetbrains.mps.baseLanguage.structure.FloatingPointFloatConstant"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a698082feL, "jetbrains.mps.baseLanguage.structure.ForStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a6933ce33L, "jetbrains.mps.baseLanguage.structure.ForeachStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102463b447aL, "jetbrains.mps.baseLanguage.structure.GenericDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ab8473cc5L, "jetbrains.mps.baseLanguage.structure.GenericNewExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b9245fc5L, "jetbrains.mps.baseLanguage.structure.GetAccessor"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbced38fcfL, "jetbrains.mps.baseLanguage.structure.GreaterThanExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c8d0fac2cL, "jetbrains.mps.baseLanguage.structure.GreaterThanOrEqualsExpression"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a6be947aL, "jetbrains.mps.baseLanguage.structure.HasAnnotation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1129761e073L, "jetbrains.mps.baseLanguage.structure.HexIntegerLiteral"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d2ea8a339L, "jetbrains.mps.baseLanguage.structure.IBLDeprecatable"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x182da1771714863eL, "jetbrains.mps.baseLanguage.structure.IBinaryLike"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x66c71d82c2eb113dL, "jetbrains.mps.baseLanguage.structure.IClassifier"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x66c71d82c2eb113eL, "jetbrains.mps.baseLanguage.structure.IClassifierMember"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x66c71d82c2eb7f7eL, "jetbrains.mps.baseLanguage.structure.IClassifierType"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3ac89e1b122cd5c2L, "jetbrains.mps.baseLanguage.structure.IConditional"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x120237c2cebL, "jetbrains.mps.baseLanguage.structure.IContainsStatementList"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11c60bb0a14L, "jetbrains.mps.baseLanguage.structure.IExtractMethodAvailable"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x38ff5220e0ac710dL, "jetbrains.mps.baseLanguage.structure.IGenericType"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xede3fe8510255edL, "jetbrains.mps.baseLanguage.structure.IIncompleteParen"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118cd59904dL, "jetbrains.mps.baseLanguage.structure.IInternalType"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2d45f01afccba89cL, "jetbrains.mps.baseLanguage.structure.ILocalDeclaration"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2d45f01afccba89dL, "jetbrains.mps.baseLanguage.structure.ILocalReference"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1206e6cc291L, "jetbrains.mps.baseLanguage.structure.ILocalVariableElement"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1206e9046e6L, "jetbrains.mps.baseLanguage.structure.ILocalVariableElementList"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11638b31955L, "jetbrains.mps.baseLanguage.structure.IMemberContainer"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, "jetbrains.mps.baseLanguage.structure.IMethodCall"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1208f458d37L, "jetbrains.mps.baseLanguage.structure.IMethodLike"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L, "jetbrains.mps.baseLanguage.structure.IOperation"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d486a1d9eL, "jetbrains.mps.baseLanguage.structure.IParameter"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11750ef8265L, "jetbrains.mps.baseLanguage.structure.IStatementListContainer"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11c8f444674L, "jetbrains.mps.baseLanguage.structure.IStaticContainerForMethods"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3399756d2c03d422L, "jetbrains.mps.baseLanguage.structure.ITryCatchStatement"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x72de18bba2dc2a73L, "jetbrains.mps.baseLanguage.structure.ITypeApplicable"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL, "jetbrains.mps.baseLanguage.structure.IValidIdentifier"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11cfb3b82a4L, "jetbrains.mps.baseLanguage.structure.IVariableAssignment"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xe34de34746464f2L, "jetbrains.mps.baseLanguage.structure.IVariableReference"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112670d273fL, "jetbrains.mps.baseLanguage.structure.IVisible"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3ff8b7a0d94242e1L, "jetbrains.mps.baseLanguage.structure.IWillBeClassifier"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x70ea1dc4c5721865L, "jetbrains.mps.baseLanguage.structure.IYetUnresolved"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, "jetbrains.mps.baseLanguage.structure.IfStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x32175ac2e6fcc181L, "jetbrains.mps.baseLanguage.structure.IncompleteMemberDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118f0b909f7L, "jetbrains.mps.baseLanguage.structure.InstanceInitializer"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, "jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, "jetbrains.mps.baseLanguage.structure.IntegerConstant"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1129778b846L, "jetbrains.mps.baseLanguage.structure.IntegerLiteral"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d22479L, "jetbrains.mps.baseLanguage.structure.IntegerType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101edd46144L, "jetbrains.mps.baseLanguage.structure.Interface"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x53f7c33f069862f2L, "jetbrains.mps.baseLanguage.structure.JavaImports"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbced3b82aL, "jetbrains.mps.baseLanguage.structure.LessThanExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c8d53a915L, "jetbrains.mps.baseLanguage.structure.LessThanOrEqualsExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c0ba864df016178L, "jetbrains.mps.baseLanguage.structure.LocalInstanceFieldReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2a8fe0cadfaa8af2L, "jetbrains.mps.baseLanguage.structure.LocalInstanceMethodCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c6b6a1e379f9404L, "jetbrains.mps.baseLanguage.structure.LocalMethodCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x515d7a8d927e9fb3L, "jetbrains.mps.baseLanguage.structure.LocalPropertyReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110e12d8c7dL, "jetbrains.mps.baseLanguage.structure.LocalStaticFieldReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110e4207559L, "jetbrains.mps.baseLanguage.structure.LocalStaticMethodCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f2L, "jetbrains.mps.baseLanguage.structure.LocalVariableReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3b418722717710b4L, "jetbrains.mps.baseLanguage.structure.LongLiteral"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f3L, "jetbrains.mps.baseLanguage.structure.LongType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110dae9d53dL, "jetbrains.mps.baseLanguage.structure.LowerBoundType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f5L, "jetbrains.mps.baseLanguage.structure.MinusExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfe476b758fL, "jetbrains.mps.baseLanguage.structure.MulExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47dc0e3bL, "jetbrains.mps.baseLanguage.structure.NPEEqualsExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47db1c91L, "jetbrains.mps.baseLanguage.structure.NPENotEqualsExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf9e20e303fL, "jetbrains.mps.baseLanguage.structure.NotEqualsExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbcf6bd10dL, "jetbrains.mps.baseLanguage.structure.NotExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940cd6167L, "jetbrains.mps.baseLanguage.structure.NullLiteral"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfb8255689fL, "jetbrains.mps.baseLanguage.structure.OrExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7faL, "jetbrains.mps.baseLanguage.structure.ParameterReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfb4ed32b7fL, "jetbrains.mps.baseLanguage.structure.ParenthesizedExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1458378889e6d166L, "jetbrains.mps.baseLanguage.structure.PlaceholderMember"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7fbL, "jetbrains.mps.baseLanguage.structure.PlusExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11aded05fe6L, "jetbrains.mps.baseLanguage.structure.PostfixDecrementExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11adecdb4f0L, "jetbrains.mps.baseLanguage.structure.PostfixIncrementExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x120a472f0e8L, "jetbrains.mps.baseLanguage.structure.PrefixDecrementExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x120a46df580L, "jetbrains.mps.baseLanguage.structure.PrefixIncrementExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f0ad8bde4L, "jetbrains.mps.baseLanguage.structure.PrimitiveType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b744dafeL, "jetbrains.mps.baseLanguage.structure.Property"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b75f36c8L, "jetbrains.mps.baseLanguage.structure.PropertyImplementation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b821eaaeL, "jetbrains.mps.baseLanguage.structure.PropertyReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2463999e524f3bf5L, "jetbrains.mps.baseLanguage.structure.PropertyValueReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c8d509af4L, "jetbrains.mps.baseLanguage.structure.RemExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1101757c8faL, "jetbrains.mps.baseLanguage.structure.RemarkStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7feL, "jetbrains.mps.baseLanguage.structure.ReturnStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117bd9ac3d9L, "jetbrains.mps.baseLanguage.structure.SetAccessor"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d6cde9fb9L, "jetbrains.mps.baseLanguage.structure.ShiftLeftExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d6ce051dfL, "jetbrains.mps.baseLanguage.structure.ShiftRightExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x470fa5a7b03ac59L, "jetbrains.mps.baseLanguage.structure.ShiftRightUnsignedExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940cc380dL, "jetbrains.mps.baseLanguage.structure.ShortType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3aL, "jetbrains.mps.baseLanguage.structure.SingleLineComment"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L, "jetbrains.mps.baseLanguage.structure.Statement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, "jetbrains.mps.baseLanguage.structure.StatementList"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93c84351fL, "jetbrains.mps.baseLanguage.structure.StaticFieldDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940c80846L, "jetbrains.mps.baseLanguage.structure.StaticFieldReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11c7538039dL, "jetbrains.mps.baseLanguage.structure.StaticInitializer"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbebabf09L, "jetbrains.mps.baseLanguage.structure.StaticMethodCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbebabf0aL, "jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, "jetbrains.mps.baseLanguage.structure.StringLiteral"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47da71ecL, "jetbrains.mps.baseLanguage.structure.StringType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d512e1eL, "jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf9d78b55aaL, "jetbrains.mps.baseLanguage.structure.SuperMethodCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02cdd1bL, "jetbrains.mps.baseLanguage.structure.SwitchCase"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02a8c6aL, "jetbrains.mps.baseLanguage.structure.SwitchStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1106df1d8d8L, "jetbrains.mps.baseLanguage.structure.SynchronizedStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef01239c9L, "jetbrains.mps.baseLanguage.structure.TernaryOperatorExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3dL, "jetbrains.mps.baseLanguage.structure.TextCommentPart"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1127b878882L, "jetbrains.mps.baseLanguage.structure.ThisConstructorInvocation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d4da00cL, "jetbrains.mps.baseLanguage.structure.ThisExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f3ee082d8L, "jetbrains.mps.baseLanguage.structure.ThrowStatement"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x5a98df4004080866L, "jetbrains.mps.baseLanguage.structure.Tokens"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f383e6771L, "jetbrains.mps.baseLanguage.structure.TryCatchStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cacebf556L, "jetbrains.mps.baseLanguage.structure.TryStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL, "jetbrains.mps.baseLanguage.structure.Type"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11f4b6b2435L, "jetbrains.mps.baseLanguage.structure.TypeAnnotable"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117ac2330f4L, "jetbrains.mps.baseLanguage.structure.TypeDerivable"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1024639ed74L, "jetbrains.mps.baseLanguage.structure.TypeVariableDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6fea7de6103549b1L, "jetbrains.mps.baseLanguage.structure.UnaryMinus"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x7e4a5cff51167b74L, "jetbrains.mps.baseLanguage.structure.UnknownConsCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x245faa02186fc7b5L, "jetbrains.mps.baseLanguage.structure.UnknownDotCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x245faa02186fc5d6L, "jetbrains.mps.baseLanguage.structure.UnknownLocalCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x759937a5973279b7L, "jetbrains.mps.baseLanguage.structure.UnknownNameRef"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2dda7700ec3ae154L, "jetbrains.mps.baseLanguage.structure.UnknownNew"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110daeaa84aL, "jetbrains.mps.baseLanguage.structure.UpperBoundType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d0053f19bL, "jetbrains.mps.baseLanguage.structure.UsingStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11c08f42e7bL, "jetbrains.mps.baseLanguage.structure.VariableArityType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, "jetbrains.mps.baseLanguage.structure.VariableDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, "jetbrains.mps.baseLanguage.structure.VariableReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc6bf96dL, "jetbrains.mps.baseLanguage.structure.VoidType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfaa4bf0f2fL, "jetbrains.mps.baseLanguage.structure.WhileStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110dae5f4a3L, "jetbrains.mps.baseLanguage.structure.WildCardType"));
}
