package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractClassifierReference = 0;
  public static final int AbstractCreator = 1;
  public static final int AbstractForStatement = 2;
  public static final int AbstractLoopStatement = 3;
  public static final int AbstractOperation = 4;
  public static final int AbstractUnaryNumberOperation = 5;
  public static final int AdditionalForLoopVariable = 6;
  public static final int AndAssignmentExpression = 7;
  public static final int AndExpression = 8;
  public static final int Annotation = 9;
  public static final int AnnotationInstance = 10;
  public static final int AnnotationInstanceExpression = 11;
  public static final int AnnotationInstanceValue = 12;
  public static final int AnnotationMethodDeclaration = 13;
  public static final int AnonymousClass = 14;
  public static final int AnonymousClassCreator = 15;
  public static final int ArrayAccessExpression = 16;
  public static final int ArrayClassExpression = 17;
  public static final int ArrayCloneOperation = 18;
  public static final int ArrayCreator = 19;
  public static final int ArrayCreatorWithInitializer = 20;
  public static final int ArrayLengthOperation = 21;
  public static final int ArrayLiteral = 22;
  public static final int ArrayType = 23;
  public static final int AsExpression = 24;
  public static final int AssertStatement = 25;
  public static final int AssignmentExpression = 26;
  public static final int BLBottomType = 27;
  public static final int BaseAssignmentExpression = 28;
  public static final int BaseMethodCall = 29;
  public static final int BaseMethodDeclaration = 30;
  public static final int BaseStringOperation = 31;
  public static final int BaseVariableDeclaration = 32;
  public static final int BaseVariableReference = 33;
  public static final int BinaryBitwiseOperation = 34;
  public static final int BinaryCompareOperation = 35;
  public static final int BinaryOperation = 36;
  public static final int BitwiseAndExpression = 37;
  public static final int BitwiseNotExpression = 38;
  public static final int BitwiseOrExpression = 39;
  public static final int BitwiseXorExpression = 40;
  public static final int BlockStatement = 41;
  public static final int BooleanConstant = 42;
  public static final int BooleanType = 43;
  public static final int BreakStatement = 44;
  public static final int ByteType = 45;
  public static final int CastExpression = 46;
  public static final int CatchClause = 47;
  public static final int CharConstant = 48;
  public static final int CharType = 49;
  public static final int ClassConcept = 50;
  public static final int ClassCreator = 51;
  public static final int Classifier = 52;
  public static final int ClassifierClassExpression = 53;
  public static final int ClassifierMember = 54;
  public static final int ClassifierType = 55;
  public static final int Closure = 56;
  public static final int ClosureParameter = 57;
  public static final int ClosureParameterReference = 58;
  public static final int Closureoid = 59;
  public static final int CommentPart = 60;
  public static final int CommentedStatement = 61;
  public static final int CommentedStatementsBlock = 62;
  public static final int ConceptFunction = 63;
  public static final int ConceptFunctionParameter = 64;
  public static final int ConstructorDeclaration = 65;
  public static final int ConstructorInvocationStatement = 66;
  public static final int ContextClassifierKind = 67;
  public static final int ContinueStatement = 68;
  public static final int CustomPropertyImplementation = 69;
  public static final int CustomSetterPropertyImplementation = 70;
  public static final int DefaultClassCreator = 71;
  public static final int DefaultGetAccessor = 72;
  public static final int DefaultPropertyImplementation = 73;
  public static final int DefaultSetAccessor = 74;
  public static final int DimensionExpression = 75;
  public static final int DivAssignmentExpression = 76;
  public static final int DivExpression = 77;
  public static final int DoWhileStatement = 78;
  public static final int DotExpression = 79;
  public static final int DoubleType = 80;
  public static final int ElsifClause = 81;
  public static final int EnumClass = 82;
  public static final int EnumConstantDeclaration = 83;
  public static final int EnumConstantReference = 84;
  public static final int EnumValueOfExpression = 85;
  public static final int EnumValuesExpression = 86;
  public static final int EqualsExpression = 87;
  public static final int EscapeOperation = 88;
  public static final int Expression = 89;
  public static final int ExpressionStatement = 90;
  public static final int FieldDeclaration = 91;
  public static final int FieldReferenceOperation = 92;
  public static final int FloatType = 93;
  public static final int FloatingPointConstant = 94;
  public static final int FloatingPointFloatConstant = 95;
  public static final int ForStatement = 96;
  public static final int ForeachStatement = 97;
  public static final int GenericDeclaration = 98;
  public static final int GenericNewExpression = 99;
  public static final int GetAccessor = 100;
  public static final int GreaterThanExpression = 101;
  public static final int GreaterThanOrEqualsExpression = 102;
  public static final int HasAnnotation = 103;
  public static final int HexIntegerLiteral = 104;
  public static final int IAnonymousClass = 105;
  public static final int IBLDeprecatable = 106;
  public static final int IBinaryLike = 107;
  public static final int IClassifier = 108;
  public static final int IClassifierMember = 109;
  public static final int IClassifierType = 110;
  public static final int IConditional = 111;
  public static final int IContainsStatementList = 112;
  public static final int IControlFlowInterrupter = 113;
  public static final int IExtractMethodAvailable = 114;
  public static final int IFinalWrapper = 115;
  public static final int IGenericType = 116;
  public static final int IHasModifiers = 117;
  public static final int IIncompleteParen = 118;
  public static final int IInternalType = 119;
  public static final int ILocalDeclaration = 120;
  public static final int ILocalReference = 121;
  public static final int ILocalVariableElement = 122;
  public static final int ILocalVariableElementList = 123;
  public static final int IMemberContainer = 124;
  public static final int IMethodCall = 125;
  public static final int IMethodLike = 126;
  public static final int IOperation = 127;
  public static final int IParameter = 128;
  public static final int ISkipsReturn = 129;
  public static final int IStatementListContainer = 130;
  public static final int IStaticContainerForMethods = 131;
  public static final int IThisExpression = 132;
  public static final int ITryCatchStatement = 133;
  public static final int ITypeApplicable = 134;
  public static final int IValidIdentifier = 135;
  public static final int IVariableAssignment = 136;
  public static final int IVariableDeclaration = 137;
  public static final int IVariableReference = 138;
  public static final int IVisible = 139;
  public static final int IWillBeClassifier = 140;
  public static final int IYetUnresolved = 141;
  public static final int IfStatement = 142;
  public static final int ImplicitAnnotationInstanceValue = 143;
  public static final int ImplicitAnnotationMethodKind = 144;
  public static final int IncompleteLeftParen = 145;
  public static final int IncompleteMemberDeclaration = 146;
  public static final int IncompleteRightParen = 147;
  public static final int InstanceInitializer = 148;
  public static final int InstanceMethodCallOperation = 149;
  public static final int InstanceMethodDeclaration = 150;
  public static final int InstanceOfExpression = 151;
  public static final int IntegerConstant = 152;
  public static final int IntegerLiteral = 153;
  public static final int IntegerType = 154;
  public static final int Interface = 155;
  public static final int IsEmptyOperation = 156;
  public static final int IsNotEmptyOperation = 157;
  public static final int JavaImport = 158;
  public static final int JavaImports = 159;
  public static final int LeftShiftAssignmentExpression = 160;
  public static final int LessThanExpression = 161;
  public static final int LessThanOrEqualsExpression = 162;
  public static final int LocalInstanceFieldReference = 163;
  public static final int LocalInstanceMethodCall = 164;
  public static final int LocalMethodCall = 165;
  public static final int LocalPropertyReference = 166;
  public static final int LocalStaticFieldReference = 167;
  public static final int LocalStaticMethodCall = 168;
  public static final int LocalToMethodKind = 169;
  public static final int LocalVariableDeclaration = 170;
  public static final int LocalVariableDeclarationStatement = 171;
  public static final int LocalVariableReference = 172;
  public static final int LongLiteral = 173;
  public static final int LongType = 174;
  public static final int LoopLabel = 175;
  public static final int LoopLabelReference = 176;
  public static final int LowerBoundType = 177;
  public static final int MethodDeclaration = 178;
  public static final int MinusAssignmentExpression = 179;
  public static final int MinusExpression = 180;
  public static final int Modifier = 181;
  public static final int MulAssignmentExpression = 182;
  public static final int MulExpression = 183;
  public static final int NPEEqualsExpression = 184;
  public static final int NPENotEqualsExpression = 185;
  public static final int NestedNewExpression = 186;
  public static final int NotEqualsExpression = 187;
  public static final int NotExpression = 188;
  public static final int NullLiteral = 189;
  public static final int NullType = 190;
  public static final int Number = 191;
  public static final int OperationAssignmentExpression = 192;
  public static final int OrAssignmentExpression = 193;
  public static final int OrExpression = 194;
  public static final int ParameterDeclaration = 195;
  public static final int ParameterReference = 196;
  public static final int ParenthesizedExpression = 197;
  public static final int PlaceholderMember = 198;
  public static final int PlusAssignmentExpression = 199;
  public static final int PlusExpression = 200;
  public static final int PostfixDecrementExpression = 201;
  public static final int PostfixIncrementExpression = 202;
  public static final int PrefixDecrementExpression = 203;
  public static final int PrefixIncrementExpression = 204;
  public static final int PrimitiveClassExpression = 205;
  public static final int PrimitiveType = 206;
  public static final int PrivateVisibility = 207;
  public static final int Property = 208;
  public static final int PropertyImplementation = 209;
  public static final int PropertyReference = 210;
  public static final int PropertyValueReference = 211;
  public static final int ProtectedVisibility = 212;
  public static final int PublicVisibility = 213;
  public static final int QualifiedSuperMethodCall = 214;
  public static final int RemAssignmentExpression = 215;
  public static final int RemExpression = 216;
  public static final int RemarkStatement = 217;
  public static final int ReturnStatement = 218;
  public static final int RightShiftAssignmentExpression = 219;
  public static final int SetAccessor = 220;
  public static final int ShiftLeftExpression = 221;
  public static final int ShiftRightExpression = 222;
  public static final int ShiftRightUnsignedExpression = 223;
  public static final int ShortType = 224;
  public static final int SingleLineComment = 225;
  public static final int Statement = 226;
  public static final int StatementCommentPart = 227;
  public static final int StatementList = 228;
  public static final int StaticFieldDeclaration = 229;
  public static final int StaticFieldReference = 230;
  public static final int StaticInitializer = 231;
  public static final int StaticKind = 232;
  public static final int StaticMethodCall = 233;
  public static final int StaticMethodDeclaration = 234;
  public static final int StringBooleanOperation = 235;
  public static final int StringLiteral = 236;
  public static final int StringToken = 237;
  public static final int StringType = 238;
  public static final int StubStatementList = 239;
  public static final int SubstringExpression = 240;
  public static final int SuperConstructorInvocation = 241;
  public static final int SuperConstructorKind = 242;
  public static final int SuperInerfaceKind = 243;
  public static final int SuperMethodCall = 244;
  public static final int SuperMethodKind = 245;
  public static final int SwitchCase = 246;
  public static final int SwitchStatement = 247;
  public static final int SynchronizedStatement = 248;
  public static final int TernaryOperatorExpression = 249;
  public static final int TextCommentPart = 250;
  public static final int ThisConstructorInvocation = 251;
  public static final int ThisConstructorKind = 252;
  public static final int ThisExpression = 253;
  public static final int ThrowStatement = 254;
  public static final int Tokens = 255;
  public static final int TrimOperation = 256;
  public static final int TryCatchStatement = 257;
  public static final int TryStatement = 258;
  public static final int Type = 259;
  public static final int TypeAnnotable = 260;
  public static final int TypeDerivable = 261;
  public static final int TypeVariableDeclaration = 262;
  public static final int TypeVariableReference = 263;
  public static final int UnaryMinus = 264;
  public static final int UndefinedType = 265;
  public static final int UnknownConsCall = 266;
  public static final int UnknownDotCall = 267;
  public static final int UnknownLocalCall = 268;
  public static final int UnknownNameRef = 269;
  public static final int UnknownNew = 270;
  public static final int UnresolvedNameReference = 271;
  public static final int UnsignedRightShiftAssignmentExpression = 272;
  public static final int UpperBoundType = 273;
  public static final int UsingStatement = 274;
  public static final int ValueParameter = 275;
  public static final int VarType = 276;
  public static final int VariableArityType = 277;
  public static final int VariableDeclaration = 278;
  public static final int VariableReference = 279;
  public static final int Visibility = 280;
  public static final int VoidType = 281;
  public static final int WhileStatement = 282;
  public static final int WildCardType = 283;
  public static final int XorAssignmentExpression = 284;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xf3061a5392264cc5L, 0xa443f952ceaf5816L);
    builder.put(0x6c6c91efa5ec8cd7L, AbstractClassifierReference);
    builder.put(0x10ab844af9bL, AbstractCreator);
    builder.put(0x10a697996feL, AbstractForStatement);
    builder.put(0x10cb1ac5adeL, AbstractLoopStatement);
    builder.put(0x1196792d150L, AbstractOperation);
    builder.put(0x120a4c1f269L, AbstractUnaryNumberOperation);
    builder.put(0x19659b074928781eL, AdditionalForLoopVariable);
    builder.put(0x617aa860be862eaaL, AndAssignmentExpression);
    builder.put(0xfb7c3070eeL, AndExpression);
    builder.put(0x114a69dc80cL, Annotation);
    builder.put(0x114a6b4ccabL, AnnotationInstance);
    builder.put(0x114a71a2770L, AnnotationInstanceExpression);
    builder.put(0x114a71b1af4L, AnnotationInstanceValue);
    builder.put(0x114a6a17a27L, AnnotationMethodDeclaration);
    builder.put(0x1107e0cb103L, AnonymousClass);
    builder.put(0x1133e3b449aL, AnonymousClassCreator);
    builder.put(0x11126b40c25L, ArrayAccessExpression);
    builder.put(0x115f7830a32a65e7L, ArrayClassExpression);
    builder.put(0x483ee9d7f09580d6L, ArrayCloneOperation);
    builder.put(0x113e4952f12L, ArrayCreator);
    builder.put(0x10cd01b77ddL, ArrayCreatorWithInitializer);
    builder.put(0x1197781411dL, ArrayLengthOperation);
    builder.put(0x114a770dc0dL, ArrayLiteral);
    builder.put(0xf940d819f7L, ArrayType);
    builder.put(0x11d00538bdfL, AsExpression);
    builder.put(0x10e50ecba3dL, AssertStatement);
    builder.put(0xf8c77f1e96L, AssignmentExpression);
    builder.put(0x1210c38a8adL, BLBottomType);
    builder.put(0x11b0d00332cL, BaseAssignmentExpression);
    builder.put(0xf8c78301acL, BaseMethodCall);
    builder.put(0xf8cc56b1fcL, BaseMethodDeclaration);
    builder.put(0x11d47dc8da1L, BaseStringOperation);
    builder.put(0x450368d90ce15bc3L, BaseVariableDeclaration);
    builder.put(0x4c4b92003e49a704L, BaseVariableReference);
    builder.put(0x11d19ec0c2fL, BinaryBitwiseOperation);
    builder.put(0x12094ea9f7dL, BinaryCompareOperation);
    builder.put(0xfbdeb6fecfL, BinaryOperation);
    builder.put(0x11d19eede01L, BitwiseAndExpression);
    builder.put(0x11d6d026f5fL, BitwiseNotExpression);
    builder.put(0x11d19ef4652L, BitwiseOrExpression);
    builder.put(0x11d19ef69abL, BitwiseXorExpression);
    builder.put(0xfc092b6b77L, BlockStatement);
    builder.put(0xf8cc56b201L, BooleanConstant);
    builder.put(0xf940d6513eL, BooleanType);
    builder.put(0xfbe39a867fL, BreakStatement);
    builder.put(0xf940d5b617L, ByteType);
    builder.put(0xf940dabe4aL, CastExpression);
    builder.put(0x10f39a56e2fL, CatchClause);
    builder.put(0x1177d44b21bL, CharConstant);
    builder.put(0xf940d4f826L, CharType);
    builder.put(0xf8c108ca66L, ClassConcept);
    builder.put(0x11a59b0fbceL, ClassCreator);
    builder.put(0x101d9d3ca30L, Classifier);
    builder.put(0x103fb730c14L, ClassifierClassExpression);
    builder.put(0x112574373bdL, ClassifierMember);
    builder.put(0x101de48bf9eL, ClassifierType);
    builder.put(0x10c63f4f3f3L, Closure);
    builder.put(0x10c7edb2aa8L, ClosureParameter);
    builder.put(0x10c7edba8b3L, ClosureParameterReference);
    builder.put(0x1192e7dfdd1L, Closureoid);
    builder.put(0x57d533a7af15ed3bL, CommentPart);
    builder.put(0x11ef4675fccL, CommentedStatement);
    builder.put(0x1121e2102fdL, CommentedStatementsBlock);
    builder.put(0x108bbca0f48L, ConceptFunction);
    builder.put(0x101c66e2c0bL, ConceptFunctionParameter);
    builder.put(0xf8cc56b204L, ConstructorDeclaration);
    builder.put(0x121119ae5ffL, ConstructorInvocationStatement);
    builder.put(0x32e8e5805c50376L, ContextClassifierKind);
    builder.put(0xfbf3043726L, ContinueStatement);
    builder.put(0x117b8f1b18eL, CustomPropertyImplementation);
    builder.put(0x3b7a2005a14cfe5eL, CustomSetterPropertyImplementation);
    builder.put(0x2724644c0ac833a5L, DefaultClassCreator);
    builder.put(0x117e0abf7abL, DefaultGetAccessor);
    builder.put(0x117b7633177L, DefaultPropertyImplementation);
    builder.put(0x117e16a7273L, DefaultSetAccessor);
    builder.put(0x113e4b2dfdaL, DimensionExpression);
    builder.put(0x617aa860be862ea4L, DivAssignmentExpression);
    builder.put(0xff2bbc13daL, DivExpression);
    builder.put(0x11232674988L, DoWhileStatement);
    builder.put(0x116b46a08c4L, DotExpression);
    builder.put(0xf940d451a6L, DoubleType);
    builder.put(0x118ceceb41aL, ElsifClause);
    builder.put(0xfc367070a5L, EnumClass);
    builder.put(0xfc367388b3L, EnumConstantDeclaration);
    builder.put(0xfc37588bc8L, EnumConstantReference);
    builder.put(0x11d1e5db156L, EnumValueOfExpression);
    builder.put(0x11d1e4bce56L, EnumValuesExpression);
    builder.put(0xf8cc56b210L, EqualsExpression);
    builder.put(0x144805fc3e36da43L, EscapeOperation);
    builder.put(0xf8c37f506fL, Expression);
    builder.put(0xf8cc56b213L, ExpressionStatement);
    builder.put(0xf8c108ca68L, FieldDeclaration);
    builder.put(0x116b483d77aL, FieldReferenceOperation);
    builder.put(0xf940d327fdL, FloatType);
    builder.put(0x102cb19a434L, FloatingPointConstant);
    builder.put(0x494547eeedc219b9L, FloatingPointFloatConstant);
    builder.put(0x10a698082feL, ForStatement);
    builder.put(0x10a6933ce33L, ForeachStatement);
    builder.put(0x102463b447aL, GenericDeclaration);
    builder.put(0x10ab8473cc5L, GenericNewExpression);
    builder.put(0x117b9245fc5L, GetAccessor);
    builder.put(0xfbced38fcfL, GreaterThanExpression);
    builder.put(0x10c8d0fac2cL, GreaterThanOrEqualsExpression);
    builder.put(0x114a6be947aL, HasAnnotation);
    builder.put(0x1129761e073L, HexIntegerLiteral);
    builder.put(0x2f89e470eed6258eL, IAnonymousClass);
    builder.put(0x11d2ea8a339L, IBLDeprecatable);
    builder.put(0x182da1771714863eL, IBinaryLike);
    builder.put(0x66c71d82c2eb113dL, IClassifier);
    builder.put(0x66c71d82c2eb113eL, IClassifierMember);
    builder.put(0x66c71d82c2eb7f7eL, IClassifierType);
    builder.put(0x3ac89e1b122cd5c2L, IConditional);
    builder.put(0x120237c2cebL, IContainsStatementList);
    builder.put(0x7c8556154508e980L, IControlFlowInterrupter);
    builder.put(0x11c60bb0a14L, IExtractMethodAvailable);
    builder.put(0x4dfebb23d6d75dcaL, IFinalWrapper);
    builder.put(0x38ff5220e0ac710dL, IGenericType);
    builder.put(0x203eeb62af522fa5L, IHasModifiers);
    builder.put(0xede3fe8510255edL, IIncompleteParen);
    builder.put(0x118cd59904dL, IInternalType);
    builder.put(0x2d45f01afccba89cL, ILocalDeclaration);
    builder.put(0x2d45f01afccba89dL, ILocalReference);
    builder.put(0x1206e6cc291L, ILocalVariableElement);
    builder.put(0x1206e9046e6L, ILocalVariableElementList);
    builder.put(0x11638b31955L, IMemberContainer);
    builder.put(0x11857355952L, IMethodCall);
    builder.put(0x1208f458d37L, IMethodLike);
    builder.put(0x116b46ac030L, IOperation);
    builder.put(0x11d486a1d9eL, IParameter);
    builder.put(0x74bdb321e1ee0043L, ISkipsReturn);
    builder.put(0x11750ef8265L, IStatementListContainer);
    builder.put(0x11c8f444674L, IStaticContainerForMethods);
    builder.put(0x11d206f8d91L, IThisExpression);
    builder.put(0x3399756d2c03d422L, ITryCatchStatement);
    builder.put(0x72de18bba2dc2a73L, ITypeApplicable);
    builder.put(0x11a3afa8c0dL, IValidIdentifier);
    builder.put(0x11cfb3b82a4L, IVariableAssignment);
    builder.put(0x4b64b50fb2fc7720L, IVariableDeclaration);
    builder.put(0xe34de34746464f2L, IVariableReference);
    builder.put(0x112670d273fL, IVisible);
    builder.put(0x3ff8b7a0d94242e1L, IWillBeClassifier);
    builder.put(0x70ea1dc4c5721865L, IYetUnresolved);
    builder.put(0xf8cc56b217L, IfStatement);
    builder.put(0x23cf7b405b3b9761L, ImplicitAnnotationInstanceValue);
    builder.put(0x5ce6f8ed8648519aL, ImplicitAnnotationMethodKind);
    builder.put(0x64a1ef64cd9b42ceL, IncompleteLeftParen);
    builder.put(0x32175ac2e6fcc181L, IncompleteMemberDeclaration);
    builder.put(0x2052c4520af308e1L, IncompleteRightParen);
    builder.put(0x118f0b909f7L, InstanceInitializer);
    builder.put(0x118154a6332L, InstanceMethodCallOperation);
    builder.put(0xf8cc56b21dL, InstanceMethodDeclaration);
    builder.put(0xfbbff03700L, InstanceOfExpression);
    builder.put(0xf8cc59b314L, IntegerConstant);
    builder.put(0x1129778b846L, IntegerLiteral);
    builder.put(0xf940d22479L, IntegerType);
    builder.put(0x101edd46144L, Interface);
    builder.put(0x11d47dd5e7aL, IsEmptyOperation);
    builder.put(0x11d47ddf763L, IsNotEmptyOperation);
    builder.put(0x64c0181e603bcfL, JavaImport);
    builder.put(0x53f7c33f069862f2L, JavaImports);
    builder.put(0x617aa860be862eaeL, LeftShiftAssignmentExpression);
    builder.put(0xfbced3b82aL, LessThanExpression);
    builder.put(0x10c8d53a915L, LessThanOrEqualsExpression);
    builder.put(0x6c0ba864df016178L, LocalInstanceFieldReference);
    builder.put(0x2a8fe0cadfaa8af2L, LocalInstanceMethodCall);
    builder.put(0x6c6b6a1e379f9404L, LocalMethodCall);
    builder.put(0x515d7a8d927e9fb3L, LocalPropertyReference);
    builder.put(0x110e12d8c7dL, LocalStaticFieldReference);
    builder.put(0x110e4207559L, LocalStaticMethodCall);
    builder.put(0x6f3ee8ef1412df0L, LocalToMethodKind);
    builder.put(0xf8cc67c7efL, LocalVariableDeclaration);
    builder.put(0xf8cc67c7f0L, LocalVariableDeclarationStatement);
    builder.put(0xf8cc67c7f2L, LocalVariableReference);
    builder.put(0x3b418722717710b4L, LongLiteral);
    builder.put(0xf8cc67c7f3L, LongType);
    builder.put(0x50c493bf9552f6aL, LoopLabel);
    builder.put(0x50c493bf9555129L, LoopLabelReference);
    builder.put(0x110dae9d53dL, LowerBoundType);
    builder.put(0x6c6b6a1e379f9408L, MethodDeclaration);
    builder.put(0x11b0d14a4eaL, MinusAssignmentExpression);
    builder.put(0xf8cc67c7f5L, MinusExpression);
    builder.put(0x21592d9e7375c5a6L, Modifier);
    builder.put(0x617aa860be8616ecL, MulAssignmentExpression);
    builder.put(0xfe476b758fL, MulExpression);
    builder.put(0x11d47dc0e3bL, NPEEqualsExpression);
    builder.put(0x11d47db1c91L, NPENotEqualsExpression);
    builder.put(0x650f9fedfcb5b664L, NestedNewExpression);
    builder.put(0xf9e20e303fL, NotEqualsExpression);
    builder.put(0xfbcf6bd10dL, NotExpression);
    builder.put(0xf940cd6167L, NullLiteral);
    builder.put(0x1185ff468caL, NullType);
    builder.put(0x10d68c2ecd3L, Number);
    builder.put(0x44cc327d2ca5cb08L, OperationAssignmentExpression);
    builder.put(0x617aa860be862ea8L, OrAssignmentExpression);
    builder.put(0xfb8255689fL, OrExpression);
    builder.put(0xf8c77f1e94L, ParameterDeclaration);
    builder.put(0xf8cc67c7faL, ParameterReference);
    builder.put(0xfb4ed32b7fL, ParenthesizedExpression);
    builder.put(0x1458378889e6d166L, PlaceholderMember);
    builder.put(0x11b0d1476d2L, PlusAssignmentExpression);
    builder.put(0xf8cc67c7fbL, PlusExpression);
    builder.put(0x11aded05fe6L, PostfixDecrementExpression);
    builder.put(0x11adecdb4f0L, PostfixIncrementExpression);
    builder.put(0x120a472f0e8L, PrefixDecrementExpression);
    builder.put(0x120a46df580L, PrefixIncrementExpression);
    builder.put(0x3f57ea36bd70a4e1L, PrimitiveClassExpression);
    builder.put(0x10f0ad8bde4L, PrimitiveType);
    builder.put(0x10af9586f0cL, PrivateVisibility);
    builder.put(0x117b744dafeL, Property);
    builder.put(0x117b75f36c8L, PropertyImplementation);
    builder.put(0x117b821eaaeL, PropertyReference);
    builder.put(0x2463999e524f3bf5L, PropertyValueReference);
    builder.put(0x10af958b686L, ProtectedVisibility);
    builder.put(0x10af9581ff1L, PublicVisibility);
    builder.put(0x37f722a7ce38076aL, QualifiedSuperMethodCall);
    builder.put(0x617aa860be862ea6L, RemAssignmentExpression);
    builder.put(0x10c8d509af4L, RemExpression);
    builder.put(0x1101757c8faL, RemarkStatement);
    builder.put(0xf8cc67c7feL, ReturnStatement);
    builder.put(0x617aa860be862eb0L, RightShiftAssignmentExpression);
    builder.put(0x117bd9ac3d9L, SetAccessor);
    builder.put(0x11d6cde9fb9L, ShiftLeftExpression);
    builder.put(0x11d6ce051dfL, ShiftRightExpression);
    builder.put(0x470fa5a7b03ac59L, ShiftRightUnsignedExpression);
    builder.put(0xf940cc380dL, ShortType);
    builder.put(0x57d533a7af15ed3aL, SingleLineComment);
    builder.put(0xf8cc56b215L, Statement);
    builder.put(0x57d533a7af16ff67L, StatementCommentPart);
    builder.put(0xf8cc56b200L, StatementList);
    builder.put(0xf93c84351fL, StaticFieldDeclaration);
    builder.put(0xf940c80846L, StaticFieldReference);
    builder.put(0x11c7538039dL, StaticInitializer);
    builder.put(0x427c475b3d6201deL, StaticKind);
    builder.put(0xfbbebabf09L, StaticMethodCall);
    builder.put(0xfbbebabf0aL, StaticMethodDeclaration);
    builder.put(0x11d47de7e99L, StringBooleanOperation);
    builder.put(0xf93d565d10L, StringLiteral);
    builder.put(0x5eb0cab441189a51L, StringToken);
    builder.put(0x11d47da71ecL, StringType);
    builder.put(0x4975dc2bdcfa0c49L, StubStatementList);
    builder.put(0x11d47df21f3L, SubstringExpression);
    builder.put(0xf93d512e1eL, SuperConstructorInvocation);
    builder.put(0x216400b63b2e0f21L, SuperConstructorKind);
    builder.put(0x73048d24d425f35eL, SuperInerfaceKind);
    builder.put(0xf9d78b55aaL, SuperMethodCall);
    builder.put(0x5bd477669f55a5a4L, SuperMethodKind);
    builder.put(0x10ef02cdd1bL, SwitchCase);
    builder.put(0x10ef02a8c6aL, SwitchStatement);
    builder.put(0x1106df1d8d8L, SynchronizedStatement);
    builder.put(0x10ef01239c9L, TernaryOperatorExpression);
    builder.put(0x57d533a7af15ed3dL, TextCommentPart);
    builder.put(0x1127b878882L, ThisConstructorInvocation);
    builder.put(0x216400b63b3173a4L, ThisConstructorKind);
    builder.put(0xf93d4da00cL, ThisExpression);
    builder.put(0x10f3ee082d8L, ThrowStatement);
    builder.put(0x5a98df4004080866L, Tokens);
    builder.put(0x11d47e0122aL, TrimOperation);
    builder.put(0x10f383e6771L, TryCatchStatement);
    builder.put(0x10cacebf556L, TryStatement);
    builder.put(0xf8c37f506dL, Type);
    builder.put(0x11f4b6b2435L, TypeAnnotable);
    builder.put(0x117ac2330f4L, TypeDerivable);
    builder.put(0x1024639ed74L, TypeVariableDeclaration);
    builder.put(0x102467229d8L, TypeVariableReference);
    builder.put(0x6fea7de6103549b1L, UnaryMinus);
    builder.put(0x431d52a5d09a4ea9L, UndefinedType);
    builder.put(0x7e4a5cff51167b74L, UnknownConsCall);
    builder.put(0x245faa02186fc7b5L, UnknownDotCall);
    builder.put(0x245faa02186fc5d6L, UnknownLocalCall);
    builder.put(0x759937a5973279b7L, UnknownNameRef);
    builder.put(0x2dda7700ec3ae154L, UnknownNew);
    builder.put(0x28e9fc3ba3fa3940L, UnresolvedNameReference);
    builder.put(0x470fa5a7b0ad087L, UnsignedRightShiftAssignmentExpression);
    builder.put(0x110daeaa84aL, UpperBoundType);
    builder.put(0x11d0053f19bL, UsingStatement);
    builder.put(0x117dd047c70L, ValueParameter);
    builder.put(0x112353ac52dL, VarType);
    builder.put(0x11c08f42e7bL, VariableArityType);
    builder.put(0xf8c37a7f6eL, VariableDeclaration);
    builder.put(0xf8c77f1e98L, VariableReference);
    builder.put(0x10af957d96eL, Visibility);
    builder.put(0xf8cc6bf96dL, VoidType);
    builder.put(0xfaa4bf0f2fL, WhileStatement);
    builder.put(0x110dae5f4a3L, WildCardType);
    builder.put(0x617aa860be862eacL, XorAssignmentExpression);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
