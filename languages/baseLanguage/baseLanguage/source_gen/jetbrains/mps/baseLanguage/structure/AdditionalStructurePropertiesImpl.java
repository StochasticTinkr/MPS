package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_AbstractClassifierReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AbstractCreator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AbstractForStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AbstractLoopStatement = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cb1ac5adeL, 0x11745b5371dL, "label")).create();
  private final AdditionalConceptProperties props_AbstractOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AbstractUnaryNumberOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AdditionalForLoopVariable = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AndAssignmentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AndExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Annotation = new ConceptPropsBuilder().icon("annotationtype.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_AnnotationInstance = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnnotationInstanceExpression = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_AnnotationInstanceValue = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnnotationMethodDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnonymousClass = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1107e0cb103L, 0x1107e0fd2a0L, "classifier")).icon("anonymousClass.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_AnonymousClassCreator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ArrayAccessExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ArrayClassExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ArrayCloneOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ArrayCreator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ArrayCreatorWithInitializer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ArrayLengthOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ArrayLiteral = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ArrayType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AsExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AssertStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AssignmentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BLBottomType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BaseAssignmentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BaseMethodCall = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BaseMethodDeclaration = new ConceptPropsBuilder().icon("method.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_BaseStringOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BaseVariableDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BaseVariableReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BinaryBitwiseOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BinaryCompareOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BinaryOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BitwiseAndExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BitwiseNotExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BitwiseOrExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BitwiseXorExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BlockStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BooleanConstant = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BooleanType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BreakStatement = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbe39a867fL, 0x11745bfb2d8L, "label")).create();
  private final AdditionalConceptProperties props_ByteType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CastExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CatchClause = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CharConstant = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CharType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ClassConcept = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, 0xfa5cee6dfaL, "abstractClass"), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, 0x11c6af4b284L, "isFinal"), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, 0x451f9e9f920b7f7dL, "isStatic")).icon("class.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_ClassCreator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Classifier = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x11a134c900dL, "nestedName"), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x11ce63f4b3bL, "isDeprecated"), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x73c6d8a8c021f99L, "nonStatic")).create();
  private final AdditionalConceptProperties props_ClassifierClassExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ClassifierMember = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ClassifierType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Closure = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ClosureParameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ClosureParameterReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Closureoid = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommentPart = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommentedStatement = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_CommentedStatementsBlock = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_ConceptFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptFunctionParameter = new ConceptPropsBuilder().icon("parameter.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_ConstructorDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstructorInvocationStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ContextClassifierKind = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ContinueStatement = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbf3043726L, 0x11745fca58eL, "label")).create();
  private final AdditionalConceptProperties props_CustomPropertyImplementation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CustomSetterPropertyImplementation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DefaultClassCreator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DefaultGetAccessor = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DefaultPropertyImplementation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DefaultSetAccessor = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DimensionExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DivAssignmentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DivExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DoWhileStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DotExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DoubleType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ElsifClause = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EnumClass = new ConceptPropsBuilder().icon("enum.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_EnumConstantDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EnumConstantReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EnumValueOfExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EnumValuesExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EqualsExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EscapeOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Expression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExpressionStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_FieldDeclaration = new ConceptPropsBuilder().icon("field.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_FieldReferenceOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_FloatType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_FloatingPointConstant = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_FloatingPointFloatConstant = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ForStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ForeachStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_GenericDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_GenericNewExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_GetAccessor = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_GreaterThanExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_GreaterThanOrEqualsExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_HasAnnotation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_HexIntegerLiteral = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IAnonymousClass = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IBLDeprecatable = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d2ea8a339L, 0x11d2ea948a4L, "isDeprecated")).create();
  private final AdditionalConceptProperties props_IBinaryLike = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IClassifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IClassifierMember = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IClassifierType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IConditional = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IContainsStatementList = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IControlFlowInterrupter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IExtractMethodAvailable = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IFinalWrapper = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IGenericType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IHasModifiers = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IIncompleteParen = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IInternalType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ILocalDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ILocalReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ILocalVariableElement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ILocalVariableElementList = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IMemberContainer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IMethodCall = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IMethodLike = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IParameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ISkipsReturn = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IStatementListContainer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IStaticContainerForMethods = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IThisExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ITryCatchStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ITypeApplicable = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IValidIdentifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IVariableAssignment = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IVariableDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IVariableReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IVisible = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IWillBeClassifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IYetUnresolved = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IfStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ImplicitAnnotationInstanceValue = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ImplicitAnnotationMethodKind = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IncompleteLeftParen = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IncompleteMemberDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IncompleteRightParen = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InstanceInitializer = new ConceptPropsBuilder().icon("classInitializer.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_InstanceMethodCallOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InstanceMethodDeclaration = new ConceptPropsBuilder().icon("method.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_InstanceOfExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IntegerConstant = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IntegerLiteral = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IntegerType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Interface = new ConceptPropsBuilder().icon("interfaceType.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_IsEmptyOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IsNotEmptyOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_JavaImport = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_JavaImports = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LeftShiftAssignmentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LessThanExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LessThanOrEqualsExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LocalInstanceFieldReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LocalInstanceMethodCall = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_LocalMethodCall = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LocalPropertyReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LocalStaticFieldReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LocalStaticMethodCall = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_LocalToMethodKind = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LocalVariableDeclaration = new ConceptPropsBuilder().icon("variable.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_LocalVariableDeclarationStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LocalVariableReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LongLiteral = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LongType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LoopLabel = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LoopLabelReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LowerBoundType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MethodDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MinusAssignmentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MinusExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Modifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MulAssignmentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MulExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NPEEqualsExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NPENotEqualsExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NestedNewExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NotEqualsExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NotExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NullLiteral = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NullType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Number = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OperationAssignmentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OrAssignmentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OrExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ParameterDeclaration = new ConceptPropsBuilder().icon("parameter.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_ParameterReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ParenthesizedExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PlaceholderMember = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PlusAssignmentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PlusExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PostfixDecrementExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PostfixIncrementExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PrefixDecrementExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PrefixIncrementExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PrimitiveClassExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PrimitiveType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PrivateVisibility = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Property = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PropertyImplementation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PropertyReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PropertyValueReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ProtectedVisibility = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PublicVisibility = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_QualifiedSuperMethodCall = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RemAssignmentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RemExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RemarkStatement = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_ReturnStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RightShiftAssignmentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SetAccessor = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ShiftLeftExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ShiftRightExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ShiftRightUnsignedExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ShortType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SingleLineComment = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Statement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StatementCommentPart = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_StatementList = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StaticFieldDeclaration = new ConceptPropsBuilder().icon("field.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_StaticFieldReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StaticInitializer = new ConceptPropsBuilder().icon("classInitializer.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_StaticKind = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StaticMethodCall = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StaticMethodDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StringBooleanOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StringLiteral = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StringToken = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StringType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StubStatementList = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SubstringExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SuperConstructorInvocation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SuperConstructorKind = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SuperInerfaceKind = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SuperMethodCall = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SuperMethodKind = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SwitchCase = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SwitchStatement = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02a8c6aL, 0x117b7e94b9bL, "label")).create();
  private final AdditionalConceptProperties props_SynchronizedStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TernaryOperatorExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TextCommentPart = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ThisConstructorInvocation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ThisConstructorKind = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ThisExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ThrowStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Tokens = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TrimOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TryCatchStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TryStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Type = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TypeAnnotable = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TypeDerivable = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TypeVariableDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TypeVariableReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UnaryMinus = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UndefinedType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UnknownConsCall = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UnknownDotCall = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UnknownLocalCall = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UnknownNameRef = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UnknownNew = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UnresolvedNameReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UnsignedRightShiftAssignmentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UpperBoundType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_UsingStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ValueParameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_VarType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_VariableArityType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_VariableDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_VariableReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Visibility = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_VoidType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_WhileStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_WildCardType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_XorAssignmentExpression = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0al.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractClassifierReference;
          }
          break;
        case 1:
          if (true) {
            return props_AbstractCreator;
          }
          break;
        case 2:
          if (true) {
            return props_AbstractForStatement;
          }
          break;
        case 3:
          if (true) {
            return props_AbstractLoopStatement;
          }
          break;
        case 4:
          if (true) {
            return props_AbstractOperation;
          }
          break;
        case 5:
          if (true) {
            return props_AbstractUnaryNumberOperation;
          }
          break;
        case 6:
          if (true) {
            return props_AdditionalForLoopVariable;
          }
          break;
        case 7:
          if (true) {
            return props_AndAssignmentExpression;
          }
          break;
        case 8:
          if (true) {
            return props_AndExpression;
          }
          break;
        case 9:
          if (true) {
            return props_Annotation;
          }
          break;
        case 10:
          if (true) {
            return props_AnnotationInstance;
          }
          break;
        case 11:
          if (true) {
            return props_AnnotationInstanceExpression;
          }
          break;
        case 12:
          if (true) {
            return props_AnnotationInstanceValue;
          }
          break;
        case 13:
          if (true) {
            return props_AnnotationMethodDeclaration;
          }
          break;
        case 14:
          if (true) {
            return props_AnonymousClass;
          }
          break;
        case 15:
          if (true) {
            return props_AnonymousClassCreator;
          }
          break;
        case 16:
          if (true) {
            return props_ArrayAccessExpression;
          }
          break;
        case 17:
          if (true) {
            return props_ArrayClassExpression;
          }
          break;
        case 18:
          if (true) {
            return props_ArrayCloneOperation;
          }
          break;
        case 19:
          if (true) {
            return props_ArrayCreator;
          }
          break;
        case 20:
          if (true) {
            return props_ArrayCreatorWithInitializer;
          }
          break;
        case 21:
          if (true) {
            return props_ArrayLengthOperation;
          }
          break;
        case 22:
          if (true) {
            return props_ArrayLiteral;
          }
          break;
        case 23:
          if (true) {
            return props_ArrayType;
          }
          break;
        case 24:
          if (true) {
            return props_AsExpression;
          }
          break;
        case 25:
          if (true) {
            return props_AssertStatement;
          }
          break;
        case 26:
          if (true) {
            return props_AssignmentExpression;
          }
          break;
        case 27:
          if (true) {
            return props_BLBottomType;
          }
          break;
        case 28:
          if (true) {
            return props_BaseAssignmentExpression;
          }
          break;
        case 29:
          if (true) {
            return props_BaseMethodCall;
          }
          break;
        case 30:
          if (true) {
            return props_BaseMethodDeclaration;
          }
          break;
        case 31:
          if (true) {
            return props_BaseStringOperation;
          }
          break;
        case 32:
          if (true) {
            return props_BaseVariableDeclaration;
          }
          break;
        case 33:
          if (true) {
            return props_BaseVariableReference;
          }
          break;
        case 34:
          if (true) {
            return props_BinaryBitwiseOperation;
          }
          break;
        case 35:
          if (true) {
            return props_BinaryCompareOperation;
          }
          break;
        case 36:
          if (true) {
            return props_BinaryOperation;
          }
          break;
        case 37:
          if (true) {
            return props_BitwiseAndExpression;
          }
          break;
        case 38:
          if (true) {
            return props_BitwiseNotExpression;
          }
          break;
        case 39:
          if (true) {
            return props_BitwiseOrExpression;
          }
          break;
        case 40:
          if (true) {
            return props_BitwiseXorExpression;
          }
          break;
        case 41:
          if (true) {
            return props_BlockStatement;
          }
          break;
        case 42:
          if (true) {
            return props_BooleanConstant;
          }
          break;
        case 43:
          if (true) {
            return props_BooleanType;
          }
          break;
        case 44:
          if (true) {
            return props_BreakStatement;
          }
          break;
        case 45:
          if (true) {
            return props_ByteType;
          }
          break;
        case 46:
          if (true) {
            return props_CastExpression;
          }
          break;
        case 47:
          if (true) {
            return props_CatchClause;
          }
          break;
        case 48:
          if (true) {
            return props_CharConstant;
          }
          break;
        case 49:
          if (true) {
            return props_CharType;
          }
          break;
        case 50:
          if (true) {
            return props_ClassConcept;
          }
          break;
        case 51:
          if (true) {
            return props_ClassCreator;
          }
          break;
        case 52:
          if (true) {
            return props_Classifier;
          }
          break;
        case 53:
          if (true) {
            return props_ClassifierClassExpression;
          }
          break;
        case 54:
          if (true) {
            return props_ClassifierMember;
          }
          break;
        case 55:
          if (true) {
            return props_ClassifierType;
          }
          break;
        case 56:
          if (true) {
            return props_Closure;
          }
          break;
        case 57:
          if (true) {
            return props_ClosureParameter;
          }
          break;
        case 58:
          if (true) {
            return props_ClosureParameterReference;
          }
          break;
        case 59:
          if (true) {
            return props_Closureoid;
          }
          break;
        case 60:
          if (true) {
            return props_CommentPart;
          }
          break;
        case 61:
          if (true) {
            return props_CommentedStatement;
          }
          break;
        case 62:
          if (true) {
            return props_CommentedStatementsBlock;
          }
          break;
        case 63:
          if (true) {
            return props_ConceptFunction;
          }
          break;
        case 64:
          if (true) {
            return props_ConceptFunctionParameter;
          }
          break;
        case 65:
          if (true) {
            return props_ConstructorDeclaration;
          }
          break;
        case 66:
          if (true) {
            return props_ConstructorInvocationStatement;
          }
          break;
        case 67:
          if (true) {
            return props_ContextClassifierKind;
          }
          break;
        case 68:
          if (true) {
            return props_ContinueStatement;
          }
          break;
        case 69:
          if (true) {
            return props_CustomPropertyImplementation;
          }
          break;
        case 70:
          if (true) {
            return props_CustomSetterPropertyImplementation;
          }
          break;
        case 71:
          if (true) {
            return props_DefaultClassCreator;
          }
          break;
        case 72:
          if (true) {
            return props_DefaultGetAccessor;
          }
          break;
        case 73:
          if (true) {
            return props_DefaultPropertyImplementation;
          }
          break;
        case 74:
          if (true) {
            return props_DefaultSetAccessor;
          }
          break;
        case 75:
          if (true) {
            return props_DimensionExpression;
          }
          break;
        case 76:
          if (true) {
            return props_DivAssignmentExpression;
          }
          break;
        case 77:
          if (true) {
            return props_DivExpression;
          }
          break;
        case 78:
          if (true) {
            return props_DoWhileStatement;
          }
          break;
        case 79:
          if (true) {
            return props_DotExpression;
          }
          break;
        case 80:
          if (true) {
            return props_DoubleType;
          }
          break;
        case 81:
          if (true) {
            return props_ElsifClause;
          }
          break;
        case 82:
          if (true) {
            return props_EnumClass;
          }
          break;
        case 83:
          if (true) {
            return props_EnumConstantDeclaration;
          }
          break;
        case 84:
          if (true) {
            return props_EnumConstantReference;
          }
          break;
        case 85:
          if (true) {
            return props_EnumValueOfExpression;
          }
          break;
        case 86:
          if (true) {
            return props_EnumValuesExpression;
          }
          break;
        case 87:
          if (true) {
            return props_EqualsExpression;
          }
          break;
        case 88:
          if (true) {
            return props_EscapeOperation;
          }
          break;
        case 89:
          if (true) {
            return props_Expression;
          }
          break;
        case 90:
          if (true) {
            return props_ExpressionStatement;
          }
          break;
        case 91:
          if (true) {
            return props_FieldDeclaration;
          }
          break;
        case 92:
          if (true) {
            return props_FieldReferenceOperation;
          }
          break;
        case 93:
          if (true) {
            return props_FloatType;
          }
          break;
        case 94:
          if (true) {
            return props_FloatingPointConstant;
          }
          break;
        case 95:
          if (true) {
            return props_FloatingPointFloatConstant;
          }
          break;
        case 96:
          if (true) {
            return props_ForStatement;
          }
          break;
        case 97:
          if (true) {
            return props_ForeachStatement;
          }
          break;
        case 98:
          if (true) {
            return props_GenericDeclaration;
          }
          break;
        case 99:
          if (true) {
            return props_GenericNewExpression;
          }
          break;
        case 100:
          if (true) {
            return props_GetAccessor;
          }
          break;
        case 101:
          if (true) {
            return props_GreaterThanExpression;
          }
          break;
        case 102:
          if (true) {
            return props_GreaterThanOrEqualsExpression;
          }
          break;
        case 103:
          if (true) {
            return props_HasAnnotation;
          }
          break;
        case 104:
          if (true) {
            return props_HexIntegerLiteral;
          }
          break;
        case 105:
          if (true) {
            return props_IAnonymousClass;
          }
          break;
        case 106:
          if (true) {
            return props_IBLDeprecatable;
          }
          break;
        case 107:
          if (true) {
            return props_IBinaryLike;
          }
          break;
        case 108:
          if (true) {
            return props_IClassifier;
          }
          break;
        case 109:
          if (true) {
            return props_IClassifierMember;
          }
          break;
        case 110:
          if (true) {
            return props_IClassifierType;
          }
          break;
        case 111:
          if (true) {
            return props_IConditional;
          }
          break;
        case 112:
          if (true) {
            return props_IContainsStatementList;
          }
          break;
        case 113:
          if (true) {
            return props_IControlFlowInterrupter;
          }
          break;
        case 114:
          if (true) {
            return props_IExtractMethodAvailable;
          }
          break;
        case 115:
          if (true) {
            return props_IFinalWrapper;
          }
          break;
        case 116:
          if (true) {
            return props_IGenericType;
          }
          break;
        case 117:
          if (true) {
            return props_IHasModifiers;
          }
          break;
        case 118:
          if (true) {
            return props_IIncompleteParen;
          }
          break;
        case 119:
          if (true) {
            return props_IInternalType;
          }
          break;
        case 120:
          if (true) {
            return props_ILocalDeclaration;
          }
          break;
        case 121:
          if (true) {
            return props_ILocalReference;
          }
          break;
        case 122:
          if (true) {
            return props_ILocalVariableElement;
          }
          break;
        case 123:
          if (true) {
            return props_ILocalVariableElementList;
          }
          break;
        case 124:
          if (true) {
            return props_IMemberContainer;
          }
          break;
        case 125:
          if (true) {
            return props_IMethodCall;
          }
          break;
        case 126:
          if (true) {
            return props_IMethodLike;
          }
          break;
        case 127:
          if (true) {
            return props_IOperation;
          }
          break;
        case 128:
          if (true) {
            return props_IParameter;
          }
          break;
        case 129:
          if (true) {
            return props_ISkipsReturn;
          }
          break;
        case 130:
          if (true) {
            return props_IStatementListContainer;
          }
          break;
        case 131:
          if (true) {
            return props_IStaticContainerForMethods;
          }
          break;
        case 132:
          if (true) {
            return props_IThisExpression;
          }
          break;
        case 133:
          if (true) {
            return props_ITryCatchStatement;
          }
          break;
        case 134:
          if (true) {
            return props_ITypeApplicable;
          }
          break;
        case 135:
          if (true) {
            return props_IValidIdentifier;
          }
          break;
        case 136:
          if (true) {
            return props_IVariableAssignment;
          }
          break;
        case 137:
          if (true) {
            return props_IVariableDeclaration;
          }
          break;
        case 138:
          if (true) {
            return props_IVariableReference;
          }
          break;
        case 139:
          if (true) {
            return props_IVisible;
          }
          break;
        case 140:
          if (true) {
            return props_IWillBeClassifier;
          }
          break;
        case 141:
          if (true) {
            return props_IYetUnresolved;
          }
          break;
        case 142:
          if (true) {
            return props_IfStatement;
          }
          break;
        case 143:
          if (true) {
            return props_ImplicitAnnotationInstanceValue;
          }
          break;
        case 144:
          if (true) {
            return props_ImplicitAnnotationMethodKind;
          }
          break;
        case 145:
          if (true) {
            return props_IncompleteLeftParen;
          }
          break;
        case 146:
          if (true) {
            return props_IncompleteMemberDeclaration;
          }
          break;
        case 147:
          if (true) {
            return props_IncompleteRightParen;
          }
          break;
        case 148:
          if (true) {
            return props_InstanceInitializer;
          }
          break;
        case 149:
          if (true) {
            return props_InstanceMethodCallOperation;
          }
          break;
        case 150:
          if (true) {
            return props_InstanceMethodDeclaration;
          }
          break;
        case 151:
          if (true) {
            return props_InstanceOfExpression;
          }
          break;
        case 152:
          if (true) {
            return props_IntegerConstant;
          }
          break;
        case 153:
          if (true) {
            return props_IntegerLiteral;
          }
          break;
        case 154:
          if (true) {
            return props_IntegerType;
          }
          break;
        case 155:
          if (true) {
            return props_Interface;
          }
          break;
        case 156:
          if (true) {
            return props_IsEmptyOperation;
          }
          break;
        case 157:
          if (true) {
            return props_IsNotEmptyOperation;
          }
          break;
        case 158:
          if (true) {
            return props_JavaImport;
          }
          break;
        case 159:
          if (true) {
            return props_JavaImports;
          }
          break;
        case 160:
          if (true) {
            return props_LeftShiftAssignmentExpression;
          }
          break;
        case 161:
          if (true) {
            return props_LessThanExpression;
          }
          break;
        case 162:
          if (true) {
            return props_LessThanOrEqualsExpression;
          }
          break;
        case 163:
          if (true) {
            return props_LocalInstanceFieldReference;
          }
          break;
        case 164:
          if (true) {
            return props_LocalInstanceMethodCall;
          }
          break;
        case 165:
          if (true) {
            return props_LocalMethodCall;
          }
          break;
        case 166:
          if (true) {
            return props_LocalPropertyReference;
          }
          break;
        case 167:
          if (true) {
            return props_LocalStaticFieldReference;
          }
          break;
        case 168:
          if (true) {
            return props_LocalStaticMethodCall;
          }
          break;
        case 169:
          if (true) {
            return props_LocalToMethodKind;
          }
          break;
        case 170:
          if (true) {
            return props_LocalVariableDeclaration;
          }
          break;
        case 171:
          if (true) {
            return props_LocalVariableDeclarationStatement;
          }
          break;
        case 172:
          if (true) {
            return props_LocalVariableReference;
          }
          break;
        case 173:
          if (true) {
            return props_LongLiteral;
          }
          break;
        case 174:
          if (true) {
            return props_LongType;
          }
          break;
        case 175:
          if (true) {
            return props_LoopLabel;
          }
          break;
        case 176:
          if (true) {
            return props_LoopLabelReference;
          }
          break;
        case 177:
          if (true) {
            return props_LowerBoundType;
          }
          break;
        case 178:
          if (true) {
            return props_MethodDeclaration;
          }
          break;
        case 179:
          if (true) {
            return props_MinusAssignmentExpression;
          }
          break;
        case 180:
          if (true) {
            return props_MinusExpression;
          }
          break;
        case 181:
          if (true) {
            return props_Modifier;
          }
          break;
        case 182:
          if (true) {
            return props_MulAssignmentExpression;
          }
          break;
        case 183:
          if (true) {
            return props_MulExpression;
          }
          break;
        case 184:
          if (true) {
            return props_NPEEqualsExpression;
          }
          break;
        case 185:
          if (true) {
            return props_NPENotEqualsExpression;
          }
          break;
        case 186:
          if (true) {
            return props_NestedNewExpression;
          }
          break;
        case 187:
          if (true) {
            return props_NotEqualsExpression;
          }
          break;
        case 188:
          if (true) {
            return props_NotExpression;
          }
          break;
        case 189:
          if (true) {
            return props_NullLiteral;
          }
          break;
        case 190:
          if (true) {
            return props_NullType;
          }
          break;
        case 191:
          if (true) {
            return props_Number;
          }
          break;
        case 192:
          if (true) {
            return props_OperationAssignmentExpression;
          }
          break;
        case 193:
          if (true) {
            return props_OrAssignmentExpression;
          }
          break;
        case 194:
          if (true) {
            return props_OrExpression;
          }
          break;
        case 195:
          if (true) {
            return props_ParameterDeclaration;
          }
          break;
        case 196:
          if (true) {
            return props_ParameterReference;
          }
          break;
        case 197:
          if (true) {
            return props_ParenthesizedExpression;
          }
          break;
        case 198:
          if (true) {
            return props_PlaceholderMember;
          }
          break;
        case 199:
          if (true) {
            return props_PlusAssignmentExpression;
          }
          break;
        case 200:
          if (true) {
            return props_PlusExpression;
          }
          break;
        case 201:
          if (true) {
            return props_PostfixDecrementExpression;
          }
          break;
        case 202:
          if (true) {
            return props_PostfixIncrementExpression;
          }
          break;
        case 203:
          if (true) {
            return props_PrefixDecrementExpression;
          }
          break;
        case 204:
          if (true) {
            return props_PrefixIncrementExpression;
          }
          break;
        case 205:
          if (true) {
            return props_PrimitiveClassExpression;
          }
          break;
        case 206:
          if (true) {
            return props_PrimitiveType;
          }
          break;
        case 207:
          if (true) {
            return props_PrivateVisibility;
          }
          break;
        case 208:
          if (true) {
            return props_Property;
          }
          break;
        case 209:
          if (true) {
            return props_PropertyImplementation;
          }
          break;
        case 210:
          if (true) {
            return props_PropertyReference;
          }
          break;
        case 211:
          if (true) {
            return props_PropertyValueReference;
          }
          break;
        case 212:
          if (true) {
            return props_ProtectedVisibility;
          }
          break;
        case 213:
          if (true) {
            return props_PublicVisibility;
          }
          break;
        case 214:
          if (true) {
            return props_QualifiedSuperMethodCall;
          }
          break;
        case 215:
          if (true) {
            return props_RemAssignmentExpression;
          }
          break;
        case 216:
          if (true) {
            return props_RemExpression;
          }
          break;
        case 217:
          if (true) {
            return props_RemarkStatement;
          }
          break;
        case 218:
          if (true) {
            return props_ReturnStatement;
          }
          break;
        case 219:
          if (true) {
            return props_RightShiftAssignmentExpression;
          }
          break;
        case 220:
          if (true) {
            return props_SetAccessor;
          }
          break;
        case 221:
          if (true) {
            return props_ShiftLeftExpression;
          }
          break;
        case 222:
          if (true) {
            return props_ShiftRightExpression;
          }
          break;
        case 223:
          if (true) {
            return props_ShiftRightUnsignedExpression;
          }
          break;
        case 224:
          if (true) {
            return props_ShortType;
          }
          break;
        case 225:
          if (true) {
            return props_SingleLineComment;
          }
          break;
        case 226:
          if (true) {
            return props_Statement;
          }
          break;
        case 227:
          if (true) {
            return props_StatementCommentPart;
          }
          break;
        case 228:
          if (true) {
            return props_StatementList;
          }
          break;
        case 229:
          if (true) {
            return props_StaticFieldDeclaration;
          }
          break;
        case 230:
          if (true) {
            return props_StaticFieldReference;
          }
          break;
        case 231:
          if (true) {
            return props_StaticInitializer;
          }
          break;
        case 232:
          if (true) {
            return props_StaticKind;
          }
          break;
        case 233:
          if (true) {
            return props_StaticMethodCall;
          }
          break;
        case 234:
          if (true) {
            return props_StaticMethodDeclaration;
          }
          break;
        case 235:
          if (true) {
            return props_StringBooleanOperation;
          }
          break;
        case 236:
          if (true) {
            return props_StringLiteral;
          }
          break;
        case 237:
          if (true) {
            return props_StringToken;
          }
          break;
        case 238:
          if (true) {
            return props_StringType;
          }
          break;
        case 239:
          if (true) {
            return props_StubStatementList;
          }
          break;
        case 240:
          if (true) {
            return props_SubstringExpression;
          }
          break;
        case 241:
          if (true) {
            return props_SuperConstructorInvocation;
          }
          break;
        case 242:
          if (true) {
            return props_SuperConstructorKind;
          }
          break;
        case 243:
          if (true) {
            return props_SuperInerfaceKind;
          }
          break;
        case 244:
          if (true) {
            return props_SuperMethodCall;
          }
          break;
        case 245:
          if (true) {
            return props_SuperMethodKind;
          }
          break;
        case 246:
          if (true) {
            return props_SwitchCase;
          }
          break;
        case 247:
          if (true) {
            return props_SwitchStatement;
          }
          break;
        case 248:
          if (true) {
            return props_SynchronizedStatement;
          }
          break;
        case 249:
          if (true) {
            return props_TernaryOperatorExpression;
          }
          break;
        case 250:
          if (true) {
            return props_TextCommentPart;
          }
          break;
        case 251:
          if (true) {
            return props_ThisConstructorInvocation;
          }
          break;
        case 252:
          if (true) {
            return props_ThisConstructorKind;
          }
          break;
        case 253:
          if (true) {
            return props_ThisExpression;
          }
          break;
        case 254:
          if (true) {
            return props_ThrowStatement;
          }
          break;
        case 255:
          if (true) {
            return props_Tokens;
          }
          break;
        case 256:
          if (true) {
            return props_TrimOperation;
          }
          break;
        case 257:
          if (true) {
            return props_TryCatchStatement;
          }
          break;
        case 258:
          if (true) {
            return props_TryStatement;
          }
          break;
        case 259:
          if (true) {
            return props_Type;
          }
          break;
        case 260:
          if (true) {
            return props_TypeAnnotable;
          }
          break;
        case 261:
          if (true) {
            return props_TypeDerivable;
          }
          break;
        case 262:
          if (true) {
            return props_TypeVariableDeclaration;
          }
          break;
        case 263:
          if (true) {
            return props_TypeVariableReference;
          }
          break;
        case 264:
          if (true) {
            return props_UnaryMinus;
          }
          break;
        case 265:
          if (true) {
            return props_UndefinedType;
          }
          break;
        case 266:
          if (true) {
            return props_UnknownConsCall;
          }
          break;
        case 267:
          if (true) {
            return props_UnknownDotCall;
          }
          break;
        case 268:
          if (true) {
            return props_UnknownLocalCall;
          }
          break;
        case 269:
          if (true) {
            return props_UnknownNameRef;
          }
          break;
        case 270:
          if (true) {
            return props_UnknownNew;
          }
          break;
        case 271:
          if (true) {
            return props_UnresolvedNameReference;
          }
          break;
        case 272:
          if (true) {
            return props_UnsignedRightShiftAssignmentExpression;
          }
          break;
        case 273:
          if (true) {
            return props_UpperBoundType;
          }
          break;
        case 274:
          if (true) {
            return props_UsingStatement;
          }
          break;
        case 275:
          if (true) {
            return props_ValueParameter;
          }
          break;
        case 276:
          if (true) {
            return props_VarType;
          }
          break;
        case 277:
          if (true) {
            return props_VariableArityType;
          }
          break;
        case 278:
          if (true) {
            return props_VariableDeclaration;
          }
          break;
        case 279:
          if (true) {
            return props_VariableReference;
          }
          break;
        case 280:
          if (true) {
            return props_Visibility;
          }
          break;
        case 281:
          if (true) {
            return props_VoidType;
          }
          break;
        case 282:
          if (true) {
            return props_WhileStatement;
          }
          break;
        case 283:
          if (true) {
            return props_WildCardType;
          }
          break;
        case 284:
          if (true) {
            return props_XorAssignmentExpression;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0al = buildConceptIndices(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c6c91efa5ec8cd7L, "AbstractClassifierReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ab844af9bL, "AbstractCreator"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a697996feL, "AbstractForStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cb1ac5adeL, "AbstractLoopStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1196792d150L, "AbstractOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x120a4c1f269L, "AbstractUnaryNumberOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x19659b074928781eL, "AdditionalForLoopVariable"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x617aa860be862eaaL, "AndAssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfb7c3070eeL, "AndExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a69dc80cL, "Annotation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a6b4ccabL, "AnnotationInstance"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a71a2770L, "AnnotationInstanceExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a71b1af4L, "AnnotationInstanceValue"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a6a17a27L, "AnnotationMethodDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1107e0cb103L, "AnonymousClass"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1133e3b449aL, "AnonymousClassCreator"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11126b40c25L, "ArrayAccessExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x115f7830a32a65e7L, "ArrayClassExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x483ee9d7f09580d6L, "ArrayCloneOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x113e4952f12L, "ArrayCreator"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cd01b77ddL, "ArrayCreatorWithInitializer"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1197781411dL, "ArrayLengthOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a770dc0dL, "ArrayLiteral"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, "ArrayType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d00538bdfL, "AsExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10e50ecba3dL, "AssertStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e96L, "AssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1210c38a8adL, "BLBottomType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11b0d00332cL, "BaseAssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c78301acL, "BaseMethodCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "BaseMethodDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47dc8da1L, "BaseStringOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, "BaseVariableDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x4c4b92003e49a704L, "BaseVariableReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d19ec0c2fL, "BinaryBitwiseOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x12094ea9f7dL, "BinaryCompareOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL, "BinaryOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d19eede01L, "BitwiseAndExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d6d026f5fL, "BitwiseNotExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d19ef4652L, "BitwiseOrExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d19ef69abL, "BitwiseXorExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc092b6b77L, "BlockStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b201L, "BooleanConstant"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d6513eL, "BooleanType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbe39a867fL, "BreakStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d5b617L, "ByteType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940dabe4aL, "CastExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f39a56e2fL, "CatchClause"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1177d44b21bL, "CharConstant"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d4f826L, "CharType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "ClassConcept"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a59b0fbceL, "ClassCreator"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "Classifier"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x103fb730c14L, "ClassifierClassExpression"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112574373bdL, "ClassifierMember"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "ClassifierType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c63f4f3f3L, "Closure"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c7edb2aa8L, "ClosureParameter"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c7edba8b3L, "ClosureParameterReference"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1192e7dfdd1L, "Closureoid"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3bL, "CommentPart"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11ef4675fccL, "CommentedStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1121e2102fdL, "CommentedStatementsBlock"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L, "ConceptFunction"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL, "ConceptFunctionParameter"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L, "ConstructorDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x121119ae5ffL, "ConstructorInvocationStatement"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x32e8e5805c50376L, "ContextClassifierKind"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbf3043726L, "ContinueStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b8f1b18eL, "CustomPropertyImplementation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3b7a2005a14cfe5eL, "CustomSetterPropertyImplementation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2724644c0ac833a5L, "DefaultClassCreator"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117e0abf7abL, "DefaultGetAccessor"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b7633177L, "DefaultPropertyImplementation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117e16a7273L, "DefaultSetAccessor"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x113e4b2dfdaL, "DimensionExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x617aa860be862ea4L, "DivAssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xff2bbc13daL, "DivExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11232674988L, "DoWhileStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, "DotExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d451a6L, "DoubleType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118ceceb41aL, "ElsifClause"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367070a5L, "EnumClass"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc367388b3L, "EnumConstantDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc37588bc8L, "EnumConstantReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d1e5db156L, "EnumValueOfExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d1e4bce56L, "EnumValuesExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b210L, "EqualsExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x144805fc3e36da43L, "EscapeOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL, "Expression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, "ExpressionStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca68L, "FieldDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b483d77aL, "FieldReferenceOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d327fdL, "FloatType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102cb19a434L, "FloatingPointConstant"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x494547eeedc219b9L, "FloatingPointFloatConstant"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a698082feL, "ForStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a6933ce33L, "ForeachStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102463b447aL, "GenericDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ab8473cc5L, "GenericNewExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b9245fc5L, "GetAccessor"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbced38fcfL, "GreaterThanExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c8d0fac2cL, "GreaterThanOrEqualsExpression"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x114a6be947aL, "HasAnnotation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1129761e073L, "HexIntegerLiteral"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2f89e470eed6258eL, "IAnonymousClass"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d2ea8a339L, "IBLDeprecatable"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x182da1771714863eL, "IBinaryLike"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x66c71d82c2eb113dL, "IClassifier"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x66c71d82c2eb113eL, "IClassifierMember"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x66c71d82c2eb7f7eL, "IClassifierType"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3ac89e1b122cd5c2L, "IConditional"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x120237c2cebL, "IContainsStatementList"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x7c8556154508e980L, "IControlFlowInterrupter"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11c60bb0a14L, "IExtractMethodAvailable"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x4dfebb23d6d75dcaL, "IFinalWrapper"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x38ff5220e0ac710dL, "IGenericType"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x203eeb62af522fa5L, "IHasModifiers"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xede3fe8510255edL, "IIncompleteParen"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118cd59904dL, "IInternalType"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2d45f01afccba89cL, "ILocalDeclaration"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2d45f01afccba89dL, "ILocalReference"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1206e6cc291L, "ILocalVariableElement"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1206e9046e6L, "ILocalVariableElementList"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11638b31955L, "IMemberContainer"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, "IMethodCall"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1208f458d37L, "IMethodLike"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L, "IOperation"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d486a1d9eL, "IParameter"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x74bdb321e1ee0043L, "ISkipsReturn"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11750ef8265L, "IStatementListContainer"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11c8f444674L, "IStaticContainerForMethods"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d206f8d91L, "IThisExpression"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3399756d2c03d422L, "ITryCatchStatement"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x72de18bba2dc2a73L, "ITypeApplicable"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL, "IValidIdentifier"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11cfb3b82a4L, "IVariableAssignment"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x4b64b50fb2fc7720L, "IVariableDeclaration"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xe34de34746464f2L, "IVariableReference"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112670d273fL, "IVisible"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3ff8b7a0d94242e1L, "IWillBeClassifier"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x70ea1dc4c5721865L, "IYetUnresolved"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, "IfStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x23cf7b405b3b9761L, "ImplicitAnnotationInstanceValue"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x5ce6f8ed8648519aL, "ImplicitAnnotationMethodKind"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x64a1ef64cd9b42ceL, "IncompleteLeftParen"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x32175ac2e6fcc181L, "IncompleteMemberDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2052c4520af308e1L, "IncompleteRightParen"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118f0b909f7L, "InstanceInitializer"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, "InstanceMethodCallOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, "InstanceMethodDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbff03700L, "InstanceOfExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, "IntegerConstant"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1129778b846L, "IntegerLiteral"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d22479L, "IntegerType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101edd46144L, "Interface"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47dd5e7aL, "IsEmptyOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47ddf763L, "IsNotEmptyOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x64c0181e603bcfL, "JavaImport"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x53f7c33f069862f2L, "JavaImports"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x617aa860be862eaeL, "LeftShiftAssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbced3b82aL, "LessThanExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c8d53a915L, "LessThanOrEqualsExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c0ba864df016178L, "LocalInstanceFieldReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2a8fe0cadfaa8af2L, "LocalInstanceMethodCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c6b6a1e379f9404L, "LocalMethodCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x515d7a8d927e9fb3L, "LocalPropertyReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110e12d8c7dL, "LocalStaticFieldReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110e4207559L, "LocalStaticMethodCall"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6f3ee8ef1412df0L, "LocalToMethodKind"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL, "LocalVariableDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, "LocalVariableDeclarationStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f2L, "LocalVariableReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3b418722717710b4L, "LongLiteral"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f3L, "LongType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x50c493bf9552f6aL, "LoopLabel"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x50c493bf9555129L, "LoopLabelReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110dae9d53dL, "LowerBoundType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6c6b6a1e379f9408L, "MethodDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11b0d14a4eaL, "MinusAssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f5L, "MinusExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x21592d9e7375c5a6L, "Modifier"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x617aa860be8616ecL, "MulAssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfe476b758fL, "MulExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47dc0e3bL, "NPEEqualsExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47db1c91L, "NPENotEqualsExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x650f9fedfcb5b664L, "NestedNewExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf9e20e303fL, "NotEqualsExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbcf6bd10dL, "NotExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940cd6167L, "NullLiteral"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1185ff468caL, "NullType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10d68c2ecd3L, "Number"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x44cc327d2ca5cb08L, "OperationAssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x617aa860be862ea8L, "OrAssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfb8255689fL, "OrExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L, "ParameterDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7faL, "ParameterReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfb4ed32b7fL, "ParenthesizedExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1458378889e6d166L, "PlaceholderMember"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11b0d1476d2L, "PlusAssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7fbL, "PlusExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11aded05fe6L, "PostfixDecrementExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11adecdb4f0L, "PostfixIncrementExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x120a472f0e8L, "PrefixDecrementExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x120a46df580L, "PrefixIncrementExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x3f57ea36bd70a4e1L, "PrimitiveClassExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f0ad8bde4L, "PrimitiveType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10af9586f0cL, "PrivateVisibility"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b744dafeL, "Property"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b75f36c8L, "PropertyImplementation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b821eaaeL, "PropertyReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2463999e524f3bf5L, "PropertyValueReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10af958b686L, "ProtectedVisibility"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10af9581ff1L, "PublicVisibility"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x37f722a7ce38076aL, "QualifiedSuperMethodCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x617aa860be862ea6L, "RemAssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c8d509af4L, "RemExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1101757c8faL, "RemarkStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7feL, "ReturnStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x617aa860be862eb0L, "RightShiftAssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117bd9ac3d9L, "SetAccessor"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d6cde9fb9L, "ShiftLeftExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d6ce051dfL, "ShiftRightExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x470fa5a7b03ac59L, "ShiftRightUnsignedExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940cc380dL, "ShortType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3aL, "SingleLineComment"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L, "Statement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af16ff67L, "StatementCommentPart"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, "StatementList"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93c84351fL, "StaticFieldDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940c80846L, "StaticFieldReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11c7538039dL, "StaticInitializer"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x427c475b3d6201deL, "StaticKind"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbebabf09L, "StaticMethodCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbebabf0aL, "StaticMethodDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47de7e99L, "StringBooleanOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d565d10L, "StringLiteral"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x5eb0cab441189a51L, "StringToken"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47da71ecL, "StringType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x4975dc2bdcfa0c49L, "StubStatementList"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47df21f3L, "SubstringExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d512e1eL, "SuperConstructorInvocation"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x216400b63b2e0f21L, "SuperConstructorKind"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x73048d24d425f35eL, "SuperInerfaceKind"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf9d78b55aaL, "SuperMethodCall"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x5bd477669f55a5a4L, "SuperMethodKind"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02cdd1bL, "SwitchCase"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02a8c6aL, "SwitchStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1106df1d8d8L, "SynchronizedStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef01239c9L, "TernaryOperatorExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x57d533a7af15ed3dL, "TextCommentPart"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1127b878882L, "ThisConstructorInvocation"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x216400b63b3173a4L, "ThisConstructorKind"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d4da00cL, "ThisExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f3ee082d8L, "ThrowStatement"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x5a98df4004080866L, "Tokens"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d47e0122aL, "TrimOperation"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f383e6771L, "TryCatchStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cacebf556L, "TryStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL, "Type"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11f4b6b2435L, "TypeAnnotable"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117ac2330f4L, "TypeDerivable"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1024639ed74L, "TypeVariableDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, "TypeVariableReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x6fea7de6103549b1L, "UnaryMinus"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x431d52a5d09a4ea9L, "UndefinedType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x7e4a5cff51167b74L, "UnknownConsCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x245faa02186fc7b5L, "UnknownDotCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x245faa02186fc5d6L, "UnknownLocalCall"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x759937a5973279b7L, "UnknownNameRef"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x2dda7700ec3ae154L, "UnknownNew"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x28e9fc3ba3fa3940L, "UnresolvedNameReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x470fa5a7b0ad087L, "UnsignedRightShiftAssignmentExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110daeaa84aL, "UpperBoundType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d0053f19bL, "UsingStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117dd047c70L, "ValueParameter"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112353ac52dL, "VarType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11c08f42e7bL, "VariableArityType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, "VariableDeclaration"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, "VariableReference"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10af957d96eL, "Visibility"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc6bf96dL, "VoidType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfaa4bf0f2fL, "WhileStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x110dae5f4a3L, "WildCardType"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x617aa860be862eacL, "XorAssignmentExpression"));
}
