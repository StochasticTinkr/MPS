package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractClassifierReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractForStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractLoopStatement = new ConceptPresentationBuilder(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cb1ac5adeL).deprecateProperty(0x11745b5371dL, "label").create();
  private final ConceptPresentation props_AbstractOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractUnaryNumberOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AdditionalForLoopVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AndAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AndExpression = new ConceptPresentationBuilder().shortDesc("conditional-and operation").create();
  private final ConceptPresentation props_Annotation = new ConceptPresentationBuilder().shortDesc("Annotation declaration").icon(IconContainer.RESOURCE_a0a0j).create();
  private final ConceptPresentation props_AnnotationInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnnotationInstanceExpression = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_AnnotationInstanceValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnnotationMethodDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnonymousClass = new ConceptPresentationBuilder(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1107e0cb103L).deprecateAggregation(0x1107e104a89L, "parameter").shortDesc("anonymous class").icon(IconContainer.RESOURCE_a0a0o).create();
  private final ConceptPresentation props_AnonymousClassCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArrayAccessExpression = new ConceptPresentationBuilder().shortDesc("array access expression").create();
  private final ConceptPresentation props_ArrayClassExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArrayCloneOperation = new ConceptPresentationBuilder().shortDesc("special public method of array").create();
  private final ConceptPresentation props_ArrayCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArrayCreatorWithInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArrayLengthOperation = new ConceptPresentationBuilder().shortDesc("array length readonly property").create();
  private final ConceptPresentation props_ArrayLiteral = new ConceptPresentationBuilder().shortDesc("array literal").create();
  private final ConceptPresentation props_ArrayType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AsExpression = new ConceptPresentationBuilder().shortDesc("type case expression or return null").create();
  private final ConceptPresentation props_AssertStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BLBottomType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseMethodDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0eb).create();
  private final ConceptPresentation props_BaseStringOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryBitwiseOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryCompareOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryOperation = new ConceptPresentationBuilder().shortDesc("abstract binary operation").create();
  private final ConceptPresentation props_BitwiseAndExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BitwiseNotExpression = new ConceptPresentationBuilder().shortDesc("bitwise not-expression").create();
  private final ConceptPresentation props_BitwiseOrExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BitwiseXorExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BlockStatement = new ConceptPresentationBuilder().shortDesc("block statement").create();
  private final ConceptPresentation props_BooleanConstant = new ConceptPresentationBuilder().shortDesc("boolean constant").create();
  private final ConceptPresentation props_BooleanType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BreakStatement = new ConceptPresentationBuilder(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbe39a867fL).deprecateProperty(0x11745bfb2d8L, "label").create();
  private final ConceptPresentation props_ByteType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CastExpression = new ConceptPresentationBuilder().shortDesc("type cast expression").create();
  private final ConceptPresentation props_CatchClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CharConstant = new ConceptPresentationBuilder().shortDesc("char constant").create();
  private final ConceptPresentation props_CharType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClassConcept = new ConceptPresentationBuilder(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L).deprecateAggregation(0xf8c108ca67L, "field").shortDesc("Class declaration").icon(IconContainer.RESOURCE_a0a0yb).create();
  private final ConceptPresentation props_ClassCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Classifier = new ConceptPresentationBuilder(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L).deprecateAggregation(0x106c32c4395L, "staticField").create();
  private final ConceptPresentation props_ClassifierClassExpression = new ConceptPresentationBuilder().shortDesc("class of node operation").create();
  private final ConceptPresentation props_ClassifierMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClassifierType = new ConceptPresentationBuilder().shortDesc("reference to classifier").create();
  private final ConceptPresentation props_Closure = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClosureParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClosureParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Closureoid = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommentPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommentedStatement = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_CommentedStatementsBlock = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_ConceptFunction = new ConceptPresentationBuilder().shortDesc("embedded block of code").create();
  private final ConceptPresentation props_ConceptFunctionParameter = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0mc).create();
  private final ConceptPresentation props_ConstructorDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstructorInvocationStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextClassifierKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContinueStatement = new ConceptPresentationBuilder(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbf3043726L).deprecateProperty(0x11745fca58eL, "label").create();
  private final ConceptPresentation props_CustomPropertyImplementation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomSetterPropertyImplementation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultClassCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultGetAccessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultPropertyImplementation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultSetAccessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DimensionExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DivAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DivExpression = new ConceptPresentationBuilder().shortDesc("divide operation").create();
  private final ConceptPresentation props_DoWhileStatement = new ConceptPresentationBuilder().shortDesc("do... while loop").create();
  private final ConceptPresentation props_DotExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DoubleType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ElsifClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumClass = new ConceptPresentationBuilder().shortDesc("Enumeration class declaration").icon(IconContainer.RESOURCE_a0a0ed).create();
  private final ConceptPresentation props_EnumConstantDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumConstantReference = new ConceptPresentationBuilder().shortDesc("enumeration constant reference").create();
  private final ConceptPresentation props_EnumValueOfExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumValuesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EqualsExpression = new ConceptPresentationBuilder().shortDesc("equals operation").create();
  private final ConceptPresentation props_EscapeOperation = new ConceptPresentationBuilder().shortDesc("escape quotation marks, back slashes, etc.").create();
  private final ConceptPresentation props_Expression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExpressionStatement = new ConceptPresentationBuilder().shortDesc("expression statement").create();
  private final ConceptPresentation props_FieldDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0nd).create();
  private final ConceptPresentation props_FieldReferenceOperation = new ConceptPresentationBuilder().shortDesc("instance field reference").create();
  private final ConceptPresentation props_FloatType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FloatingPointConstant = new ConceptPresentationBuilder().shortDesc("floating point constant (double)").create();
  private final ConceptPresentation props_FloatingPointFloatConstant = new ConceptPresentationBuilder().shortDesc("floating point constant (float) ").create();
  private final ConceptPresentation props_ForStatement = new ConceptPresentationBuilder().shortDesc("for(type name = init; condition; update)").create();
  private final ConceptPresentation props_ForeachStatement = new ConceptPresentationBuilder().shortDesc("for (type name : iterable)").create();
  private final ConceptPresentation props_GenericDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenericNewExpression = new ConceptPresentationBuilder().shortDesc("instance creation expression").create();
  private final ConceptPresentation props_GetAccessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GreaterThanExpression = new ConceptPresentationBuilder().shortDesc("greater than operation").create();
  private final ConceptPresentation props_GreaterThanOrEqualsExpression = new ConceptPresentationBuilder().shortDesc("greater than or equals operation").create();
  private final ConceptPresentation props_HasAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HexIntegerLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IAnonymousClass = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IBLDeprecatable = new ConceptPresentationBuilder(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d2ea8a339L).deprecateProperty(0x11d2ea948a4L, "isDeprecated").create();
  private final ConceptPresentation props_IBinaryLike = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IClassifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IClassifierMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IClassifierType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IConditional = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IContainsStatementList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IControlFlowInterrupter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IExtractMethodAvailable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IFinalWrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IGenericType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IHasModifiers = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IIncompleteParen = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IInternalType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILocalDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILocalReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILocalVariableElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILocalVariableElementList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMemberContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMethodLike = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISkipsReturn = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStatementListContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStaticContainerForMethods = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IThisExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITryCatchStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITypeApplicable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IValidIdentifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IVariableAssignment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IVisible = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IWillBeClassifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IYetUnresolved = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImplicitAnnotationInstanceValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImplicitAnnotationMethodKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncompleteLeftParen = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncompleteMemberDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncompleteRightParen = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstanceInitializer = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0sf).create();
  private final ConceptPresentation props_InstanceMethodCallOperation = new ConceptPresentationBuilder().shortDesc("instance method call").create();
  private final ConceptPresentation props_InstanceMethodDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0uf).create();
  private final ConceptPresentation props_InstanceOfExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntegerConstant = new ConceptPresentationBuilder().shortDesc("integer constant").create();
  private final ConceptPresentation props_IntegerLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntegerType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Interface = new ConceptPresentationBuilder().shortDesc("Interface declaration").icon(IconContainer.RESOURCE_a0a0zf).create();
  private final ConceptPresentation props_IsEmptyOperation = new ConceptPresentationBuilder().shortDesc("string is null or empty").create();
  private final ConceptPresentation props_IsNotEmptyOperation = new ConceptPresentationBuilder().shortDesc("string is not null and not empty").create();
  private final ConceptPresentation props_JavaImport = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_JavaImports = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LeftShiftAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LessThanExpression = new ConceptPresentationBuilder().shortDesc("less then operation").create();
  private final ConceptPresentation props_LessThanOrEqualsExpression = new ConceptPresentationBuilder().shortDesc("less then or equals operation").create();
  private final ConceptPresentation props_LocalInstanceFieldReference = new ConceptPresentationBuilder().deprecated(true).shortDesc("local instance field reference").create();
  private final ConceptPresentation props_LocalInstanceMethodCall = new ConceptPresentationBuilder().deprecated(true).shortDesc("local instance method call").create();
  private final ConceptPresentation props_LocalMethodCall = new ConceptPresentationBuilder().shortDesc("local method invocation").create();
  private final ConceptPresentation props_LocalPropertyReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LocalStaticFieldReference = new ConceptPresentationBuilder().deprecated(true).shortDesc("reference to local static field declaration").create();
  private final ConceptPresentation props_LocalStaticMethodCall = new ConceptPresentationBuilder().deprecated(true).shortDesc("local static method invocation").create();
  private final ConceptPresentation props_LocalToMethodKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LocalVariableDeclaration = new ConceptPresentationBuilder().shortDesc("local variable declaration").icon(IconContainer.RESOURCE_a0a0og).create();
  private final ConceptPresentation props_LocalVariableDeclarationStatement = new ConceptPresentationBuilder().shortDesc("local variable declaration statement").create();
  private final ConceptPresentation props_LocalVariableReference = new ConceptPresentationBuilder().deprecated(true).shortDesc("reference to local variable declaration").create();
  private final ConceptPresentation props_LongLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LongType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LoopLabel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LoopLabelReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LowerBoundType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MethodDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MinusAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MinusExpression = new ConceptPresentationBuilder().shortDesc("minus operation").create();
  private final ConceptPresentation props_Modifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MulAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MulExpression = new ConceptPresentationBuilder().shortDesc("multiplication operation").create();
  private final ConceptPresentation props_NPEEqualsExpression = new ConceptPresentationBuilder().shortDesc("NPE-safe equals operation").create();
  private final ConceptPresentation props_NPENotEqualsExpression = new ConceptPresentationBuilder().shortDesc("NPE-safe not equals operation").create();
  private final ConceptPresentation props_NestedNewExpression = new ConceptPresentationBuilder().shortDesc("nested instance creation expression").create();
  private final ConceptPresentation props_NotEqualsExpression = new ConceptPresentationBuilder().shortDesc("not equals operation").create();
  private final ConceptPresentation props_NotExpression = new ConceptPresentationBuilder().shortDesc("not-expression").create();
  private final ConceptPresentation props_NullLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NullType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Number = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrExpression = new ConceptPresentationBuilder().shortDesc("conditional-or operation").create();
  private final ConceptPresentation props_ParameterDeclaration = new ConceptPresentationBuilder().shortDesc("parameter").icon(IconContainer.RESOURCE_a0a0nh).create();
  private final ConceptPresentation props_ParameterReference = new ConceptPresentationBuilder().deprecated(true).shortDesc("reference to method parameter").create();
  private final ConceptPresentation props_ParenthesizedExpression = new ConceptPresentationBuilder().shortDesc("parenthesis").create();
  private final ConceptPresentation props_PlaceholderMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PlusAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PlusExpression = new ConceptPresentationBuilder().shortDesc("plus operation").create();
  private final ConceptPresentation props_PostfixDecrementExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PostfixIncrementExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrefixDecrementExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrefixIncrementExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrimitiveClassExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrimitiveType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrivateVisibility = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Property = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyImplementation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyValueReference = new ConceptPresentationBuilder().shortDesc("Property value represented in custom getters and setters").create();
  private final ConceptPresentation props_ProtectedVisibility = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PublicVisibility = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QualifiedSuperMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RemAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RemExpression = new ConceptPresentationBuilder().shortDesc("remainder operation").create();
  private final ConceptPresentation props_RemarkStatement = new ConceptPresentationBuilder().deprecated(true).shortDesc("remark").create();
  private final ConceptPresentation props_ReturnStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RightShiftAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SetAccessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShiftLeftExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShiftRightExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShiftRightUnsignedExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShortType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SingleLineComment = new ConceptPresentationBuilder().shortDesc("single-line comment").create();
  private final ConceptPresentation props_Statement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StatementCommentPart = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_StatementList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StaticFieldDeclaration = new ConceptPresentationBuilder().shortDesc("static field declaration").icon(IconContainer.RESOURCE_a0a0vi).create();
  private final ConceptPresentation props_StaticFieldReference = new ConceptPresentationBuilder().shortDesc("reference to static field declaration").create();
  private final ConceptPresentation props_StaticInitializer = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0xi).create();
  private final ConceptPresentation props_StaticKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StaticMethodCall = new ConceptPresentationBuilder().shortDesc("static method invocation").create();
  private final ConceptPresentation props_StaticMethodDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringBooleanOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringLiteral = new ConceptPresentationBuilder().shortDesc("string literal").create();
  private final ConceptPresentation props_StringToken = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubStatementList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstringExpression = new ConceptPresentationBuilder().shortDesc("substing").create();
  private final ConceptPresentation props_SuperConstructorInvocation = new ConceptPresentationBuilder().shortDesc("super constructor invocation").create();
  private final ConceptPresentation props_SuperConstructorKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SuperInerfaceKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SuperMethodCall = new ConceptPresentationBuilder().shortDesc("super method invocation").create();
  private final ConceptPresentation props_SuperMethodKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SwitchCase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SwitchStatement = new ConceptPresentationBuilder(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02a8c6aL).deprecateProperty(0x117b7e94b9bL, "label").create();
  private final ConceptPresentation props_SynchronizedStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TernaryOperatorExpression = new ConceptPresentationBuilder().shortDesc("ternary operator").create();
  private final ConceptPresentation props_TextCommentPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ThisConstructorInvocation = new ConceptPresentationBuilder().shortDesc("this constructor invocation").create();
  private final ConceptPresentation props_ThisConstructorKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ThisExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ThrowStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Tokens = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TrimOperation = new ConceptPresentationBuilder().shortDesc("trim white spaces, line breaks, tabs, etc.").create();
  private final ConceptPresentation props_TryCatchStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TryStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Type = new ConceptPresentationBuilder().shortDesc("a type").create();
  private final ConceptPresentation props_TypeAnnotable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeDerivable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeVariableReference = new ConceptPresentationBuilder().shortDesc("reference to type variable").create();
  private final ConceptPresentation props_UnaryMinus = new ConceptPresentationBuilder().shortDesc("unary minus").create();
  private final ConceptPresentation props_UndefinedType = new ConceptPresentationBuilder().shortDesc("undefined type").create();
  private final ConceptPresentation props_UnknownConsCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnknownDotCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnknownLocalCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnknownNameRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnknownNew = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnresolvedNameReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnsignedRightShiftAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UpperBoundType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UsingStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ValueParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VarType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableArityType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableReference = new ConceptPresentationBuilder().shortDesc("reference to variable").create();
  private final ConceptPresentation props_Visibility = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VoidType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WhileStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WildCardType = new ConceptPresentationBuilder().shortDesc("wildcard type").create();
  private final ConceptPresentation props_XorAssignmentExpression = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractClassifierReference:
        return props_AbstractClassifierReference;
      case LanguageConceptSwitch.AbstractCreator:
        return props_AbstractCreator;
      case LanguageConceptSwitch.AbstractForStatement:
        return props_AbstractForStatement;
      case LanguageConceptSwitch.AbstractLoopStatement:
        return props_AbstractLoopStatement;
      case LanguageConceptSwitch.AbstractOperation:
        return props_AbstractOperation;
      case LanguageConceptSwitch.AbstractUnaryNumberOperation:
        return props_AbstractUnaryNumberOperation;
      case LanguageConceptSwitch.AdditionalForLoopVariable:
        return props_AdditionalForLoopVariable;
      case LanguageConceptSwitch.AndAssignmentExpression:
        return props_AndAssignmentExpression;
      case LanguageConceptSwitch.AndExpression:
        return props_AndExpression;
      case LanguageConceptSwitch.Annotation:
        return props_Annotation;
      case LanguageConceptSwitch.AnnotationInstance:
        return props_AnnotationInstance;
      case LanguageConceptSwitch.AnnotationInstanceExpression:
        return props_AnnotationInstanceExpression;
      case LanguageConceptSwitch.AnnotationInstanceValue:
        return props_AnnotationInstanceValue;
      case LanguageConceptSwitch.AnnotationMethodDeclaration:
        return props_AnnotationMethodDeclaration;
      case LanguageConceptSwitch.AnonymousClass:
        return props_AnonymousClass;
      case LanguageConceptSwitch.AnonymousClassCreator:
        return props_AnonymousClassCreator;
      case LanguageConceptSwitch.ArrayAccessExpression:
        return props_ArrayAccessExpression;
      case LanguageConceptSwitch.ArrayClassExpression:
        return props_ArrayClassExpression;
      case LanguageConceptSwitch.ArrayCloneOperation:
        return props_ArrayCloneOperation;
      case LanguageConceptSwitch.ArrayCreator:
        return props_ArrayCreator;
      case LanguageConceptSwitch.ArrayCreatorWithInitializer:
        return props_ArrayCreatorWithInitializer;
      case LanguageConceptSwitch.ArrayLengthOperation:
        return props_ArrayLengthOperation;
      case LanguageConceptSwitch.ArrayLiteral:
        return props_ArrayLiteral;
      case LanguageConceptSwitch.ArrayType:
        return props_ArrayType;
      case LanguageConceptSwitch.AsExpression:
        return props_AsExpression;
      case LanguageConceptSwitch.AssertStatement:
        return props_AssertStatement;
      case LanguageConceptSwitch.AssignmentExpression:
        return props_AssignmentExpression;
      case LanguageConceptSwitch.BLBottomType:
        return props_BLBottomType;
      case LanguageConceptSwitch.BaseAssignmentExpression:
        return props_BaseAssignmentExpression;
      case LanguageConceptSwitch.BaseMethodCall:
        return props_BaseMethodCall;
      case LanguageConceptSwitch.BaseMethodDeclaration:
        return props_BaseMethodDeclaration;
      case LanguageConceptSwitch.BaseStringOperation:
        return props_BaseStringOperation;
      case LanguageConceptSwitch.BaseVariableDeclaration:
        return props_BaseVariableDeclaration;
      case LanguageConceptSwitch.BaseVariableReference:
        return props_BaseVariableReference;
      case LanguageConceptSwitch.BinaryBitwiseOperation:
        return props_BinaryBitwiseOperation;
      case LanguageConceptSwitch.BinaryCompareOperation:
        return props_BinaryCompareOperation;
      case LanguageConceptSwitch.BinaryOperation:
        return props_BinaryOperation;
      case LanguageConceptSwitch.BitwiseAndExpression:
        return props_BitwiseAndExpression;
      case LanguageConceptSwitch.BitwiseNotExpression:
        return props_BitwiseNotExpression;
      case LanguageConceptSwitch.BitwiseOrExpression:
        return props_BitwiseOrExpression;
      case LanguageConceptSwitch.BitwiseXorExpression:
        return props_BitwiseXorExpression;
      case LanguageConceptSwitch.BlockStatement:
        return props_BlockStatement;
      case LanguageConceptSwitch.BooleanConstant:
        return props_BooleanConstant;
      case LanguageConceptSwitch.BooleanType:
        return props_BooleanType;
      case LanguageConceptSwitch.BreakStatement:
        return props_BreakStatement;
      case LanguageConceptSwitch.ByteType:
        return props_ByteType;
      case LanguageConceptSwitch.CastExpression:
        return props_CastExpression;
      case LanguageConceptSwitch.CatchClause:
        return props_CatchClause;
      case LanguageConceptSwitch.CharConstant:
        return props_CharConstant;
      case LanguageConceptSwitch.CharType:
        return props_CharType;
      case LanguageConceptSwitch.ClassConcept:
        return props_ClassConcept;
      case LanguageConceptSwitch.ClassCreator:
        return props_ClassCreator;
      case LanguageConceptSwitch.Classifier:
        return props_Classifier;
      case LanguageConceptSwitch.ClassifierClassExpression:
        return props_ClassifierClassExpression;
      case LanguageConceptSwitch.ClassifierMember:
        return props_ClassifierMember;
      case LanguageConceptSwitch.ClassifierType:
        return props_ClassifierType;
      case LanguageConceptSwitch.Closure:
        return props_Closure;
      case LanguageConceptSwitch.ClosureParameter:
        return props_ClosureParameter;
      case LanguageConceptSwitch.ClosureParameterReference:
        return props_ClosureParameterReference;
      case LanguageConceptSwitch.Closureoid:
        return props_Closureoid;
      case LanguageConceptSwitch.CommentPart:
        return props_CommentPart;
      case LanguageConceptSwitch.CommentedStatement:
        return props_CommentedStatement;
      case LanguageConceptSwitch.CommentedStatementsBlock:
        return props_CommentedStatementsBlock;
      case LanguageConceptSwitch.ConceptFunction:
        return props_ConceptFunction;
      case LanguageConceptSwitch.ConceptFunctionParameter:
        return props_ConceptFunctionParameter;
      case LanguageConceptSwitch.ConstructorDeclaration:
        return props_ConstructorDeclaration;
      case LanguageConceptSwitch.ConstructorInvocationStatement:
        return props_ConstructorInvocationStatement;
      case LanguageConceptSwitch.ContextClassifierKind:
        return props_ContextClassifierKind;
      case LanguageConceptSwitch.ContinueStatement:
        return props_ContinueStatement;
      case LanguageConceptSwitch.CustomPropertyImplementation:
        return props_CustomPropertyImplementation;
      case LanguageConceptSwitch.CustomSetterPropertyImplementation:
        return props_CustomSetterPropertyImplementation;
      case LanguageConceptSwitch.DefaultClassCreator:
        return props_DefaultClassCreator;
      case LanguageConceptSwitch.DefaultGetAccessor:
        return props_DefaultGetAccessor;
      case LanguageConceptSwitch.DefaultPropertyImplementation:
        return props_DefaultPropertyImplementation;
      case LanguageConceptSwitch.DefaultSetAccessor:
        return props_DefaultSetAccessor;
      case LanguageConceptSwitch.DimensionExpression:
        return props_DimensionExpression;
      case LanguageConceptSwitch.DivAssignmentExpression:
        return props_DivAssignmentExpression;
      case LanguageConceptSwitch.DivExpression:
        return props_DivExpression;
      case LanguageConceptSwitch.DoWhileStatement:
        return props_DoWhileStatement;
      case LanguageConceptSwitch.DotExpression:
        return props_DotExpression;
      case LanguageConceptSwitch.DoubleType:
        return props_DoubleType;
      case LanguageConceptSwitch.ElsifClause:
        return props_ElsifClause;
      case LanguageConceptSwitch.EnumClass:
        return props_EnumClass;
      case LanguageConceptSwitch.EnumConstantDeclaration:
        return props_EnumConstantDeclaration;
      case LanguageConceptSwitch.EnumConstantReference:
        return props_EnumConstantReference;
      case LanguageConceptSwitch.EnumValueOfExpression:
        return props_EnumValueOfExpression;
      case LanguageConceptSwitch.EnumValuesExpression:
        return props_EnumValuesExpression;
      case LanguageConceptSwitch.EqualsExpression:
        return props_EqualsExpression;
      case LanguageConceptSwitch.EscapeOperation:
        return props_EscapeOperation;
      case LanguageConceptSwitch.Expression:
        return props_Expression;
      case LanguageConceptSwitch.ExpressionStatement:
        return props_ExpressionStatement;
      case LanguageConceptSwitch.FieldDeclaration:
        return props_FieldDeclaration;
      case LanguageConceptSwitch.FieldReferenceOperation:
        return props_FieldReferenceOperation;
      case LanguageConceptSwitch.FloatType:
        return props_FloatType;
      case LanguageConceptSwitch.FloatingPointConstant:
        return props_FloatingPointConstant;
      case LanguageConceptSwitch.FloatingPointFloatConstant:
        return props_FloatingPointFloatConstant;
      case LanguageConceptSwitch.ForStatement:
        return props_ForStatement;
      case LanguageConceptSwitch.ForeachStatement:
        return props_ForeachStatement;
      case LanguageConceptSwitch.GenericDeclaration:
        return props_GenericDeclaration;
      case LanguageConceptSwitch.GenericNewExpression:
        return props_GenericNewExpression;
      case LanguageConceptSwitch.GetAccessor:
        return props_GetAccessor;
      case LanguageConceptSwitch.GreaterThanExpression:
        return props_GreaterThanExpression;
      case LanguageConceptSwitch.GreaterThanOrEqualsExpression:
        return props_GreaterThanOrEqualsExpression;
      case LanguageConceptSwitch.HasAnnotation:
        return props_HasAnnotation;
      case LanguageConceptSwitch.HexIntegerLiteral:
        return props_HexIntegerLiteral;
      case LanguageConceptSwitch.IAnonymousClass:
        return props_IAnonymousClass;
      case LanguageConceptSwitch.IBLDeprecatable:
        return props_IBLDeprecatable;
      case LanguageConceptSwitch.IBinaryLike:
        return props_IBinaryLike;
      case LanguageConceptSwitch.IClassifier:
        return props_IClassifier;
      case LanguageConceptSwitch.IClassifierMember:
        return props_IClassifierMember;
      case LanguageConceptSwitch.IClassifierType:
        return props_IClassifierType;
      case LanguageConceptSwitch.IConditional:
        return props_IConditional;
      case LanguageConceptSwitch.IContainsStatementList:
        return props_IContainsStatementList;
      case LanguageConceptSwitch.IControlFlowInterrupter:
        return props_IControlFlowInterrupter;
      case LanguageConceptSwitch.IExtractMethodAvailable:
        return props_IExtractMethodAvailable;
      case LanguageConceptSwitch.IFinalWrapper:
        return props_IFinalWrapper;
      case LanguageConceptSwitch.IGenericType:
        return props_IGenericType;
      case LanguageConceptSwitch.IHasModifiers:
        return props_IHasModifiers;
      case LanguageConceptSwitch.IIncompleteParen:
        return props_IIncompleteParen;
      case LanguageConceptSwitch.IInternalType:
        return props_IInternalType;
      case LanguageConceptSwitch.ILocalDeclaration:
        return props_ILocalDeclaration;
      case LanguageConceptSwitch.ILocalReference:
        return props_ILocalReference;
      case LanguageConceptSwitch.ILocalVariableElement:
        return props_ILocalVariableElement;
      case LanguageConceptSwitch.ILocalVariableElementList:
        return props_ILocalVariableElementList;
      case LanguageConceptSwitch.IMemberContainer:
        return props_IMemberContainer;
      case LanguageConceptSwitch.IMethodCall:
        return props_IMethodCall;
      case LanguageConceptSwitch.IMethodLike:
        return props_IMethodLike;
      case LanguageConceptSwitch.IOperation:
        return props_IOperation;
      case LanguageConceptSwitch.IParameter:
        return props_IParameter;
      case LanguageConceptSwitch.ISkipsReturn:
        return props_ISkipsReturn;
      case LanguageConceptSwitch.IStatementListContainer:
        return props_IStatementListContainer;
      case LanguageConceptSwitch.IStaticContainerForMethods:
        return props_IStaticContainerForMethods;
      case LanguageConceptSwitch.IThisExpression:
        return props_IThisExpression;
      case LanguageConceptSwitch.ITryCatchStatement:
        return props_ITryCatchStatement;
      case LanguageConceptSwitch.ITypeApplicable:
        return props_ITypeApplicable;
      case LanguageConceptSwitch.IValidIdentifier:
        return props_IValidIdentifier;
      case LanguageConceptSwitch.IVariableAssignment:
        return props_IVariableAssignment;
      case LanguageConceptSwitch.IVariableDeclaration:
        return props_IVariableDeclaration;
      case LanguageConceptSwitch.IVariableReference:
        return props_IVariableReference;
      case LanguageConceptSwitch.IVisible:
        return props_IVisible;
      case LanguageConceptSwitch.IWillBeClassifier:
        return props_IWillBeClassifier;
      case LanguageConceptSwitch.IYetUnresolved:
        return props_IYetUnresolved;
      case LanguageConceptSwitch.IfStatement:
        return props_IfStatement;
      case LanguageConceptSwitch.ImplicitAnnotationInstanceValue:
        return props_ImplicitAnnotationInstanceValue;
      case LanguageConceptSwitch.ImplicitAnnotationMethodKind:
        return props_ImplicitAnnotationMethodKind;
      case LanguageConceptSwitch.IncompleteLeftParen:
        return props_IncompleteLeftParen;
      case LanguageConceptSwitch.IncompleteMemberDeclaration:
        return props_IncompleteMemberDeclaration;
      case LanguageConceptSwitch.IncompleteRightParen:
        return props_IncompleteRightParen;
      case LanguageConceptSwitch.InstanceInitializer:
        return props_InstanceInitializer;
      case LanguageConceptSwitch.InstanceMethodCallOperation:
        return props_InstanceMethodCallOperation;
      case LanguageConceptSwitch.InstanceMethodDeclaration:
        return props_InstanceMethodDeclaration;
      case LanguageConceptSwitch.InstanceOfExpression:
        return props_InstanceOfExpression;
      case LanguageConceptSwitch.IntegerConstant:
        return props_IntegerConstant;
      case LanguageConceptSwitch.IntegerLiteral:
        return props_IntegerLiteral;
      case LanguageConceptSwitch.IntegerType:
        return props_IntegerType;
      case LanguageConceptSwitch.Interface:
        return props_Interface;
      case LanguageConceptSwitch.IsEmptyOperation:
        return props_IsEmptyOperation;
      case LanguageConceptSwitch.IsNotEmptyOperation:
        return props_IsNotEmptyOperation;
      case LanguageConceptSwitch.JavaImport:
        return props_JavaImport;
      case LanguageConceptSwitch.JavaImports:
        return props_JavaImports;
      case LanguageConceptSwitch.LeftShiftAssignmentExpression:
        return props_LeftShiftAssignmentExpression;
      case LanguageConceptSwitch.LessThanExpression:
        return props_LessThanExpression;
      case LanguageConceptSwitch.LessThanOrEqualsExpression:
        return props_LessThanOrEqualsExpression;
      case LanguageConceptSwitch.LocalInstanceFieldReference:
        return props_LocalInstanceFieldReference;
      case LanguageConceptSwitch.LocalInstanceMethodCall:
        return props_LocalInstanceMethodCall;
      case LanguageConceptSwitch.LocalMethodCall:
        return props_LocalMethodCall;
      case LanguageConceptSwitch.LocalPropertyReference:
        return props_LocalPropertyReference;
      case LanguageConceptSwitch.LocalStaticFieldReference:
        return props_LocalStaticFieldReference;
      case LanguageConceptSwitch.LocalStaticMethodCall:
        return props_LocalStaticMethodCall;
      case LanguageConceptSwitch.LocalToMethodKind:
        return props_LocalToMethodKind;
      case LanguageConceptSwitch.LocalVariableDeclaration:
        return props_LocalVariableDeclaration;
      case LanguageConceptSwitch.LocalVariableDeclarationStatement:
        return props_LocalVariableDeclarationStatement;
      case LanguageConceptSwitch.LocalVariableReference:
        return props_LocalVariableReference;
      case LanguageConceptSwitch.LongLiteral:
        return props_LongLiteral;
      case LanguageConceptSwitch.LongType:
        return props_LongType;
      case LanguageConceptSwitch.LoopLabel:
        return props_LoopLabel;
      case LanguageConceptSwitch.LoopLabelReference:
        return props_LoopLabelReference;
      case LanguageConceptSwitch.LowerBoundType:
        return props_LowerBoundType;
      case LanguageConceptSwitch.MethodDeclaration:
        return props_MethodDeclaration;
      case LanguageConceptSwitch.MinusAssignmentExpression:
        return props_MinusAssignmentExpression;
      case LanguageConceptSwitch.MinusExpression:
        return props_MinusExpression;
      case LanguageConceptSwitch.Modifier:
        return props_Modifier;
      case LanguageConceptSwitch.MulAssignmentExpression:
        return props_MulAssignmentExpression;
      case LanguageConceptSwitch.MulExpression:
        return props_MulExpression;
      case LanguageConceptSwitch.NPEEqualsExpression:
        return props_NPEEqualsExpression;
      case LanguageConceptSwitch.NPENotEqualsExpression:
        return props_NPENotEqualsExpression;
      case LanguageConceptSwitch.NestedNewExpression:
        return props_NestedNewExpression;
      case LanguageConceptSwitch.NotEqualsExpression:
        return props_NotEqualsExpression;
      case LanguageConceptSwitch.NotExpression:
        return props_NotExpression;
      case LanguageConceptSwitch.NullLiteral:
        return props_NullLiteral;
      case LanguageConceptSwitch.NullType:
        return props_NullType;
      case LanguageConceptSwitch.Number:
        return props_Number;
      case LanguageConceptSwitch.OperationAssignmentExpression:
        return props_OperationAssignmentExpression;
      case LanguageConceptSwitch.OrAssignmentExpression:
        return props_OrAssignmentExpression;
      case LanguageConceptSwitch.OrExpression:
        return props_OrExpression;
      case LanguageConceptSwitch.ParameterDeclaration:
        return props_ParameterDeclaration;
      case LanguageConceptSwitch.ParameterReference:
        return props_ParameterReference;
      case LanguageConceptSwitch.ParenthesizedExpression:
        return props_ParenthesizedExpression;
      case LanguageConceptSwitch.PlaceholderMember:
        return props_PlaceholderMember;
      case LanguageConceptSwitch.PlusAssignmentExpression:
        return props_PlusAssignmentExpression;
      case LanguageConceptSwitch.PlusExpression:
        return props_PlusExpression;
      case LanguageConceptSwitch.PostfixDecrementExpression:
        return props_PostfixDecrementExpression;
      case LanguageConceptSwitch.PostfixIncrementExpression:
        return props_PostfixIncrementExpression;
      case LanguageConceptSwitch.PrefixDecrementExpression:
        return props_PrefixDecrementExpression;
      case LanguageConceptSwitch.PrefixIncrementExpression:
        return props_PrefixIncrementExpression;
      case LanguageConceptSwitch.PrimitiveClassExpression:
        return props_PrimitiveClassExpression;
      case LanguageConceptSwitch.PrimitiveType:
        return props_PrimitiveType;
      case LanguageConceptSwitch.PrivateVisibility:
        return props_PrivateVisibility;
      case LanguageConceptSwitch.Property:
        return props_Property;
      case LanguageConceptSwitch.PropertyImplementation:
        return props_PropertyImplementation;
      case LanguageConceptSwitch.PropertyReference:
        return props_PropertyReference;
      case LanguageConceptSwitch.PropertyValueReference:
        return props_PropertyValueReference;
      case LanguageConceptSwitch.ProtectedVisibility:
        return props_ProtectedVisibility;
      case LanguageConceptSwitch.PublicVisibility:
        return props_PublicVisibility;
      case LanguageConceptSwitch.QualifiedSuperMethodCall:
        return props_QualifiedSuperMethodCall;
      case LanguageConceptSwitch.RemAssignmentExpression:
        return props_RemAssignmentExpression;
      case LanguageConceptSwitch.RemExpression:
        return props_RemExpression;
      case LanguageConceptSwitch.RemarkStatement:
        return props_RemarkStatement;
      case LanguageConceptSwitch.ReturnStatement:
        return props_ReturnStatement;
      case LanguageConceptSwitch.RightShiftAssignmentExpression:
        return props_RightShiftAssignmentExpression;
      case LanguageConceptSwitch.SetAccessor:
        return props_SetAccessor;
      case LanguageConceptSwitch.ShiftLeftExpression:
        return props_ShiftLeftExpression;
      case LanguageConceptSwitch.ShiftRightExpression:
        return props_ShiftRightExpression;
      case LanguageConceptSwitch.ShiftRightUnsignedExpression:
        return props_ShiftRightUnsignedExpression;
      case LanguageConceptSwitch.ShortType:
        return props_ShortType;
      case LanguageConceptSwitch.SingleLineComment:
        return props_SingleLineComment;
      case LanguageConceptSwitch.Statement:
        return props_Statement;
      case LanguageConceptSwitch.StatementCommentPart:
        return props_StatementCommentPart;
      case LanguageConceptSwitch.StatementList:
        return props_StatementList;
      case LanguageConceptSwitch.StaticFieldDeclaration:
        return props_StaticFieldDeclaration;
      case LanguageConceptSwitch.StaticFieldReference:
        return props_StaticFieldReference;
      case LanguageConceptSwitch.StaticInitializer:
        return props_StaticInitializer;
      case LanguageConceptSwitch.StaticKind:
        return props_StaticKind;
      case LanguageConceptSwitch.StaticMethodCall:
        return props_StaticMethodCall;
      case LanguageConceptSwitch.StaticMethodDeclaration:
        return props_StaticMethodDeclaration;
      case LanguageConceptSwitch.StringBooleanOperation:
        return props_StringBooleanOperation;
      case LanguageConceptSwitch.StringLiteral:
        return props_StringLiteral;
      case LanguageConceptSwitch.StringToken:
        return props_StringToken;
      case LanguageConceptSwitch.StringType:
        return props_StringType;
      case LanguageConceptSwitch.StubStatementList:
        return props_StubStatementList;
      case LanguageConceptSwitch.SubstringExpression:
        return props_SubstringExpression;
      case LanguageConceptSwitch.SuperConstructorInvocation:
        return props_SuperConstructorInvocation;
      case LanguageConceptSwitch.SuperConstructorKind:
        return props_SuperConstructorKind;
      case LanguageConceptSwitch.SuperInerfaceKind:
        return props_SuperInerfaceKind;
      case LanguageConceptSwitch.SuperMethodCall:
        return props_SuperMethodCall;
      case LanguageConceptSwitch.SuperMethodKind:
        return props_SuperMethodKind;
      case LanguageConceptSwitch.SwitchCase:
        return props_SwitchCase;
      case LanguageConceptSwitch.SwitchStatement:
        return props_SwitchStatement;
      case LanguageConceptSwitch.SynchronizedStatement:
        return props_SynchronizedStatement;
      case LanguageConceptSwitch.TernaryOperatorExpression:
        return props_TernaryOperatorExpression;
      case LanguageConceptSwitch.TextCommentPart:
        return props_TextCommentPart;
      case LanguageConceptSwitch.ThisConstructorInvocation:
        return props_ThisConstructorInvocation;
      case LanguageConceptSwitch.ThisConstructorKind:
        return props_ThisConstructorKind;
      case LanguageConceptSwitch.ThisExpression:
        return props_ThisExpression;
      case LanguageConceptSwitch.ThrowStatement:
        return props_ThrowStatement;
      case LanguageConceptSwitch.Tokens:
        return props_Tokens;
      case LanguageConceptSwitch.TrimOperation:
        return props_TrimOperation;
      case LanguageConceptSwitch.TryCatchStatement:
        return props_TryCatchStatement;
      case LanguageConceptSwitch.TryStatement:
        return props_TryStatement;
      case LanguageConceptSwitch.Type:
        return props_Type;
      case LanguageConceptSwitch.TypeAnnotable:
        return props_TypeAnnotable;
      case LanguageConceptSwitch.TypeDerivable:
        return props_TypeDerivable;
      case LanguageConceptSwitch.TypeVariableDeclaration:
        return props_TypeVariableDeclaration;
      case LanguageConceptSwitch.TypeVariableReference:
        return props_TypeVariableReference;
      case LanguageConceptSwitch.UnaryMinus:
        return props_UnaryMinus;
      case LanguageConceptSwitch.UndefinedType:
        return props_UndefinedType;
      case LanguageConceptSwitch.UnknownConsCall:
        return props_UnknownConsCall;
      case LanguageConceptSwitch.UnknownDotCall:
        return props_UnknownDotCall;
      case LanguageConceptSwitch.UnknownLocalCall:
        return props_UnknownLocalCall;
      case LanguageConceptSwitch.UnknownNameRef:
        return props_UnknownNameRef;
      case LanguageConceptSwitch.UnknownNew:
        return props_UnknownNew;
      case LanguageConceptSwitch.UnresolvedNameReference:
        return props_UnresolvedNameReference;
      case LanguageConceptSwitch.UnsignedRightShiftAssignmentExpression:
        return props_UnsignedRightShiftAssignmentExpression;
      case LanguageConceptSwitch.UpperBoundType:
        return props_UpperBoundType;
      case LanguageConceptSwitch.UsingStatement:
        return props_UsingStatement;
      case LanguageConceptSwitch.ValueParameter:
        return props_ValueParameter;
      case LanguageConceptSwitch.VarType:
        return props_VarType;
      case LanguageConceptSwitch.VariableArityType:
        return props_VariableArityType;
      case LanguageConceptSwitch.VariableDeclaration:
        return props_VariableDeclaration;
      case LanguageConceptSwitch.VariableReference:
        return props_VariableReference;
      case LanguageConceptSwitch.Visibility:
        return props_Visibility;
      case LanguageConceptSwitch.VoidType:
        return props_VoidType;
      case LanguageConceptSwitch.WhileStatement:
        return props_WhileStatement;
      case LanguageConceptSwitch.WildCardType:
        return props_WildCardType;
      case LanguageConceptSwitch.XorAssignmentExpression:
        return props_XorAssignmentExpression;
    }
    return null;
  }
}
