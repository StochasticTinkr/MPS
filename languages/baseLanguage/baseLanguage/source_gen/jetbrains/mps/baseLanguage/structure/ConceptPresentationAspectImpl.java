package jetbrains.mps.baseLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractClassifierReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractForStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractLoopStatement = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cb1ac5adeL, 0x11745b5371dL, "label")).create();
  private final ConceptPresentation props_AbstractOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractUnaryNumberOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AdditionalForLoopVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AndAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AndExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Annotation = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0j).create();
  private final ConceptPresentation props_AnnotationInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnnotationInstanceExpression = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_AnnotationInstanceValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnnotationMethodDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnonymousClass = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1107e0cb103L, 0x1107e0fd2a0L, "classifier")).icon(IconContainer.RESOURCE_a0a0o).create();
  private final ConceptPresentation props_AnonymousClassCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArrayAccessExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArrayClassExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArrayCloneOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArrayCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArrayCreatorWithInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArrayLengthOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArrayLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArrayType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BLBottomType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseMethodDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0eb).create();
  private final ConceptPresentation props_BaseStringOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryBitwiseOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryCompareOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BitwiseAndExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BitwiseNotExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BitwiseOrExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BitwiseXorExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BlockStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BooleanConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BooleanType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BreakStatement = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbe39a867fL, 0x11745bfb2d8L, "label")).create();
  private final ConceptPresentation props_ByteType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CastExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CatchClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CharConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CharType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClassConcept = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, 0xfa5cee6dfaL, "abstractClass"), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, 0x11c6af4b284L, "isFinal"), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, 0x451f9e9f920b7f7dL, "isStatic")).icon(IconContainer.RESOURCE_a0a0yb).create();
  private final ConceptPresentation props_ClassCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Classifier = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x11a134c900dL, "nestedName"), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x11ce63f4b3bL, "isDeprecated"), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, 0x73c6d8a8c021f99L, "nonStatic")).create();
  private final ConceptPresentation props_ClassifierClassExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClassifierMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClassifierType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Closure = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClosureParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClosureParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Closureoid = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommentPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommentedStatement = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_CommentedStatementsBlock = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ConceptFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0mc).create();
  private final ConceptPresentation props_ConstructorDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstructorInvocationStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextClassifierKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContinueStatement = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbf3043726L, 0x11745fca58eL, "label")).create();
  private final ConceptPresentation props_CustomPropertyImplementation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomSetterPropertyImplementation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultClassCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultGetAccessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultPropertyImplementation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultSetAccessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DimensionExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DivAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DivExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DoWhileStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DotExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DoubleType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ElsifClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumClass = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ed).create();
  private final ConceptPresentation props_EnumConstantDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumConstantReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumValueOfExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumValuesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EqualsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EscapeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Expression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExpressionStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FieldDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0nd).create();
  private final ConceptPresentation props_FieldReferenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FloatType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FloatingPointConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FloatingPointFloatConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ForStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ForeachStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenericDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenericNewExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetAccessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GreaterThanExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GreaterThanOrEqualsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HasAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HexIntegerLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IAnonymousClass = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IBLDeprecatable = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11d2ea8a339L, 0x11d2ea948a4L, "isDeprecated")).create();
  private final ConceptPresentation props_IBinaryLike = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IClassifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IClassifierMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IClassifierType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IConditional = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IContainsStatementList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IControlFlowInterrupter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IExtractMethodAvailable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IFinalWrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IGenericType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IHasModifiers = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IIncompleteParen = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IInternalType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILocalDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILocalReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILocalVariableElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILocalVariableElementList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMemberContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMethodLike = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISkipsReturn = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStatementListContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStaticContainerForMethods = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IThisExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITryCatchStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITypeApplicable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IValidIdentifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IVariableAssignment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IVisible = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IWillBeClassifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IYetUnresolved = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImplicitAnnotationInstanceValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImplicitAnnotationMethodKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncompleteLeftParen = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncompleteMemberDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncompleteRightParen = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstanceInitializer = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0sf).create();
  private final ConceptPresentation props_InstanceMethodCallOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstanceMethodDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0uf).create();
  private final ConceptPresentation props_InstanceOfExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntegerConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntegerLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntegerType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Interface = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0zf).create();
  private final ConceptPresentation props_IsEmptyOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsNotEmptyOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_JavaImport = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_JavaImports = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LeftShiftAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LessThanExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LessThanOrEqualsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LocalInstanceFieldReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LocalInstanceMethodCall = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_LocalMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LocalPropertyReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LocalStaticFieldReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LocalStaticMethodCall = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_LocalToMethodKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LocalVariableDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0og).create();
  private final ConceptPresentation props_LocalVariableDeclarationStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LocalVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LongLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LongType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LoopLabel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LoopLabelReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LowerBoundType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MethodDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MinusAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MinusExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Modifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MulAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MulExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NPEEqualsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NPENotEqualsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NestedNewExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotEqualsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NullLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NullType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Number = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0nh).create();
  private final ConceptPresentation props_ParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParenthesizedExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PlaceholderMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PlusAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PlusExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PostfixDecrementExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PostfixIncrementExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrefixDecrementExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrefixIncrementExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrimitiveClassExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrimitiveType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrivateVisibility = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Property = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyImplementation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyValueReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProtectedVisibility = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PublicVisibility = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QualifiedSuperMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RemAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RemExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RemarkStatement = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ReturnStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RightShiftAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SetAccessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShiftLeftExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShiftRightExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShiftRightUnsignedExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShortType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SingleLineComment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Statement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StatementCommentPart = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_StatementList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StaticFieldDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0vi).create();
  private final ConceptPresentation props_StaticFieldReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StaticInitializer = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0xi).create();
  private final ConceptPresentation props_StaticKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StaticMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StaticMethodDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringBooleanOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringToken = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubStatementList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstringExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SuperConstructorInvocation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SuperConstructorKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SuperInerfaceKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SuperMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SuperMethodKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SwitchCase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SwitchStatement = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02a8c6aL, 0x117b7e94b9bL, "label")).create();
  private final ConceptPresentation props_SynchronizedStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TernaryOperatorExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextCommentPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ThisConstructorInvocation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ThisConstructorKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ThisExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ThrowStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Tokens = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TrimOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TryCatchStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TryStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Type = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeAnnotable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeDerivable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnaryMinus = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UndefinedType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnknownConsCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnknownDotCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnknownLocalCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnknownNameRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnknownNew = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnresolvedNameReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnsignedRightShiftAssignmentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UpperBoundType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UsingStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ValueParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VarType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableArityType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Visibility = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VoidType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WhileStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WildCardType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_XorAssignmentExpression = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractClassifierReference;
      case 1:
        return props_AbstractCreator;
      case 2:
        return props_AbstractForStatement;
      case 3:
        return props_AbstractLoopStatement;
      case 4:
        return props_AbstractOperation;
      case 5:
        return props_AbstractUnaryNumberOperation;
      case 6:
        return props_AdditionalForLoopVariable;
      case 7:
        return props_AndAssignmentExpression;
      case 8:
        return props_AndExpression;
      case 9:
        return props_Annotation;
      case 10:
        return props_AnnotationInstance;
      case 11:
        return props_AnnotationInstanceExpression;
      case 12:
        return props_AnnotationInstanceValue;
      case 13:
        return props_AnnotationMethodDeclaration;
      case 14:
        return props_AnonymousClass;
      case 15:
        return props_AnonymousClassCreator;
      case 16:
        return props_ArrayAccessExpression;
      case 17:
        return props_ArrayClassExpression;
      case 18:
        return props_ArrayCloneOperation;
      case 19:
        return props_ArrayCreator;
      case 20:
        return props_ArrayCreatorWithInitializer;
      case 21:
        return props_ArrayLengthOperation;
      case 22:
        return props_ArrayLiteral;
      case 23:
        return props_ArrayType;
      case 24:
        return props_AsExpression;
      case 25:
        return props_AssertStatement;
      case 26:
        return props_AssignmentExpression;
      case 27:
        return props_BLBottomType;
      case 28:
        return props_BaseAssignmentExpression;
      case 29:
        return props_BaseMethodCall;
      case 30:
        return props_BaseMethodDeclaration;
      case 31:
        return props_BaseStringOperation;
      case 32:
        return props_BaseVariableDeclaration;
      case 33:
        return props_BaseVariableReference;
      case 34:
        return props_BinaryBitwiseOperation;
      case 35:
        return props_BinaryCompareOperation;
      case 36:
        return props_BinaryOperation;
      case 37:
        return props_BitwiseAndExpression;
      case 38:
        return props_BitwiseNotExpression;
      case 39:
        return props_BitwiseOrExpression;
      case 40:
        return props_BitwiseXorExpression;
      case 41:
        return props_BlockStatement;
      case 42:
        return props_BooleanConstant;
      case 43:
        return props_BooleanType;
      case 44:
        return props_BreakStatement;
      case 45:
        return props_ByteType;
      case 46:
        return props_CastExpression;
      case 47:
        return props_CatchClause;
      case 48:
        return props_CharConstant;
      case 49:
        return props_CharType;
      case 50:
        return props_ClassConcept;
      case 51:
        return props_ClassCreator;
      case 52:
        return props_Classifier;
      case 53:
        return props_ClassifierClassExpression;
      case 54:
        return props_ClassifierMember;
      case 55:
        return props_ClassifierType;
      case 56:
        return props_Closure;
      case 57:
        return props_ClosureParameter;
      case 58:
        return props_ClosureParameterReference;
      case 59:
        return props_Closureoid;
      case 60:
        return props_CommentPart;
      case 61:
        return props_CommentedStatement;
      case 62:
        return props_CommentedStatementsBlock;
      case 63:
        return props_ConceptFunction;
      case 64:
        return props_ConceptFunctionParameter;
      case 65:
        return props_ConstructorDeclaration;
      case 66:
        return props_ConstructorInvocationStatement;
      case 67:
        return props_ContextClassifierKind;
      case 68:
        return props_ContinueStatement;
      case 69:
        return props_CustomPropertyImplementation;
      case 70:
        return props_CustomSetterPropertyImplementation;
      case 71:
        return props_DefaultClassCreator;
      case 72:
        return props_DefaultGetAccessor;
      case 73:
        return props_DefaultPropertyImplementation;
      case 74:
        return props_DefaultSetAccessor;
      case 75:
        return props_DimensionExpression;
      case 76:
        return props_DivAssignmentExpression;
      case 77:
        return props_DivExpression;
      case 78:
        return props_DoWhileStatement;
      case 79:
        return props_DotExpression;
      case 80:
        return props_DoubleType;
      case 81:
        return props_ElsifClause;
      case 82:
        return props_EnumClass;
      case 83:
        return props_EnumConstantDeclaration;
      case 84:
        return props_EnumConstantReference;
      case 85:
        return props_EnumValueOfExpression;
      case 86:
        return props_EnumValuesExpression;
      case 87:
        return props_EqualsExpression;
      case 88:
        return props_EscapeOperation;
      case 89:
        return props_Expression;
      case 90:
        return props_ExpressionStatement;
      case 91:
        return props_FieldDeclaration;
      case 92:
        return props_FieldReferenceOperation;
      case 93:
        return props_FloatType;
      case 94:
        return props_FloatingPointConstant;
      case 95:
        return props_FloatingPointFloatConstant;
      case 96:
        return props_ForStatement;
      case 97:
        return props_ForeachStatement;
      case 98:
        return props_GenericDeclaration;
      case 99:
        return props_GenericNewExpression;
      case 100:
        return props_GetAccessor;
      case 101:
        return props_GreaterThanExpression;
      case 102:
        return props_GreaterThanOrEqualsExpression;
      case 103:
        return props_HasAnnotation;
      case 104:
        return props_HexIntegerLiteral;
      case 105:
        return props_IAnonymousClass;
      case 106:
        return props_IBLDeprecatable;
      case 107:
        return props_IBinaryLike;
      case 108:
        return props_IClassifier;
      case 109:
        return props_IClassifierMember;
      case 110:
        return props_IClassifierType;
      case 111:
        return props_IConditional;
      case 112:
        return props_IContainsStatementList;
      case 113:
        return props_IControlFlowInterrupter;
      case 114:
        return props_IExtractMethodAvailable;
      case 115:
        return props_IFinalWrapper;
      case 116:
        return props_IGenericType;
      case 117:
        return props_IHasModifiers;
      case 118:
        return props_IIncompleteParen;
      case 119:
        return props_IInternalType;
      case 120:
        return props_ILocalDeclaration;
      case 121:
        return props_ILocalReference;
      case 122:
        return props_ILocalVariableElement;
      case 123:
        return props_ILocalVariableElementList;
      case 124:
        return props_IMemberContainer;
      case 125:
        return props_IMethodCall;
      case 126:
        return props_IMethodLike;
      case 127:
        return props_IOperation;
      case 128:
        return props_IParameter;
      case 129:
        return props_ISkipsReturn;
      case 130:
        return props_IStatementListContainer;
      case 131:
        return props_IStaticContainerForMethods;
      case 132:
        return props_IThisExpression;
      case 133:
        return props_ITryCatchStatement;
      case 134:
        return props_ITypeApplicable;
      case 135:
        return props_IValidIdentifier;
      case 136:
        return props_IVariableAssignment;
      case 137:
        return props_IVariableDeclaration;
      case 138:
        return props_IVariableReference;
      case 139:
        return props_IVisible;
      case 140:
        return props_IWillBeClassifier;
      case 141:
        return props_IYetUnresolved;
      case 142:
        return props_IfStatement;
      case 143:
        return props_ImplicitAnnotationInstanceValue;
      case 144:
        return props_ImplicitAnnotationMethodKind;
      case 145:
        return props_IncompleteLeftParen;
      case 146:
        return props_IncompleteMemberDeclaration;
      case 147:
        return props_IncompleteRightParen;
      case 148:
        return props_InstanceInitializer;
      case 149:
        return props_InstanceMethodCallOperation;
      case 150:
        return props_InstanceMethodDeclaration;
      case 151:
        return props_InstanceOfExpression;
      case 152:
        return props_IntegerConstant;
      case 153:
        return props_IntegerLiteral;
      case 154:
        return props_IntegerType;
      case 155:
        return props_Interface;
      case 156:
        return props_IsEmptyOperation;
      case 157:
        return props_IsNotEmptyOperation;
      case 158:
        return props_JavaImport;
      case 159:
        return props_JavaImports;
      case 160:
        return props_LeftShiftAssignmentExpression;
      case 161:
        return props_LessThanExpression;
      case 162:
        return props_LessThanOrEqualsExpression;
      case 163:
        return props_LocalInstanceFieldReference;
      case 164:
        return props_LocalInstanceMethodCall;
      case 165:
        return props_LocalMethodCall;
      case 166:
        return props_LocalPropertyReference;
      case 167:
        return props_LocalStaticFieldReference;
      case 168:
        return props_LocalStaticMethodCall;
      case 169:
        return props_LocalToMethodKind;
      case 170:
        return props_LocalVariableDeclaration;
      case 171:
        return props_LocalVariableDeclarationStatement;
      case 172:
        return props_LocalVariableReference;
      case 173:
        return props_LongLiteral;
      case 174:
        return props_LongType;
      case 175:
        return props_LoopLabel;
      case 176:
        return props_LoopLabelReference;
      case 177:
        return props_LowerBoundType;
      case 178:
        return props_MethodDeclaration;
      case 179:
        return props_MinusAssignmentExpression;
      case 180:
        return props_MinusExpression;
      case 181:
        return props_Modifier;
      case 182:
        return props_MulAssignmentExpression;
      case 183:
        return props_MulExpression;
      case 184:
        return props_NPEEqualsExpression;
      case 185:
        return props_NPENotEqualsExpression;
      case 186:
        return props_NestedNewExpression;
      case 187:
        return props_NotEqualsExpression;
      case 188:
        return props_NotExpression;
      case 189:
        return props_NullLiteral;
      case 190:
        return props_NullType;
      case 191:
        return props_Number;
      case 192:
        return props_OperationAssignmentExpression;
      case 193:
        return props_OrAssignmentExpression;
      case 194:
        return props_OrExpression;
      case 195:
        return props_ParameterDeclaration;
      case 196:
        return props_ParameterReference;
      case 197:
        return props_ParenthesizedExpression;
      case 198:
        return props_PlaceholderMember;
      case 199:
        return props_PlusAssignmentExpression;
      case 200:
        return props_PlusExpression;
      case 201:
        return props_PostfixDecrementExpression;
      case 202:
        return props_PostfixIncrementExpression;
      case 203:
        return props_PrefixDecrementExpression;
      case 204:
        return props_PrefixIncrementExpression;
      case 205:
        return props_PrimitiveClassExpression;
      case 206:
        return props_PrimitiveType;
      case 207:
        return props_PrivateVisibility;
      case 208:
        return props_Property;
      case 209:
        return props_PropertyImplementation;
      case 210:
        return props_PropertyReference;
      case 211:
        return props_PropertyValueReference;
      case 212:
        return props_ProtectedVisibility;
      case 213:
        return props_PublicVisibility;
      case 214:
        return props_QualifiedSuperMethodCall;
      case 215:
        return props_RemAssignmentExpression;
      case 216:
        return props_RemExpression;
      case 217:
        return props_RemarkStatement;
      case 218:
        return props_ReturnStatement;
      case 219:
        return props_RightShiftAssignmentExpression;
      case 220:
        return props_SetAccessor;
      case 221:
        return props_ShiftLeftExpression;
      case 222:
        return props_ShiftRightExpression;
      case 223:
        return props_ShiftRightUnsignedExpression;
      case 224:
        return props_ShortType;
      case 225:
        return props_SingleLineComment;
      case 226:
        return props_Statement;
      case 227:
        return props_StatementCommentPart;
      case 228:
        return props_StatementList;
      case 229:
        return props_StaticFieldDeclaration;
      case 230:
        return props_StaticFieldReference;
      case 231:
        return props_StaticInitializer;
      case 232:
        return props_StaticKind;
      case 233:
        return props_StaticMethodCall;
      case 234:
        return props_StaticMethodDeclaration;
      case 235:
        return props_StringBooleanOperation;
      case 236:
        return props_StringLiteral;
      case 237:
        return props_StringToken;
      case 238:
        return props_StringType;
      case 239:
        return props_StubStatementList;
      case 240:
        return props_SubstringExpression;
      case 241:
        return props_SuperConstructorInvocation;
      case 242:
        return props_SuperConstructorKind;
      case 243:
        return props_SuperInerfaceKind;
      case 244:
        return props_SuperMethodCall;
      case 245:
        return props_SuperMethodKind;
      case 246:
        return props_SwitchCase;
      case 247:
        return props_SwitchStatement;
      case 248:
        return props_SynchronizedStatement;
      case 249:
        return props_TernaryOperatorExpression;
      case 250:
        return props_TextCommentPart;
      case 251:
        return props_ThisConstructorInvocation;
      case 252:
        return props_ThisConstructorKind;
      case 253:
        return props_ThisExpression;
      case 254:
        return props_ThrowStatement;
      case 255:
        return props_Tokens;
      case 256:
        return props_TrimOperation;
      case 257:
        return props_TryCatchStatement;
      case 258:
        return props_TryStatement;
      case 259:
        return props_Type;
      case 260:
        return props_TypeAnnotable;
      case 261:
        return props_TypeDerivable;
      case 262:
        return props_TypeVariableDeclaration;
      case 263:
        return props_TypeVariableReference;
      case 264:
        return props_UnaryMinus;
      case 265:
        return props_UndefinedType;
      case 266:
        return props_UnknownConsCall;
      case 267:
        return props_UnknownDotCall;
      case 268:
        return props_UnknownLocalCall;
      case 269:
        return props_UnknownNameRef;
      case 270:
        return props_UnknownNew;
      case 271:
        return props_UnresolvedNameReference;
      case 272:
        return props_UnsignedRightShiftAssignmentExpression;
      case 273:
        return props_UpperBoundType;
      case 274:
        return props_UsingStatement;
      case 275:
        return props_ValueParameter;
      case 276:
        return props_VarType;
      case 277:
        return props_VariableArityType;
      case 278:
        return props_VariableDeclaration;
      case 279:
        return props_VariableReference;
      case 280:
        return props_Visibility;
      case 281:
        return props_VoidType;
      case 282:
        return props_WhileStatement;
      case 283:
        return props_WildCardType;
      case 284:
        return props_XorAssignmentExpression;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
