package jetbrains.mps.baseLanguage.refactorings;

/*Generated by MPS */

import jetbrains.mps.refactoring.framework.BaseRefactoring;
import jetbrains.mps.refactoring.framework.IRefactoringTarget;
import jetbrains.mps.lang.core.refactorings.MoveNodes;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import jetbrains.mps.baseLanguage.util.plugin.refactorings.MoveStaticFieldRefactoring;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.progress.EmptyProgressMonitor;
import jetbrains.mps.project.GlobalScope;
import jetbrains.mps.ide.findusages.model.SearchResults;

public class MoveStaticField extends BaseRefactoring {
  public MoveStaticField() {
    this.addTransientParameter("destination");
    this.addTransientParameter("refactor");
  }
  public IRefactoringTarget getRefactoringTarget() {
    return new MoveStaticField_Target();
  }
  public String getUserFriendlyName() {
    return "Move Static Field";
  }
  public Class getOverridenRefactoringClass() {
    return MoveNodes.class;
  }
  public boolean init(final RefactoringContext refactoringContext) {
    refactoringContext.setParameter("refactor", new MoveStaticFieldRefactoring(refactoringContext.getSelectedNode(), ((SNode) refactoringContext.getParameter("destination"))));
    refactoringContext.getRepository().getModelAccess().runReadAction(new Runnable() {
      public void run() {
        ((MoveStaticFieldRefactoring) refactoringContext.getParameter("refactor")).setUsages(FindUtils.getSearchResults(new EmptyProgressMonitor(), refactoringContext.getSelectedNode(), GlobalScope.getInstance(), "jetbrains.mps.baseLanguage.findUsages.FieldUsages_Finder"));
      }
    });
    return true;
  }
  public void refactor(final RefactoringContext refactoringContext) {
    ((MoveStaticFieldRefactoring) refactoringContext.getParameter("refactor")).doRefactoring();
  }
  public SearchResults getAffectedNodes(final RefactoringContext refactoringContext) {
    return ((MoveStaticFieldRefactoring) refactoringContext.getParameter("refactor")).getUsages();
  }
}
