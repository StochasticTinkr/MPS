package jetbrains.mps.baseLanguage.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionAspectBase;
import jetbrains.mps.intentions.IntentionFactory;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class IntentionsDescriptor extends IntentionAspectBase {
  private final long[] myId2Index;
  private IntentionFactory[] myIntentions0;
  private IntentionFactory[] myIntentions1;
  private IntentionFactory[] myIntentions2;
  private IntentionFactory[] myIntentions3;
  private IntentionFactory[] myIntentions4;
  private IntentionFactory[] myIntentions5;
  private IntentionFactory[] myIntentions6;
  private IntentionFactory[] myIntentions7;
  private IntentionFactory[] myIntentions8;
  private IntentionFactory[] myIntentions9;
  private IntentionFactory[] myIntentions10;
  private IntentionFactory[] myIntentions11;
  private IntentionFactory[] myIntentions12;
  private IntentionFactory[] myIntentions13;
  private IntentionFactory[] myIntentions14;
  private IntentionFactory[] myIntentions15;
  private IntentionFactory[] myIntentions16;
  private IntentionFactory[] myIntentions17;
  private IntentionFactory[] myIntentions18;
  private IntentionFactory[] myIntentions19;
  private IntentionFactory[] myIntentions20;
  private IntentionFactory[] myIntentions21;
  private IntentionFactory[] myIntentions22;
  private IntentionFactory[] myIntentions23;
  private IntentionFactory[] myIntentions24;
  private IntentionFactory[] myIntentions25;
  private IntentionFactory[] myIntentions26;
  private IntentionFactory[] myIntentions27;
  private IntentionFactory[] myIntentions28;
  private IntentionFactory[] myIntentions29;
  private IntentionFactory[] myIntentions30;
  private IntentionFactory[] myIntentions31;
  private IntentionFactory[] myIntentions32;
  private IntentionFactory[] myIntentions33;
  private IntentionFactory[] myIntentions34;
  private IntentionFactory[] myIntentions35;
  private IntentionFactory[] myIntentions36;
  private IntentionFactory[] myIntentions37;
  private IntentionFactory[] myIntentions38;
  private IntentionFactory[] myIntentions39;
  private IntentionFactory[] myIntentions40;

  public IntentionsDescriptor() {
    myId2Index = new long[41];
    myId2Index[0] = 0xf8c108ca66L;
    myId2Index[1] = 0xf8c108ca68L;
    myId2Index[2] = 0xf8c37a7f6eL;
    myId2Index[3] = 0xf8c37f506dL;
    myId2Index[4] = 0xf8c37f506fL;
    myId2Index[5] = 0xf8c77f1e94L;
    myId2Index[6] = 0xf8c77f1e98L;
    myId2Index[7] = 0xf8cc56b1fcL;
    myId2Index[8] = 0xf8cc56b210L;
    myId2Index[9] = 0xf8cc56b213L;
    myId2Index[10] = 0xf8cc56b215L;
    myId2Index[11] = 0xf8cc56b217L;
    myId2Index[12] = 0xf8cc56b21dL;
    myId2Index[13] = 0xf8cc67c7efL;
    myId2Index[14] = 0xf8cc67c7fbL;
    myId2Index[15] = 0xf93c84351fL;
    myId2Index[16] = 0xf93d4da00cL;
    myId2Index[17] = 0xf93d565d10L;
    myId2Index[18] = 0xf940d819f7L;
    myId2Index[19] = 0xfaa4bf0f2fL;
    myId2Index[20] = 0xfbdeb6fecfL;
    myId2Index[21] = 0xfc092b6b77L;
    myId2Index[22] = 0x101d9d3ca30L;
    myId2Index[23] = 0x10a6933ce33L;
    myId2Index[24] = 0x10a698082feL;
    myId2Index[25] = 0x10e50ecba3dL;
    myId2Index[26] = 0x10ef01239c9L;
    myId2Index[27] = 0x10f3ee082d8L;
    myId2Index[28] = 0x1107e0cb103L;
    myId2Index[29] = 0x114a6be947aL;
    myId2Index[30] = 0x117b744dafeL;
    myId2Index[31] = 0x117b9245fc5L;
    myId2Index[32] = 0x118154a6332L;
    myId2Index[33] = 0x11857355952L;
    myId2Index[34] = 0x118ceceb41aL;
    myId2Index[35] = 0x11a59b0fbceL;
    myId2Index[36] = 0x11d2ea8a339L;
    myId2Index[37] = 0x120237c2cebL;
    myId2Index[38] = 0x3399756d2c03d422L;
    myId2Index[39] = 0x6c6b6a1e379f9404L;
    myId2Index[40] = 0x6c6b6a1e379f9408L;
  }

  @Override
  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SConceptId conceptId) {
    final int index = Arrays.binarySearch(myId2Index, conceptId.getIdValue());
    switch (index) {
      case 0:
        // Concept: ClassConcept 
        if (myIntentions0 == null) {
          myIntentions0 = new IntentionFactory[2];
          myIntentions0[0] = new MakeClassAbstract_Intention();
          myIntentions0[1] = new MakeClassFinal_Intention();
        }
        return Arrays.asList(myIntentions0);
      case 1:
        // Concept: FieldDeclaration 
        if (myIntentions1 == null) {
          myIntentions1 = new IntentionFactory[4];
          myIntentions1[0] = new MoveInitializerToConstructor_Intention();
          myIntentions1[1] = new MakeFieldVolatile_Intention();
          myIntentions1[2] = new MakeFieldTransient_Intention();
          myIntentions1[3] = new AddStaticFieldModifier_Intention();
        }
        return Arrays.asList(myIntentions1);
      case 2:
        // Concept: VariableDeclaration 
        if (myIntentions2 == null) {
          myIntentions2 = new IntentionFactory[1];
          myIntentions2[0] = new AddFinalModifierToAny_Intention();
        }
        return Arrays.asList(myIntentions2);
      case 3:
        // Concept: Type 
        if (myIntentions3 == null) {
          myIntentions3 = new IntentionFactory[1];
          myIntentions3[0] = new ConvertToArrayType_Intention();
        }
        return Arrays.asList(myIntentions3);
      case 4:
        // Concept: Expression 
        if (myIntentions4 == null) {
          myIntentions4 = new IntentionFactory[8];
          myIntentions4[0] = new SurroundWithParenthesis_Intention();
          myIntentions4[1] = new SurroundWithTypeCast_Intention();
          myIntentions4[2] = new SurroundWithNegation_Intention();
          myIntentions4[3] = new SurroundWithIfClause_Intention();
          myIntentions4[4] = new SurroundWithIfElseClause_Intention();
          myIntentions4[5] = new CleanUnmatchedParentheses_Intention();
          myIntentions4[6] = new ComputeWholeExpressionValue_Intention();
          myIntentions4[7] = new ComputeExpressionValue_Intention();
        }
        return Arrays.asList(myIntentions4);
      case 5:
        // Concept: ParameterDeclaration 
        if (myIntentions5 == null) {
          myIntentions5 = new IntentionFactory[1];
          myIntentions5[0] = new AddFieldForUnUsedParameter_Intention();
        }
        return Arrays.asList(myIntentions5);
      case 6:
        // Concept: VariableReference 
        if (myIntentions6 == null) {
          myIntentions6 = new IntentionFactory[3];
          myIntentions6[0] = new ExpandBoolean_Intention();
          myIntentions6[1] = new ConvertAssignmentToVariableDeclaration_Intention();
          myIntentions6[2] = new MakeParameterFinal_Intention();
        }
        return Arrays.asList(myIntentions6);
      case 7:
        // Concept: BaseMethodDeclaration 
        if (myIntentions7 == null) {
          myIntentions7 = new IntentionFactory[5];
          myIntentions7[0] = new MakeGeneric_Intention();
          myIntentions7[1] = new AddThrows_Intention();
          myIntentions7[2] = new MakeMethodFinal_Intention();
          myIntentions7[3] = new MakeSynchronized_Intention();
          myIntentions7[4] = new AddModifiers_Intention();
        }
        return Arrays.asList(myIntentions7);
      case 8:
        // Concept: EqualsExpression 
        if (myIntentions8 == null) {
          myIntentions8 = new IntentionFactory[1];
          myIntentions8[0] = new ReplaceEqualityWithEquals_Intention();
        }
        return Arrays.asList(myIntentions8);
      case 9:
        // Concept: ExpressionStatement 
        if (myIntentions9 == null) {
          myIntentions9 = new IntentionFactory[2];
          myIntentions9[0] = new IterateOverIterable_Intention();
          myIntentions9[1] = new ConvertToReturnStatement_Intention();
        }
        return Arrays.asList(myIntentions9);
      case 10:
        // Concept: Statement 
        if (myIntentions10 == null) {
          myIntentions10 = new IntentionFactory[12];
          myIntentions10[0] = new CreateInternalLabel_Intention();
          myIntentions10[1] = new SurroundWithIf_Intention();
          myIntentions10[2] = new SurroundWithIfElse_Intention();
          myIntentions10[3] = new SurroundWithWhile_Intention();
          myIntentions10[4] = new SurroundWithDoWhile_Intention();
          myIntentions10[5] = new SurroundWithFor_Intention();
          myIntentions10[6] = new SurroundStatementsWithForEach_Intention();
          myIntentions10[7] = new SuroundWithTryCatch_Intention();
          myIntentions10[8] = new SurroundWithTryFinally_Intention();
          myIntentions10[9] = new TryCatchFinally_Intention();
          myIntentions10[10] = new SurroundWithSynchronized_Intention();
          myIntentions10[11] = new SurroundWithBrackets_Intention();
        }
        return Arrays.asList(myIntentions10);
      case 11:
        // Concept: IfStatement 
        if (myIntentions11 == null) {
          myIntentions11 = new IntentionFactory[11];
          myIntentions11[0] = new AddCastStatement_Intention();
          myIntentions11[1] = new InvertIfCondition_Intention();
          myIntentions11[2] = new AddElsifClause_Intention();
          myIntentions11[3] = new ElsifTransform_Intention();
          myIntentions11[4] = new ConvertElseToElseIf_Intention();
          myIntentions11[5] = new MakeOneLiner_Intention();
          myIntentions11[6] = new MakeMultiLiner_Intention();
          myIntentions11[7] = new UsedefaultLayout_Intention();
          myIntentions11[8] = new UnwrapIfThenBlock_Intention();
          myIntentions11[9] = new SplitIf_Intention();
          myIntentions11[10] = new ConvertIfConditionToTernaryOperator_Intention();
        }
        return Arrays.asList(myIntentions11);
      case 12:
        // Concept: InstanceMethodDeclaration 
        if (myIntentions12 == null) {
          myIntentions12 = new IntentionFactory[3];
          myIntentions12[0] = new MakeMethodAbstract_Intention();
          myIntentions12[1] = new MakeClassAbstractFromMethod_Intention();
          myIntentions12[2] = new AddOverrideAnnotation_Intention();
        }
        return Arrays.asList(myIntentions12);
      case 13:
        // Concept: LocalVariableDeclaration 
        if (myIntentions13 == null) {
          myIntentions13 = new IntentionFactory[1];
          myIntentions13[0] = new SplitIntoDeclarationAndAssignment_Intention();
        }
        return Arrays.asList(myIntentions13);
      case 14:
        // Concept: PlusExpression 
        if (myIntentions14 == null) {
          myIntentions14 = new IntentionFactory[1];
          myIntentions14[0] = new MergeStringConcatenation_Intention();
        }
        return Arrays.asList(myIntentions14);
      case 15:
        // Concept: StaticFieldDeclaration 
        if (myIntentions15 == null) {
          myIntentions15 = new IntentionFactory[3];
          myIntentions15[0] = new RemoveStaticFieldModifier_Intention();
          myIntentions15[1] = new MakeStaticFieldVolatile_Intention();
          myIntentions15[2] = new MakeStaticFieldTransient_Intention();
        }
        return Arrays.asList(myIntentions15);
      case 16:
        // Concept: ThisExpression 
        if (myIntentions16 == null) {
          myIntentions16 = new IntentionFactory[1];
          myIntentions16[0] = new CreateReferenceOnClass_Intention();
        }
        return Arrays.asList(myIntentions16);
      case 17:
        // Concept: StringLiteral 
        if (myIntentions17 == null) {
          myIntentions17 = new IntentionFactory[1];
          myIntentions17[0] = new SplitStringIntoConcatenation_Intention();
        }
        return Arrays.asList(myIntentions17);
      case 18:
        // Concept: ArrayType 
        if (myIntentions18 == null) {
          myIntentions18 = new IntentionFactory[1];
          myIntentions18[0] = new RemoveArrayType_Intention();
        }
        return Arrays.asList(myIntentions18);
      case 19:
        // Concept: WhileStatement 
        if (myIntentions19 == null) {
          myIntentions19 = new IntentionFactory[1];
          myIntentions19[0] = new ExtractWhileConditionToInternalIfStatement_Intention();
        }
        return Arrays.asList(myIntentions19);
      case 20:
        // Concept: BinaryOperation 
        if (myIntentions20 == null) {
          myIntentions20 = new IntentionFactory[2];
          myIntentions20[0] = new FlipBinaryOperation_Intention();
          myIntentions20[1] = new OrToAndAndBack_Intention();
        }
        return Arrays.asList(myIntentions20);
      case 21:
        // Concept: BlockStatement 
        if (myIntentions21 == null) {
          myIntentions21 = new IntentionFactory[1];
          myIntentions21[0] = new ReplaceBlockWithItsContent_Intention();
        }
        return Arrays.asList(myIntentions21);
      case 22:
        // Concept: Classifier 
        if (myIntentions22 == null) {
          myIntentions22 = new IntentionFactory[1];
          myIntentions22[0] = new ChangeStaticInInner_Intention();
        }
        return Arrays.asList(myIntentions22);
      case 23:
        // Concept: ForeachStatement 
        if (myIntentions23 == null) {
          myIntentions23 = new IntentionFactory[1];
          myIntentions23[0] = new ReplaceForEachLoopWithIndexedLoop_Intention();
        }
        return Arrays.asList(myIntentions23);
      case 24:
        // Concept: ForStatement 
        if (myIntentions24 == null) {
          myIntentions24 = new IntentionFactory[1];
          myIntentions24[0] = new ReplaceForLoopWithWhileLoop_Intention();
        }
        return Arrays.asList(myIntentions24);
      case 25:
        // Concept: AssertStatement 
        if (myIntentions25 == null) {
          myIntentions25 = new IntentionFactory[1];
          myIntentions25[0] = new ReplaceAssertWithIf_Intention();
        }
        return Arrays.asList(myIntentions25);
      case 26:
        // Concept: TernaryOperatorExpression 
        if (myIntentions26 == null) {
          myIntentions26 = new IntentionFactory[2];
          myIntentions26[0] = new ReplaceConditionalWithIf_Intention();
          myIntentions26[1] = new SwapTernaryBranches_Intention();
        }
        return Arrays.asList(myIntentions26);
      case 27:
        // Concept: ThrowStatement 
        if (myIntentions27 == null) {
          myIntentions27 = new IntentionFactory[1];
          myIntentions27[0] = new AddRuntimeExceptionToMethodSignature_Intention();
        }
        return Arrays.asList(myIntentions27);
      case 28:
        // Concept: AnonymousClass 
        if (myIntentions28 == null) {
          myIntentions28 = new IntentionFactory[2];
          myIntentions28[0] = new ConvertToClosure_Intention();
          myIntentions28[1] = new RemoveTVDInAnonymousClass_Intention();
        }
        return Arrays.asList(myIntentions28);
      case 29:
        // Concept: HasAnnotation 
        if (myIntentions29 == null) {
          myIntentions29 = new IntentionFactory[1];
          myIntentions29[0] = new AddAnnotation_Intention();
        }
        return Arrays.asList(myIntentions29);
      case 30:
        // Concept: Property 
        if (myIntentions30 == null) {
          myIntentions30 = new IntentionFactory[3];
          myIntentions30[0] = new SwitchToCustomPropertyImplementation_Intention();
          myIntentions30[1] = new SwitchToDefaultPropertyImplementation_Intention();
          myIntentions30[2] = new SwitchToCustomConstructorPropertyImplementation_Intention();
        }
        return Arrays.asList(myIntentions30);
      case 31:
        // Concept: GetAccessor 
        if (myIntentions31 == null) {
          myIntentions31 = new IntentionFactory[1];
          myIntentions31[0] = new CreateSetAccessor_Intention();
        }
        return Arrays.asList(myIntentions31);
      case 32:
        // Concept: InstanceMethodCallOperation 
        if (myIntentions32 == null) {
          myIntentions32 = new IntentionFactory[2];
          myIntentions32[0] = new ReplaceEqualsWithEquality_Intention();
          myIntentions32[1] = new FilpEqualsIntention_Intention();
        }
        return Arrays.asList(myIntentions32);
      case 33:
        // Concept: IMethodCall 
        if (myIntentions33 == null) {
          myIntentions33 = new IntentionFactory[1];
          myIntentions33[0] = new AddTypeParameters_Intention();
        }
        return Arrays.asList(myIntentions33);
      case 34:
        // Concept: ElsifClause 
        if (myIntentions34 == null) {
          myIntentions34 = new IntentionFactory[2];
          myIntentions34[0] = new ElsifSwapWithMain_Intention();
          myIntentions34[1] = new ConvertElsifToNewIfStatement_Intention();
        }
        return Arrays.asList(myIntentions34);
      case 35:
        // Concept: ClassCreator 
        if (myIntentions35 == null) {
          myIntentions35 = new IntentionFactory[1];
          myIntentions35[0] = new ConvertClassCreatorToAnonimous_Intention();
        }
        return Arrays.asList(myIntentions35);
      case 36:
        // Concept: IBLDeprecatable 
        if (myIntentions36 == null) {
          myIntentions36 = new IntentionFactory[1];
          myIntentions36[0] = new MakeDeprecated_Intention();
        }
        return Arrays.asList(myIntentions36);
      case 37:
        // Concept: IContainsStatementList 
        if (myIntentions37 == null) {
          myIntentions37 = new IntentionFactory[1];
          myIntentions37[0] = new AlterStatementListContainer_Intention();
        }
        return Arrays.asList(myIntentions37);
      case 38:
        // Concept: ITryCatchStatement 
        if (myIntentions38 == null) {
          myIntentions38 = new IntentionFactory[1];
          myIntentions38[0] = new UnwrapTryCatch_Intention();
        }
        return Arrays.asList(myIntentions38);
      case 39:
        // Concept: LocalMethodCall 
        if (myIntentions39 == null) {
          myIntentions39 = new IntentionFactory[1];
          myIntentions39[0] = new SpecifyClass_Intention();
        }
        return Arrays.asList(myIntentions39);
      case 40:
        // Concept: MethodDeclaration 
        if (myIntentions40 == null) {
          myIntentions40 = new IntentionFactory[1];
          myIntentions40[0] = new MakeMethodStatic_Intention();
        }
        return Arrays.asList(myIntentions40);
      default:
        return null;
    }
  }

  @NotNull
  @Override
  public Collection<IntentionFactory> getAllIntentions() {
    IntentionFactory[] rv = new IntentionFactory[91];
    rv[0] = new AddCastStatement_Intention();
    rv[1] = new SplitStringIntoConcatenation_Intention();
    rv[2] = new SplitIntoDeclarationAndAssignment_Intention();
    rv[3] = new AddAnnotation_Intention();
    rv[4] = new FlipBinaryOperation_Intention();
    rv[5] = new InvertIfCondition_Intention();
    rv[6] = new ReplaceEqualityWithEquals_Intention();
    rv[7] = new ReplaceEqualsWithEquality_Intention();
    rv[8] = new ReplaceConditionalWithIf_Intention();
    rv[9] = new ExtractWhileConditionToInternalIfStatement_Intention();
    rv[10] = new ReplaceAssertWithIf_Intention();
    rv[11] = new ReplaceForLoopWithWhileLoop_Intention();
    rv[12] = new FilpEqualsIntention_Intention();
    rv[13] = new ReplaceForEachLoopWithIndexedLoop_Intention();
    rv[14] = new ExpandBoolean_Intention();
    rv[15] = new AddRuntimeExceptionToMethodSignature_Intention();
    rv[16] = new ReplaceBlockWithItsContent_Intention();
    rv[17] = new MoveInitializerToConstructor_Intention();
    rv[18] = new MergeStringConcatenation_Intention();
    rv[19] = new CreateSetAccessor_Intention();
    rv[20] = new MakeGeneric_Intention();
    rv[21] = new AddFinalModifierToAny_Intention();
    rv[22] = new AddElsifClause_Intention();
    rv[23] = new ElsifTransform_Intention();
    rv[24] = new ElsifSwapWithMain_Intention();
    rv[25] = new ConvertClassCreatorToAnonimous_Intention();
    rv[26] = new CreateReferenceOnClass_Intention();
    rv[27] = new ConvertElseToElseIf_Intention();
    rv[28] = new ConvertAssignmentToVariableDeclaration_Intention();
    rv[29] = new MakeDeprecated_Intention();
    rv[30] = new AddFieldForUnUsedParameter_Intention();
    rv[31] = new ConvertToArrayType_Intention();
    rv[32] = new RemoveArrayType_Intention();
    rv[33] = new MakeClassAbstract_Intention();
    rv[34] = new SpecifyClass_Intention();
    rv[35] = new AddThrows_Intention();
    rv[36] = new MakeMethodAbstract_Intention();
    rv[37] = new IterateOverIterable_Intention();
    rv[38] = new MakeMethodFinal_Intention();
    rv[39] = new MakeFieldVolatile_Intention();
    rv[40] = new MakeClassAbstractFromMethod_Intention();
    rv[41] = new ChangeStaticInInner_Intention();
    rv[42] = new MakeClassFinal_Intention();
    rv[43] = new MakeParameterFinal_Intention();
    rv[44] = new ConvertToReturnStatement_Intention();
    rv[45] = new ConvertElsifToNewIfStatement_Intention();
    rv[46] = new CreateInternalLabel_Intention();
    rv[47] = new MakeOneLiner_Intention();
    rv[48] = new MakeMultiLiner_Intention();
    rv[49] = new UsedefaultLayout_Intention();
    rv[50] = new SurroundWithIf_Intention();
    rv[51] = new SurroundWithIfElse_Intention();
    rv[52] = new SurroundWithWhile_Intention();
    rv[53] = new SurroundWithDoWhile_Intention();
    rv[54] = new SurroundWithFor_Intention();
    rv[55] = new SurroundStatementsWithForEach_Intention();
    rv[56] = new SuroundWithTryCatch_Intention();
    rv[57] = new SurroundWithTryFinally_Intention();
    rv[58] = new TryCatchFinally_Intention();
    rv[59] = new SurroundWithSynchronized_Intention();
    rv[60] = new SurroundWithBrackets_Intention();
    rv[61] = new MakeFieldTransient_Intention();
    rv[62] = new SurroundWithParenthesis_Intention();
    rv[63] = new SurroundWithTypeCast_Intention();
    rv[64] = new SurroundWithNegation_Intention();
    rv[65] = new SurroundWithIfClause_Intention();
    rv[66] = new SurroundWithIfElseClause_Intention();
    rv[67] = new AddTypeParameters_Intention();
    rv[68] = new MakeSynchronized_Intention();
    rv[69] = new ConvertToClosure_Intention();
    rv[70] = new UnwrapIfThenBlock_Intention();
    rv[71] = new UnwrapTryCatch_Intention();
    rv[72] = new RemoveTVDInAnonymousClass_Intention();
    rv[73] = new SplitIf_Intention();
    rv[74] = new ConvertIfConditionToTernaryOperator_Intention();
    rv[75] = new AddModifiers_Intention();
    rv[76] = new AddOverrideAnnotation_Intention();
    rv[77] = new AlterStatementListContainer_Intention();
    rv[78] = new RemoveStaticFieldModifier_Intention();
    rv[79] = new AddStaticFieldModifier_Intention();
    rv[80] = new MakeMethodStatic_Intention();
    rv[81] = new MakeStaticFieldVolatile_Intention();
    rv[82] = new MakeStaticFieldTransient_Intention();
    rv[83] = new OrToAndAndBack_Intention();
    rv[84] = new SwapTernaryBranches_Intention();
    rv[85] = new SwitchToCustomPropertyImplementation_Intention();
    rv[86] = new SwitchToDefaultPropertyImplementation_Intention();
    rv[87] = new SwitchToCustomConstructorPropertyImplementation_Intention();
    rv[88] = new CleanUnmatchedParentheses_Intention();
    rv[89] = new ComputeWholeExpressionValue_Intention();
    rv[90] = new ComputeExpressionValue_Intention();
    return Arrays.asList(rv);
  }
}
