package jetbrains.mps.baseLanguage.blTypes.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(2);
  /*package*/ final ConceptDescriptor myConceptPrimitiveTypeDescriptor = createDescriptorForPrimitiveTypeDescriptor();
  /*package*/ final ConceptDescriptor myConceptPrimitiveTypeRef = createDescriptorForPrimitiveTypeRef();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptPrimitiveTypeDescriptor.getId(), 0);
    myIndexMap.put(myConceptPrimitiveTypeRef.getId(), 1);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptPrimitiveTypeDescriptor, myConceptPrimitiveTypeRef);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptPrimitiveTypeDescriptor;
      case 1:
        return myConceptPrimitiveTypeRef;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForPrimitiveTypeDescriptor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.blTypes", "PrimitiveTypeDescriptor", 0xed6d7656532c4bc2L, 0x81d1af945aeb8280L, 0x10de9cae1d1L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:00000000-0000-4000-0000-011c895902dd(jetbrains.mps.baseLanguage.blTypes.structure)/1159268590033");
    b.aggregate("extends", 0x10de9cae1d0L).target(0xed6d7656532c4bc2L, 0x81d1af945aeb8280L, 0x10de9cbf8e8L).optional(true).ordered(true).multiple(true).origin("1159268590032").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPrimitiveTypeRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.blTypes", "PrimitiveTypeRef", 0xed6d7656532c4bc2L, 0x81d1af945aeb8280L, 0x10de9cbf8e8L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x12509ddfaa98f128L);
    b.origin("r:00000000-0000-4000-0000-011c895902dd(jetbrains.mps.baseLanguage.blTypes.structure)/1159268661480");
    b.associate("descriptor", 0x10de9cbf8e7L).target(0xed6d7656532c4bc2L, 0x81d1af945aeb8280L, 0x10de9cae1d1L).optional(false).origin("1159268661479").done();
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    return b.create();
  }
}
