package jetbrains.mps.baseLanguage.constructors.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ArgumentClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomArgumentClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomConstructor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomConstructorContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomConstructorParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomConstructorParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomConstructorUsage = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListArgumentsClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListCustomParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListParameterReference = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ArgumentClause:
        return props_ArgumentClause;
      case LanguageConceptSwitch.CustomArgumentClause:
        return props_CustomArgumentClause;
      case LanguageConceptSwitch.CustomConstructor:
        return props_CustomConstructor;
      case LanguageConceptSwitch.CustomConstructorContainer:
        return props_CustomConstructorContainer;
      case LanguageConceptSwitch.CustomConstructorParameter:
        return props_CustomConstructorParameter;
      case LanguageConceptSwitch.CustomConstructorParameterReference:
        return props_CustomConstructorParameterReference;
      case LanguageConceptSwitch.CustomConstructorUsage:
        return props_CustomConstructorUsage;
      case LanguageConceptSwitch.ListArgumentsClause:
        return props_ListArgumentsClause;
      case LanguageConceptSwitch.ListCustomParameter:
        return props_ListCustomParameter;
      case LanguageConceptSwitch.ListParameterReference:
        return props_ListParameterReference;
    }
    return null;
  }
}
