package jetbrains.mps.baseLanguage.closures.generator.baseLanguage.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.CreateRootRuleContext;
import jetbrains.mps.baseLanguage.closures.helper.AdaptableClassifierTarget;
import jetbrains.mps.generator.template.BaseMappingRuleContext;
import jetbrains.mps.baseLanguage.closures.helper.Values;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.typesystem.inference.TypeChecker;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.baseLanguage.closures.helper.Flags;
import jetbrains.mps.baseLanguage.closures.helper.ClosureLiteralUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.baseLanguage.behavior.Classifier__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import java.util.List;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.closures.behavior.FunctionType__BehaviorDescriptor;
import jetbrains.mps.baseLanguage.closures.constraints.ClassifierTypeUtil;
import jetbrains.mps.baseLanguage.closures.behavior.FunctionMethodDeclaration__BehaviorDescriptor;
import jetbrains.mps.generator.template.ReferenceMacroContext;
import jetbrains.mps.baseLanguage.behavior.ClassConcept__BehaviorDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.baseLanguage.closures.helper.FunctionTypeUtil;
import jetbrains.mps.baseLanguage.closures.helper.StatementListUtil;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodeContext;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.generator.template.TemplateArgumentContext;
import jetbrains.mps.generator.template.SourceSubstituteMacroNodesContext;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.IMapping;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.generator.template.MapSrcMacroContext;
import jetbrains.mps.generator.template.WeavingMappingRuleContext;
import jetbrains.mps.generator.template.MappingScriptContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.baseLanguage.closures.helper.PrepStatementUtil;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.baseLanguage.closures.util.Constants;
import java.util.Iterator;
import jetbrains.mps.baseLanguage.behavior.TypeDerivable__BehaviorDescriptor;
import jetbrains.mps.baseLanguage.closures.helper.WrappersUtils;
import jetbrains.mps.lang.core.behavior.INamedConcept__BehaviorDescriptor;
import jetbrains.mps.baseLanguage.behavior.ExpressionStatement__BehaviorDescriptor;
import jetbrains.mps.generator.template.TemplateVarContext;
import jetbrains.mps.generator.impl.query.ReductionRuleCondition;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import jetbrains.mps.generator.template.ReductionRuleQueryContext;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.CreateRootCondition;
import jetbrains.mps.generator.impl.query.WeaveRuleCondition;
import jetbrains.mps.generator.impl.query.WeaveRuleQuery;
import jetbrains.mps.generator.impl.query.WeaveAnchorQuery;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.generator.template.WeavingAnchorContext;
import jetbrains.mps.generator.impl.query.ScriptCodeBlock;
import jetbrains.mps.generator.impl.query.MapConfigurationCondition;
import jetbrains.mps.generator.impl.query.SourceNodeQuery;
import jetbrains.mps.generator.impl.query.QueryKeyImpl;
import jetbrains.mps.generator.impl.query.SourceNodesQuery;
import java.util.Collection;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.generator.impl.query.PropertyValueQuery;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.generator.impl.query.IfMacroCondition;
import jetbrains.mps.generator.impl.query.InlineSwitchCaseCondition;
import jetbrains.mps.generator.template.InlineSwitchCaseContext;
import jetbrains.mps.generator.impl.query.ReferenceTargetQuery;
import jetbrains.mps.generator.impl.query.VariableValueQuery;
import jetbrains.mps.generator.impl.query.CallArgumentQuery;
import jetbrains.mps.generator.impl.query.MapNodeQuery;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static boolean createRootRule_Condition_0_0(final CreateRootRuleContext _context) {
    return new AdaptableClassifierTarget(_context).hasAdaptable();
  }
  public static boolean rule_Condition_0_0(final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }
  public static boolean rule_Condition_0_1(final BaseMappingRuleContext _context) {
    boolean hasData = Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
    return hasData && !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a6933ce33L, 0x10a6934ab66L, "iterable"))), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, "jetbrains.mps.baseLanguage.structure.ArrayType")));
  }
  public static boolean rule_Condition_0_2(final BaseMappingRuleContext _context) {
    boolean hasData = Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
    return hasData && SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a6933ce33L, 0x10a6934ab66L, "iterable"))), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, "jetbrains.mps.baseLanguage.structure.ArrayType"));
  }
  public static boolean rule_Condition_0_3(final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }
  public static boolean rule_Condition_0_4(final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }
  public static boolean rule_Condition_0_5(final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }
  public static boolean rule_Condition_0_6(final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }
  public static boolean rule_Condition_0_7(final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }
  public static boolean rule_Condition_0_8(final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }
  public static boolean rule_Condition_0_9(final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }
  public static boolean rule_Condition_0_10(final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }
  public static boolean rule_Condition_0_11(final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }
  public static boolean rule_Condition_0_12(final BaseMappingRuleContext _context) {
    return false && Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }
  public static boolean rule_Condition_0_13(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0xf8c37f506eL, "initializer")) != null);
  }
  public static boolean rule_Condition_0_14(final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }
  public static boolean rule_Condition_0_15(final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }
  public static boolean rule_Condition_0_16(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, 0xf8cc67c7f1L, "localVariableDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0xf8c37f506eL, "initializer")) == null);
  }
  public static boolean rule_Condition_0_17(final BaseMappingRuleContext _context) {
    SNode vdecl = SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, 0x5620d42a45242312L, "original")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, "variableDeclaration"));
    return Values.CLOSURE_DATA.get(_context, vdecl) != null;
  }
  public static boolean rule_Condition_0_18(final BaseMappingRuleContext _context) {
    boolean result = Flags.WRAPPING_LOCAL_VARIABLE.isFlagged(_context, _context.getNode());
    if (result) {
      Flags.WRAPPING_LOCAL_VARIABLE.clear(_context, _context.getNode());
    }
    return result;
  }
  public static boolean rule_Condition_0_19(final BaseMappingRuleContext _context) {
    return Flags.WRAPPING_LOCAL_VARIABLE.isFlagged(_context, SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, 0x5620d42a45242312L, "original")));
  }
  public static boolean rule_Condition_0_20(final BaseMappingRuleContext _context) {
    boolean result = Flags.WRAPPING_LOCAL_VARIABLE.isFlagged(_context, _context.getNode());
    if (result) {
      Flags.WRAPPING_LOCAL_VARIABLE.clear(_context, _context.getNode());
    }
    return result;
  }
  public static boolean rule_Condition_0_21(final BaseMappingRuleContext _context) {
    SNode vdecl = SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, 0x5620d42a45242312L, "original")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, "variableDeclaration"));
    if (SNodeOperations.isInstanceOf(vdecl, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"))) {
      return Flags.WRAPPING_LOCAL_VARIABLE.isFlagged(_context, vdecl);
    }
    return false;
  }
  public static boolean rule_Condition_0_22(final BaseMappingRuleContext _context) {
    return !(SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getNode()), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, "jetbrains.mps.baseLanguage.structure.ExpressionStatement")));
  }
  public static boolean rule_Condition_0_23(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, 0xf8cc56b214L, "expression")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11fb8425aa8L, "jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression"));
  }
  public static boolean rule_Condition_0_24(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11d67349093L, "jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation"));
  }
  public static boolean rule_Condition_0_25(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, 0xf8cc67c7f1L, "localVariableDeclaration")) != null) && Flags.NEEDS_INITIALIZER.isFlagged(_context, SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, 0xf8cc67c7f1L, "localVariableDeclaration")));
  }
  public static boolean rule_Condition_0_26(final BaseMappingRuleContext _context) {
    return Values.CLOSURE_DATA.get(_context, _context.getNode()) != null;
  }
  public static boolean rule_Condition_0_27(final BaseMappingRuleContext _context) {
    return (new AdaptableClassifierTarget(_context).getTarget(_context.getNode()) != null);
  }
  public static boolean rule_Condition_0_28(final BaseMappingRuleContext _context) {
    return Values.PREP_DATA.isSet(_context, _context.getNode()) && !(Values.POST_DATA.isSet(_context, _context.getNode()));
  }
  public static boolean rule_Condition_0_29(final BaseMappingRuleContext _context) {
    return ClosureLiteralUtil.hasYieldStatement(_context.getNode());
  }
  public static boolean rule_Condition_0_30(final BaseMappingRuleContext _context) {
    return !(ClosureLiteralUtil.hasYieldStatement(_context.getNode())) && !(Values.LITERAL_TARGET.isSet(_context, _context.getNode()));
  }
  public static boolean rule_Condition_0_31(final BaseMappingRuleContext _context) {
    return !(ClosureLiteralUtil.hasYieldStatement(_context.getNode())) && Values.LITERAL_TARGET.isSet(_context, _context.getNode());
  }
  public static boolean rule_Condition_0_32(final BaseMappingRuleContext _context) {
    return !(Values.PREP_DATA.isSet(_context, _context.getNode())) || Values.POST_DATA.isSet(_context, _context.getNode());
  }
  public static boolean rule_Condition_32_0(final BaseMappingRuleContext _context) {
    return !(Flags.FUNCTION_METHOD.isFlagged(_context, _context.getNode())) && Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(_context.getNode())).any(new IWhereFilter<SNode>() {
      public boolean accept(SNode m) {
        return SNodeOperations.isInstanceOf(m, MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x42d79e63a78a7784L, "jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration"));
      }
    });
  }
  public static boolean rule_Condition_32_1(final BaseMappingRuleContext _context) {
    SNode cl = SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false);
    List<SNode> allYAS = SNodeOperations.getNodeDescendants(cl, MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11e25fc6c63L, "jetbrains.mps.baseLanguage.closures.structure.YieldAllStatement"), false, new SAbstractConcept[]{MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11750ef8265L, "jetbrains.mps.baseLanguage.structure.IStatementListContainer"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1121e2102fdL, "jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock")});
    List<SNode> allYS = SNodeOperations.getNodeDescendants(cl, MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11797183e82L, "jetbrains.mps.baseLanguage.closures.structure.YieldStatement"), false, new SAbstractConcept[]{MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11750ef8265L, "jetbrains.mps.baseLanguage.structure.IStatementListContainer"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1121e2102fdL, "jetbrains.mps.baseLanguage.structure.CommentedStatementsBlock")});
    return (ListSequence.fromList(allYS).isEmpty() ? (ListSequence.fromList(allYAS).count() == 1 && ListSequence.fromList(allYAS).first() == ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(cl, MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, 0x1174bf0522fL, "body")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, "statement"))).last()) : false);
  }
  public static boolean rule_Condition_32_2(final BaseMappingRuleContext _context) {
    SNode cl = SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false);
    SNode cc = SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false, false);
    return cc != null && cl != null && SNodeOperations.getNodeAncestor(cl, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false, false) == cc && !(SNodeOperations.isInstanceOf(cc, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1107e0cb103L, "jetbrains.mps.baseLanguage.structure.AnonymousClass")));
  }
  public static boolean rule_Condition_32_3(final BaseMappingRuleContext _context) {
    SNode cl = SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false);
    SNode cc = SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false, false);
    return cc == null && cl == null;
  }
  public static boolean rule_Condition_32_4(final BaseMappingRuleContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d4da00cL, 0x1136d9d21b3L, "classConcept")) == null);
  }
  public static boolean rule_Condition_32_5(final BaseMappingRuleContext _context) {
    SNode cl = SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false);
    SNode cc = SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false, false);
    return cc != null && cl != null && SNodeOperations.getNodeAncestor(cl, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false, false) == cc && !(SNodeOperations.isInstanceOf(cc, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1107e0cb103L, "jetbrains.mps.baseLanguage.structure.AnonymousClass")));
  }
  public static boolean rule_Condition_32_6(final BaseMappingRuleContext _context) {
    SNode cl = SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false);
    SNode cc = SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false, false);
    return cc == null && cl == null;
  }
  public static boolean rule_Condition_32_7(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b483d77aL, "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation")) && Flags.REMOVE_THIS.isFlagged(_context, SLinkOperations.getTarget(SNodeOperations.as(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, "jetbrains.mps.baseLanguage.structure.DotExpression")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation")));
  }
  public static boolean rule_Condition_32_8(final BaseMappingRuleContext _context) {
    return SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")) && Flags.REMOVE_THIS.isFlagged(_context, SLinkOperations.getTarget(SNodeOperations.as(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, "jetbrains.mps.baseLanguage.structure.DotExpression")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation")));
  }
  public static Object propertyMacro_GetValue_0_0(final PropertyMacroContext _context) {
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, _context.getNode());
    return labels[0];
  }
  public static Object propertyMacro_GetValue_0_1(final PropertyMacroContext _context) {
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, _context.getNode());
    return labels[0];
  }
  public static Object propertyMacro_GetValue_0_2(final PropertyMacroContext _context) {
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, _context.getNode());
    return labels[0];
  }
  public static Object propertyMacro_GetValue_0_3(final PropertyMacroContext _context) {
    return (String) Values.CLOSURE_DATA.get(_context, _context.getNode());
  }
  public static Object propertyMacro_GetValue_0_4(final PropertyMacroContext _context) {
    return (String) Values.CLOSURE_DATA.get(_context, SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, 0x5620d42a45242312L, "original")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, "variableDeclaration")));
  }
  public static Object propertyMacro_GetValue_0_5(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, 0xf8cc67c7f1L, "localVariableDeclaration")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
  }
  public static Object propertyMacro_GetValue_1_0(final PropertyMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct == null) {
      SNode closureType = ((SNode) _context.getVariable("var:nodeType"));
      if (SNodeOperations.isInstanceOf(closureType, MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType"))) {
        ct = FunctionType__BehaviorDescriptor.getDeclarationRuntimeType_idhTOKQzf.invoke(SNodeOperations.cast(closureType, MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")));
      } else if (closureType != null) {
        _context.showErrorMessage(literal, "cannot calculate type for closure literal");
        return null;
      }
    }
    return "" + Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(ct, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")))).first();
  }
  public static Object propertyMacro_GetValue_3_0(final PropertyMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct == null) {
      ct = FunctionType__BehaviorDescriptor.getDeclarationRuntimeType_idhTOKQzf.invoke(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")));
    }
    return SPropertyOperations.getString(Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(ct, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")))).first(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
  }
  public static Object propertyMacro_GetValue_4_0(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    return (String) Values.CLOSURE_DATA.get(_context, sn);
  }
  public static Object propertyMacro_GetValue_4_1(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_it";
  }
  public static Object propertyMacro_GetValue_4_2(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_idx";
  }
  public static Object propertyMacro_GetValue_5_0(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }
  public static Object propertyMacro_GetValue_5_1(final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a697996feL, 0x10a6979f36bL, "variable"));
    return (String) Values.CLOSURE_DATA.get(_context, sn);
  }
  public static Object propertyMacro_GetValue_5_2(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[3];
  }
  public static Object propertyMacro_GetValue_5_3(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[4];
  }
  public static Object propertyMacro_GetValue_5_4(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[2];
  }
  public static Object propertyMacro_GetValue_5_5(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[1];
  }
  public static Object propertyMacro_GetValue_5_6(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[3];
  }
  public static Object propertyMacro_GetValue_6_0(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }
  public static Object propertyMacro_GetValue_6_1(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[1];
  }
  public static Object propertyMacro_GetValue_7_0(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }
  public static Object propertyMacro_GetValue_7_1(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[1];
  }
  public static Object propertyMacro_GetValue_8_0(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }
  public static Object propertyMacro_GetValue_8_1(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[1];
  }
  public static Object propertyMacro_GetValue_8_2(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }
  public static Object propertyMacro_GetValue_8_3(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[(labels[2] != -1 ? 2 : 3)];
  }
  public static Object propertyMacro_GetValue_10_0(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }
  public static Object propertyMacro_GetValue_10_1(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[2];
  }
  public static Object propertyMacro_GetValue_10_2(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[3];
  }
  public static Object propertyMacro_GetValue_11_0(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[1];
  }
  public static Object propertyMacro_GetValue_11_1(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }
  public static Object propertyMacro_GetValue_11_2(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[2];
  }
  public static Object propertyMacro_GetValue_12_0(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }
  public static Object propertyMacro_GetValue_12_1(final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a697996feL, 0x10a6979f36bL, "variable"));
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_it";
  }
  public static Object propertyMacro_GetValue_12_2(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[1];
  }
  public static Object propertyMacro_GetValue_12_3(final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a697996feL, 0x10a6979f36bL, "variable"));
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_it";
  }
  public static Object propertyMacro_GetValue_12_4(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[3];
  }
  public static Object propertyMacro_GetValue_12_5(final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a697996feL, 0x10a6979f36bL, "variable"));
    return (String) Values.CLOSURE_DATA.get(_context, sn);
  }
  public static Object propertyMacro_GetValue_12_6(final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a697996feL, 0x10a6979f36bL, "variable"));
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_it";
  }
  public static Object propertyMacro_GetValue_12_7(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[2];
  }
  public static Object propertyMacro_GetValue_13_0(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }
  public static Object propertyMacro_GetValue_13_1(final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02cdd1bL, 0x10ef02d8048L, "body"));
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }
  public static Object propertyMacro_GetValue_13_2(final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02a8c6aL, 0x10ef02c1b6eL, "defaultBlock"));
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }
  public static Object propertyMacro_GetValue_19_0(final PropertyMacroContext _context) {
    List<SNode> mds;
    return SPropertyOperations.getString(Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")))).first(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
  }
  public static Object propertyMacro_GetValue_28_0(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[0];
  }
  public static Object propertyMacro_GetValue_28_1(final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a697996feL, 0x10a6979f36bL, "variable"));
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_idx";
  }
  public static Object propertyMacro_GetValue_28_2(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[1];
  }
  public static Object propertyMacro_GetValue_28_3(final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a697996feL, 0x10a6979f36bL, "variable"));
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_idx";
  }
  public static Object propertyMacro_GetValue_28_4(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[3];
  }
  public static Object propertyMacro_GetValue_28_5(final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a697996feL, 0x10a6979f36bL, "variable"));
    String varName = (String) Values.CLOSURE_DATA.get(_context, sn);
    return varName + "_idx";
  }
  public static Object propertyMacro_GetValue_28_6(final PropertyMacroContext _context) {
    SNode sn = SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a697996feL, 0x10a6979f36bL, "variable"));
    return (String) Values.CLOSURE_DATA.get(_context, sn);
  }
  public static Object propertyMacro_GetValue_28_7(final PropertyMacroContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    return labels[2];
  }
  public static Object propertyMacro_GetValue_30_0(final PropertyMacroContext _context) {
    return new AdaptableClassifierTarget(_context).getTargetName(_context.getNode());
  }
  public static Object propertyMacro_GetValue_30_1(final PropertyMacroContext _context) {
    return "P" + (1 + SNodeOperations.getIndexInParent(_context.getNode()));
  }
  public static Object propertyMacro_GetValue_30_2(final PropertyMacroContext _context) {
    return new AdaptableClassifierTarget(_context).getTargetName(_context.getNode());
  }
  public static Object propertyMacro_GetValue_30_3(final PropertyMacroContext _context) {
    return "param" + (1 + SNodeOperations.getIndexInParent(_context.getNode()));
  }
  public static Object propertyMacro_GetValue_30_4(final PropertyMacroContext _context) {
    return "param" + (1 + SNodeOperations.getIndexInParent(_context.getNode()));
  }
  public static Object propertyMacro_GetValue_30_5(final PropertyMacroContext _context) {
    SNode adaptable = (SNode) Values.ADAPTABLE.get(_context, _context.getNode());
    return SPropertyOperations.getString(Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(adaptable)).first(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
  }
  public static Object propertyMacro_GetValue_30_6(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(_context.getNode())).first(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
  }
  public static Object propertyMacro_GetValue_32_0(final PropertyMacroContext _context) {
    return _context.createUniqueName("_yield", SNodeOperations.getNodeAncestorWhereConceptInList(_context.getNode(), new SAbstractConcept[]{MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), MetaAdapterFactory.getInterfaceConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11750ef8265L, "jetbrains.mps.baseLanguage.structure.IStatementListContainer")}, false, false));
  }
  public static Object propertyMacro_GetValue_32_1(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, "jetbrains.mps.baseLanguage.structure.DotExpression")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b483d77aL, "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b483d77aL, 0x116b484a653L, "fieldDeclaration")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
  }
  public static Object propertyMacro_GetValue_32_2(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, "jetbrains.mps.baseLanguage.structure.DotExpression")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
  }
  public static Object propertyMacro_GetValue_36_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(SNodeOperations.as(ClassifierTypeUtil.getTypeCoercedToClassifierType(FunctionMethodDeclaration__BehaviorDescriptor.functionType_id2uAWGxT6YKz.invoke(_context.getNode())), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")))).first(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
  }
  public static Object propertyMacro_GetValue_39_0(final PropertyMacroContext _context) {
    SNode closureType = ((SNode) _context.getVariable("var:nodeType"));
    if (SNodeOperations.isInstanceOf(closureType, MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType"))) {
      SNode ct = FunctionType__BehaviorDescriptor.getDeclarationRuntimeType_idhTOKQzf.invoke(SNodeOperations.cast(closureType, MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")));
      SNode imd = Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(ct, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")))).first();
      if (imd != null) {
        return SPropertyOperations.getString(imd, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
      }
    }
    _context.showErrorMessage(_context.getNode(), "cannot calculate type for closure literal");
    return null;
  }
  public static Object propertyMacro_GetValue_40_0(final PropertyMacroContext _context) {
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, _context.getNode());
    return SPropertyOperations.getString(Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(ct, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")))).first(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
  }
  public static Object propertyMacro_GetValue_42_0(final PropertyMacroContext _context) {
    return (SNodeOperations.isInstanceOf(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration")) ? "_" + SPropertyOperations.getString(_context.getNode(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) : SPropertyOperations.getString(_context.getNode(), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
  }
  public static Object referenceMacro_GetReferent_0_0(final ReferenceMacroContext _context) {
    SNode trg = new AdaptableClassifierTarget(_context).getTarget(_context.getNode());
    if ((trg != null)) {
      SNode cc = _context.getOutputNodeByInputNodeAndMappingLabel(trg, "classifierType_adapter");
      return Sequence.fromIterable(ClassConcept__BehaviorDescriptor.constructors_id4_LVZ3pCvsd.invoke(cc)).first();
    }
    _context.showErrorMessage(_context.getNode(), "Adaptable target not found");
    return null;
  }
  public static Object referenceMacro_GetReferent_1_0(final ReferenceMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct != null) {
      return SLinkOperations.getTarget(ct, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"));
    }
    return SLinkOperations.getTarget(FunctionType__BehaviorDescriptor.getDeclarationRuntimeType_idhTOKQzf.invoke(SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType"))), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"));
  }
  public static Object referenceMacro_GetReferent_3_0(final ReferenceMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct != null) {
      return SLinkOperations.getTarget(ct, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"));
    }
    return SLinkOperations.getTarget(FunctionType__BehaviorDescriptor.getDeclarationRuntimeType_idhTOKQzf.invoke(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType"))), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"));
  }
  public static Object referenceMacro_GetReferent_3_1(final ReferenceMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct == null || !(Values.RETURN_TYPE.isSet(_context, ct))) {
      return new SNodePointer("6354ebe7-c22a-4a0f-ac54-50b52ab9b065/java:java.lang(JDK/)", "~Iterable");
    } else {
      Object retClassifier = Values.RETURN_TYPE.get(_context, ct);
      return SLinkOperations.getTarget(((SNode) retClassifier), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"));
    }
  }
  public static Object referenceMacro_GetReferent_19_0(final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"));
  }
  public static Object referenceMacro_GetReferent_30_0(final ReferenceMacroContext _context) {
    return _context.getNode();
  }
  public static Object referenceMacro_GetReferent_30_1(final ReferenceMacroContext _context) {
    return "P" + (1 + SNodeOperations.getIndexInParent(_context.getNode()));
  }
  public static Object referenceMacro_GetReferent_30_2(final ReferenceMacroContext _context) {
    return (SNode) Values.ADAPTABLE.get(_context, _context.getNode());
  }
  public static Object referenceMacro_GetReferent_30_3(final ReferenceMacroContext _context) {
    return (SNode) Values.ADAPTABLE.get(_context, _context.getNode());
  }
  public static Object referenceMacro_GetReferent_30_4(final ReferenceMacroContext _context) {
    return "P" + (1 + SNodeOperations.getIndexInParent(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, 0x1024673a581L, "typeVariableDeclaration"))));
  }
  public static Object referenceMacro_GetReferent_30_5(final ReferenceMacroContext _context) {
    SNode method = Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")))).first();
    return "T" + (1 + SNodeOperations.getIndexInParent(SLinkOperations.getTarget(SNodeOperations.as(SLinkOperations.getTarget(method, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, 0x1024673a581L, "typeVariableDeclaration"))));
  }
  public static Object referenceMacro_GetReferent_30_6(final ReferenceMacroContext _context) {
    return "param" + (1 + SNodeOperations.getIndexInParent(_context.getNode()));
  }
  public static Object referenceMacro_GetReferent_31_0(final ReferenceMacroContext _context) {
    SNode adaptable = SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
    Map<SNode, SNode> theMap = (Map<SNode, SNode>) Values.THE_MAP.get(_context, adaptable);
    return _context.getOutputNodeByInputNodeAndMappingLabel(MapSequence.fromMap(theMap).get(_context.getNode()), "adaptable_target_tvd");
  }
  public static Object referenceMacro_GetReferent_31_1(final ReferenceMacroContext _context) {
    SNode adaptable = SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
    Map<SNode, SNode> theMap = (Map<SNode, SNode>) Values.THE_MAP.get(_context, adaptable);
    return _context.getOutputNodeByInputNodeAndMappingLabel(MapSequence.fromMap(theMap).get(_context.getNode()), "adaptable_target_tvd");
  }
  public static Object referenceMacro_GetReferent_32_0(final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), "yieldAll_for"), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a697996feL, 0x10a6979f36bL, "variable"));
  }
  public static Object referenceMacro_GetReferent_32_1(final ReferenceMacroContext _context) {
    return SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false, false);
  }
  public static Object referenceMacro_GetReferent_32_2(final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration"));
  }
  public static Object referenceMacro_GetReferent_33_0(final ReferenceMacroContext _context) {
    return SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false, false);
  }
  public static Object referenceMacro_GetReferent_35_0(final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(ClassifierTypeUtil.getTypeCoercedToClassifierType(FunctionMethodDeclaration__BehaviorDescriptor.functionType_id2uAWGxT6YKz.invoke(SNodeOperations.cast(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x42d79e63a78a7784L, "jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration")))), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"));
  }
  public static Object referenceMacro_GetReferent_39_0(final ReferenceMacroContext _context) {
    return SLinkOperations.getTarget(FunctionType__BehaviorDescriptor.getDeclarationRuntimeType_idhTOKQzf.invoke(SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType"))), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"));
  }
  public static Object referenceMacro_GetReferent_40_0(final ReferenceMacroContext _context) {
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, _context.getNode());
    return SLinkOperations.getTarget(ct, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier"));
  }
  public static Object referenceMacro_GetReferent_41_0(final ReferenceMacroContext _context) {
    return _context.getNode();
  }
  public static boolean ifMacro_Condition_0_0(final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, "statement"))).first(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d512e1eL, "jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation"));
  }
  public static boolean ifMacro_Condition_1_0(final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct == null;
  }
  public static boolean ifMacro_Condition_1_1(final IfMacroContext _context) {
    SNode ft = SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType"));
    return (SLinkOperations.getTarget(ft, MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, 0x1174a4d5371L, "resultType")) != null) && !(SNodeOperations.isInstanceOf(FunctionTypeUtil.unmeet(SLinkOperations.getTarget(ft, MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, 0x1174a4d5371L, "resultType"))), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc6bf96dL, "jetbrains.mps.baseLanguage.structure.VoidType")));
  }
  public static boolean ifMacro_Condition_1_2(final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct == null;
  }
  public static boolean ifMacro_Condition_1_3(final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct == null;
  }
  public static boolean ifMacro_Condition_1_4(final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct != null;
  }
  public static boolean ifMacro_Condition_1_5(final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct == null;
  }
  public static boolean ifMacro_Condition_1_6(final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct != null;
  }
  public static boolean ifMacro_Condition_3_0(final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct == null;
  }
  public static boolean ifMacro_Condition_3_1(final IfMacroContext _context) {
    SNode ft = SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType"));
    return (SLinkOperations.getTarget(ft, MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, 0x1174a4d5371L, "resultType")) != null) && !(SNodeOperations.isInstanceOf(FunctionTypeUtil.unmeet(SLinkOperations.getTarget(ft, MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, 0x1174a4d5371L, "resultType"))), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc6bf96dL, "jetbrains.mps.baseLanguage.structure.VoidType")));
  }
  public static boolean ifMacro_Condition_3_2(final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct == null;
  }
  public static boolean ifMacro_Condition_3_3(final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct != null;
  }
  public static boolean ifMacro_Condition_3_4(final IfMacroContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    return ct == null;
  }
  public static boolean ifMacro_Condition_4_0(final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getNode()), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a6933ce33L, "jetbrains.mps.baseLanguage.structure.ForeachStatement")) && !(SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a6933ce33L, "jetbrains.mps.baseLanguage.structure.ForeachStatement")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a6933ce33L, 0x10a6934ab66L, "iterable"))), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, "jetbrains.mps.baseLanguage.structure.ArrayType")));
  }
  public static boolean ifMacro_Condition_4_1(final IfMacroContext _context) {
    return SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getNode()), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a6933ce33L, "jetbrains.mps.baseLanguage.structure.ForeachStatement")) && SNodeOperations.isInstanceOf(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a6933ce33L, "jetbrains.mps.baseLanguage.structure.ForeachStatement")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a6933ce33L, 0x10a6934ab66L, "iterable"))), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, "jetbrains.mps.baseLanguage.structure.ArrayType"));
  }
  public static boolean ifMacro_Condition_7_0(final IfMacroContext _context) {
    List<SNode> stmts = (List<SNode>) Values.CHUNK_OF_STATEMENTS.get(_context, _context.getNode());
    return ListSequence.fromList(stmts).isEmpty() || !((SNodeOperations.isInstanceOf(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbe39a867fL, "jetbrains.mps.baseLanguage.structure.BreakStatement")) || SNodeOperations.isInstanceOf(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbf3043726L, "jetbrains.mps.baseLanguage.structure.ContinueStatement")) || SNodeOperations.isInstanceOf(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f3ee082d8L, "jetbrains.mps.baseLanguage.structure.ThrowStatement"))));
  }
  public static boolean ifMacro_Condition_7_1(final IfMacroContext _context) {
    List<SNode> stmts = (List<SNode>) Values.CHUNK_OF_STATEMENTS.get(_context, _context.getNode());
    return ListSequence.fromList(stmts).isEmpty() || !((SNodeOperations.isInstanceOf(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbe39a867fL, "jetbrains.mps.baseLanguage.structure.BreakStatement")) || SNodeOperations.isInstanceOf(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbf3043726L, "jetbrains.mps.baseLanguage.structure.ContinueStatement")) || SNodeOperations.isInstanceOf(ListSequence.fromList(stmts).getElement(ListSequence.fromList(stmts).count() - 1), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f3ee082d8L, "jetbrains.mps.baseLanguage.structure.ThrowStatement"))));
  }
  public static boolean ifMacro_Condition_8_0(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0xfc092b6b76L, "ifFalseStatement")) != null) && !((StatementListUtil.isControlStatement(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0xfc092b6b76L, "ifFalseStatement"))) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0xfc092b6b76L, "ifFalseStatement")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc092b6b77L, "jetbrains.mps.baseLanguage.structure.BlockStatement"))));
  }
  public static boolean ifMacro_Condition_8_1(final IfMacroContext _context) {
    return !(((SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0xfc092b6b76L, "ifFalseStatement")) != null) && !((StatementListUtil.isControlStatement(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0xfc092b6b76L, "ifFalseStatement"))) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0xfc092b6b76L, "ifFalseStatement")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc092b6b77L, "jetbrains.mps.baseLanguage.structure.BlockStatement"))))));
  }
  public static boolean ifMacro_Condition_8_2(final IfMacroContext _context) {
    return !(((SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0xfc092b6b76L, "ifFalseStatement")) != null) && !((StatementListUtil.isControlStatement(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0xfc092b6b76L, "ifFalseStatement"))) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0xfc092b6b76L, "ifFalseStatement")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc092b6b77L, "jetbrains.mps.baseLanguage.structure.BlockStatement"))))));
  }
  public static boolean ifMacro_Condition_13_0(final IfMacroContext _context) {
    return (SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02a8c6aL, 0x10ef02c1b6eL, "defaultBlock")) != null);
  }
  public static boolean ifMacro_Condition_30_0(final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")));
  }
  public static boolean ifMacro_Condition_30_1(final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(_context.getNode())).first(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")));
  }
  public static boolean ifMacro_Condition_31_0(final IfMacroContext _context) {
    SNode adaptable = SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
    Map<SNode, SNode> theMap = (Map<SNode, SNode>) Values.THE_MAP.get(_context, adaptable);
    SNode retType = SLinkOperations.getTarget(Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(adaptable)).first(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType"));
    return SNodeOperations.isInstanceOf(retType, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) && SLinkOperations.getTarget(SNodeOperations.as(retType, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, 0x1024673a581L, "typeVariableDeclaration")) == _context.getNode() && (MapSequence.fromMap(theMap).get(_context.getNode()) != null);
  }
  public static boolean ifMacro_Condition_31_1(final IfMacroContext _context) {
    SNode adaptable = SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
    Map<SNode, SNode> theMap = (Map<SNode, SNode>) Values.THE_MAP.get(_context, adaptable);
    SNode retType = SLinkOperations.getTarget(Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(adaptable)).first(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType"));
    return SNodeOperations.isInstanceOf(retType, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")) && SLinkOperations.getTarget(SNodeOperations.as(retType, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, 0x1024673a581L, "typeVariableDeclaration")) == _context.getNode() && (MapSequence.fromMap(theMap).get(_context.getNode()) == null);
  }
  public static boolean ifMacro_Condition_31_2(final IfMacroContext _context) {
    SNode adaptable = SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
    Map<SNode, SNode> theMap = (Map<SNode, SNode>) Values.THE_MAP.get(_context, adaptable);
    SNode parmType = ListSequence.fromList(SLinkOperations.getChildren(Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(adaptable)).first(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"))).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode pd) {
        return SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(pd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, 0x1024673a581L, "typeVariableDeclaration")) == _context.getNode();
      }
    });
    return (parmType != null) && (MapSequence.fromMap(theMap).get(_context.getNode()) != null);
  }
  public static boolean ifMacro_Condition_31_3(final IfMacroContext _context) {
    SNode adaptable = SNodeOperations.cast(SNodeOperations.getParent(_context.getNode()), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, "jetbrains.mps.baseLanguage.structure.Classifier"));
    Map<SNode, SNode> theMap = (Map<SNode, SNode>) Values.THE_MAP.get(_context, adaptable);
    SNode parmType = ListSequence.fromList(SLinkOperations.getChildren(Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(adaptable)).first(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"))).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode pd) {
        return SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(pd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, 0x1024673a581L, "typeVariableDeclaration")) == _context.getNode();
      }
    });
    return (parmType != null) && (MapSequence.fromMap(theMap).get(_context.getNode()) == null);
  }
  public static boolean ifMacro_Condition_32_0(final IfMacroContext _context) {
    return true;
  }
  public static boolean ifMacro_Condition_36_0(final IfMacroContext _context) {
    return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc6bf96dL, "jetbrains.mps.baseLanguage.structure.VoidType")));
  }
  public static boolean ifMacro_Condition_39_0(final IfMacroContext _context) {
    SNode ft = SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType"));
    return (SLinkOperations.getTarget(ft, MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, 0x1174a4d5371L, "resultType")) != null) && !(SNodeOperations.isInstanceOf(FunctionTypeUtil.unmeet(SLinkOperations.getTarget(ft, MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, 0x1174a4d5371L, "resultType"))), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc6bf96dL, "jetbrains.mps.baseLanguage.structure.VoidType")));
  }
  public static SNode sourceNodeQuery_0_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0xf8c37f506eL, "initializer"));
  }
  public static SNode sourceNodeQuery_0_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, 0xf8cc67c7f1L, "localVariableDeclaration"));
  }
  public static SNode sourceNodeQuery_0_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, 0x5620d42a45242312L, "original")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, "variableDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"));
  }
  public static SNode sourceNodeQuery_0_3(final SourceSubstituteMacroNodeContext _context) {
    return ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, "statement"))).first();
  }
  public static SNode sourceNodeQuery_0_4(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, 0x5620d42a45242312L, "original")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, "variableDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"));
  }
  public static SNode sourceNodeQuery_0_5(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) FunctionType__BehaviorDescriptor.getDeclarationRuntimeType_idhTOKQzf.invoke(_context.getNode());
  }
  public static SNode sourceNodeQuery_0_6(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) FunctionType__BehaviorDescriptor.getDeclarationRuntimeType_idhTOKQzf.invoke(_context.getNode());
  }
  public static SNode sourceNodeQuery_0_7(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a964795L, 0x1174a96b8d9L, "function"))), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, 0x1174a4d5371L, "resultType"));
  }
  public static SNode sourceNodeQuery_0_8(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a964795L, 0x1174a96b8d9L, "function"));
  }
  public static SNode sourceNodeQuery_0_9(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x11fb8425aa8L, 0x11fb842c1adL, "function"));
  }
  public static SNode sourceNodeQuery_0_10(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.as(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x11fb8425aa8L, 0x11fb842c1adL, "function"))), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, 0x1174a4d5371L, "resultType"));
  }
  public static SNode sourceNodeQuery_0_11(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, 0xf8cc56b214L, "expression")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11fb8425aa8L, "jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression")), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x11fb8425aa8L, 0x11fb842c1adL, "function"));
  }
  public static SNode sourceNodeQuery_0_12(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.as(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, 0xf8cc56b214L, "expression")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11fb8425aa8L, "jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression")), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x11fb8425aa8L, 0x11fb842c1adL, "function"))), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, 0x1174a4d5371L, "resultType"));
  }
  public static SNode sourceNodeQuery_0_13(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46a4416L, "operand"));
  }
  public static SNode sourceNodeQuery_0_14(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.as(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46a4416L, "operand"))), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, 0x1174a4d5371L, "resultType"));
  }
  public static SNode sourceNodeQuery_0_15(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, 0xf8cc67c7f1L, "localVariableDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"));
  }
  public static SNode sourceNodeQuery_0_16(final SourceSubstituteMacroNodeContext _context) {
    Flags.NEEDS_INITIALIZER.clear(_context, SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, 0xf8cc67c7f1L, "localVariableDeclaration")));
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, 0xf8cc67c7f1L, "localVariableDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"));
  }
  public static SNode sourceNodeQuery_0_17(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false)), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, 0x1174a4d5371L, "resultType"));
  }
  public static SNode sourceNodeQuery_0_18(final SourceSubstituteMacroNodeContext _context) {
    Values.POST_DATA.set(_context, _context.getNode(), "done");
    return _context.getNode();
  }
  public static SNode sourceNodeQuery_0_19(final SourceSubstituteMacroNodeContext _context) {
    return ClassifierTypeUtil.copyTypeRecursively(_context.getNode());
  }
  public static SNode sourceNodeQuery_1_0(final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(FunctionType__BehaviorDescriptor.getNormalizedReturnType_idhEwIOp4.invoke(SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")))));
  }
  public static SNode sourceNodeQuery_1_1(final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(_context.getNode()));
  }
  public static SNode sourceNodeQuery_1_2(final SourceSubstituteMacroNodeContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct != null) {
      Iterable<SNode> imds = Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(ct, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")));
      if (Sequence.fromIterable(imds).isNotEmpty()) {
        return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(Sequence.fromIterable(imds).first(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType")), ct)));
      }
    }
    return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(FunctionType__BehaviorDescriptor.getNormalizedReturnType_idhEwIOp4.invoke(SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")))));
  }
  public static SNode sourceNodeQuery_1_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, 0x1174bf0522fL, "body"));
  }
  public static SNode sourceNodeQuery_1_4(final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(_context.getNode()));
  }
  public static SNode sourceNodeQuery_3_0(final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unbound(FunctionTypeUtil.unmeet(FunctionType__BehaviorDescriptor.getNormalizedReturnType_idhEwIOp4.invoke(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")))));
  }
  public static SNode sourceNodeQuery_3_1(final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unmeet(_context.getNode());
  }
  public static SNode sourceNodeQuery_3_2(final SourceSubstituteMacroNodeContext _context) {
    return (SNode) FunctionType__BehaviorDescriptor.getNormalizedSequenceParameterReturnType_idhEwIOpc.invoke(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")));
  }
  public static SNode sourceNodeQuery_3_3(final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unmeet(FunctionType__BehaviorDescriptor.getNormalizedSequenceParameterReturnType_idhEwIOpc.invoke(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType"))));
  }
  public static SNode sourceNodeQuery_3_4(final SourceSubstituteMacroNodeContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct != null) {
      Iterable<SNode> imds = Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(ct, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")));
      if (Sequence.fromIterable(imds).isNotEmpty()) {
        return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(Sequence.fromIterable(imds).first(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType")), ct)));
      }
    }
    return null;
  }
  public static SNode sourceNodeQuery_4_0(final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"))));
  }
  public static SNode sourceNodeQuery_4_1(final SourceSubstituteMacroNodeContext _context) {
    return ClassifierTypeUtil.getTypeCoercedToClassifierType(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type")));
  }
  public static SNode sourceNodeQuery_5_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a697996feL, 0x10a6979f36bL, "variable")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0xf8c37f506eL, "initializer"));
  }
  public static SNode sourceNodeQuery_5_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a698082feL, 0x10a69819132L, "condition"));
  }
  public static SNode sourceNodeQuery_5_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a698082feL, 0x10a6981b2c5L, "iteration"));
  }
  public static SNode sourceNodeQuery_6_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x11797183e82L, 0x1179719d515L, "expression"));
  }
  public static SNode sourceNodeQuery_8_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0xf8cc56b218L, "condition"));
  }
  public static SNode sourceNodeQuery_8_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0xfc092b6b76L, "ifFalseStatement"));
  }
  public static SNode sourceNodeQuery_8_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118ceceb41aL, 0x118ced0983eL, "condition"));
  }
  public static SNode sourceNodeQuery_10_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfaa4bf0f2fL, 0xfaa4bf0f30L, "condition"));
  }
  public static SNode sourceNodeQuery_11_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11232674988L, 0x11232679422L, "condition"));
  }
  public static SNode sourceNodeQuery_12_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a6933ce33L, 0x10a6934ab66L, "iterable"));
  }
  public static SNode sourceNodeQuery_13_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02cdd1bL, 0x10ef02d67cfL, "expression"));
  }
  public static SNode sourceNodeQuery_13_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02a8c6aL, 0x10ef02ec241L, "expression"));
  }
  public static SNode sourceNodeQuery_18_0(final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unbound(FunctionTypeUtil.unmeet(FunctionType__BehaviorDescriptor.getNormalizedSequenceParameterReturnType_idhEwIOpc.invoke(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")))));
  }
  public static SNode sourceNodeQuery_19_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")))).first(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType"));
  }
  public static SNode sourceNodeQuery_19_1(final SourceSubstituteMacroNodeContext _context) {
    SNode cl = (SNode) Values.LITERAL.get(_context, _context.getNode());
    return SLinkOperations.getTarget(cl, MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, 0x1174bf0522fL, "body"));
  }
  public static SNode sourceNodeQuery_23_0(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("varDecl"));
  }
  public static SNode sourceNodeQuery_23_1(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("varDecl"));
  }
  public static SNode sourceNodeQuery_23_2(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("varDecl"));
  }
  public static SNode sourceNodeQuery_23_3(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("varDecl"));
  }
  public static SNode sourceNodeQuery_23_4(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("varDecl"));
  }
  public static SNode sourceNodeQuery_23_5(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("varDecl"));
  }
  public static SNode sourceNodeQuery_23_6(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("varDecl"));
  }
  public static SNode sourceNodeQuery_23_7(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("varDecl"));
  }
  public static SNode sourceNodeQuery_23_8(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("varDecl"));
  }
  public static SNode sourceNodeQuery_23_9(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("varDecl"));
  }
  public static SNode sourceNodeQuery_23_10(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("varDecl"));
  }
  public static SNode sourceNodeQuery_28_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a6933ce33L, 0x10a6934ab66L, "iterable"));
  }
  public static SNode sourceNodeQuery_28_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10a6933ce33L, 0x10a6934ab66L, "iterable"));
  }
  public static SNode sourceNodeQuery_30_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"));
  }
  public static SNode sourceNodeQuery_30_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(_context.getNode())).first(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType"));
  }
  public static SNode sourceNodeQuery_32_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x11e25fc6c63L, 0x11e25fc9ed1L, "expression"));
  }
  public static SNode sourceNodeQuery_32_1(final SourceSubstituteMacroNodeContext _context) {
    SNode st;
    SNode t = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x11e25fc6c63L, 0x11e25fc9ed1L, "expression")));
    st = TypeChecker.getInstance().getRuntimeSupport().coerce_(t, HUtil.createMatchingPatternByConcept(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x10c260e9444L, "jetbrains.mps.baseLanguage.collections.structure.SequenceType")), true);
    if ((st == null)) {
      st = TypeChecker.getInstance().getRuntimeSupport().coerce_(ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.as(t, MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1129e737f02L, "jetbrains.mps.lang.typesystem.structure.JoinType")), MetaAdapterFactory.getContainmentLink(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1129e737f02L, 0x1129e73a76aL, "argument"))).getElement(0), HUtil.createMatchingPatternByConcept(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x10c260e9444L, "jetbrains.mps.baseLanguage.collections.structure.SequenceType")), true);
    }
    if ((st == null)) {
      st = TypeChecker.getInstance().getRuntimeSupport().coerce_(ListSequence.fromList(SLinkOperations.getChildren(SNodeOperations.as(t, MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1129e737f02L, "jetbrains.mps.lang.typesystem.structure.JoinType")), MetaAdapterFactory.getContainmentLink(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1129e737f02L, 0x1129e73a76aL, "argument"))).getElement(1), HUtil.createMatchingPatternByConcept(MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x10c260e9444L, "jetbrains.mps.baseLanguage.collections.structure.SequenceType")), true);
    }
    return SLinkOperations.getTarget(st, MetaAdapterFactory.getContainmentLink(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x10c260e9444L, 0x10c260ee40eL, "elementType"));
  }
  public static SNode sourceNodeQuery_32_2(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x11e25fc6c63L, 0x11e25fc9ed1L, "expression"));
  }
  public static SNode sourceNodeQuery_32_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, "jetbrains.mps.baseLanguage.structure.DotExpression")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b483d77aL, "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b483d77aL, 0x116b484a653L, "fieldDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"));
  }
  public static SNode sourceNodeQuery_32_4(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, "jetbrains.mps.baseLanguage.structure.DotExpression")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType"));
  }
  public static SNode sourceNodeQuery_36_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1ffL, "body"));
  }
  public static SNode sourceNodeQuery_36_1(final SourceSubstituteMacroNodeContext _context) {
    return ClassifierTypeUtil.getTypeCoercedToClassifierType(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType")));
  }
  public static SNode sourceNodeQuery_39_0(final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(FunctionType__BehaviorDescriptor.getNormalizedReturnType_idhEwIOp4.invoke(SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")))));
  }
  public static SNode sourceNodeQuery_39_1(final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(_context.getNode()));
  }
  public static SNode sourceNodeQuery_39_2(final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(FunctionType__BehaviorDescriptor.getNormalizedReturnType_idhEwIOp4.invoke(SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")))));
  }
  public static SNode sourceNodeQuery_39_3(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, 0x1174bf0522fL, "body"));
  }
  public static SNode sourceNodeQuery_39_4(final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(_context.getNode()));
  }
  public static SNode sourceNodeQuery_40_0(final SourceSubstituteMacroNodeContext _context) {
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, _context.getNode());
    SNode mdecl = Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(ct, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")))).first();
    return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(mdecl, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType")), ct)));
  }
  public static SNode sourceNodeQuery_40_1(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, 0x1174bf0522fL, "body"));
  }
  public static SNode sourceNodeQuery_40_2(final SourceSubstituteMacroNodeContext _context) {
    return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(_context.getNode()));
  }
  public static SNode sourceNodeQuery_41_0(final SourceSubstituteMacroNodeContext _context) {
    return SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0xf8c37f506eL, "initializer"));
  }
  public static SNode sourceNodeQuery_42_0(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("var:wrapperType"));
  }
  public static SNode sourceNodeQuery_42_1(final SourceSubstituteMacroNodeContext _context) {
    return ((SNode) _context.getVariable("var:wrapperType"));
  }
  public static Object templateArgumentQuery_42_0(final TemplateArgumentContext _context) {
    return _context.getNode();
  }
  public static Iterable<SNode> sourceNodesQuery_0_0(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), false, false), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"));
    for (SNode p : SLinkOperations.getChildren(SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), false, false), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"))) {
      if (Flags.WRAPPING_LOCAL_VARIABLE.isFlagged(_context, p)) {
        ListSequence.fromList(res).addElement(p);
      }
    }
    return res;
  }
  public static Iterable<SNode> sourceNodesQuery_0_1(final SourceSubstituteMacroNodesContext _context) {
    return (SNodeOperations.isInstanceOf(ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, "statement"))).first(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d512e1eL, "jetbrains.mps.baseLanguage.structure.SuperConstructorInvocation")) ? ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, "statement"))).skip(1) : SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, "statement")));
  }
  public static Iterable<SNode> sourceNodesQuery_0_2(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a964795L, 0x1174aa207d4L, "parameter"));
  }
  public static Iterable<SNode> sourceNodesQuery_0_3(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x11fb8425aa8L, 0x11fb842da3eL, "parameter"));
  }
  public static Iterable<SNode> sourceNodesQuery_0_4(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, 0xf8cc56b214L, "expression")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11fb8425aa8L, "jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression")), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x11fb8425aa8L, 0x11fb842da3eL, "parameter"));
  }
  public static Iterable<SNode> sourceNodesQuery_0_5(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11d67349093L, "jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation")), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x11d67349093L, 0x11d67375fccL, "parameter"));
  }
  public static Iterable<SNode> sourceNodesQuery_0_6(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x117545d385aL, 0x117545e58d8L, "parameter"));
  }
  public static Iterable<SNode> sourceNodesQuery_0_7(final SourceSubstituteMacroNodesContext _context) {
    SNode trg = new AdaptableClassifierTarget(_context).getTarget(_context.getNode());
    SNode ntype = FunctionType__BehaviorDescriptor.getDeclarationRuntimeType_idhTOKQzf.invoke(SNodeOperations.as(TypeChecker.getInstance().getTypeOf(_context.getNode()), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")));
    ntype = (ntype == null ? TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(_context.getNode()), HUtil.createMatchingPatternByConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType")), true) : ntype);
    final Map<SNode, SNode> theMap = FunctionTypeUtil.mapAdaptableTargetTVDs(SLinkOperations.getTarget(SNodeOperations.cast(ntype, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")), trg);
    final List<SNode> params = SLinkOperations.getChildren(SNodeOperations.cast(ntype, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x102419671abL, "parameter"));

    return ListSequence.fromList(SLinkOperations.getChildren(trg, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102463b447aL, 0x102463bb98eL, "typeVariableDeclaration"))).select(new ISelector<SNode, IMapping<SNode, SNode>>() {
      public IMapping<SNode, SNode> select(final SNode tvd) {
        return MapSequence.fromMap(theMap).findFirst(new IWhereFilter<IMapping<SNode, SNode>>() {
          public boolean accept(IMapping<SNode, SNode> m) {
            return m.value() == tvd;
          }
        });
      }
    }).where(new IWhereFilter<IMapping<SNode, SNode>>() {
      public boolean accept(IMapping<SNode, SNode> m) {
        return m != null;
      }
    }).select(new ISelector<IMapping<SNode, SNode>, SNode>() {
      public SNode select(IMapping<SNode, SNode> m) {
        return ListSequence.fromList(params).getElement(SNodeOperations.getIndexInParent(m.key()));
      }
    });
  }
  public static Iterable<SNode> sourceNodesQuery_1_0(final SourceSubstituteMacroNodesContext _context) {
    return (List<SNode>) FunctionType__BehaviorDescriptor.getNormalizedParameterTypes_idhEwIOps.invoke(SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")));
  }
  public static Iterable<SNode> sourceNodesQuery_1_1(final SourceSubstituteMacroNodesContext _context) {
    return (List<SNode>) FunctionType__BehaviorDescriptor.getNormalizedThrowsTypes_id2ZrgyPlTDZP.invoke(SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")));
  }
  public static Iterable<SNode> sourceNodesQuery_1_2(final SourceSubstituteMacroNodesContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode pt : SLinkOperations.getChildren(ct, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x102419671abL, "parameter"))) {
      ListSequence.fromList(res).addElement(FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(pt)));
    }
    return res;
  }
  public static Iterable<SNode> sourceNodesQuery_1_3(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> paramDecls = SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, 0x1174bf02c34L, "parameter"));
    int idx = 0;
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode ft : FunctionType__BehaviorDescriptor.getNormalizedParameterTypes_idhEwIOps.invoke(SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")))) {
      SNode pd = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"));
      SLinkOperations.setTarget(pd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"), SNodeOperations.copyNode(FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(ft))));
      SPropertyOperations.set(pd, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(ListSequence.fromList(paramDecls).getElement(idx), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
      SPropertyOperations.set(pd, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0x111f9e9f00cL, "isFinal"), "" + (SPropertyOperations.getBoolean(ListSequence.fromList(paramDecls).getElement(idx), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0x111f9e9f00cL, "isFinal"))));
      idx++;
      ListSequence.fromList(res).addElement(pd);
    }
    return res;
  }
  public static Iterable<SNode> sourceNodesQuery_1_4(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> paramDecls = SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, 0x1174bf02c34L, "parameter"));
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct != null) {
      Iterable<SNode> imds = Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(ct, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")));
      if (Sequence.fromIterable(imds).isNotEmpty()) {
        SNode imd = Sequence.fromIterable(imds).first();
        List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
        int idx = 0;
        for (SNode pd : SLinkOperations.getChildren(imd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"))) {
          if (idx >= ListSequence.fromList(paramDecls).count()) {
            _context.showErrorMessage(_context.getNode(), "Method parameters count doesn't match closure parameters count: " + SPropertyOperations.getString(imd, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x10d34f97574L, "shortDescription")));
            break;
          }
          SNode newpd = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"));
          SLinkOperations.setTarget(newpd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"), FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(pd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type")), ct))));
          SPropertyOperations.set(newpd, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(ListSequence.fromList(paramDecls).getElement(idx), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
          SPropertyOperations.set(newpd, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0x111f9e9f00cL, "isFinal"), "" + (SPropertyOperations.getBoolean(ListSequence.fromList(paramDecls).getElement(idx), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0x111f9e9f00cL, "isFinal"))));
          idx++;
          ListSequence.fromList(res).addElement(newpd);
        }
        return res;
      }
    }
    return ListSequence.fromList(new ArrayList<SNode>());
  }
  public static Iterable<SNode> sourceNodesQuery_1_5(final SourceSubstituteMacroNodesContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (ct != null) {
      Iterable<SNode> imds = Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(ct, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")));
      if (Sequence.fromIterable(imds).isNotEmpty()) {
        SNode imd = Sequence.fromIterable(imds).first();
        List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
        for (SNode tt : SLinkOperations.getChildren(imd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0x10f383d6949L, "throwsItem"))) {
          ListSequence.fromList(res).addElement(ClassifierTypeUtil.resolveType(tt, ct));
        }
        return res;
      }
    }
    return (List<SNode>) FunctionType__BehaviorDescriptor.getNormalizedThrowsTypes_id2ZrgyPlTDZP.invoke(SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")));
  }
  public static Iterable<SNode> sourceNodesQuery_3_0(final SourceSubstituteMacroNodesContext _context) {
    return (List<SNode>) FunctionType__BehaviorDescriptor.getNormalizedParameterTypes_idhEwIOps.invoke(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")));
  }
  public static Iterable<SNode> sourceNodesQuery_3_1(final SourceSubstituteMacroNodesContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode pt : SLinkOperations.getChildren(ct, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x102419671abL, "parameter"))) {
      ListSequence.fromList(res).addElement(ClassifierTypeUtil.getTypeCoercedToClassifierType(FunctionTypeUtil.unbound(FunctionTypeUtil.unmeet(pt))));
    }
    return res;
  }
  public static Iterable<SNode> sourceNodesQuery_3_2(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> paramDecls = SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, 0x1174bf02c34L, "parameter"));
    int idx = 0;
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode ft : FunctionType__BehaviorDescriptor.getNormalizedParameterTypes_idhEwIOps.invoke(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")))) {
      SNode pd = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"));
      SLinkOperations.setTarget(pd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"), SNodeOperations.copyNode(ClassifierTypeUtil.getTypeCoercedToClassifierType(FunctionTypeUtil.unbound(FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(ft))))));
      SPropertyOperations.set(pd, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(ListSequence.fromList(paramDecls).getElement(idx), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
      SPropertyOperations.set(pd, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0x111f9e9f00cL, "isFinal"), "" + (true));
      ListSequence.fromList(res).addElement(pd);
      idx++;
    }
    return res;
  }
  public static Iterable<SNode> sourceNodesQuery_3_3(final SourceSubstituteMacroNodesContext _context) {
    SNode literal = _context.getNode();
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, literal);
    if (true || ct == null || !(Values.RETURN_TYPE.isSet(_context, ct))) {
      return ListSequence.fromListAndArray(new ArrayList<SNode>(), FunctionTypeUtil.unmeet(FunctionType__BehaviorDescriptor.getNormalizedSequenceParameterReturnType_idhEwIOpc.invoke(SNodeOperations.cast(TypeChecker.getInstance().getTypeOf(_context.getNode()), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")))));
    } else {
      Object retClassifier = Values.RETURN_TYPE.get(_context, ct);
      return SLinkOperations.getChildren(((SNode) retClassifier), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x102419671abL, "parameter"));
    }
  }
  public static Iterable<SNode> sourceNodesQuery_7_0(final SourceSubstituteMacroNodesContext _context) {
    return (List<SNode>) Values.CHUNK_OF_STATEMENTS.get(_context, _context.getNode());
  }
  public static Iterable<SNode> sourceNodesQuery_7_1(final SourceSubstituteMacroNodesContext _context) {
    SNode sn = _context.getNode();
    Integer[] labels = (Integer[]) Values.CLOSURE_DATA.get(_context, sn);
    int BEGIN = labels[0];
    int END = labels[1];
    List<SNode> results = ListSequence.fromList(new ArrayList<SNode>());
    List<SNode> stmts = StatementListUtil.selectStatementsUntilControlStatement(_context.getNode());
    do {
      int beginLabel = BEGIN;
      int endLabel = END;
      SNode lastStmt = null;
      SNode slist = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, "jetbrains.mps.baseLanguage.structure.StatementList"));
      List<SNode> chunk = ListSequence.fromList(new ArrayList<SNode>());
      Values.CHUNK_OF_STATEMENTS.set(_context, slist, chunk);
      for (SNode stmt : stmts) {
        ListSequence.fromList(chunk).addElement(stmt);
        lastStmt = stmt;
      }
      SNode cstmt;
      if ((lastStmt != null)) {
        cstmt = StatementListUtil.nextSibling(lastStmt);
      } else {
        List<SNode> allstmts = SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, "statement"));
        cstmt = (ListSequence.fromList(allstmts).isNotEmpty() ? ListSequence.fromList(allstmts).getElement(0) : null);
      }
      stmts = null;
      if ((cstmt != null)) {
        labels = (Integer[]) Values.CLOSURE_DATA.get(_context, cstmt);
        endLabel = (labels != null ? labels[0] : -1);
        lastStmt = StatementListUtil.nextSibling(cstmt);
        while ((lastStmt != null)) {
          stmts = StatementListUtil.selectStatementsUntilControlStatement(_context.getNode(), lastStmt);
          if (ListSequence.fromList(stmts).isEmpty()) {
            cstmt = lastStmt;
            lastStmt = StatementListUtil.nextSibling(lastStmt);
          } else {
            labels = (Integer[]) Values.CLOSURE_DATA.get(_context, cstmt);
            BEGIN = (labels != null ? labels[labels.length - 1] : -1);
            break;
          }
        }
      }
      ListSequence.fromList(results).addElement(slist);
      Object data = new Integer[]{beginLabel, endLabel};
      Values.CLOSURE_DATA.set(_context, slist, data);
    } while (stmts != null && ListSequence.fromList(stmts).isNotEmpty());
    return results;
  }
  public static Iterable<SNode> sourceNodesQuery_8_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, 0x118cecf1287L, "elsifClauses"));
  }
  public static Iterable<SNode> sourceNodesQuery_13_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ef02a8c6aL, 0x10ef02edcafL, "case"));
  }
  public static Iterable<SNode> sourceNodesQuery_19_0(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> ptypes = SLinkOperations.getChildren(SNodeOperations.cast(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x102419671abL, "parameter"));
    List<SNode> result = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode pt : ptypes) {
      ListSequence.fromList(result).addElement(ClassifierTypeUtil.copyTypeRecursively(pt));
    }
    return result;
  }
  public static Iterable<SNode> sourceNodesQuery_19_1(final SourceSubstituteMacroNodesContext _context) {
    SNode mtd = Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")))).first();
    int idx = 0;
    List<SNode> ptypes = SLinkOperations.getChildren(SNodeOperations.cast(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x102419671abL, "parameter"));
    SNode cl = (SNode) Values.LITERAL.get(_context, _context.getNode());
    List<SNode> litParams = SLinkOperations.getChildren(cl, MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, 0x1174bf02c34L, "parameter"));
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode pdecl : SLinkOperations.getChildren(mtd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"))) {
      SNode pd = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"));
      SNode ptype = SLinkOperations.getTarget(pdecl, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"));
      if (SNodeOperations.isInstanceOf(ptype, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"))) {
        List<SNode> psib = SNodeOperations.getPrevSiblings(SLinkOperations.getTarget(SNodeOperations.cast(ptype, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, "jetbrains.mps.baseLanguage.structure.TypeVariableReference")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, 0x1024673a581L, "typeVariableDeclaration")), false);
        SLinkOperations.setTarget(pd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"), ClassifierTypeUtil.copyTypeRecursively(ListSequence.fromList(ptypes).getElement(ListSequence.fromList(psib).count())));
      } else {
        SLinkOperations.setTarget(pd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"), SNodeOperations.copyNode(ptype));
      }
      SPropertyOperations.set(pd, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(ListSequence.fromList(litParams).getElement(idx), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
      idx++;
      ListSequence.fromList(res).addElement(pd);
    }
    return res;
  }
  public static Iterable<SNode> sourceNodesQuery_30_0(final SourceSubstituteMacroNodesContext _context) {
    return new AdaptableClassifierTarget(_context).getAllAdaptable();
  }
  public static Iterable<SNode> sourceNodesQuery_30_1(final SourceSubstituteMacroNodesContext _context) {
    return new AdaptableClassifierTarget(_context).getTargets(_context.getNode());
  }
  public static Iterable<SNode> sourceNodesQuery_30_2(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102463b447aL, 0x102463bb98eL, "typeVariableDeclaration"));
  }
  public static Iterable<SNode> sourceNodesQuery_30_3(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102463b447aL, 0x102463bb98eL, "typeVariableDeclaration"));
  }
  public static Iterable<SNode> sourceNodesQuery_30_4(final SourceSubstituteMacroNodesContext _context) {
    SNode adaptable = (SNode) Values.ADAPTABLE.get(_context, _context.getNode());
    Map<SNode, SNode> theMap = FunctionTypeUtil.mapAdaptableTargetTVDs(adaptable, _context.getNode());
    Values.THE_MAP.set(_context, adaptable, theMap);
    return SLinkOperations.getChildren(adaptable, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102463b447aL, 0x102463bb98eL, "typeVariableDeclaration"));
  }
  public static Iterable<SNode> sourceNodesQuery_30_5(final SourceSubstituteMacroNodesContext _context) {
    SNode adaptable = (SNode) Values.ADAPTABLE.get(_context, _context.getNode());
    Map<SNode, SNode> theMap = FunctionTypeUtil.mapAdaptableTargetTVDs(adaptable, _context.getNode());
    Values.THE_MAP.set(_context, adaptable, theMap);
    return SLinkOperations.getChildren(adaptable, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102463b447aL, 0x102463bb98eL, "typeVariableDeclaration"));
  }
  public static Iterable<SNode> sourceNodesQuery_30_6(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(_context.getNode())).first(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"));
  }
  public static Iterable<SNode> sourceNodesQuery_30_7(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(_context.getNode())).first(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"));
  }
  public static Iterable<SNode> sourceNodesQuery_32_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"));
  }
  public static Iterable<SNode> sourceNodesQuery_32_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(_context.getNode(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, "jetbrains.mps.baseLanguage.structure.DotExpression")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"));
  }
  public static Iterable<SNode> sourceNodesQuery_35_0(final SourceSubstituteMacroNodesContext _context) {
    return Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(_context.getNode())).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode m) {
        return SNodeOperations.isInstanceOf(m, MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x42d79e63a78a7784L, "jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration"));
      }
    });
  }
  public static Iterable<SNode> sourceNodesQuery_35_1(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> parameter = SLinkOperations.getChildren(SNodeOperations.cast(ClassifierTypeUtil.getTypeCoercedToClassifierType(FunctionMethodDeclaration__BehaviorDescriptor.functionType_id2uAWGxT6YKz.invoke(SNodeOperations.cast(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x42d79e63a78a7784L, "jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration")))), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x102419671abL, "parameter"));
    return ListSequence.fromList(parameter).select(new ISelector<SNode, SNode>() {
      public SNode select(SNode pt) {
        return FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(pt));
      }
    });
  }
  public static Iterable<SNode> sourceNodesQuery_36_0(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"));
  }
  public static Iterable<SNode> sourceNodesQuery_36_1(final SourceSubstituteMacroNodesContext _context) {
    return SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0x10f383d6949L, "throwsItem"));
  }
  public static Iterable<SNode> sourceNodesQuery_39_0(final SourceSubstituteMacroNodesContext _context) {
    return (List<SNode>) FunctionType__BehaviorDescriptor.getNormalizedParameterTypes_idhEwIOps.invoke(SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")));
  }
  public static Iterable<SNode> sourceNodesQuery_39_1(final SourceSubstituteMacroNodesContext _context) {
    return (List<SNode>) FunctionType__BehaviorDescriptor.getNormalizedThrowsTypes_id2ZrgyPlTDZP.invoke(SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")));
  }
  public static Iterable<SNode> sourceNodesQuery_39_2(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> paramDecls = SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, 0x1174bf02c34L, "parameter"));
    int idx = 0;
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode pt : FunctionType__BehaviorDescriptor.getNormalizedParameterTypes_idhEwIOps.invoke((SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType"))))) {
      SNode pd = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"));
      SLinkOperations.setTarget(pd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"), SNodeOperations.copyNode(FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(pt))));
      SPropertyOperations.set(pd, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(ListSequence.fromList(paramDecls).getElement(idx), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
      SPropertyOperations.set(pd, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0x111f9e9f00cL, "isFinal"), "" + (SPropertyOperations.getBoolean(ListSequence.fromList(paramDecls).getElement(idx), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0x111f9e9f00cL, "isFinal"))));
      idx++;
      ListSequence.fromList(res).addElement(pd);
    }
    return res;
  }
  public static Iterable<SNode> sourceNodesQuery_39_3(final SourceSubstituteMacroNodesContext _context) {
    return (List<SNode>) FunctionType__BehaviorDescriptor.getNormalizedThrowsTypes_id2ZrgyPlTDZP.invoke(SNodeOperations.cast(((SNode) _context.getVariable("var:nodeType")), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType")));
  }
  public static Iterable<SNode> sourceNodesQuery_40_0(final SourceSubstituteMacroNodesContext _context) {
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, _context.getNode());
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode pt : SLinkOperations.getChildren(ct, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x102419671abL, "parameter"))) {
      ListSequence.fromList(res).addElement(FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(pt)));
    }
    return res;
  }
  public static Iterable<SNode> sourceNodesQuery_40_1(final SourceSubstituteMacroNodesContext _context) {
    List<SNode> paramDecls = SLinkOperations.getChildren(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, 0x1174bf02c34L, "parameter"));
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, _context.getNode());
    SNode imd = Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(ct, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")))).first();
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    int idx = 0;
    for (SNode pd : SLinkOperations.getChildren(imd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"))) {
      if (idx >= ListSequence.fromList(paramDecls).count()) {
        _context.showErrorMessage(_context.getNode(), "Method parameters count doesn't match closure parameters count: " + SPropertyOperations.getString(imd, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, 0x10d34f97574L, "shortDescription")));
        break;
      }
      SNode newpd = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"));
      SLinkOperations.setTarget(newpd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"), SNodeOperations.cast(FunctionTypeUtil.unmeet(FunctionTypeUtil.unbound(ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(pd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type")), ct))), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL, "jetbrains.mps.baseLanguage.structure.Type")));
      SPropertyOperations.set(newpd, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(ListSequence.fromList(paramDecls).getElement(idx), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
      SPropertyOperations.set(newpd, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0x111f9e9f00cL, "isFinal"), "" + (SPropertyOperations.getBoolean(ListSequence.fromList(paramDecls).getElement(idx), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0x111f9e9f00cL, "isFinal"))));
      idx++;
      ListSequence.fromList(res).addElement(newpd);
    }
    return res;
  }
  public static Iterable<SNode> sourceNodesQuery_40_2(final SourceSubstituteMacroNodesContext _context) {
    SNode ct = (SNode) Values.LITERAL_TARGET.get(_context, _context.getNode());
    SNode imd = Sequence.fromIterable(Classifier__BehaviorDescriptor.methods_id4_LVZ3pBKCn.invoke(SLinkOperations.getTarget(ct, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, 0x101de490babL, "classifier")))).first();
    List<SNode> res = ListSequence.fromList(new ArrayList<SNode>());
    for (SNode tt : SLinkOperations.getChildren(imd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0x10f383d6949L, "throwsItem"))) {
      ListSequence.fromList(res).addElement(ClassifierTypeUtil.resolveType(tt, ct));
    }
    return res;
  }
  public static SNode mapSrcMacro_map_0_0(final MapSrcMacroContext _context) {
    SNode oldDecl = SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, 0x5620d42a45242312L, "original")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, "variableDeclaration")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"));
    SNode newDecl = _context.getOutputNodeByInputNodeAndMappingLabel(oldDecl, "wrapped_localVar");
    SNode lvr = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, "jetbrains.mps.baseLanguage.structure.VariableReference"));
    SLinkOperations.setTarget(lvr, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, "variableDeclaration"), newDecl);
    return lvr;
  }
  public static SNode mapSrcMacro_map_0_1(final MapSrcMacroContext _context) {
    SNode lvds = _context.getOutputNodeByInputNodeAndMappingLabel(((SNode) _context.getVariable("var:originalParameterDeclaration")), "woven_LVDS");
    SNode lvr = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, "jetbrains.mps.baseLanguage.structure.VariableReference"));
    SLinkOperations.setTarget(lvr, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, "variableDeclaration"), SLinkOperations.getTarget(lvds, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7f0L, 0xf8cc67c7f1L, "localVariableDeclaration")));
    return lvr;
  }
  public static SNode weavingRule_ContextQuery_0_0(final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false), "closure_switch");
  }
  public static SNode weavingRule_ContextQuery_0_1(final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false), "closure_switch");
  }
  public static SNode weavingRule_ContextQuery_0_2(final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false), "closure_switch");
  }
  public static SNode weavingRule_ContextQuery_0_3(final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false), "closure_switch");
  }
  public static SNode weavingRule_ContextQuery_0_4(final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false), "closure_switch");
  }
  public static SNode weavingRule_ContextQuery_0_5(final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false), "closure_switch");
  }
  public static SNode weavingRule_ContextQuery_0_6(final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false), "closure_switch");
  }
  public static SNode weavingRule_ContextQuery_0_7(final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false), "closure_switch");
  }
  public static SNode weavingRule_ContextQuery_0_8(final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false), "closure_switch");
  }
  public static SNode weavingRule_ContextQuery_0_9(final WeavingMappingRuleContext _context) {
    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.getNodeAncestor(_context.getNode(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), false, false), "closure_yieldIt");
  }
  public static SNode weavingRule_ContextQuery_32_0(final WeavingMappingRuleContext _context) {
    Flags.FUNCTION_METHOD.flag(_context, _context.getNode());
    return _context.getCopiedOutputNodeForInputNode(_context.getNode());
  }
  public static void mappingScript_CodeBlock_2(final MappingScriptContext _context) {
    for (SNode cl : SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"))) {
      if (ClosureLiteralUtil.hasYieldStatement(cl)) {
        PrepStatementUtil.prepStatementList(_context, SLinkOperations.getTarget(cl, MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, 0x1174bf0522fL, "body")), ((TemplateQueryContext) _context).getGenerator());
        for (SNode varRef : SNodeOperations.getNodeDescendants(SLinkOperations.getTarget(cl, MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, 0x1174bf0522fL, "body")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, "jetbrains.mps.baseLanguage.structure.VariableReference"), false, new SAbstractConcept[]{})) {
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(varRef, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, "variableDeclaration")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration")) && Values.CLOSURE_DATA.get(_context, SLinkOperations.getTarget(varRef, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, "variableDeclaration"))) != null) {
            if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(varRef), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, "jetbrains.mps.baseLanguage.closures.structure.ClosureArgReference")))) {
              SNode argRef = SNodeOperations.replaceWithNewChild(varRef, MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, "jetbrains.mps.baseLanguage.closures.structure.ClosureArgReference"));
              SLinkOperations.setTarget(argRef, MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, 0x5620d42a45242312L, "original"), varRef);
            }
          }
        }
      }
    }
  }
  public static void mappingScript_CodeBlock_14(final MappingScriptContext _context) {
    if (Constants.ONLY_CLOSURE_LITERAL_AS_FUNCTION_TYPE) {
      //  FunctionUtil.prepAdaptations has the same constant check inside 
      // so the idea is to filter out irrelevant nodes asap 
      for (SNode cl : SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"))) {
        if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(cl), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c78301acL, "jetbrains.mps.baseLanguage.structure.BaseMethodCall"))) || !(SNodeOperations.hasRole(cl, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument")))) {
          continue;
        }
        SNode bmc = SNodeOperations.cast(SNodeOperations.getParent(cl), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c78301acL, "jetbrains.mps.baseLanguage.structure.BaseMethodCall"));
        List<SNode> args = SLinkOperations.getChildren(bmc, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"));
        List<SNode> pdecls = SLinkOperations.getChildren(SLinkOperations.getTarget(bmc, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"));
        if ((SLinkOperations.getTarget(bmc, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")) != null) && ListSequence.fromList(args).count() != ListSequence.fromList(pdecls).count()) {
          _context.showInformationMessage(bmc, "Actual arguments count != parameter declarations count");
        }
        Iterator<SNode> argsItr = ListSequence.fromList(args).iterator();
        for (SNode pdecl : pdecls) {
          if (argsItr.hasNext()) {
            SNode arg = argsItr.next();
            FunctionTypeUtil.prepAdaptations(_context, TypeDerivable__BehaviorDescriptor.deriveType_idhEwIVPz.invoke(bmc, arg), arg);
          }
        }
      }
    } else {
      //  original code 
      List<SNode> bmcs = SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c78301acL, "jetbrains.mps.baseLanguage.structure.BaseMethodCall"));
      for (SNode bmc : bmcs) {
        List<SNode> args = SLinkOperations.getChildren(bmc, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"));
        List<SNode> pdecls = SLinkOperations.getChildren(SLinkOperations.getTarget(bmc, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"));
        if ((SLinkOperations.getTarget(bmc, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")) != null) && ListSequence.fromList(args).count() != ListSequence.fromList(pdecls).count()) {
          _context.showInformationMessage(bmc, "Actual arguments count != parameter declarations count");
        }
        int idx = 0;
        for (SNode pdecl : pdecls) {
          if (idx < ListSequence.fromList(args).count()) {
            SNode arg = ListSequence.fromList(args).getElement(idx);
            FunctionTypeUtil.prepAdaptations(_context, TypeDerivable__BehaviorDescriptor.deriveType_idhEwIVPz.invoke(bmc, arg), arg);
          }
          idx++;
        }
      }
    }
  }
  public static void mappingScript_CodeBlock_15(final MappingScriptContext _context) {
    if (Constants.ONLY_CLOSURE_LITERAL_AS_FUNCTION_TYPE) {
      for (SNode cl : SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"))) {
        if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(cl), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e96L, "jetbrains.mps.baseLanguage.structure.AssignmentExpression"))) || !(SNodeOperations.hasRole(cl, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11b0d00332cL, 0xf8c77f1e99L, "rValue")))) {
          continue;
        }
        SNode ae = SNodeOperations.cast(SNodeOperations.getParent(cl), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e96L, "jetbrains.mps.baseLanguage.structure.AssignmentExpression"));
        FunctionTypeUtil.prepAdaptations(_context, TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(ae, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11b0d00332cL, 0xf8c77f1e97L, "lValue"))), SLinkOperations.getTarget(ae, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11b0d00332cL, 0xf8c77f1e99L, "rValue")));
      }
    } else {
      //  original code 
      List<SNode> aes = SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e96L, "jetbrains.mps.baseLanguage.structure.AssignmentExpression"));
      for (SNode ae : aes) {
        FunctionTypeUtil.prepAdaptations(_context, TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(ae, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11b0d00332cL, 0xf8c77f1e97L, "lValue"))), SLinkOperations.getTarget(ae, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11b0d00332cL, 0xf8c77f1e99L, "rValue")));
      }
    }
  }
  public static void mappingScript_CodeBlock_16(final MappingScriptContext _context) {
    List<SNode> vds = SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, "jetbrains.mps.baseLanguage.structure.VariableDeclaration"));
    for (SNode vd : vds) {
      FunctionTypeUtil.prepAdaptations(_context, SLinkOperations.getTarget(vd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type")), SLinkOperations.getTarget(vd, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0xf8c37f506eL, "initializer")));
    }
  }
  public static void mappingScript_CodeBlock_20(final MappingScriptContext _context) {
    for (SNode cl : SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"))) {
      for (SNode vd : ClosureLiteralUtil.collectNonFinalVariableDeclarations(cl)) {
        if (!(Flags.WRAPPING_LOCAL_VARIABLE.isFlagged(_context, vd))) {
          SPropertyOperations.set(vd, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0x111f9e9f00cL, "isFinal"), "" + (true));
        }
      }
    }
  }
  public static void mappingScript_CodeBlock_21(final MappingScriptContext _context) {
    if (Constants.ONLY_CLOSURE_LITERAL_AS_FUNCTION_TYPE) {
      for (SNode cl : SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"))) {
        if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(cl), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"))) || !(SNodeOperations.hasRole(cl, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument")))) {
          // TODO in case there's method call with more than one closure arg, we'll process it again, guard against this 
          continue;
        }
        SNode imco = SNodeOperations.cast(SNodeOperations.getParent(cl), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"));
        if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(imco), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, "jetbrains.mps.baseLanguage.structure.DotExpression")))) {
          continue;
        }
        SNode de = SNodeOperations.cast(SNodeOperations.getParent(imco), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, "jetbrains.mps.baseLanguage.structure.DotExpression"));
        if (SLinkOperations.getTarget(de, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation")) != imco) {
          continue;
        }
        List<SNode> args = SLinkOperations.getChildren(imco, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"));
        List<SNode> pdecls = SLinkOperations.getChildren(SLinkOperations.getTarget(imco, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"));
        if ((SLinkOperations.getTarget(imco, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")) != null) && ListSequence.fromList(args).count() != ListSequence.fromList(pdecls).count()) {
          _context.showInformationMessage(imco, "Actual arguments count != parameter declarations count");
        }
        SNode deOperandType = TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(de, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46a4416L, "operand")));
        SNode operandType = SNodeOperations.as(deOperandType, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType"));
        if ((operandType == null)) {
          operandType = TypeChecker.getInstance().getRuntimeSupport().coerce_(deOperandType, HUtil.createMatchingPatternByConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType")), true);
        }
        Iterator<SNode> argsItr = ListSequence.fromList(args).iterator();
        for (SNode pdecl : pdecls) {
          if (argsItr.hasNext()) {
            SNode arg = argsItr.next();
            SNode pdeclType = ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(pdecl, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type")), operandType);
            FunctionTypeUtil.prepAdaptations(_context, FunctionTypeUtil.unmeet(pdeclType), arg);
          }
        }
      }
    } else {
      for (SNode de : SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, "jetbrains.mps.baseLanguage.structure.DotExpression"))) {
        //  why IMCO only from DotExpression? 
        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(de, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"))) {
          SNode imco = SNodeOperations.cast(SLinkOperations.getTarget(de, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"));
          List<SNode> args = SLinkOperations.getChildren(imco, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"));
          List<SNode> pdecls = SLinkOperations.getChildren(SLinkOperations.getTarget(imco, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"));
          if ((SLinkOperations.getTarget(imco, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")) != null) && ListSequence.fromList(args).count() != ListSequence.fromList(pdecls).count()) {
            _context.showInformationMessage(imco, "Actual arguments count != parameter declarations count");
          }
          Iterator<SNode> argsItr = ListSequence.fromList(args).iterator();
          for (SNode pdecl : pdecls) {
            if (argsItr.hasNext()) {
              SNode arg = argsItr.next();
              if (Constants.ONLY_CLOSURE_LITERAL_AS_FUNCTION_TYPE) {
                //  TEMP HACK: proceed only if the "right" expression is a ClosureLiteral, balk otherwise 
                //  This may cause unexpected results, so please disable in case of difficulties generating some code 
                if (!(SNodeOperations.isInstanceOf(arg, MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral")))) {
                  continue;
                }
              }
              SNode operandType = SNodeOperations.as(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(de, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46a4416L, "operand"))), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType"));
              if ((operandType == null)) {
                operandType = TypeChecker.getInstance().getRuntimeSupport().coerce_(TypeChecker.getInstance().getTypeOf(SLinkOperations.getTarget(de, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46a4416L, "operand"))), HUtil.createMatchingPatternByConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType")), true);
              }
              SNode pdeclType = ClassifierTypeUtil.resolveType(SLinkOperations.getTarget(pdecl, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type")), operandType);
              FunctionTypeUtil.prepAdaptations(_context, FunctionTypeUtil.unmeet(pdeclType), arg);
            }
          }
        }
      }
    }
  }
  public static void mappingScript_CodeBlock_22(final MappingScriptContext _context) {
    for (SNode cl : SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"))) {
      for (SNode vd : WrappersUtils.collectVariableDeclarationsToWrap(cl)) {
        if (SNodeOperations.isInstanceOf(vd, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL, "jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration"))) {
          Flags.WRAPPING_LOCAL_VARIABLE.flag(_context, vd);
          SNode sl = SNodeOperations.getNodeAncestor(vd, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, "jetbrains.mps.baseLanguage.structure.StatementList"), false, false);
          for (SNode varRef : SNodeOperations.getNodeDescendants(sl, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, "jetbrains.mps.baseLanguage.structure.VariableReference"), false, new SAbstractConcept[]{})) {
            if (SLinkOperations.getTarget(varRef, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, "variableDeclaration")) == vd) {
              if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(varRef), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, "jetbrains.mps.baseLanguage.closures.structure.ClosureArgReference")))) {
                SNode argRef = SNodeOperations.replaceWithNewChild(varRef, MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, "jetbrains.mps.baseLanguage.closures.structure.ClosureArgReference"));
                SLinkOperations.setTarget(argRef, MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, 0x5620d42a45242312L, "original"), varRef);
                Flags.WRAPPING_LOCAL_VARIABLE.flag(_context, varRef);
              }
            }
          }
        } else if (SNodeOperations.isInstanceOf(vd, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"))) {
          SPropertyOperations.set(vd, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL, 0x111f9e9f00cL, "isFinal"), "" + (false));
          Flags.WRAPPING_LOCAL_VARIABLE.flag(_context, vd);
          SNode sl = SLinkOperations.getTarget(SNodeOperations.getNodeAncestor(vd, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), false, false), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1ffL, "body"));
          Flags.WRAPPING_LOCAL_VARIABLE.flag(_context, sl);
          for (SNode varRef : SNodeOperations.getNodeDescendants(sl, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, "jetbrains.mps.baseLanguage.structure.VariableReference"), false, new SAbstractConcept[]{})) {
            if (SLinkOperations.getTarget(varRef, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, "variableDeclaration")) == vd && !((SNodeOperations.isInstanceOf(SNodeOperations.getParent(varRef), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a59b0fbceL, "jetbrains.mps.baseLanguage.structure.ClassCreator")) && INamedConcept__BehaviorDescriptor.getFqName_idhEwIO9y.invoke(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(varRef), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a59b0fbceL, "jetbrains.mps.baseLanguage.structure.ClassCreator")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration"))), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept"))).startsWith("jetbrains.mps.baseLanguage.closures.runtime.Wrappers")))) {
              SNode argRef = SNodeOperations.replaceWithNewChild(varRef, MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, "jetbrains.mps.baseLanguage.closures.structure.ClosureArgReference"));
              SLinkOperations.setTarget(argRef, MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, 0x5620d42a45242312L, "original"), varRef);
            }
          }
        }
      }
    }
  }
  public static void mappingScript_CodeBlock_25(final MappingScriptContext _context) {
    for (SNode cl : SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"))) {
      for (SNode te : SNodeOperations.getNodeDescendants(cl, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d4da00cL, "jetbrains.mps.baseLanguage.structure.ThisExpression"), false, new SAbstractConcept[]{})) {
        if ((SLinkOperations.getTarget(te, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d4da00cL, 0x1136d9d21b3L, "classConcept")) == null) && SNodeOperations.isInstanceOf(SNodeOperations.getParent(te), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, "jetbrains.mps.baseLanguage.structure.DotExpression"))) {
          SNode thisCC = SNodeOperations.getNodeAncestor(te, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false, false);
          if (SNodeOperations.isInstanceOf(thisCC, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1107e0cb103L, "jetbrains.mps.baseLanguage.structure.AnonymousClass")) && SNodeOperations.getNodeAncestor(cl, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, "jetbrains.mps.baseLanguage.structure.ClassConcept"), false, false) == thisCC) {
            SNode op = SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(te), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, "jetbrains.mps.baseLanguage.structure.DotExpression")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46a08c4L, 0x116b46b36c4L, "operation"));
            if (SNodeOperations.isInstanceOf(op, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b483d77aL, "jetbrains.mps.baseLanguage.structure.FieldReferenceOperation"))) {
              Flags.REMOVE_THIS.flag(_context, op);
            } else
            if (SNodeOperations.isInstanceOf(op, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118154a6332L, "jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation"))) {
              Flags.REMOVE_THIS.flag(_context, op);
            } else {
              _context.showErrorMessage(te, "'this' expression couldn't be removed");
            }
          }
        }
      }
    }
  }
  public static void mappingScript_CodeBlock_26(final MappingScriptContext _context) {
    List<SNode> rss = SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7feL, "jetbrains.mps.baseLanguage.structure.ReturnStatement"));
    for (SNode rs : rss) {
      if ((SLinkOperations.getTarget(rs, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7feL, 0xf8cc6bf96cL, "expression")) != null)) {
        SNode anc = SNodeOperations.getNodeAncestorWhereConceptInList(rs, new SAbstractConcept[]{MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral")}, false, false);
        if (SNodeOperations.isInstanceOf(anc, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"))) {
          SNode rt = SLinkOperations.getTarget(SNodeOperations.cast(anc, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType"));
          if (!(((rt != null) && SNodeOperations.isInstanceOf(rt, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc6bf96dL, "jetbrains.mps.baseLanguage.structure.VoidType"))))) {
            FunctionTypeUtil.prepAdaptations(_context, rt, SLinkOperations.getTarget(rs, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7feL, 0xf8cc6bf96cL, "expression")));
          }
        }
      }
    }
  }
  public static void mappingScript_CodeBlock_27(final MappingScriptContext _context) {
    if (Constants.ONLY_CLOSURE_LITERAL_AS_FUNCTION_TYPE) {
      for (SNode cl : SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"))) {
        if (!(SNodeOperations.isInstanceOf(SNodeOperations.getParent(cl), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a59b0fbceL, "jetbrains.mps.baseLanguage.structure.ClassCreator"))) || !(SNodeOperations.hasRole(cl, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument")))) {
          continue;
        }
        SNode cc = SNodeOperations.cast(SNodeOperations.getParent(cl), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a59b0fbceL, "jetbrains.mps.baseLanguage.structure.ClassCreator"));
        List<SNode> args = SLinkOperations.getChildren(cc, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"));
        List<SNode> pdecls = SLinkOperations.getChildren(SLinkOperations.getTarget(cc, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"));
        if ((SLinkOperations.getTarget(cc, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")) != null) && ListSequence.fromList(args).count() != ListSequence.fromList(pdecls).count()) {
          _context.showInformationMessage(cc, "Actual arguments count != parameter declarations count");
        }
        Iterator<SNode> argsItr = ListSequence.fromList(args).iterator();
        for (SNode pdecl : pdecls) {
          if (argsItr.hasNext()) {
            SNode arg = argsItr.next();
            FunctionTypeUtil.prepAdaptations(_context, TypeDerivable__BehaviorDescriptor.deriveType_idhEwIVPz.invoke(cc, arg), arg);
          }
        }
      }
    } else {
      List<SNode> ccs = SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a59b0fbceL, "jetbrains.mps.baseLanguage.structure.ClassCreator"));
      for (SNode cc : ccs) {
        List<SNode> args = SLinkOperations.getChildren(cc, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"));
        List<SNode> pdecls = SLinkOperations.getChildren(SLinkOperations.getTarget(cc, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"));
        if ((SLinkOperations.getTarget(cc, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")) != null) && ListSequence.fromList(args).count() != ListSequence.fromList(pdecls).count()) {
          _context.showInformationMessage(cc, "Actual arguments count != parameter declarations count");
        }
        int idx = 0;
        for (SNode pdecl : pdecls) {
          if (idx < ListSequence.fromList(args).count()) {
            SNode arg = ListSequence.fromList(args).getElement(idx);
            FunctionTypeUtil.prepAdaptations(_context, TypeDerivable__BehaviorDescriptor.deriveType_idhEwIVPz.invoke(cc, arg), arg);
          }
          idx++;
        }
      }
    }
  }
  public static void mappingScript_CodeBlock_34(final MappingScriptContext _context) {
    for (SNode sl : SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, "jetbrains.mps.baseLanguage.structure.StatementList"))) {
      if ((boolean) ExpressionStatement__BehaviorDescriptor.canServeAsReturn_idi2fkDTg.invoke(SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(sl, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, "statement"))).last(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, "jetbrains.mps.baseLanguage.structure.ExpressionStatement")))) {
        SNode es = SNodeOperations.as(ListSequence.fromList(SLinkOperations.getChildren(sl, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, "statement"))).last(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, "jetbrains.mps.baseLanguage.structure.ExpressionStatement"));
        SNode anc = SNodeOperations.getNodeAncestorWhereConceptInList(es, new SAbstractConcept[]{MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral")}, false, false);
        if (SNodeOperations.isInstanceOf(anc, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration"))) {
          SNode rt = SLinkOperations.getTarget(SNodeOperations.cast(anc, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, "jetbrains.mps.baseLanguage.structure.BaseMethodDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1fdL, "returnType"));
          if (!(((rt != null) && SNodeOperations.isInstanceOf(rt, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc6bf96dL, "jetbrains.mps.baseLanguage.structure.VoidType"))))) {
            FunctionTypeUtil.prepAdaptations(_context, rt, SLinkOperations.getTarget(es, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, 0xf8cc56b214L, "expression")));
          }
        }
      }
    }
  }
  public static void mappingScript_CodeBlock_37(final MappingScriptContext _context) {
    for (SNode ac : SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1107e0cb103L, "jetbrains.mps.baseLanguage.structure.AnonymousClass"))) {
      List<SNode> args = SLinkOperations.getChildren(ac, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"));
      List<SNode> pdecls = SLinkOperations.getChildren(SLinkOperations.getTarget(ac, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"));
      if ((SLinkOperations.getTarget(ac, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")) != null) && ListSequence.fromList(args).count() != ListSequence.fromList(pdecls).count()) {
        _context.showInformationMessage(ac, "Actual arguments count != parameter declarations count");
      }
      int idx = 0;
      for (SNode pdecl : pdecls) {
        if (idx < ListSequence.fromList(args).count()) {
          SNode arg = ListSequence.fromList(args).getElement(idx);
          FunctionTypeUtil.prepAdaptations(_context, TypeDerivable__BehaviorDescriptor.deriveType_idhEwIVPz.invoke(ac, arg), arg);
        }
        idx++;
      }
    }
  }
  public static void mappingScript_CodeBlock_38(final MappingScriptContext _context) {
    List<SNode> emcs = SModelOperations.nodes(_context.getModel(), MetaAdapterFactory.getConcept(0x5dc5fc0d37ef4782L, 0x81928b5ce1f69f80L, 0x1583d1b63359483bL, "jetbrains.mps.baseLanguage.extensionMethods.structure.ExtensionMethodCall"));
    for (SNode emc : emcs) {
      List<SNode> args = SLinkOperations.getChildren(emc, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301aeL, "actualArgument"));
      List<SNode> pdecls = SLinkOperations.getChildren(SLinkOperations.getTarget(emc, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0xf8cc56b1feL, "parameter"));
      if ((SLinkOperations.getTarget(emc, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")) != null) && ListSequence.fromList(args).count() != ListSequence.fromList(pdecls).count()) {
        _context.showInformationMessage(emc, "Actual arguments count != parameter declarations count");
      }
      int idx = 0;
      for (SNode pdecl : pdecls) {
        if (idx < ListSequence.fromList(args).count()) {
          SNode arg = ListSequence.fromList(args).getElement(idx);
          FunctionTypeUtil.prepAdaptations(_context, TypeDerivable__BehaviorDescriptor.deriveType_idhEwIVPz.invoke(emc, arg), arg);
        }
        idx++;
      }
    }
  }
  public static boolean mc_Condition_32(final TemplateQueryContext _context) {
    if (ListSequence.fromList(SModelOperations.nodes(_context.getInputModel(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x42d79e63a78a7784L, "jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration"))).isNotEmpty()) {
      return true;
    }
    if (ListSequence.fromList(SModelOperations.nodes(_context.getInputModel(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11e25fc6c63L, "jetbrains.mps.baseLanguage.closures.structure.YieldAllStatement"))).isNotEmpty()) {
      return true;
    }
    List<SNode> closures = SModelOperations.nodes(_context.getInputModel(), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"));
    if (ListSequence.fromList(closures).isEmpty()) {
      return false;
    }
    for (SNode cl : closures) {
      for (SNode thisExpr : SNodeOperations.getNodeDescendants(cl, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d4da00cL, "jetbrains.mps.baseLanguage.structure.ThisExpression"), false, new SAbstractConcept[]{})) {
        if ((SLinkOperations.getTarget(thisExpr, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf93d4da00cL, 0x1136d9d21b3L, "classConcept")) == null)) {
          return true;
        }
      }
    }
    return false;
  }
  public static Object varMacro_Value_0_0(final TemplateVarContext _context) {
    return SNodeOperations.cast(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, 0x5620d42a45242312L, "original")), MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e98L, 0xf8cc6bf960L, "variableDeclaration")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L, "jetbrains.mps.baseLanguage.structure.ParameterDeclaration"));
  }
  public static Object varMacro_Value_1_0(final TemplateVarContext _context) {
    return TypeChecker.getInstance().getTypeOf(_context.getNode());
  }
  public static Object varMacro_Value_39_0(final TemplateVarContext _context) {
    return TypeChecker.getInstance().getTypeOf(_context.getNode());
  }
  public static Object varMacro_Value_40_0(final TemplateVarContext _context) {
    return TypeChecker.getInstance().getTypeOf(_context.getNode());
  }
  public static Object varMacro_Value_42_0(final TemplateVarContext _context) {
    SNode t = SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type"));
    if (SNodeOperations.isInstanceOf(t, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f0ad8bde4L, "jetbrains.mps.baseLanguage.structure.PrimitiveType")) || SNodeOperations.isInstanceOf(t, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940d819f7L, "jetbrains.mps.baseLanguage.structure.ArrayType")) || SNodeOperations.isInstanceOf(t, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x102467229d8L, "jetbrains.mps.baseLanguage.structure.TypeVariableReference"))) {
      return t;
    }
    // null will end up in Switch's null handler, seems to be fine. 
    return TypeChecker.getInstance().getRuntimeSupport().coerce_(SLinkOperations.getTarget(_context.getNode(), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x450368d90ce15bc3L, 0x4ed4d318133c80ceL, "type")), HUtil.createMatchingPatternByConcept(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101de48bf9eL, "jetbrains.mps.baseLanguage.structure.ClassifierType")), true);
  }
  private final Map<String, ReductionRuleCondition> rrcMethods = new HashMap<String, ReductionRuleCondition>();
  {
    int i = 0;
    rrcMethods.put("1201094087548", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1201389380977", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1201390752380", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1209567943655", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1201017693927", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1201017193504", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1201093922701", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1207145696331", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1207146871693", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1219916470177", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1219934503108", new QueriesGenerated.RRC(i++));
    rrcMethods.put("7246115176735007892", new QueriesGenerated.RRC(i++));
    rrcMethods.put("55412175018238671", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1231340519786", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1232364203430", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1216995176827", new QueriesGenerated.RRC(i++));
    rrcMethods.put("1199624696417", new QueriesGenerated.RRC(i++));
    rrcMethods.put("7001216437968754129", new QueriesGenerated.RRC(i++));
    rrcMethods.put("7001216437968767985", new QueriesGenerated.RRC(i++));
    rrcMethods.put("7001216437968768487", new QueriesGenerated.RRC(i++));
  }
  @Override
  @NotNull
  public ReductionRuleCondition getReductionRuleCondition(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(rrcMethods.containsKey(id))) {
      return super.getReductionRuleCondition(identity);
    }
    return rrcMethods.get(id);
  }
  private static class RRC implements ReductionRuleCondition {
    private final int methodKey;
    public RRC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(ReductionRuleQueryContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.rule_Condition_0_9(ctx);
        case 1:
          return QueriesGenerated.rule_Condition_0_10(ctx);
        case 2:
          return QueriesGenerated.rule_Condition_0_11(ctx);
        case 3:
          return QueriesGenerated.rule_Condition_0_12(ctx);
        case 4:
          return QueriesGenerated.rule_Condition_0_14(ctx);
        case 5:
          return QueriesGenerated.rule_Condition_0_15(ctx);
        case 6:
          return QueriesGenerated.rule_Condition_0_17(ctx);
        case 7:
          return QueriesGenerated.rule_Condition_0_18(ctx);
        case 8:
          return QueriesGenerated.rule_Condition_0_19(ctx);
        case 9:
          return QueriesGenerated.rule_Condition_0_20(ctx);
        case 10:
          return QueriesGenerated.rule_Condition_0_21(ctx);
        case 11:
          return QueriesGenerated.rule_Condition_0_22(ctx);
        case 12:
          return QueriesGenerated.rule_Condition_0_23(ctx);
        case 13:
          return QueriesGenerated.rule_Condition_0_24(ctx);
        case 14:
          return QueriesGenerated.rule_Condition_0_25(ctx);
        case 15:
          return QueriesGenerated.rule_Condition_0_28(ctx);
        case 16:
          return QueriesGenerated.rule_Condition_0_32(ctx);
        case 17:
          return QueriesGenerated.rule_Condition_32_4(ctx);
        case 18:
          return QueriesGenerated.rule_Condition_32_7(ctx);
        case 19:
          return QueriesGenerated.rule_Condition_32_8(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for rule %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, CreateRootCondition> crcMethods = new HashMap<String, CreateRootCondition>();
  {
    int i = 0;
    crcMethods.put("1216995080028", new QueriesGenerated.CRC(i++));
  }
  @Override
  @NotNull
  public CreateRootCondition getCreateRootRuleCondition(@NotNull QueryKey identity) {
    String id = identity.getTemplateNode().getNodeId().toString();
    if (!(crcMethods.containsKey(id))) {
      return super.getCreateRootRuleCondition(identity);
    }
    return crcMethods.get(id);
  }
  private static class CRC implements CreateRootCondition {
    private final int methodKey;
    public CRC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull CreateRootRuleContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.createRootRule_Condition_0_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for rule %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, QueriesGenerated.WRQ> wrcnMethods = new HashMap<String, QueriesGenerated.WRQ>();
  {
    int i = 0;
    wrcnMethods.put("1201023865084", new QueriesGenerated.WRQ(i++));
    wrcnMethods.put("1201359280408", new QueriesGenerated.WRQ(i++));
    wrcnMethods.put("1228828839350", new QueriesGenerated.WRQ(i++));
    wrcnMethods.put("1201288191964", new QueriesGenerated.WRQ(i++));
    wrcnMethods.put("1201389219921", new QueriesGenerated.WRQ(i++));
    wrcnMethods.put("1201292996396", new QueriesGenerated.WRQ(i++));
    wrcnMethods.put("1201293019489", new QueriesGenerated.WRQ(i++));
    wrcnMethods.put("1201026171252", new QueriesGenerated.WRQ(i++));
    wrcnMethods.put("1201193348811", new QueriesGenerated.WRQ(i++));
    wrcnMethods.put("1201018804727", new QueriesGenerated.WRQ(i++));
    wrcnMethods.put("2857237956452406724", new QueriesGenerated.WRQ(i++));
  }
  @Override
  @NotNull
  public WeaveRuleCondition getWeaveRuleCondition(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(wrcnMethods.containsKey(id))) {
      return super.getWeaveRuleCondition(identity);
    }
    return wrcnMethods.get(id);
  }
  @Override
  @NotNull
  public WeaveRuleQuery getWeaveRuleQuery(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(wrcnMethods.containsKey(id))) {
      return super.getWeaveRuleQuery(identity);
    }
    return wrcnMethods.get(id);
  }
  @NotNull
  @Override
  public WeaveAnchorQuery getWeaveAnchorQuery(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(wrcnMethods.containsKey(id))) {
      return super.getWeaveAnchorQuery(identity);
    }
    return wrcnMethods.get(id);
  }
  private static class WRQ implements WeaveRuleQuery, WeaveRuleCondition, WeaveAnchorQuery {
    private final int methodKey;
    public WRQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull WeavingMappingRuleContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.rule_Condition_0_0(ctx);
        case 1:
          return QueriesGenerated.rule_Condition_0_1(ctx);
        case 2:
          return QueriesGenerated.rule_Condition_0_2(ctx);
        case 3:
          return QueriesGenerated.rule_Condition_0_3(ctx);
        case 4:
          return QueriesGenerated.rule_Condition_0_4(ctx);
        case 5:
          return QueriesGenerated.rule_Condition_0_5(ctx);
        case 6:
          return QueriesGenerated.rule_Condition_0_6(ctx);
        case 7:
          return QueriesGenerated.rule_Condition_0_7(ctx);
        case 8:
          return QueriesGenerated.rule_Condition_0_8(ctx);
        case 9:
          return QueriesGenerated.rule_Condition_0_26(ctx);
        case 10:
          return QueriesGenerated.rule_Condition_32_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for rule %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
    @Override
    public SNode contextNode(WeavingMappingRuleContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.weavingRule_ContextQuery_0_0(ctx);
        case 1:
          return QueriesGenerated.weavingRule_ContextQuery_0_1(ctx);
        case 2:
          return QueriesGenerated.weavingRule_ContextQuery_0_2(ctx);
        case 3:
          return QueriesGenerated.weavingRule_ContextQuery_0_3(ctx);
        case 4:
          return QueriesGenerated.weavingRule_ContextQuery_0_4(ctx);
        case 5:
          return QueriesGenerated.weavingRule_ContextQuery_0_5(ctx);
        case 6:
          return QueriesGenerated.weavingRule_ContextQuery_0_6(ctx);
        case 7:
          return QueriesGenerated.weavingRule_ContextQuery_0_7(ctx);
        case 8:
          return QueriesGenerated.weavingRule_ContextQuery_0_8(ctx);
        case 9:
          return QueriesGenerated.weavingRule_ContextQuery_0_9(ctx);
        case 10:
          return QueriesGenerated.weavingRule_ContextQuery_32_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no context node query method for weaving rule %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }

    }
    @Nullable
    @Override
    public SNode anchorNode(WeavingAnchorContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return null;
        case 1:
          return null;
        case 2:
          return null;
        case 3:
          return null;
        case 4:
          return null;
        case 5:
          return null;
        case 6:
          return null;
        case 7:
          return null;
        case 8:
          return null;
        case 9:
          return null;
        case 10:
          return null;
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no anchor query method for rule %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, ScriptCodeBlock> mscbMethods = new HashMap<String, ScriptCodeBlock>();
  {
    int i = 0;
    mscbMethods.put("1201011417445", new QueriesGenerated.SCB(i++));
    mscbMethods.put("1201686683808", new QueriesGenerated.SCB(i++));
    mscbMethods.put("1201703073187", new QueriesGenerated.SCB(i++));
    mscbMethods.put("1201705444341", new QueriesGenerated.SCB(i++));
    mscbMethods.put("1203003871206", new QueriesGenerated.SCB(i++));
    mscbMethods.put("1204637450605", new QueriesGenerated.SCB(i++));
    mscbMethods.put("1207145158999", new QueriesGenerated.SCB(i++));
    mscbMethods.put("1207161784298", new QueriesGenerated.SCB(i++));
    mscbMethods.put("1215524499703", new QueriesGenerated.SCB(i++));
    mscbMethods.put("1219747408128", new QueriesGenerated.SCB(i++));
    mscbMethods.put("4923436771430697282", new QueriesGenerated.SCB(i++));
    mscbMethods.put("5988816933596133426", new QueriesGenerated.SCB(i++));
    mscbMethods.put("5312455269846195466", new QueriesGenerated.SCB(i++));
  }
  @Override
  @NotNull
  public ScriptCodeBlock getScriptCodeBlock(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(mscbMethods.containsKey(id))) {
      return super.getScriptCodeBlock(identity);
    }
    return mscbMethods.get(id);
  }
  private static class SCB implements ScriptCodeBlock {
    private final int methodKey;
    public SCB(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public void invoke(MappingScriptContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          QueriesGenerated.mappingScript_CodeBlock_2(ctx);
          return;
        case 1:
          QueriesGenerated.mappingScript_CodeBlock_14(ctx);
          return;
        case 2:
          QueriesGenerated.mappingScript_CodeBlock_15(ctx);
          return;
        case 3:
          QueriesGenerated.mappingScript_CodeBlock_16(ctx);
          return;
        case 4:
          QueriesGenerated.mappingScript_CodeBlock_20(ctx);
          return;
        case 5:
          QueriesGenerated.mappingScript_CodeBlock_21(ctx);
          return;
        case 6:
          QueriesGenerated.mappingScript_CodeBlock_22(ctx);
          return;
        case 7:
          QueriesGenerated.mappingScript_CodeBlock_25(ctx);
          return;
        case 8:
          QueriesGenerated.mappingScript_CodeBlock_26(ctx);
          return;
        case 9:
          QueriesGenerated.mappingScript_CodeBlock_27(ctx);
          return;
        case 10:
          QueriesGenerated.mappingScript_CodeBlock_34(ctx);
          return;
        case 11:
          QueriesGenerated.mappingScript_CodeBlock_37(ctx);
          return;
        case 12:
          QueriesGenerated.mappingScript_CodeBlock_38(ctx);
          return;
        default:
          throw new GenerationFailureException(String.format("There's no code block with method index %d ", methodKey));
      }
    }
  }
  private final Map<String, MapConfigurationCondition> mccMethods = new HashMap<String, MapConfigurationCondition>();
  {
    int i = 0;
    mccMethods.put("608109309169734537", new QueriesGenerated.MCC(i++));
  }
  @Override
  @NotNull
  public MapConfigurationCondition getMapConfigurationCondition(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(mccMethods.containsKey(id))) {
      return super.getMapConfigurationCondition(identity);
    }
    return mccMethods.get(id);
  }
  private static class MCC implements MapConfigurationCondition {
    private final int methodKey;
    public MCC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(TemplateQueryContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.mc_Condition_32(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for map configuration %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, SourceNodeQuery> snqMethods = new HashMap<String, SourceNodeQuery>();
  {
    int i = 0;
    snqMethods.put("1201204863526", new QueriesGenerated.SNQ(i++));
    snqMethods.put("5451047975132812783", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1207147314257", new QueriesGenerated.SNQ(i++));
    snqMethods.put("8662331813146353543", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1219934508829", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1215452022890", new QueriesGenerated.SNQ(i++));
    snqMethods.put("7318720005639065096", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1199644437387", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1199646374717", new QueriesGenerated.SNQ(i++));
    snqMethods.put("7246115176735007954", new QueriesGenerated.SNQ(i++));
    snqMethods.put("5296136527852385369", new QueriesGenerated.SNQ(i++));
    snqMethods.put("55412175018273790", new QueriesGenerated.SNQ(i++));
    snqMethods.put("55412175018273798", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1231340548939", new QueriesGenerated.SNQ(i++));
    snqMethods.put("5296136527852363034", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1232364329579", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1232364377615", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1199712173382", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1216995176860", new QueriesGenerated.SNQ(i++));
    snqMethods.put("4314010248456917521", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1203249955325", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1203250576826", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1199624915150", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1199625045481", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1215429260858", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1203250738235", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1203250773532", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201045061496", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201435446113", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1203251634844", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201019303193", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201359394958", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201093791966", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201023446671", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201023446733", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201026062018", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201275418502", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201279870277", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1209330067919", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201292104349", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201292912783", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201360662183", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201382468148", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201382502829", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1201863520535", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1202817864202", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1202818062914", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1336567499629402596", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1336567499629442521", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1336567499629452954", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1336567499629472936", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1336567499629493050", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1336567499629613017", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1336567499629543169", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1336567499629657987", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1336567499629753225", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1336567499631019355", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1336567499631022209", new QueriesGenerated.SNQ(i++));
    snqMethods.put("3567142084940796375", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1228829849416", new QueriesGenerated.SNQ(i++));
    snqMethods.put("4314010248456483503", new QueriesGenerated.SNQ(i++));
    snqMethods.put("4314010248456269651", new QueriesGenerated.SNQ(i++));
    snqMethods.put("608109309169759611", new QueriesGenerated.SNQ(i++));
    snqMethods.put("608109309169980431", new QueriesGenerated.SNQ(i++));
    snqMethods.put("9117832275706131042", new QueriesGenerated.SNQ(i++));
    snqMethods.put("7001216437968768472", new QueriesGenerated.SNQ(i++));
    snqMethods.put("7001216437968768502", new QueriesGenerated.SNQ(i++));
    snqMethods.put("2857237956452593591", new QueriesGenerated.SNQ(i++));
    snqMethods.put("2857237956452627682", new QueriesGenerated.SNQ(i++));
    snqMethods.put("349397194808798718", new QueriesGenerated.SNQ(i++));
    snqMethods.put("349397194808798762", new QueriesGenerated.SNQ(i++));
    snqMethods.put("349397194808798411", new QueriesGenerated.SNQ(i++));
    snqMethods.put("349397194808798469", new QueriesGenerated.SNQ(i++));
    snqMethods.put("349397194808798629", new QueriesGenerated.SNQ(i++));
    snqMethods.put("3381384562914378119", new QueriesGenerated.SNQ(i++));
    snqMethods.put("3381384562914378177", new QueriesGenerated.SNQ(i++));
    snqMethods.put("3381384562914378337", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1869794201078502039", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1336567499628828754", new QueriesGenerated.SNQ(i++));
    snqMethods.put("1336567499628873686", new QueriesGenerated.SNQ(i++));
  }
  @NotNull
  @Override
  public SourceNodeQuery getSourceNodeQuery(@NotNull QueryKey identity) {
    final String id = ((QueryKeyImpl) identity).getQueryNodeId().toString();
    if (!(snqMethods.containsKey(id))) {
      return super.getSourceNodeQuery(identity);
    }
    return snqMethods.get(id);
  }
  private static class SNQ implements SourceNodeQuery {
    private final int methodKey;
    public SNQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull SourceSubstituteMacroNodeContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.sourceNodeQuery_0_0(ctx);
        case 1:
          return QueriesGenerated.sourceNodeQuery_0_1(ctx);
        case 2:
          return QueriesGenerated.sourceNodeQuery_0_2(ctx);
        case 3:
          return QueriesGenerated.sourceNodeQuery_0_3(ctx);
        case 4:
          return QueriesGenerated.sourceNodeQuery_0_4(ctx);
        case 5:
          return QueriesGenerated.sourceNodeQuery_0_5(ctx);
        case 6:
          return QueriesGenerated.sourceNodeQuery_0_6(ctx);
        case 7:
          return QueriesGenerated.sourceNodeQuery_0_7(ctx);
        case 8:
          return QueriesGenerated.sourceNodeQuery_0_8(ctx);
        case 9:
          return QueriesGenerated.sourceNodeQuery_0_9(ctx);
        case 10:
          return QueriesGenerated.sourceNodeQuery_0_10(ctx);
        case 11:
          return QueriesGenerated.sourceNodeQuery_0_11(ctx);
        case 12:
          return QueriesGenerated.sourceNodeQuery_0_12(ctx);
        case 13:
          return QueriesGenerated.sourceNodeQuery_0_13(ctx);
        case 14:
          return QueriesGenerated.sourceNodeQuery_0_14(ctx);
        case 15:
          return QueriesGenerated.sourceNodeQuery_0_15(ctx);
        case 16:
          return QueriesGenerated.sourceNodeQuery_0_16(ctx);
        case 17:
          return QueriesGenerated.sourceNodeQuery_0_17(ctx);
        case 18:
          return QueriesGenerated.sourceNodeQuery_0_18(ctx);
        case 19:
          return QueriesGenerated.sourceNodeQuery_0_19(ctx);
        case 20:
          return QueriesGenerated.sourceNodeQuery_1_0(ctx);
        case 21:
          return QueriesGenerated.sourceNodeQuery_1_1(ctx);
        case 22:
          return QueriesGenerated.sourceNodeQuery_1_2(ctx);
        case 23:
          return QueriesGenerated.sourceNodeQuery_1_3(ctx);
        case 24:
          return QueriesGenerated.sourceNodeQuery_1_4(ctx);
        case 25:
          return QueriesGenerated.sourceNodeQuery_3_0(ctx);
        case 26:
          return QueriesGenerated.sourceNodeQuery_3_1(ctx);
        case 27:
          return QueriesGenerated.sourceNodeQuery_3_2(ctx);
        case 28:
          return QueriesGenerated.sourceNodeQuery_3_3(ctx);
        case 29:
          return QueriesGenerated.sourceNodeQuery_3_4(ctx);
        case 30:
          return QueriesGenerated.sourceNodeQuery_4_0(ctx);
        case 31:
          return QueriesGenerated.sourceNodeQuery_4_1(ctx);
        case 32:
          return QueriesGenerated.sourceNodeQuery_5_0(ctx);
        case 33:
          return QueriesGenerated.sourceNodeQuery_5_1(ctx);
        case 34:
          return QueriesGenerated.sourceNodeQuery_5_2(ctx);
        case 35:
          return QueriesGenerated.sourceNodeQuery_6_0(ctx);
        case 36:
          return QueriesGenerated.sourceNodeQuery_8_0(ctx);
        case 37:
          return QueriesGenerated.sourceNodeQuery_8_1(ctx);
        case 38:
          return QueriesGenerated.sourceNodeQuery_8_2(ctx);
        case 39:
          return QueriesGenerated.sourceNodeQuery_10_0(ctx);
        case 40:
          return QueriesGenerated.sourceNodeQuery_11_0(ctx);
        case 41:
          return QueriesGenerated.sourceNodeQuery_12_0(ctx);
        case 42:
          return QueriesGenerated.sourceNodeQuery_13_0(ctx);
        case 43:
          return QueriesGenerated.sourceNodeQuery_13_1(ctx);
        case 44:
          return QueriesGenerated.sourceNodeQuery_18_0(ctx);
        case 45:
          return QueriesGenerated.sourceNodeQuery_19_0(ctx);
        case 46:
          return QueriesGenerated.sourceNodeQuery_19_1(ctx);
        case 47:
          return QueriesGenerated.sourceNodeQuery_23_0(ctx);
        case 48:
          return QueriesGenerated.sourceNodeQuery_23_1(ctx);
        case 49:
          return QueriesGenerated.sourceNodeQuery_23_2(ctx);
        case 50:
          return QueriesGenerated.sourceNodeQuery_23_3(ctx);
        case 51:
          return QueriesGenerated.sourceNodeQuery_23_4(ctx);
        case 52:
          return QueriesGenerated.sourceNodeQuery_23_5(ctx);
        case 53:
          return QueriesGenerated.sourceNodeQuery_23_6(ctx);
        case 54:
          return QueriesGenerated.sourceNodeQuery_23_7(ctx);
        case 55:
          return QueriesGenerated.sourceNodeQuery_23_8(ctx);
        case 56:
          return QueriesGenerated.sourceNodeQuery_23_9(ctx);
        case 57:
          return QueriesGenerated.sourceNodeQuery_23_10(ctx);
        case 58:
          return QueriesGenerated.sourceNodeQuery_28_0(ctx);
        case 59:
          return QueriesGenerated.sourceNodeQuery_28_1(ctx);
        case 60:
          return QueriesGenerated.sourceNodeQuery_30_0(ctx);
        case 61:
          return QueriesGenerated.sourceNodeQuery_30_1(ctx);
        case 62:
          return QueriesGenerated.sourceNodeQuery_32_0(ctx);
        case 63:
          return QueriesGenerated.sourceNodeQuery_32_1(ctx);
        case 64:
          return QueriesGenerated.sourceNodeQuery_32_2(ctx);
        case 65:
          return QueriesGenerated.sourceNodeQuery_32_3(ctx);
        case 66:
          return QueriesGenerated.sourceNodeQuery_32_4(ctx);
        case 67:
          return QueriesGenerated.sourceNodeQuery_36_0(ctx);
        case 68:
          return QueriesGenerated.sourceNodeQuery_36_1(ctx);
        case 69:
          return QueriesGenerated.sourceNodeQuery_39_0(ctx);
        case 70:
          return QueriesGenerated.sourceNodeQuery_39_1(ctx);
        case 71:
          return QueriesGenerated.sourceNodeQuery_39_2(ctx);
        case 72:
          return QueriesGenerated.sourceNodeQuery_39_3(ctx);
        case 73:
          return QueriesGenerated.sourceNodeQuery_39_4(ctx);
        case 74:
          return QueriesGenerated.sourceNodeQuery_40_0(ctx);
        case 75:
          return QueriesGenerated.sourceNodeQuery_40_1(ctx);
        case 76:
          return QueriesGenerated.sourceNodeQuery_40_2(ctx);
        case 77:
          return QueriesGenerated.sourceNodeQuery_41_0(ctx);
        case 78:
          return QueriesGenerated.sourceNodeQuery_42_0(ctx);
        case 79:
          return QueriesGenerated.sourceNodeQuery_42_1(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, SourceNodesQuery> snsqMethods = new HashMap<String, SourceNodesQuery>();
  {
    int i = 0;
    snsqMethods.put("1336567499631894812", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1219916707161", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1199644424783", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("7246115176735007933", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("55412175018273782", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1231340548915", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1199712173374", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("4314010248456881346", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1203250582108", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1231260332201", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1203268224153", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1199624932349", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1215457425734", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1215429255567", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1203250778897", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1203268050251", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1201044612684", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1203686370624", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1226054358909", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1201187449746", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1209329471483", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1201382476594", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1202821929244", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("1202817925990", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("8424084437048109749", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("8424084437048109773", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("8424084437048115046", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("8424084437048109921", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("5025769645563041960", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("5008999823682210460", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("4314010248456452401", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("4314010248456483648", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("87164511931788815", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("7001216437968776075", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("2857237956452413154", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("2857237956452627703", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("2857237956452593623", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("2857237956452593613", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("349397194808798752", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("349397194808798791", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("349397194808798166", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("349397194808798555", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("3381384562914378531", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("3381384562914377977", new QueriesGenerated.SNsQ(i++));
    snsqMethods.put("3381384562914378263", new QueriesGenerated.SNsQ(i++));
  }
  @NotNull
  @Override
  public SourceNodesQuery getSourceNodesQuery(@NotNull QueryKey identity) {
    final String id = ((QueryKeyImpl) identity).getQueryNodeId().toString();
    if (!(snsqMethods.containsKey(id))) {
      return super.getSourceNodesQuery(identity);
    }
    return snsqMethods.get(id);
  }
  private static class SNsQ implements SourceNodesQuery {
    private final int methodKey;
    public SNsQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @NotNull
    public Collection<SNode> evaluate(@NotNull SourceSubstituteMacroNodesContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_0(ctx));
        case 1:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_1(ctx));
        case 2:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_2(ctx));
        case 3:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_3(ctx));
        case 4:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_4(ctx));
        case 5:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_5(ctx));
        case 6:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_6(ctx));
        case 7:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_0_7(ctx));
        case 8:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_0(ctx));
        case 9:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_1(ctx));
        case 10:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_2(ctx));
        case 11:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_3(ctx));
        case 12:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_4(ctx));
        case 13:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_1_5(ctx));
        case 14:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_3_0(ctx));
        case 15:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_3_1(ctx));
        case 16:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_3_2(ctx));
        case 17:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_3_3(ctx));
        case 18:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_7_0(ctx));
        case 19:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_7_1(ctx));
        case 20:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_8_0(ctx));
        case 21:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_13_0(ctx));
        case 22:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_19_0(ctx));
        case 23:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_19_1(ctx));
        case 24:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_30_0(ctx));
        case 25:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_30_1(ctx));
        case 26:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_30_2(ctx));
        case 27:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_30_3(ctx));
        case 28:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_30_4(ctx));
        case 29:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_30_5(ctx));
        case 30:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_30_6(ctx));
        case 31:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_30_7(ctx));
        case 32:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_32_0(ctx));
        case 33:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_32_1(ctx));
        case 34:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_35_0(ctx));
        case 35:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_35_1(ctx));
        case 36:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_36_0(ctx));
        case 37:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_36_1(ctx));
        case 38:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_39_0(ctx));
        case 39:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_39_1(ctx));
        case 40:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_39_2(ctx));
        case 41:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_39_3(ctx));
        case 42:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_40_0(ctx));
        case 43:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_40_1(ctx));
        case 44:
          return IterableUtil.asCollection(QueriesGenerated.sourceNodesQuery_40_2(ctx));
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, PropertyValueQuery> pvqMethods = new HashMap<String, PropertyValueQuery>();
  {
    int i = 0;
    pvqMethods.put("1201095804026", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("1201390868589", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("1201390896231", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("1201204858048", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1122dd58737L, 0x1122dd65055L, "fieldName"), null));
    pvqMethods.put("1201093988342", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1122dd58737L, 0x1122dd65055L, "fieldName"), null));
    pvqMethods.put("1232364347825", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "foo"));
    pvqMethods.put("1203245282593", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "invoke"));
    pvqMethods.put("1203245357431", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "invoke"));
    pvqMethods.put("1201019320623", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "f1"));
    pvqMethods.put("1201359405038", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "f2"));
    pvqMethods.put("1228830321714", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "f3"));
    pvqMethods.put("1201023446585", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("1201093772963", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1122dd58737L, 0x1122dd65055L, "fieldName"), "s"));
    pvqMethods.put("1201023446648", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "3"));
    pvqMethods.put("1201023446681", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "4"));
    pvqMethods.put("1201094822854", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "2"));
    pvqMethods.put("1201023446712", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "1"));
    pvqMethods.put("1201023446742", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "3"));
    pvqMethods.put("1201024123511", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("1201025995316", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "1"));
    pvqMethods.put("1201191004477", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("1201190969332", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "1"));
    pvqMethods.put("1201275380389", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("1201275443500", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "1"));
    pvqMethods.put("1209330086336", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("1201275469013", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "23"));
    pvqMethods.put("1201291955077", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("1201291955109", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "2"));
    pvqMethods.put("1201291955140", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "3"));
    pvqMethods.put("1201292912730", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "1"));
    pvqMethods.put("1201292912753", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("1201292912792", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "2"));
    pvqMethods.put("1201358206155", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("1201358877324", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1122dd58737L, 0x1122dd65055L, "fieldName"), null));
    pvqMethods.put("1201358206209", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "1"));
    pvqMethods.put("1201359082834", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1122dd58737L, 0x1122dd65055L, "fieldName"), null));
    pvqMethods.put("1201358206241", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "3"));
    pvqMethods.put("1201359122202", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1122dd58737L, 0x1122dd65055L, "fieldName"), null));
    pvqMethods.put("1201359158799", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1122dd58737L, 0x1122dd65055L, "fieldName"), null));
    pvqMethods.put("1201358206272", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "2"));
    pvqMethods.put("1201382488348", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("1201382561129", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("1201382704159", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("1202817907517", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "invoke"));
    pvqMethods.put("1228820677248", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "0"));
    pvqMethods.put("1228820677286", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1122dd58737L, 0x1122dd65055L, "fieldName"), null));
    pvqMethods.put("1228820677311", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "1"));
    pvqMethods.put("1228822442184", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1122dd58737L, 0x1122dd65055L, "fieldName"), null));
    pvqMethods.put("1228820677367", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "3"));
    pvqMethods.put("1228828011714", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1122dd58737L, 0x1122dd65055L, "fieldName"), null));
    pvqMethods.put("1228827778373", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1122dd58737L, 0x1122dd65055L, "fieldName"), null));
    pvqMethods.put("1228820677445", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc59b314L, 0xf8cc59b315L, "value"), "2"));
    pvqMethods.put("8424084437048109688", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "foo"));
    pvqMethods.put("8424084437048109929", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "P"));
    pvqMethods.put("8424084437048109311", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), null));
    pvqMethods.put("4314010248456483473", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "param"));
    pvqMethods.put("4314010248456483561", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "param"));
    pvqMethods.put("8424084437048109641", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1116962fa68L, 0x1116964d747L, "methodName"), "invoke"));
    pvqMethods.put("8424084437048109669", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "invoke"));
    pvqMethods.put("608109309169759695", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "_yield"));
    pvqMethods.put("7001216437968768003", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1122dd58737L, 0x1122dd65055L, "fieldName"), null));
    pvqMethods.put("7001216437968776046", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xdf345b11b8c74213L, 0xac6648d2a9b75d88L, 0x1116962fa68L, 0x1116964d747L, "methodName"), "op"));
    pvqMethods.put("2857237956452593639", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "invoke"));
    pvqMethods.put("349397194808798475", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "invoke"));
    pvqMethods.put("3381384562914378183", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "invoke"));
    pvqMethods.put("1336567499629120993", new QueriesGenerated.PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "a"));
  }
  @NotNull
  @Override
  public PropertyValueQuery getPropertyValueQuery(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(pvqMethods.containsKey(id))) {
      return super.getPropertyValueQuery(identity);
    }
    return pvqMethods.get(id);
  }
  private static class PVQ extends PropertyValueQuery.Base {
    private final int methodKey;
    /*package*/ PVQ(int methodKey, SProperty property, String templateValue) {
      super(property, templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull PropertyMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.propertyMacro_GetValue_0_0(ctx);
        case 1:
          return QueriesGenerated.propertyMacro_GetValue_0_1(ctx);
        case 2:
          return QueriesGenerated.propertyMacro_GetValue_0_2(ctx);
        case 3:
          return QueriesGenerated.propertyMacro_GetValue_0_3(ctx);
        case 4:
          return QueriesGenerated.propertyMacro_GetValue_0_4(ctx);
        case 5:
          return QueriesGenerated.propertyMacro_GetValue_0_5(ctx);
        case 6:
          return QueriesGenerated.propertyMacro_GetValue_1_0(ctx);
        case 7:
          return QueriesGenerated.propertyMacro_GetValue_3_0(ctx);
        case 8:
          return QueriesGenerated.propertyMacro_GetValue_4_0(ctx);
        case 9:
          return QueriesGenerated.propertyMacro_GetValue_4_1(ctx);
        case 10:
          return QueriesGenerated.propertyMacro_GetValue_4_2(ctx);
        case 11:
          return QueriesGenerated.propertyMacro_GetValue_5_0(ctx);
        case 12:
          return QueriesGenerated.propertyMacro_GetValue_5_1(ctx);
        case 13:
          return QueriesGenerated.propertyMacro_GetValue_5_2(ctx);
        case 14:
          return QueriesGenerated.propertyMacro_GetValue_5_3(ctx);
        case 15:
          return QueriesGenerated.propertyMacro_GetValue_5_4(ctx);
        case 16:
          return QueriesGenerated.propertyMacro_GetValue_5_5(ctx);
        case 17:
          return QueriesGenerated.propertyMacro_GetValue_5_6(ctx);
        case 18:
          return QueriesGenerated.propertyMacro_GetValue_6_0(ctx);
        case 19:
          return QueriesGenerated.propertyMacro_GetValue_6_1(ctx);
        case 20:
          return QueriesGenerated.propertyMacro_GetValue_7_0(ctx);
        case 21:
          return QueriesGenerated.propertyMacro_GetValue_7_1(ctx);
        case 22:
          return QueriesGenerated.propertyMacro_GetValue_8_0(ctx);
        case 23:
          return QueriesGenerated.propertyMacro_GetValue_8_1(ctx);
        case 24:
          return QueriesGenerated.propertyMacro_GetValue_8_2(ctx);
        case 25:
          return QueriesGenerated.propertyMacro_GetValue_8_3(ctx);
        case 26:
          return QueriesGenerated.propertyMacro_GetValue_10_0(ctx);
        case 27:
          return QueriesGenerated.propertyMacro_GetValue_10_1(ctx);
        case 28:
          return QueriesGenerated.propertyMacro_GetValue_10_2(ctx);
        case 29:
          return QueriesGenerated.propertyMacro_GetValue_11_0(ctx);
        case 30:
          return QueriesGenerated.propertyMacro_GetValue_11_1(ctx);
        case 31:
          return QueriesGenerated.propertyMacro_GetValue_11_2(ctx);
        case 32:
          return QueriesGenerated.propertyMacro_GetValue_12_0(ctx);
        case 33:
          return QueriesGenerated.propertyMacro_GetValue_12_1(ctx);
        case 34:
          return QueriesGenerated.propertyMacro_GetValue_12_2(ctx);
        case 35:
          return QueriesGenerated.propertyMacro_GetValue_12_3(ctx);
        case 36:
          return QueriesGenerated.propertyMacro_GetValue_12_4(ctx);
        case 37:
          return QueriesGenerated.propertyMacro_GetValue_12_5(ctx);
        case 38:
          return QueriesGenerated.propertyMacro_GetValue_12_6(ctx);
        case 39:
          return QueriesGenerated.propertyMacro_GetValue_12_7(ctx);
        case 40:
          return QueriesGenerated.propertyMacro_GetValue_13_0(ctx);
        case 41:
          return QueriesGenerated.propertyMacro_GetValue_13_1(ctx);
        case 42:
          return QueriesGenerated.propertyMacro_GetValue_13_2(ctx);
        case 43:
          return QueriesGenerated.propertyMacro_GetValue_19_0(ctx);
        case 44:
          return QueriesGenerated.propertyMacro_GetValue_28_0(ctx);
        case 45:
          return QueriesGenerated.propertyMacro_GetValue_28_1(ctx);
        case 46:
          return QueriesGenerated.propertyMacro_GetValue_28_2(ctx);
        case 47:
          return QueriesGenerated.propertyMacro_GetValue_28_3(ctx);
        case 48:
          return QueriesGenerated.propertyMacro_GetValue_28_4(ctx);
        case 49:
          return QueriesGenerated.propertyMacro_GetValue_28_5(ctx);
        case 50:
          return QueriesGenerated.propertyMacro_GetValue_28_6(ctx);
        case 51:
          return QueriesGenerated.propertyMacro_GetValue_28_7(ctx);
        case 52:
          return QueriesGenerated.propertyMacro_GetValue_30_0(ctx);
        case 53:
          return QueriesGenerated.propertyMacro_GetValue_30_1(ctx);
        case 54:
          return QueriesGenerated.propertyMacro_GetValue_30_2(ctx);
        case 55:
          return QueriesGenerated.propertyMacro_GetValue_30_3(ctx);
        case 56:
          return QueriesGenerated.propertyMacro_GetValue_30_4(ctx);
        case 57:
          return QueriesGenerated.propertyMacro_GetValue_30_5(ctx);
        case 58:
          return QueriesGenerated.propertyMacro_GetValue_30_6(ctx);
        case 59:
          return QueriesGenerated.propertyMacro_GetValue_32_0(ctx);
        case 60:
          return QueriesGenerated.propertyMacro_GetValue_32_1(ctx);
        case 61:
          return QueriesGenerated.propertyMacro_GetValue_32_2(ctx);
        case 62:
          return QueriesGenerated.propertyMacro_GetValue_36_0(ctx);
        case 63:
          return QueriesGenerated.propertyMacro_GetValue_39_0(ctx);
        case 64:
          return QueriesGenerated.propertyMacro_GetValue_40_0(ctx);
        case 65:
          return QueriesGenerated.propertyMacro_GetValue_42_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, IfMacroCondition> imcMethods = new HashMap<String, IfMacroCondition>();
  {
    int i = 0;
    imcMethods.put("8662331813146364235", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1203249920932", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1203249946365", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1203250562735", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1215429172223", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1203268194222", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1215457391281", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1215457429073", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1203250727102", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1203250730219", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1203250761730", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1203267949367", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1203251514450", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1201359373030", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1228830321694", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1201421585182", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1201421812047", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1201276700611", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1201378781868", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1201378849019", new QueriesGenerated.IfMC(i++));
    imcMethods.put("1201382524701", new QueriesGenerated.IfMC(i++));
    imcMethods.put("4314010248456452404", new QueriesGenerated.IfMC(i++));
    imcMethods.put("4314010248456269584", new QueriesGenerated.IfMC(i++));
    imcMethods.put("4523732754034692464", new QueriesGenerated.IfMC(i++));
    imcMethods.put("5008999823682208464", new QueriesGenerated.IfMC(i++));
    imcMethods.put("5008999823682208576", new QueriesGenerated.IfMC(i++));
    imcMethods.put("5008999823682210147", new QueriesGenerated.IfMC(i++));
    imcMethods.put("608109309169759688", new QueriesGenerated.IfMC(i++));
    imcMethods.put("2857237956452627652", new QueriesGenerated.IfMC(i++));
    imcMethods.put("349397194808798692", new QueriesGenerated.IfMC(i++));
  }
  @NotNull
  @Override
  public IfMacroCondition getIfMacroCondition(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(imcMethods.containsKey(id))) {
      return super.getIfMacroCondition(identity);
    }
    return imcMethods.get(id);
  }
  private static class IfMC implements IfMacroCondition {
    private final int methodKey;
    public IfMC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull IfMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.ifMacro_Condition_0_0(ctx);
        case 1:
          return QueriesGenerated.ifMacro_Condition_1_0(ctx);
        case 2:
          return QueriesGenerated.ifMacro_Condition_1_1(ctx);
        case 3:
          return QueriesGenerated.ifMacro_Condition_1_2(ctx);
        case 4:
          return QueriesGenerated.ifMacro_Condition_1_3(ctx);
        case 5:
          return QueriesGenerated.ifMacro_Condition_1_4(ctx);
        case 6:
          return QueriesGenerated.ifMacro_Condition_1_5(ctx);
        case 7:
          return QueriesGenerated.ifMacro_Condition_1_6(ctx);
        case 8:
          return QueriesGenerated.ifMacro_Condition_3_0(ctx);
        case 9:
          return QueriesGenerated.ifMacro_Condition_3_1(ctx);
        case 10:
          return QueriesGenerated.ifMacro_Condition_3_2(ctx);
        case 11:
          return QueriesGenerated.ifMacro_Condition_3_3(ctx);
        case 12:
          return QueriesGenerated.ifMacro_Condition_3_4(ctx);
        case 13:
          return QueriesGenerated.ifMacro_Condition_4_0(ctx);
        case 14:
          return QueriesGenerated.ifMacro_Condition_4_1(ctx);
        case 15:
          return QueriesGenerated.ifMacro_Condition_7_0(ctx);
        case 16:
          return QueriesGenerated.ifMacro_Condition_7_1(ctx);
        case 17:
          return QueriesGenerated.ifMacro_Condition_8_0(ctx);
        case 18:
          return QueriesGenerated.ifMacro_Condition_8_1(ctx);
        case 19:
          return QueriesGenerated.ifMacro_Condition_8_2(ctx);
        case 20:
          return QueriesGenerated.ifMacro_Condition_13_0(ctx);
        case 21:
          return QueriesGenerated.ifMacro_Condition_30_0(ctx);
        case 22:
          return QueriesGenerated.ifMacro_Condition_30_1(ctx);
        case 23:
          return QueriesGenerated.ifMacro_Condition_31_0(ctx);
        case 24:
          return QueriesGenerated.ifMacro_Condition_31_1(ctx);
        case 25:
          return QueriesGenerated.ifMacro_Condition_31_2(ctx);
        case 26:
          return QueriesGenerated.ifMacro_Condition_31_3(ctx);
        case 27:
          return QueriesGenerated.ifMacro_Condition_32_0(ctx);
        case 28:
          return QueriesGenerated.ifMacro_Condition_36_0(ctx);
        case 29:
          return QueriesGenerated.ifMacro_Condition_39_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for if macro %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, InlineSwitchCaseCondition> isccMethods = new HashMap<String, InlineSwitchCaseCondition>();
  {
    int i = 0;
    isccMethods.put("1201204773235", new QueriesGenerated.ISCC(i++));
    isccMethods.put("5451047975132812765", new QueriesGenerated.ISCC(i++));
    isccMethods.put("1216995176831", new QueriesGenerated.ISCC(i++));
    isccMethods.put("1201016704100", new QueriesGenerated.ISCC(i++));
    isccMethods.put("3381384562914435174", new QueriesGenerated.ISCC(i++));
    isccMethods.put("1201016789639", new QueriesGenerated.ISCC(i++));
    isccMethods.put("608109309169759536", new QueriesGenerated.ISCC(i++));
    isccMethods.put("7001216437968756005", new QueriesGenerated.ISCC(i++));
    isccMethods.put("7001216437968756130", new QueriesGenerated.ISCC(i++));
    isccMethods.put("6344340345427280328", new QueriesGenerated.ISCC(i++));
    isccMethods.put("6344340345427280370", new QueriesGenerated.ISCC(i++));
  }
  @NotNull
  @Override
  public InlineSwitchCaseCondition getInlineSwitchCaseCondition(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(isccMethods.containsKey(id))) {
      return super.getInlineSwitchCaseCondition(identity);
    }
    return isccMethods.get(id);
  }
  private static class ISCC implements InlineSwitchCaseCondition {
    private final int methodKey;
    public ISCC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull InlineSwitchCaseContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.rule_Condition_0_13(ctx);
        case 1:
          return QueriesGenerated.rule_Condition_0_16(ctx);
        case 2:
          return QueriesGenerated.rule_Condition_0_27(ctx);
        case 3:
          return QueriesGenerated.rule_Condition_0_29(ctx);
        case 4:
          return QueriesGenerated.rule_Condition_0_30(ctx);
        case 5:
          return QueriesGenerated.rule_Condition_0_31(ctx);
        case 6:
          return QueriesGenerated.rule_Condition_32_1(ctx);
        case 7:
          return QueriesGenerated.rule_Condition_32_2(ctx);
        case 8:
          return QueriesGenerated.rule_Condition_32_3(ctx);
        case 9:
          return QueriesGenerated.rule_Condition_32_5(ctx);
        case 10:
          return QueriesGenerated.rule_Condition_32_6(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for inline switch's case %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, ReferenceTargetQuery> rtqMethods = new HashMap<String, ReferenceTargetQuery>();
  {
    rtqMethods.put("1216995176869", new QueriesGenerated.RTQ(0, "Object"));
    rtqMethods.put("1199624866930", new QueriesGenerated.RTQ(1, "Object"));
    rtqMethods.put("1201044570619", new QueriesGenerated.RTQ(2, "Object"));
    rtqMethods.put("1203682419132", new QueriesGenerated.RTQ(3, "Iterable"));
    rtqMethods.put("1202817833285", new QueriesGenerated.RTQ(4, "Object"));
    rtqMethods.put("8424084437048109804", new QueriesGenerated.RTQ(5, "Void"));
    rtqMethods.put("8424084437048115048", new QueriesGenerated.RTQ(6, "P"));
    rtqMethods.put("8424084437048109373", new QueriesGenerated.RTQ(7, "Void"));
    rtqMethods.put("8424084437048109267", new QueriesGenerated.RTQ(8, "Void"));
    rtqMethods.put("4314010248456483446", new QueriesGenerated.RTQ(9, "P"));
    rtqMethods.put("4314010248456269688", new QueriesGenerated.RTQ(10, "P"));
    rtqMethods.put("4314010248456485941", new QueriesGenerated.RTQ(11, "param"));
    rtqMethods.put("5008999823682208394", new QueriesGenerated.RTQ(12, "T"));
    rtqMethods.put("5008999823682209924", new QueriesGenerated.RTQ(13, "T"));
    rtqMethods.put("608109309169759724", new QueriesGenerated.RTQ(14, "_yield"));
    rtqMethods.put("6344340345427365080", new QueriesGenerated.RTQ(15, "F"));
    rtqMethods.put("4407367782446017548", new QueriesGenerated.RTQ(16, "equals"));
    rtqMethods.put("7001216437968760494", new QueriesGenerated.RTQ(17, "Context"));
    rtqMethods.put("2857237956452412442", new QueriesGenerated.RTQ(18, "Object"));
    rtqMethods.put("349397194808798635", new QueriesGenerated.RTQ(19, "Object"));
    rtqMethods.put("3381384562914378343", new QueriesGenerated.RTQ(20, "Object"));
    rtqMethods.put("1869794201078501555", new QueriesGenerated.RTQ(21, null));
  }
  @NotNull
  @Override
  public ReferenceTargetQuery getReferenceTargetQuery(@NotNull QueryKey queryKey) {
    final String id = queryKey.getTemplateNode().getNodeId().toString();
    if (!(rtqMethods.containsKey(id))) {
      return super.getReferenceTargetQuery(queryKey);
    }
    return rtqMethods.get(id);
  }
  private static class RTQ extends ReferenceTargetQuery.Base {
    private final int methodKey;
    /*package*/ RTQ(int methodKey, String templateValue) {
      super(templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull ReferenceMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.referenceMacro_GetReferent_0_0(ctx);
        case 1:
          return QueriesGenerated.referenceMacro_GetReferent_1_0(ctx);
        case 2:
          return QueriesGenerated.referenceMacro_GetReferent_3_0(ctx);
        case 3:
          return QueriesGenerated.referenceMacro_GetReferent_3_1(ctx);
        case 4:
          return QueriesGenerated.referenceMacro_GetReferent_19_0(ctx);
        case 5:
          return QueriesGenerated.referenceMacro_GetReferent_30_0(ctx);
        case 6:
          return QueriesGenerated.referenceMacro_GetReferent_30_1(ctx);
        case 7:
          return QueriesGenerated.referenceMacro_GetReferent_30_2(ctx);
        case 8:
          return QueriesGenerated.referenceMacro_GetReferent_30_3(ctx);
        case 9:
          return QueriesGenerated.referenceMacro_GetReferent_30_4(ctx);
        case 10:
          return QueriesGenerated.referenceMacro_GetReferent_30_5(ctx);
        case 11:
          return QueriesGenerated.referenceMacro_GetReferent_30_6(ctx);
        case 12:
          return QueriesGenerated.referenceMacro_GetReferent_31_0(ctx);
        case 13:
          return QueriesGenerated.referenceMacro_GetReferent_31_1(ctx);
        case 14:
          return QueriesGenerated.referenceMacro_GetReferent_32_0(ctx);
        case 15:
          return QueriesGenerated.referenceMacro_GetReferent_32_1(ctx);
        case 16:
          return QueriesGenerated.referenceMacro_GetReferent_32_2(ctx);
        case 17:
          return QueriesGenerated.referenceMacro_GetReferent_33_0(ctx);
        case 18:
          return QueriesGenerated.referenceMacro_GetReferent_35_0(ctx);
        case 19:
          return QueriesGenerated.referenceMacro_GetReferent_39_0(ctx);
        case 20:
          return QueriesGenerated.referenceMacro_GetReferent_40_0(ctx);
        case 21:
          return QueriesGenerated.referenceMacro_GetReferent_41_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, VariableValueQuery> vvqMethods = new HashMap<String, VariableValueQuery>();
  {
    vvqMethods.put("5180156240568665228", new QueriesGenerated.VVQ(0));
    vvqMethods.put("4640248974485794768", new QueriesGenerated.VVQ(1));
    vvqMethods.put("349397194808798132", new QueriesGenerated.VVQ(2));
    vvqMethods.put("3381384562914377840", new QueriesGenerated.VVQ(3));
    vvqMethods.put("1336567499628816742", new QueriesGenerated.VVQ(4));
  }
  @NotNull
  @Override
  public VariableValueQuery getVariableValueQuery(@NotNull QueryKey queryKey) {
    final String id = queryKey.getTemplateNode().getNodeId().toString();
    if (!(vvqMethods.containsKey(id))) {
      return super.getVariableValueQuery(queryKey);
    }
    return vvqMethods.get(id);
  }
  private static class VVQ implements VariableValueQuery {
    private final int methodKey;
    /*package*/ VVQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull TemplateVarContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.varMacro_Value_0_0(ctx);
        case 1:
          return QueriesGenerated.varMacro_Value_1_0(ctx);
        case 2:
          return QueriesGenerated.varMacro_Value_39_0(ctx);
        case 3:
          return QueriesGenerated.varMacro_Value_40_0(ctx);
        case 4:
          return QueriesGenerated.varMacro_Value_42_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, CallArgumentQuery> caqMethods = new HashMap<String, CallArgumentQuery>();
  {
    caqMethods.put("5360282374928738304", new QueriesGenerated.CAQ(0));
  }
  @NotNull
  @Override
  public CallArgumentQuery getTemplateCallArgumentQuery(@NotNull QueryKey queryKey) {
    final String id = queryKey.getTemplateNode().getNodeId().toString();
    if (!(caqMethods.containsKey(id))) {
      return super.getTemplateCallArgumentQuery(queryKey);
    }
    return caqMethods.get(id);
  }
  private static class CAQ implements CallArgumentQuery {
    private final int methodKey;
    /*package*/ CAQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull TemplateArgumentContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.templateArgumentQuery_42_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, MapNodeQuery> mnqMethods = new HashMap<String, MapNodeQuery>();
  {
    mnqMethods.put("1207147146159", new QueriesGenerated.MNQ(0));
    mnqMethods.put("1219934508838", new QueriesGenerated.MNQ(1));
  }
  @NotNull
  @Override
  public MapNodeQuery getMapNodeQuery(@NotNull QueryKey queryKey) {
    final String id = queryKey.getTemplateNode().getNodeId().toString();
    if (!(mnqMethods.containsKey(id))) {
      return super.getMapNodeQuery(queryKey);
    }
    return mnqMethods.get(id);
  }
  private static class MNQ implements MapNodeQuery {
    private final int methodKey;
    /*package*/ MNQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull MapSrcMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.mapSrcMacro_map_0_0(ctx);
        case 1:
          return QueriesGenerated.mapSrcMacro_map_0_1(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
}
