package jetbrains.mps.baseLanguage.closures.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myFunctionType__BehaviorDescriptor = new FunctionType__BehaviorDescriptor();
  private final BHDescriptor myInvokeFunctionExpression__BehaviorDescriptor = new InvokeFunctionExpression__BehaviorDescriptor();
  private final BHDescriptor myClosureLiteral__BehaviorDescriptor = new ClosureLiteral__BehaviorDescriptor();
  private final BHDescriptor myInvokeExpression__BehaviorDescriptor = new InvokeExpression__BehaviorDescriptor();
  private final BHDescriptor myYieldStatement__BehaviorDescriptor = new YieldStatement__BehaviorDescriptor();
  private final BHDescriptor myUnboundClosureParameterDeclaration__BehaviorDescriptor = new UnboundClosureParameterDeclaration__BehaviorDescriptor();
  private final BHDescriptor myInvokeFunctionOperation__BehaviorDescriptor = new InvokeFunctionOperation__BehaviorDescriptor();
  private final BHDescriptor myYieldAllStatement__BehaviorDescriptor = new YieldAllStatement__BehaviorDescriptor();
  private final BHDescriptor myUnrestrictedClosureLiteral__BehaviorDescriptor = new UnrestrictedClosureLiteral__BehaviorDescriptor();
  private final BHDescriptor myClosureControlStatement__BehaviorDescriptor = new ClosureControlStatement__BehaviorDescriptor();
  private final BHDescriptor myControlAbstractionContainer__BehaviorDescriptor = new ControlAbstractionContainer__BehaviorDescriptor();
  private final BHDescriptor myControlAbstractionDeclaration__BehaviorDescriptor = new ControlAbstractionDeclaration__BehaviorDescriptor();
  private final BHDescriptor myUnrestrictedFunctionType__BehaviorDescriptor = new UnrestrictedFunctionType__BehaviorDescriptor();
  private final BHDescriptor myCompactInvokeFunctionExpression__BehaviorDescriptor = new CompactInvokeFunctionExpression__BehaviorDescriptor();
  private final BHDescriptor myClosureLiteralType__BehaviorDescriptor = new ClosureLiteralType__BehaviorDescriptor();
  private final BHDescriptor myFunctionMethodDeclaration__BehaviorDescriptor = new FunctionMethodDeclaration__BehaviorDescriptor();
  private final BHDescriptor myAbstractFunctionType__BehaviorDescriptor = new AbstractFunctionType__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0u.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myAbstractFunctionType__BehaviorDescriptor;
          }
          break;
        case 1:
          if (true) {
            return myClosureControlStatement__BehaviorDescriptor;
          }
          break;
        case 2:
          if (true) {
            return myClosureLiteral__BehaviorDescriptor;
          }
          break;
        case 3:
          if (true) {
            return myClosureLiteralType__BehaviorDescriptor;
          }
          break;
        case 4:
          if (true) {
            return myCompactInvokeFunctionExpression__BehaviorDescriptor;
          }
          break;
        case 5:
          if (true) {
            return myControlAbstractionContainer__BehaviorDescriptor;
          }
          break;
        case 6:
          if (true) {
            return myControlAbstractionDeclaration__BehaviorDescriptor;
          }
          break;
        case 7:
          if (true) {
            return myFunctionMethodDeclaration__BehaviorDescriptor;
          }
          break;
        case 8:
          if (true) {
            return myFunctionType__BehaviorDescriptor;
          }
          break;
        case 9:
          if (true) {
            return myInvokeExpression__BehaviorDescriptor;
          }
          break;
        case 10:
          if (true) {
            return myInvokeFunctionExpression__BehaviorDescriptor;
          }
          break;
        case 11:
          if (true) {
            return myInvokeFunctionOperation__BehaviorDescriptor;
          }
          break;
        case 12:
          if (true) {
            return myUnboundClosureParameterDeclaration__BehaviorDescriptor;
          }
          break;
        case 13:
          if (true) {
            return myUnrestrictedClosureLiteral__BehaviorDescriptor;
          }
          break;
        case 14:
          if (true) {
            return myUnrestrictedFunctionType__BehaviorDescriptor;
          }
          break;
        case 15:
          if (true) {
            return myYieldAllStatement__BehaviorDescriptor;
          }
          break;
        case 16:
          if (true) {
            return myYieldStatement__BehaviorDescriptor;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0u = buildConceptIndices(MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x4de23a15f719357dL, "jetbrains.mps.baseLanguage.closures.structure.AbstractFunctionType"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11e49cfed99L, "jetbrains.mps.baseLanguage.closures.structure.ClosureControlStatement"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteral"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0xe8770ba07b68051L, "jetbrains.mps.baseLanguage.closures.structure.ClosureLiteralType"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11fb8425aa8L, "jetbrains.mps.baseLanguage.closures.structure.CompactInvokeFunctionExpression"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11e49db3870L, "jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionContainer"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11e49dc8097L, "jetbrains.mps.baseLanguage.closures.structure.ControlAbstractionDeclaration"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x42d79e63a78a7784L, "jetbrains.mps.baseLanguage.closures.structure.FunctionMethodDeclaration"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "jetbrains.mps.baseLanguage.closures.structure.FunctionType"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x117545d385aL, "jetbrains.mps.baseLanguage.closures.structure.InvokeExpression"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a964795L, "jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionExpression"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11d67349093L, "jetbrains.mps.baseLanguage.closures.structure.InvokeFunctionOperation"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x118276b7086L, "jetbrains.mps.baseLanguage.closures.structure.UnboundClosureParameterDeclaration"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11e49cdf7cbL, "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedClosureLiteral"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11e505b9d83L, "jetbrains.mps.baseLanguage.closures.structure.UnrestrictedFunctionType"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11e25fc6c63L, "jetbrains.mps.baseLanguage.closures.structure.YieldAllStatement"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11797183e82L, "jetbrains.mps.baseLanguage.closures.structure.YieldStatement"));
}
