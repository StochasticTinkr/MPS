package jetbrains.mps.baseLanguage.closures.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myFunctionType__BehaviorDescriptor = new FunctionType__BehaviorDescriptor();
  private final BHDescriptor myInvokeFunctionExpression__BehaviorDescriptor = new InvokeFunctionExpression__BehaviorDescriptor();
  private final BHDescriptor myClosureLiteral__BehaviorDescriptor = new ClosureLiteral__BehaviorDescriptor();
  private final BHDescriptor myInvokeExpression__BehaviorDescriptor = new InvokeExpression__BehaviorDescriptor();
  private final BHDescriptor myYieldStatement__BehaviorDescriptor = new YieldStatement__BehaviorDescriptor();
  private final BHDescriptor myUnboundClosureParameterDeclaration__BehaviorDescriptor = new UnboundClosureParameterDeclaration__BehaviorDescriptor();
  private final BHDescriptor myInvokeFunctionOperation__BehaviorDescriptor = new InvokeFunctionOperation__BehaviorDescriptor();
  private final BHDescriptor myYieldAllStatement__BehaviorDescriptor = new YieldAllStatement__BehaviorDescriptor();
  private final BHDescriptor myControlAbstractionContainer__BehaviorDescriptor = new ControlAbstractionContainer__BehaviorDescriptor();
  private final BHDescriptor myControlAbstractionDeclaration__BehaviorDescriptor = new ControlAbstractionDeclaration__BehaviorDescriptor();
  private final BHDescriptor myCompactInvokeFunctionExpression__BehaviorDescriptor = new CompactInvokeFunctionExpression__BehaviorDescriptor();
  private final BHDescriptor myClosureLiteralType__BehaviorDescriptor = new ClosureLiteralType__BehaviorDescriptor();
  private final BHDescriptor myFunctionMethodDeclaration__BehaviorDescriptor = new FunctionMethodDeclaration__BehaviorDescriptor();
  private final BHDescriptor myAbstractFunctionType__BehaviorDescriptor = new AbstractFunctionType__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myAbstractFunctionType__BehaviorDescriptor;
      case 1:
        return myClosureLiteral__BehaviorDescriptor;
      case 2:
        return myClosureLiteralType__BehaviorDescriptor;
      case 3:
        return myCompactInvokeFunctionExpression__BehaviorDescriptor;
      case 4:
        return myControlAbstractionContainer__BehaviorDescriptor;
      case 5:
        return myControlAbstractionDeclaration__BehaviorDescriptor;
      case 6:
        return myFunctionMethodDeclaration__BehaviorDescriptor;
      case 7:
        return myFunctionType__BehaviorDescriptor;
      case 8:
        return myInvokeExpression__BehaviorDescriptor;
      case 9:
        return myInvokeFunctionExpression__BehaviorDescriptor;
      case 10:
        return myInvokeFunctionOperation__BehaviorDescriptor;
      case 11:
        return myUnboundClosureParameterDeclaration__BehaviorDescriptor;
      case 12:
        return myYieldAllStatement__BehaviorDescriptor;
      case 13:
        return myYieldStatement__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xfd3920347849419dL, 0x907112563d152375L, 0x4de23a15f719357dL), MetaIdFactory.conceptId(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L), MetaIdFactory.conceptId(0xfd3920347849419dL, 0x907112563d152375L, 0xe8770ba07b68051L), MetaIdFactory.conceptId(0xfd3920347849419dL, 0x907112563d152375L, 0x11fb8425aa8L), MetaIdFactory.conceptId(0xfd3920347849419dL, 0x907112563d152375L, 0x11e49db3870L), MetaIdFactory.conceptId(0xfd3920347849419dL, 0x907112563d152375L, 0x11e49dc8097L), MetaIdFactory.conceptId(0xfd3920347849419dL, 0x907112563d152375L, 0x42d79e63a78a7784L), MetaIdFactory.conceptId(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL), MetaIdFactory.conceptId(0xfd3920347849419dL, 0x907112563d152375L, 0x117545d385aL), MetaIdFactory.conceptId(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a964795L), MetaIdFactory.conceptId(0xfd3920347849419dL, 0x907112563d152375L, 0x11d67349093L), MetaIdFactory.conceptId(0xfd3920347849419dL, 0x907112563d152375L, 0x118276b7086L), MetaIdFactory.conceptId(0xfd3920347849419dL, 0x907112563d152375L, 0x11e25fc6c63L), MetaIdFactory.conceptId(0xfd3920347849419dL, 0x907112563d152375L, 0x11797183e82L)).seal();
}
