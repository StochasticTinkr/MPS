package jetbrains.mps.baseLanguage.closures.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractFunctionType = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ClosureArgReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClosureControlStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClosureLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClosureLiteralType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CompactInvokeFunctionExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ControlAbstractionContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ControlAbstractionDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ControlClosureLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FunctionMethodDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FunctionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InvokeExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InvokeFunctionExpression = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_InvokeFunctionOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PairOfInts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringPropertyHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnboundClosureParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnrestrictedClosureLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnrestrictedFunctionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_YieldAllStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_YieldStatement = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_lpa09p_a0w.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractFunctionType;
          }
          break;
        case 1:
          if (true) {
            return props_ClosureArgReference;
          }
          break;
        case 2:
          if (true) {
            return props_ClosureControlStatement;
          }
          break;
        case 3:
          if (true) {
            return props_ClosureLiteral;
          }
          break;
        case 4:
          if (true) {
            return props_ClosureLiteralType;
          }
          break;
        case 5:
          if (true) {
            return props_CompactInvokeFunctionExpression;
          }
          break;
        case 6:
          if (true) {
            return props_ControlAbstractionContainer;
          }
          break;
        case 7:
          if (true) {
            return props_ControlAbstractionDeclaration;
          }
          break;
        case 8:
          if (true) {
            return props_ControlClosureLiteral;
          }
          break;
        case 9:
          if (true) {
            return props_FunctionMethodDeclaration;
          }
          break;
        case 10:
          if (true) {
            return props_FunctionType;
          }
          break;
        case 11:
          if (true) {
            return props_InvokeExpression;
          }
          break;
        case 12:
          if (true) {
            return props_InvokeFunctionExpression;
          }
          break;
        case 13:
          if (true) {
            return props_InvokeFunctionOperation;
          }
          break;
        case 14:
          if (true) {
            return props_PairOfInts;
          }
          break;
        case 15:
          if (true) {
            return props_StringPropertyHolder;
          }
          break;
        case 16:
          if (true) {
            return props_UnboundClosureParameterDeclaration;
          }
          break;
        case 17:
          if (true) {
            return props_UnrestrictedClosureLiteral;
          }
          break;
        case 18:
          if (true) {
            return props_UnrestrictedFunctionType;
          }
          break;
        case 19:
          if (true) {
            return props_YieldAllStatement;
          }
          break;
        case 20:
          if (true) {
            return props_YieldStatement;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_lpa09p_a0w = buildConceptIndices(MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x4de23a15f719357dL, "AbstractFunctionType"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x5620d42a452422c7L, "ClosureArgReference"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11e49cfed99L, "ClosureControlStatement"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174bed3125L, "ClosureLiteral"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0xe8770ba07b68051L, "ClosureLiteralType"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11fb8425aa8L, "CompactInvokeFunctionExpression"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11e49db3870L, "ControlAbstractionContainer"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11e49dc8097L, "ControlAbstractionDeclaration"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11e49d1841dL, "ControlClosureLiteral"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x42d79e63a78a7784L, "FunctionMethodDeclaration"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a4d19ffL, "FunctionType"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x117545d385aL, "InvokeExpression"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x1174a964795L, "InvokeFunctionExpression"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11d67349093L, "InvokeFunctionOperation"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11ae0cda05aL, "PairOfInts"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11ae0d18e07L, "StringPropertyHolder"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x118276b7086L, "UnboundClosureParameterDeclaration"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11e49cdf7cbL, "UnrestrictedClosureLiteral"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11e505b9d83L, "UnrestrictedFunctionType"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11e25fc6c63L, "YieldAllStatement"), MetaAdapterFactory.getConcept(0xfd3920347849419dL, 0x907112563d152375L, 0x11797183e82L, "YieldStatement"));
}
