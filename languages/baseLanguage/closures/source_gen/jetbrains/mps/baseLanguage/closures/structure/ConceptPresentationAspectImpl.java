package jetbrains.mps.baseLanguage.closures.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractFunctionType = new ConceptPresentationBuilder().deprecated(true).shortDesc("abstract function type").create();
  private final ConceptPresentation props_ClosureArgReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClosureControlStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClosureLiteral = new ConceptPresentationBuilder().shortDesc("closure literal").create();
  private final ConceptPresentation props_ClosureLiteralType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CompactInvokeFunctionExpression = new ConceptPresentationBuilder().shortDesc("invoke function").create();
  private final ConceptPresentation props_ControlAbstractionContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ControlAbstractionDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ControlClosureLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FunctionMethodDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FunctionType = new ConceptPresentationBuilder().shortDesc("function type").create();
  private final ConceptPresentation props_InvokeExpression = new ConceptPresentationBuilder().shortDesc("this function invocation expression").create();
  private final ConceptPresentation props_InvokeFunctionExpression = new ConceptPresentationBuilder().deprecated(true).shortDesc("function invocation expression").create();
  private final ConceptPresentation props_InvokeFunctionOperation = new ConceptPresentationBuilder().shortDesc("invoke function").create();
  private final ConceptPresentation props_PairOfInts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringPropertyHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnboundClosureParameterDeclaration = new ConceptPresentationBuilder().shortDesc("unbound closure parameter declaration").create();
  private final ConceptPresentation props_UnrestrictedClosureLiteral = new ConceptPresentationBuilder().shortDesc("unrestricted closure literal").create();
  private final ConceptPresentation props_UnrestrictedFunctionType = new ConceptPresentationBuilder().shortDesc("unrestricted function type").create();
  private final ConceptPresentation props_YieldAllStatement = new ConceptPresentationBuilder().shortDesc("yield all elements in a sequence").create();
  private final ConceptPresentation props_YieldStatement = new ConceptPresentationBuilder().shortDesc("yield next element").create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractFunctionType:
        return props_AbstractFunctionType;
      case LanguageConceptSwitch.ClosureArgReference:
        return props_ClosureArgReference;
      case LanguageConceptSwitch.ClosureControlStatement:
        return props_ClosureControlStatement;
      case LanguageConceptSwitch.ClosureLiteral:
        return props_ClosureLiteral;
      case LanguageConceptSwitch.ClosureLiteralType:
        return props_ClosureLiteralType;
      case LanguageConceptSwitch.CompactInvokeFunctionExpression:
        return props_CompactInvokeFunctionExpression;
      case LanguageConceptSwitch.ControlAbstractionContainer:
        return props_ControlAbstractionContainer;
      case LanguageConceptSwitch.ControlAbstractionDeclaration:
        return props_ControlAbstractionDeclaration;
      case LanguageConceptSwitch.ControlClosureLiteral:
        return props_ControlClosureLiteral;
      case LanguageConceptSwitch.FunctionMethodDeclaration:
        return props_FunctionMethodDeclaration;
      case LanguageConceptSwitch.FunctionType:
        return props_FunctionType;
      case LanguageConceptSwitch.InvokeExpression:
        return props_InvokeExpression;
      case LanguageConceptSwitch.InvokeFunctionExpression:
        return props_InvokeFunctionExpression;
      case LanguageConceptSwitch.InvokeFunctionOperation:
        return props_InvokeFunctionOperation;
      case LanguageConceptSwitch.PairOfInts:
        return props_PairOfInts;
      case LanguageConceptSwitch.StringPropertyHolder:
        return props_StringPropertyHolder;
      case LanguageConceptSwitch.UnboundClosureParameterDeclaration:
        return props_UnboundClosureParameterDeclaration;
      case LanguageConceptSwitch.UnrestrictedClosureLiteral:
        return props_UnrestrictedClosureLiteral;
      case LanguageConceptSwitch.UnrestrictedFunctionType:
        return props_UnrestrictedFunctionType;
      case LanguageConceptSwitch.YieldAllStatement:
        return props_YieldAllStatement;
      case LanguageConceptSwitch.YieldStatement:
        return props_YieldStatement;
    }
    return null;
  }
}
