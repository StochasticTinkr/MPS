package jetbrains.mps.baseLanguage.closures.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractFunctionType = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ClosureArgReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClosureControlStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClosureLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClosureLiteralType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CompactInvokeFunctionExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ControlAbstractionContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ControlAbstractionDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ControlClosureLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FunctionMethodDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FunctionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InvokeExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InvokeFunctionExpression = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_InvokeFunctionOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PairOfInts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringPropertyHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnboundClosureParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnrestrictedClosureLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnrestrictedFunctionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_YieldAllStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_YieldStatement = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractFunctionType;
      case 1:
        return props_ClosureArgReference;
      case 2:
        return props_ClosureControlStatement;
      case 3:
        return props_ClosureLiteral;
      case 4:
        return props_ClosureLiteralType;
      case 5:
        return props_CompactInvokeFunctionExpression;
      case 6:
        return props_ControlAbstractionContainer;
      case 7:
        return props_ControlAbstractionDeclaration;
      case 8:
        return props_ControlClosureLiteral;
      case 9:
        return props_FunctionMethodDeclaration;
      case 10:
        return props_FunctionType;
      case 11:
        return props_InvokeExpression;
      case 12:
        return props_InvokeFunctionExpression;
      case 13:
        return props_InvokeFunctionOperation;
      case 14:
        return props_PairOfInts;
      case 15:
        return props_StringPropertyHolder;
      case 16:
        return props_UnboundClosureParameterDeclaration;
      case 17:
        return props_UnrestrictedClosureLiteral;
      case 18:
        return props_UnrestrictedFunctionType;
      case 19:
        return props_YieldAllStatement;
      case 20:
        return props_YieldStatement;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
