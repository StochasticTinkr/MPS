package jetbrains.mps.baseLanguage.lightweightdsl.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AutoInitDSLClass = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BooleanPropertyInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomMemberDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DSLAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DSLClassMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DSLDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DependentTypeDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DependentTypeInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmptyMemberDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerateModifier = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_IntegerPropertyInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MemberInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MemberModifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MemberPlaceholder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MethodDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MethodInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MethodParameterInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultipleModifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PlaceholderModifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequiredModifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringPropertyInstance = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AutoInitDSLClass;
      case 1:
        return props_BooleanPropertyInstance;
      case 2:
        return props_CustomMemberDescriptor;
      case 3:
        return props_DSLAnnotation;
      case 4:
        return props_DSLClassMember;
      case 5:
        return props_DSLDescriptor;
      case 6:
        return props_DependentTypeDescriptor;
      case 7:
        return props_DependentTypeInstance;
      case 8:
        return props_EmptyMemberDescriptor;
      case 9:
        return props_GenerateModifier;
      case 10:
        return props_IntegerPropertyInstance;
      case 11:
        return props_MemberInstance;
      case 12:
        return props_MemberModifier;
      case 13:
        return props_MemberPlaceholder;
      case 14:
        return props_MethodDescriptor;
      case 15:
        return props_MethodInstance;
      case 16:
        return props_MethodParameterInstance;
      case 17:
        return props_MultipleModifier;
      case 18:
        return props_ParameterDescriptor;
      case 19:
        return props_PlaceholderModifier;
      case 20:
        return props_PropertyDescriptor;
      case 21:
        return props_PropertyInstance;
      case 22:
        return props_RequiredModifier;
      case 23:
        return props_StringPropertyInstance;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
