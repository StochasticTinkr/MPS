package jetbrains.mps.baseLanguage.lightweightdsl.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AutoInitDSLClass;
  private ConceptPresentation props_BooleanPropertyInstance;
  private ConceptPresentation props_CustomMemberDescriptor;
  private ConceptPresentation props_DSLAnnotation;
  private ConceptPresentation props_DSLClassMember;
  private ConceptPresentation props_DSLDescriptor;
  private ConceptPresentation props_DependentTypeDescriptor;
  private ConceptPresentation props_DependentTypeInstance;
  private ConceptPresentation props_EmptyMemberDescriptor;
  private ConceptPresentation props_GenerateModifier;
  private ConceptPresentation props_IntegerPropertyInstance;
  private ConceptPresentation props_MemberInstance;
  private ConceptPresentation props_MemberModifier;
  private ConceptPresentation props_MemberPlaceholder;
  private ConceptPresentation props_MethodDescriptor;
  private ConceptPresentation props_MethodInstance;
  private ConceptPresentation props_MethodParameterInstance;
  private ConceptPresentation props_MultipleModifier;
  private ConceptPresentation props_ParameterDescriptor;
  private ConceptPresentation props_PlaceholderModifier;
  private ConceptPresentation props_PropertyDescriptor;
  private ConceptPresentation props_PropertyInstance;
  private ConceptPresentation props_RequiredModifier;
  private ConceptPresentation props_StringPropertyInstance;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AutoInitDSLClass:
        if (props_AutoInitDSLClass == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AutoInitDSLClass = cpb.create();
        }
        return props_AutoInitDSLClass;
      case LanguageConceptSwitch.BooleanPropertyInstance:
        if (props_BooleanPropertyInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x59e9926e84100ec3L);
          cpb.presentationByName();
          props_BooleanPropertyInstance = cpb.create();
        }
        return props_BooleanPropertyInstance;
      case LanguageConceptSwitch.CustomMemberDescriptor:
        if (props_CustomMemberDescriptor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CustomMemberDescriptor = cpb.create();
        }
        return props_CustomMemberDescriptor;
      case LanguageConceptSwitch.DSLAnnotation:
        if (props_DSLAnnotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x3190d3f9f1cab0caL);
          cpb.presentationByReference(0x3190d3f9f1cac277L, "descriptor", "", "");
          props_DSLAnnotation = cpb.create();
        }
        return props_DSLAnnotation;
      case LanguageConceptSwitch.DSLClassMember:
        if (props_DSLClassMember == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DSLClassMember = cpb.create();
        }
        return props_DSLClassMember;
      case LanguageConceptSwitch.DSLDescriptor:
        if (props_DSLDescriptor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DSLDescriptor = cpb.create();
        }
        return props_DSLDescriptor;
      case LanguageConceptSwitch.DependentTypeDescriptor:
        if (props_DependentTypeDescriptor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("deptype");
          props_DependentTypeDescriptor = cpb.create();
        }
        return props_DependentTypeDescriptor;
      case LanguageConceptSwitch.DependentTypeInstance:
        if (props_DependentTypeInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("DependentTypeInstance");
          props_DependentTypeInstance = cpb.create();
        }
        return props_DependentTypeInstance;
      case LanguageConceptSwitch.EmptyMemberDescriptor:
        if (props_EmptyMemberDescriptor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("empty line");
          props_EmptyMemberDescriptor = cpb.create();
        }
        return props_EmptyMemberDescriptor;
      case LanguageConceptSwitch.GenerateModifier:
        if (props_GenerateModifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.rawPresentation("generate");
          props_GenerateModifier = cpb.create();
        }
        return props_GenerateModifier;
      case LanguageConceptSwitch.IntegerPropertyInstance:
        if (props_IntegerPropertyInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x59e9926e84100ec5L);
          cpb.presentationByName();
          props_IntegerPropertyInstance = cpb.create();
        }
        return props_IntegerPropertyInstance;
      case LanguageConceptSwitch.MemberInstance:
        if (props_MemberInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MemberInstance = cpb.create();
        }
        return props_MemberInstance;
      case LanguageConceptSwitch.MemberModifier:
        if (props_MemberModifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MemberModifier = cpb.create();
        }
        return props_MemberModifier;
      case LanguageConceptSwitch.MemberPlaceholder:
        if (props_MemberPlaceholder == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x59e9926e840d7db2L);
          cpb.presentationByReference(0x59e9926e840d7db5L, "decl", "", "");
          props_MemberPlaceholder = cpb.create();
        }
        return props_MemberPlaceholder;
      case LanguageConceptSwitch.MethodDescriptor:
        if (props_MethodDescriptor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_MethodDescriptor = cpb.create();
        }
        return props_MethodDescriptor;
      case LanguageConceptSwitch.MethodInstance:
        if (props_MethodInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x340eb2bd2e03d154L);
          cpb.presentationByName();
          props_MethodInstance = cpb.create();
        }
        return props_MethodInstance;
      case LanguageConceptSwitch.MethodParameterInstance:
        if (props_MethodParameterInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x7b3d7e6b74000c44L);
          cpb.presentationByName();
          props_MethodParameterInstance = cpb.create();
        }
        return props_MethodParameterInstance;
      case LanguageConceptSwitch.MultipleModifier:
        if (props_MultipleModifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("multiple");
          props_MultipleModifier = cpb.create();
        }
        return props_MultipleModifier;
      case LanguageConceptSwitch.ParameterDescriptor:
        if (props_ParameterDescriptor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ParameterDescriptor = cpb.create();
        }
        return props_ParameterDescriptor;
      case LanguageConceptSwitch.PlaceholderModifier:
        if (props_PlaceholderModifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("placeholder");
          props_PlaceholderModifier = cpb.create();
        }
        return props_PlaceholderModifier;
      case LanguageConceptSwitch.PropertyDescriptor:
        if (props_PropertyDescriptor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PropertyDescriptor = cpb.create();
        }
        return props_PropertyDescriptor;
      case LanguageConceptSwitch.PropertyInstance:
        if (props_PropertyInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_PropertyInstance = cpb.create();
        }
        return props_PropertyInstance;
      case LanguageConceptSwitch.RequiredModifier:
        if (props_RequiredModifier == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("required");
          props_RequiredModifier = cpb.create();
        }
        return props_RequiredModifier;
      case LanguageConceptSwitch.StringPropertyInstance:
        if (props_StringPropertyInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x59e9926e84100d04L);
          cpb.presentationByName();
          props_StringPropertyInstance = cpb.create();
        }
        return props_StringPropertyInstance;
    }
    return null;
  }
}
