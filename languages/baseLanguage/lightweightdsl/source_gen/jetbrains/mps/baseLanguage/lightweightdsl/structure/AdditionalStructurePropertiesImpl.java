package jetbrains.mps.baseLanguage.lightweightdsl.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AutoInitDSLClass = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BooleanPropertyInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomMemberDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DSLAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DSLClassMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DSLDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DependentTypeDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DependentTypeInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmptyMemberDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerateModifier = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_IntegerPropertyInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MemberInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MemberModifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MemberPlaceholder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MethodDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MethodInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MethodParameterInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultipleModifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PlaceholderModifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequiredModifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringPropertyInstance = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0z.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AutoInitDSLClass;
          }
          break;
        case 1:
          if (true) {
            return props_BooleanPropertyInstance;
          }
          break;
        case 2:
          if (true) {
            return props_CustomMemberDescriptor;
          }
          break;
        case 3:
          if (true) {
            return props_DSLAnnotation;
          }
          break;
        case 4:
          if (true) {
            return props_DSLClassMember;
          }
          break;
        case 5:
          if (true) {
            return props_DSLDescriptor;
          }
          break;
        case 6:
          if (true) {
            return props_DependentTypeDescriptor;
          }
          break;
        case 7:
          if (true) {
            return props_DependentTypeInstance;
          }
          break;
        case 8:
          if (true) {
            return props_EmptyMemberDescriptor;
          }
          break;
        case 9:
          if (true) {
            return props_GenerateModifier;
          }
          break;
        case 10:
          if (true) {
            return props_IntegerPropertyInstance;
          }
          break;
        case 11:
          if (true) {
            return props_MemberInstance;
          }
          break;
        case 12:
          if (true) {
            return props_MemberModifier;
          }
          break;
        case 13:
          if (true) {
            return props_MemberPlaceholder;
          }
          break;
        case 14:
          if (true) {
            return props_MethodDescriptor;
          }
          break;
        case 15:
          if (true) {
            return props_MethodInstance;
          }
          break;
        case 16:
          if (true) {
            return props_MethodParameterInstance;
          }
          break;
        case 17:
          if (true) {
            return props_MultipleModifier;
          }
          break;
        case 18:
          if (true) {
            return props_ParameterDescriptor;
          }
          break;
        case 19:
          if (true) {
            return props_PlaceholderModifier;
          }
          break;
        case 20:
          if (true) {
            return props_PropertyDescriptor;
          }
          break;
        case 21:
          if (true) {
            return props_PropertyInstance;
          }
          break;
        case 22:
          if (true) {
            return props_RequiredModifier;
          }
          break;
        case 23:
          if (true) {
            return props_StringPropertyInstance;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0z = buildConceptIndices(MetaAdapterFactory.getInterfaceConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0xea740fb893a13edL, "AutoInitDSLClass"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x59e9926e84100ec3L, "BooleanPropertyInstance"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x72b255a044805d9cL, "CustomMemberDescriptor"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x3190d3f9f1cab0caL, "DSLAnnotation"), MetaAdapterFactory.getInterfaceConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x72b255a0447fe4c7L, "DSLClassMember"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x340eb2bd2e03d160L, "DSLDescriptor"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x340eb2bd2e03d15cL, "DependentTypeDescriptor"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x340eb2bd2e03d16bL, "DependentTypeInstance"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x50c63f9f4a0dea5fL, "EmptyMemberDescriptor"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x331be730bdf88d98L, "GenerateModifier"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x59e9926e84100ec5L, "IntegerPropertyInstance"), MetaAdapterFactory.getInterfaceConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x59e9926e840d9179L, "MemberInstance"), MetaAdapterFactory.getInterfaceConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x2f38f33681e6c5feL, "MemberModifier"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x59e9926e840d7db2L, "MemberPlaceholder"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x340eb2bd2e03d167L, "MethodDescriptor"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x340eb2bd2e03d154L, "MethodInstance"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x7b3d7e6b74000c44L, "MethodParameterInstance"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x1db73bac2eaf51eeL, "MultipleModifier"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x340eb2bd2e03d164L, "ParameterDescriptor"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x72b255a044804f29L, "PlaceholderModifier"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x72b255a0447fbb31L, "PropertyDescriptor"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x59e9926e840d9151L, "PropertyInstance"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x2f38f33681e6c616L, "RequiredModifier"), MetaAdapterFactory.getConcept(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x59e9926e84100d04L, "StringPropertyInstance"));
}
