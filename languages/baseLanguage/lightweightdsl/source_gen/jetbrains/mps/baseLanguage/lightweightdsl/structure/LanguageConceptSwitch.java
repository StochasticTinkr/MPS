package jetbrains.mps.baseLanguage.lightweightdsl.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AutoInitDSLClass = 0;
  public static final int BooleanPropertyInstance = 1;
  public static final int CustomMemberDescriptor = 2;
  public static final int DSLAnnotation = 3;
  public static final int DSLClassMember = 4;
  public static final int DSLDescriptor = 5;
  public static final int DependentTypeDescriptor = 6;
  public static final int DependentTypeInstance = 7;
  public static final int EmptyMemberDescriptor = 8;
  public static final int GenerateModifier = 9;
  public static final int IntegerPropertyInstance = 10;
  public static final int MemberInstance = 11;
  public static final int MemberModifier = 12;
  public static final int MemberPlaceholder = 13;
  public static final int MethodDescriptor = 14;
  public static final int MethodInstance = 15;
  public static final int MethodParameterInstance = 16;
  public static final int MultipleModifier = 17;
  public static final int ParameterDescriptor = 18;
  public static final int PlaceholderModifier = 19;
  public static final int PropertyDescriptor = 20;
  public static final int PropertyInstance = 21;
  public static final int RequiredModifier = 22;
  public static final int StringPropertyInstance = 23;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L);
    builder.put(0xea740fb893a13edL, AutoInitDSLClass);
    builder.put(0x59e9926e84100ec3L, BooleanPropertyInstance);
    builder.put(0x72b255a044805d9cL, CustomMemberDescriptor);
    builder.put(0x3190d3f9f1cab0caL, DSLAnnotation);
    builder.put(0x72b255a0447fe4c7L, DSLClassMember);
    builder.put(0x340eb2bd2e03d160L, DSLDescriptor);
    builder.put(0x340eb2bd2e03d15cL, DependentTypeDescriptor);
    builder.put(0x340eb2bd2e03d16bL, DependentTypeInstance);
    builder.put(0x50c63f9f4a0dea5fL, EmptyMemberDescriptor);
    builder.put(0x331be730bdf88d98L, GenerateModifier);
    builder.put(0x59e9926e84100ec5L, IntegerPropertyInstance);
    builder.put(0x59e9926e840d9179L, MemberInstance);
    builder.put(0x2f38f33681e6c5feL, MemberModifier);
    builder.put(0x59e9926e840d7db2L, MemberPlaceholder);
    builder.put(0x340eb2bd2e03d167L, MethodDescriptor);
    builder.put(0x340eb2bd2e03d154L, MethodInstance);
    builder.put(0x7b3d7e6b74000c44L, MethodParameterInstance);
    builder.put(0x1db73bac2eaf51eeL, MultipleModifier);
    builder.put(0x340eb2bd2e03d164L, ParameterDescriptor);
    builder.put(0x72b255a044804f29L, PlaceholderModifier);
    builder.put(0x72b255a0447fbb31L, PropertyDescriptor);
    builder.put(0x59e9926e840d9151L, PropertyInstance);
    builder.put(0x2f38f33681e6c616L, RequiredModifier);
    builder.put(0x59e9926e84100d04L, StringPropertyInstance);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
