package jetbrains.mps.baseLanguage.checkedbox.sandbox.test;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;

public class FooCheckedDots<T extends Enum> {
  private String myString;
  private boolean myBoolean;
  private int myInt;
  private T element;
  public FooCheckedDots(T element) {
    this.element = element;
  }
  public void bar(String s, Object t, FooCheckedDots foo2) {
    check_7013wl_a0a5(s);
    if (check_7013wl_a1a5(t, s)) {
      check_7013wl_a0a1a5(foo2, s, t, foo2);
      check_7013wl_a1a1a5(s, s);

    }
  }
  public void foo(String s) {
    check_7013wl_a0a6(s, this);
    check_7013wl_a1a6(s, this);
    check_7013wl_a2a6(s, myString);
    check_7013wl_a3a6(s, this);
    // http://youtrack.jetbrains.com/issue/MPS-14355 
    check_7013wl_a5a6(s, this);
  }
  public int intFunc() {
    return 2;
  }
  public void MPS14570() {
    List<String> sList = ListSequence.fromList(new ArrayList<String>());
    String s2 = "";
    for (String s : sList) {
      check_7013wl_a0a2a8(s2, s);
    }
  }
  public void checkThisBeforCheckedDot() {
    // http://youtrack.jetbrains.net/issue/MPS-13818 
    check_7013wl_a1a9(getInstance(this.myInt, this.myBoolean), this);
  }
  private String getString(int i, boolean b) {
    System.out.println(i + "" + b);
    return myString;
  }
  private FooCheckedDots getInstance(int i, boolean b) {
    System.out.println(i + "" + b);
    return null;
  }
  private static char check_7013wl_a0a5(String checkedDotOperand) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.charAt(2);
    }
    return 0;
  }
  private static void check_7013wl_a0a1a5(FooCheckedDots checkedDotOperand, String s_7013wl_a0a0a1a5, Object t_7013wl_b0a0a1a5, FooCheckedDots foo2_7013wl_c0a0a1a5) {
    if (null != checkedDotOperand) {
      checkedDotOperand.bar(s_7013wl_a0a0a1a5, t_7013wl_b0a0a1a5, foo2_7013wl_c0a0a1a5);
    }

  }
  private static String check_7013wl_a1a1a5(String checkedDotOperand, String s_7013wl_a0a1a1a5) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.concat(s_7013wl_a0a1a1a5);
    }
    return null;
  }
  private static boolean check_7013wl_a1a5(Object checkedDotOperand, String s_7013wl_a0a1a5) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.equals(s_7013wl_a0a1a5);
    }
    return false;
  }
  private static <T extends Enum> char check_7013wl_a0a6(String checkedDotOperand, FooCheckedDots<T> checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.charAt(checkedDotThisExpression.intFunc());
    }
    return 0;
  }
  private static <T extends Enum> char check_7013wl_a1a6(String checkedDotOperand, FooCheckedDots<T> checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.charAt(checkedDotThisExpression.intFunc());
    }
    return 0;
  }
  private static boolean check_7013wl_a2a6(String checkedDotOperand, String myString_7013wl_a0a2a6) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.equals(myString_7013wl_a0a2a6);
    }
    return false;
  }
  private static <T extends Enum> boolean check_7013wl_a3a6(String checkedDotOperand, FooCheckedDots<T> checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.equals(checkedDotThisExpression.myString);
    }
    return false;
  }
  private static <T extends Enum> boolean check_7013wl_a5a6(String checkedDotOperand, FooCheckedDots<T> checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.equals(checkedDotThisExpression.element.name());
    }
    return false;
  }
  private static int check_7013wl_a0a2a8(String checkedDotOperand, String s_7013wl_a0a0a2a8) {
    if (null != checkedDotOperand) {
      return checkedDotOperand.compareTo(s_7013wl_a0a0a2a8);
    }
    return 0;
  }
  private static <T extends Enum> void check_7013wl_a1a9(FooCheckedDots checkedDotOperand, FooCheckedDots<T> checkedDotThisExpression) {
    if (null != checkedDotOperand) {
      checkedDotOperand.foo(checkedDotThisExpression.getString(checkedDotThisExpression.myInt, checkedDotThisExpression.myBoolean));
    }

  }
}
