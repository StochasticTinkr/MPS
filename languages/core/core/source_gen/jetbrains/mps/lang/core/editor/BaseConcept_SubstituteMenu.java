package jetbrains.mps.lang.core.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.substitute.SubstituteMenuBase;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.menus.GroupMenuPart;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Arrays;
import jetbrains.mps.lang.editor.menus.ParameterizedMenuPart;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.lang.editor.menus.substitute.SingleItemSubstituteMenuPart;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuItem;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.util.NameUtil;
import jetbrains.mps.smodel.runtime.IconResource;
import jetbrains.mps.smodel.runtime.IconResourceUtil;
import jetbrains.mps.lang.editor.menus.substitute.IncludeSubstituteMenuSubstituteMenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuLookup;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuLookup;
import jetbrains.mps.smodel.language.LanguageRegistry;

public class BaseConcept_SubstituteMenu extends SubstituteMenuBase {
  @Override
  protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts(final SubstituteMenuContext _context) {
    List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> result = new ArrayList<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>();
    result.add(new BaseConcept_SubstituteMenu.SubstituteMenuPart_Group_s3h0kg_a());
    return result;
  }
  public class SubstituteMenuPart_Group_s3h0kg_a extends GroupMenuPart<SubstituteMenuItem, SubstituteMenuContext> {
    private boolean isChildNullOrExactlyBaseConcept;
    @Override
    protected void initialize(SubstituteMenuContext _context) {
      super.initialize(_context);
      isChildNullOrExactlyBaseConcept = new Computable<Boolean>() {
        public Boolean compute() {
          return (_context.getCurrentTargetNode() == null) || SConceptOperations.isExactly(SNodeOperations.asSConcept(SNodeOperations.getConcept(_context.getCurrentTargetNode())), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"));
        }
      }.compute();
    }

    @Override
    protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts() {
      return Arrays.<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>asList(new BaseConcept_SubstituteMenu.SubstituteMenuPart_Group_s3h0kg_a.SubstituteMenuPart_Group_s3h0kg_a0(), new BaseConcept_SubstituteMenu.SubstituteMenuPart_Group_s3h0kg_a.SubstituteMenuPart_Group_s3h0kg_b0());
    }
    public class SubstituteMenuPart_Group_s3h0kg_a0 extends GroupMenuPart<SubstituteMenuItem, SubstituteMenuContext> {
      @Override
      protected boolean isApplicable(SubstituteMenuContext _context) {
        return isChildNullOrExactlyBaseConcept;
      }

      @Override
      protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts() {
        return Arrays.<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>asList(new BaseConcept_SubstituteMenu.SubstituteMenuPart_Group_s3h0kg_a.SubstituteMenuPart_Group_s3h0kg_a0.SubstituteMenuPart_Parameterized_s3h0kg_a0a());
      }
      private class SubstituteMenuPart_Parameterized_s3h0kg_a0a extends ParameterizedMenuPart<SAbstractConcept, SubstituteMenuItem, SubstituteMenuContext> {
        @NotNull
        @Override
        protected List<SubstituteMenuItem> createItems(SAbstractConcept parameter, SubstituteMenuContext context) {
          return new BaseConcept_SubstituteMenu.SubstituteMenuPart_Group_s3h0kg_a.SubstituteMenuPart_Group_s3h0kg_a0.SubstituteMenuPart_Parameterized_s3h0kg_a0a.SubstituteMenuPart_Action_s3h0kg_a0a0(parameter).createItems(context);
        }
        @Nullable
        @Override
        protected Iterable<? extends SAbstractConcept> getParameters(SubstituteMenuContext _context) {
          return ((Iterable<SConcept>) SConceptOperations.getAllSubConcepts2(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"), SNodeOperations.getModel(_context.getParentNode())));
        }
        private class SubstituteMenuPart_Action_s3h0kg_a0a0 extends SingleItemSubstituteMenuPart {
          private final SAbstractConcept myParameterObject;
          public SubstituteMenuPart_Action_s3h0kg_a0a0(SAbstractConcept parameterObject) {
            myParameterObject = parameterObject;
          }

          @Nullable
          @Override
          protected SubstituteMenuItem createItem(SubstituteMenuContext _context) {
            return new BaseConcept_SubstituteMenu.SubstituteMenuPart_Group_s3h0kg_a.SubstituteMenuPart_Group_s3h0kg_a0.SubstituteMenuPart_Parameterized_s3h0kg_a0a.SubstituteMenuPart_Action_s3h0kg_a0a0.Item(_context);
          }
          private class Item extends DefaultSubstituteMenuItem {
            private final SubstituteMenuContext _context;
            public Item(SubstituteMenuContext context) {
              super(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"), context.getParentNode(), context.getCurrentTargetNode(), context.getEditorContext());
              _context = context;
            }

            @Override
            public SNode createNode(@NotNull String pattern) {
              return SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(myParameterObject));
            }
            @Override
            public String getMatchingText(String pattern) {
              return myParameterObject.getName();
            }
            @Override
            public String getDescriptionText(@NotNull String pattern) {
              String fqName = ConceptRegistry.getInstance().getConceptDescriptor(myParameterObject).getConceptFqName();
              return "lang: " + NameUtil.compactNamespace(NameUtil.namespaceFromConceptFQName(fqName));
            }
            @Override
            public IconResource getIcon(@NotNull String pattern) {
              return IconResourceUtil.getIconResourceForConcept(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"));
            }
          }
        }

      }
    }
    public class SubstituteMenuPart_Group_s3h0kg_b0 extends GroupMenuPart<SubstituteMenuItem, SubstituteMenuContext> {
      @Override
      protected boolean isApplicable(SubstituteMenuContext _context) {
        return !(isChildNullOrExactlyBaseConcept);
      }

      @Override
      protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts() {
        return Arrays.<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>asList(new BaseConcept_SubstituteMenu.SubstituteMenuPart_Group_s3h0kg_a.SubstituteMenuPart_Group_s3h0kg_b0.SubstituteMenuPart_IncludeMenu_s3h0kg_a1a());
      }
      public class SubstituteMenuPart_IncludeMenu_s3h0kg_a1a extends IncludeSubstituteMenuSubstituteMenuPart {
        private SAbstractConcept getConcept(SubstituteMenuContext _context) {
          return _context.getCurrentTargetNode().getConcept();
        }

        @Nullable
        @Override
        protected SubstituteMenuLookup getMenuLookup(SubstituteMenuContext _context) {
          final EditorContext editorContext = _context.getEditorContext();
          return new DefaultSubstituteMenuLookup(LanguageRegistry.getInstance(editorContext.getRepository()), getConcept(_context));
        }
      }
    }
  }
}
