package jetbrains.mps.lang.core;

/*Generated by MPS */

import jetbrains.mps.smodel.language.LanguageRuntime;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;
import java.util.UUID;
import java.util.Collection;
import jetbrains.mps.generator.runtime.TemplateModule;
import jetbrains.mps.generator.runtime.TemplateUtil;
import jetbrains.mps.smodel.runtime.ILanguageAspect;
import jetbrains.mps.smodel.runtime.BehaviorAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsAspectDescriptor;
import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import jetbrains.mps.lang.core.editor.EditorAspectDescriptorImpl;
import jetbrains.mps.intentions.IntentionAspectDescriptor;
import jetbrains.mps.lang.core.intentions.IntentionsDescriptor;
import jetbrains.mps.lang.migration.runtime.base.MigrationDescriptor;
import jetbrains.mps.lang.core.migration.MigrationDescriptorImpl;
import jetbrains.mps.smodel.runtime.MakeAspectDescriptor;
import jetbrains.mps.lang.core.plugin.FacetAspectDescriptor;
import jetbrains.mps.smodel.runtime.StructureAspectDescriptor;
import jetbrains.mps.lang.typesystem.runtime.IHelginsDescriptor;
import jetbrains.mps.lang.core.typesystem.TypesystemDescriptor;

public class Language extends LanguageRuntime {
  public static String MODULE_REF = "ceab5195-25ea-4f22-9b92-103b95ca8c0c(jetbrains.mps.lang.core)";
  public Language() {
  }
  @Override
  public String getNamespace() {
    return "jetbrains.mps.lang.core";
  }

  @Override
  public int getVersion() {
    return 1;
  }

  public SLanguageId getId() {
    return new SLanguageId(UUID.fromString("ceab5195-25ea-4f22-9b92-103b95ca8c0c"));
  }
  @Override
  protected String[] getExtendedLanguageIDs() {
    return new String[]{};
  }
  @Override
  public Collection<TemplateModule> getGenerators() {
    return TemplateUtil.<TemplateModule>asCollection(TemplateUtil.createInterpretedGenerator(this, "1f3698ec-8a44-4aaa-b907-0ac2077d80a4(jetbrains.mps.lang.core#9100558062448742579)"));
  }
  @Override
  protected <T extends ILanguageAspect> T createAspect(Class<T> aspectClass) {
    if (aspectClass == BehaviorAspectDescriptor.class) {
      return (T) new jetbrains.mps.lang.core.behavior.BehaviorAspectDescriptor();
    }
    if (aspectClass == ConstraintsAspectDescriptor.class) {
      return (T) new jetbrains.mps.lang.core.constraints.ConstraintsAspectDescriptor();
    }
    if (aspectClass.getName().equals("jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor")) {
      if (aspectClass == EditorAspectDescriptor.class) {
        return (T) new EditorAspectDescriptorImpl();
      }
    }
    if (aspectClass.getName().equals("jetbrains.mps.intentions.IntentionAspectDescriptor")) {
      if (aspectClass == IntentionAspectDescriptor.class) {
        return (T) new IntentionsDescriptor();
      }
    }
    if (aspectClass.getName().equals("jetbrains.mps.lang.migration.runtime.base.MigrationDescriptor")) {
      if (aspectClass == MigrationDescriptor.class) {
        return (T) new MigrationDescriptorImpl();
      }
    }
    if (aspectClass.getName().equals("jetbrains.mps.smodel.runtime.MakeAspectDescriptor")) {
      if (aspectClass == MakeAspectDescriptor.class) {
        return (T) new FacetAspectDescriptor();
      }
    }
    if (aspectClass.getName().equals("jetbrains.mps.smodel.runtime.StructureAspectDescriptor")) {
      if (aspectClass == StructureAspectDescriptor.class) {
        return (T) new jetbrains.mps.lang.core.structure.StructureAspectDescriptor();
      }
    }
    if (aspectClass.getName().equals("jetbrains.mps.lang.typesystem.runtime.IHelginsDescriptor")) {
      if (aspectClass == IHelginsDescriptor.class) {
        return (T) new TypesystemDescriptor();
      }
    }
    return super.createAspect(aspectClass);
  }
}
