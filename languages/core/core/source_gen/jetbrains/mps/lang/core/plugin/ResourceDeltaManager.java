package jetbrains.mps.lang.core.plugin;

/*Generated by MPS */

import jetbrains.mps.smodel.resources.GResource;
import java.util.List;
import jetbrains.mps.make.delta.IDelta;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import java.util.Map;
import jetbrains.mps.vfs.IFile;
import jetbrains.mps.internal.make.runtime.util.StaleFilesCollector;
import java.util.HashMap;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.generator.GenerationFacade;

/*package*/ class ResourceDeltaManager {
  private final GResource myInputResource;
  private final List<IDelta> myDeltas = ListSequence.fromList(new ArrayList<IDelta>());
  private final Map<IFile, StaleFilesCollector> myStaleFileCollectors = new HashMap<IFile, StaleFilesCollector>();

  /*package*/ ResourceDeltaManager(GResource inputResource) {
    myInputResource = inputResource;
  }

  /*package*/ void fillRetainedFilesDelta(_FunctionTypes._return_P1_E0<? extends IFile, ? super String> getFile) {
    Iterable<IDelta> retainedFilesDelta = RetainedUtil.retainedDeltas(myInputResource.module(), Sequence.fromIterable(myInputResource.retainedModels()).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel smd) {
        return GenerationFacade.canGenerate(smd);
      }
    }), getFile);
    ListSequence.fromList(myDeltas).addSequence(Sequence.fromIterable(retainedFilesDelta));
  }

  /*package*/ StaleFilesCollector getStaleFilesCollector(IFile dir) {
    StaleFilesCollector rv = myStaleFileCollectors.get(dir);
    if (rv == null) {
      rv = new StaleFilesCollector(dir);
      myStaleFileCollectors.put(dir, rv);
    }
    return rv;
  }

  /*package*/ void addDelta(IDelta d) {
    ListSequence.fromList(myDeltas).addElement(d);
  }

  /*package*/ void completeDelta() {
    // not quite nice to modify internal state here, but it's one-time method 
    for (StaleFilesCollector fc : myStaleFileCollectors.values()) {
      ListSequence.fromList(myDeltas).addElement(fc.reportStaleFiles());
    }
  }

  /*package*/ Iterable<IDelta> getCompleteDelta() {
    return myDeltas;
  }
}
