package jetbrains.mps.lang.core.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.core.behavior.ChildAttribute__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.cells.CellAction;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import java.util.Objects;

public class BasePlaceholderEmptyCell_ActionMap {

  /*package*/ static AbstractCellAction createAction_INSERT_PLACEHOLDER(final SNode node) {
    return new AbstractCellAction() {
      public void execute(EditorContext editorContext) {
        this.execute_internal(editorContext, node);
      }
      public void execute_internal(EditorContext editorContext, SNode node) {
        SNode placeholder = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x339681b4da4ef1a7L, "jetbrains.mps.lang.core.structure.BasePlaceholder"));
        ChildAttribute__BehaviorDescriptor.setLink_idBpxLfMirzM.invoke(placeholder, ChildAttribute__BehaviorDescriptor.getLink_idBpxLfMirzf.invoke(node));
        SNodeOperations.insertNextSiblingChild(node, placeholder);
      }

    };
  }
  /*package*/ static AbstractCellAction createAction_INSERT_PLACEHOLDER_BEFORE(final SNode node) {
    return new AbstractCellAction() {
      public void execute(EditorContext editorContext) {
        this.execute_internal(editorContext, node);
      }
      public void execute_internal(EditorContext editorContext, SNode node) {
        SNode placeholder = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x339681b4da4ef1a7L, "jetbrains.mps.lang.core.structure.BasePlaceholder"));
        ChildAttribute__BehaviorDescriptor.setLink_idBpxLfMirzM.invoke(placeholder, ChildAttribute__BehaviorDescriptor.getLink_idBpxLfMirzf.invoke(node));
        SNodeOperations.insertNextSiblingChild(node, placeholder);
      }

    };
  }

  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    CellAction originalDelete = editorCell.getAction(CellActionType.DELETE);
    CellAction originalBackspace = editorCell.getAction(CellActionType.BACKSPACE);

    // set actions that were actually defined 
    setDefinedCellActions(editorCell, node, context);

    // If we set a DELETE action but no BACKSPACE action, 
    // use the DELETE action for BACKSPACE as well. 
    CellAction deleteAction = editorCell.getAction(CellActionType.DELETE);
    CellAction backspaceAction = editorCell.getAction(CellActionType.BACKSPACE);
    if (deleteAction != originalDelete && backspaceAction == originalBackspace) {
      editorCell.setAction(CellActionType.BACKSPACE, deleteAction);
    }
  }

  public static void setDefinedCellActions(EditorCell editorCell, SNode node, EditorContext context) {

    // set cell actions from all imported action maps 

    // set cell actions defined directly in this action map 
    editorCell.setAction(CellActionType.INSERT_PLACEHOLDER, createAction_INSERT_PLACEHOLDER(node));
    editorCell.setAction(CellActionType.INSERT_PLACEHOLDER_BEFORE, createAction_INSERT_PLACEHOLDER_BEFORE(node));

  }

  public static void setDefinedCellActionsOfType(EditorCell editorCell, SNode node, EditorContext context, CellActionType actionType) {

    // set cell action(s) of the given type from imported action maps 

    // set cell action of the given type defined directly in this action map 
    if (Objects.equals(actionType, CellActionType.INSERT_PLACEHOLDER)) {
      editorCell.setAction(actionType, createAction_INSERT_PLACEHOLDER(node));
    }
    if (Objects.equals(actionType, CellActionType.INSERT_PLACEHOLDER_BEFORE)) {
      editorCell.setAction(actionType, createAction_INSERT_PLACEHOLDER_BEFORE(node));
    }
  }
}
