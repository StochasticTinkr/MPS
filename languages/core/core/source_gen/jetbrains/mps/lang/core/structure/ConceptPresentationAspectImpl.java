package jetbrains.mps.lang.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Attribute = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0a).create();
  private final ConceptPresentation props_BaseCommentAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ChildAttribute = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x9d98713f247885aL, 0x9d98713f249b585L, "linkRole"), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x9d98713f247885aL, 0x9d98713f249b587L, "linkId")).create();
  private final ConceptPresentation props_ExportScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportScopeModule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportScopeNamespace = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportScopePublic = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IAntisuppressErrors = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ICanSuppressErrors = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IDeprecatable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IDontApplyTypesystemRules = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IDontSubstituteByDefault = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMetaLevelChanger = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_INamedConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IOldCommentAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IOldCommentContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IResolveInfo = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISkipConstraintsChecking = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStubForAnotherConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISuppressErrors = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IWrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImplementationContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImplementationPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImplementationWithStubPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InterfacePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkAttribute = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da51L, 0x18649a5c82123514L, "linkRole"), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da51L, 0x129f3f612792fc5cL, "linkId")).create();
  private final ConceptPresentation props_NodeAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyAttribute = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, 0x18649a5c82123515L, "propertyName"), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, 0x129f3f61278d556dL, "propertyId")).create();
  private final ConceptPresentation props_ScopeFacade = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ScopeProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SideTransformInfo = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0xad0053c7ae9194dL, 0xad0053c7aee2321L, "side"), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0xad0053c7ae9194dL, 0xad0053c7af1b9bbL, "cellId"), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0xad0053c7ae9194dL, 0xad0053c7af1bf58L, "anchorTag")).create();
  private final ConceptPresentation props_SuppressErrorsAnnotation = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("ceab5195-25ea-4f22-9b92-103b95ca8c0c"), "jetbrains.mps.lang.core")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_Attribute;
      case 1:
        return props_BaseCommentAttribute;
      case 2:
        return props_BaseConcept;
      case 3:
        return props_ChildAttribute;
      case 4:
        return props_ExportScope;
      case 5:
        return props_ExportScopeModule;
      case 6:
        return props_ExportScopeNamespace;
      case 7:
        return props_ExportScopePublic;
      case 8:
        return props_IAntisuppressErrors;
      case 9:
        return props_ICanSuppressErrors;
      case 10:
        return props_IContainer;
      case 11:
        return props_IDeprecatable;
      case 12:
        return props_IDontApplyTypesystemRules;
      case 13:
        return props_IDontSubstituteByDefault;
      case 14:
        return props_IMetaLevelChanger;
      case 15:
        return props_INamedConcept;
      case 16:
        return props_IOldCommentAnnotation;
      case 17:
        return props_IOldCommentContainer;
      case 18:
        return props_IResolveInfo;
      case 19:
        return props_ISkipConstraintsChecking;
      case 20:
        return props_IStubForAnotherConcept;
      case 21:
        return props_ISuppressErrors;
      case 22:
        return props_IType;
      case 23:
        return props_IWrapper;
      case 24:
        return props_ImplementationContainer;
      case 25:
        return props_ImplementationPart;
      case 26:
        return props_ImplementationWithStubPart;
      case 27:
        return props_InterfacePart;
      case 28:
        return props_LinkAttribute;
      case 29:
        return props_NodeAttribute;
      case 30:
        return props_PropertyAttribute;
      case 31:
        return props_ScopeFacade;
      case 32:
        return props_ScopeProvider;
      case 33:
        return props_SideTransformInfo;
      case 34:
        return props_SuppressErrorsAnnotation;
    }
    throw new IllegalStateException();
  }
}
