package jetbrains.mps.lang.core.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Attribute = new ConceptPresentationBuilder().icon("annotationLink.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_BaseCommentAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ChildAttribute = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x9d98713f247885aL, 0x9d98713f249b585L, "linkRole"), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x9d98713f247885aL, 0x9d98713f249b587L, "linkId")).create();
  private final ConceptPresentation props_ExportScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportScopeModule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportScopeNamespace = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportScopePublic = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IAntisuppressErrors = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ICanSuppressErrors = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IDeprecatable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IDontApplyTypesystemRules = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IDontSubstituteByDefault = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMetaLevelChanger = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_INamedConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IOldCommentAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IOldCommentContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IResolveInfo = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISkipConstraintsChecking = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStubForAnotherConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISuppressErrors = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IWrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImplementationContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImplementationPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImplementationWithStubPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InterfacePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkAttribute = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da51L, 0x18649a5c82123514L, "linkRole"), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da51L, 0x129f3f612792fc5cL, "linkId")).create();
  private final ConceptPresentation props_NodeAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyAttribute = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, 0x18649a5c82123515L, "propertyName"), MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, 0x129f3f61278d556dL, "propertyId")).create();
  private final ConceptPresentation props_ScopeFacade = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ScopeProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SideTransformInfo = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SuppressErrorsAnnotation = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_lpa09p_a0kb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_Attribute;
          }
          break;
        case 1:
          if (true) {
            return props_BaseCommentAttribute;
          }
          break;
        case 2:
          if (true) {
            return props_BaseConcept;
          }
          break;
        case 3:
          if (true) {
            return props_ChildAttribute;
          }
          break;
        case 4:
          if (true) {
            return props_ExportScope;
          }
          break;
        case 5:
          if (true) {
            return props_ExportScopeModule;
          }
          break;
        case 6:
          if (true) {
            return props_ExportScopeNamespace;
          }
          break;
        case 7:
          if (true) {
            return props_ExportScopePublic;
          }
          break;
        case 8:
          if (true) {
            return props_IAntisuppressErrors;
          }
          break;
        case 9:
          if (true) {
            return props_ICanSuppressErrors;
          }
          break;
        case 10:
          if (true) {
            return props_IContainer;
          }
          break;
        case 11:
          if (true) {
            return props_IDeprecatable;
          }
          break;
        case 12:
          if (true) {
            return props_IDontApplyTypesystemRules;
          }
          break;
        case 13:
          if (true) {
            return props_IDontSubstituteByDefault;
          }
          break;
        case 14:
          if (true) {
            return props_IMetaLevelChanger;
          }
          break;
        case 15:
          if (true) {
            return props_INamedConcept;
          }
          break;
        case 16:
          if (true) {
            return props_IOldCommentAnnotation;
          }
          break;
        case 17:
          if (true) {
            return props_IOldCommentContainer;
          }
          break;
        case 18:
          if (true) {
            return props_IResolveInfo;
          }
          break;
        case 19:
          if (true) {
            return props_ISkipConstraintsChecking;
          }
          break;
        case 20:
          if (true) {
            return props_IStubForAnotherConcept;
          }
          break;
        case 21:
          if (true) {
            return props_ISuppressErrors;
          }
          break;
        case 22:
          if (true) {
            return props_IType;
          }
          break;
        case 23:
          if (true) {
            return props_IWrapper;
          }
          break;
        case 24:
          if (true) {
            return props_ImplementationContainer;
          }
          break;
        case 25:
          if (true) {
            return props_ImplementationPart;
          }
          break;
        case 26:
          if (true) {
            return props_ImplementationWithStubPart;
          }
          break;
        case 27:
          if (true) {
            return props_InterfacePart;
          }
          break;
        case 28:
          if (true) {
            return props_LinkAttribute;
          }
          break;
        case 29:
          if (true) {
            return props_NodeAttribute;
          }
          break;
        case 30:
          if (true) {
            return props_PropertyAttribute;
          }
          break;
        case 31:
          if (true) {
            return props_ScopeFacade;
          }
          break;
        case 32:
          if (true) {
            return props_ScopeProvider;
          }
          break;
        case 33:
          if (true) {
            return props_SideTransformInfo;
          }
          break;
        case 34:
          if (true) {
            return props_SuppressErrorsAnnotation;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_lpa09p_a0kb = buildConceptIndices(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x47bf8397520e5939L, "jetbrains.mps.lang.core.structure.Attribute"), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3dcc194340c24debL, "jetbrains.mps.lang.core.structure.BaseCommentAttribute"), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL, "jetbrains.mps.lang.core.structure.BaseConcept"), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x9d98713f247885aL, "jetbrains.mps.lang.core.structure.ChildAttribute"), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x4b498c7787b32cebL, "jetbrains.mps.lang.core.structure.ExportScope"), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x239b5385a7e2aebaL, "jetbrains.mps.lang.core.structure.ExportScopeModule"), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x239b5385a7e2aeb7L, "jetbrains.mps.lang.core.structure.ExportScopeNamespace"), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x239b5385a7e2aeb6L, "jetbrains.mps.lang.core.structure.ExportScopePublic"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0xe8924c64a55a26fL, "jetbrains.mps.lang.core.structure.IAntisuppressErrors"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2f16f1b357e19f42L, "jetbrains.mps.lang.core.structure.ICanSuppressErrors"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x11f1e14d895L, "jetbrains.mps.lang.core.structure.IContainer"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x11d205fe38dL, "jetbrains.mps.lang.core.structure.IDeprecatable"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x1ec383e5b4bdca56L, "jetbrains.mps.lang.core.structure.IDontApplyTypesystemRules"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL, "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2cc012b1584bd3aL, "jetbrains.mps.lang.core.structure.IMetaLevelChanger"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x9b3ed4f3a4d01ecL, "jetbrains.mps.lang.core.structure.IOldCommentAnnotation"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x39384475a5756fb0L, "jetbrains.mps.lang.core.structure.IOldCommentContainer"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x116b17c6e46L, "jetbrains.mps.lang.core.structure.IResolveInfo"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x50ef06e32fec9043L, "jetbrains.mps.lang.core.structure.ISkipConstraintsChecking"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x226fb4c3ba26d45L, "jetbrains.mps.lang.core.structure.IStubForAnotherConcept"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2f16f1b357e19f43L, "jetbrains.mps.lang.core.structure.ISuppressErrors"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x11f8a0774f2L, "jetbrains.mps.lang.core.structure.IType"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x11c6fd75034L, "jetbrains.mps.lang.core.structure.IWrapper"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x12509ddfaa7d2577L, "jetbrains.mps.lang.core.structure.ImplementationContainer"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x12509ddfaa7c0557L, "jetbrains.mps.lang.core.structure.ImplementationPart"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x612410e32cf46136L, "jetbrains.mps.lang.core.structure.ImplementationWithStubPart"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x12509ddfaa98f128L, "jetbrains.mps.lang.core.structure.InterfacePart"), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da51L, "jetbrains.mps.lang.core.structure.LinkAttribute"), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L, "jetbrains.mps.lang.core.structure.NodeAttribute"), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da56L, "jetbrains.mps.lang.core.structure.PropertyAttribute"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2ea65c0b397bd5beL, "jetbrains.mps.lang.core.structure.ScopeFacade"), MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L, "jetbrains.mps.lang.core.structure.ScopeProvider"), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0xad0053c7ae9194dL, "jetbrains.mps.lang.core.structure.SideTransformInfo"), MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x3a98b0957fe8e5d2L, "jetbrains.mps.lang.core.structure.SuppressErrorsAnnotation"));
}
