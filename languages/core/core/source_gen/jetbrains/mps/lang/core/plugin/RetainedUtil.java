package jetbrains.mps.lang.core.plugin;

/*Generated by MPS */

import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.smodel.resources.MResource;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.generator.GenerationFacade;
import jetbrains.mps.make.delta.IDelta;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.vfs.IFile;
import java.util.List;
import jetbrains.mps.internal.make.runtime.util.FilesDelta;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.module.SModuleFacet;
import jetbrains.mps.project.facets.GenerationTargetFacet;
import jetbrains.mps.internal.make.runtime.util.DeltaKey;

public final class RetainedUtil {
  private RetainedUtil() {
  }
  public static Map<SModule, Iterable<SModel>> collectModelsToRetain(Iterable<? extends IResource> input) {
    Map<SModule, Iterable<SModel>> retainedModels = MapSequence.fromMap(new HashMap<SModule, Iterable<SModel>>());
    for (IResource it : input) {
      MResource mres = ((MResource) it);
      SModule module = mres.module();
      // XXX why only generateable models? 
      Iterable<SModel> modelsToRetain = generateableModels(module);
      MapSequence.fromMap(retainedModels).put(module, Sequence.fromIterable(modelsToRetain).subtract(Sequence.fromIterable(mres.models())).toListSequence());
    }
    return retainedModels;
  }

  private static Iterable<SModel> generateableModels(SModule module) {
    return Sequence.fromIterable(((Iterable<SModel>) module.getModels())).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return GenerationFacade.canGenerate(it);
      }
    });
  }

  public static Iterable<IDelta> retainedDeltas(final SModule module, Iterable<SModel> smd, _FunctionTypes._return_P1_E0<? extends IFile, ? super String> getFile) {
    // builds deltas that mark output locations of specified models to persist generation (respective folders marked as 'kept') 
    assert Sequence.fromIterable(smd).all(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return it.getModule() == module;
      }
    });
    // XXX delta doesn't uilize IFile, it's merely an indication of a location. Perhaps, it should be caller responsibility 
    // to translate delta's IFile to proper location (make.pathToFile) and leave this class straighforward delta builder without 
    // knowledge of path translation? 
    // FIXME need make.pathToFile to take IFile instead of String, it's odd to go there and back 
    final List<FilesDelta> deltas = ListSequence.fromList(new ArrayList<FilesDelta>());

    for (SModuleFacet mf : module.getFacets()) {
      if (mf instanceof GenerationTargetFacet) {
        GenerationTargetFacet gtf = (GenerationTargetFacet) mf;
        IFile[] outputLocations = new IFile[2];
        for (SModel m : smd) {
          FilesDelta fd = new FilesDelta(new DeltaKey(module, m));
          ListSequence.fromList(deltas).addElement(fd);
          outputLocations[0] = gtf.getOutputLocation(m);
          outputLocations[1] = gtf.getOutputCacheLocation(m);
          for (IFile f : outputLocations) {
            if (f == null) {
              continue;
            }
            IFile actualOutput = getFile.invoke(f.getPath());
            fd.kept(actualOutput);
            // sort of workaround, report files to keep explicitly, otherwise a directory[kept] with subdirectories[kept] doesn't protect files under directory/ itself 
            List<IFile> children = actualOutput.getChildren();
            if (children != null && children.size() > 0) {
              for (IFile child : children) {
                // folders are output locations and therefore those to kept would get retained, if necessary, with the code above. 
                if (child.isDirectory()) {
                  continue;
                }
                fd.kept(child);
              }
            }
          }
        }
      }
    }
    return ListSequence.fromList(deltas).ofType(IDelta.class);
  }
}
