package jetbrains.mps.lang.core.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.core.behavior.ChildAttribute__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;

public class CommentPlaceholderEmptyCell_ActionMap {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.INSERT_PLACEHOLDER, new CommentPlaceholderEmptyCell_ActionMap.CommentPlaceholderEmptyCell_ActionMap_INSERT_PLACEHOLDER(node));
    editorCell.setAction(CellActionType.INSERT, new CommentPlaceholderEmptyCell_ActionMap.CommentPlaceholderEmptyCell_ActionMap_INSERT(node));
  }
  public static class CommentPlaceholderEmptyCell_ActionMap_INSERT_PLACEHOLDER extends AbstractCellAction {
    /*package*/ SNode myNode;
    public CommentPlaceholderEmptyCell_ActionMap_INSERT_PLACEHOLDER(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      SNode placeholder = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x339681b4da4ef1a7L, "jetbrains.mps.lang.core.structure.BasePlaceholder"));
      ChildAttribute__BehaviorDescriptor.setLink_idBpxLfMirzM.invoke(placeholder, ChildAttribute__BehaviorDescriptor.getLink_idBpxLfMirzf.invoke(node));
      SNodeOperations.insertNextSiblingChild(node, placeholder);
    }
  }
  public static class CommentPlaceholderEmptyCell_ActionMap_INSERT extends AbstractCellAction {
    /*package*/ SNode myNode;
    public CommentPlaceholderEmptyCell_ActionMap_INSERT(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      SAbstractConcept concept = ChildAttribute__BehaviorDescriptor.getLink_idBpxLfMirzf.invoke(node).getTargetConcept();
      SNode newNode = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(concept));
      SNodeOperations.getParent(node).insertChildAfter(ChildAttribute__BehaviorDescriptor.getLink_idBpxLfMirzf.invoke(node), newNode, node);
      SNodeOperations.deleteNode(node);
      SelectionUtil.selectLabelCellAnSetCaret(editorContext, newNode, SelectionManager.FIRST_ERROR_CELL + "|" + SelectionManager.FOCUS_POLICY_CELL + "|" + SelectionManager.FIRST_EDITABLE_CELL + "|" + SelectionManager.FIRST_CELL, 0);
    }
  }
}
