package jetbrains.mps.lang.core.behavior;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.NotNull;

/**
 * This hack is needed to support compatibility in ScopeProvider during 3.4->3.5 migration
 * `ourLock` is null if this method call is an entrance point, otherwise contains 'this' parameter of called method
 */
/*package*/ class ScopeProviderHelper {
  private static final ThreadLocal<SNode> ourLock = new ThreadLocal<SNode>();


  /**
   * Locks the node to prohibit repeated invocation from default deprecated/old counterpart implementation.
   * 
   * @return false when the node is already locked by default counterpart implementation
   */
  /*package*/ static boolean lock(@NotNull SNode node) {
    SNode current = ourLock.get();
    if (eq_pw3gvd_a0b0d(current, node)) {
      return false;
    }
    ourLock.set(node);
    return true;
  }

  /*package*/ static void unlock() {
    ourLock.set(null);
  }
  private static boolean eq_pw3gvd_a0b0d(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
