package jetbrains.mps.lang.sharedConcepts.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ConceptFunctionParameter_editorContext;
  private ConceptPresentation props_ConceptFunctionParameter_model;
  private ConceptPresentation props_ConceptFunctionParameter_node;
  private ConceptPresentation props_ConceptFunctionParameter_operationContext;
  private ConceptPresentation props_ConceptFunctionParameter_progressMonitor;
  private ConceptPresentation props_ConceptFunctionParameter_scope;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ConceptFunctionParameter_editorContext:
        if (props_ConceptFunctionParameter_editorContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("current EditorContext instance");
          props_ConceptFunctionParameter_editorContext = cpb.create();
        }
        return props_ConceptFunctionParameter_editorContext;
      case LanguageConceptSwitch.ConceptFunctionParameter_model:
        if (props_ConceptFunctionParameter_model == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("model of the reference node");
          props_ConceptFunctionParameter_model = cpb.create();
        }
        return props_ConceptFunctionParameter_model;
      case LanguageConceptSwitch.ConceptFunctionParameter_node:
        if (props_ConceptFunctionParameter_node == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ConceptFunctionParameter_node = cpb.create();
        }
        return props_ConceptFunctionParameter_node;
      case LanguageConceptSwitch.ConceptFunctionParameter_operationContext:
        if (props_ConceptFunctionParameter_operationContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.shortDesc("IOperationContext");
          props_ConceptFunctionParameter_operationContext = cpb.create();
        }
        return props_ConceptFunctionParameter_operationContext;
      case LanguageConceptSwitch.ConceptFunctionParameter_progressMonitor:
        if (props_ConceptFunctionParameter_progressMonitor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("progress monitor");
          props_ConceptFunctionParameter_progressMonitor = cpb.create();
        }
        return props_ConceptFunctionParameter_progressMonitor;
      case LanguageConceptSwitch.ConceptFunctionParameter_scope:
        if (props_ConceptFunctionParameter_scope == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("context (SearchScope)");
          props_ConceptFunctionParameter_scope = cpb.create();
        }
        return props_ConceptFunctionParameter_scope;
    }
    return null;
  }
}
