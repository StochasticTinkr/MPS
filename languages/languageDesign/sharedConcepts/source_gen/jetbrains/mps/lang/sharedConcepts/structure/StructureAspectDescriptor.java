package jetbrains.mps.lang.sharedConcepts.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(6);
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_editorContext = createDescriptorForConceptFunctionParameter_editorContext();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_model = createDescriptorForConceptFunctionParameter_model();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_node = createDescriptorForConceptFunctionParameter_node();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_operationContext = createDescriptorForConceptFunctionParameter_operationContext();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_progressMonitor = createDescriptorForConceptFunctionParameter_progressMonitor();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_scope = createDescriptorForConceptFunctionParameter_scope();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptConceptFunctionParameter_editorContext.getId(), 0);
    myIndexMap.put(myConceptConceptFunctionParameter_model.getId(), 1);
    myIndexMap.put(myConceptConceptFunctionParameter_node.getId(), 2);
    myIndexMap.put(myConceptConceptFunctionParameter_operationContext.getId(), 3);
    myIndexMap.put(myConceptConceptFunctionParameter_progressMonitor.getId(), 4);
    myIndexMap.put(myConceptConceptFunctionParameter_scope.getId(), 5);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptConceptFunctionParameter_editorContext, myConceptConceptFunctionParameter_model, myConceptConceptFunctionParameter_node, myConceptConceptFunctionParameter_operationContext, myConceptConceptFunctionParameter_progressMonitor, myConceptConceptFunctionParameter_scope);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptConceptFunctionParameter_editorContext;
      case 1:
        return myConceptConceptFunctionParameter_model;
      case 2:
        return myConceptConceptFunctionParameter_node;
      case 3:
        return myConceptConceptFunctionParameter_operationContext;
      case 4:
        return myConceptConceptFunctionParameter_progressMonitor;
      case 5:
        return myConceptConceptFunctionParameter_scope;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_editorContext() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.sharedConcepts", "ConceptFunctionParameter_editorContext", 0x13744753c81f424aL, 0x9c1bcf8943bf4e86L, 0x11601f73f7aL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c895902bc(jetbrains.mps.lang.sharedConcepts.structure)/1194033889146");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("editorContext");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_model() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.sharedConcepts", "ConceptFunctionParameter_model", 0x13744753c81f424aL, 0x9c1bcf8943bf4e86L, 0x10e761b3745L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c895902bc(jetbrains.mps.lang.sharedConcepts.structure)/1161622665029");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("model");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_node() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.sharedConcepts", "ConceptFunctionParameter_node", 0x13744753c81f424aL, 0x9c1bcf8943bf4e86L, 0x118e7145df4L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c895902bc(jetbrains.mps.lang.sharedConcepts.structure)/1206467714548");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("node");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_operationContext() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.sharedConcepts", "ConceptFunctionParameter_operationContext", 0x13744753c81f424aL, 0x9c1bcf8943bf4e86L, 0x10e761c927aL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c895902bc(jetbrains.mps.lang.sharedConcepts.structure)/1161622753914");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("operationContext");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_progressMonitor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.sharedConcepts", "ConceptFunctionParameter_progressMonitor", 0x13744753c81f424aL, 0x9c1bcf8943bf4e86L, 0x7be6ee9831c8594L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c895902bc(jetbrains.mps.lang.sharedConcepts.structure)/558005353046640020");
    b.alias("monitor");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_scope() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.sharedConcepts", "ConceptFunctionParameter_scope", 0x13744753c81f424aL, 0x9c1bcf8943bf4e86L, 0x10e761e7965L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c895902bc(jetbrains.mps.lang.sharedConcepts.structure)/1161622878565");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("scope");
    return b.create();
  }
}
