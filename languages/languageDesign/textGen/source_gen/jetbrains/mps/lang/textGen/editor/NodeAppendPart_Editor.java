package jetbrains.mps.lang.textGen.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;

public class NodeAppendPart_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_jdqktq_a(editorContext, node);
  }
  public EditorCell createInspectedCell(EditorContext editorContext, SNode node) {
    return this.createCollection_jdqktq_a_0(editorContext, node);
  }
  private EditorCell createCollection_jdqktq_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_jdqktq_a");
    editorCell.setBig(true);
    Style style = new StyleImpl();
    style.set(StyleAttributes.LAYOUT_CONSTRAINT, 0, "punctuation");
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_jdqktq_a0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_jdqktq_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_jdqktq_c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_jdqktq_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "${");
    editorCell.setCellId("Constant_jdqktq_a0");
    Style style = new StyleImpl();
    TextGenStyles_StyleSheet.apply_AppendPart(style, editorCell);
    style.set(StyleAttributes.EDITABLE, 0, false);
    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_jdqktq_b0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new NodeAppendPart_Editor.valueSingleRoleHandler_jdqktq_b0(node, MetaAdapterFactory.getContainmentLink(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x12015251a28L, 0x120152c1030L, "value"), editorContext);
    return provider.createCell();
  }
  private class valueSingleRoleHandler_jdqktq_b0 extends SingleRoleCellProvider {
    public valueSingleRoleHandler_jdqktq_b0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    public EditorCell createChildCell(EditorContext editorContext, SNode child) {
      EditorCell editorCell = super.createChildCell(editorContext, child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    public void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("value");
      }
    }


    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_value");
      installCellInfo(null, editorCell);
      return editorCell;
    }

    protected String getNoTargetText() {
      return "<no value>";
    }

  }
  private EditorCell createConstant_jdqktq_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "}");
    editorCell.setCellId("Constant_jdqktq_c0");
    Style style = new StyleImpl();
    TextGenStyles_StyleSheet.apply_AppendPart(style, editorCell);
    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_jdqktq_a_0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_jdqktq_a_0");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createCollection_jdqktq_a0(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_jdqktq_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_jdqktq_a0");
    editorCell.addEditorCell(this.createConstant_jdqktq_a0a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_jdqktq_b0a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_jdqktq_c0a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_jdqktq_a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "with");
    editorCell.setCellId("Constant_jdqktq_a0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_jdqktq_b0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "indent");
    editorCell.setCellId("Constant_jdqktq_b0a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_jdqktq_c0a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("withIndent");
    provider.setNoTargetText("<no withIndent>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_withIndent");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
}
