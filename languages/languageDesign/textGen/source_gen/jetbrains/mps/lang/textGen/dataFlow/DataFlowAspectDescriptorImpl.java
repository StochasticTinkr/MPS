package jetbrains.mps.lang.textGen.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.framework.DataFlowAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.lang.dataFlow.framework.IDataFlowBuilder;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class DataFlowAspectDescriptorImpl extends DataFlowAspectDescriptorBase {

  @NotNull
  @Override
  public Collection<IDataFlowBuilder> getDataFlowBuilders(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = ((SAbstractConcept) concept);
      switch (index_vhxjlb_a0b.index(cncpt)) {
        case 0:
          return Collections.<IDataFlowBuilder>singletonList(new AppendOperation_DataFlow());
        case 1:
          return Collections.<IDataFlowBuilder>singletonList(new CollectionAppendPart_DataFlow());
        case 2:
          return Collections.<IDataFlowBuilder>singletonList(new ConceptTextGenDeclaration_DataFlow());
        case 3:
          return Collections.<IDataFlowBuilder>singletonList(new ConstantStringAppendPart_DataFlow());
        case 4:
          return Collections.<IDataFlowBuilder>singletonList(new DecreaseDepthOperation_DataFlow());
        case 5:
          return Collections.<IDataFlowBuilder>singletonList(new FoundErrorOperation_DataFlow());
        case 6:
          return Collections.<IDataFlowBuilder>singletonList(new IncreaseDepthOperation_DataFlow());
        case 7:
          return Collections.<IDataFlowBuilder>singletonList(new IndentBufferOperation_DataFlow());
        case 8:
          return Collections.<IDataFlowBuilder>singletonList(new LanguageTextGenDeclaration_DataFlow());
        case 9:
          return Collections.<IDataFlowBuilder>singletonList(new NewLineAppendPart_DataFlow());
        case 10:
          return Collections.<IDataFlowBuilder>singletonList(new NodeAppendPart_DataFlow());
        case 11:
          return Collections.<IDataFlowBuilder>singletonList(new OperationCall_DataFlow());
        case 12:
          return Collections.<IDataFlowBuilder>singletonList(new OperationDeclaration_DataFlow());
        case 13:
          return Collections.<IDataFlowBuilder>singletonList(new ReferenceAppendPart_DataFlow());
        case 14:
          return Collections.<IDataFlowBuilder>singletonList(new UtilityMethodCall_DataFlow());
        case 15:
          return Collections.<IDataFlowBuilder>singletonList(new UtilityMethodDeclaration_DataFlow());
        case 16:
          return Collections.<IDataFlowBuilder>singletonList(new WithIndentOperation_DataFlow());
        default:
          // default 
      }
    }
    return Collections.<IDataFlowBuilder>emptyList();
  }
  private static final ConceptSwitchIndex index_vhxjlb_a0b = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x120153077caL), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x1201527819cL), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f3c776369L), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x12015288286L), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f4165704bL), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f7f7ff1bdL), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f41648039L), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f4b64a5c9L), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f4b71f51fL), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x12015232fd0L), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x12015251a28L), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f4ba6faaaL), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f4b80e9d3L), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x5fec1f33fd3007f8L), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f6faa8c98L), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f6f6a18e4L), MetaIdFactory.conceptId(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11fd28e1146L)).seal();
}
