package jetbrains.mps.lang.textGen.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractAppendPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractTextGenDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractTextGenParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AppendOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributedNodePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BufferParameter = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_CollectionAppendPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptTextGenDeclaration = new ConceptPresentationBuilder().icon("textGen.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_ConstantStringAppendPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextParameter = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_DecreaseDepthOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EncodingDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EncodingDeclarationBase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EncodingLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExtensionDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FilenameFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FoundErrorOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerateTextDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncreaseDepthOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentBufferOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LanguageTextGenDeclaration = new ConceptPresentationBuilder().icon("textGenComponent.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_LayoutPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NewLineAppendPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeAppendPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceAppendPart = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_SimpleTextGenOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubOperationDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextUnitLayout = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UtilityMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UtilityMethodDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WithIndentOperation = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_lpa09p_a0kb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractAppendPart;
          }
          break;
        case 1:
          if (true) {
            return props_AbstractTextGenDeclaration;
          }
          break;
        case 2:
          if (true) {
            return props_AbstractTextGenParameter;
          }
          break;
        case 3:
          if (true) {
            return props_AppendOperation;
          }
          break;
        case 4:
          if (true) {
            return props_AttributedNodePart;
          }
          break;
        case 5:
          if (true) {
            return props_BufferParameter;
          }
          break;
        case 6:
          if (true) {
            return props_CollectionAppendPart;
          }
          break;
        case 7:
          if (true) {
            return props_ConceptTextGenDeclaration;
          }
          break;
        case 8:
          if (true) {
            return props_ConstantStringAppendPart;
          }
          break;
        case 9:
          if (true) {
            return props_ContextParameter;
          }
          break;
        case 10:
          if (true) {
            return props_DecreaseDepthOperation;
          }
          break;
        case 11:
          if (true) {
            return props_EncodingDeclaration;
          }
          break;
        case 12:
          if (true) {
            return props_EncodingDeclarationBase;
          }
          break;
        case 13:
          if (true) {
            return props_EncodingLiteral;
          }
          break;
        case 14:
          if (true) {
            return props_ExtensionDeclaration;
          }
          break;
        case 15:
          if (true) {
            return props_FilenameFunction;
          }
          break;
        case 16:
          if (true) {
            return props_FoundErrorOperation;
          }
          break;
        case 17:
          if (true) {
            return props_GenerateTextDeclaration;
          }
          break;
        case 18:
          if (true) {
            return props_IncreaseDepthOperation;
          }
          break;
        case 19:
          if (true) {
            return props_IndentBufferOperation;
          }
          break;
        case 20:
          if (true) {
            return props_IndentPart;
          }
          break;
        case 21:
          if (true) {
            return props_LanguageTextGenDeclaration;
          }
          break;
        case 22:
          if (true) {
            return props_LayoutPart;
          }
          break;
        case 23:
          if (true) {
            return props_NewLineAppendPart;
          }
          break;
        case 24:
          if (true) {
            return props_NodeAppendPart;
          }
          break;
        case 25:
          if (true) {
            return props_NodeParameter;
          }
          break;
        case 26:
          if (true) {
            return props_OperationCall;
          }
          break;
        case 27:
          if (true) {
            return props_OperationDeclaration;
          }
          break;
        case 28:
          if (true) {
            return props_ReferenceAppendPart;
          }
          break;
        case 29:
          if (true) {
            return props_SimpleTextGenOperation;
          }
          break;
        case 30:
          if (true) {
            return props_StubOperationDeclaration;
          }
          break;
        case 31:
          if (true) {
            return props_TextUnitLayout;
          }
          break;
        case 32:
          if (true) {
            return props_UtilityMethodCall;
          }
          break;
        case 33:
          if (true) {
            return props_UtilityMethodDeclaration;
          }
          break;
        case 34:
          if (true) {
            return props_WithIndentOperation;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_lpa09p_a0kb = buildConceptIndices(MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x1201521c456L, "AbstractAppendPart"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f60f06a49L, "AbstractTextGenDeclaration"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f84e1988dL, "AbstractTextGenParameter"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x120153077caL, "AppendOperation"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x7c096989aaf957c1L, "AttributedNodePart"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f65197df2L, "BufferParameter"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x1201527819cL, "CollectionAppendPart"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f3c776369L, "ConceptTextGenDeclaration"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x12015288286L, "ConstantStringAppendPart"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f60cd534bL, "ContextParameter"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f4165704bL, "DecreaseDepthOperation"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x10fd02ec599e8f93L, "EncodingDeclaration"), MetaAdapterFactory.getInterfaceConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x10fd02ec599e8fbbL, "EncodingDeclarationBase"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x63754d97e1c86b8cL, "EncodingLiteral"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x7bf48616723f681dL, "ExtensionDeclaration"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0xa0f73089d40b8eL, "FilenameFunction"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f7f7ff1bdL, "FoundErrorOperation"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f412f8790L, "GenerateTextDeclaration"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f41648039L, "IncreaseDepthOperation"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f4b64a5c9L, "IndentBufferOperation"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x3c78adfd9bcaac6aL, "IndentPart"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f4b71f51fL, "LanguageTextGenDeclaration"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x2bad879ac8f27dcaL, "LayoutPart"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x12015232fd0L, "NewLineAppendPart"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x12015251a28L, "NodeAppendPart"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f411d576bL, "NodeParameter"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f4ba6faaaL, "OperationCall"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f4b80e9d3L, "OperationDeclaration"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x5fec1f33fd3007f8L, "ReferenceAppendPart"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f4153bc8cL, "SimpleTextGenOperation"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x2bacbf19e457bd3bL, "StubOperationDeclaration"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x2bad879ac8f27dc9L, "TextUnitLayout"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f6faa8c98L, "UtilityMethodCall"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11f6f6a18e4L, "UtilityMethodDeclaration"), MetaAdapterFactory.getConcept(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L, 0x11fd28e1146L, "WithIndentOperation"));
}
