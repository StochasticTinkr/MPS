package jetbrains.mps.lang.textGen.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractAppendPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractTextGenDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractTextGenParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AppendOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributedNodePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BufferParameter = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ClassConceptUnitContext = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CollectionAppendPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptTextGenDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0i).create();
  private final ConceptPresentation props_ConstantStringAppendPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextInstanceSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextParameter = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_DecreaseDepthOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EncodingDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EncodingDeclarationBase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EncodingLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExtensionDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FilenameFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FoundErrorOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerateTextDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncreaseDepthOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentBufferOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstancePerUnitContextObject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LanguageTextGenDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0y).create();
  private final ConceptPresentation props_LayoutPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NewLineAppendPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeAppendPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceAppendPart = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_SimpleTextGenOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubOperationDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextUnitLayout = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnitContextDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnitContextObject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnitContextReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UtilityMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UtilityMethodDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WithIndentOperation = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractAppendPart;
      case 1:
        return props_AbstractTextGenDeclaration;
      case 2:
        return props_AbstractTextGenParameter;
      case 3:
        return props_AppendOperation;
      case 4:
        return props_AttributedNodePart;
      case 5:
        return props_BufferParameter;
      case 6:
        return props_ClassConceptUnitContext;
      case 7:
        return props_CollectionAppendPart;
      case 8:
        return props_ConceptTextGenDeclaration;
      case 9:
        return props_ConstantStringAppendPart;
      case 10:
        return props_ContextInstanceSpecification;
      case 11:
        return props_ContextParameter;
      case 12:
        return props_DecreaseDepthOperation;
      case 13:
        return props_EncodingDeclaration;
      case 14:
        return props_EncodingDeclarationBase;
      case 15:
        return props_EncodingLiteral;
      case 16:
        return props_ExtensionDeclaration;
      case 17:
        return props_FilenameFunction;
      case 18:
        return props_FoundErrorOperation;
      case 19:
        return props_GenerateTextDeclaration;
      case 20:
        return props_IncreaseDepthOperation;
      case 21:
        return props_IndentBufferOperation;
      case 22:
        return props_IndentPart;
      case 23:
        return props_InstancePerUnitContextObject;
      case 24:
        return props_LanguageTextGenDeclaration;
      case 25:
        return props_LayoutPart;
      case 26:
        return props_NewLineAppendPart;
      case 27:
        return props_NodeAppendPart;
      case 28:
        return props_NodeParameter;
      case 29:
        return props_OperationCall;
      case 30:
        return props_OperationDeclaration;
      case 31:
        return props_ReferenceAppendPart;
      case 32:
        return props_SimpleTextGenOperation;
      case 33:
        return props_StubOperationDeclaration;
      case 34:
        return props_TextUnitLayout;
      case 35:
        return props_UnitContextDeclaration;
      case 36:
        return props_UnitContextObject;
      case 37:
        return props_UnitContextReference;
      case 38:
        return props_UtilityMethodCall;
      case 39:
        return props_UtilityMethodDeclaration;
      case 40:
        return props_WithIndentOperation;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
