package jetbrains.mps.lang.textGen.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractAppendPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractTextGenDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractTextGenParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AppendOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributedNodePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BufferParameter = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ClassConceptUnitContext = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CollectionAppendPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptTextGenDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0i).create();
  private final ConceptPresentation props_ConstantStringAppendPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextInstanceSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextParameter = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_DecreaseDepthOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EncodingDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EncodingDeclarationBase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EncodingLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExtensionDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FilenameFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FoundErrorOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerateTextDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncreaseDepthOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentBufferOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstancePerUnitContextObject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LanguageTextGenDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0y).create();
  private final ConceptPresentation props_LayoutPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NewLineAppendPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeAppendPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceAppendPart = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_SimpleTextGenOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubOperationDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextUnitLayout = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnitContextDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnitContextObject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnitContextReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UtilityMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UtilityMethodDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WithIndentOperation = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractAppendPart:
        return props_AbstractAppendPart;
      case LanguageConceptSwitch.AbstractTextGenDeclaration:
        return props_AbstractTextGenDeclaration;
      case LanguageConceptSwitch.AbstractTextGenParameter:
        return props_AbstractTextGenParameter;
      case LanguageConceptSwitch.AppendOperation:
        return props_AppendOperation;
      case LanguageConceptSwitch.AttributedNodePart:
        return props_AttributedNodePart;
      case LanguageConceptSwitch.BufferParameter:
        return props_BufferParameter;
      case LanguageConceptSwitch.ClassConceptUnitContext:
        return props_ClassConceptUnitContext;
      case LanguageConceptSwitch.CollectionAppendPart:
        return props_CollectionAppendPart;
      case LanguageConceptSwitch.ConceptTextGenDeclaration:
        return props_ConceptTextGenDeclaration;
      case LanguageConceptSwitch.ConstantStringAppendPart:
        return props_ConstantStringAppendPart;
      case LanguageConceptSwitch.ContextInstanceSpecification:
        return props_ContextInstanceSpecification;
      case LanguageConceptSwitch.ContextParameter:
        return props_ContextParameter;
      case LanguageConceptSwitch.DecreaseDepthOperation:
        return props_DecreaseDepthOperation;
      case LanguageConceptSwitch.EncodingDeclaration:
        return props_EncodingDeclaration;
      case LanguageConceptSwitch.EncodingDeclarationBase:
        return props_EncodingDeclarationBase;
      case LanguageConceptSwitch.EncodingLiteral:
        return props_EncodingLiteral;
      case LanguageConceptSwitch.ExtensionDeclaration:
        return props_ExtensionDeclaration;
      case LanguageConceptSwitch.FilenameFunction:
        return props_FilenameFunction;
      case LanguageConceptSwitch.FoundErrorOperation:
        return props_FoundErrorOperation;
      case LanguageConceptSwitch.GenerateTextDeclaration:
        return props_GenerateTextDeclaration;
      case LanguageConceptSwitch.IncreaseDepthOperation:
        return props_IncreaseDepthOperation;
      case LanguageConceptSwitch.IndentBufferOperation:
        return props_IndentBufferOperation;
      case LanguageConceptSwitch.IndentPart:
        return props_IndentPart;
      case LanguageConceptSwitch.InstancePerUnitContextObject:
        return props_InstancePerUnitContextObject;
      case LanguageConceptSwitch.LanguageTextGenDeclaration:
        return props_LanguageTextGenDeclaration;
      case LanguageConceptSwitch.LayoutPart:
        return props_LayoutPart;
      case LanguageConceptSwitch.NewLineAppendPart:
        return props_NewLineAppendPart;
      case LanguageConceptSwitch.NodeAppendPart:
        return props_NodeAppendPart;
      case LanguageConceptSwitch.NodeParameter:
        return props_NodeParameter;
      case LanguageConceptSwitch.OperationCall:
        return props_OperationCall;
      case LanguageConceptSwitch.OperationDeclaration:
        return props_OperationDeclaration;
      case LanguageConceptSwitch.ReferenceAppendPart:
        return props_ReferenceAppendPart;
      case LanguageConceptSwitch.SimpleTextGenOperation:
        return props_SimpleTextGenOperation;
      case LanguageConceptSwitch.StubOperationDeclaration:
        return props_StubOperationDeclaration;
      case LanguageConceptSwitch.TextUnitLayout:
        return props_TextUnitLayout;
      case LanguageConceptSwitch.UnitContextDeclaration:
        return props_UnitContextDeclaration;
      case LanguageConceptSwitch.UnitContextObject:
        return props_UnitContextObject;
      case LanguageConceptSwitch.UnitContextReference:
        return props_UnitContextReference;
      case LanguageConceptSwitch.UtilityMethodCall:
        return props_UtilityMethodCall;
      case LanguageConceptSwitch.UtilityMethodDeclaration:
        return props_UtilityMethodDeclaration;
      case LanguageConceptSwitch.WithIndentOperation:
        return props_WithIndentOperation;
    }
    return null;
  }
}
