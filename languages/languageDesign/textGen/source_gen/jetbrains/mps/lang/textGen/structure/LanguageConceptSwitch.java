package jetbrains.mps.lang.textGen.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractAppendPart = 0;
  public static final int AbstractTextGenDeclaration = 1;
  public static final int AbstractTextGenParameter = 2;
  public static final int AppendOperation = 3;
  public static final int AttributedNodePart = 4;
  public static final int ClassConceptUnitContext = 5;
  public static final int CollectionAppendPart = 6;
  public static final int ConceptTextGenDeclaration = 7;
  public static final int ConstantStringAppendPart = 8;
  public static final int ContextInstanceSpecification = 9;
  public static final int DecreaseDepthOperation = 10;
  public static final int EncodingDeclaration = 11;
  public static final int EncodingDeclarationBase = 12;
  public static final int EncodingLiteral = 13;
  public static final int ExtensionDeclaration = 14;
  public static final int FilePathQuery = 15;
  public static final int FilePathSpec = 16;
  public static final int FilenameFunction = 17;
  public static final int FoundErrorOperation = 18;
  public static final int GenerateTextDeclaration = 19;
  public static final int IncreaseDepthOperation = 20;
  public static final int IndentBufferOperation = 21;
  public static final int IndentPart = 22;
  public static final int InstancePerUnitContextObject = 23;
  public static final int LanguageTextGenDeclaration = 24;
  public static final int LayoutPart = 25;
  public static final int NewLineAppendPart = 26;
  public static final int NodeAppendPart = 27;
  public static final int NodeParameter = 28;
  public static final int OperationCall = 29;
  public static final int OperationDeclaration = 30;
  public static final int SimpleTextGenOperation = 31;
  public static final int StubOperationDeclaration = 32;
  public static final int TextUnitLayout = 33;
  public static final int UnitContextDeclaration = 34;
  public static final int UnitContextObject = 35;
  public static final int UnitContextReference = 36;
  public static final int UtilityMethodCall = 37;
  public static final int UtilityMethodDeclaration = 38;
  public static final int WithIndentOperation = 39;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xb83431fe5c8f40bcL, 0x8a3665e25f4dd253L);
    builder.put(0x1201521c456L, AbstractAppendPart);
    builder.put(0x11f60f06a49L, AbstractTextGenDeclaration);
    builder.put(0x11f84e1988dL, AbstractTextGenParameter);
    builder.put(0x120153077caL, AppendOperation);
    builder.put(0x7c096989aaf957c1L, AttributedNodePart);
    builder.put(0x377692d961ac9073L, ClassConceptUnitContext);
    builder.put(0x1201527819cL, CollectionAppendPart);
    builder.put(0x11f3c776369L, ConceptTextGenDeclaration);
    builder.put(0x12015288286L, ConstantStringAppendPart);
    builder.put(0x377692d961ac9072L, ContextInstanceSpecification);
    builder.put(0x11f4165704bL, DecreaseDepthOperation);
    builder.put(0x10fd02ec599e8f93L, EncodingDeclaration);
    builder.put(0x10fd02ec599e8fbbL, EncodingDeclarationBase);
    builder.put(0x63754d97e1c86b8cL, EncodingLiteral);
    builder.put(0x7bf48616723f681dL, ExtensionDeclaration);
    builder.put(0x6cdeb9421c83c71fL, FilePathQuery);
    builder.put(0x6cdeb9421c83ad51L, FilePathSpec);
    builder.put(0xa0f73089d40b8eL, FilenameFunction);
    builder.put(0x11f7f7ff1bdL, FoundErrorOperation);
    builder.put(0x11f412f8790L, GenerateTextDeclaration);
    builder.put(0x11f41648039L, IncreaseDepthOperation);
    builder.put(0x11f4b64a5c9L, IndentBufferOperation);
    builder.put(0x3c78adfd9bcaac6aL, IndentPart);
    builder.put(0x1dfcc3c672ea762bL, InstancePerUnitContextObject);
    builder.put(0x11f4b71f51fL, LanguageTextGenDeclaration);
    builder.put(0x2bad879ac8f27dcaL, LayoutPart);
    builder.put(0x12015232fd0L, NewLineAppendPart);
    builder.put(0x12015251a28L, NodeAppendPart);
    builder.put(0x11f411d576bL, NodeParameter);
    builder.put(0x11f4ba6faaaL, OperationCall);
    builder.put(0x11f4b80e9d3L, OperationDeclaration);
    builder.put(0x11f4153bc8cL, SimpleTextGenOperation);
    builder.put(0x2bacbf19e457bd3bL, StubOperationDeclaration);
    builder.put(0x2bad879ac8f27dc9L, TextUnitLayout);
    builder.put(0x377692d961aaee79L, UnitContextDeclaration);
    builder.put(0x1dfcc3c672ea762cL, UnitContextObject);
    builder.put(0x377692d961ab5a81L, UnitContextReference);
    builder.put(0x11f6faa8c98L, UtilityMethodCall);
    builder.put(0x11f6f6a18e4L, UtilityMethodDeclaration);
    builder.put(0x11fd28e1146L, WithIndentOperation);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
