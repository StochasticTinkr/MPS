package jetbrains.mps.lang.intentions.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_BaseIntentionDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ChildFilterBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ChildFilterFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_childNode = new ConceptPresentationBuilder().shortDesc("function parameter").create();
  private final ConceptPresentation props_ConceptFunctionParameter_node = new ConceptPresentationBuilder().shortDesc("function parameter").create();
  private final ConceptPresentation props_DescriptionBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ErrorIntentionPriority = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ForConceptMethodParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Intention = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0j).create();
  private final ConceptPresentation props_IntentionDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0k).create();
  private final ConceptPresentation props_IntentionParameter = new ConceptPresentationBuilder().shortDesc("intention parameter").create();
  private final ConceptPresentation props_IntentionPriority = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsApplicableBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterizedDescriptionBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterizedExecuteBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterizedIntentionDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SurroundWithIntentionDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0t).create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BaseIntentionDeclaration:
        return props_BaseIntentionDeclaration;
      case LanguageConceptSwitch.ChildFilterBlock:
        return props_ChildFilterBlock;
      case LanguageConceptSwitch.ChildFilterFunction:
        return props_ChildFilterFunction;
      case LanguageConceptSwitch.ConceptFunctionParameter_childNode:
        return props_ConceptFunctionParameter_childNode;
      case LanguageConceptSwitch.ConceptFunctionParameter_node:
        return props_ConceptFunctionParameter_node;
      case LanguageConceptSwitch.DescriptionBlock:
        return props_DescriptionBlock;
      case LanguageConceptSwitch.ErrorIntentionPriority:
        return props_ErrorIntentionPriority;
      case LanguageConceptSwitch.ExecuteBlock:
        return props_ExecuteBlock;
      case LanguageConceptSwitch.ForConceptMethodParameter:
        return props_ForConceptMethodParameter;
      case LanguageConceptSwitch.Intention:
        return props_Intention;
      case LanguageConceptSwitch.IntentionDeclaration:
        return props_IntentionDeclaration;
      case LanguageConceptSwitch.IntentionParameter:
        return props_IntentionParameter;
      case LanguageConceptSwitch.IntentionPriority:
        return props_IntentionPriority;
      case LanguageConceptSwitch.IsApplicableBlock:
        return props_IsApplicableBlock;
      case LanguageConceptSwitch.Parameter:
        return props_Parameter;
      case LanguageConceptSwitch.ParameterizedDescriptionBlock:
        return props_ParameterizedDescriptionBlock;
      case LanguageConceptSwitch.ParameterizedExecuteBlock:
        return props_ParameterizedExecuteBlock;
      case LanguageConceptSwitch.ParameterizedIntentionDeclaration:
        return props_ParameterizedIntentionDeclaration;
      case LanguageConceptSwitch.QueryBlock:
        return props_QueryBlock;
      case LanguageConceptSwitch.SurroundWithIntentionDeclaration:
        return props_SurroundWithIntentionDeclaration;
    }
    return null;
  }
}
