package jetbrains.mps.lang.intentions.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int BaseIntentionDeclaration = 0;
  public static final int ChildFilterBlock = 1;
  public static final int ChildFilterFunction = 2;
  public static final int ConceptFunctionParameter_childNode = 3;
  public static final int ConceptFunctionParameter_node = 4;
  public static final int DescriptionBlock = 5;
  public static final int ErrorIntentionPriority = 6;
  public static final int ExecuteBlock = 7;
  public static final int ForConceptMethodParameter = 8;
  public static final int Intention = 9;
  public static final int IntentionDeclaration = 10;
  public static final int IntentionParameter = 11;
  public static final int IntentionPriority = 12;
  public static final int IsApplicableBlock = 13;
  public static final int Parameter = 14;
  public static final int ParameterizedDescriptionBlock = 15;
  public static final int ParameterizedExecuteBlock = 16;
  public static final int ParameterizedIntentionDeclaration = 17;
  public static final int QueryBlock = 18;
  public static final int SurroundWithIntentionDeclaration = 19;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L);
    builder.put(0x2303633a9c3cc675L, BaseIntentionDeclaration);
    builder.put(0x323731f511d1c198L, ChildFilterBlock);
    builder.put(0x323731f511d1c1bbL, ChildFilterFunction);
    builder.put(0x323731f511d1c750L, ConceptFunctionParameter_childNode);
    builder.put(0x115b83c562eL, ConceptFunctionParameter_node);
    builder.put(0x115b81bfaa7L, DescriptionBlock);
    builder.put(0x59427edd75744615L, ErrorIntentionPriority);
    builder.put(0x115b82d36d9L, ExecuteBlock);
    builder.put(0x44d08b803f255effL, ForConceptMethodParameter);
    builder.put(0x71ffad1474b12a0bL, Intention);
    builder.put(0x115b81b652bL, IntentionDeclaration);
    builder.put(0x120c8fd57fbL, IntentionParameter);
    builder.put(0x59427edd75744617L, IntentionPriority);
    builder.put(0x115b82b10f5L, IsApplicableBlock);
    builder.put(0x6688b42d39674b7aL, Parameter);
    builder.put(0x1925e8184af03861L, ParameterizedDescriptionBlock);
    builder.put(0x1925e8184af310edL, ParameterizedExecuteBlock);
    builder.put(0x120cd519c2dL, ParameterizedIntentionDeclaration);
    builder.put(0x120c89cc719L, QueryBlock);
    builder.put(0x2303633a9c3e6815L, SurroundWithIntentionDeclaration);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
