package jetbrains.mps.lang.intentions.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_BaseIntentionDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ChildFilterBlock = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ChildFilterFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptFunctionParameter_childNode = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptFunctionParameter_node = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DescriptionBlock = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ErrorIntentionPriority = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExecuteBlock = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ForConceptMethodParameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Intention = new ConceptPropsBuilder().icon("intentionBulb.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_IntentionDeclaration = new ConceptPropsBuilder().icon("intentionBulb.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_IntentionParameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IntentionPriority = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IsApplicableBlock = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Parameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ParameterizedDescriptionBlock = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ParameterizedExecuteBlock = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ParameterizedIntentionDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_QueryBlock = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SurroundWithIntentionDeclaration = new ConceptPropsBuilder().icon("surroundWithIntention.png", AdditionalStructurePropertiesImpl.class).create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0v.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_BaseIntentionDeclaration;
          }
          break;
        case 1:
          if (true) {
            return props_ChildFilterBlock;
          }
          break;
        case 2:
          if (true) {
            return props_ChildFilterFunction;
          }
          break;
        case 3:
          if (true) {
            return props_ConceptFunctionParameter_childNode;
          }
          break;
        case 4:
          if (true) {
            return props_ConceptFunctionParameter_node;
          }
          break;
        case 5:
          if (true) {
            return props_DescriptionBlock;
          }
          break;
        case 6:
          if (true) {
            return props_ErrorIntentionPriority;
          }
          break;
        case 7:
          if (true) {
            return props_ExecuteBlock;
          }
          break;
        case 8:
          if (true) {
            return props_ForConceptMethodParameter;
          }
          break;
        case 9:
          if (true) {
            return props_Intention;
          }
          break;
        case 10:
          if (true) {
            return props_IntentionDeclaration;
          }
          break;
        case 11:
          if (true) {
            return props_IntentionParameter;
          }
          break;
        case 12:
          if (true) {
            return props_IntentionPriority;
          }
          break;
        case 13:
          if (true) {
            return props_IsApplicableBlock;
          }
          break;
        case 14:
          if (true) {
            return props_Parameter;
          }
          break;
        case 15:
          if (true) {
            return props_ParameterizedDescriptionBlock;
          }
          break;
        case 16:
          if (true) {
            return props_ParameterizedExecuteBlock;
          }
          break;
        case 17:
          if (true) {
            return props_ParameterizedIntentionDeclaration;
          }
          break;
        case 18:
          if (true) {
            return props_QueryBlock;
          }
          break;
        case 19:
          if (true) {
            return props_SurroundWithIntentionDeclaration;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0v = buildConceptIndices(MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x2303633a9c3cc675L, "BaseIntentionDeclaration"), MetaAdapterFactory.getInterfaceConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x323731f511d1c198L, "ChildFilterBlock"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x323731f511d1c1bbL, "ChildFilterFunction"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x323731f511d1c750L, "ConceptFunctionParameter_childNode"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b83c562eL, "ConceptFunctionParameter_node"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b81bfaa7L, "DescriptionBlock"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x59427edd75744615L, "ErrorIntentionPriority"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b82d36d9L, "ExecuteBlock"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x44d08b803f255effL, "ForConceptMethodParameter"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x71ffad1474b12a0bL, "Intention"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b81b652bL, "IntentionDeclaration"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x120c8fd57fbL, "IntentionParameter"), MetaAdapterFactory.getInterfaceConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x59427edd75744617L, "IntentionPriority"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b82b10f5L, "IsApplicableBlock"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x6688b42d39674b7aL, "Parameter"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x1925e8184af03861L, "ParameterizedDescriptionBlock"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x1925e8184af310edL, "ParameterizedExecuteBlock"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x120cd519c2dL, "ParameterizedIntentionDeclaration"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x120c89cc719L, "QueryBlock"), MetaAdapterFactory.getConcept(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x2303633a9c3e6815L, "SurroundWithIntentionDeclaration"));
}
