package jetbrains.mps.lang.intentions.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptBaseIntentionDeclaration = createDescriptorForBaseIntentionDeclaration();
  /*package*/ final ConceptDescriptor myConceptChildFilterBlock = createDescriptorForChildFilterBlock();
  /*package*/ final ConceptDescriptor myConceptChildFilterFunction = createDescriptorForChildFilterFunction();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_childNode = createDescriptorForConceptFunctionParameter_childNode();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_node = createDescriptorForConceptFunctionParameter_node();
  /*package*/ final ConceptDescriptor myConceptDescriptionBlock = createDescriptorForDescriptionBlock();
  /*package*/ final ConceptDescriptor myConceptErrorIntentionPriority = createDescriptorForErrorIntentionPriority();
  /*package*/ final ConceptDescriptor myConceptExecuteBlock = createDescriptorForExecuteBlock();
  /*package*/ final ConceptDescriptor myConceptForConceptMethodParameter = createDescriptorForForConceptMethodParameter();
  /*package*/ final ConceptDescriptor myConceptIntention = createDescriptorForIntention();
  /*package*/ final ConceptDescriptor myConceptIntentionDeclaration = createDescriptorForIntentionDeclaration();
  /*package*/ final ConceptDescriptor myConceptIntentionParameter = createDescriptorForIntentionParameter();
  /*package*/ final ConceptDescriptor myConceptIntentionPriority = createDescriptorForIntentionPriority();
  /*package*/ final ConceptDescriptor myConceptIsApplicableBlock = createDescriptorForIsApplicableBlock();
  /*package*/ final ConceptDescriptor myConceptParameter = createDescriptorForParameter();
  /*package*/ final ConceptDescriptor myConceptParameterizedDescriptionBlock = createDescriptorForParameterizedDescriptionBlock();
  /*package*/ final ConceptDescriptor myConceptParameterizedExecuteBlock = createDescriptorForParameterizedExecuteBlock();
  /*package*/ final ConceptDescriptor myConceptParameterizedIntentionDeclaration = createDescriptorForParameterizedIntentionDeclaration();
  /*package*/ final ConceptDescriptor myConceptQueryBlock = createDescriptorForQueryBlock();
  /*package*/ final ConceptDescriptor myConceptSurroundWithIntentionDeclaration = createDescriptorForSurroundWithIntentionDeclaration();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBaseIntentionDeclaration, myConceptChildFilterBlock, myConceptChildFilterFunction, myConceptConceptFunctionParameter_childNode, myConceptConceptFunctionParameter_node, myConceptDescriptionBlock, myConceptErrorIntentionPriority, myConceptExecuteBlock, myConceptForConceptMethodParameter, myConceptIntention, myConceptIntentionDeclaration, myConceptIntentionParameter, myConceptIntentionPriority, myConceptIsApplicableBlock, myConceptParameter, myConceptParameterizedDescriptionBlock, myConceptParameterizedExecuteBlock, myConceptParameterizedIntentionDeclaration, myConceptQueryBlock, myConceptSurroundWithIntentionDeclaration);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.BaseIntentionDeclaration:
        return myConceptBaseIntentionDeclaration;
      case LanguageConceptSwitch.ChildFilterBlock:
        return myConceptChildFilterBlock;
      case LanguageConceptSwitch.ChildFilterFunction:
        return myConceptChildFilterFunction;
      case LanguageConceptSwitch.ConceptFunctionParameter_childNode:
        return myConceptConceptFunctionParameter_childNode;
      case LanguageConceptSwitch.ConceptFunctionParameter_node:
        return myConceptConceptFunctionParameter_node;
      case LanguageConceptSwitch.DescriptionBlock:
        return myConceptDescriptionBlock;
      case LanguageConceptSwitch.ErrorIntentionPriority:
        return myConceptErrorIntentionPriority;
      case LanguageConceptSwitch.ExecuteBlock:
        return myConceptExecuteBlock;
      case LanguageConceptSwitch.ForConceptMethodParameter:
        return myConceptForConceptMethodParameter;
      case LanguageConceptSwitch.Intention:
        return myConceptIntention;
      case LanguageConceptSwitch.IntentionDeclaration:
        return myConceptIntentionDeclaration;
      case LanguageConceptSwitch.IntentionParameter:
        return myConceptIntentionParameter;
      case LanguageConceptSwitch.IntentionPriority:
        return myConceptIntentionPriority;
      case LanguageConceptSwitch.IsApplicableBlock:
        return myConceptIsApplicableBlock;
      case LanguageConceptSwitch.Parameter:
        return myConceptParameter;
      case LanguageConceptSwitch.ParameterizedDescriptionBlock:
        return myConceptParameterizedDescriptionBlock;
      case LanguageConceptSwitch.ParameterizedExecuteBlock:
        return myConceptParameterizedExecuteBlock;
      case LanguageConceptSwitch.ParameterizedIntentionDeclaration:
        return myConceptParameterizedIntentionDeclaration;
      case LanguageConceptSwitch.QueryBlock:
        return myConceptQueryBlock;
      case LanguageConceptSwitch.SurroundWithIntentionDeclaration:
        return myConceptSurroundWithIntentionDeclaration;
      default:
        return null;
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForBaseIntentionDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "BaseIntentionDeclaration", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x2303633a9c3cc675L);
    b.class_(false, false, false);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL);
    b.parent(0xfe9d76d7580945c9L, 0xae28a40915b4d6ffL, 0x433c3c31e7218f38L);
    b.parent(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x24614259e94f0c84L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x12509ddfaa98f128L);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/2522969319638091381");
    b.version(2);
    b.prop("isErrorIntention", 0x2303633a9c3cc679L, "2522969319638091385");
    b.prop("isAvailableInChildNodes", 0x2303633a9c3cc67aL, "2522969319638091386");
    b.associate("forConcept", 0x2303633a9c3e6812L).target(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL).optional(false).origin("2522969319638198290").done();
    b.aggregate("descriptionFunction", 0x2303633a9c3cd0a9L).target(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b81bfaa7L).optional(false).ordered(true).multiple(false).origin("2522969319638093993").done();
    b.aggregate("childFilterFunction", 0x2303633a9c3cd0aaL).target(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x323731f511d1c198L).optional(true).ordered(true).multiple(false).origin("2522969319638093994").done();
    b.aggregate("isApplicableFunction", 0x2303633a9c3cd0abL).target(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b82b10f5L).optional(true).ordered(true).multiple(false).origin("2522969319638093995").done();
    b.aggregate("executeFunction", 0x2303633a9c3e6813L).target(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b82d36d9L).optional(false).ordered(true).multiple(false).origin("2522969319638198291").done();
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForChildFilterBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "ChildFilterBlock", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x323731f511d1c198L);
    b.interface_();
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/3618415754251190680");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForChildFilterFunction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "ChildFilterFunction", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x323731f511d1c1bbL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunction", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L);
    b.parent(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x323731f511d1c198L);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/3618415754251190715");
    b.version(2);
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    b.alias("child filter function");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_childNode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "ConceptFunctionParameter_childNode", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x323731f511d1c750L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/3618415754251192144");
    b.version(2);
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("childNode");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_node() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "ConceptFunctionParameter_node", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b83c562eL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/1192796902958");
    b.version(2);
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("node");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDescriptionBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "DescriptionBlock", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b81bfaa7L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunction", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/1192794782375");
    b.version(2);
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    b.alias("description");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForErrorIntentionPriority() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "ErrorIntentionPriority", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x59427edd75744615L);
    b.class_(false, false, false);
    b.parent(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x59427edd75744617L);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/6431842707461916181");
    b.version(2);
    b.alias("error");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExecuteBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "ExecuteBlock", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b82d36d9L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunction", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/1192795911897");
    b.version(2);
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    b.alias("execute");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForForConceptMethodParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "ForConceptMethodParameter", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x44d08b803f255effL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ParameterDeclaration", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/4958616572666404607");
    b.version(2);
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntention() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "Intention", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x71ffad1474b12a0bL);
    b.class_(false, false, true);
    b.super_("jetbrains.mps.baseLanguage.structure.ClassConcept", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L);
    b.parent(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0xea740fb893a13edL);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/8214474548715792907");
    b.version(2);
    b.associate("forConcept", 0x10d005a50b96761L).target(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL).optional(false).origin("75717156636551009").done();
    b.aggregate("priority", 0x59427edd75744671L).target(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x59427edd75744615L).optional(true).ordered(true).multiple(false).origin("6431842707461916273").done();
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    b.alias("Universal Intention");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntentionDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "IntentionDeclaration", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b81b652bL);
    b.class_(false, false, true);
    b.super_("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x2303633a9c3cc675L);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/1192794744107");
    b.version(2);
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    b.alias("Intention");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntentionParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "IntentionParameter", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x120c8fd57fbL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/1240322627579");
    b.version(2);
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("parameter");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntentionPriority() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "IntentionPriority", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x59427edd75744617L);
    b.interface_();
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/6431842707461916183");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIsApplicableBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "IsApplicableBlock", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b82b10f5L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunction", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/1192795771125");
    b.version(2);
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    b.alias("isApplicable");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "Parameter", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x6688b42d39674b7aL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL);
    b.parent(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x59e9926e840d9179L);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/7388353295030897530");
    b.version(2);
    b.aggregate("parameterType", 0x6688b42d39674f90L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL).optional(false).ordered(true).multiple(false).origin("7388353295030898576").done();
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParameterizedDescriptionBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "ParameterizedDescriptionBlock", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x1925e8184af03861L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.intentions.structure.DescriptionBlock", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b81bfaa7L);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/1812109616120608865");
    b.version(2);
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    b.alias("description");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParameterizedExecuteBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "ParameterizedExecuteBlock", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x1925e8184af310edL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.intentions.structure.ExecuteBlock", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b82d36d9L);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/1812109616120795373");
    b.version(2);
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    b.alias("execute");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParameterizedIntentionDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "ParameterizedIntentionDeclaration", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x120cd519c2dL);
    b.class_(false, false, true);
    b.super_("jetbrains.mps.lang.intentions.structure.IntentionDeclaration", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b81b652bL);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/1240395258925");
    b.version(2);
    b.aggregate("queryBlock", 0x120cd55c89bL).target(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x120c89cc719L).optional(true).ordered(true).multiple(false).origin("1240395532443").done();
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    b.alias("Parameterized Intention");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForQueryBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "QueryBlock", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x120c89cc719L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunction", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/1240316299033");
    b.version(2);
    b.aggregate("paramType", 0x120cd3676eeL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL).optional(true).ordered(true).multiple(false).origin("1240393479918").done();
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    b.alias("parameter");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSurroundWithIntentionDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.intentions", "SurroundWithIntentionDeclaration", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x2303633a9c3e6815L);
    b.class_(false, false, true);
    b.super_("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration", 0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x2303633a9c3cc675L);
    b.origin("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)/2522969319638198293");
    b.version(2);
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    b.alias("Surround-With Intention");
    return b.create();
  }
}
