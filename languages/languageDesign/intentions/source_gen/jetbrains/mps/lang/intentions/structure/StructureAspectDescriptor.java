package jetbrains.mps.lang.intentions.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(20);
  /*package*/ final ConceptDescriptor myConceptBaseIntentionDeclaration = createDescriptorForBaseIntentionDeclaration();
  /*package*/ final ConceptDescriptor myConceptChildFilterBlock = createDescriptorForChildFilterBlock();
  /*package*/ final ConceptDescriptor myConceptChildFilterFunction = createDescriptorForChildFilterFunction();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_childNode = createDescriptorForConceptFunctionParameter_childNode();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_node = createDescriptorForConceptFunctionParameter_node();
  /*package*/ final ConceptDescriptor myConceptDescriptionBlock = createDescriptorForDescriptionBlock();
  /*package*/ final ConceptDescriptor myConceptErrorIntentionPriority = createDescriptorForErrorIntentionPriority();
  /*package*/ final ConceptDescriptor myConceptExecuteBlock = createDescriptorForExecuteBlock();
  /*package*/ final ConceptDescriptor myConceptForConceptMethodParameter = createDescriptorForForConceptMethodParameter();
  /*package*/ final ConceptDescriptor myConceptIntention = createDescriptorForIntention();
  /*package*/ final ConceptDescriptor myConceptIntentionDeclaration = createDescriptorForIntentionDeclaration();
  /*package*/ final ConceptDescriptor myConceptIntentionParameter = createDescriptorForIntentionParameter();
  /*package*/ final ConceptDescriptor myConceptIntentionPriority = createDescriptorForIntentionPriority();
  /*package*/ final ConceptDescriptor myConceptIsApplicableBlock = createDescriptorForIsApplicableBlock();
  /*package*/ final ConceptDescriptor myConceptParameter = createDescriptorForParameter();
  /*package*/ final ConceptDescriptor myConceptParameterizedDescriptionBlock = createDescriptorForParameterizedDescriptionBlock();
  /*package*/ final ConceptDescriptor myConceptParameterizedExecuteBlock = createDescriptorForParameterizedExecuteBlock();
  /*package*/ final ConceptDescriptor myConceptParameterizedIntentionDeclaration = createDescriptorForParameterizedIntentionDeclaration();
  /*package*/ final ConceptDescriptor myConceptQueryBlock = createDescriptorForQueryBlock();
  /*package*/ final ConceptDescriptor myConceptSurroundWithIntentionDeclaration = createDescriptorForSurroundWithIntentionDeclaration();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptBaseIntentionDeclaration.getId(), 0);
    myIndexMap.put(myConceptChildFilterBlock.getId(), 1);
    myIndexMap.put(myConceptChildFilterFunction.getId(), 2);
    myIndexMap.put(myConceptConceptFunctionParameter_childNode.getId(), 3);
    myIndexMap.put(myConceptConceptFunctionParameter_node.getId(), 4);
    myIndexMap.put(myConceptDescriptionBlock.getId(), 5);
    myIndexMap.put(myConceptErrorIntentionPriority.getId(), 6);
    myIndexMap.put(myConceptExecuteBlock.getId(), 7);
    myIndexMap.put(myConceptForConceptMethodParameter.getId(), 8);
    myIndexMap.put(myConceptIntention.getId(), 9);
    myIndexMap.put(myConceptIntentionDeclaration.getId(), 10);
    myIndexMap.put(myConceptIntentionParameter.getId(), 11);
    myIndexMap.put(myConceptIntentionPriority.getId(), 12);
    myIndexMap.put(myConceptIsApplicableBlock.getId(), 13);
    myIndexMap.put(myConceptParameter.getId(), 14);
    myIndexMap.put(myConceptParameterizedDescriptionBlock.getId(), 15);
    myIndexMap.put(myConceptParameterizedExecuteBlock.getId(), 16);
    myIndexMap.put(myConceptParameterizedIntentionDeclaration.getId(), 17);
    myIndexMap.put(myConceptQueryBlock.getId(), 18);
    myIndexMap.put(myConceptSurroundWithIntentionDeclaration.getId(), 19);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptBaseIntentionDeclaration, myConceptChildFilterBlock, myConceptChildFilterFunction, myConceptConceptFunctionParameter_childNode, myConceptConceptFunctionParameter_node, myConceptDescriptionBlock, myConceptErrorIntentionPriority, myConceptExecuteBlock, myConceptForConceptMethodParameter, myConceptIntention, myConceptIntentionDeclaration, myConceptIntentionParameter, myConceptIntentionPriority, myConceptIsApplicableBlock, myConceptParameter, myConceptParameterizedDescriptionBlock, myConceptParameterizedExecuteBlock, myConceptParameterizedIntentionDeclaration, myConceptQueryBlock, myConceptSurroundWithIntentionDeclaration);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptBaseIntentionDeclaration;
      case 1:
        return myConceptChildFilterBlock;
      case 2:
        return myConceptChildFilterFunction;
      case 3:
        return myConceptConceptFunctionParameter_childNode;
      case 4:
        return myConceptConceptFunctionParameter_node;
      case 5:
        return myConceptDescriptionBlock;
      case 6:
        return myConceptErrorIntentionPriority;
      case 7:
        return myConceptExecuteBlock;
      case 8:
        return myConceptForConceptMethodParameter;
      case 9:
        return myConceptIntention;
      case 10:
        return myConceptIntentionDeclaration;
      case 11:
        return myConceptIntentionParameter;
      case 12:
        return myConceptIntentionPriority;
      case 13:
        return myConceptIsApplicableBlock;
      case 14:
        return myConceptParameter;
      case 15:
        return myConceptParameterizedDescriptionBlock;
      case 16:
        return myConceptParameterizedExecuteBlock;
      case 17:
        return myConceptParameterizedIntentionDeclaration;
      case 18:
        return myConceptQueryBlock;
      case 19:
        return myConceptSurroundWithIntentionDeclaration;
      default:
        throw new IllegalStateException();
    }
  }

  private static ConceptDescriptor createDescriptorForBaseIntentionDeclaration() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x2303633a9c3cc675L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.lang.checkedName.structure.ICheckedNamePolicy", "jetbrains.mps.lang.structure.structure.IConceptAspect", "jetbrains.mps.lang.core.structure.InterfacePart").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL), MetaIdFactory.conceptId(0xfe9d76d7580945c9L, 0xae28a40915b4d6ffL, 0x433c3c31e7218f38L), MetaIdFactory.conceptId(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x24614259e94f0c84L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x12509ddfaa98f128L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x2303633a9c3cc679L, "isErrorIntention", new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "2522969319638091385")), new ConceptDescriptorBuilder.Prop(0x2303633a9c3cc67aL, "isAvailableInChildNodes", new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "2522969319638091386"))).properties("isErrorIntention", "isAvailableInChildNodes").referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x2303633a9c3e6812L, "forConcept", MetaIdFactory.conceptId(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL), false, new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "2522969319638198290"))).references("forConcept").childDescriptors(new ConceptDescriptorBuilder.Link(0x2303633a9c3cd0a9L, "descriptionFunction", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b81bfaa7L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "2522969319638093993")), new ConceptDescriptorBuilder.Link(0x2303633a9c3cd0aaL, "childFilterFunction", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x323731f511d1c198L), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "2522969319638093994")), new ConceptDescriptorBuilder.Link(0x2303633a9c3cd0abL, "isApplicableFunction", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b82b10f5L), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "2522969319638093995")), new ConceptDescriptorBuilder.Link(0x2303633a9c3e6813L, "executeFunction", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b82d36d9L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "2522969319638198291"))).children(new String[]{"descriptionFunction", "childFilterFunction", "isApplicableFunction", "executeFunction"}, new boolean[]{false, false, false, false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "2522969319638091381")).create();
  }
  private static ConceptDescriptor createDescriptorForChildFilterBlock() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ChildFilterBlock", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x323731f511d1c198L)).version(1).interface_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "3618415754251190680")).create();
  }
  private static ConceptDescriptor createDescriptorForChildFilterFunction() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ChildFilterFunction", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x323731f511d1c1bbL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction", "jetbrains.mps.lang.intentions.structure.ChildFilterBlock").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L), MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x323731f511d1c198L)).alias("child filter function", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "3618415754251190715")).create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_childNode() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ConceptFunctionParameter_childNode", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x323731f511d1c750L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("childNode", "function parameter").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "3618415754251192144")).create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_node() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ConceptFunctionParameter_node", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b83c562eL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("node", "function parameter").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "1192796902958")).create();
  }
  private static ConceptDescriptor createDescriptorForDescriptionBlock() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.DescriptionBlock", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b81bfaa7L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).alias("description", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "1192794782375")).create();
  }
  private static ConceptDescriptor createDescriptorForErrorIntentionPriority() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ErrorIntentionPriority", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x59427edd75744615L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.intentions.structure.IntentionPriority").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x59427edd75744617L)).alias("error", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "6431842707461916181")).create();
  }
  private static ConceptDescriptor createDescriptorForExecuteBlock() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ExecuteBlock", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b82d36d9L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).alias("execute", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "1192795911897")).create();
  }
  private static ConceptDescriptor createDescriptorForForConceptMethodParameter() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ForConceptMethodParameter", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x44d08b803f255effL)).super_("jetbrains.mps.baseLanguage.structure.ParameterDeclaration").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L)).parents("jetbrains.mps.baseLanguage.structure.ParameterDeclaration").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c77f1e94L)).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "4958616572666404607")).create();
  }
  private static ConceptDescriptor createDescriptorForIntention() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.Intention", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x71ffad1474b12a0bL)).super_("jetbrains.mps.baseLanguage.structure.ClassConcept").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L)).parents("jetbrains.mps.baseLanguage.structure.ClassConcept", "jetbrains.mps.baseLanguage.lightweightdsl.structure.AutoInitDSLClass", "jetbrains.mps.baseLanguage.structure.IValidIdentifier").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L), MetaIdFactory.conceptId(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0xea740fb893a13edL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x10d005a50b96761L, "forConcept", MetaIdFactory.conceptId(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL), false, new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "75717156636551009"))).references("forConcept").childDescriptors(new ConceptDescriptorBuilder.Link(0x59427edd75744671L, "priority", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x59427edd75744615L), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "6431842707461916273"))).children(new String[]{"priority"}, new boolean[]{false}).rootable().alias("Universal Intention", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "8214474548715792907")).create();
  }
  private static ConceptDescriptor createDescriptorForIntentionDeclaration() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.IntentionDeclaration", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b81b652bL)).super_("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration").version(1).super_(MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x2303633a9c3cc675L)).parents("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration").parentIds(MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x2303633a9c3cc675L)).rootable().alias("Intention", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "1192794744107")).create();
  }
  private static ConceptDescriptor createDescriptorForIntentionParameter() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.IntentionParameter", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x120c8fd57fbL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("parameter", "intention parameter").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "1240322627579")).create();
  }
  private static ConceptDescriptor createDescriptorForIntentionPriority() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.IntentionPriority", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x59427edd75744617L)).version(1).interface_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "6431842707461916183")).create();
  }
  private static ConceptDescriptor createDescriptorForIsApplicableBlock() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.IsApplicableBlock", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b82b10f5L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).alias("isApplicable", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "1192795771125")).create();
  }
  private static ConceptDescriptor createDescriptorForParameter() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.Parameter", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x6688b42d39674b7aL)).super_("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL)).parents("jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration", "jetbrains.mps.baseLanguage.lightweightdsl.structure.MemberInstance").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL), MetaIdFactory.conceptId(0xc7d5b9dda05f4be2L, 0xbc73f2e16994cc67L, 0x59e9926e840d9179L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x6688b42d39674f90L, "parameterType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "7388353295030898576"))).children(new String[]{"parameterType"}, new boolean[]{false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "7388353295030897530")).create();
  }
  private static ConceptDescriptor createDescriptorForParameterizedDescriptionBlock() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ParameterizedDescriptionBlock", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x1925e8184af03861L)).super_("jetbrains.mps.lang.intentions.structure.DescriptionBlock").version(1).super_(MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b81bfaa7L)).parents("jetbrains.mps.lang.intentions.structure.DescriptionBlock").parentIds(MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b81bfaa7L)).alias("description", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "1812109616120608865")).create();
  }
  private static ConceptDescriptor createDescriptorForParameterizedExecuteBlock() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ParameterizedExecuteBlock", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x1925e8184af310edL)).super_("jetbrains.mps.lang.intentions.structure.ExecuteBlock").version(1).super_(MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b82d36d9L)).parents("jetbrains.mps.lang.intentions.structure.ExecuteBlock").parentIds(MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b82d36d9L)).alias("execute", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "1812109616120795373")).create();
  }
  private static ConceptDescriptor createDescriptorForParameterizedIntentionDeclaration() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.ParameterizedIntentionDeclaration", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x120cd519c2dL)).super_("jetbrains.mps.lang.intentions.structure.IntentionDeclaration").version(1).super_(MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b81b652bL)).parents("jetbrains.mps.lang.intentions.structure.IntentionDeclaration").parentIds(MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x115b81b652bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x120cd55c89bL, "queryBlock", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x120c89cc719L), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "1240395532443"))).children(new String[]{"queryBlock"}, new boolean[]{false}).rootable().alias("Parameterized Intention", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "1240395258925")).create();
  }
  private static ConceptDescriptor createDescriptorForQueryBlock() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.QueryBlock", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x120c89cc719L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x120cd3676eeL, "paramType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "1240393479918"))).children(new String[]{"paramType"}, new boolean[]{false}).alias("parameter", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "1240316299033")).create();
  }
  private static ConceptDescriptor createDescriptorForSurroundWithIntentionDeclaration() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.intentions.structure.SurroundWithIntentionDeclaration", MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x2303633a9c3e6815L)).super_("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration").version(1).super_(MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x2303633a9c3cc675L)).parents("jetbrains.mps.lang.intentions.structure.BaseIntentionDeclaration").parentIds(MetaIdFactory.conceptId(0xd7a92d38f7db40d0L, 0x8431763b0c3c9f20L, 0x2303633a9c3cc675L)).rootable().alias("Surround-With Intention", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590353(jetbrains.mps.lang.intentions.structure)", "2522969319638198293")).create();
  }
}
