package jetbrains.mps.lang.extension.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_Extension = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExtensionDeclaration = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_ExtensionFieldDeclaration = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_ExtensionFieldReference = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_ExtensionFunction = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_ExtensionObjectGetter = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_ExtensionPointDeclaration = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getProperty(0xc0080a477e374558L, 0xbee99ae18e690549L, 0x33c018482cafa9d6L, 0x520ae19dd2771b96L, "extensionName")).create();
  private final AdditionalConceptProperties props_ExtensionPointExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExtensionPointType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_GetExtensionObjectsOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IRootWithUniqueName = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0m.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_Extension;
          }
          break;
        case 1:
          if (true) {
            return props_ExtensionDeclaration;
          }
          break;
        case 2:
          if (true) {
            return props_ExtensionFieldDeclaration;
          }
          break;
        case 3:
          if (true) {
            return props_ExtensionFieldReference;
          }
          break;
        case 4:
          if (true) {
            return props_ExtensionFunction;
          }
          break;
        case 5:
          if (true) {
            return props_ExtensionObjectGetter;
          }
          break;
        case 6:
          if (true) {
            return props_ExtensionPointDeclaration;
          }
          break;
        case 7:
          if (true) {
            return props_ExtensionPointExpression;
          }
          break;
        case 8:
          if (true) {
            return props_ExtensionPointType;
          }
          break;
        case 9:
          if (true) {
            return props_GetExtensionObjectsOperation;
          }
          break;
        case 10:
          if (true) {
            return props_IRootWithUniqueName;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0m = buildConceptIndices(MetaAdapterFactory.getConcept(0xc0080a477e374558L, 0xbee99ae18e690549L, 0x1c30c5b543be3b2L, "Extension"), MetaAdapterFactory.getConcept(0xc0080a477e374558L, 0xbee99ae18e690549L, 0x33c018482cafa9d4L, "ExtensionDeclaration"), MetaAdapterFactory.getConcept(0xc0080a477e374558L, 0xbee99ae18e690549L, 0x61a62b43e1534e99L, "ExtensionFieldDeclaration"), MetaAdapterFactory.getConcept(0xc0080a477e374558L, 0xbee99ae18e690549L, 0x61a62b43e1534e9eL, "ExtensionFieldReference"), MetaAdapterFactory.getConcept(0xc0080a477e374558L, 0xbee99ae18e690549L, 0x61a62b43e15253efL, "ExtensionFunction"), MetaAdapterFactory.getConcept(0xc0080a477e374558L, 0xbee99ae18e690549L, 0x6f6f7f3b7a178565L, "ExtensionObjectGetter"), MetaAdapterFactory.getConcept(0xc0080a477e374558L, 0xbee99ae18e690549L, 0x33c018482cafa9d6L, "ExtensionPointDeclaration"), MetaAdapterFactory.getConcept(0xc0080a477e374558L, 0xbee99ae18e690549L, 0x5bf74eafefe0e940L, "ExtensionPointExpression"), MetaAdapterFactory.getConcept(0xc0080a477e374558L, 0xbee99ae18e690549L, 0x2c10fa62142eb538L, "ExtensionPointType"), MetaAdapterFactory.getConcept(0xc0080a477e374558L, 0xbee99ae18e690549L, 0x2c10fa62142ef747L, "GetExtensionObjectsOperation"), MetaAdapterFactory.getInterfaceConcept(0xc0080a477e374558L, 0xbee99ae18e690549L, 0x2b7651d49ee9d72L, "IRootWithUniqueName"));
}
