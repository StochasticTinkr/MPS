package jetbrains.mps.lang.typesystem.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.attribute.AttributeKind;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;

public class OriginalNodeId_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_c52lpr_a(editorContext, node);
  }
  public EditorCell createInspectedCell(EditorContext editorContext, SNode node) {
    return this.createCollection_c52lpr_a_0(editorContext, node);
  }
  private EditorCell createCollection_c52lpr_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_c52lpr_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_c52lpr_a0(editorContext, node));
    editorCell.addEditorCell(this.createAttributedNodeCell_c52lpr_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_c52lpr_c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_c52lpr_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "id[");
    editorCell.setCellId("Constant_c52lpr_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createAttributedNodeCell_c52lpr_b0(EditorContext editorContext, SNode node) {
    EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
    EditorCell editorCell = manager.getCurrentAttributedCellWithRole(AttributeKind.Node.class, node);
    return editorCell;
  }
  private EditorCell createConstant_c52lpr_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "]");
    editorCell.setCellId("Constant_c52lpr_c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_c52lpr_a_0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_c52lpr_a_0");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_c52lpr_a0_0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_c52lpr_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_c52lpr_c0_0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_c52lpr_d0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_c52lpr_e0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_c52lpr_a0_0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "model");
    editorCell.setCellId("Constant_c52lpr_a0_0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_c52lpr_b0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("modelId");
    provider.setNoTargetText("<no modelId>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_modelId");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_c52lpr_c0_0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ":");
    editorCell.setCellId("Constant_c52lpr_c0_0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_c52lpr_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "node");
    editorCell.setCellId("Constant_c52lpr_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_c52lpr_e0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("nodeId");
    provider.setNoTargetText("<no nodeId>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_nodeId");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
}
