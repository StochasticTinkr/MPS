package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(121);
  /*package*/ final ConceptDescriptor myConceptAbstractCheckingRule = createDescriptorForAbstractCheckingRule();
  /*package*/ final ConceptDescriptor myConceptAbstractComparableStatement = createDescriptorForAbstractComparableStatement();
  /*package*/ final ConceptDescriptor myConceptAbstractEquationStatement = createDescriptorForAbstractEquationStatement();
  /*package*/ final ConceptDescriptor myConceptAbstractInequationStatement = createDescriptorForAbstractInequationStatement();
  /*package*/ final ConceptDescriptor myConceptAbstractOverloadedOpsTypeRule = createDescriptorForAbstractOverloadedOpsTypeRule();
  /*package*/ final ConceptDescriptor myConceptAbstractRule = createDescriptorForAbstractRule();
  /*package*/ final ConceptDescriptor myConceptAbstractSubtypingRule = createDescriptorForAbstractSubtypingRule();
  /*package*/ final ConceptDescriptor myConceptAddDependencyStatement = createDescriptorForAddDependencyStatement();
  /*package*/ final ConceptDescriptor myConceptApplicableNodeCondition = createDescriptorForApplicableNodeCondition();
  /*package*/ final ConceptDescriptor myConceptApplicableNodeReference = createDescriptorForApplicableNodeReference();
  /*package*/ final ConceptDescriptor myConceptAssertStatement = createDescriptorForAssertStatement();
  /*package*/ final ConceptDescriptor myConceptAttributedNodeExpression = createDescriptorForAttributedNodeExpression();
  /*package*/ final ConceptDescriptor myConceptCaretPositionOperation = createDescriptorForCaretPositionOperation();
  /*package*/ final ConceptDescriptor myConceptCoerceExpression = createDescriptorForCoerceExpression();
  /*package*/ final ConceptDescriptor myConceptCoerceStatement = createDescriptorForCoerceStatement();
  /*package*/ final ConceptDescriptor myConceptCoerceStrongExpression = createDescriptorForCoerceStrongExpression();
  /*package*/ final ConceptDescriptor myConceptComparisonRule = createDescriptorForComparisonRule();
  /*package*/ final ConceptDescriptor myConceptConceptClauseLinkInfo = createDescriptorForConceptClauseLinkInfo();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_ContextNode = createDescriptorForConceptFunctionParameter_ContextNode();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_EditorContext = createDescriptorForConceptFunctionParameter_EditorContext();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_Role = createDescriptorForConceptFunctionParameter_Role();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_Selection = createDescriptorForConceptFunctionParameter_Selection();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_isAggregation = createDescriptorForConceptFunctionParameter_isAggregation();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_node = createDescriptorForConceptFunctionParameter_node();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_var = createDescriptorForConceptFunctionParameter_var();
  /*package*/ final ConceptDescriptor myConceptConceptReference = createDescriptorForConceptReference();
  /*package*/ final ConceptDescriptor myConceptCreateComparableEquationStatement = createDescriptorForCreateComparableEquationStatement();
  /*package*/ final ConceptDescriptor myConceptCreateComparableEquationStatementStrong = createDescriptorForCreateComparableEquationStatementStrong();
  /*package*/ final ConceptDescriptor myConceptCreateEquationStatement = createDescriptorForCreateEquationStatement();
  /*package*/ final ConceptDescriptor myConceptCreateGreaterThanInequationStatement = createDescriptorForCreateGreaterThanInequationStatement();
  /*package*/ final ConceptDescriptor myConceptCreateLessThanInequationStatement = createDescriptorForCreateLessThanInequationStatement();
  /*package*/ final ConceptDescriptor myConceptCreateStrongGreaterThanInequationStatement = createDescriptorForCreateStrongGreaterThanInequationStatement();
  /*package*/ final ConceptDescriptor myConceptCreateStrongLessThanInequationStatement = createDescriptorForCreateStrongLessThanInequationStatement();
  /*package*/ final ConceptDescriptor myConceptDefaultGroupReference = createDescriptorForDefaultGroupReference();
  /*package*/ final ConceptDescriptor myConceptErrorInfoExpression = createDescriptorForErrorInfoExpression();
  /*package*/ final ConceptDescriptor myConceptGetOperationType = createDescriptorForGetOperationType();
  /*package*/ final ConceptDescriptor myConceptIRuleWithOneNode = createDescriptorForIRuleWithOneNode();
  /*package*/ final ConceptDescriptor myConceptIRuleWithTwoNodes = createDescriptorForIRuleWithTwoNodes();
  /*package*/ final ConceptDescriptor myConceptImmediateSupertypesExpression = createDescriptorForImmediateSupertypesExpression();
  /*package*/ final ConceptDescriptor myConceptInequationReference = createDescriptorForInequationReference();
  /*package*/ final ConceptDescriptor myConceptInequationReplacementRule = createDescriptorForInequationReplacementRule();
  /*package*/ final ConceptDescriptor myConceptInferenceRule = createDescriptorForInferenceRule();
  /*package*/ final ConceptDescriptor myConceptInfoStatement = createDescriptorForInfoStatement();
  /*package*/ final ConceptDescriptor myConceptInfoStatementAnnotation = createDescriptorForInfoStatementAnnotation();
  /*package*/ final ConceptDescriptor myConceptIsApplicableConceptFunction = createDescriptorForIsApplicableConceptFunction();
  /*package*/ final ConceptDescriptor myConceptIsReplacementRuleApplicable_ConceptFunction = createDescriptorForIsReplacementRuleApplicable_ConceptFunction();
  /*package*/ final ConceptDescriptor myConceptIsStrongSubtypeExpression = createDescriptorForIsStrongSubtypeExpression();
  /*package*/ final ConceptDescriptor myConceptIsSubtypeExpression = createDescriptorForIsSubtypeExpression();
  /*package*/ final ConceptDescriptor myConceptJoinContainer = createDescriptorForJoinContainer();
  /*package*/ final ConceptDescriptor myConceptJoinType = createDescriptorForJoinType();
  /*package*/ final ConceptDescriptor myConceptLeftOperandType_parameter = createDescriptorForLeftOperandType_parameter();
  /*package*/ final ConceptDescriptor myConceptLinkPatternVariableReference = createDescriptorForLinkPatternVariableReference();
  /*package*/ final ConceptDescriptor myConceptMatchStatement = createDescriptorForMatchStatement();
  /*package*/ final ConceptDescriptor myConceptMatchStatementItem = createDescriptorForMatchStatementItem();
  /*package*/ final ConceptDescriptor myConceptMeetContainer = createDescriptorForMeetContainer();
  /*package*/ final ConceptDescriptor myConceptMeetType = createDescriptorForMeetType();
  /*package*/ final ConceptDescriptor myConceptMessageStatement = createDescriptorForMessageStatement();
  /*package*/ final ConceptDescriptor myConceptMessageStatementAnnotation = createDescriptorForMessageStatementAnnotation();
  /*package*/ final ConceptDescriptor myConceptMessageTarget = createDescriptorForMessageTarget();
  /*package*/ final ConceptDescriptor myConceptMultipleForeachLoop = createDescriptorForMultipleForeachLoop();
  /*package*/ final ConceptDescriptor myConceptMultipleForeachLoopVariable = createDescriptorForMultipleForeachLoopVariable();
  /*package*/ final ConceptDescriptor myConceptNodeInfo = createDescriptorForNodeInfo();
  /*package*/ final ConceptDescriptor myConceptNode_InferTypeOperation = createDescriptorForNode_InferTypeOperation();
  /*package*/ final ConceptDescriptor myConceptNode_TypeOperation = createDescriptorForNode_TypeOperation();
  /*package*/ final ConceptDescriptor myConceptNonTypesystemRule = createDescriptorForNonTypesystemRule();
  /*package*/ final ConceptDescriptor myConceptNormalTypeClause = createDescriptorForNormalTypeClause();
  /*package*/ final ConceptDescriptor myConceptOperation_parameter = createDescriptorForOperation_parameter();
  /*package*/ final ConceptDescriptor myConceptOrStatement = createDescriptorForOrStatement();
  /*package*/ final ConceptDescriptor myConceptOriginalNodeId = createDescriptorForOriginalNodeId();
  /*package*/ final ConceptDescriptor myConceptOverloadedOpIsApplicableFunction = createDescriptorForOverloadedOpIsApplicableFunction();
  /*package*/ final ConceptDescriptor myConceptOverloadedOpRulesContainer = createDescriptorForOverloadedOpRulesContainer();
  /*package*/ final ConceptDescriptor myConceptOverloadedOpTypeRule_OneTypeSpecified = createDescriptorForOverloadedOpTypeRule_OneTypeSpecified();
  /*package*/ final ConceptDescriptor myConceptOverloadedOperatorTypeFunction = createDescriptorForOverloadedOperatorTypeFunction();
  /*package*/ final ConceptDescriptor myConceptOverloadedOperatorTypeRule = createDescriptorForOverloadedOperatorTypeRule();
  /*package*/ final ConceptDescriptor myConceptOverridesConceptFunction = createDescriptorForOverridesConceptFunction();
  /*package*/ final ConceptDescriptor myConceptPatternCondition = createDescriptorForPatternCondition();
  /*package*/ final ConceptDescriptor myConceptPatternVariableReference = createDescriptorForPatternVariableReference();
  /*package*/ final ConceptDescriptor myConceptPrintToTrace = createDescriptorForPrintToTrace();
  /*package*/ final ConceptDescriptor myConceptProcessed = createDescriptorForProcessed();
  /*package*/ final ConceptDescriptor myConceptPropertyMessageTarget = createDescriptorForPropertyMessageTarget();
  /*package*/ final ConceptDescriptor myConceptPropertyNameTarget = createDescriptorForPropertyNameTarget();
  /*package*/ final ConceptDescriptor myConceptPropertyPatternVariableReference = createDescriptorForPropertyPatternVariableReference();
  /*package*/ final ConceptDescriptor myConceptQuickFixArgument = createDescriptorForQuickFixArgument();
  /*package*/ final ConceptDescriptor myConceptQuickFixArgumentReference = createDescriptorForQuickFixArgumentReference();
  /*package*/ final ConceptDescriptor myConceptQuickFixDescriptionBlock = createDescriptorForQuickFixDescriptionBlock();
  /*package*/ final ConceptDescriptor myConceptQuickFixExecuteBlock = createDescriptorForQuickFixExecuteBlock();
  /*package*/ final ConceptDescriptor myConceptQuickFixField = createDescriptorForQuickFixField();
  /*package*/ final ConceptDescriptor myConceptQuickFixFieldReference = createDescriptorForQuickFixFieldReference();
  /*package*/ final ConceptDescriptor myConceptQuickFixSetSelectionBlock = createDescriptorForQuickFixSetSelectionBlock();
  /*package*/ final ConceptDescriptor myConceptReferenceMessageTarget = createDescriptorForReferenceMessageTarget();
  /*package*/ final ConceptDescriptor myConceptReferenceRoleTarget = createDescriptorForReferenceRoleTarget();
  /*package*/ final ConceptDescriptor myConceptReplacementRuleReference = createDescriptorForReplacementRuleReference();
  /*package*/ final ConceptDescriptor myConceptReportErrorStatement = createDescriptorForReportErrorStatement();
  /*package*/ final ConceptDescriptor myConceptReportErrorStatementAnnotation = createDescriptorForReportErrorStatementAnnotation();
  /*package*/ final ConceptDescriptor myConceptRightOperandType_parameter = createDescriptorForRightOperandType_parameter();
  /*package*/ final ConceptDescriptor myConceptRuntimeErrorType = createDescriptorForRuntimeErrorType();
  /*package*/ final ConceptDescriptor myConceptRuntimeHoleType = createDescriptorForRuntimeHoleType();
  /*package*/ final ConceptDescriptor myConceptRuntimeListVariable = createDescriptorForRuntimeListVariable();
  /*package*/ final ConceptDescriptor myConceptRuntimeTypeVariable = createDescriptorForRuntimeTypeVariable();
  /*package*/ final ConceptDescriptor myConceptSelectionType = createDescriptorForSelectionType();
  /*package*/ final ConceptDescriptor myConceptSubstituteTypeRule = createDescriptorForSubstituteTypeRule();
  /*package*/ final ConceptDescriptor myConceptSubtypingRule = createDescriptorForSubtypingRule();
  /*package*/ final ConceptDescriptor myConceptSupersedeConceptFunction = createDescriptorForSupersedeConceptFunction();
  /*package*/ final ConceptDescriptor myConceptTypeCheckerAccessExpression = createDescriptorForTypeCheckerAccessExpression();
  /*package*/ final ConceptDescriptor myConceptTypeClause = createDescriptorForTypeClause();
  /*package*/ final ConceptDescriptor myConceptTypeOfExpression = createDescriptorForTypeOfExpression();
  /*package*/ final ConceptDescriptor myConceptTypeVarDeclaration = createDescriptorForTypeVarDeclaration();
  /*package*/ final ConceptDescriptor myConceptTypeVarReference = createDescriptorForTypeVarReference();
  /*package*/ final ConceptDescriptor myConceptTypesystemIntention = createDescriptorForTypesystemIntention();
  /*package*/ final ConceptDescriptor myConceptTypesystemIntentionArgument = createDescriptorForTypesystemIntentionArgument();
  /*package*/ final ConceptDescriptor myConceptTypesystemQuickFix = createDescriptorForTypesystemQuickFix();
  /*package*/ final ConceptDescriptor myConceptVariableConverterItem = createDescriptorForVariableConverterItem();
  /*package*/ final ConceptDescriptor myConceptVariableConverterItem_ApplicableBlock = createDescriptorForVariableConverterItem_ApplicableBlock();
  /*package*/ final ConceptDescriptor myConceptVariableConverterItem_ConvertBlock = createDescriptorForVariableConverterItem_ConvertBlock();
  /*package*/ final ConceptDescriptor myConceptVariableConvertersContainer = createDescriptorForVariableConvertersContainer();
  /*package*/ final ConceptDescriptor myConceptWarningStatement = createDescriptorForWarningStatement();
  /*package*/ final ConceptDescriptor myConceptWarningStatementAnnotation = createDescriptorForWarningStatementAnnotation();
  /*package*/ final ConceptDescriptor myConceptWasSelectedNodeOperation = createDescriptorForWasSelectedNodeOperation();
  /*package*/ final ConceptDescriptor myConceptWhenConcreteStatement = createDescriptorForWhenConcreteStatement();
  /*package*/ final ConceptDescriptor myConceptWhenConcreteVariableDeclaration = createDescriptorForWhenConcreteVariableDeclaration();
  /*package*/ final ConceptDescriptor myConceptWhenConcreteVariableReference = createDescriptorForWhenConcreteVariableReference();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptAbstractCheckingRule.getId(), 0);
    myIndexMap.put(myConceptAbstractComparableStatement.getId(), 1);
    myIndexMap.put(myConceptAbstractEquationStatement.getId(), 2);
    myIndexMap.put(myConceptAbstractInequationStatement.getId(), 3);
    myIndexMap.put(myConceptAbstractOverloadedOpsTypeRule.getId(), 4);
    myIndexMap.put(myConceptAbstractRule.getId(), 5);
    myIndexMap.put(myConceptAbstractSubtypingRule.getId(), 6);
    myIndexMap.put(myConceptAddDependencyStatement.getId(), 7);
    myIndexMap.put(myConceptApplicableNodeCondition.getId(), 8);
    myIndexMap.put(myConceptApplicableNodeReference.getId(), 9);
    myIndexMap.put(myConceptAssertStatement.getId(), 10);
    myIndexMap.put(myConceptAttributedNodeExpression.getId(), 11);
    myIndexMap.put(myConceptCaretPositionOperation.getId(), 12);
    myIndexMap.put(myConceptCoerceExpression.getId(), 13);
    myIndexMap.put(myConceptCoerceStatement.getId(), 14);
    myIndexMap.put(myConceptCoerceStrongExpression.getId(), 15);
    myIndexMap.put(myConceptComparisonRule.getId(), 16);
    myIndexMap.put(myConceptConceptClauseLinkInfo.getId(), 17);
    myIndexMap.put(myConceptConceptFunctionParameter_ContextNode.getId(), 18);
    myIndexMap.put(myConceptConceptFunctionParameter_EditorContext.getId(), 19);
    myIndexMap.put(myConceptConceptFunctionParameter_Role.getId(), 20);
    myIndexMap.put(myConceptConceptFunctionParameter_Selection.getId(), 21);
    myIndexMap.put(myConceptConceptFunctionParameter_isAggregation.getId(), 22);
    myIndexMap.put(myConceptConceptFunctionParameter_node.getId(), 23);
    myIndexMap.put(myConceptConceptFunctionParameter_var.getId(), 24);
    myIndexMap.put(myConceptConceptReference.getId(), 25);
    myIndexMap.put(myConceptCreateComparableEquationStatement.getId(), 26);
    myIndexMap.put(myConceptCreateComparableEquationStatementStrong.getId(), 27);
    myIndexMap.put(myConceptCreateEquationStatement.getId(), 28);
    myIndexMap.put(myConceptCreateGreaterThanInequationStatement.getId(), 29);
    myIndexMap.put(myConceptCreateLessThanInequationStatement.getId(), 30);
    myIndexMap.put(myConceptCreateStrongGreaterThanInequationStatement.getId(), 31);
    myIndexMap.put(myConceptCreateStrongLessThanInequationStatement.getId(), 32);
    myIndexMap.put(myConceptDefaultGroupReference.getId(), 33);
    myIndexMap.put(myConceptErrorInfoExpression.getId(), 34);
    myIndexMap.put(myConceptGetOperationType.getId(), 35);
    myIndexMap.put(myConceptIRuleWithOneNode.getId(), 36);
    myIndexMap.put(myConceptIRuleWithTwoNodes.getId(), 37);
    myIndexMap.put(myConceptImmediateSupertypesExpression.getId(), 38);
    myIndexMap.put(myConceptInequationReference.getId(), 39);
    myIndexMap.put(myConceptInequationReplacementRule.getId(), 40);
    myIndexMap.put(myConceptInferenceRule.getId(), 41);
    myIndexMap.put(myConceptInfoStatement.getId(), 42);
    myIndexMap.put(myConceptInfoStatementAnnotation.getId(), 43);
    myIndexMap.put(myConceptIsApplicableConceptFunction.getId(), 44);
    myIndexMap.put(myConceptIsReplacementRuleApplicable_ConceptFunction.getId(), 45);
    myIndexMap.put(myConceptIsStrongSubtypeExpression.getId(), 46);
    myIndexMap.put(myConceptIsSubtypeExpression.getId(), 47);
    myIndexMap.put(myConceptJoinContainer.getId(), 48);
    myIndexMap.put(myConceptJoinType.getId(), 49);
    myIndexMap.put(myConceptLeftOperandType_parameter.getId(), 50);
    myIndexMap.put(myConceptLinkPatternVariableReference.getId(), 51);
    myIndexMap.put(myConceptMatchStatement.getId(), 52);
    myIndexMap.put(myConceptMatchStatementItem.getId(), 53);
    myIndexMap.put(myConceptMeetContainer.getId(), 54);
    myIndexMap.put(myConceptMeetType.getId(), 55);
    myIndexMap.put(myConceptMessageStatement.getId(), 56);
    myIndexMap.put(myConceptMessageStatementAnnotation.getId(), 57);
    myIndexMap.put(myConceptMessageTarget.getId(), 58);
    myIndexMap.put(myConceptMultipleForeachLoop.getId(), 59);
    myIndexMap.put(myConceptMultipleForeachLoopVariable.getId(), 60);
    myIndexMap.put(myConceptNodeInfo.getId(), 61);
    myIndexMap.put(myConceptNode_InferTypeOperation.getId(), 62);
    myIndexMap.put(myConceptNode_TypeOperation.getId(), 63);
    myIndexMap.put(myConceptNonTypesystemRule.getId(), 64);
    myIndexMap.put(myConceptNormalTypeClause.getId(), 65);
    myIndexMap.put(myConceptOperation_parameter.getId(), 66);
    myIndexMap.put(myConceptOrStatement.getId(), 67);
    myIndexMap.put(myConceptOriginalNodeId.getId(), 68);
    myIndexMap.put(myConceptOverloadedOpIsApplicableFunction.getId(), 69);
    myIndexMap.put(myConceptOverloadedOpRulesContainer.getId(), 70);
    myIndexMap.put(myConceptOverloadedOpTypeRule_OneTypeSpecified.getId(), 71);
    myIndexMap.put(myConceptOverloadedOperatorTypeFunction.getId(), 72);
    myIndexMap.put(myConceptOverloadedOperatorTypeRule.getId(), 73);
    myIndexMap.put(myConceptOverridesConceptFunction.getId(), 74);
    myIndexMap.put(myConceptPatternCondition.getId(), 75);
    myIndexMap.put(myConceptPatternVariableReference.getId(), 76);
    myIndexMap.put(myConceptPrintToTrace.getId(), 77);
    myIndexMap.put(myConceptProcessed.getId(), 78);
    myIndexMap.put(myConceptPropertyMessageTarget.getId(), 79);
    myIndexMap.put(myConceptPropertyNameTarget.getId(), 80);
    myIndexMap.put(myConceptPropertyPatternVariableReference.getId(), 81);
    myIndexMap.put(myConceptQuickFixArgument.getId(), 82);
    myIndexMap.put(myConceptQuickFixArgumentReference.getId(), 83);
    myIndexMap.put(myConceptQuickFixDescriptionBlock.getId(), 84);
    myIndexMap.put(myConceptQuickFixExecuteBlock.getId(), 85);
    myIndexMap.put(myConceptQuickFixField.getId(), 86);
    myIndexMap.put(myConceptQuickFixFieldReference.getId(), 87);
    myIndexMap.put(myConceptQuickFixSetSelectionBlock.getId(), 88);
    myIndexMap.put(myConceptReferenceMessageTarget.getId(), 89);
    myIndexMap.put(myConceptReferenceRoleTarget.getId(), 90);
    myIndexMap.put(myConceptReplacementRuleReference.getId(), 91);
    myIndexMap.put(myConceptReportErrorStatement.getId(), 92);
    myIndexMap.put(myConceptReportErrorStatementAnnotation.getId(), 93);
    myIndexMap.put(myConceptRightOperandType_parameter.getId(), 94);
    myIndexMap.put(myConceptRuntimeErrorType.getId(), 95);
    myIndexMap.put(myConceptRuntimeHoleType.getId(), 96);
    myIndexMap.put(myConceptRuntimeListVariable.getId(), 97);
    myIndexMap.put(myConceptRuntimeTypeVariable.getId(), 98);
    myIndexMap.put(myConceptSelectionType.getId(), 99);
    myIndexMap.put(myConceptSubstituteTypeRule.getId(), 100);
    myIndexMap.put(myConceptSubtypingRule.getId(), 101);
    myIndexMap.put(myConceptSupersedeConceptFunction.getId(), 102);
    myIndexMap.put(myConceptTypeCheckerAccessExpression.getId(), 103);
    myIndexMap.put(myConceptTypeClause.getId(), 104);
    myIndexMap.put(myConceptTypeOfExpression.getId(), 105);
    myIndexMap.put(myConceptTypeVarDeclaration.getId(), 106);
    myIndexMap.put(myConceptTypeVarReference.getId(), 107);
    myIndexMap.put(myConceptTypesystemIntention.getId(), 108);
    myIndexMap.put(myConceptTypesystemIntentionArgument.getId(), 109);
    myIndexMap.put(myConceptTypesystemQuickFix.getId(), 110);
    myIndexMap.put(myConceptVariableConverterItem.getId(), 111);
    myIndexMap.put(myConceptVariableConverterItem_ApplicableBlock.getId(), 112);
    myIndexMap.put(myConceptVariableConverterItem_ConvertBlock.getId(), 113);
    myIndexMap.put(myConceptVariableConvertersContainer.getId(), 114);
    myIndexMap.put(myConceptWarningStatement.getId(), 115);
    myIndexMap.put(myConceptWarningStatementAnnotation.getId(), 116);
    myIndexMap.put(myConceptWasSelectedNodeOperation.getId(), 117);
    myIndexMap.put(myConceptWhenConcreteStatement.getId(), 118);
    myIndexMap.put(myConceptWhenConcreteVariableDeclaration.getId(), 119);
    myIndexMap.put(myConceptWhenConcreteVariableReference.getId(), 120);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractCheckingRule, myConceptAbstractComparableStatement, myConceptAbstractEquationStatement, myConceptAbstractInequationStatement, myConceptAbstractOverloadedOpsTypeRule, myConceptAbstractRule, myConceptAbstractSubtypingRule, myConceptAddDependencyStatement, myConceptApplicableNodeCondition, myConceptApplicableNodeReference, myConceptAssertStatement, myConceptAttributedNodeExpression, myConceptCaretPositionOperation, myConceptCoerceExpression, myConceptCoerceStatement, myConceptCoerceStrongExpression, myConceptComparisonRule, myConceptConceptClauseLinkInfo, myConceptConceptFunctionParameter_ContextNode, myConceptConceptFunctionParameter_EditorContext, myConceptConceptFunctionParameter_Role, myConceptConceptFunctionParameter_Selection, myConceptConceptFunctionParameter_isAggregation, myConceptConceptFunctionParameter_node, myConceptConceptFunctionParameter_var, myConceptConceptReference, myConceptCreateComparableEquationStatement, myConceptCreateComparableEquationStatementStrong, myConceptCreateEquationStatement, myConceptCreateGreaterThanInequationStatement, myConceptCreateLessThanInequationStatement, myConceptCreateStrongGreaterThanInequationStatement, myConceptCreateStrongLessThanInequationStatement, myConceptDefaultGroupReference, myConceptErrorInfoExpression, myConceptGetOperationType, myConceptIRuleWithOneNode, myConceptIRuleWithTwoNodes, myConceptImmediateSupertypesExpression, myConceptInequationReference, myConceptInequationReplacementRule, myConceptInferenceRule, myConceptInfoStatement, myConceptInfoStatementAnnotation, myConceptIsApplicableConceptFunction, myConceptIsReplacementRuleApplicable_ConceptFunction, myConceptIsStrongSubtypeExpression, myConceptIsSubtypeExpression, myConceptJoinContainer, myConceptJoinType, myConceptLeftOperandType_parameter, myConceptLinkPatternVariableReference, myConceptMatchStatement, myConceptMatchStatementItem, myConceptMeetContainer, myConceptMeetType, myConceptMessageStatement, myConceptMessageStatementAnnotation, myConceptMessageTarget, myConceptMultipleForeachLoop, myConceptMultipleForeachLoopVariable, myConceptNodeInfo, myConceptNode_InferTypeOperation, myConceptNode_TypeOperation, myConceptNonTypesystemRule, myConceptNormalTypeClause, myConceptOperation_parameter, myConceptOrStatement, myConceptOriginalNodeId, myConceptOverloadedOpIsApplicableFunction, myConceptOverloadedOpRulesContainer, myConceptOverloadedOpTypeRule_OneTypeSpecified, myConceptOverloadedOperatorTypeFunction, myConceptOverloadedOperatorTypeRule, myConceptOverridesConceptFunction, myConceptPatternCondition, myConceptPatternVariableReference, myConceptPrintToTrace, myConceptProcessed, myConceptPropertyMessageTarget, myConceptPropertyNameTarget, myConceptPropertyPatternVariableReference, myConceptQuickFixArgument, myConceptQuickFixArgumentReference, myConceptQuickFixDescriptionBlock, myConceptQuickFixExecuteBlock, myConceptQuickFixField, myConceptQuickFixFieldReference, myConceptQuickFixSetSelectionBlock, myConceptReferenceMessageTarget, myConceptReferenceRoleTarget, myConceptReplacementRuleReference, myConceptReportErrorStatement, myConceptReportErrorStatementAnnotation, myConceptRightOperandType_parameter, myConceptRuntimeErrorType, myConceptRuntimeHoleType, myConceptRuntimeListVariable, myConceptRuntimeTypeVariable, myConceptSelectionType, myConceptSubstituteTypeRule, myConceptSubtypingRule, myConceptSupersedeConceptFunction, myConceptTypeCheckerAccessExpression, myConceptTypeClause, myConceptTypeOfExpression, myConceptTypeVarDeclaration, myConceptTypeVarReference, myConceptTypesystemIntention, myConceptTypesystemIntentionArgument, myConceptTypesystemQuickFix, myConceptVariableConverterItem, myConceptVariableConverterItem_ApplicableBlock, myConceptVariableConverterItem_ConvertBlock, myConceptVariableConvertersContainer, myConceptWarningStatement, myConceptWarningStatementAnnotation, myConceptWasSelectedNodeOperation, myConceptWhenConcreteStatement, myConceptWhenConcreteVariableDeclaration, myConceptWhenConcreteVariableReference);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptAbstractCheckingRule;
      case 1:
        return myConceptAbstractComparableStatement;
      case 2:
        return myConceptAbstractEquationStatement;
      case 3:
        return myConceptAbstractInequationStatement;
      case 4:
        return myConceptAbstractOverloadedOpsTypeRule;
      case 5:
        return myConceptAbstractRule;
      case 6:
        return myConceptAbstractSubtypingRule;
      case 7:
        return myConceptAddDependencyStatement;
      case 8:
        return myConceptApplicableNodeCondition;
      case 9:
        return myConceptApplicableNodeReference;
      case 10:
        return myConceptAssertStatement;
      case 11:
        return myConceptAttributedNodeExpression;
      case 12:
        return myConceptCaretPositionOperation;
      case 13:
        return myConceptCoerceExpression;
      case 14:
        return myConceptCoerceStatement;
      case 15:
        return myConceptCoerceStrongExpression;
      case 16:
        return myConceptComparisonRule;
      case 17:
        return myConceptConceptClauseLinkInfo;
      case 18:
        return myConceptConceptFunctionParameter_ContextNode;
      case 19:
        return myConceptConceptFunctionParameter_EditorContext;
      case 20:
        return myConceptConceptFunctionParameter_Role;
      case 21:
        return myConceptConceptFunctionParameter_Selection;
      case 22:
        return myConceptConceptFunctionParameter_isAggregation;
      case 23:
        return myConceptConceptFunctionParameter_node;
      case 24:
        return myConceptConceptFunctionParameter_var;
      case 25:
        return myConceptConceptReference;
      case 26:
        return myConceptCreateComparableEquationStatement;
      case 27:
        return myConceptCreateComparableEquationStatementStrong;
      case 28:
        return myConceptCreateEquationStatement;
      case 29:
        return myConceptCreateGreaterThanInequationStatement;
      case 30:
        return myConceptCreateLessThanInequationStatement;
      case 31:
        return myConceptCreateStrongGreaterThanInequationStatement;
      case 32:
        return myConceptCreateStrongLessThanInequationStatement;
      case 33:
        return myConceptDefaultGroupReference;
      case 34:
        return myConceptErrorInfoExpression;
      case 35:
        return myConceptGetOperationType;
      case 36:
        return myConceptIRuleWithOneNode;
      case 37:
        return myConceptIRuleWithTwoNodes;
      case 38:
        return myConceptImmediateSupertypesExpression;
      case 39:
        return myConceptInequationReference;
      case 40:
        return myConceptInequationReplacementRule;
      case 41:
        return myConceptInferenceRule;
      case 42:
        return myConceptInfoStatement;
      case 43:
        return myConceptInfoStatementAnnotation;
      case 44:
        return myConceptIsApplicableConceptFunction;
      case 45:
        return myConceptIsReplacementRuleApplicable_ConceptFunction;
      case 46:
        return myConceptIsStrongSubtypeExpression;
      case 47:
        return myConceptIsSubtypeExpression;
      case 48:
        return myConceptJoinContainer;
      case 49:
        return myConceptJoinType;
      case 50:
        return myConceptLeftOperandType_parameter;
      case 51:
        return myConceptLinkPatternVariableReference;
      case 52:
        return myConceptMatchStatement;
      case 53:
        return myConceptMatchStatementItem;
      case 54:
        return myConceptMeetContainer;
      case 55:
        return myConceptMeetType;
      case 56:
        return myConceptMessageStatement;
      case 57:
        return myConceptMessageStatementAnnotation;
      case 58:
        return myConceptMessageTarget;
      case 59:
        return myConceptMultipleForeachLoop;
      case 60:
        return myConceptMultipleForeachLoopVariable;
      case 61:
        return myConceptNodeInfo;
      case 62:
        return myConceptNode_InferTypeOperation;
      case 63:
        return myConceptNode_TypeOperation;
      case 64:
        return myConceptNonTypesystemRule;
      case 65:
        return myConceptNormalTypeClause;
      case 66:
        return myConceptOperation_parameter;
      case 67:
        return myConceptOrStatement;
      case 68:
        return myConceptOriginalNodeId;
      case 69:
        return myConceptOverloadedOpIsApplicableFunction;
      case 70:
        return myConceptOverloadedOpRulesContainer;
      case 71:
        return myConceptOverloadedOpTypeRule_OneTypeSpecified;
      case 72:
        return myConceptOverloadedOperatorTypeFunction;
      case 73:
        return myConceptOverloadedOperatorTypeRule;
      case 74:
        return myConceptOverridesConceptFunction;
      case 75:
        return myConceptPatternCondition;
      case 76:
        return myConceptPatternVariableReference;
      case 77:
        return myConceptPrintToTrace;
      case 78:
        return myConceptProcessed;
      case 79:
        return myConceptPropertyMessageTarget;
      case 80:
        return myConceptPropertyNameTarget;
      case 81:
        return myConceptPropertyPatternVariableReference;
      case 82:
        return myConceptQuickFixArgument;
      case 83:
        return myConceptQuickFixArgumentReference;
      case 84:
        return myConceptQuickFixDescriptionBlock;
      case 85:
        return myConceptQuickFixExecuteBlock;
      case 86:
        return myConceptQuickFixField;
      case 87:
        return myConceptQuickFixFieldReference;
      case 88:
        return myConceptQuickFixSetSelectionBlock;
      case 89:
        return myConceptReferenceMessageTarget;
      case 90:
        return myConceptReferenceRoleTarget;
      case 91:
        return myConceptReplacementRuleReference;
      case 92:
        return myConceptReportErrorStatement;
      case 93:
        return myConceptReportErrorStatementAnnotation;
      case 94:
        return myConceptRightOperandType_parameter;
      case 95:
        return myConceptRuntimeErrorType;
      case 96:
        return myConceptRuntimeHoleType;
      case 97:
        return myConceptRuntimeListVariable;
      case 98:
        return myConceptRuntimeTypeVariable;
      case 99:
        return myConceptSelectionType;
      case 100:
        return myConceptSubstituteTypeRule;
      case 101:
        return myConceptSubtypingRule;
      case 102:
        return myConceptSupersedeConceptFunction;
      case 103:
        return myConceptTypeCheckerAccessExpression;
      case 104:
        return myConceptTypeClause;
      case 105:
        return myConceptTypeOfExpression;
      case 106:
        return myConceptTypeVarDeclaration;
      case 107:
        return myConceptTypeVarReference;
      case 108:
        return myConceptTypesystemIntention;
      case 109:
        return myConceptTypesystemIntentionArgument;
      case 110:
        return myConceptTypesystemQuickFix;
      case 111:
        return myConceptVariableConverterItem;
      case 112:
        return myConceptVariableConverterItem_ApplicableBlock;
      case 113:
        return myConceptVariableConverterItem_ConvertBlock;
      case 114:
        return myConceptVariableConvertersContainer;
      case 115:
        return myConceptWarningStatement;
      case 116:
        return myConceptWarningStatementAnnotation;
      case 117:
        return myConceptWasSelectedNodeOperation;
      case 118:
        return myConceptWhenConcreteStatement;
      case 119:
        return myConceptWhenConcreteVariableDeclaration;
      case 120:
        return myConceptWhenConcreteVariableReference;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForAbstractCheckingRule() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.AbstractCheckingRule", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1164847e929L)).super_("jetbrains.mps.lang.typesystem.structure.AbstractRule").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e7b5c73L)).parents("jetbrains.mps.lang.typesystem.structure.AbstractRule", "jetbrains.mps.lang.core.structure.InterfacePart").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e7b5c73L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x12509ddfaa98f128L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x116484991d1L, "overrides", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1195213689297"))).properties("overrides").childDescriptors(new ConceptDescriptorBuilder.Link(0x1164848bdf4L, "body", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1195213635060")), new ConceptDescriptorBuilder.Link(0x1885777d137135fcL, "overridesFun", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1885777d1370d97bL), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1766949807893591548"))).children(new String[]{"body", "overridesFun"}, new boolean[]{false, false}).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1195213580585")).create();
  }
  private static ConceptDescriptor createDescriptorForAbstractComparableStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.AbstractComparableStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3be2294807013eb7L)).super_("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f3c1ffaL)).parents("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f3c1ffaL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x3be2294807021f34L, "infer", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "4315056782306320180"))).properties("infer").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "4315056782306262711")).create();
  }
  private static ConceptDescriptor createDescriptorForAbstractEquationStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f3c1ffaL)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x118e0a511a0L, "checkOnly", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1206359757216"))).properties("checkOnly").childDescriptors(new ConceptDescriptorBuilder.Link(0x1117f3d1d35L, "leftExpression", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x114168188c7L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174660783413")), new ConceptDescriptorBuilder.Link(0x1117f3d1d36L, "rightExpression", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x114168188c7L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174660783414")), new ConceptDescriptorBuilder.Link(0x1117f58cf99L, "nodeToCheck", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174662598553")), new ConceptDescriptorBuilder.Link(0x112d82366d0L, "errorString", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1180447237840")), new ConceptDescriptorBuilder.Link(0x11b2b6fabb9L, "helginsIntention", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x119e85e030eL), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1216204483513"))).children(new String[]{"leftExpression", "rightExpression", "nodeToCheck", "errorString", "helginsIntention"}, new boolean[]{false, false, false, false, true}).abstract_().staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174660718586")).create();
  }
  private static ConceptDescriptor createDescriptorForAbstractInequationStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11a342c1412L)).super_("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f3c1ffaL)).parents("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f3c1ffaL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x11a342c735aL, "inequationPriority", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1212056105818")), new ConceptDescriptorBuilder.Prop(0x42501924d0bd6481L, "label", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "4778346850551686273")), new ConceptDescriptorBuilder.Prop(0x6b67310af31422a9L, "strong", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "7739208407757103785")), new ConceptDescriptorBuilder.Prop(0x6b67310af31422aaL, "orientation", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "7739208407757103786"))).properties("inequationPriority", "label", "strong", "orientation").childDescriptors(new ConceptDescriptorBuilder.Link(0x42501924d0bd890dL, "afterEquations", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x42501924d0bd1913L), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "4778346850551695629")), new ConceptDescriptorBuilder.Link(0x42501924d0bd890eL, "beforeEquations", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x42501924d0bd1913L), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "4778346850551695630")), new ConceptDescriptorBuilder.Link(0x12541e5f229a75beL, "afterGroups", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x12541e5f229acee2L), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1320713984677672382")), new ConceptDescriptorBuilder.Link(0x12541e5f229a75bfL, "beforeGroups", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x12541e5f229acee2L), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1320713984677672383")), new ConceptDescriptorBuilder.Link(0x12541e5f229acedfL, "inequationGroup", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x12541e5f229acee2L), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1320713984677695199")), new ConceptDescriptorBuilder.Link(0x4cffb708491a7354L, "rulesToSkip", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x4cffb708491a734cL), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "5548354512157832020"))).children(new String[]{"afterEquations", "beforeEquations", "afterGroups", "beforeGroups", "inequationGroup", "rulesToSkip"}, new boolean[]{true, true, true, true, false, true}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1212056081426")).create();
  }
  private static ConceptDescriptor createDescriptorForAbstractOverloadedOpsTypeRule() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.AbstractOverloadedOpsTypeRule", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70bfdafbb2c9449bL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x70bfdafbb2c9449dL, "operationConcept", MetaIdFactory.conceptId(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10cd05c601dL), false, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "8124453027370845341")), new ConceptDescriptorBuilder.Link(0x70bfdafbb2c9449fL, "function", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fcc4bffaeL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "8124453027370845343")), new ConceptDescriptorBuilder.Link(0x5529dae323134a31L, "isApplicable", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x5529dae3231347deL), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "6136676636349909553"))).children(new String[]{"operationConcept", "function", "isApplicable"}, new boolean[]{true, false, false}).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "8124453027370845339")).create();
  }
  private static ConceptDescriptor createDescriptorForAbstractRule() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.AbstractRule", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e7b5c73L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.lang.structure.structure.IConceptAspect").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL), MetaIdFactory.conceptId(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x24614259e94f0c84L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1117e7b9c40L, "applicableNode", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e29d976L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174648101952"))).children(new String[]{"applicableNode"}, new boolean[]{false}).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174648085619")).create();
  }
  private static ConceptDescriptor createDescriptorForAbstractSubtypingRule() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1119c40dfb0L)).super_("jetbrains.mps.lang.typesystem.structure.AbstractRule").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e7b5c73L)).parents("jetbrains.mps.lang.typesystem.structure.AbstractRule", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.lang.core.structure.InterfacePart").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e7b5c73L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1208f458d37L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x12509ddfaa98f128L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x111b7ad8131L, "isWeak", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1175607673137"))).properties("isWeak").childDescriptors(new ConceptDescriptorBuilder.Link(0x1119c41b754L, "body", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1175147624276"))).children(new String[]{"body"}, new boolean[]{false}).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1175147569072")).create();
  }
  private static ConceptDescriptor createDescriptorForAddDependencyStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.AddDependencyStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11c22f6c964L)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11c22f76417L, "dependency", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1220357350423"))).children(new String[]{"dependency"}, new boolean[]{false}).alias("addDependency", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1220357310820")).create();
  }
  private static ConceptDescriptor createDescriptorForApplicableNodeCondition() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ApplicableNodeCondition", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e29d976L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.lang.core.structure.InterfacePart").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x12509ddfaa98f128L)).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174642743670")).create();
  }
  private static ConceptDescriptor createDescriptorForApplicableNodeReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ApplicableNodeReference", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e9ef5dcL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x1117e9f2a5aL, "applicableNode", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e29d976L), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174650432090"))).references("applicableNode").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174650418652")).create();
  }
  private static ConceptDescriptor createDescriptorForAssertStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.AssertStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111b24c0cd8L)).super_("jetbrains.mps.lang.typesystem.structure.ReportErrorStatement").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111b251a62aL)).parents("jetbrains.mps.lang.typesystem.structure.ReportErrorStatement").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111b251a62aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x111b2518fb4L, "condition", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1175517761460"))).children(new String[]{"condition"}, new boolean[]{false}).alias("ensure", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1175517400280")).create();
  }
  private static ConceptDescriptor createDescriptorForAttributedNodeExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.AttributedNodeExpression", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x2152354b0d500086L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("attributedNode", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "2401040147804061830")).create();
  }
  private static ConceptDescriptor createDescriptorForCaretPositionOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.CaretPositionOperation", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0xef0542bbc395068L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L)).alias("caretPosition", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1076452857759748200")).create();
  }
  private static ConceptDescriptor createDescriptorForCoerceExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.CoerceExpression", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1127a2a14aeL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x6b67310af315d236L, "strong", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "7739208407757214262"))).properties("strong").childDescriptors(new ConceptDescriptorBuilder.Link(0x1127a2e5034L, "pattern", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e29d976L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1178870894644")), new ConceptDescriptorBuilder.Link(0x1127a2e5035L, "nodeToCoerce", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1178870894645"))).children(new String[]{"pattern", "nodeToCoerce"}, new boolean[]{false, false}).alias("coerce", "expression").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1178870617262")).create();
  }
  private static ConceptDescriptor createDescriptorForCoerceStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.CoerceStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111f05e2451L)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x400ad468a35d63c7L, "strong", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "4614734314076988359"))).properties("strong").childDescriptors(new ConceptDescriptorBuilder.Link(0x111f05fb92aL, "pattern", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e29d976L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1176558876970")), new ConceptDescriptorBuilder.Link(0x111f0605ed0L, "nodeToCoerce", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1176558919376")), new ConceptDescriptorBuilder.Link(0x111f05f96ebL, "body", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1176558868203")), new ConceptDescriptorBuilder.Link(0x11c284fe10bL, "elseClause", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1220447035659"))).children(new String[]{"pattern", "nodeToCoerce", "body", "elseClause"}, new boolean[]{false, false, false, false}).alias("coerce", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1176558773329")).create();
  }
  private static ConceptDescriptor createDescriptorForCoerceStrongExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.CoerceStrongExpression", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1127a376a3dL)).super_("jetbrains.mps.lang.typesystem.structure.CoerceExpression").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1127a2a14aeL)).parents("jetbrains.mps.lang.typesystem.structure.CoerceExpression").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1127a2a14aeL)).alias("coerceStrong", "expression").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1178871491133")).create();
  }
  private static ConceptDescriptor createDescriptorForComparisonRule() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ComparisonRule", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x114caade477L)).super_("jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1119c40dfb0L)).parents("jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule", "jetbrains.mps.lang.typesystem.structure.IRuleWithTwoNodes").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1119c40dfb0L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3e3c1137fe6cb779L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x114cb3d0f37L, "anotherNode", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e29d976L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1188820750135"))).children(new String[]{"anotherNode"}, new boolean[]{false}).rootable().alias("Comparison Rule", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1188811367543")).create();
  }
  private static ConceptDescriptor createDescriptorForConceptClauseLinkInfo() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ConceptClauseLinkInfo", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x120c8f8641eL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x120c8fde35cL, "linkDeclaration", MetaIdFactory.conceptId(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1240322663260"))).references("linkDeclaration").childDescriptors(new ConceptDescriptorBuilder.Link(0x120c8fdadffL, "targetNode", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1240322649599")), new ConceptDescriptorBuilder.Link(0x120dcf9369dL, "childIndex", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1240657901213"))).children(new String[]{"targetNode", "childIndex"}, new boolean[]{false, false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1240322303006")).create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_ContextNode() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_ContextNode", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e078ffb82L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("contextNode", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1228487523202")).create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_EditorContext() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_EditorContext", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x335fe1d0b7494cfcL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).alias("editorContext", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "3701925705266318588")).create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_Role() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_Role", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e078e410eL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("role", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1228487409934")).create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_Selection() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_Selection", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x611e7dc14a69a014L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).alias("selectionBefore", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "6998169140110925844")).create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_isAggregation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_isAggregation", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e078ecdbdL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("isAggregation", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1228487445949")).create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_node() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_node", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b3618c300L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("node", "function parameter").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1216383337216")).create();
  }
  private static ConceptDescriptor createDescriptorForConceptFunctionParameter_var() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ConceptFunctionParameter_var", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e07431ba7L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("variable", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1228482485159")).create();
  }
  private static ConceptDescriptor createDescriptorForConceptReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ConceptReference", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e2a88b3L)).super_("jetbrains.mps.lang.typesystem.structure.ApplicableNodeCondition").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e29d976L)).parents("jetbrains.mps.lang.typesystem.structure.ApplicableNodeCondition").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e29d976L)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x1117e2ab6c9L, "concept", MetaIdFactory.conceptId(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174642800329"))).references("concept").alias("concept =", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174642788531")).create();
  }
  private static ConceptDescriptor createDescriptorForCreateComparableEquationStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.CreateComparableEquationStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f63bc23L)).super_("jetbrains.mps.lang.typesystem.structure.AbstractComparableStatement").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3be2294807013eb7L)).parents("jetbrains.mps.lang.typesystem.structure.AbstractComparableStatement").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3be2294807013eb7L)).alias(":~:", "weak comparability").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174663314467")).create();
  }
  private static ConceptDescriptor createDescriptorForCreateComparableEquationStatementStrong() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.CreateComparableEquationStatementStrong", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x112c36bc7ecL)).super_("jetbrains.mps.lang.typesystem.structure.AbstractComparableStatement").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3be2294807013eb7L)).parents("jetbrains.mps.lang.typesystem.structure.AbstractComparableStatement").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3be2294807013eb7L)).alias(":~~:", "strong comparability").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1180099659756")).create();
  }
  private static ConceptDescriptor createDescriptorForCreateEquationStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.CreateEquationStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f179e8dL)).super_("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f3c1ffaL)).parents("jetbrains.mps.lang.typesystem.structure.AbstractEquationStatement").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f3c1ffaL)).alias(":==:", "typesystem equation").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174658326157")).create();
  }
  private static ConceptDescriptor createDescriptorForCreateGreaterThanInequationStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.CreateGreaterThanInequationStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f62956cL)).super_("jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11a342c1412L)).parents("jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11a342c1412L)).alias(":>=:", "weak subtyping").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174663239020")).create();
  }
  private static ConceptDescriptor createDescriptorForCreateLessThanInequationStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.CreateLessThanInequationStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f60bfd5L)).super_("jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11a342c1412L)).parents("jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11a342c1412L)).alias(":<=:", "weak subtyping").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174663118805")).create();
  }
  private static ConceptDescriptor createDescriptorForCreateStrongGreaterThanInequationStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.CreateStrongGreaterThanInequationStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x31c3185c17a0f767L)).super_("jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11a342c1412L)).parents("jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11a342c1412L)).alias(":>>=:", "strong subtyping").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "3585736512129529703")).create();
  }
  private static ConceptDescriptor createDescriptorForCreateStrongLessThanInequationStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.CreateStrongLessThanInequationStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x112b37f1b6eL)).super_("jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11a342c1412L)).parents("jetbrains.mps.lang.typesystem.structure.AbstractInequationStatement").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11a342c1412L)).alias(":<<=:", "strong subtyping").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1179832490862")).create();
  }
  private static ConceptDescriptor createDescriptorForDefaultGroupReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.DefaultGroupReference", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x12541e5f229acee2L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).alias("default", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1320713984677695202")).create();
  }
  private static ConceptDescriptor createDescriptorForErrorInfoExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ErrorInfoExpression", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x117c6082b85L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).alias("equationInfo", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1201618299781")).create();
  }
  private static ConceptDescriptor createDescriptorForGetOperationType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.GetOperationType", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fd11186b7L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11fd111c5e0L, "operation", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1236163216864")), new ConceptDescriptorBuilder.Link(0x11fd111e015L, "leftOperandType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1236163223573")), new ConceptDescriptorBuilder.Link(0x11fd111e18eL, "rightOperandType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1236163223950"))).children(new String[]{"operation", "leftOperandType", "rightOperandType"}, new boolean[]{false, false, false}).alias("operation type(..)", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1236163200695")).create();
  }
  private static ConceptDescriptor createDescriptorForIRuleWithOneNode() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.IRuleWithOneNode", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3e3c1137fe6cb778L)).version(1).interface_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "4484478261143582584")).create();
  }
  private static ConceptDescriptor createDescriptorForIRuleWithTwoNodes() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.IRuleWithTwoNodes", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3e3c1137fe6cb779L)).version(1).interface_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "4484478261143582585")).create();
  }
  private static ConceptDescriptor createDescriptorForImmediateSupertypesExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ImmediateSupertypesExpression", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1120ebd8531L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1120ebf9289L, "subtypeExpression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1177068475017"))).children(new String[]{"subtypeExpression"}, new boolean[]{false}).alias("immediateSupertypes()", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1177068340529")).create();
  }
  private static ConceptDescriptor createDescriptorForInequationReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.InequationReference", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x42501924d0bd1913L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x42501924d0bd1914L, "inequation", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11a342c1412L), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "4778346850551666964"))).references("inequation").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "4778346850551666963")).create();
  }
  private static ConceptDescriptor createDescriptorForInequationReplacementRule() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.InequationReplacementRule", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x117c5668bf2L)).super_("jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1119c40dfb0L)).parents("jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule", "jetbrains.mps.lang.typesystem.structure.IRuleWithTwoNodes").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1119c40dfb0L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3e3c1137fe6cb779L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x117c567f086L, "supertypeNode", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e29d976L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1201607798918")), new ConceptDescriptorBuilder.Link(0x31d99a115038e5edL, "isApplicableClause", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x31d99a115038e5e8L), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "3592071576955708909"))).children(new String[]{"supertypeNode", "isApplicableClause"}, new boolean[]{false, false}).rootable().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1201607707634")).create();
  }
  private static ConceptDescriptor createDescriptorForInferenceRule() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.InferenceRule", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e2f5efaL)).super_("jetbrains.mps.lang.typesystem.structure.AbstractCheckingRule").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1164847e929L)).parents("jetbrains.mps.lang.typesystem.structure.AbstractCheckingRule", "jetbrains.mps.lang.typesystem.structure.IRuleWithOneNode").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1164847e929L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3e3c1137fe6cb778L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x115f0161343L, "dependency", MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1193733919555")), new ConceptDescriptorBuilder.Link(0x65684a1aee271b08L, "supercedesFun", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x65684a1aee252403L), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "7307171874933775112")), new ConceptDescriptorBuilder.Link(0x669222c8f194bfa3L, "applicableFun", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x669222c8f1941d7fL), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "7391008184910266275"))).children(new String[]{"dependency", "supercedesFun", "applicableFun"}, new boolean[]{true, false, false}).rootable().alias("Inference Rule", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174643105530")).create();
  }
  private static ConceptDescriptor createDescriptorForInfoStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.InfoStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11d2965916bL)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.typesystem.structure.MessageStatement").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4aad802L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11d2966036aL, "infoText", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1224760230762"))).children(new String[]{"infoText"}, new boolean[]{false}).alias("info", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1224760201579")).create();
  }
  private static ConceptDescriptor createDescriptorForInfoStatementAnnotation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.InfoStatementAnnotation", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x6ee9803e48223f31L)).super_("jetbrains.mps.lang.typesystem.structure.MessageStatementAnnotation").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x2bb0fe622a9eb078L)).parents("jetbrains.mps.lang.typesystem.structure.MessageStatementAnnotation").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x2bb0fe622a9eb078L)).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "7992060018732187441")).create();
  }
  private static ConceptDescriptor createDescriptorForIsApplicableConceptFunction() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.IsApplicableConceptFunction", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x669222c8f1941d7fL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "7391008184910224767")).create();
  }
  private static ConceptDescriptor createDescriptorForIsReplacementRuleApplicable_ConceptFunction() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.IsReplacementRuleApplicable_ConceptFunction", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x31d99a115038e5e8L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "3592071576955708904")).create();
  }
  private static ConceptDescriptor createDescriptorForIsStrongSubtypeExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.IsStrongSubtypeExpression", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11222e251f1L)).super_("jetbrains.mps.lang.typesystem.structure.IsSubtypeExpression").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111ef7b9fb7L)).parents("jetbrains.mps.lang.typesystem.structure.IsSubtypeExpression").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111ef7b9fb7L)).alias("isStrongSubtype()", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1177406296561")).create();
  }
  private static ConceptDescriptor createDescriptorForIsSubtypeExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.IsSubtypeExpression", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111ef7b9fb7L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x111ef7be155L, "subtypeExpression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1176543945045")), new ConceptDescriptorBuilder.Link(0x111ef7bf5e7L, "supertypeExpression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1176543950311"))).children(new String[]{"subtypeExpression", "supertypeExpression"}, new boolean[]{false, false}).alias("isSubtype()", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1176543928247")).create();
  }
  private static ConceptDescriptor createDescriptorForJoinContainer() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.JoinContainer", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1206cda22fcL)).super_("jetbrains.mps.lang.core.structure.NodeAttribute").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L)).parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1206cda50c8L, "joinType", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1129e737f02L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1238776828104"))).children(new String[]{"joinType"}, new boolean[]{false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1238776816380")).create();
  }
  private static ConceptDescriptor createDescriptorForJoinType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.JoinType", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1129e737f02L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IType", "jetbrains.mps.baseLanguage.structure.IGenericType").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x11f8a0774f2L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x38ff5220e0ac710dL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1129e73a76aL, "argument", MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x11f8a0774f2L), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1179479418730"))).children(new String[]{"argument"}, new boolean[]{true}).alias("join", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1179479408386")).create();
  }
  private static ConceptDescriptor createDescriptorForLeftOperandType_parameter() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.LeftOperandType_parameter", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fcc4cf5b0L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("leftOperandType", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1236083209648")).create();
  }
  private static ConceptDescriptor createDescriptorForLinkPatternVariableReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.LinkPatternVariableReference", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11192d92ad3L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x11192da25efL, "patternVarDecl", MetaIdFactory.conceptId(0xd4615e3bd6714ba9L, 0xaf012b78369b0ba7L, 0x108d36d955aL), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174989841903"))).references("patternVarDecl").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174989777619")).create();
  }
  private static ConceptDescriptor createDescriptorForMatchStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.MatchStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1122952fb1dL)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1122953623eL, "expression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1177514369598")), new ConceptDescriptorBuilder.Link(0x11229530b91L, "item", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x112295a8fecL), false, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1177514347409")), new ConceptDescriptorBuilder.Link(0x11229530314L, "ifFalseStatement", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1177514345236"))).children(new String[]{"expression", "item", "ifFalseStatement"}, new boolean[]{false, true, false}).alias("match", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1177514343197")).create();
  }
  private static ConceptDescriptor createDescriptorForMatchStatementItem() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.MatchStatementItem", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x112295a8fecL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x112295ab642L, "condition", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e29d976L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1177514849858")), new ConceptDescriptorBuilder.Link(0x112295aee4aL, "ifTrue", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1177514864202"))).children(new String[]{"condition", "ifTrue"}, new boolean[]{false, false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1177514840044")).create();
  }
  private static ConceptDescriptor createDescriptorForMeetContainer() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.MeetContainer", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1206cd802f8L)).super_("jetbrains.mps.lang.core.structure.NodeAttribute").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L)).parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1206cd83bb0L, "meetType", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x114b68ad132L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1238776691632"))).children(new String[]{"meetType"}, new boolean[]{false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1238776677112")).create();
  }
  private static ConceptDescriptor createDescriptorForMeetType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.MeetType", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x114b68ad132L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.IType", "jetbrains.mps.baseLanguage.structure.IGenericType").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x11f8a0774f2L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x38ff5220e0ac710dL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x114b68b040bL, "argument", MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x11f8a0774f2L), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1188473537547"))).children(new String[]{"argument"}, new boolean[]{true}).alias("meet", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1188473524530")).create();
  }
  private static ConceptDescriptor createDescriptorForMessageStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.MessageStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4aad802L)).version(1).interface_().childDescriptors(new ConceptDescriptorBuilder.Link(0x11db4ab45e6L, "nodeToReport", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1227096802790")), new ConceptDescriptorBuilder.Link(0x11db4ab45e7L, "helginsIntention", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x119e85e030eL), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1227096802791")), new ConceptDescriptorBuilder.Link(0x11db4abc990L, "messageTarget", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a65783L), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1227096836496")), new ConceptDescriptorBuilder.Link(0x37a16b7744c2e061L, "foreignMessageSource", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "4008603303335354465"))).children(new String[]{"nodeToReport", "helginsIntention", "messageTarget", "foreignMessageSource"}, new boolean[]{false, true, false, false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1227096774658")).create();
  }
  private static ConceptDescriptor createDescriptorForMessageStatementAnnotation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.MessageStatementAnnotation", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x2bb0fe622a9eb078L)).super_("jetbrains.mps.lang.core.structure.NodeAttribute").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L)).parents("jetbrains.mps.lang.core.structure.NodeAttribute", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "3148295837107269752")).create();
  }
  private static ConceptDescriptor createDescriptorForMessageTarget() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.MessageTarget", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a65783L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1227096479619")).create();
  }
  private static ConceptDescriptor createDescriptorForMultipleForeachLoop() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.MultipleForeachLoop", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111efb6d46fL)).super_("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cb1ac5adeL)).parents("jetbrains.mps.baseLanguage.structure.AbstractLoopStatement").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10cb1ac5adeL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x111efb8e0a7L, "loopVariable", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111efb75e90L), false, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1176547942567"))).children(new String[]{"loopVariable"}, new boolean[]{true}).alias("foreach", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1176547808367")).create();
  }
  private static ConceptDescriptor createDescriptorForMultipleForeachLoopVariable() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.MultipleForeachLoopVariable", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111efb75e90L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x111efb7f35eL, "variable", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1176547881822")), new ConceptDescriptorBuilder.Link(0x111efb82e45L, "iterable", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1176547896901"))).children(new String[]{"variable", "iterable"}, new boolean[]{false, false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1176547843728")).create();
  }
  private static ConceptDescriptor createDescriptorForNodeInfo() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.NodeInfo", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x5dffc3ada5b76687L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x5dffc3ada5b76688L, "modelId", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "6773347515165533832")), new ConceptDescriptorBuilder.Prop(0x5dffc3ada5b76689L, "nodeId", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "6773347515165533833"))).properties("modelId", "nodeId").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "6773347515165533831")).create();
  }
  private static ConceptDescriptor createDescriptorForNode_InferTypeOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.Node_InferTypeOperation", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x584039bf75272c67L)).super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").version(1).super_(MetaIdFactory.conceptId(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL)).parents("jetbrains.mps.lang.smodel.structure.SNodeOperation", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("inferType", "get inferred type").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "6359146168314178663")).create();
  }
  private static ConceptDescriptor createDescriptorForNode_TypeOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.Node_TypeOperation", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111ef7d5e03L)).super_("jetbrains.mps.lang.smodel.structure.SNodeOperation").version(1).super_(MetaIdFactory.conceptId(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL)).parents("jetbrains.mps.lang.smodel.structure.SNodeOperation", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("type", "get type").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1176544042499")).create();
  }
  private static ConceptDescriptor createDescriptorForNonTypesystemRule() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.NonTypesystemRule", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1164853e0faL)).super_("jetbrains.mps.lang.typesystem.structure.AbstractCheckingRule").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1164847e929L)).parents("jetbrains.mps.lang.typesystem.structure.AbstractCheckingRule", "jetbrains.mps.lang.typesystem.structure.IRuleWithOneNode").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1164847e929L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3e3c1137fe6cb778L)).rootable().alias("Checking Rule", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1195214364922")).create();
  }
  private static ConceptDescriptor createDescriptorForNormalTypeClause() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.NormalTypeClause", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1141682561cL)).super_("jetbrains.mps.lang.typesystem.structure.TypeClause").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x114168188c7L)).parents("jetbrains.mps.lang.typesystem.structure.TypeClause").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x114168188c7L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1141682cac0L, "normalType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1185788644032"))).children(new String[]{"normalType"}, new boolean[]{false}).alias("( expr )", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1185788614172")).create();
  }
  private static ConceptDescriptor createDescriptorForOperation_parameter() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.Operation_parameter", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fcc4d8298L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("operation", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1236083245720")).create();
  }
  private static ConceptDescriptor createDescriptorForOrStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.OrStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0xba3b706cf9561ecL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x597d431bf11b557cL, "orClause", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f3c1ffaL), false, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "6448384028752696700"))).children(new String[]{"orClause"}, new boolean[]{true}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "838715195501404652")).create();
  }
  private static ConceptDescriptor createDescriptorForOriginalNodeId() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.OriginalNodeId", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x2980b78b2f03a40bL)).super_("jetbrains.mps.lang.core.structure.NodeAttribute").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L)).parents("jetbrains.mps.lang.core.structure.NodeAttribute").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x2980b78b2f03a418L, "nodeId", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "2990591960991114264")), new ConceptDescriptorBuilder.Prop(0x2980b78b2f03a437L, "modelId", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "2990591960991114295"))).properties("nodeId", "modelId").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "2990591960991114251")).create();
  }
  private static ConceptDescriptor createDescriptorForOverloadedOpIsApplicableFunction() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.OverloadedOpIsApplicableFunction", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x5529dae3231347deL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "6136676636349908958")).create();
  }
  private static ConceptDescriptor createDescriptorForOverloadedOpRulesContainer() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.OverloadedOpRulesContainer", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fd137d047L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11fd1380ea2L, "rule", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70bfdafbb2c9449bL), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1236165725858"))).children(new String[]{"rule"}, new boolean[]{true}).rootable().alias("Overloaded Operations Rules Container", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1236165709895")).create();
  }
  private static ConceptDescriptor createDescriptorForOverloadedOpTypeRule_OneTypeSpecified() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.OverloadedOpTypeRule_OneTypeSpecified", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70bfdafbb2c80edcL)).super_("jetbrains.mps.lang.typesystem.structure.AbstractOverloadedOpsTypeRule").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70bfdafbb2c9449bL)).parents("jetbrains.mps.lang.typesystem.structure.AbstractOverloadedOpsTypeRule").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70bfdafbb2c9449bL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x70bfdafbb2c80eddL, "isExact", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "8124453027370766045")), new ConceptDescriptorBuilder.Prop(0x280bd628de01b55dL, "isStrong", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "2885635457272624477"))).properties("isExact", "isStrong").childDescriptors(new ConceptDescriptorBuilder.Link(0x70bfdafbb2c944b6L, "operandType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "8124453027370845366"))).children(new String[]{"operandType"}, new boolean[]{false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "8124453027370766044")).create();
  }
  private static ConceptDescriptor createDescriptorForOverloadedOperatorTypeFunction() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeFunction", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fcc4bffaeL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1236083146670")).create();
  }
  private static ConceptDescriptor createDescriptorForOverloadedOperatorTypeRule() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.OverloadedOperatorTypeRule", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fcc4a641fL)).super_("jetbrains.mps.lang.typesystem.structure.AbstractOverloadedOpsTypeRule").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70bfdafbb2c9449bL)).parents("jetbrains.mps.lang.typesystem.structure.AbstractOverloadedOpsTypeRule").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70bfdafbb2c9449bL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x11ff554a52cL, "leftIsExact", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1236771579180")), new ConceptDescriptorBuilder.Prop(0x11ff554bf2bL, "rightIsExact", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1236771585835")), new ConceptDescriptorBuilder.Prop(0x43d6327a3f3361dfL, "rightIsStrong", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "4888149946184983007")), new ConceptDescriptorBuilder.Prop(0x43d6327a3f3361e0L, "leftIsStrong", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "4888149946184983008"))).properties("leftIsExact", "rightIsExact", "rightIsStrong", "leftIsStrong").childDescriptors(new ConceptDescriptorBuilder.Link(0x11fcc4b8423L, "leftOperandType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1236083115043")), new ConceptDescriptorBuilder.Link(0x11fcc4b84c0L, "rightOperandType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1236083115200"))).children(new String[]{"leftOperandType", "rightOperandType"}, new boolean[]{false, false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1236083041311")).create();
  }
  private static ConceptDescriptor createDescriptorForOverridesConceptFunction() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.OverridesConceptFunction", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1885777d1370d97bL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1766949807893567867")).create();
  }
  private static ConceptDescriptor createDescriptorForPatternCondition() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.PatternCondition", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e2c3e68L)).super_("jetbrains.mps.lang.typesystem.structure.ApplicableNodeCondition").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e29d976L)).parents("jetbrains.mps.lang.typesystem.structure.ApplicableNodeCondition").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e29d976L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1117e2ccbe9L, "pattern", MetaIdFactory.conceptId(0xd4615e3bd6714ba9L, 0xaf012b78369b0ba7L, 0x108a9cb4791L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174642936809"))).children(new String[]{"pattern"}, new boolean[]{false}).alias("pattern condition", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174642900584")).create();
  }
  private static ConceptDescriptor createDescriptorForPatternVariableReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.PatternVariableReference", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11192d10036L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x11192d17e60L, "patternVarDecl", MetaIdFactory.conceptId(0xd4615e3bd6714ba9L, 0xaf012b78369b0ba7L, 0x108a9cb4793L), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174989274720"))).references("patternVarDecl").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174989242422")).create();
  }
  private static ConceptDescriptor createDescriptorForPrintToTrace() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.PrintToTrace", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x76b48f1c91e9de8L)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x3b01a2c8e2312d10L, "message", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "4251858506886491408"))).children(new String[]{"message"}, new boolean[]{false}).alias("print to trace", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "534601184072080872")).create();
  }
  private static ConceptDescriptor createDescriptorForProcessed() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.Processed", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11cd732687dL)).super_("jetbrains.mps.lang.core.structure.NodeAttribute").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L)).parents("jetbrains.mps.lang.core.structure.NodeAttribute").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x2eb1ad060897da54L)).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1223381117053")).create();
  }
  private static ConceptDescriptor createDescriptorForPropertyMessageTarget() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.PropertyMessageTarget", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a6a000L)).super_("jetbrains.mps.lang.typesystem.structure.MessageTarget").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a65783L)).parents("jetbrains.mps.lang.typesystem.structure.MessageTarget").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a65783L)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x11db4a6fbeeL, "propertyDeclaration", MetaIdFactory.conceptId(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1227096521710"))).references("propertyDeclaration").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1227096498176")).create();
  }
  private static ConceptDescriptor createDescriptorForPropertyNameTarget() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.PropertyNameTarget", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db54b106bL)).super_("jetbrains.mps.lang.typesystem.structure.MessageTarget").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a65783L)).parents("jetbrains.mps.lang.typesystem.structure.MessageTarget").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a65783L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11db54c4ff3L, "propertyName", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1227107356659"))).children(new String[]{"propertyName"}, new boolean[]{false}).alias("property name", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1227107274859")).create();
  }
  private static ConceptDescriptor createDescriptorForPropertyPatternVariableReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.PropertyPatternVariableReference", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11192d97ff9L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x11192d9d83cL, "patternVarDecl", MetaIdFactory.conceptId(0xd4615e3bd6714ba9L, 0xaf012b78369b0ba7L, 0x108a9cb4795L), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174989822012"))).references("patternVarDecl").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174989799417")).create();
  }
  private static ConceptDescriptor createDescriptorForQuickFixArgument() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.QuickFixArgument", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b361afb76L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11b361b6d1fL, "argumentType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1216383511839"))).children(new String[]{"argumentType"}, new boolean[]{false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1216383482742")).create();
  }
  private static ConceptDescriptor createDescriptorForQuickFixArgumentReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.QuickFixArgumentReference", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b3683c009L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x11b3683c00aL, "quickFixArgument", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b361afb76L), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1216390348810"))).references("quickFixArgument").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1216390348809")).create();
  }
  private static ConceptDescriptor createDescriptorForQuickFixDescriptionBlock() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.QuickFixDescriptionBlock", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b368d7f20L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).alias("description", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1216390987552")).create();
  }
  private static ConceptDescriptor createDescriptorForQuickFixExecuteBlock() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.QuickFixExecuteBlock", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b3617feddL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).alias("execute", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1216383287005")).create();
  }
  private static ConceptDescriptor createDescriptorForQuickFixField() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.QuickFixField", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70489eee8478e93eL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x70489eee8478e93fL, "fieldType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "8090891477833017663"))).children(new String[]{"fieldType"}, new boolean[]{false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "8090891477833017662")).create();
  }
  private static ConceptDescriptor createDescriptorForQuickFixFieldReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.QuickFixFieldReference", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70489eee8479b55dL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x70489eee8479b55eL, "quickFixField", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70489eee8478e93eL), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "8090891477833069918"))).references("quickFixField").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "8090891477833069917")).create();
  }
  private static ConceptDescriptor createDescriptorForQuickFixSetSelectionBlock() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.QuickFixSetSelectionBlock", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x335fe1d0b7494a6dL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).alias("set selection", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "3701925705266317933")).create();
  }
  private static ConceptDescriptor createDescriptorForReferenceMessageTarget() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ReferenceMessageTarget", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a87c94L)).super_("jetbrains.mps.lang.typesystem.structure.MessageTarget").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a65783L)).parents("jetbrains.mps.lang.typesystem.structure.MessageTarget").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a65783L)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x11db4a8e070L, "linkDeclaration", MetaIdFactory.conceptId(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1227096645744"))).references("linkDeclaration").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1227096620180")).create();
  }
  private static ConceptDescriptor createDescriptorForReferenceRoleTarget() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ReferenceRoleTarget", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db54de8fdL)).super_("jetbrains.mps.lang.typesystem.structure.MessageTarget").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a65783L)).parents("jetbrains.mps.lang.typesystem.structure.MessageTarget").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a65783L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11db54e3613L, "referenceRole", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1227107481107"))).children(new String[]{"referenceRole"}, new boolean[]{false}).alias("reference role", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1227107461373")).create();
  }
  private static ConceptDescriptor createDescriptorForReplacementRuleReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ReplacementRuleReference", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x4cffb708491a734cL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x3a41abe5fdd9c5bfL, "fqName", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "4197825331980780991"))).properties("fqName").referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x4cffb708491a734dL, "replacementRule", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x117c5668bf2L), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "5548354512157832013"))).references("replacementRule").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "5548354512157832012")).create();
  }
  private static ConceptDescriptor createDescriptorForReportErrorStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ReportErrorStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111b251a62aL)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.typesystem.structure.MessageStatement").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4aad802L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x111b252f0c9L, "errorString", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1175517851849"))).children(new String[]{"errorString"}, new boolean[]{false}).alias("error", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1175517767210")).create();
  }
  private static ConceptDescriptor createDescriptorForReportErrorStatementAnnotation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.ReportErrorStatementAnnotation", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x6ee9803e48223f2eL)).super_("jetbrains.mps.lang.typesystem.structure.MessageStatementAnnotation").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x2bb0fe622a9eb078L)).parents("jetbrains.mps.lang.typesystem.structure.MessageStatementAnnotation").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x2bb0fe622a9eb078L)).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "7992060018732187438")).create();
  }
  private static ConceptDescriptor createDescriptorForRightOperandType_parameter() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.RightOperandType_parameter", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fcc4d8edaL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("rightOperandType", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1236083248858")).create();
  }
  private static ConceptDescriptor createDescriptorForRuntimeErrorType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.RuntimeErrorType", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956f9L)).super_("jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956fbL)).parents("jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956fbL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x113f84956faL, "errorText", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1185281562362")), new ConceptDescriptorBuilder.Prop(0x11425f70aaaL, "nodeId", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1186047920810")), new ConceptDescriptorBuilder.Prop(0x11425f7340cL, "nodeModel", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1186047931404"))).properties("errorText", "nodeId", "nodeModel").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1185281562361")).create();
  }
  private static ConceptDescriptor createDescriptorForRuntimeHoleType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.RuntimeHoleType", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e68800741L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1230113867585")).create();
  }
  private static ConceptDescriptor createDescriptorForRuntimeListVariable() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.RuntimeListVariable", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11831ae86e3L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1203424364259")).create();
  }
  private static ConceptDescriptor createDescriptorForRuntimeTypeVariable() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.RuntimeTypeVariable", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956fbL)).super_("jetbrains.mps.baseLanguage.structure.Type").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).parents("jetbrains.mps.baseLanguage.structure.Type", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1185281562363")).create();
  }
  private static ConceptDescriptor createDescriptorForSelectionType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.SelectionType", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x611e7dc14a6926c8L)).super_("jetbrains.mps.baseLanguage.structure.Type").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).parents("jetbrains.mps.baseLanguage.structure.Type").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).alias("selection", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "6998169140110894792")).create();
  }
  private static ConceptDescriptor createDescriptorForSubstituteTypeRule() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.SubstituteTypeRule", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x58e32a0782bca52aL)).super_("jetbrains.mps.lang.typesystem.structure.AbstractRule").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e7b5c73L)).parents("jetbrains.mps.lang.typesystem.structure.AbstractRule", "jetbrains.mps.lang.typesystem.structure.IRuleWithOneNode", "jetbrains.mps.baseLanguage.structure.IMethodLike", "jetbrains.mps.lang.core.structure.InterfacePart").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e7b5c73L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3e3c1137fe6cb778L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1208f458d37L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x12509ddfaa98f128L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x65a1a729b445aec0L, "body", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "7323318266641100480"))).children(new String[]{"body"}, new boolean[]{false}).rootable().alias("Substitute Type Rule", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "6405009306797516074")).create();
  }
  private static ConceptDescriptor createDescriptorForSubtypingRule() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.SubtypingRule", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1119c426ccaL)).super_("jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1119c40dfb0L)).parents("jetbrains.mps.lang.typesystem.structure.AbstractSubtypingRule", "jetbrains.mps.lang.typesystem.structure.IRuleWithOneNode").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1119c40dfb0L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3e3c1137fe6cb778L)).rootable().alias("Subtyping Rule", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1175147670730")).create();
  }
  private static ConceptDescriptor createDescriptorForSupersedeConceptFunction() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.SupersedeConceptFunction", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x65684a1aee252403L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "7307171874933646339")).create();
  }
  private static ConceptDescriptor createDescriptorForTypeCheckerAccessExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.TypeCheckerAccessExpression", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111b6ea6b9bL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).alias("typechecker", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1175594888091")).create();
  }
  private static ConceptDescriptor createDescriptorForTypeClause() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.TypeClause", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x114168188c7L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1185788561607")).create();
  }
  private static ConceptDescriptor createDescriptorForTypeOfExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.TypeOfExpression", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f0ad10aL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1163f02bfe7L, "skipDependencyOnCurrent", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1195058053095"))).properties("skipDependencyOnCurrent").childDescriptors(new ConceptDescriptorBuilder.Link(0x1117f0b26bdL, "term", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174657509053"))).children(new String[]{"term"}, new boolean[]{false}).alias("typeof", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174657487114")).create();
  }
  private static ConceptDescriptor createDescriptorForTypeVarDeclaration() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.TypeVarDeclaration", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f85df7bL)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1117f867709L, "nullable", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174665590537"))).properties("nullable").alias("var", "typesystem's type variable").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174665551739")).create();
  }
  private static ConceptDescriptor createDescriptorForTypeVarReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.TypeVarReference", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f90b04cL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x1117f90eda3L, "typeVarDeclaration", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f85df7bL), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174666276259"))).references("typeVarDeclaration").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1174666260556")).create();
  }
  private static ConceptDescriptor createDescriptorForTypesystemIntention() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.TypesystemIntention", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x119e85e030eL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x11b26df4083L, "applyImmediately", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1216127910019"))).properties("applyImmediately").referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x11b3667ec7bL, "quickFix", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b36163865L), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1216388525179"))).references("quickFix").childDescriptors(new ConceptDescriptorBuilder.Link(0x119e8613016L, "actualArgument", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x119e85f8628L), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1210784493590"))).children(new String[]{"actualArgument"}, new boolean[]{true}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1210784285454")).create();
  }
  private static ConceptDescriptor createDescriptorForTypesystemIntentionArgument() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.TypesystemIntentionArgument", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x119e85f8628L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x11b3650a4b4L, "quickFixArgument", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b361afb76L), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1216386999476"))).references("quickFixArgument").childDescriptors(new ConceptDescriptorBuilder.Link(0x119e86376beL, "value", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1210784642750"))).children(new String[]{"value"}, new boolean[]{false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1210784384552")).create();
  }
  private static ConceptDescriptor createDescriptorForTypesystemQuickFix() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.TypesystemQuickFix", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b36163865L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11b361a1836L, "executeBlock", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b3617feddL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1216383424566")), new ConceptDescriptorBuilder.Link(0x11b368e66c8L, "descriptionBlock", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b368d7f20L), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1216391046856")), new ConceptDescriptorBuilder.Link(0x335fe1d0b7494de7L, "setSelectionBlock", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x335fe1d0b7494a6dL), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "3701925705266318823")), new ConceptDescriptorBuilder.Link(0x11b361ae27eL, "quickFixArgument", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b361afb76L), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1216383476350")), new ConceptDescriptorBuilder.Link(0x70489eee847aabdfL, "quickFixField", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70489eee8478e93eL), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "8090891477833133023"))).children(new String[]{"executeBlock", "descriptionBlock", "setSelectionBlock", "quickFixArgument", "quickFixField"}, new boolean[]{false, false, false, true, true}).rootable().alias("Quick Fix", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1216383170661")).create();
  }
  private static ConceptDescriptor createDescriptorForVariableConverterItem() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.VariableConverterItem", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e073a595aL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11e0740e3bfL, "applicableBlock", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e0740f5fbL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1228482339775")), new ConceptDescriptorBuilder.Link(0x11e0740d217L, "convertBlock", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e074487bbL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1228482335255"))).children(new String[]{"applicableBlock", "convertBlock"}, new boolean[]{false, false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1228481911130")).create();
  }
  private static ConceptDescriptor createDescriptorForVariableConverterItem_ApplicableBlock() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ApplicableBlock", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e0740f5fbL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1228482344443")).create();
  }
  private static ConceptDescriptor createDescriptorForVariableConverterItem_ConvertBlock() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.VariableConverterItem_ConvertBlock", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e074487bbL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1228482578363")).create();
  }
  private static ConceptDescriptor createDescriptorForVariableConvertersContainer() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.VariableConvertersContainer", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e07487edcL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11e0749bd06L, "converterItem", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e073a595aL), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1228482919686"))).children(new String[]{"converterItem"}, new boolean[]{true}).rootable().alias("Variable Converters Container", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1228482838236")).create();
  }
  private static ConceptDescriptor createDescriptorForWarningStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.WarningStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1190a1db131L)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.lang.typesystem.structure.MessageStatement").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4aad802L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1190a1e0f30L, "warningText", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1207055552304"))).children(new String[]{"warningText"}, new boolean[]{false}).alias("warning", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1207055528241")).create();
  }
  private static ConceptDescriptor createDescriptorForWarningStatementAnnotation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.WarningStatementAnnotation", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x6ee9803e48223f34L)).super_("jetbrains.mps.lang.typesystem.structure.MessageStatementAnnotation").version(1).super_(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x2bb0fe622a9eb078L)).parents("jetbrains.mps.lang.typesystem.structure.MessageStatementAnnotation").parentIds(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x2bb0fe622a9eb078L)).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "7992060018732187444")).create();
  }
  private static ConceptDescriptor createDescriptorForWasSelectedNodeOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.WasSelectedNodeOperation", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0xef0542bbc39506eL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L)).alias("wasSelectedNode", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1076452857759748206")).create();
  }
  private static ConceptDescriptor createDescriptorForWhenConcreteStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.WhenConcreteStatement", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x114177ce6cdL)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.structure.Closureoid", "jetbrains.mps.baseLanguage.structure.IControlFlowInterrupter").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1192e7dfdd1L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x7c8556154508e980L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x11dbf947714L, "isShallow", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1227279857428")), new ConceptDescriptorBuilder.Prop(0x11f3692d9c3L, "skipsError", new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1233571207619"))).properties("isShallow", "skipsError").childDescriptors(new ConceptDescriptorBuilder.Link(0x114177d17f1L, "body", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1185805047793")), new ConceptDescriptorBuilder.Link(0x114177d39c2L, "argument", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1185805056450")), new ConceptDescriptorBuilder.Link(0x118bd03e53bL, "argumentRepresentator", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x118bd05a27aL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1205761991995"))).children(new String[]{"body", "argument", "argumentRepresentator"}, new boolean[]{false, false, false}).alias("when concrete", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1185805035213")).create();
  }
  private static ConceptDescriptor createDescriptorForWhenConcreteVariableDeclaration() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.WhenConcreteVariableDeclaration", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x118bd05a27aL)).super_("jetbrains.mps.baseLanguage.structure.VariableDeclaration").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL)).parents("jetbrains.mps.baseLanguage.structure.VariableDeclaration").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37a7f6eL)).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1205762105978")).create();
  }
  private static ConceptDescriptor createDescriptorForWhenConcreteVariableReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.typesystem.structure.WhenConcreteVariableReference", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x118bd0e07f1L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x118bd0e7418L, "whenConcreteVar", MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x118bd05a27aL), false, new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1205762683928"))).references("whenConcreteVar").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895902b4(jetbrains.mps.lang.typesystem.structure)", "1205762656241")).create();
  }
}
