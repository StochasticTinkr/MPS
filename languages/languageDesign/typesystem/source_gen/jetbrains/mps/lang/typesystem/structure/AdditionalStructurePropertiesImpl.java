package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_AbstractCheckingRule = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AbstractComparableStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AbstractEquationStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AbstractInequationStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AbstractOverloadedOpsTypeRule = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AbstractRule = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AbstractSubtypingRule = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AddDependencyStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ApplicableNodeCondition = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ApplicableNodeReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AssertStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AttributedNodeExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CaretPositionOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CoerceExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CoerceStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CoerceStrongExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ComparisonRule = new ConceptPropsBuilder().icon("comparison.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_ConceptClauseLinkInfo = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_ConceptFunctionParameter_ContextNode = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptFunctionParameter_EditorContext = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptFunctionParameter_Role = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptFunctionParameter_Selection = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptFunctionParameter_isAggregation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptFunctionParameter_node = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptFunctionParameter_var = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CreateComparableEquationStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CreateComparableEquationStatementStrong = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CreateEquationStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CreateGreaterThanInequationStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CreateLessThanInequationStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CreateStrongGreaterThanInequationStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CreateStrongLessThanInequationStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DefaultGroupReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ErrorInfoExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_GetOperationType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IRuleWithOneNode = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IRuleWithTwoNodes = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ImmediateSupertypesExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InequationReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InequationReplacementRule = new ConceptPropsBuilder().icon("replacement.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_InferenceRule = new ConceptPropsBuilder().deprecated().icon("rule.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_InfoStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InfoStatementAnnotation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IsApplicableConceptFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IsReplacementRuleApplicable_ConceptFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IsStrongSubtypeExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IsSubtypeExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_JoinContainer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_JoinType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LeftOperandType_parameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LinkPatternVariableReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MatchStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MatchStatementItem = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MeetContainer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MeetType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MessageStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MessageStatementAnnotation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MessageTarget = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MultipleForeachLoop = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_MultipleForeachLoopVariable = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_NodeInfo = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_InferTypeOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_TypeOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NonTypesystemRule = new ConceptPropsBuilder().icon("nontypesystem.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_NormalTypeClause = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Operation_parameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OrStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OriginalNodeId = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OverloadedOpIsApplicableFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OverloadedOpRulesContainer = new ConceptPropsBuilder().icon("overloadedRules.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_OverloadedOpTypeRule_OneTypeSpecified = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OverloadedOperatorTypeFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OverloadedOperatorTypeRule = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OverridesConceptFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PatternCondition = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PatternVariableReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PrintToTrace = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Processed = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PropertyMessageTarget = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PropertyNameTarget = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PropertyPatternVariableReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_QuickFixArgument = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_QuickFixArgumentReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_QuickFixDescriptionBlock = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_QuickFixExecuteBlock = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_QuickFixField = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_QuickFixFieldReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_QuickFixSetSelectionBlock = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ReferenceMessageTarget = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ReferenceRoleTarget = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ReplacementRuleReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ReportErrorStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ReportErrorStatementAnnotation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RightOperandType_parameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RuntimeErrorType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RuntimeHoleType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RuntimeListVariable = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RuntimeTypeVariable = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SelectionType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SubstituteTypeRule = new ConceptPropsBuilder().icon("substitute.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_SubtypingRule = new ConceptPropsBuilder().icon("subtyping.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_SupersedeConceptFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TypeCheckerAccessExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TypeClause = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TypeOfExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TypeVarDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TypeVarReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TypesystemIntention = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TypesystemIntentionArgument = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TypesystemQuickFix = new ConceptPropsBuilder().icon("quickFix.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_VariableConverterItem = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_VariableConverterItem_ApplicableBlock = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_VariableConverterItem_ConvertBlock = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_VariableConvertersContainer = new ConceptPropsBuilder().icon("variableReplacement.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_WarningStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_WarningStatementAnnotation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_WasSelectedNodeOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_WhenConcreteStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_WhenConcreteVariableDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_WhenConcreteVariableReference = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0se.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractCheckingRule;
          }
          break;
        case 1:
          if (true) {
            return props_AbstractComparableStatement;
          }
          break;
        case 2:
          if (true) {
            return props_AbstractEquationStatement;
          }
          break;
        case 3:
          if (true) {
            return props_AbstractInequationStatement;
          }
          break;
        case 4:
          if (true) {
            return props_AbstractOverloadedOpsTypeRule;
          }
          break;
        case 5:
          if (true) {
            return props_AbstractRule;
          }
          break;
        case 6:
          if (true) {
            return props_AbstractSubtypingRule;
          }
          break;
        case 7:
          if (true) {
            return props_AddDependencyStatement;
          }
          break;
        case 8:
          if (true) {
            return props_ApplicableNodeCondition;
          }
          break;
        case 9:
          if (true) {
            return props_ApplicableNodeReference;
          }
          break;
        case 10:
          if (true) {
            return props_AssertStatement;
          }
          break;
        case 11:
          if (true) {
            return props_AttributedNodeExpression;
          }
          break;
        case 12:
          if (true) {
            return props_CaretPositionOperation;
          }
          break;
        case 13:
          if (true) {
            return props_CoerceExpression;
          }
          break;
        case 14:
          if (true) {
            return props_CoerceStatement;
          }
          break;
        case 15:
          if (true) {
            return props_CoerceStrongExpression;
          }
          break;
        case 16:
          if (true) {
            return props_ComparisonRule;
          }
          break;
        case 17:
          if (true) {
            return props_ConceptClauseLinkInfo;
          }
          break;
        case 18:
          if (true) {
            return props_ConceptFunctionParameter_ContextNode;
          }
          break;
        case 19:
          if (true) {
            return props_ConceptFunctionParameter_EditorContext;
          }
          break;
        case 20:
          if (true) {
            return props_ConceptFunctionParameter_Role;
          }
          break;
        case 21:
          if (true) {
            return props_ConceptFunctionParameter_Selection;
          }
          break;
        case 22:
          if (true) {
            return props_ConceptFunctionParameter_isAggregation;
          }
          break;
        case 23:
          if (true) {
            return props_ConceptFunctionParameter_node;
          }
          break;
        case 24:
          if (true) {
            return props_ConceptFunctionParameter_var;
          }
          break;
        case 25:
          if (true) {
            return props_ConceptReference;
          }
          break;
        case 26:
          if (true) {
            return props_CreateComparableEquationStatement;
          }
          break;
        case 27:
          if (true) {
            return props_CreateComparableEquationStatementStrong;
          }
          break;
        case 28:
          if (true) {
            return props_CreateEquationStatement;
          }
          break;
        case 29:
          if (true) {
            return props_CreateGreaterThanInequationStatement;
          }
          break;
        case 30:
          if (true) {
            return props_CreateLessThanInequationStatement;
          }
          break;
        case 31:
          if (true) {
            return props_CreateStrongGreaterThanInequationStatement;
          }
          break;
        case 32:
          if (true) {
            return props_CreateStrongLessThanInequationStatement;
          }
          break;
        case 33:
          if (true) {
            return props_DefaultGroupReference;
          }
          break;
        case 34:
          if (true) {
            return props_ErrorInfoExpression;
          }
          break;
        case 35:
          if (true) {
            return props_GetOperationType;
          }
          break;
        case 36:
          if (true) {
            return props_IRuleWithOneNode;
          }
          break;
        case 37:
          if (true) {
            return props_IRuleWithTwoNodes;
          }
          break;
        case 38:
          if (true) {
            return props_ImmediateSupertypesExpression;
          }
          break;
        case 39:
          if (true) {
            return props_InequationReference;
          }
          break;
        case 40:
          if (true) {
            return props_InequationReplacementRule;
          }
          break;
        case 41:
          if (true) {
            return props_InferenceRule;
          }
          break;
        case 42:
          if (true) {
            return props_InfoStatement;
          }
          break;
        case 43:
          if (true) {
            return props_InfoStatementAnnotation;
          }
          break;
        case 44:
          if (true) {
            return props_IsApplicableConceptFunction;
          }
          break;
        case 45:
          if (true) {
            return props_IsReplacementRuleApplicable_ConceptFunction;
          }
          break;
        case 46:
          if (true) {
            return props_IsStrongSubtypeExpression;
          }
          break;
        case 47:
          if (true) {
            return props_IsSubtypeExpression;
          }
          break;
        case 48:
          if (true) {
            return props_JoinContainer;
          }
          break;
        case 49:
          if (true) {
            return props_JoinType;
          }
          break;
        case 50:
          if (true) {
            return props_LeftOperandType_parameter;
          }
          break;
        case 51:
          if (true) {
            return props_LinkPatternVariableReference;
          }
          break;
        case 52:
          if (true) {
            return props_MatchStatement;
          }
          break;
        case 53:
          if (true) {
            return props_MatchStatementItem;
          }
          break;
        case 54:
          if (true) {
            return props_MeetContainer;
          }
          break;
        case 55:
          if (true) {
            return props_MeetType;
          }
          break;
        case 56:
          if (true) {
            return props_MessageStatement;
          }
          break;
        case 57:
          if (true) {
            return props_MessageStatementAnnotation;
          }
          break;
        case 58:
          if (true) {
            return props_MessageTarget;
          }
          break;
        case 59:
          if (true) {
            return props_MultipleForeachLoop;
          }
          break;
        case 60:
          if (true) {
            return props_MultipleForeachLoopVariable;
          }
          break;
        case 61:
          if (true) {
            return props_NodeInfo;
          }
          break;
        case 62:
          if (true) {
            return props_Node_InferTypeOperation;
          }
          break;
        case 63:
          if (true) {
            return props_Node_TypeOperation;
          }
          break;
        case 64:
          if (true) {
            return props_NonTypesystemRule;
          }
          break;
        case 65:
          if (true) {
            return props_NormalTypeClause;
          }
          break;
        case 66:
          if (true) {
            return props_Operation_parameter;
          }
          break;
        case 67:
          if (true) {
            return props_OrStatement;
          }
          break;
        case 68:
          if (true) {
            return props_OriginalNodeId;
          }
          break;
        case 69:
          if (true) {
            return props_OverloadedOpIsApplicableFunction;
          }
          break;
        case 70:
          if (true) {
            return props_OverloadedOpRulesContainer;
          }
          break;
        case 71:
          if (true) {
            return props_OverloadedOpTypeRule_OneTypeSpecified;
          }
          break;
        case 72:
          if (true) {
            return props_OverloadedOperatorTypeFunction;
          }
          break;
        case 73:
          if (true) {
            return props_OverloadedOperatorTypeRule;
          }
          break;
        case 74:
          if (true) {
            return props_OverridesConceptFunction;
          }
          break;
        case 75:
          if (true) {
            return props_PatternCondition;
          }
          break;
        case 76:
          if (true) {
            return props_PatternVariableReference;
          }
          break;
        case 77:
          if (true) {
            return props_PrintToTrace;
          }
          break;
        case 78:
          if (true) {
            return props_Processed;
          }
          break;
        case 79:
          if (true) {
            return props_PropertyMessageTarget;
          }
          break;
        case 80:
          if (true) {
            return props_PropertyNameTarget;
          }
          break;
        case 81:
          if (true) {
            return props_PropertyPatternVariableReference;
          }
          break;
        case 82:
          if (true) {
            return props_QuickFixArgument;
          }
          break;
        case 83:
          if (true) {
            return props_QuickFixArgumentReference;
          }
          break;
        case 84:
          if (true) {
            return props_QuickFixDescriptionBlock;
          }
          break;
        case 85:
          if (true) {
            return props_QuickFixExecuteBlock;
          }
          break;
        case 86:
          if (true) {
            return props_QuickFixField;
          }
          break;
        case 87:
          if (true) {
            return props_QuickFixFieldReference;
          }
          break;
        case 88:
          if (true) {
            return props_QuickFixSetSelectionBlock;
          }
          break;
        case 89:
          if (true) {
            return props_ReferenceMessageTarget;
          }
          break;
        case 90:
          if (true) {
            return props_ReferenceRoleTarget;
          }
          break;
        case 91:
          if (true) {
            return props_ReplacementRuleReference;
          }
          break;
        case 92:
          if (true) {
            return props_ReportErrorStatement;
          }
          break;
        case 93:
          if (true) {
            return props_ReportErrorStatementAnnotation;
          }
          break;
        case 94:
          if (true) {
            return props_RightOperandType_parameter;
          }
          break;
        case 95:
          if (true) {
            return props_RuntimeErrorType;
          }
          break;
        case 96:
          if (true) {
            return props_RuntimeHoleType;
          }
          break;
        case 97:
          if (true) {
            return props_RuntimeListVariable;
          }
          break;
        case 98:
          if (true) {
            return props_RuntimeTypeVariable;
          }
          break;
        case 99:
          if (true) {
            return props_SelectionType;
          }
          break;
        case 100:
          if (true) {
            return props_SubstituteTypeRule;
          }
          break;
        case 101:
          if (true) {
            return props_SubtypingRule;
          }
          break;
        case 102:
          if (true) {
            return props_SupersedeConceptFunction;
          }
          break;
        case 103:
          if (true) {
            return props_TypeCheckerAccessExpression;
          }
          break;
        case 104:
          if (true) {
            return props_TypeClause;
          }
          break;
        case 105:
          if (true) {
            return props_TypeOfExpression;
          }
          break;
        case 106:
          if (true) {
            return props_TypeVarDeclaration;
          }
          break;
        case 107:
          if (true) {
            return props_TypeVarReference;
          }
          break;
        case 108:
          if (true) {
            return props_TypesystemIntention;
          }
          break;
        case 109:
          if (true) {
            return props_TypesystemIntentionArgument;
          }
          break;
        case 110:
          if (true) {
            return props_TypesystemQuickFix;
          }
          break;
        case 111:
          if (true) {
            return props_VariableConverterItem;
          }
          break;
        case 112:
          if (true) {
            return props_VariableConverterItem_ApplicableBlock;
          }
          break;
        case 113:
          if (true) {
            return props_VariableConverterItem_ConvertBlock;
          }
          break;
        case 114:
          if (true) {
            return props_VariableConvertersContainer;
          }
          break;
        case 115:
          if (true) {
            return props_WarningStatement;
          }
          break;
        case 116:
          if (true) {
            return props_WarningStatementAnnotation;
          }
          break;
        case 117:
          if (true) {
            return props_WasSelectedNodeOperation;
          }
          break;
        case 118:
          if (true) {
            return props_WhenConcreteStatement;
          }
          break;
        case 119:
          if (true) {
            return props_WhenConcreteVariableDeclaration;
          }
          break;
        case 120:
          if (true) {
            return props_WhenConcreteVariableReference;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0se = buildConceptIndices(MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1164847e929L, "AbstractCheckingRule"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3be2294807013eb7L, "AbstractComparableStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f3c1ffaL, "AbstractEquationStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11a342c1412L, "AbstractInequationStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70bfdafbb2c9449bL, "AbstractOverloadedOpsTypeRule"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e7b5c73L, "AbstractRule"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1119c40dfb0L, "AbstractSubtypingRule"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11c22f6c964L, "AddDependencyStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e29d976L, "ApplicableNodeCondition"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e9ef5dcL, "ApplicableNodeReference"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111b24c0cd8L, "AssertStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x2152354b0d500086L, "AttributedNodeExpression"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0xef0542bbc395068L, "CaretPositionOperation"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1127a2a14aeL, "CoerceExpression"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111f05e2451L, "CoerceStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1127a376a3dL, "CoerceStrongExpression"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x114caade477L, "ComparisonRule"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x120c8f8641eL, "ConceptClauseLinkInfo"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e078ffb82L, "ConceptFunctionParameter_ContextNode"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x335fe1d0b7494cfcL, "ConceptFunctionParameter_EditorContext"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e078e410eL, "ConceptFunctionParameter_Role"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x611e7dc14a69a014L, "ConceptFunctionParameter_Selection"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e078ecdbdL, "ConceptFunctionParameter_isAggregation"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b3618c300L, "ConceptFunctionParameter_node"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e07431ba7L, "ConceptFunctionParameter_var"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e2a88b3L, "ConceptReference"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f63bc23L, "CreateComparableEquationStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x112c36bc7ecL, "CreateComparableEquationStatementStrong"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f179e8dL, "CreateEquationStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f62956cL, "CreateGreaterThanInequationStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f60bfd5L, "CreateLessThanInequationStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x31c3185c17a0f767L, "CreateStrongGreaterThanInequationStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x112b37f1b6eL, "CreateStrongLessThanInequationStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x12541e5f229acee2L, "DefaultGroupReference"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x117c6082b85L, "ErrorInfoExpression"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fd11186b7L, "GetOperationType"), MetaAdapterFactory.getInterfaceConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3e3c1137fe6cb778L, "IRuleWithOneNode"), MetaAdapterFactory.getInterfaceConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3e3c1137fe6cb779L, "IRuleWithTwoNodes"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1120ebd8531L, "ImmediateSupertypesExpression"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x42501924d0bd1913L, "InequationReference"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x117c5668bf2L, "InequationReplacementRule"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e2f5efaL, "InferenceRule"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11d2965916bL, "InfoStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x6ee9803e48223f31L, "InfoStatementAnnotation"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x669222c8f1941d7fL, "IsApplicableConceptFunction"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x31d99a115038e5e8L, "IsReplacementRuleApplicable_ConceptFunction"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11222e251f1L, "IsStrongSubtypeExpression"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111ef7b9fb7L, "IsSubtypeExpression"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1206cda22fcL, "JoinContainer"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1129e737f02L, "JoinType"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fcc4cf5b0L, "LeftOperandType_parameter"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11192d92ad3L, "LinkPatternVariableReference"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1122952fb1dL, "MatchStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x112295a8fecL, "MatchStatementItem"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1206cd802f8L, "MeetContainer"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x114b68ad132L, "MeetType"), MetaAdapterFactory.getInterfaceConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4aad802L, "MessageStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x2bb0fe622a9eb078L, "MessageStatementAnnotation"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a65783L, "MessageTarget"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111efb6d46fL, "MultipleForeachLoop"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111efb75e90L, "MultipleForeachLoopVariable"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x5dffc3ada5b76687L, "NodeInfo"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x584039bf75272c67L, "Node_InferTypeOperation"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111ef7d5e03L, "Node_TypeOperation"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1164853e0faL, "NonTypesystemRule"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1141682561cL, "NormalTypeClause"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fcc4d8298L, "Operation_parameter"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0xba3b706cf9561ecL, "OrStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x2980b78b2f03a40bL, "OriginalNodeId"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x5529dae3231347deL, "OverloadedOpIsApplicableFunction"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fd137d047L, "OverloadedOpRulesContainer"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70bfdafbb2c80edcL, "OverloadedOpTypeRule_OneTypeSpecified"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fcc4bffaeL, "OverloadedOperatorTypeFunction"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fcc4a641fL, "OverloadedOperatorTypeRule"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1885777d1370d97bL, "OverridesConceptFunction"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e2c3e68L, "PatternCondition"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11192d10036L, "PatternVariableReference"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x76b48f1c91e9de8L, "PrintToTrace"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11cd732687dL, "Processed"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a6a000L, "PropertyMessageTarget"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db54b106bL, "PropertyNameTarget"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11192d97ff9L, "PropertyPatternVariableReference"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b361afb76L, "QuickFixArgument"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b3683c009L, "QuickFixArgumentReference"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b368d7f20L, "QuickFixDescriptionBlock"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b3617feddL, "QuickFixExecuteBlock"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70489eee8478e93eL, "QuickFixField"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70489eee8479b55dL, "QuickFixFieldReference"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x335fe1d0b7494a6dL, "QuickFixSetSelectionBlock"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a87c94L, "ReferenceMessageTarget"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db54de8fdL, "ReferenceRoleTarget"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x4cffb708491a734cL, "ReplacementRuleReference"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111b251a62aL, "ReportErrorStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x6ee9803e48223f2eL, "ReportErrorStatementAnnotation"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fcc4d8edaL, "RightOperandType_parameter"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956f9L, "RuntimeErrorType"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e68800741L, "RuntimeHoleType"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11831ae86e3L, "RuntimeListVariable"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956fbL, "RuntimeTypeVariable"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x611e7dc14a6926c8L, "SelectionType"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x58e32a0782bca52aL, "SubstituteTypeRule"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1119c426ccaL, "SubtypingRule"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x65684a1aee252403L, "SupersedeConceptFunction"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111b6ea6b9bL, "TypeCheckerAccessExpression"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x114168188c7L, "TypeClause"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f0ad10aL, "TypeOfExpression"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f85df7bL, "TypeVarDeclaration"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f90b04cL, "TypeVarReference"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x119e85e030eL, "TypesystemIntention"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x119e85f8628L, "TypesystemIntentionArgument"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b36163865L, "TypesystemQuickFix"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e073a595aL, "VariableConverterItem"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e0740f5fbL, "VariableConverterItem_ApplicableBlock"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e074487bbL, "VariableConverterItem_ConvertBlock"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e07487edcL, "VariableConvertersContainer"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1190a1db131L, "WarningStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x6ee9803e48223f34L, "WarningStatementAnnotation"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0xef0542bbc39506eL, "WasSelectedNodeOperation"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x114177ce6cdL, "WhenConcreteStatement"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x118bd05a27aL, "WhenConcreteVariableDeclaration"), MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x118bd0e07f1L, "WhenConcreteVariableReference"));
}
