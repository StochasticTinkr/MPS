package jetbrains.mps.lang.typesystem.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myApplicableNodeCondition__BehaviorDescriptor = new ApplicableNodeCondition__BehaviorDescriptor();
  private final BHDescriptor myConceptReference__BehaviorDescriptor = new ConceptReference__BehaviorDescriptor();
  private final BHDescriptor myPatternCondition__BehaviorDescriptor = new PatternCondition__BehaviorDescriptor();
  private final BHDescriptor myInferenceRule__BehaviorDescriptor = new InferenceRule__BehaviorDescriptor();
  private final BHDescriptor myAbstractRule__BehaviorDescriptor = new AbstractRule__BehaviorDescriptor();
  private final BHDescriptor myApplicableNodeReference__BehaviorDescriptor = new ApplicableNodeReference__BehaviorDescriptor();
  private final BHDescriptor myTypeOfExpression__BehaviorDescriptor = new TypeOfExpression__BehaviorDescriptor();
  private final BHDescriptor myTypeVarReference__BehaviorDescriptor = new TypeVarReference__BehaviorDescriptor();
  private final BHDescriptor myAbstractSubtypingRule__BehaviorDescriptor = new AbstractSubtypingRule__BehaviorDescriptor();
  private final BHDescriptor mySubtypingRule__BehaviorDescriptor = new SubtypingRule__BehaviorDescriptor();
  private final BHDescriptor myReportErrorStatement__BehaviorDescriptor = new ReportErrorStatement__BehaviorDescriptor();
  private final BHDescriptor myNode_TypeOperation__BehaviorDescriptor = new Node_TypeOperation__BehaviorDescriptor();
  private final BHDescriptor myJoinType__BehaviorDescriptor = new JoinType__BehaviorDescriptor();
  private final BHDescriptor myRuntimeErrorType__BehaviorDescriptor = new RuntimeErrorType__BehaviorDescriptor();
  private final BHDescriptor myRuntimeTypeVariable__BehaviorDescriptor = new RuntimeTypeVariable__BehaviorDescriptor();
  private final BHDescriptor myMeetType__BehaviorDescriptor = new MeetType__BehaviorDescriptor();
  private final BHDescriptor myComparisonRule__BehaviorDescriptor = new ComparisonRule__BehaviorDescriptor();
  private final BHDescriptor myNonTypesystemRule__BehaviorDescriptor = new NonTypesystemRule__BehaviorDescriptor();
  private final BHDescriptor myInequationReplacementRule__BehaviorDescriptor = new InequationReplacementRule__BehaviorDescriptor();
  private final BHDescriptor myWhenConcreteVariableDeclaration__BehaviorDescriptor = new WhenConcreteVariableDeclaration__BehaviorDescriptor();
  private final BHDescriptor myWhenConcreteVariableReference__BehaviorDescriptor = new WhenConcreteVariableReference__BehaviorDescriptor();
  private final BHDescriptor myWarningStatement__BehaviorDescriptor = new WarningStatement__BehaviorDescriptor();
  private final BHDescriptor myTypesystemIntentionArgument__BehaviorDescriptor = new TypesystemIntentionArgument__BehaviorDescriptor();
  private final BHDescriptor myAbstractInequationStatement__BehaviorDescriptor = new AbstractInequationStatement__BehaviorDescriptor();
  private final BHDescriptor myQuickFixExecuteBlock__BehaviorDescriptor = new QuickFixExecuteBlock__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_node__BehaviorDescriptor = new ConceptFunctionParameter_node__BehaviorDescriptor();
  private final BHDescriptor myQuickFixDescriptionBlock__BehaviorDescriptor = new QuickFixDescriptionBlock__BehaviorDescriptor();
  private final BHDescriptor myProcessed__BehaviorDescriptor = new Processed__BehaviorDescriptor();
  private final BHDescriptor myInfoStatement__BehaviorDescriptor = new InfoStatement__BehaviorDescriptor();
  private final BHDescriptor myMessageStatement__BehaviorDescriptor = new MessageStatement__BehaviorDescriptor();
  private final BHDescriptor myVariableConverterItem_ApplicableBlock__BehaviorDescriptor = new VariableConverterItem_ApplicableBlock__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_var__BehaviorDescriptor = new ConceptFunctionParameter_var__BehaviorDescriptor();
  private final BHDescriptor myVariableConverterItem_ConvertBlock__BehaviorDescriptor = new VariableConverterItem_ConvertBlock__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_Role__BehaviorDescriptor = new ConceptFunctionParameter_Role__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_isAggregation__BehaviorDescriptor = new ConceptFunctionParameter_isAggregation__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_ContextNode__BehaviorDescriptor = new ConceptFunctionParameter_ContextNode__BehaviorDescriptor();
  private final BHDescriptor myOverloadedOperatorTypeFunction__BehaviorDescriptor = new OverloadedOperatorTypeFunction__BehaviorDescriptor();
  private final BHDescriptor myLeftOperandType_parameter__BehaviorDescriptor = new LeftOperandType_parameter__BehaviorDescriptor();
  private final BHDescriptor myOperation_parameter__BehaviorDescriptor = new Operation_parameter__BehaviorDescriptor();
  private final BHDescriptor myRightOperandType_parameter__BehaviorDescriptor = new RightOperandType_parameter__BehaviorDescriptor();
  private final BHDescriptor myMeetContainer__BehaviorDescriptor = new MeetContainer__BehaviorDescriptor();
  private final BHDescriptor myJoinContainer__BehaviorDescriptor = new JoinContainer__BehaviorDescriptor();
  private final BHDescriptor myDefaultGroupReference__BehaviorDescriptor = new DefaultGroupReference__BehaviorDescriptor();
  private final BHDescriptor myOverridesConceptFunction__BehaviorDescriptor = new OverridesConceptFunction__BehaviorDescriptor();
  private final BHDescriptor myOriginalNodeId__BehaviorDescriptor = new OriginalNodeId__BehaviorDescriptor();
  private final BHDescriptor myIsReplacementRuleApplicable_ConceptFunction__BehaviorDescriptor = new IsReplacementRuleApplicable_ConceptFunction__BehaviorDescriptor();
  private final BHDescriptor myQuickFixSetSelectionBlock__BehaviorDescriptor = new QuickFixSetSelectionBlock__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_EditorContext__BehaviorDescriptor = new ConceptFunctionParameter_EditorContext__BehaviorDescriptor();
  private final BHDescriptor myIRuleWithTwoNodes__BehaviorDescriptor = new IRuleWithTwoNodes__BehaviorDescriptor();
  private final BHDescriptor myOverloadedOpIsApplicableFunction__BehaviorDescriptor = new OverloadedOpIsApplicableFunction__BehaviorDescriptor();
  private final BHDescriptor myNode_InferTypeOperation__BehaviorDescriptor = new Node_InferTypeOperation__BehaviorDescriptor();
  private final BHDescriptor mySubstituteTypeRule__BehaviorDescriptor = new SubstituteTypeRule__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_Selection__BehaviorDescriptor = new ConceptFunctionParameter_Selection__BehaviorDescriptor();
  private final BHDescriptor mySupersedeConceptFunction__BehaviorDescriptor = new SupersedeConceptFunction__BehaviorDescriptor();
  private final BHDescriptor myIsApplicableConceptFunction__BehaviorDescriptor = new IsApplicableConceptFunction__BehaviorDescriptor();
  private final BHDescriptor myQuickFixFieldReference__BehaviorDescriptor = new QuickFixFieldReference__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myAbstractInequationStatement__BehaviorDescriptor;
      case 1:
        return myAbstractRule__BehaviorDescriptor;
      case 2:
        return myAbstractSubtypingRule__BehaviorDescriptor;
      case 3:
        return myApplicableNodeCondition__BehaviorDescriptor;
      case 4:
        return myApplicableNodeReference__BehaviorDescriptor;
      case 5:
        return myComparisonRule__BehaviorDescriptor;
      case 6:
        return myConceptFunctionParameter_ContextNode__BehaviorDescriptor;
      case 7:
        return myConceptFunctionParameter_EditorContext__BehaviorDescriptor;
      case 8:
        return myConceptFunctionParameter_Role__BehaviorDescriptor;
      case 9:
        return myConceptFunctionParameter_Selection__BehaviorDescriptor;
      case 10:
        return myConceptFunctionParameter_isAggregation__BehaviorDescriptor;
      case 11:
        return myConceptFunctionParameter_node__BehaviorDescriptor;
      case 12:
        return myConceptFunctionParameter_var__BehaviorDescriptor;
      case 13:
        return myConceptReference__BehaviorDescriptor;
      case 14:
        return myDefaultGroupReference__BehaviorDescriptor;
      case 15:
        return myIRuleWithTwoNodes__BehaviorDescriptor;
      case 16:
        return myInequationReplacementRule__BehaviorDescriptor;
      case 17:
        return myInferenceRule__BehaviorDescriptor;
      case 18:
        return myInfoStatement__BehaviorDescriptor;
      case 19:
        return myIsApplicableConceptFunction__BehaviorDescriptor;
      case 20:
        return myIsReplacementRuleApplicable_ConceptFunction__BehaviorDescriptor;
      case 21:
        return myJoinContainer__BehaviorDescriptor;
      case 22:
        return myJoinType__BehaviorDescriptor;
      case 23:
        return myLeftOperandType_parameter__BehaviorDescriptor;
      case 24:
        return myMeetContainer__BehaviorDescriptor;
      case 25:
        return myMeetType__BehaviorDescriptor;
      case 26:
        return myMessageStatement__BehaviorDescriptor;
      case 27:
        return myNode_InferTypeOperation__BehaviorDescriptor;
      case 28:
        return myNode_TypeOperation__BehaviorDescriptor;
      case 29:
        return myNonTypesystemRule__BehaviorDescriptor;
      case 30:
        return myOperation_parameter__BehaviorDescriptor;
      case 31:
        return myOriginalNodeId__BehaviorDescriptor;
      case 32:
        return myOverloadedOpIsApplicableFunction__BehaviorDescriptor;
      case 33:
        return myOverloadedOperatorTypeFunction__BehaviorDescriptor;
      case 34:
        return myOverridesConceptFunction__BehaviorDescriptor;
      case 35:
        return myPatternCondition__BehaviorDescriptor;
      case 36:
        return myProcessed__BehaviorDescriptor;
      case 37:
        return myQuickFixDescriptionBlock__BehaviorDescriptor;
      case 38:
        return myQuickFixExecuteBlock__BehaviorDescriptor;
      case 39:
        return myQuickFixFieldReference__BehaviorDescriptor;
      case 40:
        return myQuickFixSetSelectionBlock__BehaviorDescriptor;
      case 41:
        return myReportErrorStatement__BehaviorDescriptor;
      case 42:
        return myRightOperandType_parameter__BehaviorDescriptor;
      case 43:
        return myRuntimeErrorType__BehaviorDescriptor;
      case 44:
        return myRuntimeTypeVariable__BehaviorDescriptor;
      case 45:
        return mySubstituteTypeRule__BehaviorDescriptor;
      case 46:
        return mySubtypingRule__BehaviorDescriptor;
      case 47:
        return mySupersedeConceptFunction__BehaviorDescriptor;
      case 48:
        return myTypeOfExpression__BehaviorDescriptor;
      case 49:
        return myTypeVarReference__BehaviorDescriptor;
      case 50:
        return myTypesystemIntentionArgument__BehaviorDescriptor;
      case 51:
        return myVariableConverterItem_ApplicableBlock__BehaviorDescriptor;
      case 52:
        return myVariableConverterItem_ConvertBlock__BehaviorDescriptor;
      case 53:
        return myWarningStatement__BehaviorDescriptor;
      case 54:
        return myWhenConcreteVariableDeclaration__BehaviorDescriptor;
      case 55:
        return myWhenConcreteVariableReference__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11a342c1412L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e7b5c73L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1119c40dfb0L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e29d976L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e9ef5dcL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x114caade477L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e078ffb82L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x335fe1d0b7494cfcL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e078e410eL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x611e7dc14a69a014L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e078ecdbdL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b3618c300L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e07431ba7L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e2a88b3L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x12541e5f229acee2L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x3e3c1137fe6cb779L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x117c5668bf2L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e2f5efaL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11d2965916bL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x669222c8f1941d7fL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x31d99a115038e5e8L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1206cda22fcL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1129e737f02L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fcc4cf5b0L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1206cd802f8L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x114b68ad132L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4aad802L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x584039bf75272c67L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111ef7d5e03L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1164853e0faL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fcc4d8298L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x2980b78b2f03a40bL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x5529dae3231347deL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fcc4bffaeL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1885777d1370d97bL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e2c3e68L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11cd732687dL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b368d7f20L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b3617feddL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70489eee8479b55dL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x335fe1d0b7494a6dL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x111b251a62aL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11fcc4d8edaL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956f9L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x113f84956fbL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x58e32a0782bca52aL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1119c426ccaL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x65684a1aee252403L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f0ad10aL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f90b04cL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x119e85f8628L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e0740f5fbL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11e074487bbL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1190a1db131L), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x118bd05a27aL), MetaIdFactory.conceptId(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x118bd0e07f1L)).seal();
}
