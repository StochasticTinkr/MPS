package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractCheckingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractComparableStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractEquationStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractInequationStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractOverloadedOpsTypeRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractSubtypingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AddDependencyStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ApplicableNodeCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ApplicableNodeReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssertStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributedNodeExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CaretPositionOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CoerceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CoerceStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CoerceStrongExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ComparisonRule = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0q).create();
  private final ConceptPresentation props_ConceptClauseLinkInfo = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ConceptFunctionParameter_ContextNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_EditorContext = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_Role = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_Selection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_isAggregation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_node = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_var = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateComparableEquationStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateComparableEquationStatementStrong = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateEquationStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateGreaterThanInequationStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateLessThanInequationStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateStrongGreaterThanInequationStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateStrongLessThanInequationStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultGroupReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ErrorInfoExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetOperationType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IRuleWithOneNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IRuleWithTwoNodes = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImmediateSupertypesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InequationReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InequationReplacementRule = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ob).create();
  private final ConceptPresentation props_InferenceRule = new ConceptPresentationBuilder().deprecated().icon(IconContainer.RESOURCE_a0a0pb).create();
  private final ConceptPresentation props_InfoStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InfoStatementAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsApplicableConceptFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsReplacementRuleApplicable_ConceptFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsStrongSubtypeExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsSubtypeExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_JoinContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_JoinType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LeftOperandType_parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkPatternVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatchStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatchStatementItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MeetContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MeetType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MessageStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MessageStatementAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MessageTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultipleForeachLoop = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_MultipleForeachLoopVariable = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_NodeInfo = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_InferTypeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_TypeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NonTypesystemRule = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0mc).create();
  private final ConceptPresentation props_NormalTypeClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Operation_parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OriginalNodeId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OverloadedOpIsApplicableFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OverloadedOpRulesContainer = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0sc).create();
  private final ConceptPresentation props_OverloadedOpTypeRule_OneTypeSpecified = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OverloadedOperatorTypeFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OverloadedOperatorTypeRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OverridesConceptFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PatternCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PatternVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintToTrace = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Processed = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyMessageTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyNameTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyPatternVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QuickFixArgument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QuickFixArgumentReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QuickFixDescriptionBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QuickFixExecuteBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QuickFixField = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QuickFixFieldReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QuickFixSetSelectionBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceMessageTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceRoleTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReplacementRuleReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReportErrorStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReportErrorStatementAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RightOperandType_parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RuntimeErrorType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RuntimeHoleType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RuntimeListVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RuntimeTypeVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SelectionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteTypeRule = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0wd).create();
  private final ConceptPresentation props_SubtypingRule = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0xd).create();
  private final ConceptPresentation props_SupersedeConceptFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeCheckerAccessExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeOfExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeVarDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeVarReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypesystemIntention = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypesystemIntentionArgument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypesystemQuickFix = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ge).create();
  private final ConceptPresentation props_VariableConverterItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableConverterItem_ApplicableBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableConverterItem_ConvertBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableConvertersContainer = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ke).create();
  private final ConceptPresentation props_WarningStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WarningStatementAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WasSelectedNodeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WhenConcreteStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WhenConcreteVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WhenConcreteVariableReference = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractCheckingRule;
      case 1:
        return props_AbstractComparableStatement;
      case 2:
        return props_AbstractEquationStatement;
      case 3:
        return props_AbstractInequationStatement;
      case 4:
        return props_AbstractOverloadedOpsTypeRule;
      case 5:
        return props_AbstractRule;
      case 6:
        return props_AbstractSubtypingRule;
      case 7:
        return props_AddDependencyStatement;
      case 8:
        return props_ApplicableNodeCondition;
      case 9:
        return props_ApplicableNodeReference;
      case 10:
        return props_AssertStatement;
      case 11:
        return props_AttributedNodeExpression;
      case 12:
        return props_CaretPositionOperation;
      case 13:
        return props_CoerceExpression;
      case 14:
        return props_CoerceStatement;
      case 15:
        return props_CoerceStrongExpression;
      case 16:
        return props_ComparisonRule;
      case 17:
        return props_ConceptClauseLinkInfo;
      case 18:
        return props_ConceptFunctionParameter_ContextNode;
      case 19:
        return props_ConceptFunctionParameter_EditorContext;
      case 20:
        return props_ConceptFunctionParameter_Role;
      case 21:
        return props_ConceptFunctionParameter_Selection;
      case 22:
        return props_ConceptFunctionParameter_isAggregation;
      case 23:
        return props_ConceptFunctionParameter_node;
      case 24:
        return props_ConceptFunctionParameter_var;
      case 25:
        return props_ConceptReference;
      case 26:
        return props_CreateComparableEquationStatement;
      case 27:
        return props_CreateComparableEquationStatementStrong;
      case 28:
        return props_CreateEquationStatement;
      case 29:
        return props_CreateGreaterThanInequationStatement;
      case 30:
        return props_CreateLessThanInequationStatement;
      case 31:
        return props_CreateStrongGreaterThanInequationStatement;
      case 32:
        return props_CreateStrongLessThanInequationStatement;
      case 33:
        return props_DefaultGroupReference;
      case 34:
        return props_ErrorInfoExpression;
      case 35:
        return props_GetOperationType;
      case 36:
        return props_IRuleWithOneNode;
      case 37:
        return props_IRuleWithTwoNodes;
      case 38:
        return props_ImmediateSupertypesExpression;
      case 39:
        return props_InequationReference;
      case 40:
        return props_InequationReplacementRule;
      case 41:
        return props_InferenceRule;
      case 42:
        return props_InfoStatement;
      case 43:
        return props_InfoStatementAnnotation;
      case 44:
        return props_IsApplicableConceptFunction;
      case 45:
        return props_IsReplacementRuleApplicable_ConceptFunction;
      case 46:
        return props_IsStrongSubtypeExpression;
      case 47:
        return props_IsSubtypeExpression;
      case 48:
        return props_JoinContainer;
      case 49:
        return props_JoinType;
      case 50:
        return props_LeftOperandType_parameter;
      case 51:
        return props_LinkPatternVariableReference;
      case 52:
        return props_MatchStatement;
      case 53:
        return props_MatchStatementItem;
      case 54:
        return props_MeetContainer;
      case 55:
        return props_MeetType;
      case 56:
        return props_MessageStatement;
      case 57:
        return props_MessageStatementAnnotation;
      case 58:
        return props_MessageTarget;
      case 59:
        return props_MultipleForeachLoop;
      case 60:
        return props_MultipleForeachLoopVariable;
      case 61:
        return props_NodeInfo;
      case 62:
        return props_Node_InferTypeOperation;
      case 63:
        return props_Node_TypeOperation;
      case 64:
        return props_NonTypesystemRule;
      case 65:
        return props_NormalTypeClause;
      case 66:
        return props_Operation_parameter;
      case 67:
        return props_OrStatement;
      case 68:
        return props_OriginalNodeId;
      case 69:
        return props_OverloadedOpIsApplicableFunction;
      case 70:
        return props_OverloadedOpRulesContainer;
      case 71:
        return props_OverloadedOpTypeRule_OneTypeSpecified;
      case 72:
        return props_OverloadedOperatorTypeFunction;
      case 73:
        return props_OverloadedOperatorTypeRule;
      case 74:
        return props_OverridesConceptFunction;
      case 75:
        return props_PatternCondition;
      case 76:
        return props_PatternVariableReference;
      case 77:
        return props_PrintToTrace;
      case 78:
        return props_Processed;
      case 79:
        return props_PropertyMessageTarget;
      case 80:
        return props_PropertyNameTarget;
      case 81:
        return props_PropertyPatternVariableReference;
      case 82:
        return props_QuickFixArgument;
      case 83:
        return props_QuickFixArgumentReference;
      case 84:
        return props_QuickFixDescriptionBlock;
      case 85:
        return props_QuickFixExecuteBlock;
      case 86:
        return props_QuickFixField;
      case 87:
        return props_QuickFixFieldReference;
      case 88:
        return props_QuickFixSetSelectionBlock;
      case 89:
        return props_ReferenceMessageTarget;
      case 90:
        return props_ReferenceRoleTarget;
      case 91:
        return props_ReplacementRuleReference;
      case 92:
        return props_ReportErrorStatement;
      case 93:
        return props_ReportErrorStatementAnnotation;
      case 94:
        return props_RightOperandType_parameter;
      case 95:
        return props_RuntimeErrorType;
      case 96:
        return props_RuntimeHoleType;
      case 97:
        return props_RuntimeListVariable;
      case 98:
        return props_RuntimeTypeVariable;
      case 99:
        return props_SelectionType;
      case 100:
        return props_SubstituteTypeRule;
      case 101:
        return props_SubtypingRule;
      case 102:
        return props_SupersedeConceptFunction;
      case 103:
        return props_TypeCheckerAccessExpression;
      case 104:
        return props_TypeClause;
      case 105:
        return props_TypeOfExpression;
      case 106:
        return props_TypeVarDeclaration;
      case 107:
        return props_TypeVarReference;
      case 108:
        return props_TypesystemIntention;
      case 109:
        return props_TypesystemIntentionArgument;
      case 110:
        return props_TypesystemQuickFix;
      case 111:
        return props_VariableConverterItem;
      case 112:
        return props_VariableConverterItem_ApplicableBlock;
      case 113:
        return props_VariableConverterItem_ConvertBlock;
      case 114:
        return props_VariableConvertersContainer;
      case 115:
        return props_WarningStatement;
      case 116:
        return props_WarningStatementAnnotation;
      case 117:
        return props_WasSelectedNodeOperation;
      case 118:
        return props_WhenConcreteStatement;
      case 119:
        return props_WhenConcreteVariableDeclaration;
      case 120:
        return props_WhenConcreteVariableReference;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
