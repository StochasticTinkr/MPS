package jetbrains.mps.lang.typesystem.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractCheckingRule;
  private ConceptPresentation props_AbstractComparableStatement;
  private ConceptPresentation props_AbstractEquationStatement;
  private ConceptPresentation props_AbstractInequationStatement;
  private ConceptPresentation props_AbstractOverloadedOpsTypeRule;
  private ConceptPresentation props_AbstractRule;
  private ConceptPresentation props_AbstractSubtypingRule;
  private ConceptPresentation props_AddDependencyStatement;
  private ConceptPresentation props_ApplicableNodeCondition;
  private ConceptPresentation props_ApplicableNodeReference;
  private ConceptPresentation props_AssertStatement;
  private ConceptPresentation props_AttributedNodeExpression;
  private ConceptPresentation props_CaretPositionOperation;
  private ConceptPresentation props_CoerceExpression;
  private ConceptPresentation props_CoerceStatement;
  private ConceptPresentation props_CoerceStrongExpression;
  private ConceptPresentation props_ComparisonRule;
  private ConceptPresentation props_ConceptClauseLinkInfo;
  private ConceptPresentation props_ConceptFunctionParameter_ContextNode;
  private ConceptPresentation props_ConceptFunctionParameter_EditorContext;
  private ConceptPresentation props_ConceptFunctionParameter_Role;
  private ConceptPresentation props_ConceptFunctionParameter_Selection;
  private ConceptPresentation props_ConceptFunctionParameter_isAggregation;
  private ConceptPresentation props_ConceptFunctionParameter_node;
  private ConceptPresentation props_ConceptFunctionParameter_var;
  private ConceptPresentation props_ConceptReference;
  private ConceptPresentation props_CreateComparableEquationStatement;
  private ConceptPresentation props_CreateComparableEquationStatementStrong;
  private ConceptPresentation props_CreateEquationStatement;
  private ConceptPresentation props_CreateGreaterThanInequationStatement;
  private ConceptPresentation props_CreateLessThanInequationStatement;
  private ConceptPresentation props_CreateStrongGreaterThanInequationStatement;
  private ConceptPresentation props_CreateStrongLessThanInequationStatement;
  private ConceptPresentation props_DefaultGroupReference;
  private ConceptPresentation props_ErrorInfoExpression;
  private ConceptPresentation props_GetOperationType;
  private ConceptPresentation props_IRuleWithOneNode;
  private ConceptPresentation props_IRuleWithTwoNodes;
  private ConceptPresentation props_ImmediateSupertypesExpression;
  private ConceptPresentation props_InequationReference;
  private ConceptPresentation props_InequationReplacementRule;
  private ConceptPresentation props_InferenceRule;
  private ConceptPresentation props_InfoStatement;
  private ConceptPresentation props_InfoStatementAnnotation;
  private ConceptPresentation props_IsApplicableConceptFunction;
  private ConceptPresentation props_IsReplacementRuleApplicable_ConceptFunction;
  private ConceptPresentation props_IsStrongSubtypeExpression;
  private ConceptPresentation props_IsSubtypeExpression;
  private ConceptPresentation props_JoinContainer;
  private ConceptPresentation props_JoinType;
  private ConceptPresentation props_LeftOperandType_parameter;
  private ConceptPresentation props_LinkPatternVariableReference;
  private ConceptPresentation props_MatchStatement;
  private ConceptPresentation props_MatchStatementItem;
  private ConceptPresentation props_MeetContainer;
  private ConceptPresentation props_MeetType;
  private ConceptPresentation props_MessageStatement;
  private ConceptPresentation props_MessageStatementAnnotation;
  private ConceptPresentation props_MessageTarget;
  private ConceptPresentation props_MultipleForeachLoop;
  private ConceptPresentation props_MultipleForeachLoopVariable;
  private ConceptPresentation props_NodeInfo;
  private ConceptPresentation props_Node_InferTypeOperation;
  private ConceptPresentation props_Node_TypeOperation;
  private ConceptPresentation props_NonTypesystemRule;
  private ConceptPresentation props_NormalTypeClause;
  private ConceptPresentation props_Operation_parameter;
  private ConceptPresentation props_OrStatement;
  private ConceptPresentation props_OriginalNodeId;
  private ConceptPresentation props_OverloadedOpIsApplicableFunction;
  private ConceptPresentation props_OverloadedOpRulesContainer;
  private ConceptPresentation props_OverloadedOpTypeRule_OneTypeSpecified;
  private ConceptPresentation props_OverloadedOperatorTypeFunction;
  private ConceptPresentation props_OverloadedOperatorTypeRule;
  private ConceptPresentation props_OverridesConceptFunction;
  private ConceptPresentation props_PatternCondition;
  private ConceptPresentation props_PatternVariableReference;
  private ConceptPresentation props_PrintToTrace;
  private ConceptPresentation props_Processed;
  private ConceptPresentation props_PropertyMessageTarget;
  private ConceptPresentation props_PropertyNameTarget;
  private ConceptPresentation props_PropertyPatternVariableReference;
  private ConceptPresentation props_QuickFixArgument;
  private ConceptPresentation props_QuickFixArgumentReference;
  private ConceptPresentation props_QuickFixDescriptionBlock;
  private ConceptPresentation props_QuickFixExecuteBlock;
  private ConceptPresentation props_QuickFixField;
  private ConceptPresentation props_QuickFixFieldReference;
  private ConceptPresentation props_QuickFixSetSelectionBlock;
  private ConceptPresentation props_ReferenceMessageTarget;
  private ConceptPresentation props_ReferenceRoleTarget;
  private ConceptPresentation props_ReplacementRuleReference;
  private ConceptPresentation props_ReportErrorStatement;
  private ConceptPresentation props_ReportErrorStatementAnnotation;
  private ConceptPresentation props_RightOperandType_parameter;
  private ConceptPresentation props_RuntimeErrorType;
  private ConceptPresentation props_RuntimeHoleType;
  private ConceptPresentation props_RuntimeListVariable;
  private ConceptPresentation props_RuntimeTypeVariable;
  private ConceptPresentation props_SelectionType;
  private ConceptPresentation props_SubstituteTypeRule;
  private ConceptPresentation props_SubtypingRule;
  private ConceptPresentation props_SupersedeConceptFunction;
  private ConceptPresentation props_TypeCheckerAccessExpression;
  private ConceptPresentation props_TypeClause;
  private ConceptPresentation props_TypeOfExpression;
  private ConceptPresentation props_TypeVarDeclaration;
  private ConceptPresentation props_TypeVarReference;
  private ConceptPresentation props_TypesystemIntention;
  private ConceptPresentation props_TypesystemIntentionArgument;
  private ConceptPresentation props_TypesystemQuickFix;
  private ConceptPresentation props_VariableConverterItem;
  private ConceptPresentation props_VariableConverterItem_ApplicableBlock;
  private ConceptPresentation props_VariableConverterItem_ConvertBlock;
  private ConceptPresentation props_VariableConvertersContainer;
  private ConceptPresentation props_WarningStatement;
  private ConceptPresentation props_WarningStatementAnnotation;
  private ConceptPresentation props_WasSelectedNodeOperation;
  private ConceptPresentation props_WhenConcreteStatement;
  private ConceptPresentation props_WhenConcreteVariableDeclaration;
  private ConceptPresentation props_WhenConcreteVariableReference;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractCheckingRule:
        if (props_AbstractCheckingRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractCheckingRule = cpb.create();
        }
        return props_AbstractCheckingRule;
      case LanguageConceptSwitch.AbstractComparableStatement:
        if (props_AbstractComparableStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractComparableStatement = cpb.create();
        }
        return props_AbstractComparableStatement;
      case LanguageConceptSwitch.AbstractEquationStatement:
        if (props_AbstractEquationStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractEquationStatement = cpb.create();
        }
        return props_AbstractEquationStatement;
      case LanguageConceptSwitch.AbstractInequationStatement:
        if (props_AbstractInequationStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractInequationStatement = cpb.create();
        }
        return props_AbstractInequationStatement;
      case LanguageConceptSwitch.AbstractOverloadedOpsTypeRule:
        if (props_AbstractOverloadedOpsTypeRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractOverloadedOpsTypeRule = cpb.create();
        }
        return props_AbstractOverloadedOpsTypeRule;
      case LanguageConceptSwitch.AbstractRule:
        if (props_AbstractRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractRule = cpb.create();
        }
        return props_AbstractRule;
      case LanguageConceptSwitch.AbstractSubtypingRule:
        if (props_AbstractSubtypingRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractSubtypingRule = cpb.create();
        }
        return props_AbstractSubtypingRule;
      case LanguageConceptSwitch.AddDependencyStatement:
        if (props_AddDependencyStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("addDependency");
          props_AddDependencyStatement = cpb.create();
        }
        return props_AddDependencyStatement;
      case LanguageConceptSwitch.ApplicableNodeCondition:
        if (props_ApplicableNodeCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ApplicableNodeCondition = cpb.create();
        }
        return props_ApplicableNodeCondition;
      case LanguageConceptSwitch.ApplicableNodeReference:
        if (props_ApplicableNodeReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e9ef5dcL, 0x1117e9f2a5aL, "applicableNode", "", "");
          props_ApplicableNodeReference = cpb.create();
        }
        return props_ApplicableNodeReference;
      case LanguageConceptSwitch.AssertStatement:
        if (props_AssertStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ensure");
          props_AssertStatement = cpb.create();
        }
        return props_AssertStatement;
      case LanguageConceptSwitch.AttributedNodeExpression:
        if (props_AttributedNodeExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("attributedNode");
          props_AttributedNodeExpression = cpb.create();
        }
        return props_AttributedNodeExpression;
      case LanguageConceptSwitch.CaretPositionOperation:
        if (props_CaretPositionOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("caretPosition");
          props_CaretPositionOperation = cpb.create();
        }
        return props_CaretPositionOperation;
      case LanguageConceptSwitch.CoerceExpression:
        if (props_CoerceExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("expression");
          cpb.rawPresentation("coerce");
          props_CoerceExpression = cpb.create();
        }
        return props_CoerceExpression;
      case LanguageConceptSwitch.CoerceStatement:
        if (props_CoerceStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("coerce");
          props_CoerceStatement = cpb.create();
        }
        return props_CoerceStatement;
      case LanguageConceptSwitch.CoerceStrongExpression:
        if (props_CoerceStrongExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("expression");
          cpb.rawPresentation("coerceStrong");
          props_CoerceStrongExpression = cpb.create();
        }
        return props_CoerceStrongExpression;
      case LanguageConceptSwitch.ComparisonRule:
        if (props_ComparisonRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a2a0a61b0se);
          props_ComparisonRule = cpb.create();
        }
        return props_ComparisonRule;
      case LanguageConceptSwitch.ConceptClauseLinkInfo:
        if (props_ConceptClauseLinkInfo == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.presentationByReference(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x120c8f8641eL, 0x120c8fde35cL, "linkDeclaration", "", "");
          props_ConceptClauseLinkInfo = cpb.create();
        }
        return props_ConceptClauseLinkInfo;
      case LanguageConceptSwitch.ConceptFunctionParameter_ContextNode:
        if (props_ConceptFunctionParameter_ContextNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("contextNode");
          props_ConceptFunctionParameter_ContextNode = cpb.create();
        }
        return props_ConceptFunctionParameter_ContextNode;
      case LanguageConceptSwitch.ConceptFunctionParameter_EditorContext:
        if (props_ConceptFunctionParameter_EditorContext == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("editorContext");
          props_ConceptFunctionParameter_EditorContext = cpb.create();
        }
        return props_ConceptFunctionParameter_EditorContext;
      case LanguageConceptSwitch.ConceptFunctionParameter_Role:
        if (props_ConceptFunctionParameter_Role == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("role");
          props_ConceptFunctionParameter_Role = cpb.create();
        }
        return props_ConceptFunctionParameter_Role;
      case LanguageConceptSwitch.ConceptFunctionParameter_Selection:
        if (props_ConceptFunctionParameter_Selection == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("selectionBefore");
          props_ConceptFunctionParameter_Selection = cpb.create();
        }
        return props_ConceptFunctionParameter_Selection;
      case LanguageConceptSwitch.ConceptFunctionParameter_isAggregation:
        if (props_ConceptFunctionParameter_isAggregation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("isAggregation");
          props_ConceptFunctionParameter_isAggregation = cpb.create();
        }
        return props_ConceptFunctionParameter_isAggregation;
      case LanguageConceptSwitch.ConceptFunctionParameter_node:
        if (props_ConceptFunctionParameter_node == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("function parameter");
          cpb.rawPresentation("node");
          props_ConceptFunctionParameter_node = cpb.create();
        }
        return props_ConceptFunctionParameter_node;
      case LanguageConceptSwitch.ConceptFunctionParameter_var:
        if (props_ConceptFunctionParameter_var == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("variable");
          props_ConceptFunctionParameter_var = cpb.create();
        }
        return props_ConceptFunctionParameter_var;
      case LanguageConceptSwitch.ConceptReference:
        if (props_ConceptReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ConceptReference = cpb.create();
        }
        return props_ConceptReference;
      case LanguageConceptSwitch.CreateComparableEquationStatement:
        if (props_CreateComparableEquationStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("weak comparability");
          cpb.rawPresentation(":~:");
          props_CreateComparableEquationStatement = cpb.create();
        }
        return props_CreateComparableEquationStatement;
      case LanguageConceptSwitch.CreateComparableEquationStatementStrong:
        if (props_CreateComparableEquationStatementStrong == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("strong comparability");
          cpb.rawPresentation(":~~:");
          props_CreateComparableEquationStatementStrong = cpb.create();
        }
        return props_CreateComparableEquationStatementStrong;
      case LanguageConceptSwitch.CreateEquationStatement:
        if (props_CreateEquationStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("typesystem equation");
          cpb.rawPresentation(":==:");
          props_CreateEquationStatement = cpb.create();
        }
        return props_CreateEquationStatement;
      case LanguageConceptSwitch.CreateGreaterThanInequationStatement:
        if (props_CreateGreaterThanInequationStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("weak subtyping");
          cpb.rawPresentation(":>=:");
          props_CreateGreaterThanInequationStatement = cpb.create();
        }
        return props_CreateGreaterThanInequationStatement;
      case LanguageConceptSwitch.CreateLessThanInequationStatement:
        if (props_CreateLessThanInequationStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("weak subtyping");
          cpb.rawPresentation(":<=:");
          props_CreateLessThanInequationStatement = cpb.create();
        }
        return props_CreateLessThanInequationStatement;
      case LanguageConceptSwitch.CreateStrongGreaterThanInequationStatement:
        if (props_CreateStrongGreaterThanInequationStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("strong subtyping");
          cpb.rawPresentation(":>>=:");
          props_CreateStrongGreaterThanInequationStatement = cpb.create();
        }
        return props_CreateStrongGreaterThanInequationStatement;
      case LanguageConceptSwitch.CreateStrongLessThanInequationStatement:
        if (props_CreateStrongLessThanInequationStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("strong subtyping");
          cpb.rawPresentation(":<<=:");
          props_CreateStrongLessThanInequationStatement = cpb.create();
        }
        return props_CreateStrongLessThanInequationStatement;
      case LanguageConceptSwitch.DefaultGroupReference:
        if (props_DefaultGroupReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("default");
          props_DefaultGroupReference = cpb.create();
        }
        return props_DefaultGroupReference;
      case LanguageConceptSwitch.ErrorInfoExpression:
        if (props_ErrorInfoExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("equationInfo");
          props_ErrorInfoExpression = cpb.create();
        }
        return props_ErrorInfoExpression;
      case LanguageConceptSwitch.GetOperationType:
        if (props_GetOperationType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("operation type(..)");
          props_GetOperationType = cpb.create();
        }
        return props_GetOperationType;
      case LanguageConceptSwitch.IRuleWithOneNode:
        if (props_IRuleWithOneNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IRuleWithOneNode = cpb.create();
        }
        return props_IRuleWithOneNode;
      case LanguageConceptSwitch.IRuleWithTwoNodes:
        if (props_IRuleWithTwoNodes == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IRuleWithTwoNodes = cpb.create();
        }
        return props_IRuleWithTwoNodes;
      case LanguageConceptSwitch.ImmediateSupertypesExpression:
        if (props_ImmediateSupertypesExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("immediateSupertypes()");
          props_ImmediateSupertypesExpression = cpb.create();
        }
        return props_ImmediateSupertypesExpression;
      case LanguageConceptSwitch.InequationReference:
        if (props_InequationReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x42501924d0bd1913L, 0x42501924d0bd1914L, "inequation", "", "");
          props_InequationReference = cpb.create();
        }
        return props_InequationReference;
      case LanguageConceptSwitch.InequationReplacementRule:
        if (props_InequationReplacementRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a2a0a04b0se);
          props_InequationReplacementRule = cpb.create();
        }
        return props_InequationReplacementRule;
      case LanguageConceptSwitch.InferenceRule:
        if (props_InferenceRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117e2f5efaL);
          cpb.deprecateAggregation(0x115f0161343L, "dependency");
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a3a0a14b0se);
          props_InferenceRule = cpb.create();
        }
        return props_InferenceRule;
      case LanguageConceptSwitch.InfoStatement:
        if (props_InfoStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("info");
          props_InfoStatement = cpb.create();
        }
        return props_InfoStatement;
      case LanguageConceptSwitch.InfoStatementAnnotation:
        if (props_InfoStatementAnnotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_InfoStatementAnnotation = cpb.create();
        }
        return props_InfoStatementAnnotation;
      case LanguageConceptSwitch.IsApplicableConceptFunction:
        if (props_IsApplicableConceptFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IsApplicableConceptFunction");
          props_IsApplicableConceptFunction = cpb.create();
        }
        return props_IsApplicableConceptFunction;
      case LanguageConceptSwitch.IsReplacementRuleApplicable_ConceptFunction:
        if (props_IsReplacementRuleApplicable_ConceptFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IsReplacementRuleApplicable_ConceptFunction");
          props_IsReplacementRuleApplicable_ConceptFunction = cpb.create();
        }
        return props_IsReplacementRuleApplicable_ConceptFunction;
      case LanguageConceptSwitch.IsStrongSubtypeExpression:
        if (props_IsStrongSubtypeExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("isStrongSubtype()");
          props_IsStrongSubtypeExpression = cpb.create();
        }
        return props_IsStrongSubtypeExpression;
      case LanguageConceptSwitch.IsSubtypeExpression:
        if (props_IsSubtypeExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("isSubtype()");
          props_IsSubtypeExpression = cpb.create();
        }
        return props_IsSubtypeExpression;
      case LanguageConceptSwitch.JoinContainer:
        if (props_JoinContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("JoinContainer");
          props_JoinContainer = cpb.create();
        }
        return props_JoinContainer;
      case LanguageConceptSwitch.JoinType:
        if (props_JoinType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("join");
          props_JoinType = cpb.create();
        }
        return props_JoinType;
      case LanguageConceptSwitch.LeftOperandType_parameter:
        if (props_LeftOperandType_parameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("leftOperandType");
          props_LeftOperandType_parameter = cpb.create();
        }
        return props_LeftOperandType_parameter;
      case LanguageConceptSwitch.LinkPatternVariableReference:
        if (props_LinkPatternVariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11192d92ad3L, 0x11192da25efL, "patternVarDecl", "", "");
          props_LinkPatternVariableReference = cpb.create();
        }
        return props_LinkPatternVariableReference;
      case LanguageConceptSwitch.MatchStatement:
        if (props_MatchStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("match");
          props_MatchStatement = cpb.create();
        }
        return props_MatchStatement;
      case LanguageConceptSwitch.MatchStatementItem:
        if (props_MatchStatementItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MatchStatementItem");
          props_MatchStatementItem = cpb.create();
        }
        return props_MatchStatementItem;
      case LanguageConceptSwitch.MeetContainer:
        if (props_MeetContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("MeetContainer");
          props_MeetContainer = cpb.create();
        }
        return props_MeetContainer;
      case LanguageConceptSwitch.MeetType:
        if (props_MeetType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("meet");
          props_MeetType = cpb.create();
        }
        return props_MeetType;
      case LanguageConceptSwitch.MessageStatement:
        if (props_MessageStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MessageStatement = cpb.create();
        }
        return props_MessageStatement;
      case LanguageConceptSwitch.MessageStatementAnnotation:
        if (props_MessageStatementAnnotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MessageStatementAnnotation = cpb.create();
        }
        return props_MessageStatementAnnotation;
      case LanguageConceptSwitch.MessageTarget:
        if (props_MessageTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MessageTarget = cpb.create();
        }
        return props_MessageTarget;
      case LanguageConceptSwitch.MultipleForeachLoop:
        if (props_MultipleForeachLoop == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.rawPresentation("foreach");
          props_MultipleForeachLoop = cpb.create();
        }
        return props_MultipleForeachLoop;
      case LanguageConceptSwitch.MultipleForeachLoopVariable:
        if (props_MultipleForeachLoopVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.rawPresentation("MultipleForeachLoopVariable");
          props_MultipleForeachLoopVariable = cpb.create();
        }
        return props_MultipleForeachLoopVariable;
      case LanguageConceptSwitch.NodeInfo:
        if (props_NodeInfo == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("NodeInfo");
          props_NodeInfo = cpb.create();
        }
        return props_NodeInfo;
      case LanguageConceptSwitch.Node_InferTypeOperation:
        if (props_Node_InferTypeOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("get inferred type");
          cpb.rawPresentation("inferType");
          props_Node_InferTypeOperation = cpb.create();
        }
        return props_Node_InferTypeOperation;
      case LanguageConceptSwitch.Node_TypeOperation:
        if (props_Node_TypeOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("get type");
          cpb.rawPresentation("type");
          props_Node_TypeOperation = cpb.create();
        }
        return props_Node_TypeOperation;
      case LanguageConceptSwitch.NonTypesystemRule:
        if (props_NonTypesystemRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a2a0a46b0se);
          props_NonTypesystemRule = cpb.create();
        }
        return props_NonTypesystemRule;
      case LanguageConceptSwitch.NormalTypeClause:
        if (props_NormalTypeClause == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("( expr )");
          props_NormalTypeClause = cpb.create();
        }
        return props_NormalTypeClause;
      case LanguageConceptSwitch.Operation_parameter:
        if (props_Operation_parameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("operation");
          props_Operation_parameter = cpb.create();
        }
        return props_Operation_parameter;
      case LanguageConceptSwitch.OrStatement:
        if (props_OrStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OrStatement");
          props_OrStatement = cpb.create();
        }
        return props_OrStatement;
      case LanguageConceptSwitch.OriginalNodeId:
        if (props_OriginalNodeId == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OriginalNodeId");
          props_OriginalNodeId = cpb.create();
        }
        return props_OriginalNodeId;
      case LanguageConceptSwitch.OverloadedOpIsApplicableFunction:
        if (props_OverloadedOpIsApplicableFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OverloadedOpIsApplicableFunction");
          props_OverloadedOpIsApplicableFunction = cpb.create();
        }
        return props_OverloadedOpIsApplicableFunction;
      case LanguageConceptSwitch.OverloadedOpRulesContainer:
        if (props_OverloadedOpRulesContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a2a0a07b0se);
          props_OverloadedOpRulesContainer = cpb.create();
        }
        return props_OverloadedOpRulesContainer;
      case LanguageConceptSwitch.OverloadedOpTypeRule_OneTypeSpecified:
        if (props_OverloadedOpTypeRule_OneTypeSpecified == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OverloadedOpTypeRule_OneTypeSpecified");
          props_OverloadedOpTypeRule_OneTypeSpecified = cpb.create();
        }
        return props_OverloadedOpTypeRule_OneTypeSpecified;
      case LanguageConceptSwitch.OverloadedOperatorTypeFunction:
        if (props_OverloadedOperatorTypeFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OverloadedOperatorTypeFunction");
          props_OverloadedOperatorTypeFunction = cpb.create();
        }
        return props_OverloadedOperatorTypeFunction;
      case LanguageConceptSwitch.OverloadedOperatorTypeRule:
        if (props_OverloadedOperatorTypeRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OverloadedOperatorTypeRule");
          props_OverloadedOperatorTypeRule = cpb.create();
        }
        return props_OverloadedOperatorTypeRule;
      case LanguageConceptSwitch.OverridesConceptFunction:
        if (props_OverridesConceptFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("OverridesConceptFunction");
          props_OverridesConceptFunction = cpb.create();
        }
        return props_OverridesConceptFunction;
      case LanguageConceptSwitch.PatternCondition:
        if (props_PatternCondition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_PatternCondition = cpb.create();
        }
        return props_PatternCondition;
      case LanguageConceptSwitch.PatternVariableReference:
        if (props_PatternVariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11192d10036L, 0x11192d17e60L, "patternVarDecl", "", "");
          props_PatternVariableReference = cpb.create();
        }
        return props_PatternVariableReference;
      case LanguageConceptSwitch.PrintToTrace:
        if (props_PrintToTrace == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("print to trace");
          props_PrintToTrace = cpb.create();
        }
        return props_PrintToTrace;
      case LanguageConceptSwitch.Processed:
        if (props_Processed == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Processed");
          props_Processed = cpb.create();
        }
        return props_Processed;
      case LanguageConceptSwitch.PropertyMessageTarget:
        if (props_PropertyMessageTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a6a000L, 0x11db4a6fbeeL, "propertyDeclaration", "", "");
          props_PropertyMessageTarget = cpb.create();
        }
        return props_PropertyMessageTarget;
      case LanguageConceptSwitch.PropertyNameTarget:
        if (props_PropertyNameTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("property name");
          props_PropertyNameTarget = cpb.create();
        }
        return props_PropertyNameTarget;
      case LanguageConceptSwitch.PropertyPatternVariableReference:
        if (props_PropertyPatternVariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11192d97ff9L, 0x11192d9d83cL, "patternVarDecl", "", "");
          props_PropertyPatternVariableReference = cpb.create();
        }
        return props_PropertyPatternVariableReference;
      case LanguageConceptSwitch.QuickFixArgument:
        if (props_QuickFixArgument == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_QuickFixArgument = cpb.create();
        }
        return props_QuickFixArgument;
      case LanguageConceptSwitch.QuickFixArgumentReference:
        if (props_QuickFixArgumentReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11b3683c009L, 0x11b3683c00aL, "quickFixArgument", "", "");
          props_QuickFixArgumentReference = cpb.create();
        }
        return props_QuickFixArgumentReference;
      case LanguageConceptSwitch.QuickFixDescriptionBlock:
        if (props_QuickFixDescriptionBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("description");
          props_QuickFixDescriptionBlock = cpb.create();
        }
        return props_QuickFixDescriptionBlock;
      case LanguageConceptSwitch.QuickFixExecuteBlock:
        if (props_QuickFixExecuteBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("execute");
          props_QuickFixExecuteBlock = cpb.create();
        }
        return props_QuickFixExecuteBlock;
      case LanguageConceptSwitch.QuickFixField:
        if (props_QuickFixField == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_QuickFixField = cpb.create();
        }
        return props_QuickFixField;
      case LanguageConceptSwitch.QuickFixFieldReference:
        if (props_QuickFixFieldReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x70489eee8479b55dL, 0x70489eee8479b55eL, "quickFixField", "", "");
          props_QuickFixFieldReference = cpb.create();
        }
        return props_QuickFixFieldReference;
      case LanguageConceptSwitch.QuickFixSetSelectionBlock:
        if (props_QuickFixSetSelectionBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("set selection");
          props_QuickFixSetSelectionBlock = cpb.create();
        }
        return props_QuickFixSetSelectionBlock;
      case LanguageConceptSwitch.ReferenceMessageTarget:
        if (props_ReferenceMessageTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x11db4a87c94L, 0x11db4a8e070L, "linkDeclaration", "", "");
          props_ReferenceMessageTarget = cpb.create();
        }
        return props_ReferenceMessageTarget;
      case LanguageConceptSwitch.ReferenceRoleTarget:
        if (props_ReferenceRoleTarget == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("reference role");
          props_ReferenceRoleTarget = cpb.create();
        }
        return props_ReferenceRoleTarget;
      case LanguageConceptSwitch.ReplacementRuleReference:
        if (props_ReplacementRuleReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x4cffb708491a734cL, 0x4cffb708491a734dL, "replacementRule", "", "");
          props_ReplacementRuleReference = cpb.create();
        }
        return props_ReplacementRuleReference;
      case LanguageConceptSwitch.ReportErrorStatement:
        if (props_ReportErrorStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("error");
          props_ReportErrorStatement = cpb.create();
        }
        return props_ReportErrorStatement;
      case LanguageConceptSwitch.ReportErrorStatementAnnotation:
        if (props_ReportErrorStatementAnnotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ReportErrorStatementAnnotation = cpb.create();
        }
        return props_ReportErrorStatementAnnotation;
      case LanguageConceptSwitch.RightOperandType_parameter:
        if (props_RightOperandType_parameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("rightOperandType");
          props_RightOperandType_parameter = cpb.create();
        }
        return props_RightOperandType_parameter;
      case LanguageConceptSwitch.RuntimeErrorType:
        if (props_RuntimeErrorType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RuntimeErrorType = cpb.create();
        }
        return props_RuntimeErrorType;
      case LanguageConceptSwitch.RuntimeHoleType:
        if (props_RuntimeHoleType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("RuntimeHoleType");
          props_RuntimeHoleType = cpb.create();
        }
        return props_RuntimeHoleType;
      case LanguageConceptSwitch.RuntimeListVariable:
        if (props_RuntimeListVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RuntimeListVariable = cpb.create();
        }
        return props_RuntimeListVariable;
      case LanguageConceptSwitch.RuntimeTypeVariable:
        if (props_RuntimeTypeVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RuntimeTypeVariable = cpb.create();
        }
        return props_RuntimeTypeVariable;
      case LanguageConceptSwitch.SelectionType:
        if (props_SelectionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("selection");
          props_SelectionType = cpb.create();
        }
        return props_SelectionType;
      case LanguageConceptSwitch.SubstituteTypeRule:
        if (props_SubstituteTypeRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a2a0a001b0se);
          props_SubstituteTypeRule = cpb.create();
        }
        return props_SubstituteTypeRule;
      case LanguageConceptSwitch.SubtypingRule:
        if (props_SubtypingRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a2a0a101b0se);
          props_SubtypingRule = cpb.create();
        }
        return props_SubtypingRule;
      case LanguageConceptSwitch.SupersedeConceptFunction:
        if (props_SupersedeConceptFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SupersedeConceptFunction");
          props_SupersedeConceptFunction = cpb.create();
        }
        return props_SupersedeConceptFunction;
      case LanguageConceptSwitch.TypeCheckerAccessExpression:
        if (props_TypeCheckerAccessExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("typechecker");
          props_TypeCheckerAccessExpression = cpb.create();
        }
        return props_TypeCheckerAccessExpression;
      case LanguageConceptSwitch.TypeClause:
        if (props_TypeClause == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TypeClause = cpb.create();
        }
        return props_TypeClause;
      case LanguageConceptSwitch.TypeOfExpression:
        if (props_TypeOfExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("typeof");
          props_TypeOfExpression = cpb.create();
        }
        return props_TypeOfExpression;
      case LanguageConceptSwitch.TypeVarDeclaration:
        if (props_TypeVarDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("typesystem's type variable");
          cpb.presentationByName();
          props_TypeVarDeclaration = cpb.create();
        }
        return props_TypeVarDeclaration;
      case LanguageConceptSwitch.TypeVarReference:
        if (props_TypeVarReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f90b04cL, 0x1117f90eda3L, "typeVarDeclaration", "", "");
          props_TypeVarReference = cpb.create();
        }
        return props_TypeVarReference;
      case LanguageConceptSwitch.TypesystemIntention:
        if (props_TypesystemIntention == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x119e85e030eL, 0x11b3667ec7bL, "quickFix", "", "");
          props_TypesystemIntention = cpb.create();
        }
        return props_TypesystemIntention;
      case LanguageConceptSwitch.TypesystemIntentionArgument:
        if (props_TypesystemIntentionArgument == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x119e85f8628L, 0x11b3650a4b4L, "quickFixArgument", "", "");
          props_TypesystemIntentionArgument = cpb.create();
        }
        return props_TypesystemIntentionArgument;
      case LanguageConceptSwitch.TypesystemQuickFix:
        if (props_TypesystemQuickFix == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a2a0a011b0se);
          props_TypesystemQuickFix = cpb.create();
        }
        return props_TypesystemQuickFix;
      case LanguageConceptSwitch.VariableConverterItem:
        if (props_VariableConverterItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("VariableConverterItem");
          props_VariableConverterItem = cpb.create();
        }
        return props_VariableConverterItem;
      case LanguageConceptSwitch.VariableConverterItem_ApplicableBlock:
        if (props_VariableConverterItem_ApplicableBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("VariableConverterItem_ApplicableBlock");
          props_VariableConverterItem_ApplicableBlock = cpb.create();
        }
        return props_VariableConverterItem_ApplicableBlock;
      case LanguageConceptSwitch.VariableConverterItem_ConvertBlock:
        if (props_VariableConverterItem_ConvertBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("VariableConverterItem_ConvertBlock");
          props_VariableConverterItem_ConvertBlock = cpb.create();
        }
        return props_VariableConverterItem_ConvertBlock;
      case LanguageConceptSwitch.VariableConvertersContainer:
        if (props_VariableConvertersContainer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Variable Converters Container");
          cpb.icon(IconContainer.RESOURCE_a0a2a0a411b0se);
          props_VariableConvertersContainer = cpb.create();
        }
        return props_VariableConvertersContainer;
      case LanguageConceptSwitch.WarningStatement:
        if (props_WarningStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("warning");
          props_WarningStatement = cpb.create();
        }
        return props_WarningStatement;
      case LanguageConceptSwitch.WarningStatementAnnotation:
        if (props_WarningStatementAnnotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_WarningStatementAnnotation = cpb.create();
        }
        return props_WarningStatementAnnotation;
      case LanguageConceptSwitch.WasSelectedNodeOperation:
        if (props_WasSelectedNodeOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("wasSelectedNode");
          props_WasSelectedNodeOperation = cpb.create();
        }
        return props_WasSelectedNodeOperation;
      case LanguageConceptSwitch.WhenConcreteStatement:
        if (props_WhenConcreteStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("when concrete");
          props_WhenConcreteStatement = cpb.create();
        }
        return props_WhenConcreteStatement;
      case LanguageConceptSwitch.WhenConcreteVariableDeclaration:
        if (props_WhenConcreteVariableDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_WhenConcreteVariableDeclaration = cpb.create();
        }
        return props_WhenConcreteVariableDeclaration;
      case LanguageConceptSwitch.WhenConcreteVariableReference:
        if (props_WhenConcreteVariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x118bd0e07f1L, 0x118bd0e7418L, "whenConcreteVar", "", "");
          props_WhenConcreteVariableReference = cpb.create();
        }
        return props_WhenConcreteVariableReference;
    }
    return null;
  }
}
