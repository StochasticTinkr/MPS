package jetbrains.mps.lang.typesystem.constraints;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.util.Condition;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.util.SNodeOperations;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class TypeVarScope extends Scope {
  private SNode myEnclosingNode;

  public TypeVarScope(SNode enclosingNode) {
    myEnclosingNode = enclosingNode;
  }

  public Iterable<SNode> getAvailableElements(@Nullable final String prefix) {
    if ((prefix == null || prefix.length() == 0)) {
      return getNodes(null);
    }
    return getNodes(new Condition<SNode>() {
      @Override
      public boolean met(SNode p0) {
        if (p0 == null) {
          return false;
        }
        String presentation = getReferenceText(null, p0);
        return presentation != null && presentation.startsWith(prefix);
      }
    });
  }

  @Nullable
  public SNode resolve(SNode contextNode, @NotNull String refText) {
    return null;
  }

  @Nullable
  public String getReferenceText(SNode anchor, @NotNull SNode target) {
    String resolveInfo = SNodeOperations.getResolveInfo(target);
    if ((resolveInfo != null && resolveInfo.length() > 0)) {
      return resolveInfo;
    }
    return target.getPresentation();
  }

  @NotNull
  private List<SNode> getNodes(@Nullable Condition<SNode> condition) {
    List<SNode> vars = new ArrayList<SNode>();

    SNode statementList;
    if (jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.isInstanceOf(myEnclosingNode, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, "jetbrains.mps.baseLanguage.structure.StatementList"))) {
      statementList = jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(myEnclosingNode, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, "jetbrains.mps.baseLanguage.structure.StatementList"));
    } else {
      statementList = jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getNodeAncestor(myEnclosingNode, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, "jetbrains.mps.baseLanguage.structure.StatementList"), false, false);
    }
    if ((statementList != null)) {
      SNode currentStatement;
      if (jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.isInstanceOf(myEnclosingNode, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L, "jetbrains.mps.baseLanguage.structure.Statement"))) {
        currentStatement = jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.cast(myEnclosingNode, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L, "jetbrains.mps.baseLanguage.structure.Statement"));
      } else {
        currentStatement = jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getNodeAncestor(myEnclosingNode, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L, "jetbrains.mps.baseLanguage.structure.Statement"), false, false);
      }
      populateLocalVariables(statementList, currentStatement, vars);
    }
    if (condition == null) {
      return vars;
    }
    List<SNode> result = new ArrayList<SNode>();
    for (SNode node : vars) {
      if (condition.met(node)) {
        result.add(node);
      }
    }
    return result;
  }

  private void populateLocalVariables(@NotNull SNode statementList, SNode beforeStatement, List<SNode> result) {
    for (SNode statement : SLinkOperations.getChildren(statementList, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, "statement"))) {
      if (statement == beforeStatement) {
        break;
      }
      if (jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.isInstanceOf(statement, MetaAdapterFactory.getConcept(0x7a5dda6291404668L, 0xab76d5ed1746f2b2L, 0x1117f85df7bL, "jetbrains.mps.lang.typesystem.structure.TypeVarDeclaration"))) {
        result.add(statement);
      }
    }
    SNode containingStatement = jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getNodeAncestor(statementList, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L, "jetbrains.mps.baseLanguage.structure.Statement"), false, false);
    if ((containingStatement != null)) {
      statementList = jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations.getNodeAncestor(containingStatement, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, "jetbrains.mps.baseLanguage.structure.StatementList"), false, false);
      if (statementList != null) {
        populateLocalVariables(statementList, containingStatement, result);
      }
    }
  }
}
