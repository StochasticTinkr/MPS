package jetbrains.mps.lang.pattern.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ActionAsPattern = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AsPattern = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_ChildDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_PropertyDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_ReferenceDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InsertAfterPosition = new ConceptPresentationBuilder().shortDesc("after").create();
  private final ConceptPresentation props_InsertBeforePosition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InsertPosition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkPatternVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListPattern = new ConceptPresentationBuilder().shortDesc("list pattern").create();
  private final ConceptPresentation props_OrPattern = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrPatternClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrPatternVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Pattern = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PatternExpression = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_PatternVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PatternVariableReference = new ConceptPresentationBuilder().shortDesc("pattern variable reference").create();
  private final ConceptPresentation props_PropertyPatternVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WildcardPattern = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ActionAsPattern:
        return props_ActionAsPattern;
      case LanguageConceptSwitch.ActionStatement:
        return props_ActionStatement;
      case LanguageConceptSwitch.AsPattern:
        return props_AsPattern;
      case LanguageConceptSwitch.GeneratorInternal_ChildDescriptor:
        return props_GeneratorInternal_ChildDescriptor;
      case LanguageConceptSwitch.GeneratorInternal_PropertyDescriptor:
        return props_GeneratorInternal_PropertyDescriptor;
      case LanguageConceptSwitch.GeneratorInternal_ReferenceDescriptor:
        return props_GeneratorInternal_ReferenceDescriptor;
      case LanguageConceptSwitch.InsertAfterPosition:
        return props_InsertAfterPosition;
      case LanguageConceptSwitch.InsertBeforePosition:
        return props_InsertBeforePosition;
      case LanguageConceptSwitch.InsertPosition:
        return props_InsertPosition;
      case LanguageConceptSwitch.LinkPatternVariableDeclaration:
        return props_LinkPatternVariableDeclaration;
      case LanguageConceptSwitch.ListPattern:
        return props_ListPattern;
      case LanguageConceptSwitch.OrPattern:
        return props_OrPattern;
      case LanguageConceptSwitch.OrPatternClause:
        return props_OrPatternClause;
      case LanguageConceptSwitch.OrPatternVariableReference:
        return props_OrPatternVariableReference;
      case LanguageConceptSwitch.Pattern:
        return props_Pattern;
      case LanguageConceptSwitch.PatternExpression:
        return props_PatternExpression;
      case LanguageConceptSwitch.PatternVariableDeclaration:
        return props_PatternVariableDeclaration;
      case LanguageConceptSwitch.PatternVariableReference:
        return props_PatternVariableReference;
      case LanguageConceptSwitch.PropertyPatternVariableDeclaration:
        return props_PropertyPatternVariableDeclaration;
      case LanguageConceptSwitch.WildcardPattern:
        return props_WildcardPattern;
    }
    return null;
  }
}
