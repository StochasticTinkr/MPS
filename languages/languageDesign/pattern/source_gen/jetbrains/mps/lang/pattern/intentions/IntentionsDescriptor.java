package jetbrains.mps.lang.pattern.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionAspectBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.HashMap;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class IntentionsDescriptor extends IntentionAspectBase {
  private static final IntentionFactory[] EMPTY_ARRAY = new IntentionFactory[0];
  private Map<SAbstractConcept, IntentionFactory[]> myCached = new HashMap<SAbstractConcept, IntentionFactory[]>();

  public IntentionsDescriptor() {
  }

  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SAbstractConcept concept) {
    if (myCached.containsKey(concept)) {
      return Arrays.asList(myCached.get(concept));
    }

    IntentionFactory[] intentions = EMPTY_ARRAY;
    SAbstractConcept cncpt = concept;
    switch (index_hphjzv_d0f.index(cncpt)) {
      case 0:
        if (true) {
          // Concept: PatternExpression 
          intentions = new IntentionFactory[8];
          intentions[0] = new CreatePatternVariable_Intention();
          intentions[1] = new CreatePropertyPatternVariable_Intention();
          intentions[2] = new CreateListPattern_Intention();
          intentions[3] = new CreateWildcardPattern_Intention();
          intentions[4] = new CreateAsPattern_Intention();
          intentions[5] = new CreateActionAsPattern_Intention();
          intentions[6] = new CreateOrPattern_Intention();
          intentions[7] = new ConvertPatternNodeToQuotation_Intention();
        }
        break;
      default:
    }
    myCached.put(concept, intentions);
    return Arrays.asList(intentions);
  }

  @NotNull
  @Override
  public Collection<IntentionFactory> getAllIntentions() {
    IntentionFactory[] rv = new IntentionFactory[8];
    rv[0] = new CreatePatternVariable_Intention();
    rv[1] = new CreatePropertyPatternVariable_Intention();
    rv[2] = new CreateListPattern_Intention();
    rv[3] = new CreateWildcardPattern_Intention();
    rv[4] = new CreateAsPattern_Intention();
    rv[5] = new CreateActionAsPattern_Intention();
    rv[6] = new CreateOrPattern_Intention();
    rv[7] = new ConvertPatternNodeToQuotation_Intention();
    return Arrays.asList(rv);
  }
  private static final ConceptSwitchIndex index_hphjzv_d0f = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xd4615e3bd6714ba9L, 0xaf012b78369b0ba7L, 0x108a9cb4791L)).seal();
}
