package jetbrains.mps.lang.traceable.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(3);
  /*package*/ final ConceptDescriptor myConceptScopeConcept = createDescriptorForScopeConcept();
  /*package*/ final ConceptDescriptor myConceptTraceableConcept = createDescriptorForTraceableConcept();
  /*package*/ final ConceptDescriptor myConceptUnitConcept = createDescriptorForUnitConcept();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptScopeConcept.getId(), 0);
    myIndexMap.put(myConceptTraceableConcept.getId(), 1);
    myIndexMap.put(myConceptUnitConcept.getId(), 2);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptScopeConcept, myConceptTraceableConcept, myConceptUnitConcept);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptScopeConcept;
      case 1:
        return myConceptTraceableConcept;
      case 2:
        return myConceptUnitConcept;
      default:
        throw new IllegalStateException();
    }
  }

  private static ConceptDescriptor createDescriptorForScopeConcept() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.traceable.structure.ScopeConcept", MetaIdFactory.conceptId(0x9ded098bad6a4657L, 0xbfd948636cfe8bc3L, 0x465516cf87c705a2L)).version(1).interface_().sourceNode(new SNodePointer("r:3b7ed80f-6cfd-45bc-b051-2f66c620dd27(jetbrains.mps.lang.traceable.structure)", "5067982036267369890")).create();
  }
  private static ConceptDescriptor createDescriptorForTraceableConcept() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.traceable.structure.TraceableConcept", MetaIdFactory.conceptId(0x9ded098bad6a4657L, 0xbfd948636cfe8bc3L, 0x465516cf87c705a3L)).version(1).interface_().sourceNode(new SNodePointer("r:3b7ed80f-6cfd-45bc-b051-2f66c620dd27(jetbrains.mps.lang.traceable.structure)", "5067982036267369891")).create();
  }
  private static ConceptDescriptor createDescriptorForUnitConcept() {
    return new ConceptDescriptorBuilder("jetbrains.mps.lang.traceable.structure.UnitConcept", MetaIdFactory.conceptId(0x9ded098bad6a4657L, 0xbfd948636cfe8bc3L, 0x465516cf87c705a4L)).version(1).interface_().sourceNode(new SNodePointer("r:3b7ed80f-6cfd-45bc-b051-2f66c620dd27(jetbrains.mps.lang.traceable.structure)", "5067982036267369892")).create();
  }
}
