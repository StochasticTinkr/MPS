package jetbrains.mps.lang.smodel.generator.baseLanguage.util;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.behavior.Node_ConceptMethodCall__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.behavior.SNodeOperation__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.core.aspects.behaviour.C3StarMethodResolutionOrder;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.baseLanguage.behavior.BaseMethodDeclaration__BehaviorDescriptor;
import jetbrains.mps.lang.structure.behavior.AbstractConceptDeclaration__BehaviorDescriptor;
import jetbrains.mps.smodel.LanguageAspect;

public class ConceptMethodSuperCallUtils {
  private ConceptMethodSuperCallUtils() {
  }

  public static SNode getNearestOverridenMethod(SNode methodCall) {
    if (!((boolean) Node_ConceptMethodCall__BehaviorDescriptor.isVirtualMethodCall_idhEwIWlZ.invoke(methodCall))) {
      // by default we resolve non-virtual method calls already 
      return SLinkOperations.getTarget(methodCall, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration"));
    }
    SNode concept;
    boolean includingStart;
    SNode superNode = SNodeOperation__BehaviorDescriptor.getLeftExpression_idhEwJdGu.invoke(methodCall);
    SNode superConcept;
    if (SNodeOperations.isInstanceOf(superNode, MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d434a6558L, "jetbrains.mps.lang.behavior.structure.SuperNodeExpression"))) {
      superConcept = SLinkOperations.getTarget(SNodeOperations.cast(superNode, MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d434a6558L, "jetbrains.mps.lang.behavior.structure.SuperNodeExpression")), MetaAdapterFactory.getReferenceLink(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d434a6558L, 0x498a2c3387127040L, "superConcept"));
    } else if (SNodeOperations.isInstanceOf(superNode, MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x69a9d7dcb057a7a7L, "jetbrains.mps.lang.behavior.structure.SuperConceptExpression"))) {
      superConcept = SLinkOperations.getTarget(SNodeOperations.cast(superNode, MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x69a9d7dcb057a7a7L, "jetbrains.mps.lang.behavior.structure.SuperConceptExpression")), MetaAdapterFactory.getReferenceLink(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x69a9d7dcb057a7a7L, 0x69a9d7dcb057a7a8L, "superConcept"));
    } else {
      throw new IllegalArgumentException(SNodeOperations.getConcept(superNode).getName());
    }
    if (superConcept != null) {
      concept = superConcept;
      includingStart = true;
    } else {
      SNode behavior = SNodeOperations.getNodeAncestor(methodCall, MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d43447b1aL, "jetbrains.mps.lang.behavior.structure.ConceptBehavior"), false, false);
      concept = SLinkOperations.getTarget(behavior, MetaAdapterFactory.getReferenceLink(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d43447b1aL, 0x11d43447b1fL, "concept"));
      includingStart = false;
    }
    return ConceptMethodSuperCallUtils.findMethodInConceptMethods(concept, methodCall, includingStart);
  }

  private static SNode findMethodInConceptMethods(SNode concept, SNode methodCall, boolean includingStart) {
    List<SAbstractConcept> ancestors = new C3StarMethodResolutionOrder().linearize(SNodeOperations.asSConcept(concept));
    for (SAbstractConcept ancestor : ListSequence.fromList(ancestors)) {
      // todo [MM]: need an analog to C3Star... working on nodes 
      SNode ancNode = ancestor.getDeclarationNode();
      if (!(includingStart) && ancNode == concept) {
        continue;
      }
      SNode method = findOverridingMethodInConcept(SNodeOperations.cast(ancNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")), SLinkOperations.getTarget(methodCall, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")));
      if (method != null) {
        return method;
      }
    }
    throw new IllegalArgumentException("Method " + SLinkOperations.getTarget(methodCall, MetaAdapterFactory.getReferenceLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11857355952L, 0xf8c78301adL, "baseMethodDeclaration")) + " could not be found within " + concept);
  }

  private static SNode findOverridingMethodInConcept(SNode concept, SNode methodDecl) {
    SNode behavior = ConceptMethodSuperCallUtils.getBehavior(concept);
    for (SNode method : ListSequence.fromList(SLinkOperations.getChildren(behavior, MetaAdapterFactory.getContainmentLink(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d43447b1aL, 0x11d43447b25L, "method")))) {
      if (!(SPropertyOperations.getBoolean(method, MetaAdapterFactory.getProperty(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d4348057eL, 0x11d43480580L, "isVirtual"))) && SLinkOperations.getTarget(method, MetaAdapterFactory.getReferenceLink(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d4348057eL, 0x11d4348057fL, "overriddenMethod")) == null) {
        continue;
      }
      SNode baseMethod = BaseMethodDeclaration__BehaviorDescriptor.getBaseMethod_id4mmymf_0z7l.invoke(method);
      if (baseMethod == null) {
        baseMethod = method;
      }
      // we have to use getNodeId here and below because the overrides reference lies only in the original model, so id differs 
      if (baseMethod.getNodeId() == methodDecl.getNodeId()) {
        return method;
      }
    }
    return null;
  }

  private static SNode getBehavior(SNode concept) {
    return SNodeOperations.cast(AbstractConceptDeclaration__BehaviorDescriptor.findConceptAspect_id7g4OXB0ykew.invoke(concept, LanguageAspect.BEHAVIOR), MetaAdapterFactory.getConcept(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d43447b1aL, "jetbrains.mps.lang.behavior.structure.ConceptBehavior"));
  }
}
