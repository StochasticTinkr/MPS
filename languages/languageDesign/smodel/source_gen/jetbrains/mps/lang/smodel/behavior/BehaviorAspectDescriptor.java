package jetbrains.mps.lang.smodel.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import jetbrains.mps.smodel.runtime.BehaviorDescriptor;
import jetbrains.mps.smodel.runtime.interpreted.BehaviorAspectInterpreted;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.Arrays;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor mySNodeType__BehaviorDescriptor = new SNodeType__BehaviorDescriptor();
  private final BHDescriptor mySPropertyAccess__BehaviorDescriptor = new SPropertyAccess__BehaviorDescriptor();
  private final BHDescriptor mySLinkAccess__BehaviorDescriptor = new SLinkAccess__BehaviorDescriptor();
  private final BHDescriptor mySLinkListAccess__BehaviorDescriptor = new SLinkListAccess__BehaviorDescriptor();
  private final BHDescriptor mySNodeOperation__BehaviorDescriptor = new SNodeOperation__BehaviorDescriptor();
  private final BHDescriptor myProperty_SetOperation__BehaviorDescriptor = new Property_SetOperation__BehaviorDescriptor();
  private final BHDescriptor myEnumMemberReference__BehaviorDescriptor = new EnumMemberReference__BehaviorDescriptor();
  private final BHDescriptor myLink_SetNewChildOperation__BehaviorDescriptor = new Link_SetNewChildOperation__BehaviorDescriptor();
  private final BHDescriptor myLinkList_AddNewChildOperation__BehaviorDescriptor = new LinkList_AddNewChildOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_GetParentOperation__BehaviorDescriptor = new Node_GetParentOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_IsInstanceOfOperation__BehaviorDescriptor = new Node_IsInstanceOfOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_InsertNewNextSiblingOperation__BehaviorDescriptor = new Node_InsertNewNextSiblingOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_ReplaceWithNewOperation__BehaviorDescriptor = new Node_ReplaceWithNewOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_ReplaceWithAnotherOperation__BehaviorDescriptor = new Node_ReplaceWithAnotherOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_DeleteOperation__BehaviorDescriptor = new Node_DeleteOperation__BehaviorDescriptor();
  private final BHDescriptor mySNodeTypeCastExpression__BehaviorDescriptor = new SNodeTypeCastExpression__BehaviorDescriptor();
  private final BHDescriptor myLink_SetTargetOperation__BehaviorDescriptor = new Link_SetTargetOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_InsertNewPrevSiblingOperation__BehaviorDescriptor = new Node_InsertNewPrevSiblingOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_InsertNextSiblingOperation__BehaviorDescriptor = new Node_InsertNextSiblingOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_InsertPrevSiblingOperation__BehaviorDescriptor = new Node_InsertPrevSiblingOperation__BehaviorDescriptor();
  private final BHDescriptor mySModelType__BehaviorDescriptor = new SModelType__BehaviorDescriptor();
  private final BHDescriptor myNode_GetModelOperation__BehaviorDescriptor = new Node_GetModelOperation__BehaviorDescriptor();
  private final BHDescriptor myModel_CreateNewNodeOperation__BehaviorDescriptor = new Model_CreateNewNodeOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_GetPrevSiblingOperation__BehaviorDescriptor = new Node_GetPrevSiblingOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_GetNextSiblingOperation__BehaviorDescriptor = new Node_GetNextSiblingOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_CopyOperation__BehaviorDescriptor = new Node_CopyOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_IsRoleOperation__BehaviorDescriptor = new Node_IsRoleOperation__BehaviorDescriptor();
  private final BHDescriptor mySNodeListType__BehaviorDescriptor = new SNodeListType__BehaviorDescriptor();
  private final BHDescriptor mySemanticDowncastExpression__BehaviorDescriptor = new SemanticDowncastExpression__BehaviorDescriptor();
  private final BHDescriptor myNode_GetNextSiblingsOperation__BehaviorDescriptor = new Node_GetNextSiblingsOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_GetPrevSiblingsOperation__BehaviorDescriptor = new Node_GetPrevSiblingsOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_GetAllSiblingsOperation__BehaviorDescriptor = new Node_GetAllSiblingsOperation__BehaviorDescriptor();
  private final BHDescriptor myProperty_HasValue_Enum__BehaviorDescriptor = new Property_HasValue_Enum__BehaviorDescriptor();
  private final BHDescriptor myProperty_HasValue_Simple__BehaviorDescriptor = new Property_HasValue_Simple__BehaviorDescriptor();
  private final BHDescriptor myModel_CreateNewRootNodeOperation__BehaviorDescriptor = new Model_CreateNewRootNodeOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_GetDescendantsOperation__BehaviorDescriptor = new Node_GetDescendantsOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_GetContainingRootOperation__BehaviorDescriptor = new Node_GetContainingRootOperation__BehaviorDescriptor();
  private final BHDescriptor myModel_RootsOperation__BehaviorDescriptor = new Model_RootsOperation__BehaviorDescriptor();
  private final BHDescriptor myModel_NodesOperation__BehaviorDescriptor = new Model_NodesOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_GetAncestorOperation__BehaviorDescriptor = new Node_GetAncestorOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_GetChildrenOperation__BehaviorDescriptor = new Node_GetChildrenOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_IsNullOperation__BehaviorDescriptor = new Node_IsNullOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_IsNotNullOperation__BehaviorDescriptor = new Node_IsNotNullOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_GetConceptOperation__BehaviorDescriptor = new Node_GetConceptOperation__BehaviorDescriptor();
  private final BHDescriptor myConcept_IsExactlyOperation__BehaviorDescriptor = new Concept_IsExactlyOperation__BehaviorDescriptor();
  private final BHDescriptor myConceptNodeType__BehaviorDescriptor = new ConceptNodeType__BehaviorDescriptor();
  private final BHDescriptor myNode_GetAncestorsOperation__BehaviorDescriptor = new Node_GetAncestorsOperation__BehaviorDescriptor();
  private final BHDescriptor myModel_RootsIncludingImportedOperation__BehaviorDescriptor = new Model_RootsIncludingImportedOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_GetIndexInParentOperation__BehaviorDescriptor = new Node_GetIndexInParentOperation__BehaviorDescriptor();
  private final BHDescriptor myConcept_GetDirectSuperConcepts__BehaviorDescriptor = new Concept_GetDirectSuperConcepts__BehaviorDescriptor();
  private final BHDescriptor myNode_ConceptMethodCall__BehaviorDescriptor = new Node_ConceptMethodCall__BehaviorDescriptor();
  private final BHDescriptor myConcept_IsSuperConceptOfOperation__BehaviorDescriptor = new Concept_IsSuperConceptOfOperation__BehaviorDescriptor();
  private final BHDescriptor myConcept_IsSubConceptOfOperation__BehaviorDescriptor = new Concept_IsSubConceptOfOperation__BehaviorDescriptor();
  private final BHDescriptor myConcept_GetAllSuperConcepts__BehaviorDescriptor = new Concept_GetAllSuperConcepts__BehaviorDescriptor();
  private final BHDescriptor myConcept_GetHierarchy__BehaviorDescriptor = new Concept_GetHierarchy__BehaviorDescriptor();
  private final BHDescriptor myConcept_NewInstance__BehaviorDescriptor = new Concept_NewInstance__BehaviorDescriptor();
  private final BHDescriptor myConcept_GetAllSubConcepts__BehaviorDescriptor = new Concept_GetAllSubConcepts__BehaviorDescriptor();
  private final BHDescriptor myModel_NodesIncludingImportedOperation__BehaviorDescriptor = new Model_NodesIncludingImportedOperation__BehaviorDescriptor();
  private final BHDescriptor myLinkRefQualifier__BehaviorDescriptor = new LinkRefQualifier__BehaviorDescriptor();
  private final BHDescriptor myNode_IsAttributeOperation__BehaviorDescriptor = new Node_IsAttributeOperation__BehaviorDescriptor();
  private final BHDescriptor myModel_AddRootOperation__BehaviorDescriptor = new Model_AddRootOperation__BehaviorDescriptor();
  private final BHDescriptor myModel_GetLongNameOperation__BehaviorDescriptor = new Model_GetLongNameOperation__BehaviorDescriptor();
  private final BHDescriptor myProperty_RemoveOperation__BehaviorDescriptor = new Property_RemoveOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeRefExpression__BehaviorDescriptor = new NodeRefExpression__BehaviorDescriptor();
  private final BHDescriptor myNode_GetReferentSearchScopeOperation__BehaviorDescriptor = new Node_GetReferentSearchScopeOperation__BehaviorDescriptor();
  private final BHDescriptor myEqualsStructurallyExpression__BehaviorDescriptor = new EqualsStructurallyExpression__BehaviorDescriptor();
  private final BHDescriptor myNode_DetachOperation__BehaviorDescriptor = new Node_DetachOperation__BehaviorDescriptor();
  private final BHDescriptor mySEnumMemberType__BehaviorDescriptor = new SEnumMemberType__BehaviorDescriptor();
  private final BHDescriptor mySEnumOperation__BehaviorDescriptor = new SEnumOperation__BehaviorDescriptor();
  private final BHDescriptor myAsSConcept__BehaviorDescriptor = new AsSConcept__BehaviorDescriptor();
  private final BHDescriptor myModulePointer__BehaviorDescriptor = new ModulePointer__BehaviorDescriptor();
  private final BHDescriptor myModuleIdentity__BehaviorDescriptor = new ModuleIdentity__BehaviorDescriptor();
  private final BHDescriptor myModelReferenceExpression__BehaviorDescriptor = new ModelReferenceExpression__BehaviorDescriptor();
  private final BHDescriptor myChildNodeRefExpression__BehaviorDescriptor = new ChildNodeRefExpression__BehaviorDescriptor();
  private final BHDescriptor myChildAttributeQualifier__BehaviorDescriptor = new ChildAttributeQualifier__BehaviorDescriptor();
  private final BHDescriptor myIfInstanceOfVariable__BehaviorDescriptor = new IfInstanceOfVariable__BehaviorDescriptor();
  private final BHDescriptor myNode_GetContainingRoleOperation__BehaviorDescriptor = new Node_GetContainingRoleOperation__BehaviorDescriptor();
  private final BHDescriptor myILinkAccessQualifierContainer__BehaviorDescriptor = new ILinkAccessQualifierContainer__BehaviorDescriptor();
  private final BHDescriptor myLanguageIdentity__BehaviorDescriptor = new LanguageIdentity__BehaviorDescriptor();
  private final BHDescriptor myLanguageId__BehaviorDescriptor = new LanguageId__BehaviorDescriptor();
  private final BHDescriptor myAbstractNodeRefExpression__BehaviorDescriptor = new AbstractNodeRefExpression__BehaviorDescriptor();
  private final BHDescriptor myNode_GetReferenceOperation__BehaviorDescriptor = new Node_GetReferenceOperation__BehaviorDescriptor();
  private final BHDescriptor myILinkAccess__BehaviorDescriptor = new ILinkAccess__BehaviorDescriptor();
  private final BHDescriptor myModuleReferenceExpression__BehaviorDescriptor = new ModuleReferenceExpression__BehaviorDescriptor();
  private final BHDescriptor myLanguageReferenceExpression__BehaviorDescriptor = new LanguageReferenceExpression__BehaviorDescriptor();
  private final BHDescriptor myLanguageRefExpression__BehaviorDescriptor = new LanguageRefExpression__BehaviorDescriptor();
  private final BHDescriptor myNode_PointerOperation__BehaviorDescriptor = new Node_PointerOperation__BehaviorDescriptor();
  private final BHDescriptor myOperationParm_LinkQualifier__BehaviorDescriptor = new OperationParm_LinkQualifier__BehaviorDescriptor();
  private final BHDescriptor myNode_GetContainingLinkOperation__BehaviorDescriptor = new Node_GetContainingLinkOperation__BehaviorDescriptor();
  private final BHDescriptor myAttributeAccess__BehaviorDescriptor = new AttributeAccess__BehaviorDescriptor();
  private final BHDescriptor myAttributeQualifier__BehaviorDescriptor = new AttributeQualifier__BehaviorDescriptor();
  private final BHDescriptor myNodeAttributeQualifier__BehaviorDescriptor = new NodeAttributeQualifier__BehaviorDescriptor();
  private final BHDescriptor myLinkAttributeQualifier__BehaviorDescriptor = new LinkAttributeQualifier__BehaviorDescriptor();
  private final BHDescriptor myPropertyAttributeQualifier__BehaviorDescriptor = new PropertyAttributeQualifier__BehaviorDescriptor();
  private final BHDescriptor mySConceptType__BehaviorDescriptor = new SConceptType__BehaviorDescriptor();
  private final BHDescriptor myPropertyIdentity__BehaviorDescriptor = new PropertyIdentity__BehaviorDescriptor();
  private final BHDescriptor myConceptIdentity__BehaviorDescriptor = new ConceptIdentity__BehaviorDescriptor();
  private final BHDescriptor myConceptId__BehaviorDescriptor = new ConceptId__BehaviorDescriptor();
  private final BHDescriptor myPropertyId__BehaviorDescriptor = new PropertyId__BehaviorDescriptor();
  private final BHDescriptor myModel_GetModule__BehaviorDescriptor = new Model_GetModule__BehaviorDescriptor();
  private final BHDescriptor myNode_GetSConceptOperation__BehaviorDescriptor = new Node_GetSConceptOperation__BehaviorDescriptor();
  private final BHDescriptor myNode_GetReferencesOperation__BehaviorDescriptor = new Node_GetReferencesOperation__BehaviorDescriptor();
  private final BHDescriptor myAsNodeOperation__BehaviorDescriptor = new AsNodeOperation__BehaviorDescriptor();

  private final long[] myConceptBehaviorIds;

  public BehaviorAspectDescriptor() {
    myConceptBehaviorIds = new long[103];
    myConceptBehaviorIds[0] = 0x108f968b3caL;
    myConceptBehaviorIds[1] = 0x108f96cca6fL;
    myConceptBehaviorIds[2] = 0x108f96ea2caL;
    myConceptBehaviorIds[3] = 0x108f970c119L;
    myConceptBehaviorIds[4] = 0x1090ea2ebacL;
    myConceptBehaviorIds[5] = 0x1091d8a1d53L;
    myConceptBehaviorIds[6] = 0x1091e6212fdL;
    myConceptBehaviorIds[7] = 0x109233dbca1L;
    myConceptBehaviorIds[8] = 0x1093caead54L;
    myConceptBehaviorIds[9] = 0x109563e6169L;
    myConceptBehaviorIds[10] = 0x10956bb6029L;
    myConceptBehaviorIds[11] = 0x10964e26717L;
    myConceptBehaviorIds[12] = 0x10965697d7aL;
    myConceptBehaviorIds[13] = 0x10975273750L;
    myConceptBehaviorIds[14] = 0x1097542784fL;
    myConceptBehaviorIds[15] = 0x10975850da7L;
    myConceptBehaviorIds[16] = 0x1099887af60L;
    myConceptBehaviorIds[17] = 0x10a2d494062L;
    myConceptBehaviorIds[18] = 0x10a2d76e31eL;
    myConceptBehaviorIds[19] = 0x10a2d77d0e1L;
    myConceptBehaviorIds[20] = 0x10a2d94c0cdL;
    myConceptBehaviorIds[21] = 0x10a2e126334L;
    myConceptBehaviorIds[22] = 0x10a2e210544L;
    myConceptBehaviorIds[23] = 0x10a3e9fedc7L;
    myConceptBehaviorIds[24] = 0x10a3ea0a40dL;
    myConceptBehaviorIds[25] = 0x10a646d8514L;
    myConceptBehaviorIds[26] = 0x10a67578ddeL;
    myConceptBehaviorIds[27] = 0x10aae26be32L;
    myConceptBehaviorIds[28] = 0x10aaf6d7435L;
    myConceptBehaviorIds[29] = 0x10ab957e8bbL;
    myConceptBehaviorIds[30] = 0x10ab975b657L;
    myConceptBehaviorIds[31] = 0x10ab97e0a94L;
    myConceptBehaviorIds[32] = 0x10add1ded2bL;
    myConceptBehaviorIds[33] = 0x10ae2053294L;
    myConceptBehaviorIds[34] = 0x10fa1ac23f2L;
    myConceptBehaviorIds[35] = 0x110b73c3484L;
    myConceptBehaviorIds[36] = 0x110b78550e8L;
    myConceptBehaviorIds[37] = 0x110b7dcc9bcL;
    myConceptBehaviorIds[38] = 0x110b8590897L;
    myConceptBehaviorIds[39] = 0x110bd4e0067L;
    myConceptBehaviorIds[40] = 0x110c2e679e7L;
    myConceptBehaviorIds[41] = 0x110e0974e46L;
    myConceptBehaviorIds[42] = 0x110e123bce7L;
    myConceptBehaviorIds[43] = 0x110f3e65fdcL;
    myConceptBehaviorIds[44] = 0x110f41acfb7L;
    myConceptBehaviorIds[45] = 0x110f9b63680L;
    myConceptBehaviorIds[46] = 0x1112390be59L;
    myConceptBehaviorIds[47] = 0x111d5999a91L;
    myConceptBehaviorIds[48] = 0x1128be3ca6aL;
    myConceptBehaviorIds[49] = 0x11296bd8374L;
    myConceptBehaviorIds[50] = 0x1129a43046bL;
    myConceptBehaviorIds[51] = 0x112bf289d94L;
    myConceptBehaviorIds[52] = 0x112bf601180L;
    myConceptBehaviorIds[53] = 0x112d8bf5d03L;
    myConceptBehaviorIds[54] = 0x112d8ce685dL;
    myConceptBehaviorIds[55] = 0x11331ad1f2aL;
    myConceptBehaviorIds[56] = 0x11331e18cdcL;
    myConceptBehaviorIds[57] = 0x1135326811cL;
    myConceptBehaviorIds[58] = 0x11886c4bac0L;
    myConceptBehaviorIds[59] = 0x118c2f5b5f6L;
    myConceptBehaviorIds[60] = 0x118e7faea40L;
    myConceptBehaviorIds[61] = 0x11a3152e18bL;
    myConceptBehaviorIds[62] = 0x11aff7f2bb2L;
    myConceptBehaviorIds[63] = 0x11be716563cL;
    myConceptBehaviorIds[64] = 0x11c530706b2L;
    myConceptBehaviorIds[65] = 0x11dbead8683L;
    myConceptBehaviorIds[66] = 0x11dfede6ec0L;
    myConceptBehaviorIds[67] = 0x120bfe51421L;
    myConceptBehaviorIds[68] = 0x120ed37273dL;
    myConceptBehaviorIds[69] = 0x4a4d7215f163131L;
    myConceptBehaviorIds[70] = 0x5ef5a1e853388b3L;
    myConceptBehaviorIds[71] = 0x5ef5a1e85338e1eL;
    myConceptBehaviorIds[72] = 0x7c3f2da20e92b62L;
    myConceptBehaviorIds[73] = 0x84baf20c71f8a79L;
    myConceptBehaviorIds[74] = 0x9d98713f24a0e5bL;
    myConceptBehaviorIds[75] = 0x1a228da1357e4a49L;
    myConceptBehaviorIds[76] = 0x1b35e18a1a3b2c9aL;
    myConceptBehaviorIds[77] = 0x312a67f61731e269L;
    myConceptBehaviorIds[78] = 0x312abca18ab8c318L;
    myConceptBehaviorIds[79] = 0x312abca18ab8c8c0L;
    myConceptBehaviorIds[80] = 0x319fd776da5d8e3cL;
    myConceptBehaviorIds[81] = 0x32187d80f5b88800L;
    myConceptBehaviorIds[82] = 0x37d97a5712d396cbL;
    myConceptBehaviorIds[83] = 0x38130dc4e3db5af1L;
    myConceptBehaviorIds[84] = 0x38130dc4e3dc174aL;
    myConceptBehaviorIds[85] = 0x3e6a40ba27dd70f3L;
    myConceptBehaviorIds[86] = 0x4604033d54faa023L;
    myConceptBehaviorIds[87] = 0x47bb2de70d00ff8cL;
    myConceptBehaviorIds[88] = 0x50c63f2cd5142697L;
    myConceptBehaviorIds[89] = 0x58ea5217b045a3b2L;
    myConceptBehaviorIds[90] = 0x58ea5217b045b9abL;
    myConceptBehaviorIds[91] = 0x58ea5217b045b9b5L;
    myConceptBehaviorIds[92] = 0x58ea5217b045b9b7L;
    myConceptBehaviorIds[93] = 0x58ea5217b045c9b9L;
    myConceptBehaviorIds[94] = 0x5cab42cd97571ceeL;
    myConceptBehaviorIds[95] = 0x5fea1eb9fefb4617L;
    myConceptBehaviorIds[96] = 0x5fea1eb9fefb4642L;
    myConceptBehaviorIds[97] = 0x5fea1eb9fefb6fe7L;
    myConceptBehaviorIds[98] = 0x5fea1eb9fefc235cL;
    myConceptBehaviorIds[99] = 0x61168e34226eec71L;
    myConceptBehaviorIds[100] = 0x6771eac6c5cbe7d2L;
    myConceptBehaviorIds[101] = 0x798c0d67da9045abL;
    myConceptBehaviorIds[102] = 0x7b0da3c650be8558L;
  }

  @Deprecated
  @Override
  public BehaviorDescriptor getDescriptor(String fqName) {
    return BehaviorAspectInterpreted.getInstance().getDescriptor(fqName);
  }

  @Nullable
  @Override
  public BHDescriptor getDescriptor(@NotNull SConceptId conceptId) {
    int behaviorIndex = Arrays.binarySearch(myConceptBehaviorIds, conceptId.getIdValue());
    switch (behaviorIndex) {
      case 0:
        return mySNodeType__BehaviorDescriptor;
      case 1:
        return mySPropertyAccess__BehaviorDescriptor;
      case 2:
        return mySLinkAccess__BehaviorDescriptor;
      case 3:
        return mySLinkListAccess__BehaviorDescriptor;
      case 4:
        return mySNodeOperation__BehaviorDescriptor;
      case 5:
        return myProperty_SetOperation__BehaviorDescriptor;
      case 6:
        return myEnumMemberReference__BehaviorDescriptor;
      case 7:
        return myLink_SetNewChildOperation__BehaviorDescriptor;
      case 8:
        return myLinkList_AddNewChildOperation__BehaviorDescriptor;
      case 9:
        return myNode_GetParentOperation__BehaviorDescriptor;
      case 10:
        return myNode_IsInstanceOfOperation__BehaviorDescriptor;
      case 11:
        return myNode_InsertNewNextSiblingOperation__BehaviorDescriptor;
      case 12:
        return myNode_ReplaceWithNewOperation__BehaviorDescriptor;
      case 13:
        return myNode_ReplaceWithAnotherOperation__BehaviorDescriptor;
      case 14:
        return myNode_DeleteOperation__BehaviorDescriptor;
      case 15:
        return mySNodeTypeCastExpression__BehaviorDescriptor;
      case 16:
        return myLink_SetTargetOperation__BehaviorDescriptor;
      case 17:
        return myNode_InsertNewPrevSiblingOperation__BehaviorDescriptor;
      case 18:
        return myNode_InsertNextSiblingOperation__BehaviorDescriptor;
      case 19:
        return myNode_InsertPrevSiblingOperation__BehaviorDescriptor;
      case 20:
        return mySModelType__BehaviorDescriptor;
      case 21:
        return myNode_GetModelOperation__BehaviorDescriptor;
      case 22:
        return myModel_CreateNewNodeOperation__BehaviorDescriptor;
      case 23:
        return myNode_GetPrevSiblingOperation__BehaviorDescriptor;
      case 24:
        return myNode_GetNextSiblingOperation__BehaviorDescriptor;
      case 25:
        return myNode_CopyOperation__BehaviorDescriptor;
      case 26:
        return myNode_IsRoleOperation__BehaviorDescriptor;
      case 27:
        return mySNodeListType__BehaviorDescriptor;
      case 28:
        return mySemanticDowncastExpression__BehaviorDescriptor;
      case 29:
        return myNode_GetNextSiblingsOperation__BehaviorDescriptor;
      case 30:
        return myNode_GetPrevSiblingsOperation__BehaviorDescriptor;
      case 31:
        return myNode_GetAllSiblingsOperation__BehaviorDescriptor;
      case 32:
        return myProperty_HasValue_Enum__BehaviorDescriptor;
      case 33:
        return myProperty_HasValue_Simple__BehaviorDescriptor;
      case 34:
        return myModel_CreateNewRootNodeOperation__BehaviorDescriptor;
      case 35:
        return myNode_GetDescendantsOperation__BehaviorDescriptor;
      case 36:
        return myNode_GetContainingRootOperation__BehaviorDescriptor;
      case 37:
        return myModel_RootsOperation__BehaviorDescriptor;
      case 38:
        return myModel_NodesOperation__BehaviorDescriptor;
      case 39:
        return myNode_GetAncestorOperation__BehaviorDescriptor;
      case 40:
        return myNode_GetChildrenOperation__BehaviorDescriptor;
      case 41:
        return myNode_IsNullOperation__BehaviorDescriptor;
      case 42:
        return myNode_IsNotNullOperation__BehaviorDescriptor;
      case 43:
        return myNode_GetConceptOperation__BehaviorDescriptor;
      case 44:
        return myConcept_IsExactlyOperation__BehaviorDescriptor;
      case 45:
        return myConceptNodeType__BehaviorDescriptor;
      case 46:
        return myNode_GetAncestorsOperation__BehaviorDescriptor;
      case 47:
        return myModel_RootsIncludingImportedOperation__BehaviorDescriptor;
      case 48:
        return myNode_GetIndexInParentOperation__BehaviorDescriptor;
      case 49:
        return myConcept_GetDirectSuperConcepts__BehaviorDescriptor;
      case 50:
        return myNode_ConceptMethodCall__BehaviorDescriptor;
      case 51:
        return myConcept_IsSuperConceptOfOperation__BehaviorDescriptor;
      case 52:
        return myConcept_IsSubConceptOfOperation__BehaviorDescriptor;
      case 53:
        return myConcept_GetAllSuperConcepts__BehaviorDescriptor;
      case 54:
        return myConcept_GetHierarchy__BehaviorDescriptor;
      case 55:
        return myConcept_NewInstance__BehaviorDescriptor;
      case 56:
        return myConcept_GetAllSubConcepts__BehaviorDescriptor;
      case 57:
        return myModel_NodesIncludingImportedOperation__BehaviorDescriptor;
      case 58:
        return myLinkRefQualifier__BehaviorDescriptor;
      case 59:
        return myNode_IsAttributeOperation__BehaviorDescriptor;
      case 60:
        return myModel_AddRootOperation__BehaviorDescriptor;
      case 61:
        return myModel_GetLongNameOperation__BehaviorDescriptor;
      case 62:
        return myProperty_RemoveOperation__BehaviorDescriptor;
      case 63:
        return myNodeRefExpression__BehaviorDescriptor;
      case 64:
        return myNode_GetReferentSearchScopeOperation__BehaviorDescriptor;
      case 65:
        return myEqualsStructurallyExpression__BehaviorDescriptor;
      case 66:
        return myNode_DetachOperation__BehaviorDescriptor;
      case 67:
        return mySEnumMemberType__BehaviorDescriptor;
      case 68:
        return mySEnumOperation__BehaviorDescriptor;
      case 69:
        return myAsSConcept__BehaviorDescriptor;
      case 70:
        return myModulePointer__BehaviorDescriptor;
      case 71:
        return myModuleIdentity__BehaviorDescriptor;
      case 72:
        return myModelReferenceExpression__BehaviorDescriptor;
      case 73:
        return myChildNodeRefExpression__BehaviorDescriptor;
      case 74:
        return myChildAttributeQualifier__BehaviorDescriptor;
      case 75:
        return myIfInstanceOfVariable__BehaviorDescriptor;
      case 76:
        return myNode_GetContainingRoleOperation__BehaviorDescriptor;
      case 77:
        return myILinkAccessQualifierContainer__BehaviorDescriptor;
      case 78:
        return myLanguageIdentity__BehaviorDescriptor;
      case 79:
        return myLanguageId__BehaviorDescriptor;
      case 80:
        return myAbstractNodeRefExpression__BehaviorDescriptor;
      case 81:
        return myNode_GetReferenceOperation__BehaviorDescriptor;
      case 82:
        return myILinkAccess__BehaviorDescriptor;
      case 83:
        return myModuleReferenceExpression__BehaviorDescriptor;
      case 84:
        return myLanguageReferenceExpression__BehaviorDescriptor;
      case 85:
        return myLanguageRefExpression__BehaviorDescriptor;
      case 86:
        return myNode_PointerOperation__BehaviorDescriptor;
      case 87:
        return myOperationParm_LinkQualifier__BehaviorDescriptor;
      case 88:
        return myNode_GetContainingLinkOperation__BehaviorDescriptor;
      case 89:
        return myAttributeAccess__BehaviorDescriptor;
      case 90:
        return myAttributeQualifier__BehaviorDescriptor;
      case 91:
        return myNodeAttributeQualifier__BehaviorDescriptor;
      case 92:
        return myLinkAttributeQualifier__BehaviorDescriptor;
      case 93:
        return myPropertyAttributeQualifier__BehaviorDescriptor;
      case 94:
        return mySConceptType__BehaviorDescriptor;
      case 95:
        return myPropertyIdentity__BehaviorDescriptor;
      case 96:
        return myConceptIdentity__BehaviorDescriptor;
      case 97:
        return myConceptId__BehaviorDescriptor;
      case 98:
        return myPropertyId__BehaviorDescriptor;
      case 99:
        return myModel_GetModule__BehaviorDescriptor;
      case 100:
        return myNode_GetSConceptOperation__BehaviorDescriptor;
      case 101:
        return myNode_GetReferencesOperation__BehaviorDescriptor;
      case 102:
        return myAsNodeOperation__BehaviorDescriptor;
      default:
        return null;
    }
  }
}
