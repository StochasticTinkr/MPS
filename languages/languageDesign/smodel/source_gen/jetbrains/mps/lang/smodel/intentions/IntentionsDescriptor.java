package jetbrains.mps.lang.smodel.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionAspectBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.HashMap;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class IntentionsDescriptor extends IntentionAspectBase {
  private static final IntentionFactory[] EMPTY_ARRAY = new IntentionFactory[0];
  private Map<SAbstractConcept, IntentionFactory[]> myCached = new HashMap<SAbstractConcept, IntentionFactory[]>();

  public IntentionsDescriptor() {
  }

  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SAbstractConcept concept) {
    if (myCached.containsKey(concept)) {
      return Arrays.asList(myCached.get(concept));
    }

    IntentionFactory[] intentions = EMPTY_ARRAY;
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_hphjzv_d0f.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            // Concept: CastExpression 
            intentions = new IntentionFactory[1];
            intentions[0] = new ConvertCastToNodeCast_Intention();
          }
          break;
        case 1:
          if (true) {
            // Concept: CheckedModuleReference 
            intentions = new IntentionFactory[1];
            intentions[0] = new ReplaceWithUncheckedRef_Intention();
          }
          break;
        case 2:
          if (true) {
            // Concept: ConceptFqNameRefExpression 
            intentions = new IntentionFactory[1];
            intentions[0] = new ConceptName2Concept_Intention();
          }
          break;
        case 3:
          if (true) {
            // Concept: ConceptNodeType 
            intentions = new IntentionFactory[1];
            intentions[0] = new ConceptNodeType2SConceptType_Intention();
          }
          break;
        case 4:
          if (true) {
            // Concept: ConceptRefExpression 
            intentions = new IntentionFactory[1];
            intentions[0] = new ConceptRef2Concept_Intention();
          }
          break;
        case 5:
          if (true) {
            // Concept: IfStatement 
            intentions = new IntentionFactory[1];
            intentions[0] = new AddSNodeCastStatement_Intention();
          }
          break;
        case 6:
          if (true) {
            // Concept: InstanceOfExpression 
            intentions = new IntentionFactory[1];
            intentions[0] = new ConvertInstanceofToNodeInstanceof_Intention();
          }
          break;
        case 7:
          if (true) {
            // Concept: LinkNameRefExpression 
            intentions = new IntentionFactory[1];
            intentions[0] = new LinkName2Link_Intention();
          }
          break;
        case 8:
          if (true) {
            // Concept: LinkRefExpression 
            intentions = new IntentionFactory[1];
            intentions[0] = new LinkRef2Link_Intention();
          }
          break;
        case 9:
          if (true) {
            // Concept: Link_SetTargetOperation 
            intentions = new IntentionFactory[1];
            intentions[0] = new ConvertLinkSetToAssignment_Intention();
          }
          break;
        case 10:
          if (true) {
            // Concept: ListType 
            intentions = new IntentionFactory[1];
            intentions[0] = new Replace_ListType_withNodeListType_Intention();
          }
          break;
        case 11:
          if (true) {
            // Concept: Node_GetConceptOperation 
            intentions = new IntentionFactory[1];
            intentions[0] = new ConvertConceptNodeToSCOncept_Intention();
          }
          break;
        case 12:
          if (true) {
            // Concept: OperationParm_Concept 
            intentions = new IntentionFactory[1];
            intentions[0] = new ReplaceConceptIsWithConceptEquals_Intention();
          }
          break;
        case 13:
          if (true) {
            // Concept: Property_SetOperation 
            intentions = new IntentionFactory[1];
            intentions[0] = new ConvertPropertySetToAssignment_Intention();
          }
          break;
        case 14:
          if (true) {
            // Concept: SNodeOperation 
            intentions = new IntentionFactory[1];
            intentions[0] = new AddOperationParameter_Intention();
          }
          break;
        case 15:
          if (true) {
            // Concept: SNodeTypeCastExpression 
            intentions = new IntentionFactory[2];
            intentions[0] = new ChangeAsCast_Intention();
            intentions[1] = new ConvertCastToSConceptType_Intention();
          }
          break;
        default:
          // default 
      }
    }
    myCached.put(concept, intentions);
    return Arrays.asList(intentions);
  }

  @NotNull
  @Override
  public Collection<IntentionFactory> getAllIntentions() {
    IntentionFactory[] rv = new IntentionFactory[17];
    rv[0] = new AddSNodeCastStatement_Intention();
    rv[1] = new ReplaceConceptIsWithConceptEquals_Intention();
    rv[2] = new Replace_ListType_withNodeListType_Intention();
    rv[3] = new AddOperationParameter_Intention();
    rv[4] = new ConvertPropertySetToAssignment_Intention();
    rv[5] = new ConvertLinkSetToAssignment_Intention();
    rv[6] = new ChangeAsCast_Intention();
    rv[7] = new ConvertCastToNodeCast_Intention();
    rv[8] = new ConvertInstanceofToNodeInstanceof_Intention();
    rv[9] = new LinkRef2Link_Intention();
    rv[10] = new LinkName2Link_Intention();
    rv[11] = new ConceptRef2Concept_Intention();
    rv[12] = new ConceptName2Concept_Intention();
    rv[13] = new ConceptNodeType2SConceptType_Intention();
    rv[14] = new ReplaceWithUncheckedRef_Intention();
    rv[15] = new ConvertCastToSConceptType_Intention();
    rv[16] = new ConvertConceptNodeToSCOncept_Intention();
    return Arrays.asList(rv);
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_hphjzv_d0f = buildConceptIndices(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf940dabe4aL, "jetbrains.mps.baseLanguage.structure.CastExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x3c7a9d8c8d63d4f3L, "jetbrains.mps.lang.smodel.structure.CheckedModuleReference"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x73bd24cca4f91254L, "jetbrains.mps.lang.smodel.structure.ConceptFqNameRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110f9b63680L, "jetbrains.mps.lang.smodel.structure.ConceptNodeType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110f9eb64c6L, "jetbrains.mps.lang.smodel.structure.ConceptRefExpression"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b217L, "jetbrains.mps.baseLanguage.structure.IfStatement"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbbff03700L, "jetbrains.mps.baseLanguage.structure.InstanceOfExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x48e6e2695189e59aL, "jetbrains.mps.lang.smodel.structure.LinkNameRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11d88b27d15L, "jetbrains.mps.lang.smodel.structure.LinkRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1099887af60L, "jetbrains.mps.lang.smodel.structure.Link_SetTargetOperation"), MetaAdapterFactory.getConcept(0x8388864671ce4f1cL, 0x9c53c54016f6ad4fL, 0x10c25fb076aL, "jetbrains.mps.baseLanguage.collections.structure.ListType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110f3e65fdcL, "jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a61caab68L, "jetbrains.mps.lang.smodel.structure.OperationParm_Concept"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1091d8a1d53L, "jetbrains.mps.lang.smodel.structure.Property_SetOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL, "jetbrains.mps.lang.smodel.structure.SNodeOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10975850da7L, "jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression"));
}
