package jetbrains.mps.lang.smodel.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.openapi.editor.descriptor.NamedMenuId;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = ((SAbstractConcept) concept);
      Integer preIndex = indices_xbvbvu_a0a.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          return Collections.<ConceptEditor>singletonList(new AbstractOperationParameter_Editor());
        case 1:
          return Collections.<ConceptEditor>singletonList(new AllAttributeQualifier_Editor());
        case 2:
          return Collections.<ConceptEditor>singletonList(new AttributeAccess_Editor());
        case 3:
          return Collections.<ConceptEditor>singletonList(new CheckedModuleQualifiedName_Editor());
        case 4:
          return Collections.<ConceptEditor>singletonList(new CheckedModuleReference_Editor());
        case 5:
          return Collections.<ConceptEditor>singletonList(new ChildAttributeQualifier_Editor());
        case 6:
          return Collections.<ConceptEditor>singletonList(new ChildNodeRefExpression_Editor());
        case 7:
          return Collections.<ConceptEditor>singletonList(new ConceptFqNameRefExpression_Editor());
        case 8:
          return Collections.<ConceptEditor>singletonList(new ConceptId_Editor());
        case 9:
          return Collections.<ConceptEditor>singletonList(new ConceptIdRefExpression_Editor());
        case 10:
          return Collections.<ConceptEditor>singletonList(new ConceptNodeType_Editor());
        case 11:
          return Collections.<ConceptEditor>singletonList(new ConceptRefExpression_Editor());
        case 12:
          return Collections.<ConceptEditor>singletonList(new ConceptReference_Editor());
        case 13:
          return Collections.<ConceptEditor>singletonList(new ConceptSwitchStatement_Editor());
        case 14:
          return Collections.<ConceptEditor>singletonList(new Concept_GetAllSubConcepts_Editor());
        case 15:
          return Collections.<ConceptEditor>singletonList(new Concept_GetAllSuperConcepts_Editor());
        case 16:
          return Collections.<ConceptEditor>singletonList(new Concept_GetDirectSuperConcepts_Editor());
        case 17:
          return Collections.<ConceptEditor>singletonList(new Concept_GetHierarchy_Editor());
        case 18:
          return Collections.<ConceptEditor>singletonList(new Concept_IsExactlyOperation_Editor());
        case 19:
          return Collections.<ConceptEditor>singletonList(new Concept_IsSubConceptOfOperation_Editor());
        case 20:
          return Collections.<ConceptEditor>singletonList(new Concept_IsSuperConceptOfOperation_Editor());
        case 21:
          return Collections.<ConceptEditor>singletonList(new Concept_NewInstance_Editor());
        case 22:
          return Collections.<ConceptEditor>singletonList(new ContainmentLinkId_Editor());
        case 23:
          return Collections.<ConceptEditor>singletonList(new EnumMemberReference_Editor());
        case 24:
          return Collections.<ConceptEditor>singletonList(new EnumMemberValueRefExpression_Editor());
        case 25:
          return Collections.<ConceptEditor>singletonList(new EnumMember_NameOperation_Editor());
        case 26:
          return Collections.<ConceptEditor>singletonList(new EnumMember_ValueOperation_Editor());
        case 27:
          return Collections.<ConceptEditor>singletonList(new EqualsStructurallyExpression_Editor());
        case 28:
          return Collections.<ConceptEditor>singletonList(new ExactConceptCase_Editor());
        case 29:
          return Collections.<ConceptEditor>singletonList(new GeneratorModulePointer_Editor());
        case 30:
          return Collections.<ConceptEditor>singletonList(new IfInstanceOfStatement_Editor());
        case 31:
          return Collections.<ConceptEditor>singletonList(new IfInstanceOfVariable_Editor());
        case 32:
          return Collections.<ConceptEditor>singletonList(new LanguageId_Editor());
        case 33:
          return Collections.<ConceptEditor>singletonList(new LanguageRefExpression_Editor());
        case 34:
          return Collections.<ConceptEditor>singletonList(new LinkAttributeQualifier_Editor());
        case 35:
          return Collections.<ConceptEditor>singletonList(new LinkIdRefExpression_Editor());
        case 36:
          return Collections.<ConceptEditor>singletonList(new LinkList_AddNewChildOperation_Editor());
        case 37:
          return Collections.<ConceptEditor>singletonList(new LinkNameRefExpression_Editor());
        case 38:
          return Collections.<ConceptEditor>singletonList(new LinkQualifier_Editor());
        case 39:
          return Collections.<ConceptEditor>singletonList(new LinkRefExpression_Editor());
        case 40:
          return Collections.<ConceptEditor>singletonList(new LinkRefQualifier_Editor());
        case 41:
          return Collections.<ConceptEditor>singletonList(new Link_SetNewChildOperation_Editor());
        case 42:
          return Collections.<ConceptEditor>singletonList(new Link_SetTargetOperation_Editor());
        case 43:
          return Collections.<ConceptEditor>singletonList(new ModelReferenceExpression_Editor());
        case 44:
          return Collections.<ConceptEditor>singletonList(new Model_AddRootOperation_Editor());
        case 45:
          return Collections.<ConceptEditor>singletonList(new Model_CreateNewNodeOperation_Editor());
        case 46:
          return Collections.<ConceptEditor>singletonList(new Model_CreateNewRootNodeOperation_Editor());
        case 47:
          return Collections.<ConceptEditor>singletonList(new Model_GetModule_Editor());
        case 48:
          return Collections.<ConceptEditor>singletonList(new Model_NodesIncludingImportedOperation_Editor());
        case 49:
          return Collections.<ConceptEditor>singletonList(new Model_NodesOperation_Editor());
        case 50:
          return Collections.<ConceptEditor>singletonList(new Model_RootsIncludingImportedOperation_Editor());
        case 51:
          return Collections.<ConceptEditor>singletonList(new Model_RootsOperation_Editor());
        case 52:
          return Collections.<ConceptEditor>singletonList(new ModulePointer_Editor());
        case 53:
          return Collections.<ConceptEditor>singletonList(new ModuleRefExpression_Editor());
        case 54:
          return Collections.<ConceptEditor>singletonList(new ModuleReferenceExpression_Editor());
        case 55:
          return Collections.<ConceptEditor>singletonList(new NodeAttributeQualifier_Editor());
        case 56:
          return Collections.<ConceptEditor>singletonList(new NodePointerExpression_Editor());
        case 57:
          return Collections.<ConceptEditor>singletonList(new NodeRefExpression_Editor());
        case 58:
          return Collections.<ConceptEditor>singletonList(new Node_ConceptMethodCall_Editor());
        case 59:
          return Collections.<ConceptEditor>singletonList(new Node_CopyOperation_Editor());
        case 60:
          return Collections.<ConceptEditor>singletonList(new Node_DeleteOperation_Editor());
        case 61:
          return Collections.<ConceptEditor>singletonList(new Node_DetachOperation_Editor());
        case 62:
          return Collections.<ConceptEditor>singletonList(new Node_GetAllSiblingsOperation_Editor());
        case 63:
          return Collections.<ConceptEditor>singletonList(new Node_GetAncestorOperation_Editor());
        case 64:
          return Collections.<ConceptEditor>singletonList(new Node_GetAncestorsOperation_Editor());
        case 65:
          return Collections.<ConceptEditor>singletonList(new Node_GetChildrenAndChildAttributesOperation_Editor());
        case 66:
          return Collections.<ConceptEditor>singletonList(new Node_GetChildrenOperation_Editor());
        case 67:
          return Collections.<ConceptEditor>singletonList(new Node_GetConceptOperation_Editor());
        case 68:
          return Collections.<ConceptEditor>singletonList(new Node_GetContainingLinkOperation_Editor());
        case 69:
          return Collections.<ConceptEditor>singletonList(new Node_GetContainingRoleOperation_Editor());
        case 70:
          return Collections.<ConceptEditor>singletonList(new Node_GetContainingRootOperation_Editor());
        case 71:
          return Collections.<ConceptEditor>singletonList(new Node_GetDescendantsOperation_Editor());
        case 72:
          return Collections.<ConceptEditor>singletonList(new Node_GetIndexInParentOperation_Editor());
        case 73:
          return Collections.<ConceptEditor>singletonList(new Node_GetModelOperation_Editor());
        case 74:
          return Collections.<ConceptEditor>singletonList(new Node_GetNextSiblingOperation_Editor());
        case 75:
          return Collections.<ConceptEditor>singletonList(new Node_GetNextSiblingsOperation_Editor());
        case 76:
          return Collections.<ConceptEditor>singletonList(new Node_GetParentOperation_Editor());
        case 77:
          return Collections.<ConceptEditor>singletonList(new Node_GetPrevSiblingOperation_Editor());
        case 78:
          return Collections.<ConceptEditor>singletonList(new Node_GetPrevSiblingsOperation_Editor());
        case 79:
          return Collections.<ConceptEditor>singletonList(new Node_GetReferenceOperation_Editor());
        case 80:
          return Collections.<ConceptEditor>singletonList(new Node_GetReferencesOperation_Editor());
        case 81:
          return Collections.<ConceptEditor>singletonList(new Node_GetReferentSearchScopeOperation_Editor());
        case 82:
          return Collections.<ConceptEditor>singletonList(new Node_GetSConceptOperation_Editor());
        case 83:
          return Collections.<ConceptEditor>singletonList(new Node_InsertNewNextSiblingOperation_Editor());
        case 84:
          return Collections.<ConceptEditor>singletonList(new Node_InsertNewPrevSiblingOperation_Editor());
        case 85:
          return Collections.<ConceptEditor>singletonList(new Node_InsertNextSiblingOperation_Editor());
        case 86:
          return Collections.<ConceptEditor>singletonList(new Node_InsertPrevSiblingOperation_Editor());
        case 87:
          return Collections.<ConceptEditor>singletonList(new Node_IsAttributeOperation_Editor());
        case 88:
          return Collections.<ConceptEditor>singletonList(new Node_IsInstanceOfOperation_Editor());
        case 89:
          return Collections.<ConceptEditor>singletonList(new Node_IsNotNullOperation_Editor());
        case 90:
          return Collections.<ConceptEditor>singletonList(new Node_IsNullOperation_Editor());
        case 91:
          return Collections.<ConceptEditor>singletonList(new Node_IsRoleOperation_Editor());
        case 92:
          return Collections.<ConceptEditor>singletonList(new Node_PointerOperation_Editor());
        case 93:
          return Collections.<ConceptEditor>singletonList(new Node_ReplaceWithAnotherOperation_Editor());
        case 94:
          return Collections.<ConceptEditor>singletonList(new Node_ReplaceWithNewOperation_Editor());
        case 95:
          return Collections.<ConceptEditor>singletonList(new OfConceptOperation_Editor());
        case 96:
          return Collections.<ConceptEditor>singletonList(new OperationParm_Concept_Editor());
        case 97:
          return Collections.<ConceptEditor>singletonList(new OperationParm_ConceptList_Editor());
        case 98:
          return Collections.<ConceptEditor>singletonList(new OperationParm_LinkQualifier_Editor());
        case 99:
          return Collections.<ConceptEditor>singletonList(new OperationParm_StopConceptList_Editor());
        case 100:
          return Collections.<ConceptEditor>singletonList(new PoundExpression_Editor());
        case 101:
          return Collections.<ConceptEditor>singletonList(new PropertyAttributeQualifier_Editor());
        case 102:
          return Collections.<ConceptEditor>singletonList(new PropertyId_Editor());
        case 103:
          return Collections.<ConceptEditor>singletonList(new PropertyIdRefExpression_Editor());
        case 104:
          return Collections.<ConceptEditor>singletonList(new PropertyNameRefExpression_Editor());
        case 105:
          return Collections.<ConceptEditor>singletonList(new PropertyQualifier_Editor());
        case 106:
          return Collections.<ConceptEditor>singletonList(new Property_HasValue_Enum_Editor());
        case 107:
          return Collections.<ConceptEditor>singletonList(new Property_HasValue_Simple_Editor());
        case 108:
          return Collections.<ConceptEditor>singletonList(new Property_SetOperation_Editor());
        case 109:
          return Collections.<ConceptEditor>singletonList(new RefConcept_Reference_Editor());
        case 110:
          return Collections.<ConceptEditor>singletonList(new ReferenceLinkId_Editor());
        case 111:
          return Collections.<ConceptEditor>singletonList(new Reference_GetLinkDeclarationOperation_Editor());
        case 112:
          return Collections.<ConceptEditor>singletonList(new Reference_GetResolveInfo_Editor());
        case 113:
          return Collections.<ConceptEditor>singletonList(new Reference_GetRoleOperation_Editor());
        case 114:
          return Collections.<ConceptEditor>singletonList(new Reference_GetTargetOperation_Editor());
        case 115:
          return Collections.<ConceptEditor>singletonList(new SConceptOperation_Editor());
        case 116:
          return Collections.<ConceptEditor>singletonList(new SConceptType_Editor());
        case 117:
          return Collections.<ConceptEditor>singletonList(new SConceptTypeCastExpression_Editor());
        case 118:
          return Collections.<ConceptEditor>singletonList(new SEnumMemberType_Editor());
        case 119:
          return Collections.<ConceptEditor>singletonList(new SEnumOperationInvocation_Editor());
        case 120:
          return Collections.<ConceptEditor>singletonList(new SEnum_MemberForNameOperation_Editor());
        case 121:
          return Collections.<ConceptEditor>singletonList(new SEnum_MemberForValueOperation_Editor());
        case 122:
          return Collections.<ConceptEditor>singletonList(new SEnum_MemberOperation_Editor());
        case 123:
          return Collections.<ConceptEditor>singletonList(new SEnum_MembersOperation_Editor());
        case 124:
          return Collections.<ConceptEditor>singletonList(new SLinkAccess_Editor());
        case 125:
          return Collections.<ConceptEditor>singletonList(new SLinkImplicitSelect_Editor());
        case 126:
          return Collections.<ConceptEditor>singletonList(new SLinkListAccess_Editor());
        case 127:
          return Collections.<ConceptEditor>singletonList(new SModelType_Editor());
        case 128:
          return Collections.<ConceptEditor>singletonList(new SNodeCreator_Editor());
        case 129:
          return Collections.<ConceptEditor>singletonList(new SNodeListCreator_Editor());
        case 130:
          return Collections.<ConceptEditor>singletonList(new SNodeListType_Editor());
        case 131:
          return Collections.<ConceptEditor>singletonList(new SNodeOperation_Editor());
        case 132:
          return Collections.<ConceptEditor>singletonList(new SNodeType_Editor());
        case 133:
          return Collections.<ConceptEditor>singletonList(new SNodeTypeCastExpression_Editor());
        case 134:
          return Collections.<ConceptEditor>singletonList(new SPropertyAccess_Editor());
        case 135:
          return Collections.<ConceptEditor>singletonList(new SReferenceType_Editor());
        case 136:
          return Collections.<ConceptEditor>singletonList(new SearchScopeType_Editor());
        case 137:
          return Collections.<ConceptEditor>singletonList(new SearchScope_ContainsOperation_Editor());
        case 138:
          return Collections.<ConceptEditor>singletonList(new SemanticDowncastExpression_Editor());
        case 139:
          return Collections.<ConceptEditor>singletonList(new SubconceptCase_Editor());
        default:
      }
    }
    return Collections.<ConceptEditor>emptyList();
  }

  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    {
      SAbstractConcept cncpt = ((SAbstractConcept) concept);
      Integer preIndex = indices_xbvbvu_a0c.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            if ("jetbrains.mps.lang.smodel.editor.AliasComponent".equals(editorComponentId)) {
              return Collections.<ConceptEditorComponent>singletonList(new AliasComponent());
            }
          }
          break;
        case 1:
          if (true) {
            if ("jetbrains.mps.lang.smodel.editor.LanguageIdInspector".equals(editorComponentId)) {
              return Collections.<ConceptEditorComponent>singletonList(new LanguageIdInspector());
            }
          }
          break;
        case 2:
          if (true) {
            if ("jetbrains.mps.lang.smodel.editor.ModelReferenceFQName".equals(editorComponentId)) {
              return Collections.<ConceptEditorComponent>singletonList(new ModelReferenceFQName());
            }
          }
          break;
        case 3:
          if (true) {
            switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0d3a0a2, editorComponentId)) {
              case 0:
                return Collections.<ConceptEditorComponent>singletonList(new ReplaceableAliasAndParms_Comp());
              case 1:
                return Collections.<ConceptEditorComponent>singletonList(new ReplaceableAlias_Comp());
              default:
                return Collections.<ConceptEditorComponent>emptyList();
            }
          }
          break;
        default:
      }
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }

  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_xbvbvu_a0e.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          return Collections.<TransformationMenu>singletonList(new AbstractNodeRefExpression_TransformationMenu());
        case 1:
          return Collections.<TransformationMenu>singletonList(new AttributeQualifier_TransformationMenu());
        case 2:
          return Collections.<TransformationMenu>singletonList(new BootstrapAwareMetaObject_TransformationMenu());
        case 3:
          return Collections.<TransformationMenu>singletonList(new expression_Contribution());
        case 4:
          return Collections.<TransformationMenu>singletonList(new SEnumOperation_TransformationMenu());
        case 5:
          return Collections.<TransformationMenu>singletonList(new SNodeOperation_TransformationMenu());
        default:
      }
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_xbvbvu_a0f.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          return Collections.<SubstituteMenu>singletonList(new AbstractOperationParameter_SubstituteMenu());
        case 1:
          return Collections.<SubstituteMenu>singletonList(new ChildNodeRefExpression_SubstituteMenu());
        case 2:
          return Collections.<SubstituteMenu>singletonList(new Concept_GetHierarchy_SubstituteMenu());
        case 3:
          return Collections.<SubstituteMenu>singletonList(new OfConceptOperation_SubstituteMenu());
        case 4:
          return Collections.<SubstituteMenu>singletonList(new OperationParm_Concept_SubstituteMenu());
        case 5:
          return Collections.<SubstituteMenu>singletonList(new OperationParm_ConceptList_SubstituteMenu());
        case 6:
          return Collections.<SubstituteMenu>singletonList(new OperationParm_Inclusion_SubstituteMenu());
        case 7:
          return Collections.<SubstituteMenu>singletonList(new OperationParm_LinkQualifier_SubstituteMenu());
        case 8:
          return Collections.<SubstituteMenu>singletonList(new OperationParm_Root_SubstituteMenu());
        case 9:
          return Collections.<SubstituteMenu>singletonList(new OperationParm_SameMetaLevel_SubstituteMenu());
        case 10:
          return Collections.<SubstituteMenu>singletonList(new OperationParm_StopConceptList_SubstituteMenu());
        case 11:
          return Collections.<SubstituteMenu>singletonList(new SConceptOperation_SubstituteMenu());
        case 12:
          return Collections.<SubstituteMenu>singletonList(new SConceptTypeCastExpression_SubstituteMenu());
        case 13:
          return Collections.<SubstituteMenu>singletonList(new SNodeOperation_SubstituteMenu());
        case 14:
          return Collections.<SubstituteMenu>singletonList(new SNodeTypeCastExpression_SubstituteMenu());
        case 15:
          return Collections.<SubstituteMenu>singletonList(new SemanticDowncastExpression_SubstituteMenu());
        default:
      }
    }
    return Collections.<SubstituteMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredNamedSubstituteMenus(NamedMenuId menuId) {
    {
      SAbstractConcept cncpt = (SAbstractConcept) menuId.getConcept();
      Integer preIndex = indices_xbvbvu_a0g.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0a3a0a6, menuId.getFqName())) {
              case 0:
                return Arrays.asList(new SubstituteMenu[]{new SNodeOperation_SubstituteMenu_Additional()});
              case 1:
                return Arrays.asList(new SubstituteMenu[]{new snodeOperation()});
              default:
            }
          }
          break;
        default:
      }
    }

    return Collections.<SubstituteMenu>emptyList();
  }

  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0a = buildConceptIndices(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a61b7ea2aL, "jetbrains.mps.lang.smodel.structure.AbstractOperationParameter"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x58ea5217b045c8b0L, "jetbrains.mps.lang.smodel.structure.AllAttributeQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x58ea5217b045a3b2L, "jetbrains.mps.lang.smodel.structure.AttributeAccess"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x6085898237feae86L, "jetbrains.mps.lang.smodel.structure.CheckedModuleQualifiedName"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x3c7a9d8c8d63d4f3L, "jetbrains.mps.lang.smodel.structure.CheckedModuleReference"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x9d98713f24a0e5bL, "jetbrains.mps.lang.smodel.structure.ChildAttributeQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x84baf20c71f8a79L, "jetbrains.mps.lang.smodel.structure.ChildNodeRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x73bd24cca4f91254L, "jetbrains.mps.lang.smodel.structure.ConceptFqNameRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5fea1eb9fefb6fe7L, "jetbrains.mps.lang.smodel.structure.ConceptId"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x24b2bf7ce180eb54L, "jetbrains.mps.lang.smodel.structure.ConceptIdRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110f9b63680L, "jetbrains.mps.lang.smodel.structure.ConceptNodeType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110f9eb64c6L, "jetbrains.mps.lang.smodel.structure.ConceptRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10cd05c601dL, "jetbrains.mps.lang.smodel.structure.ConceptReference"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x527e98a73771f42dL, "jetbrains.mps.lang.smodel.structure.ConceptSwitchStatement"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11331e18cdcL, "jetbrains.mps.lang.smodel.structure.Concept_GetAllSubConcepts"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x112d8bf5d03L, "jetbrains.mps.lang.smodel.structure.Concept_GetAllSuperConcepts"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11296bd8374L, "jetbrains.mps.lang.smodel.structure.Concept_GetDirectSuperConcepts"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x112d8ce685dL, "jetbrains.mps.lang.smodel.structure.Concept_GetHierarchy"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110f41acfb7L, "jetbrains.mps.lang.smodel.structure.Concept_IsExactlyOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x112bf601180L, "jetbrains.mps.lang.smodel.structure.Concept_IsSubConceptOfOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x112bf289d94L, "jetbrains.mps.lang.smodel.structure.Concept_IsSuperConceptOfOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11331ad1f2aL, "jetbrains.mps.lang.smodel.structure.Concept_NewInstance"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x74cb131f5923b6e7L, "jetbrains.mps.lang.smodel.structure.ContainmentLinkId"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1091e6212fdL, "jetbrains.mps.lang.smodel.structure.EnumMemberReference"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x60c7f83bafd83b5bL, "jetbrains.mps.lang.smodel.structure.EnumMemberValueRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120c01735d3L, "jetbrains.mps.lang.smodel.structure.EnumMember_NameOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120bff92dbeL, "jetbrains.mps.lang.smodel.structure.EnumMember_ValueOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11dbead8683L, "jetbrains.mps.lang.smodel.structure.EqualsStructurallyExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x53cfca750a909c64L, "jetbrains.mps.lang.smodel.structure.ExactConceptCase"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x73246de9adecb80dL, "jetbrains.mps.lang.smodel.structure.GeneratorModulePointer"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1a228da1357e4a44L, "jetbrains.mps.lang.smodel.structure.IfInstanceOfStatement"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1a228da1357e4a49L, "jetbrains.mps.lang.smodel.structure.IfInstanceOfVariable"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c8c0L, "jetbrains.mps.lang.smodel.structure.LanguageId"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x3e6a40ba27dd70f3L, "jetbrains.mps.lang.smodel.structure.LanguageRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x58ea5217b045b9b7L, "jetbrains.mps.lang.smodel.structure.LinkAttributeQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x24b2bf7ce1957615L, "jetbrains.mps.lang.smodel.structure.LinkIdRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1093caead54L, "jetbrains.mps.lang.smodel.structure.LinkList_AddNewChildOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x48e6e2695189e59aL, "jetbrains.mps.lang.smodel.structure.LinkNameRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x26b292a5afc7ccacL, "jetbrains.mps.lang.smodel.structure.LinkQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11d88b27d15L, "jetbrains.mps.lang.smodel.structure.LinkRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11886c4bac0L, "jetbrains.mps.lang.smodel.structure.LinkRefQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x109233dbca1L, "jetbrains.mps.lang.smodel.structure.Link_SetNewChildOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1099887af60L, "jetbrains.mps.lang.smodel.structure.Link_SetTargetOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x7c3f2da20e92b62L, "jetbrains.mps.lang.smodel.structure.ModelReferenceExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x118e7faea40L, "jetbrains.mps.lang.smodel.structure.Model_AddRootOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2e210544L, "jetbrains.mps.lang.smodel.structure.Model_CreateNewNodeOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10fa1ac23f2L, "jetbrains.mps.lang.smodel.structure.Model_CreateNewRootNodeOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x61168e34226eec71L, "jetbrains.mps.lang.smodel.structure.Model_GetModule"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1135326811cL, "jetbrains.mps.lang.smodel.structure.Model_NodesIncludingImportedOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110b8590897L, "jetbrains.mps.lang.smodel.structure.Model_NodesOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x111d5999a91L, "jetbrains.mps.lang.smodel.structure.Model_RootsIncludingImportedOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110b7dcc9bcL, "jetbrains.mps.lang.smodel.structure.Model_RootsOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5ef5a1e853388b3L, "jetbrains.mps.lang.smodel.structure.ModulePointer"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1749acf3d038bbe2L, "jetbrains.mps.lang.smodel.structure.ModuleRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x38130dc4e3db5af1L, "jetbrains.mps.lang.smodel.structure.ModuleReferenceExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x58ea5217b045b9b5L, "jetbrains.mps.lang.smodel.structure.NodeAttributeQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x195fd0576ac9bb49L, "jetbrains.mps.lang.smodel.structure.NodePointerExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11be716563cL, "jetbrains.mps.lang.smodel.structure.NodeRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1129a43046bL, "jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a646d8514L, "jetbrains.mps.lang.smodel.structure.Node_CopyOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1097542784fL, "jetbrains.mps.lang.smodel.structure.Node_DeleteOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11dfede6ec0L, "jetbrains.mps.lang.smodel.structure.Node_DetachOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10ab97e0a94L, "jetbrains.mps.lang.smodel.structure.Node_GetAllSiblingsOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110bd4e0067L, "jetbrains.mps.lang.smodel.structure.Node_GetAncestorOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1112390be59L, "jetbrains.mps.lang.smodel.structure.Node_GetAncestorsOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x6cbc725f4b35314cL, "jetbrains.mps.lang.smodel.structure.Node_GetChildrenAndChildAttributesOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110c2e679e7L, "jetbrains.mps.lang.smodel.structure.Node_GetChildrenOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110f3e65fdcL, "jetbrains.mps.lang.smodel.structure.Node_GetConceptOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x50c63f2cd5142697L, "jetbrains.mps.lang.smodel.structure.Node_GetContainingLinkOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1b35e18a1a3b2c9aL, "jetbrains.mps.lang.smodel.structure.Node_GetContainingRoleOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110b78550e8L, "jetbrains.mps.lang.smodel.structure.Node_GetContainingRootOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110b73c3484L, "jetbrains.mps.lang.smodel.structure.Node_GetDescendantsOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1128be3ca6aL, "jetbrains.mps.lang.smodel.structure.Node_GetIndexInParentOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2e126334L, "jetbrains.mps.lang.smodel.structure.Node_GetModelOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a3ea0a40dL, "jetbrains.mps.lang.smodel.structure.Node_GetNextSiblingOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10ab957e8bbL, "jetbrains.mps.lang.smodel.structure.Node_GetNextSiblingsOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x109563e6169L, "jetbrains.mps.lang.smodel.structure.Node_GetParentOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a3e9fedc7L, "jetbrains.mps.lang.smodel.structure.Node_GetPrevSiblingOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10ab975b657L, "jetbrains.mps.lang.smodel.structure.Node_GetPrevSiblingsOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x32187d80f5b88800L, "jetbrains.mps.lang.smodel.structure.Node_GetReferenceOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x798c0d67da9045abL, "jetbrains.mps.lang.smodel.structure.Node_GetReferencesOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11c530706b2L, "jetbrains.mps.lang.smodel.structure.Node_GetReferentSearchScopeOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x6771eac6c5cbe7d2L, "jetbrains.mps.lang.smodel.structure.Node_GetSConceptOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10964e26717L, "jetbrains.mps.lang.smodel.structure.Node_InsertNewNextSiblingOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2d494062L, "jetbrains.mps.lang.smodel.structure.Node_InsertNewPrevSiblingOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2d76e31eL, "jetbrains.mps.lang.smodel.structure.Node_InsertNextSiblingOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2d77d0e1L, "jetbrains.mps.lang.smodel.structure.Node_InsertPrevSiblingOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x118c2f5b5f6L, "jetbrains.mps.lang.smodel.structure.Node_IsAttributeOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10956bb6029L, "jetbrains.mps.lang.smodel.structure.Node_IsInstanceOfOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110e123bce7L, "jetbrains.mps.lang.smodel.structure.Node_IsNotNullOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110e0974e46L, "jetbrains.mps.lang.smodel.structure.Node_IsNullOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a67578ddeL, "jetbrains.mps.lang.smodel.structure.Node_IsRoleOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x4604033d54faa023L, "jetbrains.mps.lang.smodel.structure.Node_PointerOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10975273750L, "jetbrains.mps.lang.smodel.structure.Node_ReplaceWithAnotherOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10965697d7aL, "jetbrains.mps.lang.smodel.structure.Node_ReplaceWithNewOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x412437525e297780L, "jetbrains.mps.lang.smodel.structure.OfConceptOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a61caab68L, "jetbrains.mps.lang.smodel.structure.OperationParm_Concept"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10cd05bec71L, "jetbrains.mps.lang.smodel.structure.OperationParm_ConceptList"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x47bb2de70d00ff8cL, "jetbrains.mps.lang.smodel.structure.OperationParm_LinkQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x190735f308e2250bL, "jetbrains.mps.lang.smodel.structure.OperationParm_StopConceptList"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11885c0d945L, "jetbrains.mps.lang.smodel.structure.PoundExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x58ea5217b045c9b9L, "jetbrains.mps.lang.smodel.structure.PropertyAttributeQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5fea1eb9fefc235cL, "jetbrains.mps.lang.smodel.structure.PropertyId"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x24b2bf7ce1a42fa0L, "jetbrains.mps.lang.smodel.structure.PropertyIdRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x48e6e269518c89f7L, "jetbrains.mps.lang.smodel.structure.PropertyNameRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x26b292a5afc7ccadL, "jetbrains.mps.lang.smodel.structure.PropertyQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10add1ded2bL, "jetbrains.mps.lang.smodel.structure.Property_HasValue_Enum"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10ae2053294L, "jetbrains.mps.lang.smodel.structure.Property_HasValue_Simple"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1091d8a1d53L, "jetbrains.mps.lang.smodel.structure.Property_SetOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1120c45902cL, "jetbrains.mps.lang.smodel.structure.RefConcept_Reference"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x74cb131f5923b6ecL, "jetbrains.mps.lang.smodel.structure.ReferenceLinkId"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x157abf675bd53debL, "jetbrains.mps.lang.smodel.structure.Reference_GetLinkDeclarationOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x4f37053c240837e1L, "jetbrains.mps.lang.smodel.structure.Reference_GetResolveInfo"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x4efeb22247ff02a7L, "jetbrains.mps.lang.smodel.structure.Reference_GetRoleOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x393cc52c868a600aL, "jetbrains.mps.lang.smodel.structure.Reference_GetTargetOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5f5952af8843faf9L, "jetbrains.mps.lang.smodel.structure.SConceptOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5cab42cd97571ceeL, "jetbrains.mps.lang.smodel.structure.SConceptType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1871b2e3b0ef0078L, "jetbrains.mps.lang.smodel.structure.SConceptTypeCastExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120bfe51421L, "jetbrains.mps.lang.smodel.structure.SEnumMemberType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120ed32e98bL, "jetbrains.mps.lang.smodel.structure.SEnumOperationInvocation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120ed37e60cL, "jetbrains.mps.lang.smodel.structure.SEnum_MemberForNameOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120ed37e64eL, "jetbrains.mps.lang.smodel.structure.SEnum_MemberForValueOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120ed37e691L, "jetbrains.mps.lang.smodel.structure.SEnum_MemberOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120ed37e6b4L, "jetbrains.mps.lang.smodel.structure.SEnum_MembersOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96ea2caL, "jetbrains.mps.lang.smodel.structure.SLinkAccess"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x316f884c72a4157dL, "jetbrains.mps.lang.smodel.structure.SLinkImplicitSelect"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f970c119L, "jetbrains.mps.lang.smodel.structure.SLinkListAccess"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2d94c0cdL, "jetbrains.mps.lang.smodel.structure.SModelType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x112e36f7135L, "jetbrains.mps.lang.smodel.structure.SNodeCreator"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10ab923b94aL, "jetbrains.mps.lang.smodel.structure.SNodeListCreator"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10aae26be32L, "jetbrains.mps.lang.smodel.structure.SNodeListType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL, "jetbrains.mps.lang.smodel.structure.SNodeOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f968b3caL, "jetbrains.mps.lang.smodel.structure.SNodeType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10975850da7L, "jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96cca6fL, "jetbrains.mps.lang.smodel.structure.SPropertyAccess"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x798c0d67da9d2175L, "jetbrains.mps.lang.smodel.structure.SReferenceType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11c52ebfbe2L, "jetbrains.mps.lang.smodel.structure.SearchScopeType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11c536d2503L, "jetbrains.mps.lang.smodel.structure.SearchScope_ContainsOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10aaf6d7435L, "jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x527e98a73771f432L, "jetbrains.mps.lang.smodel.structure.SubconceptCase"));
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0c = buildConceptIndices(MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x157abf675bd53df2L, "jetbrains.mps.lang.smodel.structure.IReferenceOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c8c0L, "jetbrains.mps.lang.smodel.structure.LanguageId"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x7c3f2da20e92b62L, "jetbrains.mps.lang.smodel.structure.ModelReferenceExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL, "jetbrains.mps.lang.smodel.structure.SNodeOperation"));
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0e = buildConceptIndices(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x319fd776da5d8e3cL, "jetbrains.mps.lang.smodel.structure.AbstractNodeRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x58ea5217b045b9abL, "jetbrains.mps.lang.smodel.structure.AttributeQualifier"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x2399a155048244c5L, "jetbrains.mps.lang.smodel.structure.BootstrapAwareMetaObject"), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL, "jetbrains.mps.baseLanguage.structure.Expression"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120ed37273dL, "jetbrains.mps.lang.smodel.structure.SEnumOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL, "jetbrains.mps.lang.smodel.structure.SNodeOperation"));
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0f = buildConceptIndices(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a61b7ea2aL, "jetbrains.mps.lang.smodel.structure.AbstractOperationParameter"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x84baf20c71f8a79L, "jetbrains.mps.lang.smodel.structure.ChildNodeRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x112d8ce685dL, "jetbrains.mps.lang.smodel.structure.Concept_GetHierarchy"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x412437525e297780L, "jetbrains.mps.lang.smodel.structure.OfConceptOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a61caab68L, "jetbrains.mps.lang.smodel.structure.OperationParm_Concept"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10cd05bec71L, "jetbrains.mps.lang.smodel.structure.OperationParm_ConceptList"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a61bacc13L, "jetbrains.mps.lang.smodel.structure.OperationParm_Inclusion"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x47bb2de70d00ff8cL, "jetbrains.mps.lang.smodel.structure.OperationParm_LinkQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a61c4f312L, "jetbrains.mps.lang.smodel.structure.OperationParm_Root"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x155fb7143719d578L, "jetbrains.mps.lang.smodel.structure.OperationParm_SameMetaLevel"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x190735f308e2250bL, "jetbrains.mps.lang.smodel.structure.OperationParm_StopConceptList"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5f5952af8843faf9L, "jetbrains.mps.lang.smodel.structure.SConceptOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1871b2e3b0ef0078L, "jetbrains.mps.lang.smodel.structure.SConceptTypeCastExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL, "jetbrains.mps.lang.smodel.structure.SNodeOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10975850da7L, "jetbrains.mps.lang.smodel.structure.SNodeTypeCastExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10aaf6d7435L, "jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression"));
  private static final Map<SAbstractConcept, Integer> indices_xbvbvu_a0g = buildConceptIndices(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL, "jetbrains.mps.lang.smodel.structure.SNodeOperation"));
  private static String[] stringSwitchCases_xbvbvu_a0a0a0d3a0a2 = new String[]{"jetbrains.mps.lang.smodel.editor.ReplaceableAliasAndParms_Comp", "jetbrains.mps.lang.smodel.editor.ReplaceableAlias_Comp"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0a3a0a6 = new String[]{"jetbrains.mps.lang.smodel.editor.SNodeOperation_SubstituteMenu_Additional", "jetbrains.mps.lang.smodel.editor.snodeOperation"};
}
