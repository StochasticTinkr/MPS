package jetbrains.mps.lang.smodel.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.substitute.SubstituteMenuBase;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.menus.substitute.ConstraintsFilteringSubstituteMenuPartDecorator;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.editor.menus.ParameterizedMenuPart;
import org.jetbrains.mps.openapi.module.SModuleReference;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.editor.menus.substitute.SingleItemSubstituteMenuPart;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.EditorMenuTraceInfo;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.behavior.ModuleIdentity__BehaviorDescriptor;
import jetbrains.mps.util.PatternUtil;
import jetbrains.mps.smodel.runtime.IconResource;
import jetbrains.mps.project.Solution;
import jetbrains.mps.project.structure.ProjectStructureModule;
import jetbrains.mps.smodel.Language;
import jetbrains.mps.smodel.Generator;
import jetbrains.mps.project.DevKit;

public class RepositoryModules_Substitute extends SubstituteMenuBase {
  @NotNull
  @Override
  protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts(final SubstituteMenuContext _context) {
    List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> result = new ArrayList<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>();
    result.add(new ConstraintsFilteringSubstituteMenuPartDecorator(new RepositoryModules_Substitute.SMP_Param_xz32ym_a(), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5ef5a1e853388b3L, "jetbrains.mps.lang.smodel.structure.ModulePointer")));
    return result;
  }

  @NotNull
  @Override
  public List<SubstituteMenuItem> createMenuItems(@NotNull SubstituteMenuContext context) {
    context.getEditorMenuTrace().pushTraceInfo();
    context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("named substitute menu " + "RepositoryModules_Substitute", new SNodePointer("r:00000000-0000-4000-0000-011c895902fd(jetbrains.mps.lang.smodel.editor)", "8228083397230375749")));
    try {
      return super.createMenuItems(context);
    } finally {
      context.getEditorMenuTrace().popTraceInfo();
    }
  }


  private class SMP_Param_xz32ym_a extends ParameterizedMenuPart<SModuleReference, SubstituteMenuItem, SubstituteMenuContext> {
    @NotNull
    @Override
    protected List<SubstituteMenuItem> createItems(SModuleReference parameter, SubstituteMenuContext context) {
      return new RepositoryModules_Substitute.SMP_Param_xz32ym_a.SMP_Action_xz32ym_a0(parameter).createItems(context);
    }
    @NotNull
    @Override
    public List<SubstituteMenuItem> createItems(@NotNull SubstituteMenuContext context) {
      context.getEditorMenuTrace().pushTraceInfo();
      context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("parameterized substitute menu part", new SNodePointer("r:00000000-0000-4000-0000-011c895902fd(jetbrains.mps.lang.smodel.editor)", "8228083397230375750")));
      try {
        return super.createItems(context);
      } finally {
        context.getEditorMenuTrace().popTraceInfo();
      }
    }
    @Nullable
    @Override
    protected Iterable<? extends SModuleReference> getParameters(SubstituteMenuContext _context) {
      ArrayList<SModuleReference> rv = new ArrayList<SModuleReference>();
      for (SModule m : _context.getEditorContext().getRepository().getModules()) {
        rv.add(m.getModuleReference());
      }
      return rv;
    }
    private class SMP_Action_xz32ym_a0 extends SingleItemSubstituteMenuPart {
      private final SModuleReference myParameterObject;
      public SMP_Action_xz32ym_a0(SModuleReference parameterObject) {
        myParameterObject = parameterObject;
      }

      @Nullable
      @Override
      protected SubstituteMenuItem createItem(SubstituteMenuContext _context) {
        return new RepositoryModules_Substitute.SMP_Param_xz32ym_a.SMP_Action_xz32ym_a0.Item(_context);
      }
      private class Item extends DefaultSubstituteMenuItem {
        private final SubstituteMenuContext _context;
        private EditorMenuTraceInfo myTraceInfo;
        public Item(SubstituteMenuContext context) {
          super(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5ef5a1e853388b3L, "jetbrains.mps.lang.smodel.structure.ModulePointer"), context.getParentNode(), context.getCurrentTargetNode(), context.getEditorContext());
          _context = context;
          _context.getEditorMenuTrace().pushTraceInfo();
          String description = "Substitute item: " + getMatchingText("");
          description += " .Parameter object: " + myParameterObject;
          _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase(description, new SNodePointer("r:00000000-0000-4000-0000-011c895902fd(jetbrains.mps.lang.smodel.editor)", "8228083397230375751")));
          this.myTraceInfo = context.getEditorMenuTrace().getTraceInfo();
          _context.getEditorMenuTrace().popTraceInfo();
        }

        @Nullable
        @Override
        public SNode createNode(@NotNull String pattern) {
          SNode v = SModelOperations.createNewNode(_context.getModel(), null, MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5ef5a1e853388b3L, "jetbrains.mps.lang.smodel.structure.ModulePointer"));
          ModuleIdentity__BehaviorDescriptor.setModuleReference_idnJmxU5cSTj.invoke(v, myParameterObject);
          return v;
        }

        @Override
        public EditorMenuTraceInfo getTraceInfo() {
          return myTraceInfo;
        }
        @Nullable
        @Override
        public String getDescriptionText(@NotNull String pattern) {
          return "";
        }
        @Nullable
        @Override
        public String getMatchingText(@NotNull String pattern) {
          return myParameterObject.getModuleName();
        }
        @Override
        public boolean canExecute(@NotNull String pattern) {
          return canExecute_internal(pattern, false);
        }
        @Override
        public boolean canExecuteStrictly(@NotNull String pattern) {
          return canExecute_internal(pattern, true);
        }
        public boolean canExecute_internal(@NotNull String pattern, boolean strictly) {
          String moduleName = myParameterObject.getModuleName();
          if (moduleName == null) {
            return false;
          }
          if (strictly) {
            return moduleName.equals(pattern);
          } else if ((pattern == null || pattern.length() == 0)) {
            return true;
          } else {
            return !(PatternUtil.getIndexes(pattern, true, moduleName).isEmpty());
          }
        }
        @Nullable
        @Override
        public IconResource getIcon(@NotNull String pattern) {
          SModule module = myParameterObject.resolve(_context.getEditorContext().getRepository());
          if (module instanceof Solution || module instanceof ProjectStructureModule) {
            return IconContainer.RESOURCE_a0a1a21e3f;
          }
          if (module instanceof Language) {
            return IconContainer.RESOURCE_a0a2a21e3f;
          }
          if (module instanceof Generator) {
            return IconContainer.RESOURCE_a0a3a21e3f;
          }
          if (module instanceof DevKit) {
            return IconContainer.RESOURCE_a0a4a21e3f;
          }
          return null;
        }
      }
    }

  }
}
