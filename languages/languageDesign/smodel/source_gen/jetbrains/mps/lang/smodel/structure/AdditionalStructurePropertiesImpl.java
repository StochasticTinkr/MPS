package jetbrains.mps.lang.smodel.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_AbstractNodeRefExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AbstractOperationParameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AbstractTypeCastExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AllAttributeQualifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AsNodeOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AsSConcept = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AttributeAccess = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AttributeQualifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BootstrapAwareMetaObject = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CheckedModuleQualifiedName = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CheckedModuleReference = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_ChildAttributeQualifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ChildNodeRefExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptAliasOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptFqNameRefExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptId = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptIdRefExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptIdentity = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptNodeType = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_ConceptRefExpression = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_ConceptReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptShortDescriptionOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptSwitchStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Concept_GetAllSubConcepts = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Concept_GetAllSuperConcepts = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Concept_GetDirectSuperConcepts = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Concept_GetHierarchy = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_Concept_IsExactlyOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Concept_IsSubConceptOfOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Concept_IsSuperConceptOfOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Concept_NewInstance = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_EnumMemberReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EnumMemberValueRefExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EnumMember_NameOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EnumMember_ValueOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EqualsStructurallyExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExactConceptCase = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_GeneratorIdentity = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_GeneratorModulePointer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IConceptSwitchCase = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ILinkAccess = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ILinkAccessQualifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ILinkAccessQualifierContainer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ILinkQualifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IPropertyQualifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IRefConceptArg = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IReferenceOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IfInstanceOfStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IfInstanceOfVarReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IfInstanceOfVariable = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LanguageId = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c8c0L, 0x312abca18ab8ccd7L, "namespace"), MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c8c0L, 0x312abca18ab8ccd8L, "languageId"), MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c8c0L, 0x312abca18ab8ccd9L, "version")).create();
  private final AdditionalConceptProperties props_LanguageIdentity = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LanguageRefExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LanguageReferenceExpression = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_LinkAttributeQualifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LinkIdRefExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LinkList_AddNewChildOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LinkNameRefExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LinkQualifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LinkRefExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LinkRefQualifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Link_SetNewChildOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Link_SetTargetOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ModelReferenceExpression = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x7c3f2da20e92b62L, 0x7c3f2da20e92b66L, "name"), MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x7c3f2da20e92b62L, 0x7c3f2da20e93b6fL, "stereotype"), MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x7c3f2da20e92b62L, 0x7c3f2da20e98892L, "fqName")).create();
  private final AdditionalConceptProperties props_Model_AddRootOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Model_CreateNewNodeOperation = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2e210544L, 0x10a2e23ae30L, "concept")).create();
  private final AdditionalConceptProperties props_Model_CreateNewRootNodeOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Model_GetLongNameOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Model_GetModule = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Model_NodesIncludingImportedOperation = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1135326811cL, 0x1135326811eL, "concept")).create();
  private final AdditionalConceptProperties props_Model_NodesOperation = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110b8590897L, 0x110b8590898L, "concept")).create();
  private final AdditionalConceptProperties props_Model_RootsIncludingImportedOperation = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x111d5999a91L, 0x111d5999a92L, "concept")).create();
  private final AdditionalConceptProperties props_Model_RootsOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ModuleIdentity = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ModulePointer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ModuleRefExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ModuleReferenceExpression = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_NodeAttributeQualifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodePointerExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeRefExpression = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_Node_ConceptMethodCall = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1129a43046bL, 0x27990abcdcff2f1dL, "directCall")).create();
  private final AdditionalConceptProperties props_Node_CopyOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_DeleteOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_DetachOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetAllSiblingsOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetAncestorOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetAncestorsOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetChildrenAndChildAttributesOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetChildrenOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetConceptOperation = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_Node_GetContainingLinkOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetContainingRoleOperation = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_Node_GetContainingRootOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetDescendantsOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetIndexInParentOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetModelOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetNextSiblingOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetNextSiblingsOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetParentOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetPrevSiblingOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetPrevSiblingsOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetReferenceOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetReferencesOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_GetReferentSearchScopeOperation = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_Node_GetSConceptOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_InsertNewNextSiblingOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_InsertNewPrevSiblingOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_InsertNextSiblingOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_InsertPrevSiblingOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_IsAttributeOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_IsInstanceOfOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_IsNotNullOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_IsNullOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_IsRoleOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_PointerOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_ReplaceWithAnotherOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Node_ReplaceWithNewOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OfConceptOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OperationParm_Concept = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OperationParm_ConceptList = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OperationParm_Inclusion = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OperationParm_LinkQualifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OperationParm_Root = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OperationParm_SameMetaLevel = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OperationParm_StopConceptList = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PoundExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PropertyAttributeQualifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PropertyId = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PropertyIdRefExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PropertyIdentity = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PropertyNameRefExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PropertyQualifier = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Property_HasValue_Enum = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Property_HasValue_Simple = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Property_RemoveOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Property_SetOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RefConcept_Reference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Reference_GetLinkDeclarationOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Reference_GetResolveInfo = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Reference_GetRoleOperation = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_Reference_GetTargetOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SConceptOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SConceptType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SConceptTypeCastExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SEnumMemberOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SEnumMemberType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SEnumOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SEnumOperationInvocation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SEnum_MemberForNameOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SEnum_MemberForValueOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SEnum_MemberOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SEnum_MembersOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SLinkAccess = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SLinkImplicitSelect = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SLinkListAccess = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SModelType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SNodeCreator = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_SNodeListCreator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SNodeListType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SNodeOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SNodeType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SNodeTypeCastExpression = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10975850da7L, 0x12067573bc7L, "asCast"), MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10975850da7L, 0x10975873562L, "concept_old")).create();
  private final AdditionalConceptProperties props_SPropertyAccess = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SReferenceType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SearchScopeType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SearchScope_ContainsOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SemanticDowncastExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SubconceptCase = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0ng.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractNodeRefExpression;
          }
          break;
        case 1:
          if (true) {
            return props_AbstractOperationParameter;
          }
          break;
        case 2:
          if (true) {
            return props_AbstractTypeCastExpression;
          }
          break;
        case 3:
          if (true) {
            return props_AllAttributeQualifier;
          }
          break;
        case 4:
          if (true) {
            return props_AsNodeOperation;
          }
          break;
        case 5:
          if (true) {
            return props_AsSConcept;
          }
          break;
        case 6:
          if (true) {
            return props_AttributeAccess;
          }
          break;
        case 7:
          if (true) {
            return props_AttributeQualifier;
          }
          break;
        case 8:
          if (true) {
            return props_BootstrapAwareMetaObject;
          }
          break;
        case 9:
          if (true) {
            return props_CheckedModuleQualifiedName;
          }
          break;
        case 10:
          if (true) {
            return props_CheckedModuleReference;
          }
          break;
        case 11:
          if (true) {
            return props_ChildAttributeQualifier;
          }
          break;
        case 12:
          if (true) {
            return props_ChildNodeRefExpression;
          }
          break;
        case 13:
          if (true) {
            return props_ConceptAliasOperation;
          }
          break;
        case 14:
          if (true) {
            return props_ConceptFqNameRefExpression;
          }
          break;
        case 15:
          if (true) {
            return props_ConceptId;
          }
          break;
        case 16:
          if (true) {
            return props_ConceptIdRefExpression;
          }
          break;
        case 17:
          if (true) {
            return props_ConceptIdentity;
          }
          break;
        case 18:
          if (true) {
            return props_ConceptNodeType;
          }
          break;
        case 19:
          if (true) {
            return props_ConceptRefExpression;
          }
          break;
        case 20:
          if (true) {
            return props_ConceptReference;
          }
          break;
        case 21:
          if (true) {
            return props_ConceptShortDescriptionOperation;
          }
          break;
        case 22:
          if (true) {
            return props_ConceptSwitchStatement;
          }
          break;
        case 23:
          if (true) {
            return props_Concept_GetAllSubConcepts;
          }
          break;
        case 24:
          if (true) {
            return props_Concept_GetAllSuperConcepts;
          }
          break;
        case 25:
          if (true) {
            return props_Concept_GetDirectSuperConcepts;
          }
          break;
        case 26:
          if (true) {
            return props_Concept_GetHierarchy;
          }
          break;
        case 27:
          if (true) {
            return props_Concept_IsExactlyOperation;
          }
          break;
        case 28:
          if (true) {
            return props_Concept_IsSubConceptOfOperation;
          }
          break;
        case 29:
          if (true) {
            return props_Concept_IsSuperConceptOfOperation;
          }
          break;
        case 30:
          if (true) {
            return props_Concept_NewInstance;
          }
          break;
        case 31:
          if (true) {
            return props_EnumMemberReference;
          }
          break;
        case 32:
          if (true) {
            return props_EnumMemberValueRefExpression;
          }
          break;
        case 33:
          if (true) {
            return props_EnumMember_NameOperation;
          }
          break;
        case 34:
          if (true) {
            return props_EnumMember_ValueOperation;
          }
          break;
        case 35:
          if (true) {
            return props_EqualsStructurallyExpression;
          }
          break;
        case 36:
          if (true) {
            return props_ExactConceptCase;
          }
          break;
        case 37:
          if (true) {
            return props_GeneratorIdentity;
          }
          break;
        case 38:
          if (true) {
            return props_GeneratorModulePointer;
          }
          break;
        case 39:
          if (true) {
            return props_IConceptSwitchCase;
          }
          break;
        case 40:
          if (true) {
            return props_ILinkAccess;
          }
          break;
        case 41:
          if (true) {
            return props_ILinkAccessQualifier;
          }
          break;
        case 42:
          if (true) {
            return props_ILinkAccessQualifierContainer;
          }
          break;
        case 43:
          if (true) {
            return props_ILinkQualifier;
          }
          break;
        case 44:
          if (true) {
            return props_IPropertyQualifier;
          }
          break;
        case 45:
          if (true) {
            return props_IRefConceptArg;
          }
          break;
        case 46:
          if (true) {
            return props_IReferenceOperation;
          }
          break;
        case 47:
          if (true) {
            return props_IfInstanceOfStatement;
          }
          break;
        case 48:
          if (true) {
            return props_IfInstanceOfVarReference;
          }
          break;
        case 49:
          if (true) {
            return props_IfInstanceOfVariable;
          }
          break;
        case 50:
          if (true) {
            return props_LanguageId;
          }
          break;
        case 51:
          if (true) {
            return props_LanguageIdentity;
          }
          break;
        case 52:
          if (true) {
            return props_LanguageRefExpression;
          }
          break;
        case 53:
          if (true) {
            return props_LanguageReferenceExpression;
          }
          break;
        case 54:
          if (true) {
            return props_LinkAttributeQualifier;
          }
          break;
        case 55:
          if (true) {
            return props_LinkIdRefExpression;
          }
          break;
        case 56:
          if (true) {
            return props_LinkList_AddNewChildOperation;
          }
          break;
        case 57:
          if (true) {
            return props_LinkNameRefExpression;
          }
          break;
        case 58:
          if (true) {
            return props_LinkQualifier;
          }
          break;
        case 59:
          if (true) {
            return props_LinkRefExpression;
          }
          break;
        case 60:
          if (true) {
            return props_LinkRefQualifier;
          }
          break;
        case 61:
          if (true) {
            return props_Link_SetNewChildOperation;
          }
          break;
        case 62:
          if (true) {
            return props_Link_SetTargetOperation;
          }
          break;
        case 63:
          if (true) {
            return props_ModelReferenceExpression;
          }
          break;
        case 64:
          if (true) {
            return props_Model_AddRootOperation;
          }
          break;
        case 65:
          if (true) {
            return props_Model_CreateNewNodeOperation;
          }
          break;
        case 66:
          if (true) {
            return props_Model_CreateNewRootNodeOperation;
          }
          break;
        case 67:
          if (true) {
            return props_Model_GetLongNameOperation;
          }
          break;
        case 68:
          if (true) {
            return props_Model_GetModule;
          }
          break;
        case 69:
          if (true) {
            return props_Model_NodesIncludingImportedOperation;
          }
          break;
        case 70:
          if (true) {
            return props_Model_NodesOperation;
          }
          break;
        case 71:
          if (true) {
            return props_Model_RootsIncludingImportedOperation;
          }
          break;
        case 72:
          if (true) {
            return props_Model_RootsOperation;
          }
          break;
        case 73:
          if (true) {
            return props_ModuleIdentity;
          }
          break;
        case 74:
          if (true) {
            return props_ModulePointer;
          }
          break;
        case 75:
          if (true) {
            return props_ModuleRefExpression;
          }
          break;
        case 76:
          if (true) {
            return props_ModuleReferenceExpression;
          }
          break;
        case 77:
          if (true) {
            return props_NodeAttributeQualifier;
          }
          break;
        case 78:
          if (true) {
            return props_NodePointerExpression;
          }
          break;
        case 79:
          if (true) {
            return props_NodeRefExpression;
          }
          break;
        case 80:
          if (true) {
            return props_Node_ConceptMethodCall;
          }
          break;
        case 81:
          if (true) {
            return props_Node_CopyOperation;
          }
          break;
        case 82:
          if (true) {
            return props_Node_DeleteOperation;
          }
          break;
        case 83:
          if (true) {
            return props_Node_DetachOperation;
          }
          break;
        case 84:
          if (true) {
            return props_Node_GetAllSiblingsOperation;
          }
          break;
        case 85:
          if (true) {
            return props_Node_GetAncestorOperation;
          }
          break;
        case 86:
          if (true) {
            return props_Node_GetAncestorsOperation;
          }
          break;
        case 87:
          if (true) {
            return props_Node_GetChildrenAndChildAttributesOperation;
          }
          break;
        case 88:
          if (true) {
            return props_Node_GetChildrenOperation;
          }
          break;
        case 89:
          if (true) {
            return props_Node_GetConceptOperation;
          }
          break;
        case 90:
          if (true) {
            return props_Node_GetContainingLinkOperation;
          }
          break;
        case 91:
          if (true) {
            return props_Node_GetContainingRoleOperation;
          }
          break;
        case 92:
          if (true) {
            return props_Node_GetContainingRootOperation;
          }
          break;
        case 93:
          if (true) {
            return props_Node_GetDescendantsOperation;
          }
          break;
        case 94:
          if (true) {
            return props_Node_GetIndexInParentOperation;
          }
          break;
        case 95:
          if (true) {
            return props_Node_GetModelOperation;
          }
          break;
        case 96:
          if (true) {
            return props_Node_GetNextSiblingOperation;
          }
          break;
        case 97:
          if (true) {
            return props_Node_GetNextSiblingsOperation;
          }
          break;
        case 98:
          if (true) {
            return props_Node_GetParentOperation;
          }
          break;
        case 99:
          if (true) {
            return props_Node_GetPrevSiblingOperation;
          }
          break;
        case 100:
          if (true) {
            return props_Node_GetPrevSiblingsOperation;
          }
          break;
        case 101:
          if (true) {
            return props_Node_GetReferenceOperation;
          }
          break;
        case 102:
          if (true) {
            return props_Node_GetReferencesOperation;
          }
          break;
        case 103:
          if (true) {
            return props_Node_GetReferentSearchScopeOperation;
          }
          break;
        case 104:
          if (true) {
            return props_Node_GetSConceptOperation;
          }
          break;
        case 105:
          if (true) {
            return props_Node_InsertNewNextSiblingOperation;
          }
          break;
        case 106:
          if (true) {
            return props_Node_InsertNewPrevSiblingOperation;
          }
          break;
        case 107:
          if (true) {
            return props_Node_InsertNextSiblingOperation;
          }
          break;
        case 108:
          if (true) {
            return props_Node_InsertPrevSiblingOperation;
          }
          break;
        case 109:
          if (true) {
            return props_Node_IsAttributeOperation;
          }
          break;
        case 110:
          if (true) {
            return props_Node_IsInstanceOfOperation;
          }
          break;
        case 111:
          if (true) {
            return props_Node_IsNotNullOperation;
          }
          break;
        case 112:
          if (true) {
            return props_Node_IsNullOperation;
          }
          break;
        case 113:
          if (true) {
            return props_Node_IsRoleOperation;
          }
          break;
        case 114:
          if (true) {
            return props_Node_PointerOperation;
          }
          break;
        case 115:
          if (true) {
            return props_Node_ReplaceWithAnotherOperation;
          }
          break;
        case 116:
          if (true) {
            return props_Node_ReplaceWithNewOperation;
          }
          break;
        case 117:
          if (true) {
            return props_OfConceptOperation;
          }
          break;
        case 118:
          if (true) {
            return props_OperationParm_Concept;
          }
          break;
        case 119:
          if (true) {
            return props_OperationParm_ConceptList;
          }
          break;
        case 120:
          if (true) {
            return props_OperationParm_Inclusion;
          }
          break;
        case 121:
          if (true) {
            return props_OperationParm_LinkQualifier;
          }
          break;
        case 122:
          if (true) {
            return props_OperationParm_Root;
          }
          break;
        case 123:
          if (true) {
            return props_OperationParm_SameMetaLevel;
          }
          break;
        case 124:
          if (true) {
            return props_OperationParm_StopConceptList;
          }
          break;
        case 125:
          if (true) {
            return props_PoundExpression;
          }
          break;
        case 126:
          if (true) {
            return props_PropertyAttributeQualifier;
          }
          break;
        case 127:
          if (true) {
            return props_PropertyId;
          }
          break;
        case 128:
          if (true) {
            return props_PropertyIdRefExpression;
          }
          break;
        case 129:
          if (true) {
            return props_PropertyIdentity;
          }
          break;
        case 130:
          if (true) {
            return props_PropertyNameRefExpression;
          }
          break;
        case 131:
          if (true) {
            return props_PropertyQualifier;
          }
          break;
        case 132:
          if (true) {
            return props_Property_HasValue_Enum;
          }
          break;
        case 133:
          if (true) {
            return props_Property_HasValue_Simple;
          }
          break;
        case 134:
          if (true) {
            return props_Property_RemoveOperation;
          }
          break;
        case 135:
          if (true) {
            return props_Property_SetOperation;
          }
          break;
        case 136:
          if (true) {
            return props_RefConcept_Reference;
          }
          break;
        case 137:
          if (true) {
            return props_Reference_GetLinkDeclarationOperation;
          }
          break;
        case 138:
          if (true) {
            return props_Reference_GetResolveInfo;
          }
          break;
        case 139:
          if (true) {
            return props_Reference_GetRoleOperation;
          }
          break;
        case 140:
          if (true) {
            return props_Reference_GetTargetOperation;
          }
          break;
        case 141:
          if (true) {
            return props_SConceptOperation;
          }
          break;
        case 142:
          if (true) {
            return props_SConceptType;
          }
          break;
        case 143:
          if (true) {
            return props_SConceptTypeCastExpression;
          }
          break;
        case 144:
          if (true) {
            return props_SEnumMemberOperation;
          }
          break;
        case 145:
          if (true) {
            return props_SEnumMemberType;
          }
          break;
        case 146:
          if (true) {
            return props_SEnumOperation;
          }
          break;
        case 147:
          if (true) {
            return props_SEnumOperationInvocation;
          }
          break;
        case 148:
          if (true) {
            return props_SEnum_MemberForNameOperation;
          }
          break;
        case 149:
          if (true) {
            return props_SEnum_MemberForValueOperation;
          }
          break;
        case 150:
          if (true) {
            return props_SEnum_MemberOperation;
          }
          break;
        case 151:
          if (true) {
            return props_SEnum_MembersOperation;
          }
          break;
        case 152:
          if (true) {
            return props_SLinkAccess;
          }
          break;
        case 153:
          if (true) {
            return props_SLinkImplicitSelect;
          }
          break;
        case 154:
          if (true) {
            return props_SLinkListAccess;
          }
          break;
        case 155:
          if (true) {
            return props_SModelType;
          }
          break;
        case 156:
          if (true) {
            return props_SNodeCreator;
          }
          break;
        case 157:
          if (true) {
            return props_SNodeListCreator;
          }
          break;
        case 158:
          if (true) {
            return props_SNodeListType;
          }
          break;
        case 159:
          if (true) {
            return props_SNodeOperation;
          }
          break;
        case 160:
          if (true) {
            return props_SNodeType;
          }
          break;
        case 161:
          if (true) {
            return props_SNodeTypeCastExpression;
          }
          break;
        case 162:
          if (true) {
            return props_SPropertyAccess;
          }
          break;
        case 163:
          if (true) {
            return props_SReferenceType;
          }
          break;
        case 164:
          if (true) {
            return props_SearchScopeType;
          }
          break;
        case 165:
          if (true) {
            return props_SearchScope_ContainsOperation;
          }
          break;
        case 166:
          if (true) {
            return props_SemanticDowncastExpression;
          }
          break;
        case 167:
          if (true) {
            return props_SubconceptCase;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0ng = buildConceptIndices(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x319fd776da5d8e3cL, "AbstractNodeRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a61b7ea2aL, "AbstractOperationParameter"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x2143399c0554e687L, "AbstractTypeCastExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x58ea5217b045c8b0L, "AllAttributeQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x7b0da3c650be8558L, "AsNodeOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x4a4d7215f163131L, "AsSConcept"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x58ea5217b045a3b2L, "AttributeAccess"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x58ea5217b045b9abL, "AttributeQualifier"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x2399a155048244c5L, "BootstrapAwareMetaObject"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x6085898237feae86L, "CheckedModuleQualifiedName"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x3c7a9d8c8d63d4f3L, "CheckedModuleReference"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x9d98713f24a0e5bL, "ChildAttributeQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x84baf20c71f8a79L, "ChildNodeRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5f5952af8856be80L, "ConceptAliasOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x73bd24cca4f91254L, "ConceptFqNameRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5fea1eb9fefb6fe7L, "ConceptId"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x24b2bf7ce180eb54L, "ConceptIdRefExpression"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5fea1eb9fefb4642L, "ConceptIdentity"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110f9b63680L, "ConceptNodeType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110f9eb64c6L, "ConceptRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10cd05c601dL, "ConceptReference"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5f5952af8862fd1cL, "ConceptShortDescriptionOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x527e98a73771f42dL, "ConceptSwitchStatement"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11331e18cdcL, "Concept_GetAllSubConcepts"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x112d8bf5d03L, "Concept_GetAllSuperConcepts"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11296bd8374L, "Concept_GetDirectSuperConcepts"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x112d8ce685dL, "Concept_GetHierarchy"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110f41acfb7L, "Concept_IsExactlyOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x112bf601180L, "Concept_IsSubConceptOfOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x112bf289d94L, "Concept_IsSuperConceptOfOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11331ad1f2aL, "Concept_NewInstance"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1091e6212fdL, "EnumMemberReference"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x60c7f83bafd83b5bL, "EnumMemberValueRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120c01735d3L, "EnumMember_NameOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120bff92dbeL, "EnumMember_ValueOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11dbead8683L, "EqualsStructurallyExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x53cfca750a909c64L, "ExactConceptCase"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x73246de9adeca173L, "GeneratorIdentity"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x73246de9adecb80dL, "GeneratorModulePointer"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x53cfca750a909c96L, "IConceptSwitchCase"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x37d97a5712d396cbL, "ILinkAccess"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1188696e5f6L, "ILinkAccessQualifier"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312a67f61731e269L, "ILinkAccessQualifierContainer"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x26b292a5afc7ccaaL, "ILinkQualifier"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x26b292a5afc7ccabL, "IPropertyQualifier"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x118f285e4f7L, "IRefConceptArg"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x157abf675bd53df2L, "IReferenceOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1a228da1357e4a44L, "IfInstanceOfStatement"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1a228da1357fca73L, "IfInstanceOfVarReference"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1a228da1357e4a49L, "IfInstanceOfVariable"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c8c0L, "LanguageId"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c318L, "LanguageIdentity"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x3e6a40ba27dd70f3L, "LanguageRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x38130dc4e3dc174aL, "LanguageReferenceExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x58ea5217b045b9b7L, "LinkAttributeQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x24b2bf7ce1957615L, "LinkIdRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1093caead54L, "LinkList_AddNewChildOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x48e6e2695189e59aL, "LinkNameRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x26b292a5afc7ccacL, "LinkQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11d88b27d15L, "LinkRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11886c4bac0L, "LinkRefQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x109233dbca1L, "Link_SetNewChildOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1099887af60L, "Link_SetTargetOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x7c3f2da20e92b62L, "ModelReferenceExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x118e7faea40L, "Model_AddRootOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2e210544L, "Model_CreateNewNodeOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10fa1ac23f2L, "Model_CreateNewRootNodeOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11a3152e18bL, "Model_GetLongNameOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x61168e34226eec71L, "Model_GetModule"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1135326811cL, "Model_NodesIncludingImportedOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110b8590897L, "Model_NodesOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x111d5999a91L, "Model_RootsIncludingImportedOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110b7dcc9bcL, "Model_RootsOperation"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5ef5a1e85338e1eL, "ModuleIdentity"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5ef5a1e853388b3L, "ModulePointer"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1749acf3d038bbe2L, "ModuleRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x38130dc4e3db5af1L, "ModuleReferenceExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x58ea5217b045b9b5L, "NodeAttributeQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x195fd0576ac9bb49L, "NodePointerExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11be716563cL, "NodeRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1129a43046bL, "Node_ConceptMethodCall"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a646d8514L, "Node_CopyOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1097542784fL, "Node_DeleteOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11dfede6ec0L, "Node_DetachOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10ab97e0a94L, "Node_GetAllSiblingsOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110bd4e0067L, "Node_GetAncestorOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1112390be59L, "Node_GetAncestorsOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x6cbc725f4b35314cL, "Node_GetChildrenAndChildAttributesOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110c2e679e7L, "Node_GetChildrenOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110f3e65fdcL, "Node_GetConceptOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x50c63f2cd5142697L, "Node_GetContainingLinkOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1b35e18a1a3b2c9aL, "Node_GetContainingRoleOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110b78550e8L, "Node_GetContainingRootOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110b73c3484L, "Node_GetDescendantsOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1128be3ca6aL, "Node_GetIndexInParentOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2e126334L, "Node_GetModelOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a3ea0a40dL, "Node_GetNextSiblingOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10ab957e8bbL, "Node_GetNextSiblingsOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x109563e6169L, "Node_GetParentOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a3e9fedc7L, "Node_GetPrevSiblingOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10ab975b657L, "Node_GetPrevSiblingsOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x32187d80f5b88800L, "Node_GetReferenceOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x798c0d67da9045abL, "Node_GetReferencesOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11c530706b2L, "Node_GetReferentSearchScopeOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x6771eac6c5cbe7d2L, "Node_GetSConceptOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10964e26717L, "Node_InsertNewNextSiblingOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2d494062L, "Node_InsertNewPrevSiblingOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2d76e31eL, "Node_InsertNextSiblingOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2d77d0e1L, "Node_InsertPrevSiblingOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x118c2f5b5f6L, "Node_IsAttributeOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10956bb6029L, "Node_IsInstanceOfOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110e123bce7L, "Node_IsNotNullOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110e0974e46L, "Node_IsNullOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a67578ddeL, "Node_IsRoleOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x4604033d54faa023L, "Node_PointerOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10975273750L, "Node_ReplaceWithAnotherOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10965697d7aL, "Node_ReplaceWithNewOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x412437525e297780L, "OfConceptOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a61caab68L, "OperationParm_Concept"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10cd05bec71L, "OperationParm_ConceptList"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a61bacc13L, "OperationParm_Inclusion"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x47bb2de70d00ff8cL, "OperationParm_LinkQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a61c4f312L, "OperationParm_Root"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x155fb7143719d578L, "OperationParm_SameMetaLevel"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x190735f308e2250bL, "OperationParm_StopConceptList"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11885c0d945L, "PoundExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x58ea5217b045c9b9L, "PropertyAttributeQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5fea1eb9fefc235cL, "PropertyId"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x24b2bf7ce1a42fa0L, "PropertyIdRefExpression"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5fea1eb9fefb4617L, "PropertyIdentity"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x48e6e269518c89f7L, "PropertyNameRefExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x26b292a5afc7ccadL, "PropertyQualifier"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10add1ded2bL, "Property_HasValue_Enum"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10ae2053294L, "Property_HasValue_Simple"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11aff7f2bb2L, "Property_RemoveOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1091d8a1d53L, "Property_SetOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1120c45902cL, "RefConcept_Reference"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x157abf675bd53debL, "Reference_GetLinkDeclarationOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x4f37053c240837e1L, "Reference_GetResolveInfo"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x4efeb22247ff02a7L, "Reference_GetRoleOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x393cc52c868a600aL, "Reference_GetTargetOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5f5952af8843faf9L, "SConceptOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x5cab42cd97571ceeL, "SConceptType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1871b2e3b0ef0078L, "SConceptTypeCastExpression"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120f244ef53L, "SEnumMemberOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120bfe51421L, "SEnumMemberType"), MetaAdapterFactory.getInterfaceConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120ed37273dL, "SEnumOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120ed32e98bL, "SEnumOperationInvocation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120ed37e60cL, "SEnum_MemberForNameOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120ed37e64eL, "SEnum_MemberForValueOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120ed37e691L, "SEnum_MemberOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x120ed37e6b4L, "SEnum_MembersOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96ea2caL, "SLinkAccess"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x316f884c72a4157dL, "SLinkImplicitSelect"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f970c119L, "SLinkListAccess"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2d94c0cdL, "SModelType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x112e36f7135L, "SNodeCreator"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10ab923b94aL, "SNodeListCreator"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10aae26be32L, "SNodeListType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL, "SNodeOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f968b3caL, "SNodeType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10975850da7L, "SNodeTypeCastExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x108f96cca6fL, "SPropertyAccess"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x798c0d67da9d2175L, "SReferenceType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11c52ebfbe2L, "SearchScopeType"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x11c536d2503L, "SearchScope_ContainsOperation"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10aaf6d7435L, "SemanticDowncastExpression"), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x527e98a73771f432L, "SubconceptCase"));
}
