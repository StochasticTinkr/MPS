package jetbrains.mps.lang.smodel.migration;

/*Generated by MPS */

import jetbrains.mps.lang.migration.runtime.base.MigrationScriptBase;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.pattern.GeneratedMatchingPattern;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import java.util.List;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.util.Computable;
import jetbrains.mps.lang.migration.runtime.base.Problem;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.lang.smodel.query.runtime.CommandUtil;
import jetbrains.mps.lang.smodel.query.runtime.QueryExecutionContext;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.migration.runtime.base.DeprecatedConceptNotMigratedProblem;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptReference;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public class MigrateDelete2Detach extends MigrationScriptBase {
  public String getCaption() {
    return "migrate node<>.delete";
  }
  @Override
  public boolean isRerunnable() {
    return true;
  }
  public SNode execute(final SModule m) {
    doExecute(m);
    return null;
  }
  public void doExecute(final SModule m) {
    {
      final GeneratedMatchingPattern pattern = new Pattern_vn1hs7_a0a6(_quotation_createNode_vn1hs7_a0a0a6());
      Sequence.fromIterable(((Iterable<SModel>) m.getModels())).translate(new ITranslator2<SModel, SNode>() {
        public Iterable<SNode> translate(SModel it) {
          return SModelOperations.nodes(it, SNodeOperations.asSConcept(pattern.getConcept()));
        }
      }).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return pattern.match(it);
        }
      }).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(isInTransformPattern(it));
        }
      }).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode n) {
          return true;
        }
      }).sort(new ISelector<SNode, Integer>() {
        public Integer select(SNode it) {
          return ListSequence.fromList(SNodeOperations.getNodeAncestors(it, null, false)).count();
        }
      }, false).visitAll(new IVisitor<SNode>() {
        public void visit(final SNode nodeToMigrate) {
          pattern.match(nodeToMigrate);
          List<SNode> attributes = SNodeOperations.getNodeDescendants(nodeToMigrate, MetaAdapterFactory.getConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x47bf8397520e5939L, "jetbrains.mps.lang.core.structure.Attribute"), false, new SAbstractConcept[]{});
          if (ListSequence.fromList(attributes).isNotEmpty()) {
            markAnnotatedNodeForReview(nodeToMigrate, attributes);
            return;
          }
          applyTransormMigration(nodeToMigrate, new Computable<SNode>() {
            public SNode compute() {
              return _quotation_createNode_vn1hs7_a0a0g();
            }
          }, null);
        }
      });
    }
  }
  @Override
  public Iterable<Problem> check(SModule m) {
    {
      final SearchScope scope = CommandUtil.createScope(m);
      QueryExecutionContext context = new QueryExecutionContext() {
        public SearchScope getDefaultSearchScope() {
          return scope;
        }
      };
      return CollectionSequence.fromCollection(CommandUtil.instances(CommandUtil.selectScope(null, context), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1097542784fL, "jetbrains.mps.lang.smodel.structure.Node_DeleteOperation"), true)).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.getContainingRoot(it).getReference() != new SNodePointer("r:18ddb7a1-bae8-47e8-a653-f672ff99522d(jetbrains.mps.lang.smodel.migration)", "7007208114699959039");
        }
      }).select(new ISelector<SNode, DeprecatedConceptNotMigratedProblem>() {
        public DeprecatedConceptNotMigratedProblem select(SNode it) {
          return new DeprecatedConceptNotMigratedProblem(it);
        }
      });
    }
  }
  public MigrationScriptReference getDescriptor() {
    return new MigrationScriptReference(MetaAdapterFactory.getLanguage(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, "jetbrains.mps.lang.smodel"), 6);
  }

  private static SNode _quotation_createNode_vn1hs7_a0a0a6() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, "jetbrains.mps.lang.smodel"), 0x1097542784fL, "Node_DeleteOperation"), null, null, false);
    return quotedNode_1;
  }
  private static SNode _quotation_createNode_vn1hs7_a0a0g() {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_1 = null;
    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(MetaAdapterFactory.getLanguage(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, "jetbrains.mps.lang.smodel"), 0x11dfede6ec0L, "Node_DetachOperation"), null, null, false);
    return quotedNode_1;
  }
}
