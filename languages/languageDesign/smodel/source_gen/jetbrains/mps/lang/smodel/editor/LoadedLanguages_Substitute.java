package jetbrains.mps.lang.smodel.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.substitute.SubstituteMenuBase;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.menus.substitute.ConstraintsFilteringSubstituteMenuPartDecorator;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.editor.menus.ParameterizedMenuPart;
import org.jetbrains.mps.openapi.language.SLanguage;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.lang.editor.menus.substitute.SingleItemSubstituteMenuPart;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuItem;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.behavior.LanguageIdentity__BehaviorDescriptor;
import jetbrains.mps.util.PatternUtil;
import jetbrains.mps.smodel.runtime.IconResource;

public class LoadedLanguages_Substitute extends SubstituteMenuBase {
  @NotNull
  @Override
  protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts(final SubstituteMenuContext _context) {
    List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> result = new ArrayList<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>();
    result.add(new ConstraintsFilteringSubstituteMenuPartDecorator(new LoadedLanguages_Substitute.SMP_Param_210zo1_a(), MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c8c0L, "jetbrains.mps.lang.smodel.structure.LanguageId")));
    return result;
  }
  private class SMP_Param_210zo1_a extends ParameterizedMenuPart<SLanguage, SubstituteMenuItem, SubstituteMenuContext> {
    @NotNull
    @Override
    protected List<SubstituteMenuItem> createItems(SLanguage parameter, SubstituteMenuContext context) {
      return new LoadedLanguages_Substitute.SMP_Param_210zo1_a.SMP_Action_210zo1_a0(parameter).createItems(context);
    }
    @Nullable
    @Override
    protected Iterable<? extends SLanguage> getParameters(SubstituteMenuContext _context) {
      Collection<SLanguage> allLanguages = LanguageRegistry.getInstance(_context.getEditorContext().getRepository()).getAllLanguages();
      return new ArrayList<SLanguage>(allLanguages);
    }
    private class SMP_Action_210zo1_a0 extends SingleItemSubstituteMenuPart {
      private final SLanguage myParameterObject;
      public SMP_Action_210zo1_a0(SLanguage parameterObject) {
        myParameterObject = parameterObject;
      }

      @Nullable
      @Override
      protected SubstituteMenuItem createItem(SubstituteMenuContext _context) {
        return new LoadedLanguages_Substitute.SMP_Param_210zo1_a.SMP_Action_210zo1_a0.Item(_context);
      }
      private class Item extends DefaultSubstituteMenuItem {
        private final SubstituteMenuContext _context;
        public Item(SubstituteMenuContext context) {
          super(MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c8c0L, "jetbrains.mps.lang.smodel.structure.LanguageId"), context.getParentNode(), context.getCurrentTargetNode(), context.getEditorContext());
          _context = context;
        }

        @Nullable
        @Override
        public SNode createNode(@NotNull String pattern) {
          SNode lid = SModelOperations.createNewNode(_context.getModel(), null, MetaAdapterFactory.getConcept(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c8c0L, "jetbrains.mps.lang.smodel.structure.LanguageId"));
          LanguageIdentity__BehaviorDescriptor.setLanguage_id34EJa6aIcyw.invoke(lid, myParameterObject);
          return lid;
        }
        @Nullable
        @Override
        public String getDescriptionText(@NotNull String pattern) {
          return "";
        }
        @Nullable
        @Override
        public String getMatchingText(@NotNull String pattern) {
          return myParameterObject.getQualifiedName();
        }
        @Override
        public boolean canExecute(@NotNull String pattern) {
          return canExecute_internal(pattern, false);
        }
        @Override
        public boolean canExecuteStrictly(@NotNull String pattern) {
          return canExecute_internal(pattern, true);
        }
        public boolean canExecute_internal(@NotNull String pattern, boolean strictly) {
          if (strictly) {
            return myParameterObject.getQualifiedName().equals(pattern);
          } else if ((pattern == null || pattern.length() == 0)) {
            return true;
          } else {
            return !(PatternUtil.getIndexes(pattern, true, myParameterObject.getQualifiedName()).isEmpty());
          }
        }
        @Nullable
        @Override
        public IconResource getIcon(@NotNull String pattern) {
          return IconContainer.RESOURCE_a0a9e2b;
        }
      }
    }

  }
}
