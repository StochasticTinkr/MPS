package jetbrains.mps.lang.smodel.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractLanguageIdentity = 0;
  public static final int AbstractNodeRefExpression = 1;
  public static final int AbstractOperationParameter = 2;
  public static final int AbstractTypeCastExpression = 3;
  public static final int AggregationIdentity = 4;
  public static final int AllAttributeQualifier = 5;
  public static final int AsNodeOperation = 6;
  public static final int AsSConcept = 7;
  public static final int AssociationIdentity = 8;
  public static final int AttributeAccess = 9;
  public static final int AttributeQualifier = 10;
  public static final int BootstrapAwareMetaObject = 11;
  public static final int ChildAttributeQualifier = 12;
  public static final int ChildNodeRefExpression = 13;
  public static final int ConceptAliasOperation = 14;
  public static final int ConceptFqNameRefExpression = 15;
  public static final int ConceptId = 16;
  public static final int ConceptIdRefExpression = 17;
  public static final int ConceptIdentity = 18;
  public static final int ConceptMemberIdentity = 19;
  public static final int ConceptNodeType = 20;
  public static final int ConceptRefExpression = 21;
  public static final int ConceptReference = 22;
  public static final int ConceptShortDescriptionOperation = 23;
  public static final int ConceptSwitchStatement = 24;
  public static final int Concept_GetAllSubConcepts = 25;
  public static final int Concept_GetAllSuperConcepts = 26;
  public static final int Concept_GetDirectSuperConcepts = 27;
  public static final int Concept_IsExactlyOperation = 28;
  public static final int Concept_IsSubConceptOfOperation = 29;
  public static final int Concept_IsSuperConceptOfOperation = 30;
  public static final int Concept_NewInstance = 31;
  public static final int ContainmentLinkId = 32;
  public static final int EnumMemberReference = 33;
  public static final int EnumMemberValueRefExpression = 34;
  public static final int EnumMember_NameOperation = 35;
  public static final int EnumMember_ValueOperation = 36;
  public static final int EqualsStructurallyExpression = 37;
  public static final int ExactConceptCase = 38;
  public static final int GeneratorIdentity = 39;
  public static final int GeneratorModulePointer = 40;
  public static final int IConceptSwitchCase = 41;
  public static final int ILinkAccess = 42;
  public static final int ILinkAccessQualifier = 43;
  public static final int ILinkAccessQualifierContainer = 44;
  public static final int ILinkQualifier = 45;
  public static final int IPropertyQualifier = 46;
  public static final int IRefConceptArg = 47;
  public static final int IReferenceOperation = 48;
  public static final int IfInstanceOfStatement = 49;
  public static final int IfInstanceOfVarReference = 50;
  public static final int IfInstanceOfVariable = 51;
  public static final int LanguageId = 52;
  public static final int LanguageIdentity = 53;
  public static final int LanguageIdentityBySourceModule = 54;
  public static final int LanguageRefExpression = 55;
  public static final int LanguageReferenceExpression = 56;
  public static final int LinkAttributeQualifier = 57;
  public static final int LinkIdRefExpression = 58;
  public static final int LinkList_AddNewChildOperation = 59;
  public static final int LinkNameRefExpression = 60;
  public static final int LinkQualifier = 61;
  public static final int LinkRefExpression = 62;
  public static final int LinkRefQualifier = 63;
  public static final int Link_SetNewChildOperation = 64;
  public static final int Link_SetTargetOperation = 65;
  public static final int ModelReferenceExpression = 66;
  public static final int Model_AddRootOperation = 67;
  public static final int Model_CreateNewNodeOperation = 68;
  public static final int Model_CreateNewRootNodeOperation = 69;
  public static final int Model_GetLongNameOperation = 70;
  public static final int Model_GetModule = 71;
  public static final int Model_NodesIncludingImportedOperation = 72;
  public static final int Model_NodesOperation = 73;
  public static final int Model_RootsIncludingImportedOperation = 74;
  public static final int Model_RootsOperation = 75;
  public static final int ModuleIdentity = 76;
  public static final int ModulePointer = 77;
  public static final int ModuleRefExpression = 78;
  public static final int ModuleReferenceExpression = 79;
  public static final int NodeAttributeQualifier = 80;
  public static final int NodePointerExpression = 81;
  public static final int NodeRefExpression = 82;
  public static final int Node_ConceptMethodCall = 83;
  public static final int Node_ContainingLinkOperation = 84;
  public static final int Node_CopyOperation = 85;
  public static final int Node_DeleteOperation = 86;
  public static final int Node_DetachOperation = 87;
  public static final int Node_GetAllSiblingsOperation = 88;
  public static final int Node_GetAncestorOperation = 89;
  public static final int Node_GetAncestorsOperation = 90;
  public static final int Node_GetChildrenAndChildAttributesOperation = 91;
  public static final int Node_GetChildrenOperation = 92;
  public static final int Node_GetConceptOperation = 93;
  public static final int Node_GetContainingLinkOperation = 94;
  public static final int Node_GetContainingRoleOperation = 95;
  public static final int Node_GetContainingRootOperation = 96;
  public static final int Node_GetDescendantsOperation = 97;
  public static final int Node_GetIndexInParentOperation = 98;
  public static final int Node_GetModelOperation = 99;
  public static final int Node_GetNextSiblingOperation = 100;
  public static final int Node_GetNextSiblingsOperation = 101;
  public static final int Node_GetParentOperation = 102;
  public static final int Node_GetPrevSiblingOperation = 103;
  public static final int Node_GetPrevSiblingsOperation = 104;
  public static final int Node_GetReferenceOperation = 105;
  public static final int Node_GetReferencesOperation = 106;
  public static final int Node_GetReferentSearchScopeOperation = 107;
  public static final int Node_GetSConceptOperation = 108;
  public static final int Node_InsertNewNextSiblingOperation = 109;
  public static final int Node_InsertNewPrevSiblingOperation = 110;
  public static final int Node_InsertNextSiblingOperation = 111;
  public static final int Node_InsertPrevSiblingOperation = 112;
  public static final int Node_IsAttributeOperation = 113;
  public static final int Node_IsInstanceOfOperation = 114;
  public static final int Node_IsNotNullOperation = 115;
  public static final int Node_IsNullOperation = 116;
  public static final int Node_IsRoleOperation = 117;
  public static final int Node_PointerOperation = 118;
  public static final int Node_ReplaceWithAnotherOperation = 119;
  public static final int Node_ReplaceWithNewOperation = 120;
  public static final int OfConceptOperation = 121;
  public static final int OperationParm_Concept = 122;
  public static final int OperationParm_ConceptList = 123;
  public static final int OperationParm_Inclusion = 124;
  public static final int OperationParm_LinkQualifier = 125;
  public static final int OperationParm_Root = 126;
  public static final int OperationParm_SameMetaLevel = 127;
  public static final int OperationParm_StopConceptList = 128;
  public static final int PoundExpression = 129;
  public static final int PropertyAttributeQualifier = 130;
  public static final int PropertyId = 131;
  public static final int PropertyIdRefExpression = 132;
  public static final int PropertyIdentity = 133;
  public static final int PropertyNameRefExpression = 134;
  public static final int PropertyQualifier = 135;
  public static final int Property_HasValue_Enum = 136;
  public static final int Property_HasValue_Simple = 137;
  public static final int Property_RemoveOperation = 138;
  public static final int Property_SetOperation = 139;
  public static final int RefConcept_Reference = 140;
  public static final int ReferenceLinkId = 141;
  public static final int Reference_ContainingLinkOperation = 142;
  public static final int Reference_GetLinkDeclarationOperation = 143;
  public static final int Reference_GetResolveInfo = 144;
  public static final int Reference_GetRoleOperation = 145;
  public static final int Reference_GetTargetOperation = 146;
  public static final int SConceptOperation = 147;
  public static final int SConceptType = 148;
  public static final int SConceptTypeCastExpression = 149;
  public static final int SConceptTypeLiteral = 150;
  public static final int SEnumMemberOperation = 151;
  public static final int SEnumMemberType = 152;
  public static final int SEnumOperation = 153;
  public static final int SEnumOperationInvocation = 154;
  public static final int SEnum_MemberForNameOperation = 155;
  public static final int SEnum_MemberForValueOperation = 156;
  public static final int SEnum_MemberOperation = 157;
  public static final int SEnum_MembersOperation = 158;
  public static final int SLinkAccess = 159;
  public static final int SLinkImplicitSelect = 160;
  public static final int SLinkListAccess = 161;
  public static final int SModelType = 162;
  public static final int SNodeCreator = 163;
  public static final int SNodeListCreator = 164;
  public static final int SNodeListType = 165;
  public static final int SNodeOperation = 166;
  public static final int SNodeType = 167;
  public static final int SNodeTypeCastExpression = 168;
  public static final int SPropertyAccess = 169;
  public static final int SReferenceType = 170;
  public static final int SearchScopeType = 171;
  public static final int SearchScope_ContainsOperation = 172;
  public static final int SemanticDowncastExpression = 173;
  public static final int SubconceptCase = 174;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L);
    builder.put(0x500fe561b6da3df1L, AbstractLanguageIdentity);
    builder.put(0x319fd776da5d8e3cL, AbstractNodeRefExpression);
    builder.put(0x10a61b7ea2aL, AbstractOperationParameter);
    builder.put(0x2143399c0554e687L, AbstractTypeCastExpression);
    builder.put(0x74cb131f5923b6f1L, AggregationIdentity);
    builder.put(0x58ea5217b045c8b0L, AllAttributeQualifier);
    builder.put(0x7b0da3c650be8558L, AsNodeOperation);
    builder.put(0x4a4d7215f163131L, AsSConcept);
    builder.put(0x74cb131f5923b6f2L, AssociationIdentity);
    builder.put(0x58ea5217b045a3b2L, AttributeAccess);
    builder.put(0x58ea5217b045b9abL, AttributeQualifier);
    builder.put(0x2399a155048244c5L, BootstrapAwareMetaObject);
    builder.put(0x9d98713f24a0e5bL, ChildAttributeQualifier);
    builder.put(0x84baf20c71f8a79L, ChildNodeRefExpression);
    builder.put(0x5f5952af8856be80L, ConceptAliasOperation);
    builder.put(0x73bd24cca4f91254L, ConceptFqNameRefExpression);
    builder.put(0x5fea1eb9fefb6fe7L, ConceptId);
    builder.put(0x24b2bf7ce180eb54L, ConceptIdRefExpression);
    builder.put(0x5fea1eb9fefb4642L, ConceptIdentity);
    builder.put(0x2d529bfb0e7c87e5L, ConceptMemberIdentity);
    builder.put(0x110f9b63680L, ConceptNodeType);
    builder.put(0x110f9eb64c6L, ConceptRefExpression);
    builder.put(0x10cd05c601dL, ConceptReference);
    builder.put(0x5f5952af8862fd1cL, ConceptShortDescriptionOperation);
    builder.put(0x527e98a73771f42dL, ConceptSwitchStatement);
    builder.put(0x11331e18cdcL, Concept_GetAllSubConcepts);
    builder.put(0x112d8bf5d03L, Concept_GetAllSuperConcepts);
    builder.put(0x11296bd8374L, Concept_GetDirectSuperConcepts);
    builder.put(0x110f41acfb7L, Concept_IsExactlyOperation);
    builder.put(0x112bf601180L, Concept_IsSubConceptOfOperation);
    builder.put(0x112bf289d94L, Concept_IsSuperConceptOfOperation);
    builder.put(0x11331ad1f2aL, Concept_NewInstance);
    builder.put(0x74cb131f5923b6e7L, ContainmentLinkId);
    builder.put(0x1091e6212fdL, EnumMemberReference);
    builder.put(0x60c7f83bafd83b5bL, EnumMemberValueRefExpression);
    builder.put(0x120c01735d3L, EnumMember_NameOperation);
    builder.put(0x120bff92dbeL, EnumMember_ValueOperation);
    builder.put(0x11dbead8683L, EqualsStructurallyExpression);
    builder.put(0x53cfca750a909c64L, ExactConceptCase);
    builder.put(0x73246de9adeca173L, GeneratorIdentity);
    builder.put(0x73246de9adecb80dL, GeneratorModulePointer);
    builder.put(0x53cfca750a909c96L, IConceptSwitchCase);
    builder.put(0x37d97a5712d396cbL, ILinkAccess);
    builder.put(0x1188696e5f6L, ILinkAccessQualifier);
    builder.put(0x312a67f61731e269L, ILinkAccessQualifierContainer);
    builder.put(0x26b292a5afc7ccaaL, ILinkQualifier);
    builder.put(0x26b292a5afc7ccabL, IPropertyQualifier);
    builder.put(0x118f285e4f7L, IRefConceptArg);
    builder.put(0x157abf675bd53df2L, IReferenceOperation);
    builder.put(0x1a228da1357e4a44L, IfInstanceOfStatement);
    builder.put(0x1a228da1357fca73L, IfInstanceOfVarReference);
    builder.put(0x1a228da1357e4a49L, IfInstanceOfVariable);
    builder.put(0x312abca18ab8c8c0L, LanguageId);
    builder.put(0x312abca18ab8c318L, LanguageIdentity);
    builder.put(0x2246d35517e858c2L, LanguageIdentityBySourceModule);
    builder.put(0x3e6a40ba27dd70f3L, LanguageRefExpression);
    builder.put(0x38130dc4e3dc174aL, LanguageReferenceExpression);
    builder.put(0x58ea5217b045b9b7L, LinkAttributeQualifier);
    builder.put(0x24b2bf7ce1957615L, LinkIdRefExpression);
    builder.put(0x1093caead54L, LinkList_AddNewChildOperation);
    builder.put(0x48e6e2695189e59aL, LinkNameRefExpression);
    builder.put(0x26b292a5afc7ccacL, LinkQualifier);
    builder.put(0x11d88b27d15L, LinkRefExpression);
    builder.put(0x11886c4bac0L, LinkRefQualifier);
    builder.put(0x109233dbca1L, Link_SetNewChildOperation);
    builder.put(0x1099887af60L, Link_SetTargetOperation);
    builder.put(0x7c3f2da20e92b62L, ModelReferenceExpression);
    builder.put(0x118e7faea40L, Model_AddRootOperation);
    builder.put(0x10a2e210544L, Model_CreateNewNodeOperation);
    builder.put(0x10fa1ac23f2L, Model_CreateNewRootNodeOperation);
    builder.put(0x11a3152e18bL, Model_GetLongNameOperation);
    builder.put(0x61168e34226eec71L, Model_GetModule);
    builder.put(0x1135326811cL, Model_NodesIncludingImportedOperation);
    builder.put(0x110b8590897L, Model_NodesOperation);
    builder.put(0x111d5999a91L, Model_RootsIncludingImportedOperation);
    builder.put(0x110b7dcc9bcL, Model_RootsOperation);
    builder.put(0x5ef5a1e85338e1eL, ModuleIdentity);
    builder.put(0x5ef5a1e853388b3L, ModulePointer);
    builder.put(0x1749acf3d038bbe2L, ModuleRefExpression);
    builder.put(0x38130dc4e3db5af1L, ModuleReferenceExpression);
    builder.put(0x58ea5217b045b9b5L, NodeAttributeQualifier);
    builder.put(0x195fd0576ac9bb49L, NodePointerExpression);
    builder.put(0x11be716563cL, NodeRefExpression);
    builder.put(0x1129a43046bL, Node_ConceptMethodCall);
    builder.put(0x68251cf9dbe13ffcL, Node_ContainingLinkOperation);
    builder.put(0x10a646d8514L, Node_CopyOperation);
    builder.put(0x1097542784fL, Node_DeleteOperation);
    builder.put(0x11dfede6ec0L, Node_DetachOperation);
    builder.put(0x10ab97e0a94L, Node_GetAllSiblingsOperation);
    builder.put(0x110bd4e0067L, Node_GetAncestorOperation);
    builder.put(0x1112390be59L, Node_GetAncestorsOperation);
    builder.put(0x6cbc725f4b35314cL, Node_GetChildrenAndChildAttributesOperation);
    builder.put(0x110c2e679e7L, Node_GetChildrenOperation);
    builder.put(0x110f3e65fdcL, Node_GetConceptOperation);
    builder.put(0x50c63f2cd5142697L, Node_GetContainingLinkOperation);
    builder.put(0x1b35e18a1a3b2c9aL, Node_GetContainingRoleOperation);
    builder.put(0x110b78550e8L, Node_GetContainingRootOperation);
    builder.put(0x110b73c3484L, Node_GetDescendantsOperation);
    builder.put(0x1128be3ca6aL, Node_GetIndexInParentOperation);
    builder.put(0x10a2e126334L, Node_GetModelOperation);
    builder.put(0x10a3ea0a40dL, Node_GetNextSiblingOperation);
    builder.put(0x10ab957e8bbL, Node_GetNextSiblingsOperation);
    builder.put(0x109563e6169L, Node_GetParentOperation);
    builder.put(0x10a3e9fedc7L, Node_GetPrevSiblingOperation);
    builder.put(0x10ab975b657L, Node_GetPrevSiblingsOperation);
    builder.put(0x32187d80f5b88800L, Node_GetReferenceOperation);
    builder.put(0x798c0d67da9045abL, Node_GetReferencesOperation);
    builder.put(0x11c530706b2L, Node_GetReferentSearchScopeOperation);
    builder.put(0x6771eac6c5cbe7d2L, Node_GetSConceptOperation);
    builder.put(0x10964e26717L, Node_InsertNewNextSiblingOperation);
    builder.put(0x10a2d494062L, Node_InsertNewPrevSiblingOperation);
    builder.put(0x10a2d76e31eL, Node_InsertNextSiblingOperation);
    builder.put(0x10a2d77d0e1L, Node_InsertPrevSiblingOperation);
    builder.put(0x118c2f5b5f6L, Node_IsAttributeOperation);
    builder.put(0x10956bb6029L, Node_IsInstanceOfOperation);
    builder.put(0x110e123bce7L, Node_IsNotNullOperation);
    builder.put(0x110e0974e46L, Node_IsNullOperation);
    builder.put(0x10a67578ddeL, Node_IsRoleOperation);
    builder.put(0x4604033d54faa023L, Node_PointerOperation);
    builder.put(0x10975273750L, Node_ReplaceWithAnotherOperation);
    builder.put(0x10965697d7aL, Node_ReplaceWithNewOperation);
    builder.put(0x412437525e297780L, OfConceptOperation);
    builder.put(0x10a61caab68L, OperationParm_Concept);
    builder.put(0x10cd05bec71L, OperationParm_ConceptList);
    builder.put(0x10a61bacc13L, OperationParm_Inclusion);
    builder.put(0x47bb2de70d00ff8cL, OperationParm_LinkQualifier);
    builder.put(0x10a61c4f312L, OperationParm_Root);
    builder.put(0x155fb7143719d578L, OperationParm_SameMetaLevel);
    builder.put(0x190735f308e2250bL, OperationParm_StopConceptList);
    builder.put(0x11885c0d945L, PoundExpression);
    builder.put(0x58ea5217b045c9b9L, PropertyAttributeQualifier);
    builder.put(0x5fea1eb9fefc235cL, PropertyId);
    builder.put(0x24b2bf7ce1a42fa0L, PropertyIdRefExpression);
    builder.put(0x5fea1eb9fefb4617L, PropertyIdentity);
    builder.put(0x48e6e269518c89f7L, PropertyNameRefExpression);
    builder.put(0x26b292a5afc7ccadL, PropertyQualifier);
    builder.put(0x10add1ded2bL, Property_HasValue_Enum);
    builder.put(0x10ae2053294L, Property_HasValue_Simple);
    builder.put(0x11aff7f2bb2L, Property_RemoveOperation);
    builder.put(0x1091d8a1d53L, Property_SetOperation);
    builder.put(0x1120c45902cL, RefConcept_Reference);
    builder.put(0x74cb131f5923b6ecL, ReferenceLinkId);
    builder.put(0x289db59e00eee79dL, Reference_ContainingLinkOperation);
    builder.put(0x157abf675bd53debL, Reference_GetLinkDeclarationOperation);
    builder.put(0x4f37053c240837e1L, Reference_GetResolveInfo);
    builder.put(0x4efeb22247ff02a7L, Reference_GetRoleOperation);
    builder.put(0x393cc52c868a600aL, Reference_GetTargetOperation);
    builder.put(0x5f5952af8843faf9L, SConceptOperation);
    builder.put(0x5cab42cd97571ceeL, SConceptType);
    builder.put(0x1871b2e3b0ef0078L, SConceptTypeCastExpression);
    builder.put(0x4bf20760d53f89eaL, SConceptTypeLiteral);
    builder.put(0x120f244ef53L, SEnumMemberOperation);
    builder.put(0x120bfe51421L, SEnumMemberType);
    builder.put(0x120ed37273dL, SEnumOperation);
    builder.put(0x120ed32e98bL, SEnumOperationInvocation);
    builder.put(0x120ed37e60cL, SEnum_MemberForNameOperation);
    builder.put(0x120ed37e64eL, SEnum_MemberForValueOperation);
    builder.put(0x120ed37e691L, SEnum_MemberOperation);
    builder.put(0x120ed37e6b4L, SEnum_MembersOperation);
    builder.put(0x108f96ea2caL, SLinkAccess);
    builder.put(0x316f884c72a4157dL, SLinkImplicitSelect);
    builder.put(0x108f970c119L, SLinkListAccess);
    builder.put(0x10a2d94c0cdL, SModelType);
    builder.put(0x112e36f7135L, SNodeCreator);
    builder.put(0x10ab923b94aL, SNodeListCreator);
    builder.put(0x10aae26be32L, SNodeListType);
    builder.put(0x1090ea2ebacL, SNodeOperation);
    builder.put(0x108f968b3caL, SNodeType);
    builder.put(0x10975850da7L, SNodeTypeCastExpression);
    builder.put(0x108f96cca6fL, SPropertyAccess);
    builder.put(0x798c0d67da9d2175L, SReferenceType);
    builder.put(0x11c52ebfbe2L, SearchScopeType);
    builder.put(0x11c536d2503L, SearchScope_ContainsOperation);
    builder.put(0x10aaf6d7435L, SemanticDowncastExpression);
    builder.put(0x527e98a73771f432L, SubconceptCase);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
