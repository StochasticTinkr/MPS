package jetbrains.mps.lang.smodel.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractNodeRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractOperationParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractTypeCastExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AggregationIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AllAttributeQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AsNodeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AsSConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssociationIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributeAccess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributeQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BootstrapAwareMetaObject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CheckedModuleQualifiedName = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CheckedModuleReference = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ChildAttributeQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ChildNodeRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptAliasOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFqNameRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptIdRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptMemberIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptNodeType = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ConceptRefExpression = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ConceptReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptShortDescriptionOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptSwitchStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Concept_GetAllSubConcepts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Concept_GetAllSuperConcepts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Concept_GetDirectSuperConcepts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Concept_GetHierarchy = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_Concept_IsExactlyOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Concept_IsSubConceptOfOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Concept_IsSuperConceptOfOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Concept_NewInstance = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ContainmentLinkId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumMemberReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumMemberValueRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumMember_NameOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumMember_ValueOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EqualsStructurallyExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExactConceptCase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorModulePointer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IConceptSwitchCase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILinkAccess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILinkAccessQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILinkAccessQualifierContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILinkQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IPropertyQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IRefConceptArg = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IReferenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfInstanceOfStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfInstanceOfVarReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfInstanceOfVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LanguageId = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c8c0L, 0x312abca18ab8ccd7L, "namespace"), MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c8c0L, 0x312abca18ab8ccd8L, "languageId"), MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c8c0L, 0x312abca18ab8ccd9L, "version")).create();
  private final ConceptPresentation props_LanguageIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LanguageRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LanguageReferenceExpression = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_LinkAttributeQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkIdRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkList_AddNewChildOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkNameRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkRefQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Link_SetNewChildOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Link_SetTargetOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelReferenceExpression = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x7c3f2da20e92b62L, 0x7c3f2da20e92b66L, "name"), MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x7c3f2da20e92b62L, 0x7c3f2da20e93b6fL, "stereotype"), MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x7c3f2da20e92b62L, 0x7c3f2da20e98892L, "fqName")).create();
  private final ConceptPresentation props_Model_AddRootOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Model_CreateNewNodeOperation = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2e210544L, 0x10a2e23ae30L, "concept")).create();
  private final ConceptPresentation props_Model_CreateNewRootNodeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Model_GetLongNameOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Model_GetModule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Model_NodesIncludingImportedOperation = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1135326811cL, 0x1135326811eL, "concept")).create();
  private final ConceptPresentation props_Model_NodesOperation = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110b8590897L, 0x110b8590898L, "concept")).create();
  private final ConceptPresentation props_Model_RootsIncludingImportedOperation = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x111d5999a91L, 0x111d5999a92L, "concept")).create();
  private final ConceptPresentation props_Model_RootsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModuleIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModulePointer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModuleRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModuleReferenceExpression = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_NodeAttributeQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodePointerExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeRefExpression = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_Node_ConceptMethodCall = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1129a43046bL, 0x27990abcdcff2f1dL, "directCall")).create();
  private final ConceptPresentation props_Node_CopyOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_DeleteOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_DetachOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetAllSiblingsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetAncestorOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetAncestorsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetChildrenAndChildAttributesOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetChildrenOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetConceptOperation = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_Node_GetContainingLinkOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetContainingRoleOperation = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_Node_GetContainingRootOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetDescendantsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetIndexInParentOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetModelOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetNextSiblingOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetNextSiblingsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetParentOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetPrevSiblingOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetPrevSiblingsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetReferenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetReferencesOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetReferentSearchScopeOperation = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_Node_GetSConceptOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_InsertNewNextSiblingOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_InsertNewPrevSiblingOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_InsertNextSiblingOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_InsertPrevSiblingOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_IsAttributeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_IsInstanceOfOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_IsNotNullOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_IsNullOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_IsRoleOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_PointerOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_ReplaceWithAnotherOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_ReplaceWithNewOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OfConceptOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationParm_Concept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationParm_ConceptList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationParm_Inclusion = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationParm_LinkQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationParm_Root = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationParm_SameMetaLevel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationParm_StopConceptList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PoundExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyAttributeQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyIdRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyNameRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Property_HasValue_Enum = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Property_HasValue_Simple = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Property_RemoveOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Property_SetOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefConcept_Reference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceLinkId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Reference_GetLinkDeclarationOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Reference_GetResolveInfo = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Reference_GetRoleOperation = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_Reference_GetTargetOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SConceptOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SConceptType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SConceptTypeCastExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SEnumMemberOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SEnumMemberType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SEnumOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SEnumOperationInvocation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SEnum_MemberForNameOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SEnum_MemberForValueOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SEnum_MemberOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SEnum_MembersOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SLinkAccess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SLinkImplicitSelect = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SLinkListAccess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SModelType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SNodeCreator = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_SNodeListCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SNodeListType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SNodeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SNodeType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SNodeTypeCastExpression = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10975850da7L, 0x12067573bc7L, "asCast"), MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10975850da7L, 0x10975873562L, "concept_old")).create();
  private final ConceptPresentation props_SPropertyAccess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SReferenceType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SearchScopeType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SearchScope_ContainsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SemanticDowncastExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubconceptCase = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractNodeRefExpression;
      case 1:
        return props_AbstractOperationParameter;
      case 2:
        return props_AbstractTypeCastExpression;
      case 3:
        return props_AggregationIdentity;
      case 4:
        return props_AllAttributeQualifier;
      case 5:
        return props_AsNodeOperation;
      case 6:
        return props_AsSConcept;
      case 7:
        return props_AssociationIdentity;
      case 8:
        return props_AttributeAccess;
      case 9:
        return props_AttributeQualifier;
      case 10:
        return props_BootstrapAwareMetaObject;
      case 11:
        return props_CheckedModuleQualifiedName;
      case 12:
        return props_CheckedModuleReference;
      case 13:
        return props_ChildAttributeQualifier;
      case 14:
        return props_ChildNodeRefExpression;
      case 15:
        return props_ConceptAliasOperation;
      case 16:
        return props_ConceptFqNameRefExpression;
      case 17:
        return props_ConceptId;
      case 18:
        return props_ConceptIdRefExpression;
      case 19:
        return props_ConceptIdentity;
      case 20:
        return props_ConceptMemberIdentity;
      case 21:
        return props_ConceptNodeType;
      case 22:
        return props_ConceptRefExpression;
      case 23:
        return props_ConceptReference;
      case 24:
        return props_ConceptShortDescriptionOperation;
      case 25:
        return props_ConceptSwitchStatement;
      case 26:
        return props_Concept_GetAllSubConcepts;
      case 27:
        return props_Concept_GetAllSuperConcepts;
      case 28:
        return props_Concept_GetDirectSuperConcepts;
      case 29:
        return props_Concept_GetHierarchy;
      case 30:
        return props_Concept_IsExactlyOperation;
      case 31:
        return props_Concept_IsSubConceptOfOperation;
      case 32:
        return props_Concept_IsSuperConceptOfOperation;
      case 33:
        return props_Concept_NewInstance;
      case 34:
        return props_ContainmentLinkId;
      case 35:
        return props_EnumMemberReference;
      case 36:
        return props_EnumMemberValueRefExpression;
      case 37:
        return props_EnumMember_NameOperation;
      case 38:
        return props_EnumMember_ValueOperation;
      case 39:
        return props_EqualsStructurallyExpression;
      case 40:
        return props_ExactConceptCase;
      case 41:
        return props_GeneratorIdentity;
      case 42:
        return props_GeneratorModulePointer;
      case 43:
        return props_IConceptSwitchCase;
      case 44:
        return props_ILinkAccess;
      case 45:
        return props_ILinkAccessQualifier;
      case 46:
        return props_ILinkAccessQualifierContainer;
      case 47:
        return props_ILinkQualifier;
      case 48:
        return props_IPropertyQualifier;
      case 49:
        return props_IRefConceptArg;
      case 50:
        return props_IReferenceOperation;
      case 51:
        return props_IfInstanceOfStatement;
      case 52:
        return props_IfInstanceOfVarReference;
      case 53:
        return props_IfInstanceOfVariable;
      case 54:
        return props_LanguageId;
      case 55:
        return props_LanguageIdentity;
      case 56:
        return props_LanguageRefExpression;
      case 57:
        return props_LanguageReferenceExpression;
      case 58:
        return props_LinkAttributeQualifier;
      case 59:
        return props_LinkIdRefExpression;
      case 60:
        return props_LinkList_AddNewChildOperation;
      case 61:
        return props_LinkNameRefExpression;
      case 62:
        return props_LinkQualifier;
      case 63:
        return props_LinkRefExpression;
      case 64:
        return props_LinkRefQualifier;
      case 65:
        return props_Link_SetNewChildOperation;
      case 66:
        return props_Link_SetTargetOperation;
      case 67:
        return props_ModelReferenceExpression;
      case 68:
        return props_Model_AddRootOperation;
      case 69:
        return props_Model_CreateNewNodeOperation;
      case 70:
        return props_Model_CreateNewRootNodeOperation;
      case 71:
        return props_Model_GetLongNameOperation;
      case 72:
        return props_Model_GetModule;
      case 73:
        return props_Model_NodesIncludingImportedOperation;
      case 74:
        return props_Model_NodesOperation;
      case 75:
        return props_Model_RootsIncludingImportedOperation;
      case 76:
        return props_Model_RootsOperation;
      case 77:
        return props_ModuleIdentity;
      case 78:
        return props_ModulePointer;
      case 79:
        return props_ModuleRefExpression;
      case 80:
        return props_ModuleReferenceExpression;
      case 81:
        return props_NodeAttributeQualifier;
      case 82:
        return props_NodePointerExpression;
      case 83:
        return props_NodeRefExpression;
      case 84:
        return props_Node_ConceptMethodCall;
      case 85:
        return props_Node_CopyOperation;
      case 86:
        return props_Node_DeleteOperation;
      case 87:
        return props_Node_DetachOperation;
      case 88:
        return props_Node_GetAllSiblingsOperation;
      case 89:
        return props_Node_GetAncestorOperation;
      case 90:
        return props_Node_GetAncestorsOperation;
      case 91:
        return props_Node_GetChildrenAndChildAttributesOperation;
      case 92:
        return props_Node_GetChildrenOperation;
      case 93:
        return props_Node_GetConceptOperation;
      case 94:
        return props_Node_GetContainingLinkOperation;
      case 95:
        return props_Node_GetContainingRoleOperation;
      case 96:
        return props_Node_GetContainingRootOperation;
      case 97:
        return props_Node_GetDescendantsOperation;
      case 98:
        return props_Node_GetIndexInParentOperation;
      case 99:
        return props_Node_GetModelOperation;
      case 100:
        return props_Node_GetNextSiblingOperation;
      case 101:
        return props_Node_GetNextSiblingsOperation;
      case 102:
        return props_Node_GetParentOperation;
      case 103:
        return props_Node_GetPrevSiblingOperation;
      case 104:
        return props_Node_GetPrevSiblingsOperation;
      case 105:
        return props_Node_GetReferenceOperation;
      case 106:
        return props_Node_GetReferencesOperation;
      case 107:
        return props_Node_GetReferentSearchScopeOperation;
      case 108:
        return props_Node_GetSConceptOperation;
      case 109:
        return props_Node_InsertNewNextSiblingOperation;
      case 110:
        return props_Node_InsertNewPrevSiblingOperation;
      case 111:
        return props_Node_InsertNextSiblingOperation;
      case 112:
        return props_Node_InsertPrevSiblingOperation;
      case 113:
        return props_Node_IsAttributeOperation;
      case 114:
        return props_Node_IsInstanceOfOperation;
      case 115:
        return props_Node_IsNotNullOperation;
      case 116:
        return props_Node_IsNullOperation;
      case 117:
        return props_Node_IsRoleOperation;
      case 118:
        return props_Node_PointerOperation;
      case 119:
        return props_Node_ReplaceWithAnotherOperation;
      case 120:
        return props_Node_ReplaceWithNewOperation;
      case 121:
        return props_OfConceptOperation;
      case 122:
        return props_OperationParm_Concept;
      case 123:
        return props_OperationParm_ConceptList;
      case 124:
        return props_OperationParm_Inclusion;
      case 125:
        return props_OperationParm_LinkQualifier;
      case 126:
        return props_OperationParm_Root;
      case 127:
        return props_OperationParm_SameMetaLevel;
      case 128:
        return props_OperationParm_StopConceptList;
      case 129:
        return props_PoundExpression;
      case 130:
        return props_PropertyAttributeQualifier;
      case 131:
        return props_PropertyId;
      case 132:
        return props_PropertyIdRefExpression;
      case 133:
        return props_PropertyIdentity;
      case 134:
        return props_PropertyNameRefExpression;
      case 135:
        return props_PropertyQualifier;
      case 136:
        return props_Property_HasValue_Enum;
      case 137:
        return props_Property_HasValue_Simple;
      case 138:
        return props_Property_RemoveOperation;
      case 139:
        return props_Property_SetOperation;
      case 140:
        return props_RefConcept_Reference;
      case 141:
        return props_ReferenceLinkId;
      case 142:
        return props_Reference_GetLinkDeclarationOperation;
      case 143:
        return props_Reference_GetResolveInfo;
      case 144:
        return props_Reference_GetRoleOperation;
      case 145:
        return props_Reference_GetTargetOperation;
      case 146:
        return props_SConceptOperation;
      case 147:
        return props_SConceptType;
      case 148:
        return props_SConceptTypeCastExpression;
      case 149:
        return props_SEnumMemberOperation;
      case 150:
        return props_SEnumMemberType;
      case 151:
        return props_SEnumOperation;
      case 152:
        return props_SEnumOperationInvocation;
      case 153:
        return props_SEnum_MemberForNameOperation;
      case 154:
        return props_SEnum_MemberForValueOperation;
      case 155:
        return props_SEnum_MemberOperation;
      case 156:
        return props_SEnum_MembersOperation;
      case 157:
        return props_SLinkAccess;
      case 158:
        return props_SLinkImplicitSelect;
      case 159:
        return props_SLinkListAccess;
      case 160:
        return props_SModelType;
      case 161:
        return props_SNodeCreator;
      case 162:
        return props_SNodeListCreator;
      case 163:
        return props_SNodeListType;
      case 164:
        return props_SNodeOperation;
      case 165:
        return props_SNodeType;
      case 166:
        return props_SNodeTypeCastExpression;
      case 167:
        return props_SPropertyAccess;
      case 168:
        return props_SReferenceType;
      case 169:
        return props_SearchScopeType;
      case 170:
        return props_SearchScope_ContainsOperation;
      case 171:
        return props_SemanticDowncastExpression;
      case 172:
        return props_SubconceptCase;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
