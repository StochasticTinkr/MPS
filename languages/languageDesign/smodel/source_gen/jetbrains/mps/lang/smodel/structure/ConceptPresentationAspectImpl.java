package jetbrains.mps.lang.smodel.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractNodeRefExpression = new ConceptPresentationBuilder().shortDesc("abstract node reference expression").create();
  private final ConceptPresentation props_AbstractOperationParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractTypeCastExpression = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x2143399c0554e687L, 0x5d71a86e0b67ce04L, "concept")).create();
  private final ConceptPresentation props_AggregationIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AllAttributeQualifier = new ConceptPresentationBuilder().shortDesc("all attributes").create();
  private final ConceptPresentation props_AsNodeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AsSConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AssociationIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributeAccess = new ConceptPresentationBuilder().shortDesc("attribute access").create();
  private final ConceptPresentation props_AttributeQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BootstrapAwareMetaObject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ChildAttributeQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ChildNodeRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptAliasOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFqNameRefExpression = new ConceptPresentationBuilder().shortDesc("full qualified name").create();
  private final ConceptPresentation props_ConceptId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptIdRefExpression = new ConceptPresentationBuilder().shortDesc("openapi SAbstractConcept").create();
  private final ConceptPresentation props_ConceptIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptMemberIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptNodeType = new ConceptPresentationBuilder().deprecated(true).shortDesc("node<AbstractConceptDeclaration>").create();
  private final ConceptPresentation props_ConceptRefExpression = new ConceptPresentationBuilder().deprecated(true).shortDesc("concept declaration node").create();
  private final ConceptPresentation props_ConceptReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptShortDescriptionOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptSwitchStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Concept_GetAllSubConcepts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Concept_GetAllSuperConcepts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Concept_GetDirectSuperConcepts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Concept_GetHierarchy = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_Concept_IsExactlyOperation = new ConceptPresentationBuilder().shortDesc("concept declaration is exactly the same").create();
  private final ConceptPresentation props_Concept_IsSubConceptOfOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Concept_IsSuperConceptOfOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Concept_NewInstance = new ConceptPresentationBuilder().deprecated().shortDesc("create new node").create();
  private final ConceptPresentation props_ContainmentLinkId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumMemberReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumMemberValueRefExpression = new ConceptPresentationBuilder().shortDesc("value").create();
  private final ConceptPresentation props_EnumMember_NameOperation = new ConceptPresentationBuilder().shortDesc("enum member name").create();
  private final ConceptPresentation props_EnumMember_ValueOperation = new ConceptPresentationBuilder().shortDesc("enum member value").create();
  private final ConceptPresentation props_EqualsStructurallyExpression = new ConceptPresentationBuilder().shortDesc("nodes structural equality operation").create();
  private final ConceptPresentation props_ExactConceptCase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorModulePointer = new ConceptPresentationBuilder().shortDesc("As long as there's no runtime identity for generators (like SLanguage for language), GeneratorIdentity doesn't specify any behaviour methods, and we use SModuleReference here.").create();
  private final ConceptPresentation props_IConceptSwitchCase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILinkAccess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILinkAccessQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILinkAccessQualifierContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ILinkQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IPropertyQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IRefConceptArg = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IReferenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfInstanceOfStatement = new ConceptPresentationBuilder().shortDesc("if a node is instance of concept").create();
  private final ConceptPresentation props_IfInstanceOfVarReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfInstanceOfVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LanguageId = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c8c0L, 0x312abca18ab8ccd7L, "namespace"), MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c8c0L, 0x312abca18ab8ccd8L, "languageId"), MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x312abca18ab8c8c0L, 0x312abca18ab8ccd9L, "version")).create();
  private final ConceptPresentation props_LanguageIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LanguageRefExpression = new ConceptPresentationBuilder().shortDesc("Reference to a run-time language").create();
  private final ConceptPresentation props_LanguageReferenceExpression = new ConceptPresentationBuilder().deprecated(true).shortDesc("Access Language module instance").create();
  private final ConceptPresentation props_LinkAttributeQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkIdRefExpression = new ConceptPresentationBuilder().shortDesc("SContainmentLink or SReferenceLink").create();
  private final ConceptPresentation props_LinkList_AddNewChildOperation = new ConceptPresentationBuilder().shortDesc("add new child").create();
  private final ConceptPresentation props_LinkNameRefExpression = new ConceptPresentationBuilder().shortDesc("name").create();
  private final ConceptPresentation props_LinkQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkRefExpression = new ConceptPresentationBuilder().shortDesc("link declaration node").create();
  private final ConceptPresentation props_LinkRefQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Link_SetNewChildOperation = new ConceptPresentationBuilder().shortDesc("set new child").create();
  private final ConceptPresentation props_Link_SetTargetOperation = new ConceptPresentationBuilder().shortDesc("set child or referent").create();
  private final ConceptPresentation props_ModelReferenceExpression = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x7c3f2da20e92b62L, 0x7c3f2da20e92b66L, "name"), MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x7c3f2da20e92b62L, 0x7c3f2da20e93b6fL, "stereotype"), MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x7c3f2da20e92b62L, 0x7c3f2da20e98892L, "fqName")).create();
  private final ConceptPresentation props_Model_AddRootOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Model_CreateNewNodeOperation = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10a2e210544L, 0x10a2e23ae30L, "concept")).create();
  private final ConceptPresentation props_Model_CreateNewRootNodeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Model_GetLongNameOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Model_GetModule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Model_NodesIncludingImportedOperation = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1135326811cL, 0x1135326811eL, "concept")).create();
  private final ConceptPresentation props_Model_NodesOperation = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x110b8590897L, 0x110b8590898L, "concept")).create();
  private final ConceptPresentation props_Model_RootsIncludingImportedOperation = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x111d5999a91L, 0x111d5999a92L, "concept")).create();
  private final ConceptPresentation props_Model_RootsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModuleIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModulePointer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModuleRefExpression = new ConceptPresentationBuilder().shortDesc("reference/pointer to an SModule").create();
  private final ConceptPresentation props_ModuleReferenceExpression = new ConceptPresentationBuilder().deprecated(true).shortDesc("instance of a module from global repository").create();
  private final ConceptPresentation props_NodeAttributeQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodePointerExpression = new ConceptPresentationBuilder().shortDesc("named node pointer").create();
  private final ConceptPresentation props_NodeRefExpression = new ConceptPresentationBuilder().deprecated(true).shortDesc("named node reference").create();
  private final ConceptPresentation props_Node_ConceptMethodCall = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1129a43046bL, 0x27990abcdcff2f1dL, "directCall")).create();
  private final ConceptPresentation props_Node_ContainingLinkOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_CopyOperation = new ConceptPresentationBuilder().shortDesc("creates copy of this node").create();
  private final ConceptPresentation props_Node_DeleteOperation = new ConceptPresentationBuilder().deprecated(true).shortDesc("delete this node").create();
  private final ConceptPresentation props_Node_DetachOperation = new ConceptPresentationBuilder().shortDesc("removes from container").create();
  private final ConceptPresentation props_Node_GetAllSiblingsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetAncestorOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetAncestorsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetChildrenAndChildAttributesOperation = new ConceptPresentationBuilder().shortDesc("children joint with child attributes of certain role").create();
  private final ConceptPresentation props_Node_GetChildrenOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetConceptOperation = new ConceptPresentationBuilder().deprecated(true).shortDesc("node's concept declaration").create();
  private final ConceptPresentation props_Node_GetContainingLinkOperation = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_Node_GetContainingRoleOperation = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_Node_GetContainingRootOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetDescendantsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetIndexInParentOperation = new ConceptPresentationBuilder().shortDesc("gets node's index in parent's collection").create();
  private final ConceptPresentation props_Node_GetModelOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetNextSiblingOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetNextSiblingsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetParentOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetPrevSiblingOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetPrevSiblingsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetReferenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetReferencesOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_GetReferentSearchScopeOperation = new ConceptPresentationBuilder().deprecated(true).shortDesc("obtain referent search scope").create();
  private final ConceptPresentation props_Node_GetSConceptOperation = new ConceptPresentationBuilder().shortDesc("node's concept").create();
  private final ConceptPresentation props_Node_InsertNewNextSiblingOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_InsertNewPrevSiblingOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_InsertNextSiblingOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_InsertPrevSiblingOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_IsAttributeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_IsInstanceOfOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_IsNotNullOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_IsNullOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_IsRoleOperation = new ConceptPresentationBuilder().shortDesc("test role of the node").create();
  private final ConceptPresentation props_Node_PointerOperation = new ConceptPresentationBuilder().shortDesc("persistable pointer to a node").create();
  private final ConceptPresentation props_Node_ReplaceWithAnotherOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Node_ReplaceWithNewOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OfConceptOperation = new ConceptPresentationBuilder().shortDesc("select elements of the specified concept").create();
  private final ConceptPresentation props_OperationParm_Concept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationParm_ConceptList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationParm_Inclusion = new ConceptPresentationBuilder().shortDesc("inclusion").create();
  private final ConceptPresentation props_OperationParm_LinkQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationParm_Root = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationParm_SameMetaLevel = new ConceptPresentationBuilder().shortDesc("same metalevel").create();
  private final ConceptPresentation props_OperationParm_StopConceptList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PoundExpression = new ConceptPresentationBuilder().shortDesc("expression").create();
  private final ConceptPresentation props_PropertyAttributeQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyIdRefExpression = new ConceptPresentationBuilder().shortDesc("openapi SProperty").create();
  private final ConceptPresentation props_PropertyIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyNameRefExpression = new ConceptPresentationBuilder().shortDesc("name").create();
  private final ConceptPresentation props_PropertyQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Property_HasValue_Enum = new ConceptPresentationBuilder().shortDesc("check value of enum property").create();
  private final ConceptPresentation props_Property_HasValue_Simple = new ConceptPresentationBuilder().shortDesc("check value of property").create();
  private final ConceptPresentation props_Property_RemoveOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Property_SetOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefConcept_Reference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceLinkId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Reference_GetLinkDeclarationOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Reference_GetResolveInfo = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Reference_GetRoleOperation = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_Reference_GetTargetOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SConceptOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SConceptType = new ConceptPresentationBuilder().shortDesc("concept type").create();
  private final ConceptPresentation props_SConceptTypeCastExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SConceptTypeLiteral = new ConceptPresentationBuilder().shortDesc("literal of a concept type").create();
  private final ConceptPresentation props_SEnumMemberOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SEnumMemberType = new ConceptPresentationBuilder().shortDesc("enum member type").create();
  private final ConceptPresentation props_SEnumOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SEnumOperationInvocation = new ConceptPresentationBuilder().shortDesc("enum operation").create();
  private final ConceptPresentation props_SEnum_MemberForNameOperation = new ConceptPresentationBuilder().shortDesc("parse enum name").create();
  private final ConceptPresentation props_SEnum_MemberForValueOperation = new ConceptPresentationBuilder().shortDesc("parse enum value").create();
  private final ConceptPresentation props_SEnum_MemberOperation = new ConceptPresentationBuilder().shortDesc("enum member access").create();
  private final ConceptPresentation props_SEnum_MembersOperation = new ConceptPresentationBuilder().shortDesc("members list").create();
  private final ConceptPresentation props_SLinkAccess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SLinkImplicitSelect = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SLinkListAccess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SModelType = new ConceptPresentationBuilder().shortDesc("model type").create();
  private final ConceptPresentation props_SNodeCreator = new ConceptPresentationBuilder().deprecated().shortDesc("create new node").create();
  private final ConceptPresentation props_SNodeListCreator = new ConceptPresentationBuilder().shortDesc("list of (s)nodes").create();
  private final ConceptPresentation props_SNodeListType = new ConceptPresentationBuilder().shortDesc("list of nodes").create();
  private final ConceptPresentation props_SNodeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SNodeType = new ConceptPresentationBuilder().shortDesc("node type").create();
  private final ConceptPresentation props_SNodeTypeCastExpression = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10975850da7L, 0x12067573bc7L, "asCast"), MetaAdapterFactory.getReferenceLink(0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x10975850da7L, 0x10975873562L, "concept_old")).create();
  private final ConceptPresentation props_SPropertyAccess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SReferenceType = new ConceptPresentationBuilder().shortDesc("reference type").create();
  private final ConceptPresentation props_SearchScopeType = new ConceptPresentationBuilder().shortDesc("search scope type").create();
  private final ConceptPresentation props_SearchScope_ContainsOperation = new ConceptPresentationBuilder().shortDesc("test node visibility in scope").create();
  private final ConceptPresentation props_SemanticDowncastExpression = new ConceptPresentationBuilder().shortDesc("downcast to lower semantic level").create();
  private final ConceptPresentation props_SubconceptCase = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractNodeRefExpression:
        return props_AbstractNodeRefExpression;
      case LanguageConceptSwitch.AbstractOperationParameter:
        return props_AbstractOperationParameter;
      case LanguageConceptSwitch.AbstractTypeCastExpression:
        return props_AbstractTypeCastExpression;
      case LanguageConceptSwitch.AggregationIdentity:
        return props_AggregationIdentity;
      case LanguageConceptSwitch.AllAttributeQualifier:
        return props_AllAttributeQualifier;
      case LanguageConceptSwitch.AsNodeOperation:
        return props_AsNodeOperation;
      case LanguageConceptSwitch.AsSConcept:
        return props_AsSConcept;
      case LanguageConceptSwitch.AssociationIdentity:
        return props_AssociationIdentity;
      case LanguageConceptSwitch.AttributeAccess:
        return props_AttributeAccess;
      case LanguageConceptSwitch.AttributeQualifier:
        return props_AttributeQualifier;
      case LanguageConceptSwitch.BootstrapAwareMetaObject:
        return props_BootstrapAwareMetaObject;
      case LanguageConceptSwitch.ChildAttributeQualifier:
        return props_ChildAttributeQualifier;
      case LanguageConceptSwitch.ChildNodeRefExpression:
        return props_ChildNodeRefExpression;
      case LanguageConceptSwitch.ConceptAliasOperation:
        return props_ConceptAliasOperation;
      case LanguageConceptSwitch.ConceptFqNameRefExpression:
        return props_ConceptFqNameRefExpression;
      case LanguageConceptSwitch.ConceptId:
        return props_ConceptId;
      case LanguageConceptSwitch.ConceptIdRefExpression:
        return props_ConceptIdRefExpression;
      case LanguageConceptSwitch.ConceptIdentity:
        return props_ConceptIdentity;
      case LanguageConceptSwitch.ConceptMemberIdentity:
        return props_ConceptMemberIdentity;
      case LanguageConceptSwitch.ConceptNodeType:
        return props_ConceptNodeType;
      case LanguageConceptSwitch.ConceptRefExpression:
        return props_ConceptRefExpression;
      case LanguageConceptSwitch.ConceptReference:
        return props_ConceptReference;
      case LanguageConceptSwitch.ConceptShortDescriptionOperation:
        return props_ConceptShortDescriptionOperation;
      case LanguageConceptSwitch.ConceptSwitchStatement:
        return props_ConceptSwitchStatement;
      case LanguageConceptSwitch.Concept_GetAllSubConcepts:
        return props_Concept_GetAllSubConcepts;
      case LanguageConceptSwitch.Concept_GetAllSuperConcepts:
        return props_Concept_GetAllSuperConcepts;
      case LanguageConceptSwitch.Concept_GetDirectSuperConcepts:
        return props_Concept_GetDirectSuperConcepts;
      case LanguageConceptSwitch.Concept_GetHierarchy:
        return props_Concept_GetHierarchy;
      case LanguageConceptSwitch.Concept_IsExactlyOperation:
        return props_Concept_IsExactlyOperation;
      case LanguageConceptSwitch.Concept_IsSubConceptOfOperation:
        return props_Concept_IsSubConceptOfOperation;
      case LanguageConceptSwitch.Concept_IsSuperConceptOfOperation:
        return props_Concept_IsSuperConceptOfOperation;
      case LanguageConceptSwitch.Concept_NewInstance:
        return props_Concept_NewInstance;
      case LanguageConceptSwitch.ContainmentLinkId:
        return props_ContainmentLinkId;
      case LanguageConceptSwitch.EnumMemberReference:
        return props_EnumMemberReference;
      case LanguageConceptSwitch.EnumMemberValueRefExpression:
        return props_EnumMemberValueRefExpression;
      case LanguageConceptSwitch.EnumMember_NameOperation:
        return props_EnumMember_NameOperation;
      case LanguageConceptSwitch.EnumMember_ValueOperation:
        return props_EnumMember_ValueOperation;
      case LanguageConceptSwitch.EqualsStructurallyExpression:
        return props_EqualsStructurallyExpression;
      case LanguageConceptSwitch.ExactConceptCase:
        return props_ExactConceptCase;
      case LanguageConceptSwitch.GeneratorIdentity:
        return props_GeneratorIdentity;
      case LanguageConceptSwitch.GeneratorModulePointer:
        return props_GeneratorModulePointer;
      case LanguageConceptSwitch.IConceptSwitchCase:
        return props_IConceptSwitchCase;
      case LanguageConceptSwitch.ILinkAccess:
        return props_ILinkAccess;
      case LanguageConceptSwitch.ILinkAccessQualifier:
        return props_ILinkAccessQualifier;
      case LanguageConceptSwitch.ILinkAccessQualifierContainer:
        return props_ILinkAccessQualifierContainer;
      case LanguageConceptSwitch.ILinkQualifier:
        return props_ILinkQualifier;
      case LanguageConceptSwitch.IPropertyQualifier:
        return props_IPropertyQualifier;
      case LanguageConceptSwitch.IRefConceptArg:
        return props_IRefConceptArg;
      case LanguageConceptSwitch.IReferenceOperation:
        return props_IReferenceOperation;
      case LanguageConceptSwitch.IfInstanceOfStatement:
        return props_IfInstanceOfStatement;
      case LanguageConceptSwitch.IfInstanceOfVarReference:
        return props_IfInstanceOfVarReference;
      case LanguageConceptSwitch.IfInstanceOfVariable:
        return props_IfInstanceOfVariable;
      case LanguageConceptSwitch.LanguageId:
        return props_LanguageId;
      case LanguageConceptSwitch.LanguageIdentity:
        return props_LanguageIdentity;
      case LanguageConceptSwitch.LanguageRefExpression:
        return props_LanguageRefExpression;
      case LanguageConceptSwitch.LanguageReferenceExpression:
        return props_LanguageReferenceExpression;
      case LanguageConceptSwitch.LinkAttributeQualifier:
        return props_LinkAttributeQualifier;
      case LanguageConceptSwitch.LinkIdRefExpression:
        return props_LinkIdRefExpression;
      case LanguageConceptSwitch.LinkList_AddNewChildOperation:
        return props_LinkList_AddNewChildOperation;
      case LanguageConceptSwitch.LinkNameRefExpression:
        return props_LinkNameRefExpression;
      case LanguageConceptSwitch.LinkQualifier:
        return props_LinkQualifier;
      case LanguageConceptSwitch.LinkRefExpression:
        return props_LinkRefExpression;
      case LanguageConceptSwitch.LinkRefQualifier:
        return props_LinkRefQualifier;
      case LanguageConceptSwitch.Link_SetNewChildOperation:
        return props_Link_SetNewChildOperation;
      case LanguageConceptSwitch.Link_SetTargetOperation:
        return props_Link_SetTargetOperation;
      case LanguageConceptSwitch.ModelReferenceExpression:
        return props_ModelReferenceExpression;
      case LanguageConceptSwitch.Model_AddRootOperation:
        return props_Model_AddRootOperation;
      case LanguageConceptSwitch.Model_CreateNewNodeOperation:
        return props_Model_CreateNewNodeOperation;
      case LanguageConceptSwitch.Model_CreateNewRootNodeOperation:
        return props_Model_CreateNewRootNodeOperation;
      case LanguageConceptSwitch.Model_GetLongNameOperation:
        return props_Model_GetLongNameOperation;
      case LanguageConceptSwitch.Model_GetModule:
        return props_Model_GetModule;
      case LanguageConceptSwitch.Model_NodesIncludingImportedOperation:
        return props_Model_NodesIncludingImportedOperation;
      case LanguageConceptSwitch.Model_NodesOperation:
        return props_Model_NodesOperation;
      case LanguageConceptSwitch.Model_RootsIncludingImportedOperation:
        return props_Model_RootsIncludingImportedOperation;
      case LanguageConceptSwitch.Model_RootsOperation:
        return props_Model_RootsOperation;
      case LanguageConceptSwitch.ModuleIdentity:
        return props_ModuleIdentity;
      case LanguageConceptSwitch.ModulePointer:
        return props_ModulePointer;
      case LanguageConceptSwitch.ModuleRefExpression:
        return props_ModuleRefExpression;
      case LanguageConceptSwitch.ModuleReferenceExpression:
        return props_ModuleReferenceExpression;
      case LanguageConceptSwitch.NodeAttributeQualifier:
        return props_NodeAttributeQualifier;
      case LanguageConceptSwitch.NodePointerExpression:
        return props_NodePointerExpression;
      case LanguageConceptSwitch.NodeRefExpression:
        return props_NodeRefExpression;
      case LanguageConceptSwitch.Node_ConceptMethodCall:
        return props_Node_ConceptMethodCall;
      case LanguageConceptSwitch.Node_ContainingLinkOperation:
        return props_Node_ContainingLinkOperation;
      case LanguageConceptSwitch.Node_CopyOperation:
        return props_Node_CopyOperation;
      case LanguageConceptSwitch.Node_DeleteOperation:
        return props_Node_DeleteOperation;
      case LanguageConceptSwitch.Node_DetachOperation:
        return props_Node_DetachOperation;
      case LanguageConceptSwitch.Node_GetAllSiblingsOperation:
        return props_Node_GetAllSiblingsOperation;
      case LanguageConceptSwitch.Node_GetAncestorOperation:
        return props_Node_GetAncestorOperation;
      case LanguageConceptSwitch.Node_GetAncestorsOperation:
        return props_Node_GetAncestorsOperation;
      case LanguageConceptSwitch.Node_GetChildrenAndChildAttributesOperation:
        return props_Node_GetChildrenAndChildAttributesOperation;
      case LanguageConceptSwitch.Node_GetChildrenOperation:
        return props_Node_GetChildrenOperation;
      case LanguageConceptSwitch.Node_GetConceptOperation:
        return props_Node_GetConceptOperation;
      case LanguageConceptSwitch.Node_GetContainingLinkOperation:
        return props_Node_GetContainingLinkOperation;
      case LanguageConceptSwitch.Node_GetContainingRoleOperation:
        return props_Node_GetContainingRoleOperation;
      case LanguageConceptSwitch.Node_GetContainingRootOperation:
        return props_Node_GetContainingRootOperation;
      case LanguageConceptSwitch.Node_GetDescendantsOperation:
        return props_Node_GetDescendantsOperation;
      case LanguageConceptSwitch.Node_GetIndexInParentOperation:
        return props_Node_GetIndexInParentOperation;
      case LanguageConceptSwitch.Node_GetModelOperation:
        return props_Node_GetModelOperation;
      case LanguageConceptSwitch.Node_GetNextSiblingOperation:
        return props_Node_GetNextSiblingOperation;
      case LanguageConceptSwitch.Node_GetNextSiblingsOperation:
        return props_Node_GetNextSiblingsOperation;
      case LanguageConceptSwitch.Node_GetParentOperation:
        return props_Node_GetParentOperation;
      case LanguageConceptSwitch.Node_GetPrevSiblingOperation:
        return props_Node_GetPrevSiblingOperation;
      case LanguageConceptSwitch.Node_GetPrevSiblingsOperation:
        return props_Node_GetPrevSiblingsOperation;
      case LanguageConceptSwitch.Node_GetReferenceOperation:
        return props_Node_GetReferenceOperation;
      case LanguageConceptSwitch.Node_GetReferencesOperation:
        return props_Node_GetReferencesOperation;
      case LanguageConceptSwitch.Node_GetReferentSearchScopeOperation:
        return props_Node_GetReferentSearchScopeOperation;
      case LanguageConceptSwitch.Node_GetSConceptOperation:
        return props_Node_GetSConceptOperation;
      case LanguageConceptSwitch.Node_InsertNewNextSiblingOperation:
        return props_Node_InsertNewNextSiblingOperation;
      case LanguageConceptSwitch.Node_InsertNewPrevSiblingOperation:
        return props_Node_InsertNewPrevSiblingOperation;
      case LanguageConceptSwitch.Node_InsertNextSiblingOperation:
        return props_Node_InsertNextSiblingOperation;
      case LanguageConceptSwitch.Node_InsertPrevSiblingOperation:
        return props_Node_InsertPrevSiblingOperation;
      case LanguageConceptSwitch.Node_IsAttributeOperation:
        return props_Node_IsAttributeOperation;
      case LanguageConceptSwitch.Node_IsInstanceOfOperation:
        return props_Node_IsInstanceOfOperation;
      case LanguageConceptSwitch.Node_IsNotNullOperation:
        return props_Node_IsNotNullOperation;
      case LanguageConceptSwitch.Node_IsNullOperation:
        return props_Node_IsNullOperation;
      case LanguageConceptSwitch.Node_IsRoleOperation:
        return props_Node_IsRoleOperation;
      case LanguageConceptSwitch.Node_PointerOperation:
        return props_Node_PointerOperation;
      case LanguageConceptSwitch.Node_ReplaceWithAnotherOperation:
        return props_Node_ReplaceWithAnotherOperation;
      case LanguageConceptSwitch.Node_ReplaceWithNewOperation:
        return props_Node_ReplaceWithNewOperation;
      case LanguageConceptSwitch.OfConceptOperation:
        return props_OfConceptOperation;
      case LanguageConceptSwitch.OperationParm_Concept:
        return props_OperationParm_Concept;
      case LanguageConceptSwitch.OperationParm_ConceptList:
        return props_OperationParm_ConceptList;
      case LanguageConceptSwitch.OperationParm_Inclusion:
        return props_OperationParm_Inclusion;
      case LanguageConceptSwitch.OperationParm_LinkQualifier:
        return props_OperationParm_LinkQualifier;
      case LanguageConceptSwitch.OperationParm_Root:
        return props_OperationParm_Root;
      case LanguageConceptSwitch.OperationParm_SameMetaLevel:
        return props_OperationParm_SameMetaLevel;
      case LanguageConceptSwitch.OperationParm_StopConceptList:
        return props_OperationParm_StopConceptList;
      case LanguageConceptSwitch.PoundExpression:
        return props_PoundExpression;
      case LanguageConceptSwitch.PropertyAttributeQualifier:
        return props_PropertyAttributeQualifier;
      case LanguageConceptSwitch.PropertyId:
        return props_PropertyId;
      case LanguageConceptSwitch.PropertyIdRefExpression:
        return props_PropertyIdRefExpression;
      case LanguageConceptSwitch.PropertyIdentity:
        return props_PropertyIdentity;
      case LanguageConceptSwitch.PropertyNameRefExpression:
        return props_PropertyNameRefExpression;
      case LanguageConceptSwitch.PropertyQualifier:
        return props_PropertyQualifier;
      case LanguageConceptSwitch.Property_HasValue_Enum:
        return props_Property_HasValue_Enum;
      case LanguageConceptSwitch.Property_HasValue_Simple:
        return props_Property_HasValue_Simple;
      case LanguageConceptSwitch.Property_RemoveOperation:
        return props_Property_RemoveOperation;
      case LanguageConceptSwitch.Property_SetOperation:
        return props_Property_SetOperation;
      case LanguageConceptSwitch.RefConcept_Reference:
        return props_RefConcept_Reference;
      case LanguageConceptSwitch.ReferenceLinkId:
        return props_ReferenceLinkId;
      case LanguageConceptSwitch.Reference_GetLinkDeclarationOperation:
        return props_Reference_GetLinkDeclarationOperation;
      case LanguageConceptSwitch.Reference_GetResolveInfo:
        return props_Reference_GetResolveInfo;
      case LanguageConceptSwitch.Reference_GetRoleOperation:
        return props_Reference_GetRoleOperation;
      case LanguageConceptSwitch.Reference_GetTargetOperation:
        return props_Reference_GetTargetOperation;
      case LanguageConceptSwitch.SConceptOperation:
        return props_SConceptOperation;
      case LanguageConceptSwitch.SConceptType:
        return props_SConceptType;
      case LanguageConceptSwitch.SConceptTypeCastExpression:
        return props_SConceptTypeCastExpression;
      case LanguageConceptSwitch.SConceptTypeLiteral:
        return props_SConceptTypeLiteral;
      case LanguageConceptSwitch.SEnumMemberOperation:
        return props_SEnumMemberOperation;
      case LanguageConceptSwitch.SEnumMemberType:
        return props_SEnumMemberType;
      case LanguageConceptSwitch.SEnumOperation:
        return props_SEnumOperation;
      case LanguageConceptSwitch.SEnumOperationInvocation:
        return props_SEnumOperationInvocation;
      case LanguageConceptSwitch.SEnum_MemberForNameOperation:
        return props_SEnum_MemberForNameOperation;
      case LanguageConceptSwitch.SEnum_MemberForValueOperation:
        return props_SEnum_MemberForValueOperation;
      case LanguageConceptSwitch.SEnum_MemberOperation:
        return props_SEnum_MemberOperation;
      case LanguageConceptSwitch.SEnum_MembersOperation:
        return props_SEnum_MembersOperation;
      case LanguageConceptSwitch.SLinkAccess:
        return props_SLinkAccess;
      case LanguageConceptSwitch.SLinkImplicitSelect:
        return props_SLinkImplicitSelect;
      case LanguageConceptSwitch.SLinkListAccess:
        return props_SLinkListAccess;
      case LanguageConceptSwitch.SModelType:
        return props_SModelType;
      case LanguageConceptSwitch.SNodeCreator:
        return props_SNodeCreator;
      case LanguageConceptSwitch.SNodeListCreator:
        return props_SNodeListCreator;
      case LanguageConceptSwitch.SNodeListType:
        return props_SNodeListType;
      case LanguageConceptSwitch.SNodeOperation:
        return props_SNodeOperation;
      case LanguageConceptSwitch.SNodeType:
        return props_SNodeType;
      case LanguageConceptSwitch.SNodeTypeCastExpression:
        return props_SNodeTypeCastExpression;
      case LanguageConceptSwitch.SPropertyAccess:
        return props_SPropertyAccess;
      case LanguageConceptSwitch.SReferenceType:
        return props_SReferenceType;
      case LanguageConceptSwitch.SearchScopeType:
        return props_SearchScopeType;
      case LanguageConceptSwitch.SearchScope_ContainsOperation:
        return props_SearchScope_ContainsOperation;
      case LanguageConceptSwitch.SemanticDowncastExpression:
        return props_SemanticDowncastExpression;
      case LanguageConceptSwitch.SubconceptCase:
        return props_SubconceptCase;
    }
    return null;
  }
}
