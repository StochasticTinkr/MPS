package jetbrains.mps.traceInfo.testWeavingGenerated.data.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_ChildConceptWeave = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ChildConceptWeaveEach = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ChildConceptWeaveEachMany = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ChildConceptWeaveMany = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RootConcept = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0g.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_ChildConceptWeave;
          }
          break;
        case 1:
          if (true) {
            return props_ChildConceptWeaveEach;
          }
          break;
        case 2:
          if (true) {
            return props_ChildConceptWeaveEachMany;
          }
          break;
        case 3:
          if (true) {
            return props_ChildConceptWeaveMany;
          }
          break;
        case 4:
          if (true) {
            return props_RootConcept;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0g = buildConceptIndices(MetaAdapterFactory.getConcept(0xce517356fc9a4e78L, 0x86066e7a36ff0671L, 0x55da9f701c64f39cL, "ChildConceptWeave"), MetaAdapterFactory.getConcept(0xce517356fc9a4e78L, 0x86066e7a36ff0671L, 0x55da9f701c64f39aL, "ChildConceptWeaveEach"), MetaAdapterFactory.getConcept(0xce517356fc9a4e78L, 0x86066e7a36ff0671L, 0x55da9f701c681163L, "ChildConceptWeaveEachMany"), MetaAdapterFactory.getConcept(0xce517356fc9a4e78L, 0x86066e7a36ff0671L, 0x55da9f701c681159L, "ChildConceptWeaveMany"), MetaAdapterFactory.getConcept(0xce517356fc9a4e78L, 0x86066e7a36ff0671L, 0x55da9f701c64caccL, "RootConcept"));
}
