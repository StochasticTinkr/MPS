package jetbrains.mps.traceInfo.testWeavingGenerated.data.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ChildConceptWeave;
  private ConceptPresentation props_ChildConceptWeaveEach;
  private ConceptPresentation props_ChildConceptWeaveEachMany;
  private ConceptPresentation props_ChildConceptWeaveMany;
  private ConceptPresentation props_RootConcept;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ChildConceptWeave:
        if (props_ChildConceptWeave == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ChildConceptWeave = cpb.create();
        }
        return props_ChildConceptWeave;
      case LanguageConceptSwitch.ChildConceptWeaveEach:
        if (props_ChildConceptWeaveEach == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ChildConceptWeaveEach = cpb.create();
        }
        return props_ChildConceptWeaveEach;
      case LanguageConceptSwitch.ChildConceptWeaveEachMany:
        if (props_ChildConceptWeaveEachMany == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ChildConceptWeaveEachMany = cpb.create();
        }
        return props_ChildConceptWeaveEachMany;
      case LanguageConceptSwitch.ChildConceptWeaveMany:
        if (props_ChildConceptWeaveMany == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ChildConceptWeaveMany = cpb.create();
        }
        return props_ChildConceptWeaveMany;
      case LanguageConceptSwitch.RootConcept:
        if (props_RootConcept == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RootConcept = cpb.create();
        }
        return props_RootConcept;
    }
    return null;
  }
}
