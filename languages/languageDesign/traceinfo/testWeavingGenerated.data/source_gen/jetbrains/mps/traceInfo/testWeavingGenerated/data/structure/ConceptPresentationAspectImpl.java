package jetbrains.mps.traceInfo.testWeavingGenerated.data.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ChildConceptWeave = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ChildConceptWeaveEach = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ChildConceptWeaveEachMany = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ChildConceptWeaveMany = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RootConcept = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("ce517356-fc9a-4e78-8606-6e7a36ff0671"), "jetbrains.mps.traceInfo.testWeavingGenerated.data")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_ChildConceptWeave;
      case 1:
        return props_ChildConceptWeaveEach;
      case 2:
        return props_ChildConceptWeaveEachMany;
      case 3:
        return props_ChildConceptWeaveMany;
      case 4:
        return props_RootConcept;
    }
    throw new IllegalStateException();
  }
}
