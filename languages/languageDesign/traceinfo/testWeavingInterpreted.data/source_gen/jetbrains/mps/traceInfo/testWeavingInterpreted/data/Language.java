package jetbrains.mps.traceInfo.testWeavingInterpreted.data;

/*Generated by MPS */

import jetbrains.mps.smodel.language.LanguageRuntime;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;
import java.util.UUID;
import java.util.Collection;
import jetbrains.mps.generator.runtime.TemplateModule;
import jetbrains.mps.generator.runtime.TemplateUtil;
import jetbrains.mps.smodel.runtime.ILanguageAspect;
import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import jetbrains.mps.traceInfo.testWeavingInterpreted.data.editor.EditorAspectDescriptorImpl;
import jetbrains.mps.smodel.runtime.StructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptPresentationAspect;
import jetbrains.mps.traceInfo.testWeavingInterpreted.data.structure.AdditionalStructurePropertiesImpl;

public class Language extends LanguageRuntime {
  public static String MODULE_REF = "ffafcf63-cbe6-4e5c-9717-541f01743ac7(jetbrains.mps.traceInfo.testWeavingInterpreted.data)";
  public Language() {
  }
  @Override
  public String getNamespace() {
    return "jetbrains.mps.traceInfo.testWeavingInterpreted.data";
  }

  @Override
  public int getVersion() {
    return 0;
  }

  public SLanguageId getId() {
    return new SLanguageId(UUID.fromString("ffafcf63-cbe6-4e5c-9717-541f01743ac7"));
  }
  @Override
  protected String[] getExtendedLanguageIDs() {
    return new String[]{"jetbrains.mps.baseLanguage"};
  }
  @Override
  public Collection<TemplateModule> getGenerators() {
    return TemplateUtil.<TemplateModule>asCollection(TemplateUtil.createInterpretedGenerator(this, "d087ec54-2b9f-4f04-98de-2d147f95ee15(jetbrains.mps.traceInfo.testWeavingInterpreted.data#2819311507031176971)"));
  }
  @Override
  protected <T extends ILanguageAspect> T createAspect(Class<T> aspectClass) {
    if (aspectClass == EditorAspectDescriptor.class) {
      return (T) new EditorAspectDescriptorImpl();
    }
    if (aspectClass == StructureAspectDescriptor.class) {
      return (T) new jetbrains.mps.traceInfo.testWeavingInterpreted.data.structure.StructureAspectDescriptor();
    }
    if (aspectClass == ConceptPresentationAspect.class) {
      return (T) new AdditionalStructurePropertiesImpl();
    }
    return super.createAspect(aspectClass);
  }
}
