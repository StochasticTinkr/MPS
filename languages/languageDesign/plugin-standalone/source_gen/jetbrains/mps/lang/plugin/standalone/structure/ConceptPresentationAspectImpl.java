package jetbrains.mps.lang.plugin.standalone.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ApplicationPluginDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0a).create();
  private final ConceptPresentation props_ApplicationPluginDisposeBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ApplicationPluginInitBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ApplicationPluginType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetPreferencesComponentInProjectOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetToolInProjectOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProjectPluginDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0g).create();
  private final ConceptPresentation props_ProjectPluginDisposeBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProjectPluginInitBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProjectPluginType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StandalonePluginDescriptor = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_ApplicationPluginDeclaration;
      case 1:
        return props_ApplicationPluginDisposeBlock;
      case 2:
        return props_ApplicationPluginInitBlock;
      case 3:
        return props_ApplicationPluginType;
      case 4:
        return props_GetPreferencesComponentInProjectOperation;
      case 5:
        return props_GetToolInProjectOperation;
      case 6:
        return props_ProjectPluginDeclaration;
      case 7:
        return props_ProjectPluginDisposeBlock;
      case 8:
        return props_ProjectPluginInitBlock;
      case 9:
        return props_ProjectPluginType;
      case 10:
        return props_StandalonePluginDescriptor;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
