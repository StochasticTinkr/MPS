package jetbrains.mps.lang.plugin.standalone.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.core.editor.BaseStyleSheet_StyleSheet;

public class StandalonePluginDescriptor_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_lfvdu_a(editorContext, node);
  }
  private EditorCell createCollection_lfvdu_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_lfvdu_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_lfvdu_a0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_lfvdu_b0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_lfvdu_c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_lfvdu_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "standalone descriptor");
    editorCell.setCellId("Constant_lfvdu_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_lfvdu_b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_lfvdu_b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_lfvdu_a1a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_lfvdu_b1a(editorContext, node));
    editorCell.addEditorCell(this.createProperty_lfvdu_c1a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_lfvdu_a1a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_lfvdu_a1a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_lfvdu_b1a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Generate initializer config");
    editorCell.setCellId("Constant_lfvdu_b1a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_lfvdu_c1a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("needInitConfig");
    provider.setNoTargetText("<no needInitConfig>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_needInitConfig");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  private EditorCell createCollection_lfvdu_c0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_lfvdu_c0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_lfvdu_a2a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_lfvdu_b2a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_lfvdu_c2a(editorContext, node));
    editorCell.addEditorCell(this.createConstant_lfvdu_d2a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_lfvdu_a2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_lfvdu_a2a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_lfvdu_b2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_lfvdu_b2a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_lfvdu_c2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "When true, generates a configuration file to get application and project components started from modules with MPS-controlled class loaders (generally, compileInMPS==true)");
    editorCell.setCellId("Constant_lfvdu_c2a");
    Style style = new StyleImpl();
    BaseStyleSheet_StyleSheet.apply_Comment(style, editorCell);
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_lfvdu_d2a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_lfvdu_d2a");
    editorCell.setDefaultText("");
    return editorCell;
  }
}
