package jetbrains.mps.lang.plugin.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myActionDeclaration__BehaviorDescriptor = new ActionDeclaration__BehaviorDescriptor();
  private final BHDescriptor myDoUpdateBlock__BehaviorDescriptor = new DoUpdateBlock__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_AnActionEvent__BehaviorDescriptor = new ConceptFunctionParameter_AnActionEvent__BehaviorDescriptor();
  private final BHDescriptor myExecuteBlock__BehaviorDescriptor = new ExecuteBlock__BehaviorDescriptor();
  private final BHDescriptor myActionGroupDeclaration__BehaviorDescriptor = new ActionGroupDeclaration__BehaviorDescriptor();
  private final BHDescriptor myGroupAnchor__BehaviorDescriptor = new GroupAnchor__BehaviorDescriptor();
  private final BHDescriptor myGetNodeBlock__BehaviorDescriptor = new GetNodeBlock__BehaviorDescriptor();
  private final BHDescriptor myGetNodesBlock__BehaviorDescriptor = new GetNodesBlock__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_node__BehaviorDescriptor = new ConceptFunctionParameter_node__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_OperationContext__BehaviorDescriptor = new ConceptFunctionParameter_OperationContext__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_IModule__BehaviorDescriptor = new ConceptFunctionParameter_IModule__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_MPSProject__BehaviorDescriptor = new ConceptFunctionParameter_MPSProject__BehaviorDescriptor();
  private final BHDescriptor myActionParameterDeclaration__BehaviorDescriptor = new ActionParameterDeclaration__BehaviorDescriptor();
  private final BHDescriptor myUpdateBlock__BehaviorDescriptor = new UpdateBlock__BehaviorDescriptor();
  private final BHDescriptor myIsApplicableBlock__BehaviorDescriptor = new IsApplicableBlock__BehaviorDescriptor();
  private final BHDescriptor myActionType__BehaviorDescriptor = new ActionType__BehaviorDescriptor();
  private final BHDescriptor myActionParameterReferenceOperation__BehaviorDescriptor = new ActionParameterReferenceOperation__BehaviorDescriptor();
  private final BHDescriptor myBuildGroupBlock__BehaviorDescriptor = new BuildGroupBlock__BehaviorDescriptor();
  private final BHDescriptor myKeyMapKeystroke__BehaviorDescriptor = new KeyMapKeystroke__BehaviorDescriptor();
  private final BHDescriptor myGroupType__BehaviorDescriptor = new GroupType__BehaviorDescriptor();
  private final BHDescriptor myToolType__BehaviorDescriptor = new ToolType__BehaviorDescriptor();
  private final BHDescriptor myPreferencesComponentDeclaration__BehaviorDescriptor = new PreferencesComponentDeclaration__BehaviorDescriptor();
  private final BHDescriptor myPersistentPropertyDeclaration__BehaviorDescriptor = new PersistentPropertyDeclaration__BehaviorDescriptor();
  private final BHDescriptor myPersistentPropertyReference__BehaviorDescriptor = new PersistentPropertyReference__BehaviorDescriptor();
  private final BHDescriptor myPreferencesComponentType__BehaviorDescriptor = new PreferencesComponentType__BehaviorDescriptor();
  private final BHDescriptor myOnBeforeWriteBlock__BehaviorDescriptor = new OnBeforeWriteBlock__BehaviorDescriptor();
  private final BHDescriptor myOnAfterReadBlock__BehaviorDescriptor = new OnAfterReadBlock__BehaviorDescriptor();
  private final BHDescriptor myPreferencePage__BehaviorDescriptor = new PreferencePage__BehaviorDescriptor();
  private final BHDescriptor myPreferencePageResetBlock__BehaviorDescriptor = new PreferencePageResetBlock__BehaviorDescriptor();
  private final BHDescriptor myPreferencePageCommitBlock__BehaviorDescriptor = new PreferencePageCommitBlock__BehaviorDescriptor();
  private final BHDescriptor myPreferencePageIsModifiedBlock__BehaviorDescriptor = new PreferencePageIsModifiedBlock__BehaviorDescriptor();
  private final BHDescriptor myInitBlock__BehaviorDescriptor = new InitBlock__BehaviorDescriptor();
  private final BHDescriptor myDisposeBlock__BehaviorDescriptor = new DisposeBlock__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_Project__BehaviorDescriptor = new ConceptFunctionParameter_Project__BehaviorDescriptor();
  private final BHDescriptor myGetComponentBlock__BehaviorDescriptor = new GetComponentBlock__BehaviorDescriptor();
  private final BHDescriptor myActionDataParameterDeclaration__BehaviorDescriptor = new ActionDataParameterDeclaration__BehaviorDescriptor();
  private final BHDescriptor myActionDataParameterReferenceOperation__BehaviorDescriptor = new ActionDataParameterReferenceOperation__BehaviorDescriptor();
  private final BHDescriptor myActionParameter__BehaviorDescriptor = new ActionParameter__BehaviorDescriptor();
  private final BHDescriptor myToStringConceptFunction__BehaviorDescriptor = new ToStringConceptFunction__BehaviorDescriptor();
  private final BHDescriptor myUpdateGroupFunction__BehaviorDescriptor = new UpdateGroupFunction__BehaviorDescriptor();
  private final BHDescriptor myEnumerateChildrenFunction__BehaviorDescriptor = new EnumerateChildrenFunction__BehaviorDescriptor();
  private final BHDescriptor myMPSPluginDependency__BehaviorDescriptor = new MPSPluginDependency__BehaviorDescriptor();
  private final BHDescriptor myNumberToolShortcut__BehaviorDescriptor = new NumberToolShortcut__BehaviorDescriptor();
  private final BHDescriptor myToolKeystroke__BehaviorDescriptor = new ToolKeystroke__BehaviorDescriptor();
  private final BHDescriptor myAbstractToolKeystroke__BehaviorDescriptor = new AbstractToolKeystroke__BehaviorDescriptor();
  private final BHDescriptor myKeymapChangesDeclaration__BehaviorDescriptor = new KeymapChangesDeclaration__BehaviorDescriptor();
  private final BHDescriptor mySimpleShortcutChange__BehaviorDescriptor = new SimpleShortcutChange__BehaviorDescriptor();
  private final BHDescriptor myActionParameterReference__BehaviorDescriptor = new ActionParameterReference__BehaviorDescriptor();
  private final BHDescriptor myOrderConstraints__BehaviorDescriptor = new OrderConstraints__BehaviorDescriptor();
  private final BHDescriptor myOrder__BehaviorDescriptor = new Order__BehaviorDescriptor();
  private final BHDescriptor myOrderReference__BehaviorDescriptor = new OrderReference__BehaviorDescriptor();
  private final BHDescriptor myCreateNodeAspectBlock__BehaviorDescriptor = new CreateNodeAspectBlock__BehaviorDescriptor();
  private final BHDescriptor myEditorTab__BehaviorDescriptor = new EditorTab__BehaviorDescriptor();
  private final BHDescriptor myIsApplicableTabBlock__BehaviorDescriptor = new IsApplicableTabBlock__BehaviorDescriptor();
  private final BHDescriptor myBaseNodeBlock__BehaviorDescriptor = new BaseNodeBlock__BehaviorDescriptor();
  private final BHDescriptor myListenBlock__BehaviorDescriptor = new ListenBlock__BehaviorDescriptor();
  private final BHDescriptor myIdeaInitializerDescriptor__BehaviorDescriptor = new IdeaInitializerDescriptor__BehaviorDescriptor();
  private final BHDescriptor myCustomCondition__BehaviorDescriptor = new CustomCondition__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_Model__BehaviorDescriptor = new ConceptFunctionParameter_Model__BehaviorDescriptor();
  private final BHDescriptor myPluginDependency__BehaviorDescriptor = new PluginDependency__BehaviorDescriptor();
  private final BHDescriptor myIdeaPluginDependency__BehaviorDescriptor = new IdeaPluginDependency__BehaviorDescriptor();
  private final BHDescriptor myParameterizedShortcutChange__BehaviorDescriptor = new ParameterizedShortcutChange__BehaviorDescriptor();
  private final BHDescriptor myBaseToolDeclaration__BehaviorDescriptor = new BaseToolDeclaration__BehaviorDescriptor();
  private final BHDescriptor myConceptsBlock__BehaviorDescriptor = new ConceptsBlock__BehaviorDescriptor();
  private final BHDescriptor myCreateBlock__BehaviorDescriptor = new CreateBlock__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_SConceptClass__BehaviorDescriptor = new ConceptFunctionParameter_SConceptClass__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myAbstractToolKeystroke__BehaviorDescriptor;
      case 1:
        return myActionDataParameterDeclaration__BehaviorDescriptor;
      case 2:
        return myActionDataParameterReferenceOperation__BehaviorDescriptor;
      case 3:
        return myActionDeclaration__BehaviorDescriptor;
      case 4:
        return myActionGroupDeclaration__BehaviorDescriptor;
      case 5:
        return myActionParameter__BehaviorDescriptor;
      case 6:
        return myActionParameterDeclaration__BehaviorDescriptor;
      case 7:
        return myActionParameterReference__BehaviorDescriptor;
      case 8:
        return myActionParameterReferenceOperation__BehaviorDescriptor;
      case 9:
        return myActionType__BehaviorDescriptor;
      case 10:
        return myBaseNodeBlock__BehaviorDescriptor;
      case 11:
        return myBaseToolDeclaration__BehaviorDescriptor;
      case 12:
        return myBuildGroupBlock__BehaviorDescriptor;
      case 13:
        return myConceptFunctionParameter_AnActionEvent__BehaviorDescriptor;
      case 14:
        return myConceptFunctionParameter_IModule__BehaviorDescriptor;
      case 15:
        return myConceptFunctionParameter_MPSProject__BehaviorDescriptor;
      case 16:
        return myConceptFunctionParameter_Model__BehaviorDescriptor;
      case 17:
        return myConceptFunctionParameter_OperationContext__BehaviorDescriptor;
      case 18:
        return myConceptFunctionParameter_Project__BehaviorDescriptor;
      case 19:
        return myConceptFunctionParameter_SConceptClass__BehaviorDescriptor;
      case 20:
        return myConceptFunctionParameter_node__BehaviorDescriptor;
      case 21:
        return myConceptsBlock__BehaviorDescriptor;
      case 22:
        return myCreateBlock__BehaviorDescriptor;
      case 23:
        return myCreateNodeAspectBlock__BehaviorDescriptor;
      case 24:
        return myCustomCondition__BehaviorDescriptor;
      case 25:
        return myDisposeBlock__BehaviorDescriptor;
      case 26:
        return myDoUpdateBlock__BehaviorDescriptor;
      case 27:
        return myEditorTab__BehaviorDescriptor;
      case 28:
        return myEnumerateChildrenFunction__BehaviorDescriptor;
      case 29:
        return myExecuteBlock__BehaviorDescriptor;
      case 30:
        return myGetComponentBlock__BehaviorDescriptor;
      case 31:
        return myGetNodeBlock__BehaviorDescriptor;
      case 32:
        return myGetNodesBlock__BehaviorDescriptor;
      case 33:
        return myGroupAnchor__BehaviorDescriptor;
      case 34:
        return myGroupType__BehaviorDescriptor;
      case 35:
        return myIdeaInitializerDescriptor__BehaviorDescriptor;
      case 36:
        return myIdeaPluginDependency__BehaviorDescriptor;
      case 37:
        return myInitBlock__BehaviorDescriptor;
      case 38:
        return myIsApplicableBlock__BehaviorDescriptor;
      case 39:
        return myIsApplicableTabBlock__BehaviorDescriptor;
      case 40:
        return myKeyMapKeystroke__BehaviorDescriptor;
      case 41:
        return myKeymapChangesDeclaration__BehaviorDescriptor;
      case 42:
        return myListenBlock__BehaviorDescriptor;
      case 43:
        return myMPSPluginDependency__BehaviorDescriptor;
      case 44:
        return myNumberToolShortcut__BehaviorDescriptor;
      case 45:
        return myOnAfterReadBlock__BehaviorDescriptor;
      case 46:
        return myOnBeforeWriteBlock__BehaviorDescriptor;
      case 47:
        return myOrder__BehaviorDescriptor;
      case 48:
        return myOrderConstraints__BehaviorDescriptor;
      case 49:
        return myOrderReference__BehaviorDescriptor;
      case 50:
        return myParameterizedShortcutChange__BehaviorDescriptor;
      case 51:
        return myPersistentPropertyDeclaration__BehaviorDescriptor;
      case 52:
        return myPersistentPropertyReference__BehaviorDescriptor;
      case 53:
        return myPluginDependency__BehaviorDescriptor;
      case 54:
        return myPreferencePage__BehaviorDescriptor;
      case 55:
        return myPreferencePageCommitBlock__BehaviorDescriptor;
      case 56:
        return myPreferencePageIsModifiedBlock__BehaviorDescriptor;
      case 57:
        return myPreferencePageResetBlock__BehaviorDescriptor;
      case 58:
        return myPreferencesComponentDeclaration__BehaviorDescriptor;
      case 59:
        return myPreferencesComponentType__BehaviorDescriptor;
      case 60:
        return mySimpleShortcutChange__BehaviorDescriptor;
      case 61:
        return myToStringConceptFunction__BehaviorDescriptor;
      case 62:
        return myToolKeystroke__BehaviorDescriptor;
      case 63:
        return myToolType__BehaviorDescriptor;
      case 64:
        return myUpdateBlock__BehaviorDescriptor;
      case 65:
        return myUpdateGroupFunction__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x68b8d4843e384caL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11b69e025e0L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11b69e60be0L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1181ca87c38L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1181da058d2L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11b737a6b7cL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118b812427fL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1947b3e0f0959deeL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118d0b7fab3L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118c26632a3L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ffc088L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x5adc7622e710bddcL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1190f786becL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1181d54406fL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11870797a07L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118707cdfb8L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x513f22c4bae4fb15L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118565418cbL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11aa1691a43L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x6785022a196ed912L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1184b3b848fL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x6785022a196e8effL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x6785022a196e8f01L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ff0d26L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x4cdc1c9014f46cb3L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11aa167474fL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1181d51127eL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ff0d2fL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x120b44d9194L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1181d5d8548L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11aba5b01c0L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1184b2b7acbL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1184b2c2cdeL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11840f36089L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119240f9168L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x45b64b294c2b3514L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x516313f5e8537eecL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11aa166ea48L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118b833c6a5L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ff128fL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11919c665d4L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x15afe07f2a9bb075L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ffc090L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x2d2ad2584076330L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x68b8d4843b76107L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119e1f720a6L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119e1f3f82bL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x22035699bdd78147L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x22035699bdd78145L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x22035699bdd79211L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x55f30a5d1e096c3aL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119c44cfd36L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119c466b22aL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x516313f5e8537ee9L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119e269a79fL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119e291160cL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119e7219d37L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119e28fc2f6L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119c44c226fL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119c497fc64L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x15afe07f2a9bb076L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11db00924aaL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x68b8d4843b765b0L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11961ebbf24L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118b8325461L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x120b44b9ee2L)).seal();
}
