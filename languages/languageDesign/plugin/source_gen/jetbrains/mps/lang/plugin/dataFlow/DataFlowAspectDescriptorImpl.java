package jetbrains.mps.lang.plugin.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.framework.DataFlowAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.lang.dataFlow.framework.IDataFlowBuilder;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class DataFlowAspectDescriptorImpl extends DataFlowAspectDescriptorBase {

  @NotNull
  @Override
  public Collection<IDataFlowBuilder> getDataFlowBuilders(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<IDataFlowBuilder>singletonList(new ActionConstructionParameterDeclaration_DataFlow());
      case 1:
        return Collections.<IDataFlowBuilder>singletonList(new ActionConstructorParameterReferenceOperation_DataFlow());
      case 2:
        return Collections.<IDataFlowBuilder>singletonList(new ActionDataParameterDeclaration_DataFlow());
      case 3:
        return Collections.<IDataFlowBuilder>singletonList(new ActionDataParameterReferenceOperation_DataFlow());
      case 4:
        return Collections.<IDataFlowBuilder>singletonList(new ActionInstance_DataFlow());
      case 5:
        return Collections.<IDataFlowBuilder>singletonList(new ActionParameterDeclaration_DataFlow());
      case 6:
        return Collections.<IDataFlowBuilder>singletonList(new ActionParameterReferenceOperation_DataFlow());
      case 7:
        return Collections.<IDataFlowBuilder>singletonList(new AddStatement_DataFlow());
      case 8:
        return Collections.<IDataFlowBuilder>singletonList(new AddTabOperation_DataFlow());
      case 9:
        return Collections.<IDataFlowBuilder>singletonList(new ToolTab_DataFlow());
      default:
    }
    return Collections.<IDataFlowBuilder>emptyList();
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11daf6d2bdcL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11daf6e60e3L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11b69e025e0L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11b69e60be0L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1181da2ba57L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118b812427fL), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118d0b7fab3L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11dafad4b27L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x51d51510f17237b8L), MetaIdFactory.conceptId(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x6048eaf0c78f324eL)).seal();
}
