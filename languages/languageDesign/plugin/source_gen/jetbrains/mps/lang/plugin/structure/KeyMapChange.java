package jetbrains.mps.lang.plugin.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;

public enum KeyMapChange {
  replace_all("replace all", "replace all"),
  remove("remove", "remove");

  private final String myName;
  public String getName() {
    return myName;
  }
  private final String myValue;
  private KeyMapChange(String name, String value) {
    myName = name;
    myValue = value;
  }
  public String getValue() {
    return myValue;
  }
  public String getValueAsString() {
    return myValue;
  }
  public static List<KeyMapChange> getConstants() {
    List<KeyMapChange> list = ListSequence.fromList(new LinkedList<KeyMapChange>());
    ListSequence.fromList(list).addElement(KeyMapChange.replace_all);
    ListSequence.fromList(list).addElement(KeyMapChange.remove);
    return list;
  }
  public static KeyMapChange getDefault() {
    return null;
  }
  public static KeyMapChange parseValue(String value) {
    if (value == null) {
      return KeyMapChange.getDefault();
    }
    if (value.equals(KeyMapChange.replace_all.getValueAsString())) {
      return KeyMapChange.replace_all;
    }
    if (value.equals(KeyMapChange.remove.getValueAsString())) {
      return KeyMapChange.remove;
    }
    return KeyMapChange.getDefault();
  }
}
