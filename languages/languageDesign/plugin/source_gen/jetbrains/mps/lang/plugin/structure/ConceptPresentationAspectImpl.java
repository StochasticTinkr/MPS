package jetbrains.mps.lang.plugin.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ActionAccessOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionConstructionParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionConstructorParameterReferenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionDataParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionDataParameterReferenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionDeclaration = new ConceptPresentationBuilder().helpUrl("http://confluence.jetbrains.com/display/MPSD33/Plugin#Plugin-actionsandactiongroups").icon("actionNew.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_ActionGroupDeclaration = new ConceptPresentationBuilder().icon("actionGroupNew.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_ActionGroupMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionGroupRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionParameter = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11b737a6b7cL, 0x11c71345faaL, "isOptional")).create();
  private final ConceptPresentation props_ActionParameterCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionParameterReferenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionPlaceSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AddElementStatement = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_AddKeystrokeStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AddStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AddTabOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseNodeBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseProjectOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseToolDeclaration = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x5adc7622e710bddcL, 0x5adc7622e710cedcL, "caption"), MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x5adc7622e710bddcL, 0x5adc7622e710cf2dL, "number"), MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x5adc7622e710bddcL, 0x22ace24ea9f7487cL, "position"), MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x5adc7622e710bddcL, 0x5adc7622e710cf6eL, "icon")).icon("tool.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_BuildGroupBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ButtonCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CloseTabOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_AnActionEvent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_Concept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_CreatorType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_IModule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_MPSProject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_Model = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_OperationContext = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_PreferencePage_component = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_Project = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_SConceptClass = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_node = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptsBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateNodeAspectBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateTabBlock = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x16c373ab7fdbb667L, 0x16c373ab7fdbb66eL, "commandOnCreate")).create();
  private final ConceptPresentation props_CustomCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DisposeBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DoUpdateBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EditableModel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EditorTab = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ff0d2fL, 0x33f4c34299ff0d37L, "shortcutChar"), MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ff0d2fL, 0x71dc7d539b7857cfL, "commandOnCreate"), MetaAdapterFactory.getReferenceLink(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ff0d2fL, 0x33f4c34299ff0d30L, "baseNodeConcept")).icon("tabbedEditor.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_EditorTabReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ElementListContents = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumerateChildrenFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EverywhereActionPlace = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetComponentBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetGroupOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetNodeBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetNodesBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetSelectedTabOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GroupAccessOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GroupAnchor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GroupContents = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GroupType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IdeaActionsDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IdeaConfigurationXml = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IdeaInitializerDescriptor = new ConceptPresentationBuilder().icon("ideaPluginDeclaration.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_IdeaPluginDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InterfaceExtentionPoint = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InterfaceGroup = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsApplicableBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsApplicableTabBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_KeyMapKeystroke = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_KeyStrokeType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_KeymapChangesDeclaration = new ConceptPresentationBuilder().icon("keymapChangesDeclaration.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_KeymapRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListenBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MPSPluginDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModificationStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodesBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NonDumbAwareActions = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OldConceptsBlock = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_OldCreateBlock = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_OnAfterReadBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OnBeforeWriteBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Order = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrderConstraints = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrderReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterCondition_ConceptFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterizedShortcutChange = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PersistentPropertyDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PersistentPropertyReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PinTabOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PluginDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PopupCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PreferencePage = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PreferencePageCommitBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PreferencePageIsModifiedBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PreferencePageResetBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PreferencesComponentDeclaration = new ConceptPresentationBuilder().icon("preferences.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_PreferencesComponentType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequiredCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Separator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShortcutChange = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleActionPlace = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleShortcutChange = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SmartDisposeClosureParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TabbedToolDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TabbedToolOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToStringConceptFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToStringParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToolActionPlace = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToolDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToolInstanceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToolTab = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToolType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToolbarCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnpinTabOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UpdateBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UpdateGroupBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UpdateGroupFunction = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_lpa09p_a0se.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_ActionAccessOperation;
          }
          break;
        case 1:
          if (true) {
            return props_ActionConstructionParameterDeclaration;
          }
          break;
        case 2:
          if (true) {
            return props_ActionConstructorParameterReferenceOperation;
          }
          break;
        case 3:
          if (true) {
            return props_ActionDataParameterDeclaration;
          }
          break;
        case 4:
          if (true) {
            return props_ActionDataParameterReferenceOperation;
          }
          break;
        case 5:
          if (true) {
            return props_ActionDeclaration;
          }
          break;
        case 6:
          if (true) {
            return props_ActionGroupDeclaration;
          }
          break;
        case 7:
          if (true) {
            return props_ActionGroupMember;
          }
          break;
        case 8:
          if (true) {
            return props_ActionGroupRef;
          }
          break;
        case 9:
          if (true) {
            return props_ActionInstance;
          }
          break;
        case 10:
          if (true) {
            return props_ActionParameter;
          }
          break;
        case 11:
          if (true) {
            return props_ActionParameterCondition;
          }
          break;
        case 12:
          if (true) {
            return props_ActionParameterDeclaration;
          }
          break;
        case 13:
          if (true) {
            return props_ActionParameterReference;
          }
          break;
        case 14:
          if (true) {
            return props_ActionParameterReferenceOperation;
          }
          break;
        case 15:
          if (true) {
            return props_ActionPlaceSpecification;
          }
          break;
        case 16:
          if (true) {
            return props_ActionReference;
          }
          break;
        case 17:
          if (true) {
            return props_ActionType;
          }
          break;
        case 18:
          if (true) {
            return props_AddElementStatement;
          }
          break;
        case 19:
          if (true) {
            return props_AddKeystrokeStatement;
          }
          break;
        case 20:
          if (true) {
            return props_AddStatement;
          }
          break;
        case 21:
          if (true) {
            return props_AddTabOperation;
          }
          break;
        case 22:
          if (true) {
            return props_BaseNodeBlock;
          }
          break;
        case 23:
          if (true) {
            return props_BaseProjectOperation;
          }
          break;
        case 24:
          if (true) {
            return props_BaseToolDeclaration;
          }
          break;
        case 25:
          if (true) {
            return props_BuildGroupBlock;
          }
          break;
        case 26:
          if (true) {
            return props_ButtonCreator;
          }
          break;
        case 27:
          if (true) {
            return props_CloseTabOperation;
          }
          break;
        case 28:
          if (true) {
            return props_ConceptCondition;
          }
          break;
        case 29:
          if (true) {
            return props_ConceptFunctionParameter_AnActionEvent;
          }
          break;
        case 30:
          if (true) {
            return props_ConceptFunctionParameter_Concept;
          }
          break;
        case 31:
          if (true) {
            return props_ConceptFunctionParameter_CreatorType;
          }
          break;
        case 32:
          if (true) {
            return props_ConceptFunctionParameter_IModule;
          }
          break;
        case 33:
          if (true) {
            return props_ConceptFunctionParameter_MPSProject;
          }
          break;
        case 34:
          if (true) {
            return props_ConceptFunctionParameter_Model;
          }
          break;
        case 35:
          if (true) {
            return props_ConceptFunctionParameter_OperationContext;
          }
          break;
        case 36:
          if (true) {
            return props_ConceptFunctionParameter_PreferencePage_component;
          }
          break;
        case 37:
          if (true) {
            return props_ConceptFunctionParameter_Project;
          }
          break;
        case 38:
          if (true) {
            return props_ConceptFunctionParameter_SConceptClass;
          }
          break;
        case 39:
          if (true) {
            return props_ConceptFunctionParameter_node;
          }
          break;
        case 40:
          if (true) {
            return props_ConceptsBlock;
          }
          break;
        case 41:
          if (true) {
            return props_CreateBlock;
          }
          break;
        case 42:
          if (true) {
            return props_CreateNodeAspectBlock;
          }
          break;
        case 43:
          if (true) {
            return props_CreateTabBlock;
          }
          break;
        case 44:
          if (true) {
            return props_CustomCondition;
          }
          break;
        case 45:
          if (true) {
            return props_DisposeBlock;
          }
          break;
        case 46:
          if (true) {
            return props_DoUpdateBlock;
          }
          break;
        case 47:
          if (true) {
            return props_EditableModel;
          }
          break;
        case 48:
          if (true) {
            return props_EditorTab;
          }
          break;
        case 49:
          if (true) {
            return props_EditorTabReference;
          }
          break;
        case 50:
          if (true) {
            return props_ElementListContents;
          }
          break;
        case 51:
          if (true) {
            return props_EnumerateChildrenFunction;
          }
          break;
        case 52:
          if (true) {
            return props_EverywhereActionPlace;
          }
          break;
        case 53:
          if (true) {
            return props_ExecuteBlock;
          }
          break;
        case 54:
          if (true) {
            return props_GetComponentBlock;
          }
          break;
        case 55:
          if (true) {
            return props_GetGroupOperation;
          }
          break;
        case 56:
          if (true) {
            return props_GetNodeBlock;
          }
          break;
        case 57:
          if (true) {
            return props_GetNodesBlock;
          }
          break;
        case 58:
          if (true) {
            return props_GetSelectedTabOperation;
          }
          break;
        case 59:
          if (true) {
            return props_GroupAccessOperation;
          }
          break;
        case 60:
          if (true) {
            return props_GroupAnchor;
          }
          break;
        case 61:
          if (true) {
            return props_GroupContents;
          }
          break;
        case 62:
          if (true) {
            return props_GroupType;
          }
          break;
        case 63:
          if (true) {
            return props_IdeaActionsDescriptor;
          }
          break;
        case 64:
          if (true) {
            return props_IdeaConfigurationXml;
          }
          break;
        case 65:
          if (true) {
            return props_IdeaInitializerDescriptor;
          }
          break;
        case 66:
          if (true) {
            return props_IdeaPluginDependency;
          }
          break;
        case 67:
          if (true) {
            return props_InitBlock;
          }
          break;
        case 68:
          if (true) {
            return props_InterfaceExtentionPoint;
          }
          break;
        case 69:
          if (true) {
            return props_InterfaceGroup;
          }
          break;
        case 70:
          if (true) {
            return props_IsApplicableBlock;
          }
          break;
        case 71:
          if (true) {
            return props_IsApplicableTabBlock;
          }
          break;
        case 72:
          if (true) {
            return props_KeyMapKeystroke;
          }
          break;
        case 73:
          if (true) {
            return props_KeyStrokeType;
          }
          break;
        case 74:
          if (true) {
            return props_KeymapChangesDeclaration;
          }
          break;
        case 75:
          if (true) {
            return props_KeymapRef;
          }
          break;
        case 76:
          if (true) {
            return props_ListenBlock;
          }
          break;
        case 77:
          if (true) {
            return props_MPSPluginDependency;
          }
          break;
        case 78:
          if (true) {
            return props_ModificationStatement;
          }
          break;
        case 79:
          if (true) {
            return props_NodesBlock;
          }
          break;
        case 80:
          if (true) {
            return props_NonDumbAwareActions;
          }
          break;
        case 81:
          if (true) {
            return props_OldConceptsBlock;
          }
          break;
        case 82:
          if (true) {
            return props_OldCreateBlock;
          }
          break;
        case 83:
          if (true) {
            return props_OnAfterReadBlock;
          }
          break;
        case 84:
          if (true) {
            return props_OnBeforeWriteBlock;
          }
          break;
        case 85:
          if (true) {
            return props_Order;
          }
          break;
        case 86:
          if (true) {
            return props_OrderConstraints;
          }
          break;
        case 87:
          if (true) {
            return props_OrderReference;
          }
          break;
        case 88:
          if (true) {
            return props_ParameterCondition_ConceptFunctionParameter;
          }
          break;
        case 89:
          if (true) {
            return props_ParameterizedShortcutChange;
          }
          break;
        case 90:
          if (true) {
            return props_PersistentPropertyDeclaration;
          }
          break;
        case 91:
          if (true) {
            return props_PersistentPropertyReference;
          }
          break;
        case 92:
          if (true) {
            return props_PinTabOperation;
          }
          break;
        case 93:
          if (true) {
            return props_PluginDependency;
          }
          break;
        case 94:
          if (true) {
            return props_PopupCreator;
          }
          break;
        case 95:
          if (true) {
            return props_PreferencePage;
          }
          break;
        case 96:
          if (true) {
            return props_PreferencePageCommitBlock;
          }
          break;
        case 97:
          if (true) {
            return props_PreferencePageIsModifiedBlock;
          }
          break;
        case 98:
          if (true) {
            return props_PreferencePageResetBlock;
          }
          break;
        case 99:
          if (true) {
            return props_PreferencesComponentDeclaration;
          }
          break;
        case 100:
          if (true) {
            return props_PreferencesComponentType;
          }
          break;
        case 101:
          if (true) {
            return props_RequiredCondition;
          }
          break;
        case 102:
          if (true) {
            return props_Separator;
          }
          break;
        case 103:
          if (true) {
            return props_ShortcutChange;
          }
          break;
        case 104:
          if (true) {
            return props_SimpleActionPlace;
          }
          break;
        case 105:
          if (true) {
            return props_SimpleShortcutChange;
          }
          break;
        case 106:
          if (true) {
            return props_SmartDisposeClosureParameterDeclaration;
          }
          break;
        case 107:
          if (true) {
            return props_TabbedToolDeclaration;
          }
          break;
        case 108:
          if (true) {
            return props_TabbedToolOperation;
          }
          break;
        case 109:
          if (true) {
            return props_ToStringConceptFunction;
          }
          break;
        case 110:
          if (true) {
            return props_ToStringParameter;
          }
          break;
        case 111:
          if (true) {
            return props_ToolActionPlace;
          }
          break;
        case 112:
          if (true) {
            return props_ToolDeclaration;
          }
          break;
        case 113:
          if (true) {
            return props_ToolInstanceExpression;
          }
          break;
        case 114:
          if (true) {
            return props_ToolTab;
          }
          break;
        case 115:
          if (true) {
            return props_ToolType;
          }
          break;
        case 116:
          if (true) {
            return props_ToolbarCreator;
          }
          break;
        case 117:
          if (true) {
            return props_UnpinTabOperation;
          }
          break;
        case 118:
          if (true) {
            return props_UpdateBlock;
          }
          break;
        case 119:
          if (true) {
            return props_UpdateGroupBlock;
          }
          break;
        case 120:
          if (true) {
            return props_UpdateGroupFunction;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_lpa09p_a0se = buildConceptIndices(MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x2c7cd89ac8d0060cL, "ActionAccessOperation"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11daf6d2bdcL, "ActionConstructionParameterDeclaration"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11daf6e60e3L, "ActionConstructorParameterReferenceOperation"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11b69e025e0L, "ActionDataParameterDeclaration"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11b69e60be0L, "ActionDataParameterReferenceOperation"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1181ca87c38L, "ActionDeclaration"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1181da058d2L, "ActionGroupDeclaration"), MetaAdapterFactory.getInterfaceConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1186b4d6ddfL, "ActionGroupMember"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x498be7ea73fa71fL, "ActionGroupRef"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1181da2ba57L, "ActionInstance"), MetaAdapterFactory.getInterfaceConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11b737a6b7cL, "ActionParameter"), MetaAdapterFactory.getInterfaceConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x4cdc1c9014f52facL, "ActionParameterCondition"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118b812427fL, "ActionParameterDeclaration"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1947b3e0f0959deeL, "ActionParameterReference"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118d0b7fab3L, "ActionParameterReferenceOperation"), MetaAdapterFactory.getInterfaceConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x57ad0f5134202ecL, "ActionPlaceSpecification"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x14fc9beabb2214dfL, "ActionReference"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118c26632a3L, "ActionType"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1190f7a2d1aL, "AddElementStatement"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x70d8274412a8919cL, "AddKeystrokeStatement"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11dafad4b27L, "AddStatement"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x51d51510f17237b8L, "AddTabOperation"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ffc088L, "BaseNodeBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x2e56fadb4d375f27L, "BaseProjectOperation"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x5adc7622e710bddcL, "BaseToolDeclaration"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1190f786becL, "BuildGroupBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1b97d211bb0207afL, "ButtonCreator"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x50be5f478b3541f2L, "CloseTabOperation"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0xe9375051ff52781L, "ConceptCondition"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1181d54406fL, "ConceptFunctionParameter_AnActionEvent"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x6ac26e7c3218be7fL, "ConceptFunctionParameter_Concept"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x513f22c4bae4fb1bL, "ConceptFunctionParameter_CreatorType"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11870797a07L, "ConceptFunctionParameter_IModule"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118707cdfb8L, "ConceptFunctionParameter_MPSProject"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x513f22c4bae4fb15L, "ConceptFunctionParameter_Model"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118565418cbL, "ConceptFunctionParameter_OperationContext"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119e2cb827fL, "ConceptFunctionParameter_PreferencePage_component"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11aa1691a43L, "ConceptFunctionParameter_Project"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x6785022a196ed912L, "ConceptFunctionParameter_SConceptClass"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1184b3b848fL, "ConceptFunctionParameter_node"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x6785022a196e8effL, "ConceptsBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x6785022a196e8f01L, "CreateBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ff0d26L, "CreateNodeAspectBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x16c373ab7fdbb667L, "CreateTabBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x4cdc1c9014f46cb3L, "CustomCondition"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11aa167474fL, "DisposeBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1181d51127eL, "DoUpdateBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x4ecd9810833251a2L, "EditableModel"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ff0d2fL, "EditorTab"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x22035699bdd7814bL, "EditorTabReference"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1190f756bc5L, "ElementListContents"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x120b44d9194L, "EnumerateChildrenFunction"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x57ad0f513474398L, "EverywhereActionPlace"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1181d5d8548L, "ExecuteBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11aba5b01c0L, "GetComponentBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119b4514b56L, "GetGroupOperation"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1184b2b7acbL, "GetNodeBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1184b2c2cdeL, "GetNodesBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x19da07a14b82ef06L, "GetSelectedTabOperation"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x2c7cd89ac8d17d74L, "GroupAccessOperation"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11840f36089L, "GroupAnchor"), MetaAdapterFactory.getInterfaceConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1190f747b3dL, "GroupContents"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119240f9168L, "GroupType"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x498be7ea73fa71eL, "IdeaActionsDescriptor"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x2c7d36ab0e3b095aL, "IdeaConfigurationXml"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x45b64b294c2b3514L, "IdeaInitializerDescriptor"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x516313f5e8537eecL, "IdeaPluginDependency"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11aa166ea48L, "InitBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1186bb08443L, "InterfaceExtentionPoint"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1186ae0bf01L, "InterfaceGroup"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118b833c6a5L, "IsApplicableBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ff128fL, "IsApplicableTabBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11919c665d4L, "KeyMapKeystroke"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x7a5e2454bfcdad14L, "KeyStrokeType"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x15afe07f2a9bb075L, "KeymapChangesDeclaration"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x498be7ea73fa87eL, "KeymapRef"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ffc090L, "ListenBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x2d2ad2584076330L, "MPSPluginDependency"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1181de4920dL, "ModificationStatement"), MetaAdapterFactory.getInterfaceConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ff11e2L, "NodesBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x14fc9beabb2214dcL, "NonDumbAwareActions"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x6ac26e7c3218aa1eL, "OldConceptsBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x6ac26e7c3218be7cL, "OldCreateBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119e1f720a6L, "OnAfterReadBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119e1f3f82bL, "OnBeforeWriteBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x22035699bdd78147L, "Order"), MetaAdapterFactory.getInterfaceConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x22035699bdd78145L, "OrderConstraints"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x22035699bdd79211L, "OrderReference"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x4cdc1c9014f52fa7L, "ParameterCondition_ConceptFunctionParameter"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x55f30a5d1e096c3aL, "ParameterizedShortcutChange"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119c44cfd36L, "PersistentPropertyDeclaration"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119c466b22aL, "PersistentPropertyReference"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x3b9dce676f3861a1L, "PinTabOperation"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x516313f5e8537ee9L, "PluginDependency"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1b97d211bb0207abL, "PopupCreator"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119e269a79fL, "PreferencePage"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119e291160cL, "PreferencePageCommitBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119e7219d37L, "PreferencePageIsModifiedBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119e28fc2f6L, "PreferencePageResetBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119c44c226fL, "PreferencesComponentDeclaration"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119c497fc64L, "PreferencesComponentType"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x4cdc1c9014f52faeL, "RequiredCondition"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1188a1ecd8aL, "Separator"), MetaAdapterFactory.getInterfaceConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x55f30a5d1e092278L, "ShortcutChange"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x57ad0f5134202ebL, "SimpleActionPlace"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x15afe07f2a9bb076L, "SimpleShortcutChange"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x6bd88e2e00aae68L, "SmartDisposeClosureParameterDeclaration"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x51d51510f17223c5L, "TabbedToolDeclaration"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x705d0a376e80e04cL, "TabbedToolOperation"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11db00924aaL, "ToStringConceptFunction"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11db00cd5f8L, "ToStringParameter"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x57ad0f513426286L, "ToolActionPlace"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1181ca8f3faL, "ToolDeclaration"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11870178843L, "ToolInstanceExpression"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x6048eaf0c78f324eL, "ToolTab"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11961ebbf24L, "ToolType"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x1b97d211bb01f6f6L, "ToolbarCreator"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x4ac06ca1bf6e6788L, "UnpinTabOperation"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x118b8325461L, "UpdateBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x120b44a69d3L, "UpdateGroupBlock"), MetaAdapterFactory.getConcept(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x120b44b9ee2L, "UpdateGroupFunction"));
}
