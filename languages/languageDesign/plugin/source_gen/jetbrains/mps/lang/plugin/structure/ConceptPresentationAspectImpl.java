package jetbrains.mps.lang.plugin.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractToolKeystroke = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractToolShortcut = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionAccessOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionConstructionParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionConstructorParameterReferenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionDataParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionDataParameterReferenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionDeclaration = new ConceptPresentationBuilder().helpUrl("http://confluence.jetbrains.com/display/MPSD34/Plugin#Plugin-actionsandactiongroups").icon(IconContainer.RESOURCE_a0a0h).create();
  private final ConceptPresentation props_ActionGroupDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0i).create();
  private final ConceptPresentation props_ActionGroupMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionGroupRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionParameter = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x11b737a6b7cL, 0x11c71345faaL, "isOptional")).create();
  private final ConceptPresentation props_ActionParameterCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionParameterReferenceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionPlaceSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ActionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AddElementStatement = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_AddKeystrokeStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AddStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AddTabOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseNodeBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseProjectOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseToolDeclaration = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x5adc7622e710bddcL, 0x5adc7622e710cedcL, "caption"), MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x5adc7622e710bddcL, 0x5adc7622e710cf2dL, "number"), MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x5adc7622e710bddcL, 0x22ace24ea9f7487cL, "position"), MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x5adc7622e710bddcL, 0x5adc7622e710cf6eL, "icon")).icon(IconContainer.RESOURCE_a0a0ab).create();
  private final ConceptPresentation props_BuildGroupBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ButtonCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CloseTabOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_AnActionEvent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_Concept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_CreatorType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_IModule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_MPSProject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_Model = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_OperationContext = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_PreferencePage_component = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_Project = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_SConceptClass = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_node = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptsBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateNodeAspectBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateTabBlock = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x16c373ab7fdbb667L, 0x16c373ab7fdbb66eL, "commandOnCreate")).create();
  private final ConceptPresentation props_CustomCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomToolShortcut = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DisposeBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DoUpdateBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EditableModel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EditorTab = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ff0d2fL, 0x33f4c34299ff0d37L, "shortcutChar"), MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ff0d2fL, 0x71dc7d539b7857cfL, "commandOnCreate"), MetaAdapterFactory.getReferenceLink(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x33f4c34299ff0d2fL, 0x33f4c34299ff0d30L, "baseNodeConcept")).icon(IconContainer.RESOURCE_a0a0zb).create();
  private final ConceptPresentation props_EditorTabReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ElementListContents = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumerateChildrenFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EverywhereActionPlace = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetComponentBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetGroupOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetNodeBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetNodesBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetSelectedTabOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GroupAccessOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GroupAnchor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GroupContents = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GroupType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IdeaActionsDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IdeaConfigurationXml = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IdeaInitializerDescriptor = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0qc).create();
  private final ConceptPresentation props_IdeaPluginDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InterfaceExtentionPoint = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InterfaceGroup = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsApplicableBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsApplicableTabBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_KeyMapKeystroke = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_KeyStrokeType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_KeymapChangesDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0zc).create();
  private final ConceptPresentation props_KeymapRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListenBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MPSPluginDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModificationStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodesBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NonDumbAwareActions = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NumberToolShortcut = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OldConceptsBlock = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_OldCreateBlock = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_OnAfterReadBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OnBeforeWriteBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Order = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrderConstraints = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrderReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterCondition_ConceptFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterizedShortcutChange = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PersistentPropertyDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PersistentPropertyReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PinTabOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PluginDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PopupCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PreferencePage = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119e269a79fL, 0x119e28e412bL, "iconPath"), MetaAdapterFactory.getProperty(0x28f9e4973b424291L, 0xaeba0a1039153ab1L, 0x119e269a79fL, 0x159c8001ffadea11L, "helpTopic")).create();
  private final ConceptPresentation props_PreferencePageCommitBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PreferencePageIsModifiedBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PreferencePageResetBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PreferencesComponentDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0zd).create();
  private final ConceptPresentation props_PreferencesComponentType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequiredCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Separator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShortcutChange = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleActionPlace = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleShortcutChange = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SmartDisposeClosureParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TabbedToolDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TabbedToolOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToStringConceptFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToStringParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToolActionPlace = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToolDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToolInstanceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToolKeystroke = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToolTab = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToolType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ToolbarCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnpinTabOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UpdateBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UpdateGroupBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UpdateGroupFunction = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractToolKeystroke:
        return props_AbstractToolKeystroke;
      case LanguageConceptSwitch.AbstractToolShortcut:
        return props_AbstractToolShortcut;
      case LanguageConceptSwitch.ActionAccessOperation:
        return props_ActionAccessOperation;
      case LanguageConceptSwitch.ActionConstructionParameterDeclaration:
        return props_ActionConstructionParameterDeclaration;
      case LanguageConceptSwitch.ActionConstructorParameterReferenceOperation:
        return props_ActionConstructorParameterReferenceOperation;
      case LanguageConceptSwitch.ActionDataParameterDeclaration:
        return props_ActionDataParameterDeclaration;
      case LanguageConceptSwitch.ActionDataParameterReferenceOperation:
        return props_ActionDataParameterReferenceOperation;
      case LanguageConceptSwitch.ActionDeclaration:
        return props_ActionDeclaration;
      case LanguageConceptSwitch.ActionGroupDeclaration:
        return props_ActionGroupDeclaration;
      case LanguageConceptSwitch.ActionGroupMember:
        return props_ActionGroupMember;
      case LanguageConceptSwitch.ActionGroupRef:
        return props_ActionGroupRef;
      case LanguageConceptSwitch.ActionInstance:
        return props_ActionInstance;
      case LanguageConceptSwitch.ActionParameter:
        return props_ActionParameter;
      case LanguageConceptSwitch.ActionParameterCondition:
        return props_ActionParameterCondition;
      case LanguageConceptSwitch.ActionParameterDeclaration:
        return props_ActionParameterDeclaration;
      case LanguageConceptSwitch.ActionParameterReference:
        return props_ActionParameterReference;
      case LanguageConceptSwitch.ActionParameterReferenceOperation:
        return props_ActionParameterReferenceOperation;
      case LanguageConceptSwitch.ActionPlaceSpecification:
        return props_ActionPlaceSpecification;
      case LanguageConceptSwitch.ActionReference:
        return props_ActionReference;
      case LanguageConceptSwitch.ActionType:
        return props_ActionType;
      case LanguageConceptSwitch.AddElementStatement:
        return props_AddElementStatement;
      case LanguageConceptSwitch.AddKeystrokeStatement:
        return props_AddKeystrokeStatement;
      case LanguageConceptSwitch.AddStatement:
        return props_AddStatement;
      case LanguageConceptSwitch.AddTabOperation:
        return props_AddTabOperation;
      case LanguageConceptSwitch.BaseNodeBlock:
        return props_BaseNodeBlock;
      case LanguageConceptSwitch.BaseProjectOperation:
        return props_BaseProjectOperation;
      case LanguageConceptSwitch.BaseToolDeclaration:
        return props_BaseToolDeclaration;
      case LanguageConceptSwitch.BuildGroupBlock:
        return props_BuildGroupBlock;
      case LanguageConceptSwitch.ButtonCreator:
        return props_ButtonCreator;
      case LanguageConceptSwitch.CloseTabOperation:
        return props_CloseTabOperation;
      case LanguageConceptSwitch.ConceptCondition:
        return props_ConceptCondition;
      case LanguageConceptSwitch.ConceptFunctionParameter_AnActionEvent:
        return props_ConceptFunctionParameter_AnActionEvent;
      case LanguageConceptSwitch.ConceptFunctionParameter_Concept:
        return props_ConceptFunctionParameter_Concept;
      case LanguageConceptSwitch.ConceptFunctionParameter_CreatorType:
        return props_ConceptFunctionParameter_CreatorType;
      case LanguageConceptSwitch.ConceptFunctionParameter_IModule:
        return props_ConceptFunctionParameter_IModule;
      case LanguageConceptSwitch.ConceptFunctionParameter_MPSProject:
        return props_ConceptFunctionParameter_MPSProject;
      case LanguageConceptSwitch.ConceptFunctionParameter_Model:
        return props_ConceptFunctionParameter_Model;
      case LanguageConceptSwitch.ConceptFunctionParameter_OperationContext:
        return props_ConceptFunctionParameter_OperationContext;
      case LanguageConceptSwitch.ConceptFunctionParameter_PreferencePage_component:
        return props_ConceptFunctionParameter_PreferencePage_component;
      case LanguageConceptSwitch.ConceptFunctionParameter_Project:
        return props_ConceptFunctionParameter_Project;
      case LanguageConceptSwitch.ConceptFunctionParameter_SConceptClass:
        return props_ConceptFunctionParameter_SConceptClass;
      case LanguageConceptSwitch.ConceptFunctionParameter_node:
        return props_ConceptFunctionParameter_node;
      case LanguageConceptSwitch.ConceptsBlock:
        return props_ConceptsBlock;
      case LanguageConceptSwitch.CreateBlock:
        return props_CreateBlock;
      case LanguageConceptSwitch.CreateNodeAspectBlock:
        return props_CreateNodeAspectBlock;
      case LanguageConceptSwitch.CreateTabBlock:
        return props_CreateTabBlock;
      case LanguageConceptSwitch.CustomCondition:
        return props_CustomCondition;
      case LanguageConceptSwitch.CustomToolShortcut:
        return props_CustomToolShortcut;
      case LanguageConceptSwitch.DisposeBlock:
        return props_DisposeBlock;
      case LanguageConceptSwitch.DoUpdateBlock:
        return props_DoUpdateBlock;
      case LanguageConceptSwitch.EditableModel:
        return props_EditableModel;
      case LanguageConceptSwitch.EditorTab:
        return props_EditorTab;
      case LanguageConceptSwitch.EditorTabReference:
        return props_EditorTabReference;
      case LanguageConceptSwitch.ElementListContents:
        return props_ElementListContents;
      case LanguageConceptSwitch.EnumerateChildrenFunction:
        return props_EnumerateChildrenFunction;
      case LanguageConceptSwitch.EverywhereActionPlace:
        return props_EverywhereActionPlace;
      case LanguageConceptSwitch.ExecuteBlock:
        return props_ExecuteBlock;
      case LanguageConceptSwitch.GetComponentBlock:
        return props_GetComponentBlock;
      case LanguageConceptSwitch.GetGroupOperation:
        return props_GetGroupOperation;
      case LanguageConceptSwitch.GetNodeBlock:
        return props_GetNodeBlock;
      case LanguageConceptSwitch.GetNodesBlock:
        return props_GetNodesBlock;
      case LanguageConceptSwitch.GetSelectedTabOperation:
        return props_GetSelectedTabOperation;
      case LanguageConceptSwitch.GroupAccessOperation:
        return props_GroupAccessOperation;
      case LanguageConceptSwitch.GroupAnchor:
        return props_GroupAnchor;
      case LanguageConceptSwitch.GroupContents:
        return props_GroupContents;
      case LanguageConceptSwitch.GroupType:
        return props_GroupType;
      case LanguageConceptSwitch.IdeaActionsDescriptor:
        return props_IdeaActionsDescriptor;
      case LanguageConceptSwitch.IdeaConfigurationXml:
        return props_IdeaConfigurationXml;
      case LanguageConceptSwitch.IdeaInitializerDescriptor:
        return props_IdeaInitializerDescriptor;
      case LanguageConceptSwitch.IdeaPluginDependency:
        return props_IdeaPluginDependency;
      case LanguageConceptSwitch.InitBlock:
        return props_InitBlock;
      case LanguageConceptSwitch.InterfaceExtentionPoint:
        return props_InterfaceExtentionPoint;
      case LanguageConceptSwitch.InterfaceGroup:
        return props_InterfaceGroup;
      case LanguageConceptSwitch.IsApplicableBlock:
        return props_IsApplicableBlock;
      case LanguageConceptSwitch.IsApplicableTabBlock:
        return props_IsApplicableTabBlock;
      case LanguageConceptSwitch.KeyMapKeystroke:
        return props_KeyMapKeystroke;
      case LanguageConceptSwitch.KeyStrokeType:
        return props_KeyStrokeType;
      case LanguageConceptSwitch.KeymapChangesDeclaration:
        return props_KeymapChangesDeclaration;
      case LanguageConceptSwitch.KeymapRef:
        return props_KeymapRef;
      case LanguageConceptSwitch.ListenBlock:
        return props_ListenBlock;
      case LanguageConceptSwitch.MPSPluginDependency:
        return props_MPSPluginDependency;
      case LanguageConceptSwitch.ModificationStatement:
        return props_ModificationStatement;
      case LanguageConceptSwitch.NodesBlock:
        return props_NodesBlock;
      case LanguageConceptSwitch.NonDumbAwareActions:
        return props_NonDumbAwareActions;
      case LanguageConceptSwitch.NumberToolShortcut:
        return props_NumberToolShortcut;
      case LanguageConceptSwitch.OldConceptsBlock:
        return props_OldConceptsBlock;
      case LanguageConceptSwitch.OldCreateBlock:
        return props_OldCreateBlock;
      case LanguageConceptSwitch.OnAfterReadBlock:
        return props_OnAfterReadBlock;
      case LanguageConceptSwitch.OnBeforeWriteBlock:
        return props_OnBeforeWriteBlock;
      case LanguageConceptSwitch.Order:
        return props_Order;
      case LanguageConceptSwitch.OrderConstraints:
        return props_OrderConstraints;
      case LanguageConceptSwitch.OrderReference:
        return props_OrderReference;
      case LanguageConceptSwitch.ParameterCondition_ConceptFunctionParameter:
        return props_ParameterCondition_ConceptFunctionParameter;
      case LanguageConceptSwitch.ParameterizedShortcutChange:
        return props_ParameterizedShortcutChange;
      case LanguageConceptSwitch.PersistentPropertyDeclaration:
        return props_PersistentPropertyDeclaration;
      case LanguageConceptSwitch.PersistentPropertyReference:
        return props_PersistentPropertyReference;
      case LanguageConceptSwitch.PinTabOperation:
        return props_PinTabOperation;
      case LanguageConceptSwitch.PluginDependency:
        return props_PluginDependency;
      case LanguageConceptSwitch.PopupCreator:
        return props_PopupCreator;
      case LanguageConceptSwitch.PreferencePage:
        return props_PreferencePage;
      case LanguageConceptSwitch.PreferencePageCommitBlock:
        return props_PreferencePageCommitBlock;
      case LanguageConceptSwitch.PreferencePageIsModifiedBlock:
        return props_PreferencePageIsModifiedBlock;
      case LanguageConceptSwitch.PreferencePageResetBlock:
        return props_PreferencePageResetBlock;
      case LanguageConceptSwitch.PreferencesComponentDeclaration:
        return props_PreferencesComponentDeclaration;
      case LanguageConceptSwitch.PreferencesComponentType:
        return props_PreferencesComponentType;
      case LanguageConceptSwitch.RequiredCondition:
        return props_RequiredCondition;
      case LanguageConceptSwitch.Separator:
        return props_Separator;
      case LanguageConceptSwitch.ShortcutChange:
        return props_ShortcutChange;
      case LanguageConceptSwitch.SimpleActionPlace:
        return props_SimpleActionPlace;
      case LanguageConceptSwitch.SimpleShortcutChange:
        return props_SimpleShortcutChange;
      case LanguageConceptSwitch.SmartDisposeClosureParameterDeclaration:
        return props_SmartDisposeClosureParameterDeclaration;
      case LanguageConceptSwitch.TabbedToolDeclaration:
        return props_TabbedToolDeclaration;
      case LanguageConceptSwitch.TabbedToolOperation:
        return props_TabbedToolOperation;
      case LanguageConceptSwitch.ToStringConceptFunction:
        return props_ToStringConceptFunction;
      case LanguageConceptSwitch.ToStringParameter:
        return props_ToStringParameter;
      case LanguageConceptSwitch.ToolActionPlace:
        return props_ToolActionPlace;
      case LanguageConceptSwitch.ToolDeclaration:
        return props_ToolDeclaration;
      case LanguageConceptSwitch.ToolInstanceExpression:
        return props_ToolInstanceExpression;
      case LanguageConceptSwitch.ToolKeystroke:
        return props_ToolKeystroke;
      case LanguageConceptSwitch.ToolTab:
        return props_ToolTab;
      case LanguageConceptSwitch.ToolType:
        return props_ToolType;
      case LanguageConceptSwitch.ToolbarCreator:
        return props_ToolbarCreator;
      case LanguageConceptSwitch.UnpinTabOperation:
        return props_UnpinTabOperation;
      case LanguageConceptSwitch.UpdateBlock:
        return props_UpdateBlock;
      case LanguageConceptSwitch.UpdateGroupBlock:
        return props_UpdateGroupBlock;
      case LanguageConceptSwitch.UpdateGroupFunction:
        return props_UpdateGroupFunction;
    }
    return null;
  }
}
