package jetbrains.mps.lang.traceable.operations.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(2);
  /*package*/ final ConceptDescriptor myConceptNList_CopyWithTraceOperation = createDescriptorForNList_CopyWithTraceOperation();
  /*package*/ final ConceptDescriptor myConceptNode_CopyWithTraceOperation = createDescriptorForNode_CopyWithTraceOperation();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptNList_CopyWithTraceOperation.getId(), 0);
    myIndexMap.put(myConceptNode_CopyWithTraceOperation.getId(), 1);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptNList_CopyWithTraceOperation, myConceptNode_CopyWithTraceOperation);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptNList_CopyWithTraceOperation;
      case 1:
        return myConceptNode_CopyWithTraceOperation;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForNList_CopyWithTraceOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.traceable.operations", "NList_CopyWithTraceOperation", 0xeba1dbb30bc44ce9L, 0xa18405c9135353beL, 0x242191b44da0af07L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:1e4195e3-e1e5-4a37-8e8b-eab96753b17f(jetbrains.mps.lang.traceable.operations.structure)/2603522263179374343");
    b.aggregate("argument", 0x242191b44da0af0cL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("2603522263179374348").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("copy list with trace");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNode_CopyWithTraceOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.traceable.operations", "Node_CopyWithTraceOperation", 0xeba1dbb30bc44ce9L, 0xa18405c9135353beL, 0x6058d1d9e79eef7bL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.smodel.structure.SNodeOperation", 0x7866978ea0f04cc7L, 0x81bc4d213d9375e1L, 0x1090ea2ebacL);
    b.origin("r:1e4195e3-e1e5-4a37-8e8b-eab96753b17f(jetbrains.mps.lang.traceable.operations.structure)/6942529559415680891");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("copy with trace");
    return b.create();
  }
}
