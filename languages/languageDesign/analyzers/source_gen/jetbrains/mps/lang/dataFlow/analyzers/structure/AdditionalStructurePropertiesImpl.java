package jetbrains.mps.lang.dataFlow.analyzers.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_AnalysisDirection = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Analyzer = new ConceptPropsBuilder().icon("DataFlowAnalyser.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_AnalyzerConstructorParameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnalyzerConstructorParameterReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnalyzerFunFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnalyzerFunParameterInput = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnalyzerFunParameterProgramState = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnalyzerFunctionResultType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnalyzerInitialFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnalyzerMergeFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnalyzerMergeParameterInput = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnalyzerParameterProgram = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnalyzerRunnerAnalyzeOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnalyzerRunnerClassKeeper = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnalyzerRunnerCreator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnalyzerRunnerType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AnalyzerTypeAnnotation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ApplicableCondition = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ApplicableNodeReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BackwardDirection = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptCondition = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EmitInstruction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ForwardDirection = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InsertAfterPosition = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InsertBeforePosition = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InsertPosition = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Instruction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InstructionClassKeeper = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InstructionParameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InstructionReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IsOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PatternCondition = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Rule = new ConceptPropsBuilder().icon("DataFlowRule.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_RuleReference = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0jb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AnalysisDirection;
          }
          break;
        case 1:
          if (true) {
            return props_Analyzer;
          }
          break;
        case 2:
          if (true) {
            return props_AnalyzerConstructorParameter;
          }
          break;
        case 3:
          if (true) {
            return props_AnalyzerConstructorParameterReference;
          }
          break;
        case 4:
          if (true) {
            return props_AnalyzerFunFunction;
          }
          break;
        case 5:
          if (true) {
            return props_AnalyzerFunParameterInput;
          }
          break;
        case 6:
          if (true) {
            return props_AnalyzerFunParameterProgramState;
          }
          break;
        case 7:
          if (true) {
            return props_AnalyzerFunctionResultType;
          }
          break;
        case 8:
          if (true) {
            return props_AnalyzerInitialFunction;
          }
          break;
        case 9:
          if (true) {
            return props_AnalyzerMergeFunction;
          }
          break;
        case 10:
          if (true) {
            return props_AnalyzerMergeParameterInput;
          }
          break;
        case 11:
          if (true) {
            return props_AnalyzerParameterProgram;
          }
          break;
        case 12:
          if (true) {
            return props_AnalyzerRunnerAnalyzeOperation;
          }
          break;
        case 13:
          if (true) {
            return props_AnalyzerRunnerClassKeeper;
          }
          break;
        case 14:
          if (true) {
            return props_AnalyzerRunnerCreator;
          }
          break;
        case 15:
          if (true) {
            return props_AnalyzerRunnerType;
          }
          break;
        case 16:
          if (true) {
            return props_AnalyzerTypeAnnotation;
          }
          break;
        case 17:
          if (true) {
            return props_ApplicableCondition;
          }
          break;
        case 18:
          if (true) {
            return props_ApplicableNodeReference;
          }
          break;
        case 19:
          if (true) {
            return props_BackwardDirection;
          }
          break;
        case 20:
          if (true) {
            return props_ConceptCondition;
          }
          break;
        case 21:
          if (true) {
            return props_EmitInstruction;
          }
          break;
        case 22:
          if (true) {
            return props_ForwardDirection;
          }
          break;
        case 23:
          if (true) {
            return props_InsertAfterPosition;
          }
          break;
        case 24:
          if (true) {
            return props_InsertBeforePosition;
          }
          break;
        case 25:
          if (true) {
            return props_InsertPosition;
          }
          break;
        case 26:
          if (true) {
            return props_Instruction;
          }
          break;
        case 27:
          if (true) {
            return props_InstructionClassKeeper;
          }
          break;
        case 28:
          if (true) {
            return props_InstructionParameter;
          }
          break;
        case 29:
          if (true) {
            return props_InstructionReference;
          }
          break;
        case 30:
          if (true) {
            return props_IsOperation;
          }
          break;
        case 31:
          if (true) {
            return props_PatternCondition;
          }
          break;
        case 32:
          if (true) {
            return props_Rule;
          }
          break;
        case 33:
          if (true) {
            return props_RuleReference;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0jb = buildConceptIndices(MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x7f5b799a00c2fb86L, "AnalysisDirection"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x5bd9e43c93f46789L, "Analyzer"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x376a4d52f8c420b0L, "AnalyzerConstructorParameter"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x376a4d52f8c421f8L, "AnalyzerConstructorParameterReference"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x41dd50940e1dd4c9L, "AnalyzerFunFunction"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x41dd50940e1dd4d4L, "AnalyzerFunParameterInput"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x41dd50940e1dd4d2L, "AnalyzerFunParameterProgramState"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x7f5b799a00c52fa7L, "AnalyzerFunctionResultType"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x41dd50940e1dd4c8L, "AnalyzerInitialFunction"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x58ba0a6689e9c309L, "AnalyzerMergeFunction"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x41dd50940e1d7ec5L, "AnalyzerMergeParameterInput"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x41dd50940e1d7ebcL, "AnalyzerParameterProgram"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x151c4f99e489a11L, "AnalyzerRunnerAnalyzeOperation"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x13ac225cc9e9f5bfL, "AnalyzerRunnerClassKeeper"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x151c4f99e489a16L, "AnalyzerRunnerCreator"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x1c63af9d2f3a7f23L, "AnalyzerRunnerType"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x54720c1a488325eaL, "AnalyzerTypeAnnotation"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x2e25b6b7919dd6d8L, "ApplicableCondition"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x449938e788f30110L, "ApplicableNodeReference"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x7f5b799a00c2fb96L, "BackwardDirection"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x449938e788e9b9deL, "ConceptCondition"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x3a887e9da0b3e894L, "EmitInstruction"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x7f5b799a00c2fb88L, "ForwardDirection"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x74ea0fbaafcebf24L, "InsertAfterPosition"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x74ea0fbaafce9c9fL, "InsertBeforePosition"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x74ea0fbaafcebf23L, "InsertPosition"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x5bd9e43c93f4678aL, "Instruction"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x57e18a43f31d0ef6L, "InstructionClassKeeper"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x5faaa6bbd583aa0L, "InstructionParameter"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x3a887e9da0b4cedcL, "InstructionReference"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x6ed2c546d46ea462L, "IsOperation"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x2e25b6b7919e0b63L, "PatternCondition"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x5faaa6bbd57b6c8L, "Rule"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0xa72ff3b2ca7c5b0L, "RuleReference"));
}
