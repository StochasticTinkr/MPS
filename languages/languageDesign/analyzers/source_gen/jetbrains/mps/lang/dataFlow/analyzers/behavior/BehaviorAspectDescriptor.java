package jetbrains.mps.lang.dataFlow.analyzers.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myRule__BehaviorDescriptor = new Rule__BehaviorDescriptor();
  private final BHDescriptor myApplicableCondition__BehaviorDescriptor = new ApplicableCondition__BehaviorDescriptor();
  private final BHDescriptor myPatternCondition__BehaviorDescriptor = new PatternCondition__BehaviorDescriptor();
  private final BHDescriptor myAnalyzerConstructorParameterReference__BehaviorDescriptor = new AnalyzerConstructorParameterReference__BehaviorDescriptor();
  private final BHDescriptor myInstructionReference__BehaviorDescriptor = new InstructionReference__BehaviorDescriptor();
  private final BHDescriptor myAnalyzerInitialFunction__BehaviorDescriptor = new AnalyzerInitialFunction__BehaviorDescriptor();
  private final BHDescriptor myAnalyzerFunFunction__BehaviorDescriptor = new AnalyzerFunFunction__BehaviorDescriptor();
  private final BHDescriptor myConceptCondition__BehaviorDescriptor = new ConceptCondition__BehaviorDescriptor();
  private final BHDescriptor myAnalyzerMergeFunction__BehaviorDescriptor = new AnalyzerMergeFunction__BehaviorDescriptor();
  private final BHDescriptor myAnalyzer__BehaviorDescriptor = new Analyzer__BehaviorDescriptor();
  private final BHDescriptor myInstruction__BehaviorDescriptor = new Instruction__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0o.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myAnalyzer__BehaviorDescriptor;
          }
          break;
        case 1:
          if (true) {
            return myAnalyzerConstructorParameterReference__BehaviorDescriptor;
          }
          break;
        case 2:
          if (true) {
            return myAnalyzerFunFunction__BehaviorDescriptor;
          }
          break;
        case 3:
          if (true) {
            return myAnalyzerInitialFunction__BehaviorDescriptor;
          }
          break;
        case 4:
          if (true) {
            return myAnalyzerMergeFunction__BehaviorDescriptor;
          }
          break;
        case 5:
          if (true) {
            return myApplicableCondition__BehaviorDescriptor;
          }
          break;
        case 6:
          if (true) {
            return myConceptCondition__BehaviorDescriptor;
          }
          break;
        case 7:
          if (true) {
            return myInstruction__BehaviorDescriptor;
          }
          break;
        case 8:
          if (true) {
            return myInstructionReference__BehaviorDescriptor;
          }
          break;
        case 9:
          if (true) {
            return myPatternCondition__BehaviorDescriptor;
          }
          break;
        case 10:
          if (true) {
            return myRule__BehaviorDescriptor;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0o = buildConceptIndices(MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x5bd9e43c93f46789L, "jetbrains.mps.lang.dataFlow.analyzers.structure.Analyzer"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x376a4d52f8c421f8L, "jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerConstructorParameterReference"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x41dd50940e1dd4c9L, "jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerFunFunction"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x41dd50940e1dd4c8L, "jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerInitialFunction"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x58ba0a6689e9c309L, "jetbrains.mps.lang.dataFlow.analyzers.structure.AnalyzerMergeFunction"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x2e25b6b7919dd6d8L, "jetbrains.mps.lang.dataFlow.analyzers.structure.ApplicableCondition"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x449938e788e9b9deL, "jetbrains.mps.lang.dataFlow.analyzers.structure.ConceptCondition"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x5bd9e43c93f4678aL, "jetbrains.mps.lang.dataFlow.analyzers.structure.Instruction"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x3a887e9da0b4cedcL, "jetbrains.mps.lang.dataFlow.analyzers.structure.InstructionReference"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x2e25b6b7919e0b63L, "jetbrains.mps.lang.dataFlow.analyzers.structure.PatternCondition"), MetaAdapterFactory.getConcept(0x97a52717898f4598L, 0x8150573d9fd03868L, 0x5faaa6bbd57b6c8L, "jetbrains.mps.lang.dataFlow.analyzers.structure.Rule"));
}
