package jetbrains.mps.lang.dataFlow.analyzers.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AnalysisDirection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Analyzer = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0b).create();
  private final ConceptPresentation props_AnalyzerConstructorParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnalyzerConstructorParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnalyzerFunFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnalyzerFunParameterInput = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnalyzerFunParameterProgramState = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnalyzerFunParameterStateValues = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnalyzerFunctionResultType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnalyzerInitialFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnalyzerMergeFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnalyzerMergeParameterInput = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnalyzerParameterProgram = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnalyzerRunnerAnalyzeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnalyzerRunnerClassKeeper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnalyzerRunnerCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AnalyzerRunnerType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ApplicableCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ApplicableNodeReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BackwardDirection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomInstructionsContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomInstructionsContainerReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmitInstruction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ForwardDirection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InsertAfterPosition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InsertBeforePosition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InsertPosition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Instruction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstructionClassKeeper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstructionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstructionReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PatternCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProgramParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Rule = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0jb).create();
  private final ConceptPresentation props_RuleReference = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AnalysisDirection:
        return props_AnalysisDirection;
      case LanguageConceptSwitch.Analyzer:
        return props_Analyzer;
      case LanguageConceptSwitch.AnalyzerConstructorParameter:
        return props_AnalyzerConstructorParameter;
      case LanguageConceptSwitch.AnalyzerConstructorParameterReference:
        return props_AnalyzerConstructorParameterReference;
      case LanguageConceptSwitch.AnalyzerFunFunction:
        return props_AnalyzerFunFunction;
      case LanguageConceptSwitch.AnalyzerFunParameterInput:
        return props_AnalyzerFunParameterInput;
      case LanguageConceptSwitch.AnalyzerFunParameterProgramState:
        return props_AnalyzerFunParameterProgramState;
      case LanguageConceptSwitch.AnalyzerFunParameterStateValues:
        return props_AnalyzerFunParameterStateValues;
      case LanguageConceptSwitch.AnalyzerFunctionResultType:
        return props_AnalyzerFunctionResultType;
      case LanguageConceptSwitch.AnalyzerInitialFunction:
        return props_AnalyzerInitialFunction;
      case LanguageConceptSwitch.AnalyzerMergeFunction:
        return props_AnalyzerMergeFunction;
      case LanguageConceptSwitch.AnalyzerMergeParameterInput:
        return props_AnalyzerMergeParameterInput;
      case LanguageConceptSwitch.AnalyzerParameterProgram:
        return props_AnalyzerParameterProgram;
      case LanguageConceptSwitch.AnalyzerRunnerAnalyzeOperation:
        return props_AnalyzerRunnerAnalyzeOperation;
      case LanguageConceptSwitch.AnalyzerRunnerClassKeeper:
        return props_AnalyzerRunnerClassKeeper;
      case LanguageConceptSwitch.AnalyzerRunnerCreator:
        return props_AnalyzerRunnerCreator;
      case LanguageConceptSwitch.AnalyzerRunnerType:
        return props_AnalyzerRunnerType;
      case LanguageConceptSwitch.ApplicableCondition:
        return props_ApplicableCondition;
      case LanguageConceptSwitch.ApplicableNodeReference:
        return props_ApplicableNodeReference;
      case LanguageConceptSwitch.BackwardDirection:
        return props_BackwardDirection;
      case LanguageConceptSwitch.ConceptCondition:
        return props_ConceptCondition;
      case LanguageConceptSwitch.CustomInstructionsContainer:
        return props_CustomInstructionsContainer;
      case LanguageConceptSwitch.CustomInstructionsContainerReference:
        return props_CustomInstructionsContainerReference;
      case LanguageConceptSwitch.EmitInstruction:
        return props_EmitInstruction;
      case LanguageConceptSwitch.ForwardDirection:
        return props_ForwardDirection;
      case LanguageConceptSwitch.InsertAfterPosition:
        return props_InsertAfterPosition;
      case LanguageConceptSwitch.InsertBeforePosition:
        return props_InsertBeforePosition;
      case LanguageConceptSwitch.InsertPosition:
        return props_InsertPosition;
      case LanguageConceptSwitch.Instruction:
        return props_Instruction;
      case LanguageConceptSwitch.InstructionClassKeeper:
        return props_InstructionClassKeeper;
      case LanguageConceptSwitch.InstructionParameter:
        return props_InstructionParameter;
      case LanguageConceptSwitch.InstructionReference:
        return props_InstructionReference;
      case LanguageConceptSwitch.IsOperation:
        return props_IsOperation;
      case LanguageConceptSwitch.PatternCondition:
        return props_PatternCondition;
      case LanguageConceptSwitch.ProgramParameter:
        return props_ProgramParameter;
      case LanguageConceptSwitch.Rule:
        return props_Rule;
      case LanguageConceptSwitch.RuleReference:
        return props_RuleReference;
    }
    return null;
  }
}
