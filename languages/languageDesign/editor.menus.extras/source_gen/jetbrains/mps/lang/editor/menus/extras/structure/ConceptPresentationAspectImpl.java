package jetbrains.mps.lang.editor.menus.extras.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_QueryFunctionParameter_IntentionExecutable;
  private ConceptPresentation props_TransformationMenuPart_Intention;
  private ConceptPresentation props_TransformationMenuPart_PluginAction;
  private ConceptPresentation props_TransformationMenuPart_Refactoring;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.QueryFunctionParameter_IntentionExecutable:
        if (props_QueryFunctionParameter_IntentionExecutable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("the runtime representation of the intention");
          props_QueryFunctionParameter_IntentionExecutable = cpb.create();
        }
        return props_QueryFunctionParameter_IntentionExecutable;
      case LanguageConceptSwitch.TransformationMenuPart_Intention:
        if (props_TransformationMenuPart_Intention == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("performs an intention");
          props_TransformationMenuPart_Intention = cpb.create();
        }
        return props_TransformationMenuPart_Intention;
      case LanguageConceptSwitch.TransformationMenuPart_PluginAction:
        if (props_TransformationMenuPart_PluginAction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("plugin action item");
          props_TransformationMenuPart_PluginAction = cpb.create();
        }
        return props_TransformationMenuPart_PluginAction;
      case LanguageConceptSwitch.TransformationMenuPart_Refactoring:
        if (props_TransformationMenuPart_Refactoring == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("performs a refactoring");
          props_TransformationMenuPart_Refactoring = cpb.create();
        }
        return props_TransformationMenuPart_Refactoring;
    }
    return null;
  }
}
