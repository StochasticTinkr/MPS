package jetbrains.mps.lang.constraints.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myNodePropertyConstraint__BehaviorDescriptor = new NodePropertyConstraint__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_PropertyGetter__BehaviorDescriptor = new ConstraintFunction_PropertyGetter__BehaviorDescriptor();
  private final BHDescriptor myConstraintsFunctionParameter_node__BehaviorDescriptor = new ConstraintsFunctionParameter_node__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_ReferentSearchScope_Factory__BehaviorDescriptor = new ConstraintFunction_ReferentSearchScope_Factory__BehaviorDescriptor();
  private final BHDescriptor myNodeReferentConstraint__BehaviorDescriptor = new NodeReferentConstraint__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_ReferentSearchScope_AbstractBase__BehaviorDescriptor = new ConstraintFunction_ReferentSearchScope_AbstractBase__BehaviorDescriptor();
  private final BHDescriptor myConceptParameter_ReferentSearchScope_enclosingNode__BehaviorDescriptor = new ConceptParameter_ReferentSearchScope_enclosingNode__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_PropertySetter__BehaviorDescriptor = new ConstraintFunction_PropertySetter__BehaviorDescriptor();
  private final BHDescriptor myNodeDefaultSearchScope__BehaviorDescriptor = new NodeDefaultSearchScope__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_ReferentSetHandler__BehaviorDescriptor = new ConstraintFunction_ReferentSetHandler__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_CanBeAChild__BehaviorDescriptor = new ConstraintFunction_CanBeAChild__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunctionParameter_parentNode__BehaviorDescriptor = new ConstraintFunctionParameter_parentNode__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_CanBeAParent__BehaviorDescriptor = new ConstraintFunction_CanBeAParent__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunctionParameter_childConcept__BehaviorDescriptor = new ConstraintFunctionParameter_childConcept__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunctionParameter_link__BehaviorDescriptor = new ConstraintFunctionParameter_link__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_PropertyValidator__BehaviorDescriptor = new ConstraintFunction_PropertyValidator__BehaviorDescriptor();
  private final BHDescriptor myConceptConstraints__BehaviorDescriptor = new ConceptConstraints__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_CanBeARoot__BehaviorDescriptor = new ConstraintFunction_CanBeARoot__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_GetInstanceIcon__BehaviorDescriptor = new ConstraintFunction_GetInstanceIcon__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunctionParameter_containingLink__BehaviorDescriptor = new ConstraintFunctionParameter_containingLink__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunctionParameter_checkedNode__BehaviorDescriptor = new ConstraintFunctionParameter_checkedNode__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_ReferentSearchScope_Validator__BehaviorDescriptor = new ConstraintFunction_ReferentSearchScope_Validator__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_GetAlternativeIcon__BehaviorDescriptor = new ConstraintFunction_GetAlternativeIcon__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_ReferentSearchScope_Presentation__BehaviorDescriptor = new ConstraintFunction_ReferentSearchScope_Presentation__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunctionParameter_inEditor__BehaviorDescriptor = new ConstraintFunctionParameter_inEditor__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunctionParameter_contextRole__BehaviorDescriptor = new ConstraintFunctionParameter_contextRole__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunctionParameter_exists__BehaviorDescriptor = new ConstraintFunctionParameter_exists__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunctionParameter_position__BehaviorDescriptor = new ConstraintFunctionParameter_position__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_RefSetHandlerKeepsReference__BehaviorDescriptor = new ConstraintFunction_RefSetHandlerKeepsReference__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_ReferentSearchScope_Scope__BehaviorDescriptor = new ConstraintFunction_ReferentSearchScope_Scope__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunctionParameter_childNode__BehaviorDescriptor = new ConstraintFunctionParameter_childNode__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunctionParameter_visible__BehaviorDescriptor = new ConstraintFunctionParameter_visible__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunctionParameter_smartReference__BehaviorDescriptor = new ConstraintFunctionParameter_smartReference__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunction_CanBeAnAncestor__BehaviorDescriptor = new ConstraintFunction_CanBeAnAncestor__BehaviorDescriptor();
  private final BHDescriptor myConstraintFunctionParameter_contextNode__BehaviorDescriptor = new ConstraintFunctionParameter_contextNode__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0mb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myConceptConstraints__BehaviorDescriptor;
          }
          break;
        case 1:
          if (true) {
            return myConceptParameter_ReferentSearchScope_enclosingNode__BehaviorDescriptor;
          }
          break;
        case 2:
          if (true) {
            return myConstraintFunctionParameter_checkedNode__BehaviorDescriptor;
          }
          break;
        case 3:
          if (true) {
            return myConstraintFunctionParameter_childConcept__BehaviorDescriptor;
          }
          break;
        case 4:
          if (true) {
            return myConstraintFunctionParameter_childNode__BehaviorDescriptor;
          }
          break;
        case 5:
          if (true) {
            return myConstraintFunctionParameter_containingLink__BehaviorDescriptor;
          }
          break;
        case 6:
          if (true) {
            return myConstraintFunctionParameter_contextNode__BehaviorDescriptor;
          }
          break;
        case 7:
          if (true) {
            return myConstraintFunctionParameter_contextRole__BehaviorDescriptor;
          }
          break;
        case 8:
          if (true) {
            return myConstraintFunctionParameter_exists__BehaviorDescriptor;
          }
          break;
        case 9:
          if (true) {
            return myConstraintFunctionParameter_inEditor__BehaviorDescriptor;
          }
          break;
        case 10:
          if (true) {
            return myConstraintFunctionParameter_link__BehaviorDescriptor;
          }
          break;
        case 11:
          if (true) {
            return myConstraintFunctionParameter_parentNode__BehaviorDescriptor;
          }
          break;
        case 12:
          if (true) {
            return myConstraintFunctionParameter_position__BehaviorDescriptor;
          }
          break;
        case 13:
          if (true) {
            return myConstraintFunctionParameter_smartReference__BehaviorDescriptor;
          }
          break;
        case 14:
          if (true) {
            return myConstraintFunctionParameter_visible__BehaviorDescriptor;
          }
          break;
        case 15:
          if (true) {
            return myConstraintFunction_CanBeAChild__BehaviorDescriptor;
          }
          break;
        case 16:
          if (true) {
            return myConstraintFunction_CanBeAParent__BehaviorDescriptor;
          }
          break;
        case 17:
          if (true) {
            return myConstraintFunction_CanBeARoot__BehaviorDescriptor;
          }
          break;
        case 18:
          if (true) {
            return myConstraintFunction_CanBeAnAncestor__BehaviorDescriptor;
          }
          break;
        case 19:
          if (true) {
            return myConstraintFunction_GetAlternativeIcon__BehaviorDescriptor;
          }
          break;
        case 20:
          if (true) {
            return myConstraintFunction_GetInstanceIcon__BehaviorDescriptor;
          }
          break;
        case 21:
          if (true) {
            return myConstraintFunction_PropertyGetter__BehaviorDescriptor;
          }
          break;
        case 22:
          if (true) {
            return myConstraintFunction_PropertySetter__BehaviorDescriptor;
          }
          break;
        case 23:
          if (true) {
            return myConstraintFunction_PropertyValidator__BehaviorDescriptor;
          }
          break;
        case 24:
          if (true) {
            return myConstraintFunction_RefSetHandlerKeepsReference__BehaviorDescriptor;
          }
          break;
        case 25:
          if (true) {
            return myConstraintFunction_ReferentSearchScope_AbstractBase__BehaviorDescriptor;
          }
          break;
        case 26:
          if (true) {
            return myConstraintFunction_ReferentSearchScope_Factory__BehaviorDescriptor;
          }
          break;
        case 27:
          if (true) {
            return myConstraintFunction_ReferentSearchScope_Presentation__BehaviorDescriptor;
          }
          break;
        case 28:
          if (true) {
            return myConstraintFunction_ReferentSearchScope_Scope__BehaviorDescriptor;
          }
          break;
        case 29:
          if (true) {
            return myConstraintFunction_ReferentSearchScope_Validator__BehaviorDescriptor;
          }
          break;
        case 30:
          if (true) {
            return myConstraintFunction_ReferentSetHandler__BehaviorDescriptor;
          }
          break;
        case 31:
          if (true) {
            return myConstraintsFunctionParameter_node__BehaviorDescriptor;
          }
          break;
        case 32:
          if (true) {
            return myNodeDefaultSearchScope__BehaviorDescriptor;
          }
          break;
        case 33:
          if (true) {
            return myNodePropertyConstraint__BehaviorDescriptor;
          }
          break;
        case 34:
          if (true) {
            return myNodeReferentConstraint__BehaviorDescriptor;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0mb = buildConceptIndices(MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11a7208faaeL, "jetbrains.mps.lang.constraints.structure.ConceptConstraints"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10b81d7448bL, "jetbrains.mps.lang.constraints.structure.ConceptParameter_ReferentSearchScope_enclosingNode"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x297f56a5546902a8L, "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_checkedNode"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11818761c19L, "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childConcept"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x5d82bba5f0907509L, "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_childNode"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x295782e439c9459bL, "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_containingLink"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x7c6f6cc2e7bb76f0L, "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextNode"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x40a0f5576472817aL, "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_contextRole"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x40a0f55764728181L, "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_exists"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x3fb59c48ff4b8cfdL, "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_inEditor"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11818f5cad4L, "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_link"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11817c5715bL, "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_parentNode"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x40a0f55764728188L, "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_position"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x5df04ce71509adfdL, "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_smartReference"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x5df04ce71509adf4L, "jetbrains.mps.lang.constraints.structure.ConstraintFunctionParameter_visible"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11817c381baL, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAChild"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x1181873ed50L, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAParent"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11db3f6ffbbL, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeARoot"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x6d03b53f575b9685L, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_CanBeAnAncestor"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x341b038f9307e5cfL, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_GetAlternativeIcon"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x13cd31e62ef65a72L, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_GetInstanceIcon"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10b2a68f861L, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyGetter"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10c71c4f329L, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertySetter"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11a369c051fL, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_PropertyValidator"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x44df12c18fcb2300L, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_RefSetHandlerKeepsReference"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10b81d516b4L, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_AbstractBase"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10b72e99b73L, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Factory"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x36367902116a44c1L, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Presentation"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x4ec772c80d1cb34bL, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Scope"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x30502bd604b2430aL, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSearchScope_Validator"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10ed4250f82L, "jetbrains.mps.lang.constraints.structure.ConstraintFunction_ReferentSetHandler"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10b2a71bcdcL, "jetbrains.mps.lang.constraints.structure.ConstraintsFunctionParameter_node"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10dead47852L, "jetbrains.mps.lang.constraints.structure.NodeDefaultSearchScope"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10b2a5eaa48L, "jetbrains.mps.lang.constraints.structure.NodePropertyConstraint"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10b731752daL, "jetbrains.mps.lang.constraints.structure.NodeReferentConstraint"));
}
