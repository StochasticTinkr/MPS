package jetbrains.mps.lang.constraints.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ConceptConstraints = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11a7208faaeL, 0x11a720969b6L, "concept"), MetaAdapterFactory.getReferenceLink(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11a7208faaeL, 0x11a72ce9037L, "defaultConcreteConcept")).icon(IconContainer.RESOURCE_a0a0a).create();
  private final ConceptPresentation props_ConceptParameter_ReferentSearchScope_enclosingNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_checkedNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_childConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_childNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_containingLink = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_contextNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_contextRole = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_exists = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_inEditor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_link = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_linkTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_newReferentNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_oldReferentNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_parameterNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_parentNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_position = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_referenceNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_smartReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunctionParameter_visible = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_CanBeAChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_CanBeAParent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_CanBeARoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_CanBeAnAncestor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_GetAlternativeIcon = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_GetInstanceIcon = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_PropertyGetter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_PropertySetter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_PropertyValidator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_RefSetHandlerKeepsReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_ReferentSearchScope_AbstractBase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_ReferentSearchScope_Factory = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_ReferentSearchScope_Presentation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_ReferentSearchScope_Scope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_ReferentSearchScope_Validator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintFunction_ReferentSetHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintsFunctionParameter_node = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConstraintsFunctionParameter_propertyValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InheritedNodeScopeFactory = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeDefaultSearchScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodePropertyConstraint = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeReferentConstraint = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeScopeFactory = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("3f4bc5f5-c6c1-4a28-8b10-c83066ffa4a1"), "jetbrains.mps.lang.constraints")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_ConceptConstraints;
      case 1:
        return props_ConceptParameter_ReferentSearchScope_enclosingNode;
      case 2:
        return props_ConstraintFunctionParameter_checkedNode;
      case 3:
        return props_ConstraintFunctionParameter_childConcept;
      case 4:
        return props_ConstraintFunctionParameter_childNode;
      case 5:
        return props_ConstraintFunctionParameter_containingLink;
      case 6:
        return props_ConstraintFunctionParameter_contextNode;
      case 7:
        return props_ConstraintFunctionParameter_contextRole;
      case 8:
        return props_ConstraintFunctionParameter_exists;
      case 9:
        return props_ConstraintFunctionParameter_inEditor;
      case 10:
        return props_ConstraintFunctionParameter_link;
      case 11:
        return props_ConstraintFunctionParameter_linkTarget;
      case 12:
        return props_ConstraintFunctionParameter_newReferentNode;
      case 13:
        return props_ConstraintFunctionParameter_oldReferentNode;
      case 14:
        return props_ConstraintFunctionParameter_parameterNode;
      case 15:
        return props_ConstraintFunctionParameter_parentNode;
      case 16:
        return props_ConstraintFunctionParameter_position;
      case 17:
        return props_ConstraintFunctionParameter_referenceNode;
      case 18:
        return props_ConstraintFunctionParameter_smartReference;
      case 19:
        return props_ConstraintFunctionParameter_visible;
      case 20:
        return props_ConstraintFunction_CanBeAChild;
      case 21:
        return props_ConstraintFunction_CanBeAParent;
      case 22:
        return props_ConstraintFunction_CanBeARoot;
      case 23:
        return props_ConstraintFunction_CanBeAnAncestor;
      case 24:
        return props_ConstraintFunction_GetAlternativeIcon;
      case 25:
        return props_ConstraintFunction_GetInstanceIcon;
      case 26:
        return props_ConstraintFunction_PropertyGetter;
      case 27:
        return props_ConstraintFunction_PropertySetter;
      case 28:
        return props_ConstraintFunction_PropertyValidator;
      case 29:
        return props_ConstraintFunction_RefSetHandlerKeepsReference;
      case 30:
        return props_ConstraintFunction_ReferentSearchScope_AbstractBase;
      case 31:
        return props_ConstraintFunction_ReferentSearchScope_Factory;
      case 32:
        return props_ConstraintFunction_ReferentSearchScope_Presentation;
      case 33:
        return props_ConstraintFunction_ReferentSearchScope_Scope;
      case 34:
        return props_ConstraintFunction_ReferentSearchScope_Validator;
      case 35:
        return props_ConstraintFunction_ReferentSetHandler;
      case 36:
        return props_ConstraintsFunctionParameter_node;
      case 37:
        return props_ConstraintsFunctionParameter_propertyValue;
      case 38:
        return props_InheritedNodeScopeFactory;
      case 39:
        return props_NodeDefaultSearchScope;
      case 40:
        return props_NodePropertyConstraint;
      case 41:
        return props_NodeReferentConstraint;
      case 42:
        return props_NodeScopeFactory;
    }
    throw new IllegalStateException();
  }
}
