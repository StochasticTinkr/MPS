package jetbrains.mps.lang.constraints.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_ConceptConstraints = new ConceptPropsBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11a7208faaeL, 0x11a720969b6L, "concept"), MetaAdapterFactory.getReferenceLink(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11a7208faaeL, 0x11a72ce9037L, "defaultConcreteConcept")).icon("constraints.png", AdditionalStructurePropertiesImpl.class).create();
  private final AdditionalConceptProperties props_ConceptParameter_ReferentSearchScope_enclosingNode = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_checkedNode = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_childConcept = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_childNode = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_containingLink = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_contextNode = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_contextRole = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_exists = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_inEditor = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_link = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_linkTarget = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_newReferentNode = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_oldReferentNode = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_parameterNode = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_parentNode = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_position = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_referenceNode = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_smartReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunctionParameter_visible = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_CanBeAChild = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_CanBeAParent = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_CanBeARoot = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_CanBeAnAncestor = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_GetAlternativeIcon = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_GetInstanceIcon = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_PropertyGetter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_PropertySetter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_PropertyValidator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_RefSetHandlerKeepsReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_ReferentSearchScope_AbstractBase = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_ReferentSearchScope_Factory = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_ReferentSearchScope_Presentation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_ReferentSearchScope_Scope = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_ReferentSearchScope_Validator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintFunction_ReferentSetHandler = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintsFunctionParameter_node = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConstraintsFunctionParameter_propertyValue = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InheritedNodeScopeFactory = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeDefaultSearchScope = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodePropertyConstraint = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeReferentConstraint = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodeScopeFactory = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0sb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_ConceptConstraints;
          }
          break;
        case 1:
          if (true) {
            return props_ConceptParameter_ReferentSearchScope_enclosingNode;
          }
          break;
        case 2:
          if (true) {
            return props_ConstraintFunctionParameter_checkedNode;
          }
          break;
        case 3:
          if (true) {
            return props_ConstraintFunctionParameter_childConcept;
          }
          break;
        case 4:
          if (true) {
            return props_ConstraintFunctionParameter_childNode;
          }
          break;
        case 5:
          if (true) {
            return props_ConstraintFunctionParameter_containingLink;
          }
          break;
        case 6:
          if (true) {
            return props_ConstraintFunctionParameter_contextNode;
          }
          break;
        case 7:
          if (true) {
            return props_ConstraintFunctionParameter_contextRole;
          }
          break;
        case 8:
          if (true) {
            return props_ConstraintFunctionParameter_exists;
          }
          break;
        case 9:
          if (true) {
            return props_ConstraintFunctionParameter_inEditor;
          }
          break;
        case 10:
          if (true) {
            return props_ConstraintFunctionParameter_link;
          }
          break;
        case 11:
          if (true) {
            return props_ConstraintFunctionParameter_linkTarget;
          }
          break;
        case 12:
          if (true) {
            return props_ConstraintFunctionParameter_newReferentNode;
          }
          break;
        case 13:
          if (true) {
            return props_ConstraintFunctionParameter_oldReferentNode;
          }
          break;
        case 14:
          if (true) {
            return props_ConstraintFunctionParameter_parameterNode;
          }
          break;
        case 15:
          if (true) {
            return props_ConstraintFunctionParameter_parentNode;
          }
          break;
        case 16:
          if (true) {
            return props_ConstraintFunctionParameter_position;
          }
          break;
        case 17:
          if (true) {
            return props_ConstraintFunctionParameter_referenceNode;
          }
          break;
        case 18:
          if (true) {
            return props_ConstraintFunctionParameter_smartReference;
          }
          break;
        case 19:
          if (true) {
            return props_ConstraintFunctionParameter_visible;
          }
          break;
        case 20:
          if (true) {
            return props_ConstraintFunction_CanBeAChild;
          }
          break;
        case 21:
          if (true) {
            return props_ConstraintFunction_CanBeAParent;
          }
          break;
        case 22:
          if (true) {
            return props_ConstraintFunction_CanBeARoot;
          }
          break;
        case 23:
          if (true) {
            return props_ConstraintFunction_CanBeAnAncestor;
          }
          break;
        case 24:
          if (true) {
            return props_ConstraintFunction_GetAlternativeIcon;
          }
          break;
        case 25:
          if (true) {
            return props_ConstraintFunction_GetInstanceIcon;
          }
          break;
        case 26:
          if (true) {
            return props_ConstraintFunction_PropertyGetter;
          }
          break;
        case 27:
          if (true) {
            return props_ConstraintFunction_PropertySetter;
          }
          break;
        case 28:
          if (true) {
            return props_ConstraintFunction_PropertyValidator;
          }
          break;
        case 29:
          if (true) {
            return props_ConstraintFunction_RefSetHandlerKeepsReference;
          }
          break;
        case 30:
          if (true) {
            return props_ConstraintFunction_ReferentSearchScope_AbstractBase;
          }
          break;
        case 31:
          if (true) {
            return props_ConstraintFunction_ReferentSearchScope_Factory;
          }
          break;
        case 32:
          if (true) {
            return props_ConstraintFunction_ReferentSearchScope_Presentation;
          }
          break;
        case 33:
          if (true) {
            return props_ConstraintFunction_ReferentSearchScope_Scope;
          }
          break;
        case 34:
          if (true) {
            return props_ConstraintFunction_ReferentSearchScope_Validator;
          }
          break;
        case 35:
          if (true) {
            return props_ConstraintFunction_ReferentSetHandler;
          }
          break;
        case 36:
          if (true) {
            return props_ConstraintsFunctionParameter_node;
          }
          break;
        case 37:
          if (true) {
            return props_ConstraintsFunctionParameter_propertyValue;
          }
          break;
        case 38:
          if (true) {
            return props_InheritedNodeScopeFactory;
          }
          break;
        case 39:
          if (true) {
            return props_NodeDefaultSearchScope;
          }
          break;
        case 40:
          if (true) {
            return props_NodePropertyConstraint;
          }
          break;
        case 41:
          if (true) {
            return props_NodeReferentConstraint;
          }
          break;
        case 42:
          if (true) {
            return props_NodeScopeFactory;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0sb = buildConceptIndices(MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11a7208faaeL, "ConceptConstraints"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10b81d7448bL, "ConceptParameter_ReferentSearchScope_enclosingNode"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x297f56a5546902a8L, "ConstraintFunctionParameter_checkedNode"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11818761c19L, "ConstraintFunctionParameter_childConcept"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x5d82bba5f0907509L, "ConstraintFunctionParameter_childNode"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x295782e439c9459bL, "ConstraintFunctionParameter_containingLink"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x7c6f6cc2e7bb76f0L, "ConstraintFunctionParameter_contextNode"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x40a0f5576472817aL, "ConstraintFunctionParameter_contextRole"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x40a0f55764728181L, "ConstraintFunctionParameter_exists"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x3fb59c48ff4b8cfdL, "ConstraintFunctionParameter_inEditor"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11818f5cad4L, "ConstraintFunctionParameter_link"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x118bd28275fL, "ConstraintFunctionParameter_linkTarget"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10ed447b91aL, "ConstraintFunctionParameter_newReferentNode"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10ed4488befL, "ConstraintFunctionParameter_oldReferentNode"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x36367902116a29ccL, "ConstraintFunctionParameter_parameterNode"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11817c5715bL, "ConstraintFunctionParameter_parentNode"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x40a0f55764728188L, "ConstraintFunctionParameter_position"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10ed4294f69L, "ConstraintFunctionParameter_referenceNode"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x5df04ce71509adfdL, "ConstraintFunctionParameter_smartReference"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x5df04ce71509adf4L, "ConstraintFunctionParameter_visible"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11817c381baL, "ConstraintFunction_CanBeAChild"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x1181873ed50L, "ConstraintFunction_CanBeAParent"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11db3f6ffbbL, "ConstraintFunction_CanBeARoot"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x6d03b53f575b9685L, "ConstraintFunction_CanBeAnAncestor"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x341b038f9307e5cfL, "ConstraintFunction_GetAlternativeIcon"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x13cd31e62ef65a72L, "ConstraintFunction_GetInstanceIcon"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10b2a68f861L, "ConstraintFunction_PropertyGetter"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10c71c4f329L, "ConstraintFunction_PropertySetter"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x11a369c051fL, "ConstraintFunction_PropertyValidator"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x44df12c18fcb2300L, "ConstraintFunction_RefSetHandlerKeepsReference"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10b81d516b4L, "ConstraintFunction_ReferentSearchScope_AbstractBase"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10b72e99b73L, "ConstraintFunction_ReferentSearchScope_Factory"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x36367902116a44c1L, "ConstraintFunction_ReferentSearchScope_Presentation"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x4ec772c80d1cb34bL, "ConstraintFunction_ReferentSearchScope_Scope"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x30502bd604b2430aL, "ConstraintFunction_ReferentSearchScope_Validator"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10ed4250f82L, "ConstraintFunction_ReferentSetHandler"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10b2a71bcdcL, "ConstraintsFunctionParameter_node"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10c7c69f5aeL, "ConstraintsFunctionParameter_propertyValue"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x74999a95393c73b2L, "InheritedNodeScopeFactory"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10dead47852L, "NodeDefaultSearchScope"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10b2a5eaa48L, "NodePropertyConstraint"), MetaAdapterFactory.getConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x10b731752daL, "NodeReferentConstraint"), MetaAdapterFactory.getInterfaceConcept(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L, 0x74999a95393c73aaL, "NodeScopeFactory"));
}
