package jetbrains.mps.lang.constraints.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int ConceptConstraints = 0;
  public static final int ConceptParameter_ReferentSearchScope_enclosingNode = 1;
  public static final int ConstraintFunctionParameter_checkedNode = 2;
  public static final int ConstraintFunctionParameter_childConcept = 3;
  public static final int ConstraintFunctionParameter_childConceptNode = 4;
  public static final int ConstraintFunctionParameter_childNode = 5;
  public static final int ConstraintFunctionParameter_containingLink = 6;
  public static final int ConstraintFunctionParameter_containmentLink = 7;
  public static final int ConstraintFunctionParameter_contextNode = 8;
  public static final int ConstraintFunctionParameter_contextRole = 9;
  public static final int ConstraintFunctionParameter_exists = 10;
  public static final int ConstraintFunctionParameter_inEditor = 11;
  public static final int ConstraintFunctionParameter_link = 12;
  public static final int ConstraintFunctionParameter_linkNode = 13;
  public static final int ConstraintFunctionParameter_linkTarget = 14;
  public static final int ConstraintFunctionParameter_linkTargetNode = 15;
  public static final int ConstraintFunctionParameter_newReferentNode = 16;
  public static final int ConstraintFunctionParameter_oldReferentNode = 17;
  public static final int ConstraintFunctionParameter_parameterNode = 18;
  public static final int ConstraintFunctionParameter_parentNode = 19;
  public static final int ConstraintFunctionParameter_position = 20;
  public static final int ConstraintFunctionParameter_referenceNode = 21;
  public static final int ConstraintFunctionParameter_smartReference = 22;
  public static final int ConstraintFunctionParameter_visible = 23;
  public static final int ConstraintFunction_CanBeAChild = 24;
  public static final int ConstraintFunction_CanBeAChild_Old = 25;
  public static final int ConstraintFunction_CanBeAParent = 26;
  public static final int ConstraintFunction_CanBeAParent_Old = 27;
  public static final int ConstraintFunction_CanBeARoot = 28;
  public static final int ConstraintFunction_CanBeAnAncestor = 29;
  public static final int ConstraintFunction_CanBeAnAncestor_Old = 30;
  public static final int ConstraintFunction_GetAlternativeIcon = 31;
  public static final int ConstraintFunction_GetInstanceIcon = 32;
  public static final int ConstraintFunction_PropertyGetter = 33;
  public static final int ConstraintFunction_PropertySetter = 34;
  public static final int ConstraintFunction_PropertyValidator = 35;
  public static final int ConstraintFunction_RefSetHandlerKeepsReference = 36;
  public static final int ConstraintFunction_ReferentSearchScope_AbstractBase = 37;
  public static final int ConstraintFunction_ReferentSearchScope_Factory = 38;
  public static final int ConstraintFunction_ReferentSearchScope_Presentation = 39;
  public static final int ConstraintFunction_ReferentSearchScope_Scope = 40;
  public static final int ConstraintFunction_ReferentSearchScope_Scope_Old = 41;
  public static final int ConstraintFunction_ReferentSearchScope_Validator = 42;
  public static final int ConstraintFunction_ReferentSetHandler = 43;
  public static final int ConstraintsFunctionParameter_node = 44;
  public static final int ConstraintsFunctionParameter_propertyValue = 45;
  public static final int EnclosingNodeMigratedHint = 46;
  public static final int InheritedNodeScopeFactory = 47;
  public static final int NodeDefaultSearchScope = 48;
  public static final int NodePropertyConstraint = 49;
  public static final int NodeReferentConstraint = 50;
  public static final int NodeScopeFactory = 51;
  public static final int ParameterMigration = 52;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x3f4bc5f5c6c14a28L, 0x8b10c83066ffa4a1L);
    builder.put(0x11a7208faaeL, ConceptConstraints);
    builder.put(0x10b81d7448bL, ConceptParameter_ReferentSearchScope_enclosingNode);
    builder.put(0x297f56a5546902a8L, ConstraintFunctionParameter_checkedNode);
    builder.put(0x3bb86c2f921c3e95L, ConstraintFunctionParameter_childConcept);
    builder.put(0x11818761c19L, ConstraintFunctionParameter_childConceptNode);
    builder.put(0x5d82bba5f0907509L, ConstraintFunctionParameter_childNode);
    builder.put(0x295782e439c9459bL, ConstraintFunctionParameter_containingLink);
    builder.put(0x4d3a0509807bc470L, ConstraintFunctionParameter_containmentLink);
    builder.put(0x7c6f6cc2e7bb76f0L, ConstraintFunctionParameter_contextNode);
    builder.put(0x40a0f5576472817aL, ConstraintFunctionParameter_contextRole);
    builder.put(0x40a0f55764728181L, ConstraintFunctionParameter_exists);
    builder.put(0x3fb59c48ff4b8cfdL, ConstraintFunctionParameter_inEditor);
    builder.put(0x3bb86c2f92200404L, ConstraintFunctionParameter_link);
    builder.put(0x11818f5cad4L, ConstraintFunctionParameter_linkNode);
    builder.put(0x4d3a0509807d09a1L, ConstraintFunctionParameter_linkTarget);
    builder.put(0x118bd28275fL, ConstraintFunctionParameter_linkTargetNode);
    builder.put(0x10ed447b91aL, ConstraintFunctionParameter_newReferentNode);
    builder.put(0x10ed4488befL, ConstraintFunctionParameter_oldReferentNode);
    builder.put(0x36367902116a29ccL, ConstraintFunctionParameter_parameterNode);
    builder.put(0x11817c5715bL, ConstraintFunctionParameter_parentNode);
    builder.put(0x40a0f55764728188L, ConstraintFunctionParameter_position);
    builder.put(0x10ed4294f69L, ConstraintFunctionParameter_referenceNode);
    builder.put(0x5df04ce71509adfdL, ConstraintFunctionParameter_smartReference);
    builder.put(0x5df04ce71509adf4L, ConstraintFunctionParameter_visible);
    builder.put(0x5d05239254e52247L, ConstraintFunction_CanBeAChild);
    builder.put(0x11817c381baL, ConstraintFunction_CanBeAChild_Old);
    builder.put(0x5d05239254e630abL, ConstraintFunction_CanBeAParent);
    builder.put(0x1181873ed50L, ConstraintFunction_CanBeAParent_Old);
    builder.put(0x11db3f6ffbbL, ConstraintFunction_CanBeARoot);
    builder.put(0x5d05239254e6415aL, ConstraintFunction_CanBeAnAncestor);
    builder.put(0x6d03b53f575b9685L, ConstraintFunction_CanBeAnAncestor_Old);
    builder.put(0x341b038f9307e5cfL, ConstraintFunction_GetAlternativeIcon);
    builder.put(0x13cd31e62ef65a72L, ConstraintFunction_GetInstanceIcon);
    builder.put(0x10b2a68f861L, ConstraintFunction_PropertyGetter);
    builder.put(0x10c71c4f329L, ConstraintFunction_PropertySetter);
    builder.put(0x11a369c051fL, ConstraintFunction_PropertyValidator);
    builder.put(0x44df12c18fcb2300L, ConstraintFunction_RefSetHandlerKeepsReference);
    builder.put(0x10b81d516b4L, ConstraintFunction_ReferentSearchScope_AbstractBase);
    builder.put(0x10b72e99b73L, ConstraintFunction_ReferentSearchScope_Factory);
    builder.put(0x36367902116a44c1L, ConstraintFunction_ReferentSearchScope_Presentation);
    builder.put(0x4d3a0509807b801fL, ConstraintFunction_ReferentSearchScope_Scope);
    builder.put(0x4ec772c80d1cb34bL, ConstraintFunction_ReferentSearchScope_Scope_Old);
    builder.put(0x30502bd604b2430aL, ConstraintFunction_ReferentSearchScope_Validator);
    builder.put(0x10ed4250f82L, ConstraintFunction_ReferentSetHandler);
    builder.put(0x10b2a71bcdcL, ConstraintsFunctionParameter_node);
    builder.put(0x10c7c69f5aeL, ConstraintsFunctionParameter_propertyValue);
    builder.put(0x11bdd70b2be121d0L, EnclosingNodeMigratedHint);
    builder.put(0x74999a95393c73b2L, InheritedNodeScopeFactory);
    builder.put(0x10dead47852L, NodeDefaultSearchScope);
    builder.put(0x10b2a5eaa48L, NodePropertyConstraint);
    builder.put(0x10b731752daL, NodeReferentConstraint);
    builder.put(0x74999a95393c73aaL, NodeScopeFactory);
    builder.put(0x1b2ace141eb6c35bL, ParameterMigration);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
