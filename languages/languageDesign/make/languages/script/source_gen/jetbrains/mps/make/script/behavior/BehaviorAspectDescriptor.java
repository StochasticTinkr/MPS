package jetbrains.mps.make.script.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myQueryDefinition__BehaviorDescriptor = new QueryDefinition__BehaviorDescriptor();
  private final BHDescriptor myOptionType__BehaviorDescriptor = new OptionType__BehaviorDescriptor();
  private final BHDescriptor myExpectedOption__BehaviorDescriptor = new ExpectedOption__BehaviorDescriptor();
  private final BHDescriptor myRelayQueryExpression__BehaviorDescriptor = new RelayQueryExpression__BehaviorDescriptor();
  private final BHDescriptor myResourceType__BehaviorDescriptor = new ResourceType__BehaviorDescriptor();
  private final BHDescriptor myJobDefinition__BehaviorDescriptor = new JobDefinition__BehaviorDescriptor();
  private final BHDescriptor myInputResourcesParameter__BehaviorDescriptor = new InputResourcesParameter__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_progressMonitor__BehaviorDescriptor = new ConceptFunctionParameter_progressMonitor__BehaviorDescriptor();
  private final BHDescriptor myResultStatement__BehaviorDescriptor = new ResultStatement__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0m.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myConceptFunctionParameter_progressMonitor__BehaviorDescriptor;
          }
          break;
        case 1:
          if (true) {
            return myExpectedOption__BehaviorDescriptor;
          }
          break;
        case 2:
          if (true) {
            return myInputResourcesParameter__BehaviorDescriptor;
          }
          break;
        case 3:
          if (true) {
            return myJobDefinition__BehaviorDescriptor;
          }
          break;
        case 4:
          if (true) {
            return myOptionType__BehaviorDescriptor;
          }
          break;
        case 5:
          if (true) {
            return myQueryDefinition__BehaviorDescriptor;
          }
          break;
        case 6:
          if (true) {
            return myRelayQueryExpression__BehaviorDescriptor;
          }
          break;
        case 7:
          if (true) {
            return myResourceType__BehaviorDescriptor;
          }
          break;
        case 8:
          if (true) {
            return myResultStatement__BehaviorDescriptor;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0m = buildConceptIndices(MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x40d591ab6a24e48dL, "jetbrains.mps.make.script.structure.ConceptFunctionParameter_progressMonitor"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x70276038dc4d7bbL, "jetbrains.mps.make.script.structure.ExpectedOption"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x20c069f80a972dacL, "jetbrains.mps.make.script.structure.InputResourcesParameter"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x20c069f80a972dabL, "jetbrains.mps.make.script.structure.JobDefinition"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x70276038dc4d7b5L, "jetbrains.mps.make.script.structure.OptionType"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x70276038dc49b2bL, "jetbrains.mps.make.script.structure.QueryDefinition"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x1b731b4510dbc59fL, "jetbrains.mps.make.script.structure.RelayQueryExpression"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x20c069f80a947282L, "jetbrains.mps.make.script.structure.ResourceType"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x6237d5bb8b2a942dL, "jetbrains.mps.make.script.structure.ResultStatement"));
}
