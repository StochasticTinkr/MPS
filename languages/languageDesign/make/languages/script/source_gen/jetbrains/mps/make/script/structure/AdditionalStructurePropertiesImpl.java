package jetbrains.mps.make.script.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_AdvanceWorkStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AllWorkLeftExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BeginWorkStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptFunctionParameter_progressMonitor = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConfigDefinition = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Expected = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExpectedInput = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExpectedOption = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_FinishWorkStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IExpected = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_InputResourcesParameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_JobDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_JobDefinition = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Option = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OptionExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OptionType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OutputResources = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PropertiesAccessorParameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_QueryDefinition = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_QueryParameterDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RelayQueryExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ReportFeedbackStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ResourceType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ResultStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Text = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0ab.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AdvanceWorkStatement;
          }
          break;
        case 1:
          if (true) {
            return props_AllWorkLeftExpression;
          }
          break;
        case 2:
          if (true) {
            return props_BeginWorkStatement;
          }
          break;
        case 3:
          if (true) {
            return props_ConceptFunctionParameter_progressMonitor;
          }
          break;
        case 4:
          if (true) {
            return props_ConfigDefinition;
          }
          break;
        case 5:
          if (true) {
            return props_Expected;
          }
          break;
        case 6:
          if (true) {
            return props_ExpectedInput;
          }
          break;
        case 7:
          if (true) {
            return props_ExpectedOption;
          }
          break;
        case 8:
          if (true) {
            return props_FinishWorkStatement;
          }
          break;
        case 9:
          if (true) {
            return props_IExpected;
          }
          break;
        case 10:
          if (true) {
            return props_InputResourcesParameter;
          }
          break;
        case 11:
          if (true) {
            return props_JobDeclaration;
          }
          break;
        case 12:
          if (true) {
            return props_JobDefinition;
          }
          break;
        case 13:
          if (true) {
            return props_Option;
          }
          break;
        case 14:
          if (true) {
            return props_OptionExpression;
          }
          break;
        case 15:
          if (true) {
            return props_OptionType;
          }
          break;
        case 16:
          if (true) {
            return props_OutputResources;
          }
          break;
        case 17:
          if (true) {
            return props_PropertiesAccessorParameter;
          }
          break;
        case 18:
          if (true) {
            return props_QueryDefinition;
          }
          break;
        case 19:
          if (true) {
            return props_QueryParameterDeclaration;
          }
          break;
        case 20:
          if (true) {
            return props_RelayQueryExpression;
          }
          break;
        case 21:
          if (true) {
            return props_ReportFeedbackStatement;
          }
          break;
        case 22:
          if (true) {
            return props_ResourceType;
          }
          break;
        case 23:
          if (true) {
            return props_ResultStatement;
          }
          break;
        case 24:
          if (true) {
            return props_Text;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0ab = buildConceptIndices(MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x29929a95c9e6984L, "AdvanceWorkStatement"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x2dc2243445538ecaL, "AllWorkLeftExpression"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x29929a95c9e6982L, "BeginWorkStatement"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x40d591ab6a24e48dL, "ConceptFunctionParameter_progressMonitor"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x1b731b4510dcbee4L, "ConfigDefinition"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x70276038dc4d7c2L, "Expected"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x70276038dc4d7c6L, "ExpectedInput"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x70276038dc4d7bbL, "ExpectedOption"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x29929a95c9e6987L, "FinishWorkStatement"), MetaAdapterFactory.getInterfaceConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x70276038dc581e7L, "IExpected"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x20c069f80a972dacL, "InputResourcesParameter"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x70276038dc4d7edL, "JobDeclaration"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x20c069f80a972dabL, "JobDefinition"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x70276038dc49ec9L, "Option"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x70276038dc4d7b2L, "OptionExpression"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x70276038dc4d7b5L, "OptionType"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x20c069f80a972068L, "OutputResources"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x716499a9068b35e9L, "PropertiesAccessorParameter"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x70276038dc49b2bL, "QueryDefinition"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x70276038dc49ec7L, "QueryParameterDeclaration"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x1b731b4510dbc59fL, "RelayQueryExpression"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x32eac1b57fc1b828L, "ReportFeedbackStatement"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x20c069f80a947282L, "ResourceType"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x6237d5bb8b2a942dL, "ResultStatement"), MetaAdapterFactory.getConcept(0x95f8a3e6f9944ca0L, 0xa65e763c9bae2d3bL, 0x70276038dc49ecaL, "Text"));
}
