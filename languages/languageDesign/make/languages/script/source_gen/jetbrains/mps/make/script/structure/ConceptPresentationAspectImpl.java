package jetbrains.mps.make.script.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AdvanceWorkStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AllWorkLeftExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BeginWorkStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_progressMonitor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConfigDefinition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Expected = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExpectedInput = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExpectedOption = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FinishWorkStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IExpected = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InputResourcesParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_JobDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_JobDefinition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Option = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OptionExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OptionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputResources = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertiesAccessorParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryDefinition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RelayQueryExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReportFeedbackStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResourceType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResultStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Text = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AdvanceWorkStatement:
        return props_AdvanceWorkStatement;
      case LanguageConceptSwitch.AllWorkLeftExpression:
        return props_AllWorkLeftExpression;
      case LanguageConceptSwitch.BeginWorkStatement:
        return props_BeginWorkStatement;
      case LanguageConceptSwitch.ConceptFunctionParameter_progressMonitor:
        return props_ConceptFunctionParameter_progressMonitor;
      case LanguageConceptSwitch.ConfigDefinition:
        return props_ConfigDefinition;
      case LanguageConceptSwitch.Expected:
        return props_Expected;
      case LanguageConceptSwitch.ExpectedInput:
        return props_ExpectedInput;
      case LanguageConceptSwitch.ExpectedOption:
        return props_ExpectedOption;
      case LanguageConceptSwitch.FinishWorkStatement:
        return props_FinishWorkStatement;
      case LanguageConceptSwitch.IExpected:
        return props_IExpected;
      case LanguageConceptSwitch.InputResourcesParameter:
        return props_InputResourcesParameter;
      case LanguageConceptSwitch.JobDeclaration:
        return props_JobDeclaration;
      case LanguageConceptSwitch.JobDefinition:
        return props_JobDefinition;
      case LanguageConceptSwitch.Option:
        return props_Option;
      case LanguageConceptSwitch.OptionExpression:
        return props_OptionExpression;
      case LanguageConceptSwitch.OptionType:
        return props_OptionType;
      case LanguageConceptSwitch.OutputResources:
        return props_OutputResources;
      case LanguageConceptSwitch.PropertiesAccessorParameter:
        return props_PropertiesAccessorParameter;
      case LanguageConceptSwitch.QueryDefinition:
        return props_QueryDefinition;
      case LanguageConceptSwitch.QueryParameterDeclaration:
        return props_QueryParameterDeclaration;
      case LanguageConceptSwitch.RelayQueryExpression:
        return props_RelayQueryExpression;
      case LanguageConceptSwitch.ReportFeedbackStatement:
        return props_ReportFeedbackStatement;
      case LanguageConceptSwitch.ResourceType:
        return props_ResourceType;
      case LanguageConceptSwitch.ResultStatement:
        return props_ResultStatement;
      case LanguageConceptSwitch.Text:
        return props_Text;
    }
    return null;
  }
}
