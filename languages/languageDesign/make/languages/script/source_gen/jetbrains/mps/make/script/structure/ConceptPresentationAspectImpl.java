package jetbrains.mps.make.script.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AdvanceWorkStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AllWorkLeftExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BeginWorkStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_progressMonitor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConfigDefinition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Expected = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExpectedInput = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExpectedOption = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FinishWorkStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IExpected = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InputResourcesParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_JobDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_JobDefinition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Option = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OptionExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OptionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputResources = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertiesAccessorParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryDefinition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RelayQueryExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReportFeedbackStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResourceType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResultStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Text = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("95f8a3e6-f994-4ca0-a65e-763c9bae2d3b"), "jetbrains.mps.make.script")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AdvanceWorkStatement;
      case 1:
        return props_AllWorkLeftExpression;
      case 2:
        return props_BeginWorkStatement;
      case 3:
        return props_ConceptFunctionParameter_progressMonitor;
      case 4:
        return props_ConfigDefinition;
      case 5:
        return props_Expected;
      case 6:
        return props_ExpectedInput;
      case 7:
        return props_ExpectedOption;
      case 8:
        return props_FinishWorkStatement;
      case 9:
        return props_IExpected;
      case 10:
        return props_InputResourcesParameter;
      case 11:
        return props_JobDeclaration;
      case 12:
        return props_JobDefinition;
      case 13:
        return props_Option;
      case 14:
        return props_OptionExpression;
      case 15:
        return props_OptionType;
      case 16:
        return props_OutputResources;
      case 17:
        return props_PropertiesAccessorParameter;
      case 18:
        return props_QueryDefinition;
      case 19:
        return props_QueryParameterDeclaration;
      case 20:
        return props_RelayQueryExpression;
      case 21:
        return props_ReportFeedbackStatement;
      case 22:
        return props_ResourceType;
      case 23:
        return props_ResultStatement;
      case 24:
        return props_Text;
    }
    throw new IllegalStateException();
  }
}
