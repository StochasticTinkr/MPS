package jetbrains.mps.make.facet.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ExtendsFacetReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FacetDeclaration = new ConceptPresentationBuilder().icon("facetDeclaration.png", AdditionalStructurePropertiesImpl.class).create();
  private final ConceptPresentation props_FacetJavaClassExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FacetReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FacetReferenceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ForeignParametersComponentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ForeignParametersExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IFacet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IPropertyExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LocalParametersComponentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LocalParametersExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NamedFacetReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParametersDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RelatedFacetReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResourceClassifierType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResourceSpecificPropertiesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResourceTypeDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TargetDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TargetDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TargetReferenceExpression = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0v.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_ExtendsFacetReference;
          }
          break;
        case 1:
          if (true) {
            return props_FacetDeclaration;
          }
          break;
        case 2:
          if (true) {
            return props_FacetJavaClassExpression;
          }
          break;
        case 3:
          if (true) {
            return props_FacetReference;
          }
          break;
        case 4:
          if (true) {
            return props_FacetReferenceExpression;
          }
          break;
        case 5:
          if (true) {
            return props_ForeignParametersComponentExpression;
          }
          break;
        case 6:
          if (true) {
            return props_ForeignParametersExpression;
          }
          break;
        case 7:
          if (true) {
            return props_IFacet;
          }
          break;
        case 8:
          if (true) {
            return props_IPropertyExpression;
          }
          break;
        case 9:
          if (true) {
            return props_LocalParametersComponentExpression;
          }
          break;
        case 10:
          if (true) {
            return props_LocalParametersExpression;
          }
          break;
        case 11:
          if (true) {
            return props_NamedFacetReference;
          }
          break;
        case 12:
          if (true) {
            return props_ParametersDeclaration;
          }
          break;
        case 13:
          if (true) {
            return props_RelatedFacetReference;
          }
          break;
        case 14:
          if (true) {
            return props_ResourceClassifierType;
          }
          break;
        case 15:
          if (true) {
            return props_ResourceSpecificPropertiesExpression;
          }
          break;
        case 16:
          if (true) {
            return props_ResourceTypeDeclaration;
          }
          break;
        case 17:
          if (true) {
            return props_TargetDeclaration;
          }
          break;
        case 18:
          if (true) {
            return props_TargetDependency;
          }
          break;
        case 19:
          if (true) {
            return props_TargetReferenceExpression;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0v = buildConceptIndices(MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x5979ed6d2b23b819L, "ExtendsFacetReference"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x5912a2ab1cd24c13L, "FacetDeclaration"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x1a4b910f856c1c94L, "FacetJavaClassExpression"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x5979ed6d2b21b2f2L, "FacetReference"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x639ef64ff4850bb0L, "FacetReferenceExpression"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x2e69d2eba535f3b1L, "ForeignParametersComponentExpression"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x2e69d2eba535f3b0L, "ForeignParametersExpression"), MetaAdapterFactory.getInterfaceConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x5912a2ab1cd24c11L, "IFacet"), MetaAdapterFactory.getInterfaceConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x1e69fdb2a034c3f8L, "IPropertyExpression"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x6598ce4d2f231cb3L, "LocalParametersComponentExpression"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x6598ce4d2f231cb2L, "LocalParametersExpression"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x1aa1f6c694329f95L, "NamedFacetReference"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x6598ce4d2f22a97eL, "ParametersDeclaration"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x73e720709e312229L, "RelatedFacetReference"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x1a6da65e8aea0b4L, "ResourceClassifierType"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x1e69fdb2a034c3f6L, "ResourceSpecificPropertiesExpression"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x1a6da65e8aab1d4L, "ResourceTypeDeclaration"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x5912a2ab1cd24c3dL, "TargetDeclaration"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x5912a2ab1cd24c60L, "TargetDependency"), MetaAdapterFactory.getConcept(0x696c11654a59463bL, 0xbc5d902caab85dd0L, 0x78c916bd7aecaff7L, "TargetReferenceExpression"));
}
