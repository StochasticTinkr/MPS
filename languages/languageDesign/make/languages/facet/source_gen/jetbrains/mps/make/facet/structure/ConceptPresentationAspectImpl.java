package jetbrains.mps.make.facet.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ExtendsFacetReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FacetDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0b).create();
  private final ConceptPresentation props_FacetJavaClassExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FacetReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FacetReferenceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ForeignParametersComponentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ForeignParametersExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IFacet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IPropertyExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LocalParametersComponentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LocalParametersExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NamedFacetReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParametersDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RelatedFacetReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResourceClassifierType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResourceSpecificPropertiesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResourceTypeDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TargetDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TargetDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TargetReferenceExpression = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("696c1165-4a59-463b-bc5d-902caab85dd0"), "jetbrains.mps.make.facet")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_ExtendsFacetReference;
      case 1:
        return props_FacetDeclaration;
      case 2:
        return props_FacetJavaClassExpression;
      case 3:
        return props_FacetReference;
      case 4:
        return props_FacetReferenceExpression;
      case 5:
        return props_ForeignParametersComponentExpression;
      case 6:
        return props_ForeignParametersExpression;
      case 7:
        return props_IFacet;
      case 8:
        return props_IPropertyExpression;
      case 9:
        return props_LocalParametersComponentExpression;
      case 10:
        return props_LocalParametersExpression;
      case 11:
        return props_NamedFacetReference;
      case 12:
        return props_ParametersDeclaration;
      case 13:
        return props_RelatedFacetReference;
      case 14:
        return props_ResourceClassifierType;
      case 15:
        return props_ResourceSpecificPropertiesExpression;
      case 16:
        return props_ResourceTypeDeclaration;
      case 17:
        return props_TargetDeclaration;
      case 18:
        return props_TargetDependency;
      case 19:
        return props_TargetReferenceExpression;
    }
    throw new IllegalStateException();
  }
}
