package jetbrains.mps.make.facet.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int ExtendsFacetReference = 0;
  public static final int FacetDeclaration = 1;
  public static final int FacetJavaClassExpression = 2;
  public static final int FacetReference = 3;
  public static final int FacetReferenceExpression = 4;
  public static final int ForeignParametersComponentExpression = 5;
  public static final int ForeignParametersExpression = 6;
  public static final int IFacet = 7;
  public static final int IPropertyExpression = 8;
  public static final int LocalParametersComponentExpression = 9;
  public static final int LocalParametersExpression = 10;
  public static final int NamedFacetReference = 11;
  public static final int ParametersDeclaration = 12;
  public static final int RelatedFacetReference = 13;
  public static final int ResourceClassifierType = 14;
  public static final int ResourceSpecificPropertiesExpression = 15;
  public static final int ResourceTypeDeclaration = 16;
  public static final int TargetDeclaration = 17;
  public static final int TargetDependency = 18;
  public static final int TargetReferenceExpression = 19;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x696c11654a59463bL, 0xbc5d902caab85dd0L);
    builder.put(0x5979ed6d2b23b819L, ExtendsFacetReference);
    builder.put(0x5912a2ab1cd24c13L, FacetDeclaration);
    builder.put(0x1a4b910f856c1c94L, FacetJavaClassExpression);
    builder.put(0x5979ed6d2b21b2f2L, FacetReference);
    builder.put(0x639ef64ff4850bb0L, FacetReferenceExpression);
    builder.put(0x2e69d2eba535f3b1L, ForeignParametersComponentExpression);
    builder.put(0x2e69d2eba535f3b0L, ForeignParametersExpression);
    builder.put(0x5912a2ab1cd24c11L, IFacet);
    builder.put(0x1e69fdb2a034c3f8L, IPropertyExpression);
    builder.put(0x6598ce4d2f231cb3L, LocalParametersComponentExpression);
    builder.put(0x6598ce4d2f231cb2L, LocalParametersExpression);
    builder.put(0x1aa1f6c694329f95L, NamedFacetReference);
    builder.put(0x6598ce4d2f22a97eL, ParametersDeclaration);
    builder.put(0x73e720709e312229L, RelatedFacetReference);
    builder.put(0x1a6da65e8aea0b4L, ResourceClassifierType);
    builder.put(0x1e69fdb2a034c3f6L, ResourceSpecificPropertiesExpression);
    builder.put(0x1a6da65e8aab1d4L, ResourceTypeDeclaration);
    builder.put(0x5912a2ab1cd24c3dL, TargetDeclaration);
    builder.put(0x5912a2ab1cd24c60L, TargetDependency);
    builder.put(0x78c916bd7aecaff7L, TargetReferenceExpression);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
