package jetbrains.mps.make.reduced.plugin;

/*Generated by MPS */

import jetbrains.mps.make.facet.IFacet;
import java.util.List;
import jetbrains.mps.make.facet.ITarget;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.make.resources.IPropertiesPersistence;
import jetbrains.mps.make.facet.ITargetEx2;
import jetbrains.mps.make.script.IJob;
import jetbrains.mps.make.script.IResult;
import jetbrains.mps.make.resources.IResource;
import jetbrains.mps.make.script.IJobMonitor;
import jetbrains.mps.make.resources.IPropertiesAccessor;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.smodel.resources.GResource;
import jetbrains.mps.generator.GenerationStatus;
import java.io.File;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.generator.impl.dependencies.GenerationRootDependencies;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.make.script.IConfig;
import jetbrains.mps.baseLanguage.tuples.runtime.Tuples;
import jetbrains.mps.make.script.IPropertiesPool;
import jetbrains.mps.baseLanguage.tuples.runtime.MultiTuple;
import java.util.Map;

public class CollectHashes_Facet extends IFacet.Stub {
  private List<ITarget> targets = ListSequence.fromList(new ArrayList<ITarget>());
  private IFacet.Name name = new IFacet.Name("jetbrains.mps.make.reduced.CollectHashes");
  public CollectHashes_Facet() {
    ListSequence.fromList(targets).addElement(new CollectHashes_Facet.Target_collect());
  }
  public Iterable<ITarget> targets() {
    return targets;
  }
  public Iterable<IFacet.Name> optional() {
    return null;
  }
  public Iterable<IFacet.Name> required() {
    return Sequence.fromArray(new IFacet.Name[]{new IFacet.Name("jetbrains.mps.lang.core.Generate"), new IFacet.Name("jetbrains.mps.make.facets.Make")});
  }
  public Iterable<IFacet.Name> extended() {
    return null;
  }
  public IFacet.Name getName() {
    return this.name;
  }
  public IPropertiesPersistence propertiesPersistence() {
    return new CollectHashes_Facet.TargetProperties();
  }
  public static class Target_collect implements ITargetEx2 {
    private static final ITarget.Name name = new ITarget.Name("jetbrains.mps.make.reduced.CollectHashes.collect");
    public Target_collect() {
    }
    public IJob createJob() {
      return new IJob.Stub() {
        @Override
        public IResult execute(final Iterable<IResource> rawInput, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {
          Iterable<IResource> _output_revm5v_a0a = null;
          final Iterable<GResource> input = (Iterable<GResource>) (Iterable) rawInput;
          switch (0) {
            case 0:
              for (GResource gres : Sequence.fromIterable(input)) {
                GenerationStatus status = gres.status();
                if (status.isOk()) {
                  // XXX is it right that we don't use make.pathToFile conversion like other facets do? 
                  // XXX does anyone needs the map we are constructing here? 
                  File outputDir = new File(SModelOperations.getOutputLocation(gres.model()).getPath());
                  for (GenerationRootDependencies grd : status.getDependencies().getRootDependencies()) {
                    for (String file : grd.getFiles()) {
                      MapSequence.fromMap(vars(pa.global()).fileHashes()).put(new File(outputDir, file).getAbsolutePath(), grd.getHash());
                    }
                  }
                }
              }
            default:
              return new IResult.SUCCESS(_output_revm5v_a0a);
          }
        }
      };
    }
    public IConfig createConfig() {
      return null;
    }
    public Iterable<ITarget.Name> notAfter() {
      return null;
    }
    public Iterable<ITarget.Name> after() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.lang.core.Generate.generate")});
    }
    public Iterable<ITarget.Name> notBefore() {
      return null;
    }
    public Iterable<ITarget.Name> before() {
      return Sequence.fromArray(new ITarget.Name[]{new ITarget.Name("jetbrains.mps.make.facets.Make.make")});
    }
    public ITarget.Name getName() {
      return name;
    }
    public boolean isOptional() {
      return false;
    }
    public boolean requiresInput() {
      return true;
    }
    public boolean producesOutput() {
      return true;
    }
    public Iterable<Class<? extends IResource>> expectedInput() {
      List<Class<? extends IResource>> rv = ListSequence.fromList(new ArrayList<Class<? extends IResource>>());
      ListSequence.fromList(rv).addElement(GResource.class);
      return rv;
    }
    public Iterable<Class<? extends IResource>> expectedOutput() {
      return null;
    }
    public <T> T createParameters(Class<T> cls) {
      return cls.cast(new Parameters());
    }
    public <T> T createParameters(Class<T> cls, T copyFrom) {
      T t = createParameters(cls);
      if (t != null) {
        ((Tuples._1) t).assign((Tuples._1) copyFrom);
      }
      return t;
    }
    public int workEstimate() {
      return 10;
    }
    public static CollectHashes_Facet.Target_collect.Parameters vars(IPropertiesPool ppool) {
      return ppool.properties(name, CollectHashes_Facet.Target_collect.Parameters.class);
    }
    public static class Parameters extends MultiTuple._1<Map<String, String>> {
      public Parameters() {
        super();
      }
      public Parameters(Map<String, String> fileHashes) {
        super(fileHashes);
      }
      public Map<String, String> fileHashes(Map<String, String> value) {
        return super._0(value);
      }
      public Map<String, String> fileHashes() {
        return super._0();
      }
    }
  }
  public static class TargetProperties implements IPropertiesPersistence {
    public TargetProperties() {
    }
    public void storeValues(Map<String, String> store, IPropertiesPool properties) {
      {
        ITarget.Name name = new ITarget.Name("jetbrains.mps.make.reduced.CollectHashes.collect");
        if (properties.hasProperties(name)) {
          CollectHashes_Facet.Target_collect.Parameters props = properties.properties(name, CollectHashes_Facet.Target_collect.Parameters.class);
          MapSequence.fromMap(store).put("jetbrains.mps.make.reduced.CollectHashes.collect.fileHashes", null);
        }
      }
    }
    public void loadValues(Map<String, String> store, IPropertiesPool properties) {
      try {
        {
          ITarget.Name name = new ITarget.Name("jetbrains.mps.make.reduced.CollectHashes.collect");
          CollectHashes_Facet.Target_collect.Parameters props = properties.properties(name, CollectHashes_Facet.Target_collect.Parameters.class);
          if (MapSequence.fromMap(store).containsKey("jetbrains.mps.make.reduced.CollectHashes.collect.fileHashes")) {
            props.fileHashes(null);
          }
        }
      } catch (RuntimeException re) {
      }
    }
  }
}
