package jetbrains.mps.lang.access.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BaseExecuteCommandStatement;
  private ConceptPresentation props_BaseExecuteCommandStatementSync;
  private ConceptPresentation props_CommandClosureLiteral;
  private ConceptPresentation props_ExecuteCommandInEDTStatement;
  private ConceptPresentation props_ExecuteCommandStatement;
  private ConceptPresentation props_ExecuteEDTCommandStatement;
  private ConceptPresentation props_ExecuteLightweightCommandStatement;
  private ConceptPresentation props_ExecuteTransparentCommandStatement;
  private ConceptPresentation props_ExecuteWriteActionStatement;
  private ConceptPresentation props_IExecuteCommandStatementSync;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BaseExecuteCommandStatement:
        if (props_BaseExecuteCommandStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BaseExecuteCommandStatement = cpb.create();
        }
        return props_BaseExecuteCommandStatement;
      case LanguageConceptSwitch.BaseExecuteCommandStatementSync:
        if (props_BaseExecuteCommandStatementSync == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BaseExecuteCommandStatementSync = cpb.create();
        }
        return props_BaseExecuteCommandStatementSync;
      case LanguageConceptSwitch.CommandClosureLiteral:
        if (props_CommandClosureLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_CommandClosureLiteral = cpb.create();
        }
        return props_CommandClosureLiteral;
      case LanguageConceptSwitch.ExecuteCommandInEDTStatement:
        if (props_ExecuteCommandInEDTStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x63650c5916c8498aL, 0x99c8005c7ee9515dL, 0x7c8b08a50a3ea20eL);
          cpb.deprecateAggregation(0x7c8b08a50a3ea20fL, "project");
          cpb.shortDesc("Schedule command to run from EDT asynchronously");
          props_ExecuteCommandInEDTStatement = cpb.create();
        }
        return props_ExecuteCommandInEDTStatement;
      case LanguageConceptSwitch.ExecuteCommandStatement:
        if (props_ExecuteCommandStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Synchronous model command");
          props_ExecuteCommandStatement = cpb.create();
        }
        return props_ExecuteCommandStatement;
      case LanguageConceptSwitch.ExecuteEDTCommandStatement:
        if (props_ExecuteEDTCommandStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Schedule asynchronous model read from EDT");
          props_ExecuteEDTCommandStatement = cpb.create();
        }
        return props_ExecuteEDTCommandStatement;
      case LanguageConceptSwitch.ExecuteLightweightCommandStatement:
        if (props_ExecuteLightweightCommandStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Synchronous model read");
          props_ExecuteLightweightCommandStatement = cpb.create();
        }
        return props_ExecuteLightweightCommandStatement;
      case LanguageConceptSwitch.ExecuteTransparentCommandStatement:
        if (props_ExecuteTransparentCommandStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ExecuteTransparentCommandStatement = cpb.create();
        }
        return props_ExecuteTransparentCommandStatement;
      case LanguageConceptSwitch.ExecuteWriteActionStatement:
        if (props_ExecuteWriteActionStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Synchronous model write");
          props_ExecuteWriteActionStatement = cpb.create();
        }
        return props_ExecuteWriteActionStatement;
      case LanguageConceptSwitch.IExecuteCommandStatementSync:
        if (props_IExecuteCommandStatementSync == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IExecuteCommandStatementSync = cpb.create();
        }
        return props_IExecuteCommandStatementSync;
    }
    return null;
  }
}
