package jetbrains.mps.lang.access.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_BaseExecuteCommandStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BaseExecuteCommandStatementSync = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommandClosureLiteral = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExecuteCommandInEDTStatement = new ConceptPropsBuilder().deprecated().create();
  private final AdditionalConceptProperties props_ExecuteCommandStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExecuteEDTCommandStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExecuteLightweightCommandStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExecuteTransparentCommandStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExecuteWriteActionStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IExecuteCommandStatementSync = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0l.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_BaseExecuteCommandStatement;
          }
          break;
        case 1:
          if (true) {
            return props_BaseExecuteCommandStatementSync;
          }
          break;
        case 2:
          if (true) {
            return props_CommandClosureLiteral;
          }
          break;
        case 3:
          if (true) {
            return props_ExecuteCommandInEDTStatement;
          }
          break;
        case 4:
          if (true) {
            return props_ExecuteCommandStatement;
          }
          break;
        case 5:
          if (true) {
            return props_ExecuteEDTCommandStatement;
          }
          break;
        case 6:
          if (true) {
            return props_ExecuteLightweightCommandStatement;
          }
          break;
        case 7:
          if (true) {
            return props_ExecuteTransparentCommandStatement;
          }
          break;
        case 8:
          if (true) {
            return props_ExecuteWriteActionStatement;
          }
          break;
        case 9:
          if (true) {
            return props_IExecuteCommandStatementSync;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0l = buildConceptIndices(MetaAdapterFactory.getConcept(0x63650c5916c8498aL, 0x99c8005c7ee9515dL, 0x7c8b08a50a3ea20aL, "BaseExecuteCommandStatement"), MetaAdapterFactory.getConcept(0x63650c5916c8498aL, 0x99c8005c7ee9515dL, 0x7c8b08a50a3ea20cL, "BaseExecuteCommandStatementSync"), MetaAdapterFactory.getConcept(0x63650c5916c8498aL, 0x99c8005c7ee9515dL, 0x7c8b08a50a3ea20dL, "CommandClosureLiteral"), MetaAdapterFactory.getConcept(0x63650c5916c8498aL, 0x99c8005c7ee9515dL, 0x7c8b08a50a3ea20eL, "ExecuteCommandInEDTStatement"), MetaAdapterFactory.getConcept(0x63650c5916c8498aL, 0x99c8005c7ee9515dL, 0x7c8b08a50a3ea211L, "ExecuteCommandStatement"), MetaAdapterFactory.getConcept(0x63650c5916c8498aL, 0x99c8005c7ee9515dL, 0x7c8b08a50a3ea213L, "ExecuteEDTCommandStatement"), MetaAdapterFactory.getConcept(0x63650c5916c8498aL, 0x99c8005c7ee9515dL, 0x7c8b08a50a3ea215L, "ExecuteLightweightCommandStatement"), MetaAdapterFactory.getConcept(0x63650c5916c8498aL, 0x99c8005c7ee9515dL, 0x4a0179cdfba5eb77L, "ExecuteTransparentCommandStatement"), MetaAdapterFactory.getConcept(0x63650c5916c8498aL, 0x99c8005c7ee9515dL, 0x7c8b08a50a3ea217L, "ExecuteWriteActionStatement"), MetaAdapterFactory.getInterfaceConcept(0x63650c5916c8498aL, 0x99c8005c7ee9515dL, 0x7c8b08a50a3ea219L, "IExecuteCommandStatementSync"));
}
