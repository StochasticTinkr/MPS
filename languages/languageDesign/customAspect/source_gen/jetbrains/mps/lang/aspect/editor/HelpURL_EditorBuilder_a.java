package jetbrains.mps.lang.aspect.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import javax.swing.JButton;
import javax.swing.AbstractAction;
import java.awt.event.ActionEvent;
import jetbrains.mps.smodel.ModelAccess;
import com.intellij.ide.BrowserUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.awt.Dimension;

/*package*/ class HelpURL_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public HelpURL_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createCollection_k4pbv3_a();
  }

  private EditorCell createCollection_k4pbv3_a() {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(getEditorContext(), myNode);
    editorCell.setCellId("Collection_k4pbv3_a");
    editorCell.setBig(true);
    editorCell.setCellContext(getCellFactory().getCellContext());
    editorCell.addEditorCell(createProperty_k4pbv3_a0());
    editorCell.addEditorCell(createJComponent_k4pbv3_b0());
    return editorCell;
  }
  private EditorCell createProperty_k4pbv3_a0() {
    CellProviderWithRole provider = new PropertyCellProvider(myNode, getEditorContext());
    provider.setRole("url");
    provider.setNoTargetText("<no URL>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(getEditorContext());
    editorCell.setCellId("property_url");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
      return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
    } else
    return editorCell;
  }
  private EditorCell createJComponent_k4pbv3_b0() {
    EditorCell editorCell = EditorCell_Component.createComponentCell(getEditorContext(), myNode, HelpURL_EditorBuilder_a._QueryFunction_JComponent_k4pbv3_a1a(myNode, getEditorContext()), "_k4pbv3_b0");
    editorCell.setCellId("JComponent_k4pbv3_b0");
    return editorCell;
  }
  private static JComponent _QueryFunction_JComponent_k4pbv3_a1a(final SNode node, final EditorContext editorContext) {
    final JButton button = new JButton();
    button.setAction(new AbstractAction("Test") {
      @Override
      public void actionPerformed(ActionEvent e) {
        ModelAccess.instance().runReadAction(new Runnable() {
          public void run() {
            BrowserUtil.browse(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xf159adf43c9340f9L, 0x9c5a1f245a8697afL, 0x47d8f9811b73d397L, 0x47d8f9811b73d398L, "url")));
          }
        });
      }
    });
    button.setPreferredSize(new Dimension(40, 20));
    return button;
  }
}
