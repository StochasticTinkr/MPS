package jetbrains.mps.lang.actions.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myNodeFactories__BehaviorDescriptor = new NodeFactories__BehaviorDescriptor();
  private final BHDescriptor myNodeFactory__BehaviorDescriptor = new NodeFactory__BehaviorDescriptor();
  private final BHDescriptor myNodeSetupFunction__BehaviorDescriptor = new NodeSetupFunction__BehaviorDescriptor();
  private final BHDescriptor myPasteWrappers__BehaviorDescriptor = new PasteWrappers__BehaviorDescriptor();
  private final BHDescriptor myPasteWrapper__BehaviorDescriptor = new PasteWrapper__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_nodeToPasteWrap__BehaviorDescriptor = new ConceptFunctionParameter_nodeToPasteWrap__BehaviorDescriptor();
  private final BHDescriptor myQueryFunction_PasteWrapper__BehaviorDescriptor = new QueryFunction_PasteWrapper__BehaviorDescriptor();
  private final BHDescriptor myPastePostProcessor__BehaviorDescriptor = new PastePostProcessor__BehaviorDescriptor();
  private final BHDescriptor myNF_Node_InsertNewNextSiblingOperation__BehaviorDescriptor = new NF_Node_InsertNewNextSiblingOperation__BehaviorDescriptor();
  private final BHDescriptor myNF_Node_InsertNewPrevSiblingOperation__BehaviorDescriptor = new NF_Node_InsertNewPrevSiblingOperation__BehaviorDescriptor();
  private final BHDescriptor myNF_Node_ReplaceWithNewOperation__BehaviorDescriptor = new NF_Node_ReplaceWithNewOperation__BehaviorDescriptor();
  private final BHDescriptor myNF_Link_SetNewChildOperation__BehaviorDescriptor = new NF_Link_SetNewChildOperation__BehaviorDescriptor();
  private final BHDescriptor myNF_LinkList_AddNewChildOperation__BehaviorDescriptor = new NF_LinkList_AddNewChildOperation__BehaviorDescriptor();
  private final BHDescriptor myNF_Model_CreateNewNodeOperation__BehaviorDescriptor = new NF_Model_CreateNewNodeOperation__BehaviorDescriptor();
  private final BHDescriptor myNF_Model_CreateNewRootNodeOperation__BehaviorDescriptor = new NF_Model_CreateNewRootNodeOperation__BehaviorDescriptor();
  private final BHDescriptor myNodeSetupFunction_SampleNode__BehaviorDescriptor = new NodeSetupFunction_SampleNode__BehaviorDescriptor();
  private final BHDescriptor myNodeSetupFunction_EnclosingNode__BehaviorDescriptor = new NodeSetupFunction_EnclosingNode__BehaviorDescriptor();
  private final BHDescriptor myCopyPreProcessor__BehaviorDescriptor = new CopyPreProcessor__BehaviorDescriptor();
  private final BHDescriptor myCopyPreProcessFunction__BehaviorDescriptor = new CopyPreProcessFunction__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_nodeToCopyPreProcess__BehaviorDescriptor = new ConceptFunctionParameter_nodeToCopyPreProcess__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_nodeToCopyPreProcessOriginal__BehaviorDescriptor = new ConceptFunctionParameter_nodeToCopyPreProcessOriginal__BehaviorDescriptor();
  private final BHDescriptor myCopyPasteHandlers__BehaviorDescriptor = new CopyPasteHandlers__BehaviorDescriptor();
  private final BHDescriptor myPastePostProcessFunction__BehaviorDescriptor = new PastePostProcessFunction__BehaviorDescriptor();
  private final BHDescriptor myConceptFunctionParameter_nodeToPastePostProcess__BehaviorDescriptor = new ConceptFunctionParameter_nodeToPastePostProcess__BehaviorDescriptor();
  private final BHDescriptor myNF_Concept_NewInstance__BehaviorDescriptor = new NF_Concept_NewInstance__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt_a0cb = concept;
    switch (index_846f5o_a0cb.index(cncpt_a0cb)) {
      case 0:
        return myConceptFunctionParameter_nodeToCopyPreProcess__BehaviorDescriptor;
      case 1:
        return myConceptFunctionParameter_nodeToCopyPreProcessOriginal__BehaviorDescriptor;
      case 2:
        return myConceptFunctionParameter_nodeToPastePostProcess__BehaviorDescriptor;
      case 3:
        return myConceptFunctionParameter_nodeToPasteWrap__BehaviorDescriptor;
      case 4:
        return myCopyPasteHandlers__BehaviorDescriptor;
      case 5:
        return myCopyPreProcessFunction__BehaviorDescriptor;
      case 6:
        return myCopyPreProcessor__BehaviorDescriptor;
      case 7:
        return myNF_Concept_NewInstance__BehaviorDescriptor;
      case 8:
        return myNF_LinkList_AddNewChildOperation__BehaviorDescriptor;
      case 9:
        return myNF_Link_SetNewChildOperation__BehaviorDescriptor;
      case 10:
        return myNF_Model_CreateNewNodeOperation__BehaviorDescriptor;
      case 11:
        return myNF_Model_CreateNewRootNodeOperation__BehaviorDescriptor;
      case 12:
        return myNF_Node_InsertNewNextSiblingOperation__BehaviorDescriptor;
      case 13:
        return myNF_Node_InsertNewPrevSiblingOperation__BehaviorDescriptor;
      case 14:
        return myNF_Node_ReplaceWithNewOperation__BehaviorDescriptor;
      case 15:
        return myNodeFactories__BehaviorDescriptor;
      case 16:
        return myNodeFactory__BehaviorDescriptor;
      case 17:
        return myNodeSetupFunction__BehaviorDescriptor;
      case 18:
        return myNodeSetupFunction_EnclosingNode__BehaviorDescriptor;
      case 19:
        return myNodeSetupFunction_SampleNode__BehaviorDescriptor;
      case 20:
        return myPastePostProcessFunction__BehaviorDescriptor;
      case 21:
        return myPastePostProcessor__BehaviorDescriptor;
      case 22:
        return myPasteWrapper__BehaviorDescriptor;
      case 23:
        return myPasteWrappers__BehaviorDescriptor;
      case 24:
        return myQueryFunction_PasteWrapper__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex index_846f5o_a0cb = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x528ba37dd3326034L), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x528ba37dd3326068L), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x53a34ae13c0d287bL), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x11c51740034L), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x528ba37dd3383e1eL), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x528ba37dd3317b9fL), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x528ba37dd3311946L), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x6bea674d717de5f4L), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0xaa57300a39f8701L), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0xaa57300a39f86feL), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x4c0fd74709e9e128L), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x4c0fd74709e9f70cL), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0xaa57300a39f86f8L), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0xaa57300a39f86faL), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0xaa57300a39f86fcL), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x10dc7f106b2L), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x10dc7f1f421L), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x10dc7f89eecL), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x4d7fc32c166cf35eL), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x4d7fc32c166cf25dL), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x53a34ae13c0cee4fL), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x7d4ebb4f893516cL), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x11c51563250L), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x11c51553d4eL), MetaIdFactory.conceptId(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL, 0x11c51746008L)).seal();
}
