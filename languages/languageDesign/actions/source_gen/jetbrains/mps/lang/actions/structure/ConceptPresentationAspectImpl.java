package jetbrains.mps.lang.actions.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ConceptFunctionParameter_nodeToCopyPreProcess;
  private ConceptPresentation props_ConceptFunctionParameter_nodeToCopyPreProcessOriginal;
  private ConceptPresentation props_ConceptFunctionParameter_nodeToPastePostProcess;
  private ConceptPresentation props_ConceptFunctionParameter_nodeToPasteWrap;
  private ConceptPresentation props_CopyPasteHandlers;
  private ConceptPresentation props_CopyPreProcessFunction;
  private ConceptPresentation props_CopyPreProcessor;
  private ConceptPresentation props_ICouldBeAnnotatedWithMigrateManually;
  private ConceptPresentation props_MigrateManuallyAnnotation;
  private ConceptPresentation props_MigratedToAnnotation;
  private ConceptPresentation props_NF_Concept_NewInstance;
  private ConceptPresentation props_NF_LinkList_AddNewChildOperation;
  private ConceptPresentation props_NF_Link_SetNewChildOperation;
  private ConceptPresentation props_NF_Model_CreateNewNodeOperation;
  private ConceptPresentation props_NF_Model_CreateNewRootNodeOperation;
  private ConceptPresentation props_NF_Node_InsertNewNextSiblingOperation;
  private ConceptPresentation props_NF_Node_InsertNewPrevSiblingOperation;
  private ConceptPresentation props_NF_Node_ReplaceWithNewOperation;
  private ConceptPresentation props_NodeFactories;
  private ConceptPresentation props_NodeFactory;
  private ConceptPresentation props_NodeSetupFunction;
  private ConceptPresentation props_NodeSetupFunction_EnclosingNode;
  private ConceptPresentation props_NodeSetupFunction_NewNode;
  private ConceptPresentation props_NodeSetupFunction_SampleNode;
  private ConceptPresentation props_PastePostProcessFunction;
  private ConceptPresentation props_PastePostProcessor;
  private ConceptPresentation props_PasteWrapper;
  private ConceptPresentation props_PasteWrappers;
  private ConceptPresentation props_QueryFunction_PasteWrapper;
  private ConceptPresentation props_SNodeCreatorAndInitializer;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ConceptFunctionParameter_nodeToCopyPreProcess:
        if (props_ConceptFunctionParameter_nodeToCopyPreProcess == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("copy");
          props_ConceptFunctionParameter_nodeToCopyPreProcess = cpb.create();
        }
        return props_ConceptFunctionParameter_nodeToCopyPreProcess;
      case LanguageConceptSwitch.ConceptFunctionParameter_nodeToCopyPreProcessOriginal:
        if (props_ConceptFunctionParameter_nodeToCopyPreProcessOriginal == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("original");
          props_ConceptFunctionParameter_nodeToCopyPreProcessOriginal = cpb.create();
        }
        return props_ConceptFunctionParameter_nodeToCopyPreProcessOriginal;
      case LanguageConceptSwitch.ConceptFunctionParameter_nodeToPastePostProcess:
        if (props_ConceptFunctionParameter_nodeToPastePostProcess == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("pastedNode");
          props_ConceptFunctionParameter_nodeToPastePostProcess = cpb.create();
        }
        return props_ConceptFunctionParameter_nodeToPastePostProcess;
      case LanguageConceptSwitch.ConceptFunctionParameter_nodeToPasteWrap:
        if (props_ConceptFunctionParameter_nodeToPasteWrap == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("sourceNode");
          props_ConceptFunctionParameter_nodeToPasteWrap = cpb.create();
        }
        return props_ConceptFunctionParameter_nodeToPasteWrap;
      case LanguageConceptSwitch.CopyPasteHandlers:
        if (props_CopyPasteHandlers == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CopyPasteHandlers = cpb.create();
        }
        return props_CopyPasteHandlers;
      case LanguageConceptSwitch.CopyPreProcessFunction:
        if (props_CopyPreProcessFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("paste pre process function");
          props_CopyPreProcessFunction = cpb.create();
        }
        return props_CopyPreProcessFunction;
      case LanguageConceptSwitch.CopyPreProcessor:
        if (props_CopyPreProcessor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("paste pre processor");
          props_CopyPreProcessor = cpb.create();
        }
        return props_CopyPreProcessor;
      case LanguageConceptSwitch.ICouldBeAnnotatedWithMigrateManually:
        if (props_ICouldBeAnnotatedWithMigrateManually == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          props_ICouldBeAnnotatedWithMigrateManually = cpb.create();
        }
        return props_ICouldBeAnnotatedWithMigrateManually;
      case LanguageConceptSwitch.MigrateManuallyAnnotation:
        if (props_MigrateManuallyAnnotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.rawPresentation("MigrateManuallyAnnotation");
          props_MigrateManuallyAnnotation = cpb.create();
        }
        return props_MigrateManuallyAnnotation;
      case LanguageConceptSwitch.MigratedToAnnotation:
        if (props_MigratedToAnnotation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.rawPresentation("MigratedToAnnotation");
          props_MigratedToAnnotation = cpb.create();
        }
        return props_MigratedToAnnotation;
      case LanguageConceptSwitch.NF_Concept_NewInstance:
        if (props_NF_Concept_NewInstance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("create new initialized node");
          cpb.rawPresentation("new initialized instance");
          props_NF_Concept_NewInstance = cpb.create();
        }
        return props_NF_Concept_NewInstance;
      case LanguageConceptSwitch.NF_LinkList_AddNewChildOperation:
        if (props_NF_LinkList_AddNewChildOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("add new initialized child");
          cpb.rawPresentation("add new initialized");
          props_NF_LinkList_AddNewChildOperation = cpb.create();
        }
        return props_NF_LinkList_AddNewChildOperation;
      case LanguageConceptSwitch.NF_Link_SetNewChildOperation:
        if (props_NF_Link_SetNewChildOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("set new initialized child");
          cpb.rawPresentation("set new initialized");
          props_NF_Link_SetNewChildOperation = cpb.create();
        }
        return props_NF_Link_SetNewChildOperation;
      case LanguageConceptSwitch.NF_Model_CreateNewNodeOperation:
        if (props_NF_Model_CreateNewNodeOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("new initialized node");
          props_NF_Model_CreateNewNodeOperation = cpb.create();
        }
        return props_NF_Model_CreateNewNodeOperation;
      case LanguageConceptSwitch.NF_Model_CreateNewRootNodeOperation:
        if (props_NF_Model_CreateNewRootNodeOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("new initialized root node");
          props_NF_Model_CreateNewRootNodeOperation = cpb.create();
        }
        return props_NF_Model_CreateNewRootNodeOperation;
      case LanguageConceptSwitch.NF_Node_InsertNewNextSiblingOperation:
        if (props_NF_Node_InsertNewNextSiblingOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("new initialized next-sibling");
          props_NF_Node_InsertNewNextSiblingOperation = cpb.create();
        }
        return props_NF_Node_InsertNewNextSiblingOperation;
      case LanguageConceptSwitch.NF_Node_InsertNewPrevSiblingOperation:
        if (props_NF_Node_InsertNewPrevSiblingOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("new initialized prev-sibling");
          props_NF_Node_InsertNewPrevSiblingOperation = cpb.create();
        }
        return props_NF_Node_InsertNewPrevSiblingOperation;
      case LanguageConceptSwitch.NF_Node_ReplaceWithNewOperation:
        if (props_NF_Node_ReplaceWithNewOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("replace with new initialized");
          props_NF_Node_ReplaceWithNewOperation = cpb.create();
        }
        return props_NF_Node_ReplaceWithNewOperation;
      case LanguageConceptSwitch.NodeFactories:
        if (props_NodeFactories == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a2a0a81b0fb);
          props_NodeFactories = cpb.create();
        }
        return props_NodeFactories;
      case LanguageConceptSwitch.NodeFactory:
        if (props_NodeFactory == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("node factory");
          props_NodeFactory = cpb.create();
        }
        return props_NodeFactory;
      case LanguageConceptSwitch.NodeSetupFunction:
        if (props_NodeSetupFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("initialize newly created concept instance");
          cpb.rawPresentation("node setup function");
          props_NodeSetupFunction = cpb.create();
        }
        return props_NodeSetupFunction;
      case LanguageConceptSwitch.NodeSetupFunction_EnclosingNode:
        if (props_NodeSetupFunction_EnclosingNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("node to be used as a parent of newly creted one, can be null");
          cpb.rawPresentation("enclosingNode");
          props_NodeSetupFunction_EnclosingNode = cpb.create();
        }
        return props_NodeSetupFunction_EnclosingNode;
      case LanguageConceptSwitch.NodeSetupFunction_NewNode:
        if (props_NodeSetupFunction_NewNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("newly created node");
          cpb.rawPresentation("newNode");
          props_NodeSetupFunction_NewNode = cpb.create();
        }
        return props_NodeSetupFunction_NewNode;
      case LanguageConceptSwitch.NodeSetupFunction_SampleNode:
        if (props_NodeSetupFunction_SampleNode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("existing node which will be replaced by new node, can be null");
          cpb.rawPresentation("sampleNode");
          props_NodeSetupFunction_SampleNode = cpb.create();
        }
        return props_NodeSetupFunction_SampleNode;
      case LanguageConceptSwitch.PastePostProcessFunction:
        if (props_PastePostProcessFunction == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("paste post process function");
          props_PastePostProcessFunction = cpb.create();
        }
        return props_PastePostProcessFunction;
      case LanguageConceptSwitch.PastePostProcessor:
        if (props_PastePostProcessor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("paste post processor");
          props_PastePostProcessor = cpb.create();
        }
        return props_PastePostProcessor;
      case LanguageConceptSwitch.PasteWrapper:
        if (props_PasteWrapper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PasteWrapper");
          props_PasteWrapper = cpb.create();
        }
        return props_PasteWrapper;
      case LanguageConceptSwitch.PasteWrappers:
        if (props_PasteWrappers == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a2a0a72b0fb);
          props_PasteWrappers = cpb.create();
        }
        return props_PasteWrappers;
      case LanguageConceptSwitch.QueryFunction_PasteWrapper:
        if (props_QueryFunction_PasteWrapper == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("QueryFunction_PasteWrapper");
          props_QueryFunction_PasteWrapper = cpb.create();
        }
        return props_QueryFunction_PasteWrapper;
      case LanguageConceptSwitch.SNodeCreatorAndInitializer:
        if (props_SNodeCreatorAndInitializer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("create new initialized node");
          cpb.rawPresentation("initialized node<>");
          props_SNodeCreatorAndInitializer = cpb.create();
        }
        return props_SNodeCreatorAndInitializer;
    }
    return null;
  }
}
