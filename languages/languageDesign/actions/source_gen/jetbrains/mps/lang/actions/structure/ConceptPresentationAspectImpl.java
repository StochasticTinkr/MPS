package jetbrains.mps.lang.actions.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AddMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_EditorCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_OperationContext = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_childConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_childSetter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_concept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_createdNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_currentTargetNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_link = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_nodeToCopyPreProcess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_nodeToCopyPreProcessOriginal = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_nodeToPastePostProcess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_nodeToPasteWrap = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_nodeToWrap = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_parameterObject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_parentNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_pattern = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_result = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_sourceNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_strictly = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_targetNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_wrapped = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptRightTransformPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptSubstitutePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptsSubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CopyPasteHandlers = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CopyPreProcessFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CopyPreProcessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteSmartActionFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerateCodeAction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenericSubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetActionUIFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ICouldBeAnnotatedWithMigrateManually = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISideTransform_String = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISubstitute_String = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncludeRightTransformForNodePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsSmartActionApplicableFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigrateManuallyAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigratedToAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NF_Concept_NewInstance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NF_LinkList_AddNewChildOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NF_Link_SetNewChildOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NF_Model_CreateNewNodeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NF_Model_CreateNewRootNodeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NF_Node_InsertNewNextSiblingOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NF_Node_InsertNewPrevSiblingOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NF_Node_ReplaceWithNewOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeFactories = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0xb).create();
  private final ConceptPresentation props_NodeFactory = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeSetupFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeSetupFunction_EnclosingNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeSetupFunction_NewNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeSetupFunction_SampleNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeSubstituteActions = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0dc).create();
  private final ConceptPresentation props_NodeSubstituteActionsBuilder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeSubstituteMenuBuilderPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeSubstitutePreconditionFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParameterizedSideTransformMenuPart = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ParameterizedSubstituteMenuPart = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_PastePostProcessFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PastePostProcessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PasteWrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PasteWrappers = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0mc).create();
  private final ConceptPresentation props_QueryFunction_ActionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_CanSubstitute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_GenericSubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_IconNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ParameterizedSideTransform_Handler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ParameterizedSideTransform_Query = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ParameterizedSubstitute_Handler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ParameterizedSubstitute_Icon = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_QueryFunction_ParameterizedSubstitute_Query = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ParameterizedSubstitute_String = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_PasteWrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_RemoveBy_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ReturnSmallPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_STVariableInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ST_CommonInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ST_RemoveBy_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SideTransform_ConceptHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SideTransform_Handler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SideTransform_Icon = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_QueryFunction_SideTransform_NodeQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SideTransform_String = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteIcon = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_QueryFunction_SubstituteString = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteVariableInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteWrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_Substitute_CommonInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_Substitute_Handler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_Substitute_SelectionHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RemoveByConditionPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RemoveDefaultsPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RemovePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RemoveSTByConditionPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SNodeCreatorAndInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SideTransformHintSubstituteActions = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ud).create();
  private final ConceptPresentation props_SideTransformHintSubstituteActionsBuilder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SideTransformHintSubstitutePreconditionFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SideTransformMenuBuilderPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SideTransformMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SideTransformVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SideTransformVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SideTransform_SimpleString = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleItemSubstitutePart = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_SimpleSideTransformMenuPart = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_SmartActionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SmartActionParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SmartEditorActions = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ge).create();
  private final ConceptPresentation props_SubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteNodeBuilderVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteNodeBuilderVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Substitute_SimpleString = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SurroundWithAction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WrapperSubstituteMenuPart = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AddMenuPart:
        return props_AddMenuPart;
      case LanguageConceptSwitch.ConceptFunctionParameter_EditorCell:
        return props_ConceptFunctionParameter_EditorCell;
      case LanguageConceptSwitch.ConceptFunctionParameter_OperationContext:
        return props_ConceptFunctionParameter_OperationContext;
      case LanguageConceptSwitch.ConceptFunctionParameter_childConcept:
        return props_ConceptFunctionParameter_childConcept;
      case LanguageConceptSwitch.ConceptFunctionParameter_childSetter:
        return props_ConceptFunctionParameter_childSetter;
      case LanguageConceptSwitch.ConceptFunctionParameter_concept:
        return props_ConceptFunctionParameter_concept;
      case LanguageConceptSwitch.ConceptFunctionParameter_createdNode:
        return props_ConceptFunctionParameter_createdNode;
      case LanguageConceptSwitch.ConceptFunctionParameter_currentTargetNode:
        return props_ConceptFunctionParameter_currentTargetNode;
      case LanguageConceptSwitch.ConceptFunctionParameter_link:
        return props_ConceptFunctionParameter_link;
      case LanguageConceptSwitch.ConceptFunctionParameter_nodeToCopyPreProcess:
        return props_ConceptFunctionParameter_nodeToCopyPreProcess;
      case LanguageConceptSwitch.ConceptFunctionParameter_nodeToCopyPreProcessOriginal:
        return props_ConceptFunctionParameter_nodeToCopyPreProcessOriginal;
      case LanguageConceptSwitch.ConceptFunctionParameter_nodeToPastePostProcess:
        return props_ConceptFunctionParameter_nodeToPastePostProcess;
      case LanguageConceptSwitch.ConceptFunctionParameter_nodeToPasteWrap:
        return props_ConceptFunctionParameter_nodeToPasteWrap;
      case LanguageConceptSwitch.ConceptFunctionParameter_nodeToWrap:
        return props_ConceptFunctionParameter_nodeToWrap;
      case LanguageConceptSwitch.ConceptFunctionParameter_parameterObject:
        return props_ConceptFunctionParameter_parameterObject;
      case LanguageConceptSwitch.ConceptFunctionParameter_parentNode:
        return props_ConceptFunctionParameter_parentNode;
      case LanguageConceptSwitch.ConceptFunctionParameter_pattern:
        return props_ConceptFunctionParameter_pattern;
      case LanguageConceptSwitch.ConceptFunctionParameter_result:
        return props_ConceptFunctionParameter_result;
      case LanguageConceptSwitch.ConceptFunctionParameter_sourceNode:
        return props_ConceptFunctionParameter_sourceNode;
      case LanguageConceptSwitch.ConceptFunctionParameter_strictly:
        return props_ConceptFunctionParameter_strictly;
      case LanguageConceptSwitch.ConceptFunctionParameter_targetNode:
        return props_ConceptFunctionParameter_targetNode;
      case LanguageConceptSwitch.ConceptFunctionParameter_wrapped:
        return props_ConceptFunctionParameter_wrapped;
      case LanguageConceptSwitch.ConceptPart:
        return props_ConceptPart;
      case LanguageConceptSwitch.ConceptRightTransformPart:
        return props_ConceptRightTransformPart;
      case LanguageConceptSwitch.ConceptSubstitutePart:
        return props_ConceptSubstitutePart;
      case LanguageConceptSwitch.ConceptsSubstituteMenuPart:
        return props_ConceptsSubstituteMenuPart;
      case LanguageConceptSwitch.CopyPasteHandlers:
        return props_CopyPasteHandlers;
      case LanguageConceptSwitch.CopyPreProcessFunction:
        return props_CopyPreProcessFunction;
      case LanguageConceptSwitch.CopyPreProcessor:
        return props_CopyPreProcessor;
      case LanguageConceptSwitch.ExecuteSmartActionFunction:
        return props_ExecuteSmartActionFunction;
      case LanguageConceptSwitch.GenerateCodeAction:
        return props_GenerateCodeAction;
      case LanguageConceptSwitch.GenericSubstituteMenuPart:
        return props_GenericSubstituteMenuPart;
      case LanguageConceptSwitch.GetActionUIFunction:
        return props_GetActionUIFunction;
      case LanguageConceptSwitch.ICouldBeAnnotatedWithMigrateManually:
        return props_ICouldBeAnnotatedWithMigrateManually;
      case LanguageConceptSwitch.ISideTransform_String:
        return props_ISideTransform_String;
      case LanguageConceptSwitch.ISubstitute_String:
        return props_ISubstitute_String;
      case LanguageConceptSwitch.IncludeRightTransformForNodePart:
        return props_IncludeRightTransformForNodePart;
      case LanguageConceptSwitch.IsSmartActionApplicableFunction:
        return props_IsSmartActionApplicableFunction;
      case LanguageConceptSwitch.MenuPart:
        return props_MenuPart;
      case LanguageConceptSwitch.MigrateManuallyAnnotation:
        return props_MigrateManuallyAnnotation;
      case LanguageConceptSwitch.MigratedToAnnotation:
        return props_MigratedToAnnotation;
      case LanguageConceptSwitch.NF_Concept_NewInstance:
        return props_NF_Concept_NewInstance;
      case LanguageConceptSwitch.NF_LinkList_AddNewChildOperation:
        return props_NF_LinkList_AddNewChildOperation;
      case LanguageConceptSwitch.NF_Link_SetNewChildOperation:
        return props_NF_Link_SetNewChildOperation;
      case LanguageConceptSwitch.NF_Model_CreateNewNodeOperation:
        return props_NF_Model_CreateNewNodeOperation;
      case LanguageConceptSwitch.NF_Model_CreateNewRootNodeOperation:
        return props_NF_Model_CreateNewRootNodeOperation;
      case LanguageConceptSwitch.NF_Node_InsertNewNextSiblingOperation:
        return props_NF_Node_InsertNewNextSiblingOperation;
      case LanguageConceptSwitch.NF_Node_InsertNewPrevSiblingOperation:
        return props_NF_Node_InsertNewPrevSiblingOperation;
      case LanguageConceptSwitch.NF_Node_ReplaceWithNewOperation:
        return props_NF_Node_ReplaceWithNewOperation;
      case LanguageConceptSwitch.NodeFactories:
        return props_NodeFactories;
      case LanguageConceptSwitch.NodeFactory:
        return props_NodeFactory;
      case LanguageConceptSwitch.NodeSetupFunction:
        return props_NodeSetupFunction;
      case LanguageConceptSwitch.NodeSetupFunction_EnclosingNode:
        return props_NodeSetupFunction_EnclosingNode;
      case LanguageConceptSwitch.NodeSetupFunction_NewNode:
        return props_NodeSetupFunction_NewNode;
      case LanguageConceptSwitch.NodeSetupFunction_SampleNode:
        return props_NodeSetupFunction_SampleNode;
      case LanguageConceptSwitch.NodeSubstituteActions:
        return props_NodeSubstituteActions;
      case LanguageConceptSwitch.NodeSubstituteActionsBuilder:
        return props_NodeSubstituteActionsBuilder;
      case LanguageConceptSwitch.NodeSubstituteMenuBuilderPart:
        return props_NodeSubstituteMenuBuilderPart;
      case LanguageConceptSwitch.NodeSubstitutePreconditionFunction:
        return props_NodeSubstitutePreconditionFunction;
      case LanguageConceptSwitch.ParameterizedSideTransformMenuPart:
        return props_ParameterizedSideTransformMenuPart;
      case LanguageConceptSwitch.ParameterizedSubstituteMenuPart:
        return props_ParameterizedSubstituteMenuPart;
      case LanguageConceptSwitch.PastePostProcessFunction:
        return props_PastePostProcessFunction;
      case LanguageConceptSwitch.PastePostProcessor:
        return props_PastePostProcessor;
      case LanguageConceptSwitch.PasteWrapper:
        return props_PasteWrapper;
      case LanguageConceptSwitch.PasteWrappers:
        return props_PasteWrappers;
      case LanguageConceptSwitch.QueryFunction_ActionType:
        return props_QueryFunction_ActionType;
      case LanguageConceptSwitch.QueryFunction_CanSubstitute:
        return props_QueryFunction_CanSubstitute;
      case LanguageConceptSwitch.QueryFunction_GenericSubstituteMenuPart:
        return props_QueryFunction_GenericSubstituteMenuPart;
      case LanguageConceptSwitch.QueryFunction_IconNode:
        return props_QueryFunction_IconNode;
      case LanguageConceptSwitch.QueryFunction_ParameterizedSideTransform_Handler:
        return props_QueryFunction_ParameterizedSideTransform_Handler;
      case LanguageConceptSwitch.QueryFunction_ParameterizedSideTransform_Query:
        return props_QueryFunction_ParameterizedSideTransform_Query;
      case LanguageConceptSwitch.QueryFunction_ParameterizedSubstitute_Handler:
        return props_QueryFunction_ParameterizedSubstitute_Handler;
      case LanguageConceptSwitch.QueryFunction_ParameterizedSubstitute_Icon:
        return props_QueryFunction_ParameterizedSubstitute_Icon;
      case LanguageConceptSwitch.QueryFunction_ParameterizedSubstitute_Query:
        return props_QueryFunction_ParameterizedSubstitute_Query;
      case LanguageConceptSwitch.QueryFunction_ParameterizedSubstitute_String:
        return props_QueryFunction_ParameterizedSubstitute_String;
      case LanguageConceptSwitch.QueryFunction_PasteWrapper:
        return props_QueryFunction_PasteWrapper;
      case LanguageConceptSwitch.QueryFunction_RemoveBy_Condition:
        return props_QueryFunction_RemoveBy_Condition;
      case LanguageConceptSwitch.QueryFunction_ReturnSmallPart:
        return props_QueryFunction_ReturnSmallPart;
      case LanguageConceptSwitch.QueryFunction_STVariableInitializer:
        return props_QueryFunction_STVariableInitializer;
      case LanguageConceptSwitch.QueryFunction_ST_CommonInitializer:
        return props_QueryFunction_ST_CommonInitializer;
      case LanguageConceptSwitch.QueryFunction_ST_RemoveBy_Condition:
        return props_QueryFunction_ST_RemoveBy_Condition;
      case LanguageConceptSwitch.QueryFunction_SideTransform_ConceptHandler:
        return props_QueryFunction_SideTransform_ConceptHandler;
      case LanguageConceptSwitch.QueryFunction_SideTransform_Handler:
        return props_QueryFunction_SideTransform_Handler;
      case LanguageConceptSwitch.QueryFunction_SideTransform_Icon:
        return props_QueryFunction_SideTransform_Icon;
      case LanguageConceptSwitch.QueryFunction_SideTransform_NodeQuery:
        return props_QueryFunction_SideTransform_NodeQuery;
      case LanguageConceptSwitch.QueryFunction_SideTransform_String:
        return props_QueryFunction_SideTransform_String;
      case LanguageConceptSwitch.QueryFunction_SubstituteIcon:
        return props_QueryFunction_SubstituteIcon;
      case LanguageConceptSwitch.QueryFunction_SubstituteString:
        return props_QueryFunction_SubstituteString;
      case LanguageConceptSwitch.QueryFunction_SubstituteVariableInitializer:
        return props_QueryFunction_SubstituteVariableInitializer;
      case LanguageConceptSwitch.QueryFunction_SubstituteWrapper:
        return props_QueryFunction_SubstituteWrapper;
      case LanguageConceptSwitch.QueryFunction_Substitute_CommonInitializer:
        return props_QueryFunction_Substitute_CommonInitializer;
      case LanguageConceptSwitch.QueryFunction_Substitute_Handler:
        return props_QueryFunction_Substitute_Handler;
      case LanguageConceptSwitch.QueryFunction_Substitute_SelectionHandler:
        return props_QueryFunction_Substitute_SelectionHandler;
      case LanguageConceptSwitch.RemoveByConditionPart:
        return props_RemoveByConditionPart;
      case LanguageConceptSwitch.RemoveDefaultsPart:
        return props_RemoveDefaultsPart;
      case LanguageConceptSwitch.RemovePart:
        return props_RemovePart;
      case LanguageConceptSwitch.RemoveSTByConditionPart:
        return props_RemoveSTByConditionPart;
      case LanguageConceptSwitch.SNodeCreatorAndInitializer:
        return props_SNodeCreatorAndInitializer;
      case LanguageConceptSwitch.SideTransformHintSubstituteActions:
        return props_SideTransformHintSubstituteActions;
      case LanguageConceptSwitch.SideTransformHintSubstituteActionsBuilder:
        return props_SideTransformHintSubstituteActionsBuilder;
      case LanguageConceptSwitch.SideTransformHintSubstitutePreconditionFunction:
        return props_SideTransformHintSubstitutePreconditionFunction;
      case LanguageConceptSwitch.SideTransformMenuBuilderPart:
        return props_SideTransformMenuBuilderPart;
      case LanguageConceptSwitch.SideTransformMenuPart:
        return props_SideTransformMenuPart;
      case LanguageConceptSwitch.SideTransformVariableDeclaration:
        return props_SideTransformVariableDeclaration;
      case LanguageConceptSwitch.SideTransformVariableReference:
        return props_SideTransformVariableReference;
      case LanguageConceptSwitch.SideTransform_SimpleString:
        return props_SideTransform_SimpleString;
      case LanguageConceptSwitch.SimpleItemSubstitutePart:
        return props_SimpleItemSubstitutePart;
      case LanguageConceptSwitch.SimpleSideTransformMenuPart:
        return props_SimpleSideTransformMenuPart;
      case LanguageConceptSwitch.SmartActionParameter:
        return props_SmartActionParameter;
      case LanguageConceptSwitch.SmartActionParameterReference:
        return props_SmartActionParameterReference;
      case LanguageConceptSwitch.SmartEditorActions:
        return props_SmartEditorActions;
      case LanguageConceptSwitch.SubstituteMenuPart:
        return props_SubstituteMenuPart;
      case LanguageConceptSwitch.SubstituteNodeBuilderVariableDeclaration:
        return props_SubstituteNodeBuilderVariableDeclaration;
      case LanguageConceptSwitch.SubstituteNodeBuilderVariableReference:
        return props_SubstituteNodeBuilderVariableReference;
      case LanguageConceptSwitch.Substitute_SimpleString:
        return props_Substitute_SimpleString;
      case LanguageConceptSwitch.SurroundWithAction:
        return props_SurroundWithAction;
      case LanguageConceptSwitch.WrapperSubstituteMenuPart:
        return props_WrapperSubstituteMenuPart;
    }
    return null;
  }
}
