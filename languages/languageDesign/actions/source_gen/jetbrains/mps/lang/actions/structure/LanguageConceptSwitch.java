package jetbrains.mps.lang.actions.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int ConceptFunctionParameter_nodeToCopyPreProcess = 0;
  public static final int ConceptFunctionParameter_nodeToCopyPreProcessOriginal = 1;
  public static final int ConceptFunctionParameter_nodeToPastePostProcess = 2;
  public static final int ConceptFunctionParameter_nodeToPasteWrap = 3;
  public static final int CopyPasteHandlers = 4;
  public static final int CopyPreProcessFunction = 5;
  public static final int CopyPreProcessor = 6;
  public static final int ICouldBeAnnotatedWithMigrateManually = 7;
  public static final int MigrateManuallyAnnotation = 8;
  public static final int MigratedToAnnotation = 9;
  public static final int NF_Concept_NewInstance = 10;
  public static final int NF_LinkList_AddNewChildOperation = 11;
  public static final int NF_Link_SetNewChildOperation = 12;
  public static final int NF_Model_CreateNewNodeOperation = 13;
  public static final int NF_Model_CreateNewRootNodeOperation = 14;
  public static final int NF_Node_InsertNewNextSiblingOperation = 15;
  public static final int NF_Node_InsertNewPrevSiblingOperation = 16;
  public static final int NF_Node_ReplaceWithNewOperation = 17;
  public static final int NodeFactories = 18;
  public static final int NodeFactory = 19;
  public static final int NodeSetupFunction = 20;
  public static final int NodeSetupFunction_EnclosingNode = 21;
  public static final int NodeSetupFunction_NewNode = 22;
  public static final int NodeSetupFunction_SampleNode = 23;
  public static final int PastePostProcessFunction = 24;
  public static final int PastePostProcessor = 25;
  public static final int PasteWrapper = 26;
  public static final int PasteWrappers = 27;
  public static final int QueryFunction_PasteWrapper = 28;
  public static final int SNodeCreatorAndInitializer = 29;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL);
    builder.put(0x528ba37dd3326034L, ConceptFunctionParameter_nodeToCopyPreProcess);
    builder.put(0x528ba37dd3326068L, ConceptFunctionParameter_nodeToCopyPreProcessOriginal);
    builder.put(0x53a34ae13c0d287bL, ConceptFunctionParameter_nodeToPastePostProcess);
    builder.put(0x11c51740034L, ConceptFunctionParameter_nodeToPasteWrap);
    builder.put(0x528ba37dd3383e1eL, CopyPasteHandlers);
    builder.put(0x528ba37dd3317b9fL, CopyPreProcessFunction);
    builder.put(0x528ba37dd3311946L, CopyPreProcessor);
    builder.put(0x7650d61a085f9929L, ICouldBeAnnotatedWithMigrateManually);
    builder.put(0x7ce019826543db5L, MigrateManuallyAnnotation);
    builder.put(0x7ce01982652a98aL, MigratedToAnnotation);
    builder.put(0x6bea674d717de5f4L, NF_Concept_NewInstance);
    builder.put(0xaa57300a39f8701L, NF_LinkList_AddNewChildOperation);
    builder.put(0xaa57300a39f86feL, NF_Link_SetNewChildOperation);
    builder.put(0x4c0fd74709e9e128L, NF_Model_CreateNewNodeOperation);
    builder.put(0x4c0fd74709e9f70cL, NF_Model_CreateNewRootNodeOperation);
    builder.put(0xaa57300a39f86f8L, NF_Node_InsertNewNextSiblingOperation);
    builder.put(0xaa57300a39f86faL, NF_Node_InsertNewPrevSiblingOperation);
    builder.put(0xaa57300a39f86fcL, NF_Node_ReplaceWithNewOperation);
    builder.put(0x10dc7f106b2L, NodeFactories);
    builder.put(0x10dc7f1f421L, NodeFactory);
    builder.put(0x10dc7f89eecL, NodeSetupFunction);
    builder.put(0x4d7fc32c166cf35eL, NodeSetupFunction_EnclosingNode);
    builder.put(0x4d7fc32c166cd43fL, NodeSetupFunction_NewNode);
    builder.put(0x4d7fc32c166cf25dL, NodeSetupFunction_SampleNode);
    builder.put(0x53a34ae13c0cee4fL, PastePostProcessFunction);
    builder.put(0x7d4ebb4f893516cL, PastePostProcessor);
    builder.put(0x11c51563250L, PasteWrapper);
    builder.put(0x11c51553d4eL, PasteWrappers);
    builder.put(0x11c51746008L, QueryFunction_PasteWrapper);
    builder.put(0x52fd3043dd42f3a9L, SNodeCreatorAndInitializer);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
