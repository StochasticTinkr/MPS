package jetbrains.mps.lang.actions.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AddMenuPart = 0;
  public static final int ConceptFunctionParameter_EditorCell = 1;
  public static final int ConceptFunctionParameter_OperationContext = 2;
  public static final int ConceptFunctionParameter_childConcept = 3;
  public static final int ConceptFunctionParameter_childSetter = 4;
  public static final int ConceptFunctionParameter_concept = 5;
  public static final int ConceptFunctionParameter_createdNode = 6;
  public static final int ConceptFunctionParameter_currentTargetNode = 7;
  public static final int ConceptFunctionParameter_link = 8;
  public static final int ConceptFunctionParameter_nodeToCopyPreProcess = 9;
  public static final int ConceptFunctionParameter_nodeToCopyPreProcessOriginal = 10;
  public static final int ConceptFunctionParameter_nodeToPastePostProcess = 11;
  public static final int ConceptFunctionParameter_nodeToPasteWrap = 12;
  public static final int ConceptFunctionParameter_nodeToWrap = 13;
  public static final int ConceptFunctionParameter_parameterObject = 14;
  public static final int ConceptFunctionParameter_parentNode = 15;
  public static final int ConceptFunctionParameter_pattern = 16;
  public static final int ConceptFunctionParameter_result = 17;
  public static final int ConceptFunctionParameter_sourceNode = 18;
  public static final int ConceptFunctionParameter_strictly = 19;
  public static final int ConceptFunctionParameter_targetNode = 20;
  public static final int ConceptFunctionParameter_wrapped = 21;
  public static final int ConceptPart = 22;
  public static final int ConceptRightTransformPart = 23;
  public static final int ConceptSubstitutePart = 24;
  public static final int ConceptsSubstituteMenuPart = 25;
  public static final int CopyPasteHandlers = 26;
  public static final int CopyPreProcessFunction = 27;
  public static final int CopyPreProcessor = 28;
  public static final int ExecuteSmartActionFunction = 29;
  public static final int GenerateCodeAction = 30;
  public static final int GenericSubstituteMenuPart = 31;
  public static final int GetActionUIFunction = 32;
  public static final int ICouldBeAnnotatedWithMigrateManually = 33;
  public static final int ISideTransform_String = 34;
  public static final int ISubstitute_String = 35;
  public static final int IncludeRightTransformForNodePart = 36;
  public static final int IsSmartActionApplicableFunction = 37;
  public static final int MenuPart = 38;
  public static final int MigrateManuallyAnnotation = 39;
  public static final int MigratedToAnnotation = 40;
  public static final int NF_Concept_NewInstance = 41;
  public static final int NF_LinkList_AddNewChildOperation = 42;
  public static final int NF_Link_SetNewChildOperation = 43;
  public static final int NF_Model_CreateNewNodeOperation = 44;
  public static final int NF_Model_CreateNewRootNodeOperation = 45;
  public static final int NF_Node_InsertNewNextSiblingOperation = 46;
  public static final int NF_Node_InsertNewPrevSiblingOperation = 47;
  public static final int NF_Node_ReplaceWithNewOperation = 48;
  public static final int NodeFactories = 49;
  public static final int NodeFactory = 50;
  public static final int NodeSetupFunction = 51;
  public static final int NodeSetupFunction_EnclosingNode = 52;
  public static final int NodeSetupFunction_NewNode = 53;
  public static final int NodeSetupFunction_SampleNode = 54;
  public static final int NodeSubstituteActions = 55;
  public static final int NodeSubstituteActionsBuilder = 56;
  public static final int NodeSubstituteMenuBuilderPart = 57;
  public static final int NodeSubstitutePreconditionFunction = 58;
  public static final int ParameterizedSideTransformMenuPart = 59;
  public static final int ParameterizedSubstituteMenuPart = 60;
  public static final int PastePostProcessFunction = 61;
  public static final int PastePostProcessor = 62;
  public static final int PasteWrapper = 63;
  public static final int PasteWrappers = 64;
  public static final int QueryFunction_ActionType = 65;
  public static final int QueryFunction_CanSubstitute = 66;
  public static final int QueryFunction_GenericSubstituteMenuPart = 67;
  public static final int QueryFunction_IconNode = 68;
  public static final int QueryFunction_ParameterizedSideTransform_Handler = 69;
  public static final int QueryFunction_ParameterizedSideTransform_Query = 70;
  public static final int QueryFunction_ParameterizedSubstitute_Handler = 71;
  public static final int QueryFunction_ParameterizedSubstitute_Icon = 72;
  public static final int QueryFunction_ParameterizedSubstitute_Query = 73;
  public static final int QueryFunction_ParameterizedSubstitute_String = 74;
  public static final int QueryFunction_PasteWrapper = 75;
  public static final int QueryFunction_RemoveBy_Condition = 76;
  public static final int QueryFunction_ReturnSmallPart = 77;
  public static final int QueryFunction_STVariableInitializer = 78;
  public static final int QueryFunction_ST_CommonInitializer = 79;
  public static final int QueryFunction_ST_RemoveBy_Condition = 80;
  public static final int QueryFunction_SideTransform_ConceptHandler = 81;
  public static final int QueryFunction_SideTransform_Handler = 82;
  public static final int QueryFunction_SideTransform_Icon = 83;
  public static final int QueryFunction_SideTransform_NodeQuery = 84;
  public static final int QueryFunction_SideTransform_String = 85;
  public static final int QueryFunction_SubstituteIcon = 86;
  public static final int QueryFunction_SubstituteString = 87;
  public static final int QueryFunction_SubstituteVariableInitializer = 88;
  public static final int QueryFunction_SubstituteWrapper = 89;
  public static final int QueryFunction_Substitute_CommonInitializer = 90;
  public static final int QueryFunction_Substitute_Handler = 91;
  public static final int QueryFunction_Substitute_SelectionHandler = 92;
  public static final int RemoveByConditionPart = 93;
  public static final int RemoveDefaultsPart = 94;
  public static final int RemovePart = 95;
  public static final int RemoveSTByConditionPart = 96;
  public static final int SNodeCreatorAndInitializer = 97;
  public static final int SideTransformHintSubstituteActions = 98;
  public static final int SideTransformHintSubstituteActionsBuilder = 99;
  public static final int SideTransformHintSubstitutePreconditionFunction = 100;
  public static final int SideTransformMenuBuilderPart = 101;
  public static final int SideTransformMenuPart = 102;
  public static final int SideTransformVariableDeclaration = 103;
  public static final int SideTransformVariableReference = 104;
  public static final int SideTransform_SimpleString = 105;
  public static final int SimpleItemSubstitutePart = 106;
  public static final int SimpleSideTransformMenuPart = 107;
  public static final int SmartActionParameter = 108;
  public static final int SmartActionParameterReference = 109;
  public static final int SmartEditorActions = 110;
  public static final int SubstituteMenuPart = 111;
  public static final int SubstituteNodeBuilderVariableDeclaration = 112;
  public static final int SubstituteNodeBuilderVariableReference = 113;
  public static final int Substitute_SimpleString = 114;
  public static final int SurroundWithAction = 115;
  public static final int WrapperSubstituteMenuPart = 116;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xaee9cad2acd44608L, 0xaef20004f6a1cdbdL);
    builder.put(0x1121dfa84e4L, AddMenuPart);
    builder.put(0x11f8f120523L, ConceptFunctionParameter_EditorCell);
    builder.put(0x11f8f139b1dL, ConceptFunctionParameter_OperationContext);
    builder.put(0x112387cf896L, ConceptFunctionParameter_childConcept);
    builder.put(0x1175fd19500L, ConceptFunctionParameter_childSetter);
    builder.put(0x112235845abL, ConceptFunctionParameter_concept);
    builder.put(0x61f403867e2f6f6L, ConceptFunctionParameter_createdNode);
    builder.put(0x1122c8bef38L, ConceptFunctionParameter_currentTargetNode);
    builder.put(0x11c6f1d424dL, ConceptFunctionParameter_link);
    builder.put(0x528ba37dd3326034L, ConceptFunctionParameter_nodeToCopyPreProcess);
    builder.put(0x528ba37dd3326068L, ConceptFunctionParameter_nodeToCopyPreProcessOriginal);
    builder.put(0x53a34ae13c0d287bL, ConceptFunctionParameter_nodeToPastePostProcess);
    builder.put(0x11c51740034L, ConceptFunctionParameter_nodeToPasteWrap);
    builder.put(0x11222aa8df0L, ConceptFunctionParameter_nodeToWrap);
    builder.put(0x1121ecda6bbL, ConceptFunctionParameter_parameterObject);
    builder.put(0x10ccb7e17b2L, ConceptFunctionParameter_parentNode);
    builder.put(0x1121e2c89d1L, ConceptFunctionParameter_pattern);
    builder.put(0x1122a0d061aL, ConceptFunctionParameter_result);
    builder.put(0x112284c7b8bL, ConceptFunctionParameter_sourceNode);
    builder.put(0x11976233a0aL, ConceptFunctionParameter_strictly);
    builder.put(0x4b4c9b482992dc34L, ConceptFunctionParameter_targetNode);
    builder.put(0x11ad991846fL, ConceptFunctionParameter_wrapped);
    builder.put(0x1121e8bfbfdL, ConceptPart);
    builder.put(0x1136583873dL, ConceptRightTransformPart);
    builder.put(0x112c58682cfL, ConceptSubstitutePart);
    builder.put(0x1122264243cL, ConceptsSubstituteMenuPart);
    builder.put(0x528ba37dd3383e1eL, CopyPasteHandlers);
    builder.put(0x528ba37dd3317b9fL, CopyPreProcessFunction);
    builder.put(0x528ba37dd3311946L, CopyPreProcessor);
    builder.put(0x11f8f52c18fL, ExecuteSmartActionFunction);
    builder.put(0x11f8eca117bL, GenerateCodeAction);
    builder.put(0x1175fc5138eL, GenericSubstituteMenuPart);
    builder.put(0x11f8f5118d4L, GetActionUIFunction);
    builder.put(0x7650d61a085f9929L, ICouldBeAnnotatedWithMigrateManually);
    builder.put(0x1169101ee91L, ISideTransform_String);
    builder.put(0x11691102070L, ISubstitute_String);
    builder.put(0x112c41b4114L, IncludeRightTransformForNodePart);
    builder.put(0x11f8effcd77L, IsSmartActionApplicableFunction);
    builder.put(0x1122837a3cdL, MenuPart);
    builder.put(0x7ce019826543db5L, MigrateManuallyAnnotation);
    builder.put(0x7ce01982652a98aL, MigratedToAnnotation);
    builder.put(0x6bea674d717de5f4L, NF_Concept_NewInstance);
    builder.put(0xaa57300a39f8701L, NF_LinkList_AddNewChildOperation);
    builder.put(0xaa57300a39f86feL, NF_Link_SetNewChildOperation);
    builder.put(0x4c0fd74709e9e128L, NF_Model_CreateNewNodeOperation);
    builder.put(0x4c0fd74709e9f70cL, NF_Model_CreateNewRootNodeOperation);
    builder.put(0xaa57300a39f86f8L, NF_Node_InsertNewNextSiblingOperation);
    builder.put(0xaa57300a39f86faL, NF_Node_InsertNewPrevSiblingOperation);
    builder.put(0xaa57300a39f86fcL, NF_Node_ReplaceWithNewOperation);
    builder.put(0x10dc7f106b2L, NodeFactories);
    builder.put(0x10dc7f1f421L, NodeFactory);
    builder.put(0x10dc7f89eecL, NodeSetupFunction);
    builder.put(0x4d7fc32c166cf35eL, NodeSetupFunction_EnclosingNode);
    builder.put(0x4d7fc32c166cd43fL, NodeSetupFunction_NewNode);
    builder.put(0x4d7fc32c166cf25dL, NodeSetupFunction_SampleNode);
    builder.put(0x102ebc25367L, NodeSubstituteActions);
    builder.put(0x102ebd2e9eaL, NodeSubstituteActionsBuilder);
    builder.put(0x743255fa452e1d4eL, NodeSubstituteMenuBuilderPart);
    builder.put(0x10ccb7b7b84L, NodeSubstitutePreconditionFunction);
    builder.put(0x11228fddb03L, ParameterizedSideTransformMenuPart);
    builder.put(0x1121ecab8a6L, ParameterizedSubstituteMenuPart);
    builder.put(0x53a34ae13c0cee4fL, PastePostProcessFunction);
    builder.put(0x7d4ebb4f893516cL, PastePostProcessor);
    builder.put(0x11c51563250L, PasteWrapper);
    builder.put(0x11c51553d4eL, PasteWrappers);
    builder.put(0x11e73a269d4L, QueryFunction_ActionType);
    builder.put(0x1121e2acf26L, QueryFunction_CanSubstitute);
    builder.put(0x1175fc590cfL, QueryFunction_GenericSubstituteMenuPart);
    builder.put(0x58d3fff801434049L, QueryFunction_IconNode);
    builder.put(0x1122905dd10L, QueryFunction_ParameterizedSideTransform_Handler);
    builder.put(0x11228ff0cb4L, QueryFunction_ParameterizedSideTransform_Query);
    builder.put(0x1121ee2e40fL, QueryFunction_ParameterizedSubstitute_Handler);
    builder.put(0x1181cb91355L, QueryFunction_ParameterizedSubstitute_Icon);
    builder.put(0x1121ece8624L, QueryFunction_ParameterizedSubstitute_Query);
    builder.put(0x1121ee13382L, QueryFunction_ParameterizedSubstitute_String);
    builder.put(0x11c51746008L, QueryFunction_PasteWrapper);
    builder.put(0x11223572c26L, QueryFunction_RemoveBy_Condition);
    builder.put(0x118ccd8c942L, QueryFunction_ReturnSmallPart);
    builder.put(0x1182d1b57deL, QueryFunction_STVariableInitializer);
    builder.put(0x1182d37f835L, QueryFunction_ST_CommonInitializer);
    builder.put(0x116cdd863ddL, QueryFunction_ST_RemoveBy_Condition);
    builder.put(0x1122a0de432L, QueryFunction_SideTransform_ConceptHandler);
    builder.put(0x112285d125eL, QueryFunction_SideTransform_Handler);
    builder.put(0x1181cc7eba9L, QueryFunction_SideTransform_Icon);
    builder.put(0x11266483c18L, QueryFunction_SideTransform_NodeQuery);
    builder.put(0x112285ab108L, QueryFunction_SideTransform_String);
    builder.put(0x1181cbf9d29L, QueryFunction_SubstituteIcon);
    builder.put(0x1121eb0d54dL, QueryFunction_SubstituteString);
    builder.put(0x1129d121a7cL, QueryFunction_SubstituteVariableInitializer);
    builder.put(0x11222a97b92L, QueryFunction_SubstituteWrapper);
    builder.put(0x11274dc9ebaL, QueryFunction_Substitute_CommonInitializer);
    builder.put(0x1121e310c5dL, QueryFunction_Substitute_Handler);
    builder.put(0x61f4038641e3123L, QueryFunction_Substitute_SelectionHandler);
    builder.put(0x11223561225L, RemoveByConditionPart);
    builder.put(0x1122f4e71c0L, RemoveDefaultsPart);
    builder.put(0x1122318438cL, RemovePart);
    builder.put(0x116cddb8de5L, RemoveSTByConditionPart);
    builder.put(0x52fd3043dd42f3a9L, SNodeCreatorAndInitializer);
    builder.put(0x108fad1c116L, SideTransformHintSubstituteActions);
    builder.put(0x108facec6d2L, SideTransformHintSubstituteActionsBuilder);
    builder.put(0x10cd4def236L, SideTransformHintSubstitutePreconditionFunction);
    builder.put(0x743255fa452e1995L, SideTransformMenuBuilderPart);
    builder.put(0x112283d3033L, SideTransformMenuPart);
    builder.put(0x1182d1a6565L, SideTransformVariableDeclaration);
    builder.put(0x1182d21ed8dL, SideTransformVariableReference);
    builder.put(0x1169104df47L, SideTransform_SimpleString);
    builder.put(0x1121e328443L, SimpleItemSubstitutePart);
    builder.put(0x1122859d0ecL, SimpleSideTransformMenuPart);
    builder.put(0x11f8eeedcb4L, SmartActionParameter);
    builder.put(0x11f8ef01705L, SmartActionParameterReference);
    builder.put(0x11f8ec8c7e9L, SmartEditorActions);
    builder.put(0x1121df5451bL, SubstituteMenuPart);
    builder.put(0x11266742db0L, SubstituteNodeBuilderVariableDeclaration);
    builder.put(0x112668f8fe4L, SubstituteNodeBuilderVariableReference);
    builder.put(0x116910ff20bL, Substitute_SimpleString);
    builder.put(0x11f8ec99f09L, SurroundWithAction);
    builder.put(0x11222a8b06bL, WrapperSubstituteMenuPart);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
