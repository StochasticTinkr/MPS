package jetbrains.mps.lang.smodel.query.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractPrintExpression_old = 0;
  public static final int BLCommand_old = 1;
  public static final int BLExpression_old = 2;
  public static final int CustomScope = 3;
  public static final int ExpressionHelpProvider = 4;
  public static final int GlobalScope_old = 5;
  public static final int HelpProvider = 6;
  public static final int InstancesExpression = 7;
  public static final int ModelScope = 8;
  public static final int ModelsExpression = 9;
  public static final int ModulesExpression = 10;
  public static final int ModulesScope = 11;
  public static final int NodesExpression = 12;
  public static final int OperationHelpProvider = 13;
  public static final int PrintExpression_old = 14;
  public static final int PrintNodeExpression_old = 15;
  public static final int PrintNodeReferenceExpression_old = 16;
  public static final int PrintSequenceExpression_old = 17;
  public static final int PrintTextExpression_old = 18;
  public static final int ProjectExpression_old = 19;
  public static final int ProjectScope_old = 20;
  public static final int QueryExpression = 21;
  public static final int QueryExpressionScopeProvider = 22;
  public static final int QueryParameter = 23;
  public static final int QueryParameterExact = 24;
  public static final int QueryParameterIncludeReadOnly = 25;
  public static final int QueryParameterList = 26;
  public static final int QueryParameterScope = 27;
  public static final int ReferencesExpression = 28;
  public static final int ScopeParameter = 29;
  public static final int ShowExpression_old = 30;
  public static final int UsagesExpression = 31;
  public static final int WithStatement = 32;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL);
    builder.put(0x6c8954f469a7c420L, AbstractPrintExpression_old);
    builder.put(0x4bd43869e610f3e9L, BLCommand_old);
    builder.put(0x6a40a3596560a9d9L, BLExpression_old);
    builder.put(0x307931d0f98575c9L, CustomScope);
    builder.put(0x613b3dd6aa6dac90L, ExpressionHelpProvider);
    builder.put(0x3bc64421763add42L, GlobalScope_old);
    builder.put(0x690b986730edd07L, HelpProvider);
    builder.put(0x6b643f33718aa10dL, InstancesExpression);
    builder.put(0x307931d0f952484eL, ModelScope);
    builder.put(0x5f41efb675beab2dL, ModelsExpression);
    builder.put(0x5f41efb675cc2262L, ModulesExpression);
    builder.put(0x263c7e661fa6d53dL, ModulesScope);
    builder.put(0x272b1214886bd08eL, NodesExpression);
    builder.put(0x5252d9021b8b6c03L, OperationHelpProvider);
    builder.put(0x6979f0787b2a9377L, PrintExpression_old);
    builder.put(0x4c7a26b31bd03b59L, PrintNodeExpression_old);
    builder.put(0x5f195a051bd9bddcL, PrintNodeReferenceExpression_old);
    builder.put(0x6979f0787b7db64fL, PrintSequenceExpression_old);
    builder.put(0x7417cca3eb1feca9L, PrintTextExpression_old);
    builder.put(0xa721a59126bb908L, ProjectExpression_old);
    builder.put(0x3bc64421763adda2L, ProjectScope_old);
    builder.put(0x3bc64421760bacfdL, QueryExpression);
    builder.put(0x7057c6c02678c07L, QueryExpressionScopeProvider);
    builder.put(0x3bc64421760badf5L, QueryParameter);
    builder.put(0x967fc67f6f09d70L, QueryParameterExact);
    builder.put(0x3bc644217618ec86L, QueryParameterIncludeReadOnly);
    builder.put(0x3bc644217616ddf9L, QueryParameterList);
    builder.put(0x3bc644217618ed2fL, QueryParameterScope);
    builder.put(0x57bda059470950bdL, ReferencesExpression);
    builder.put(0x3bc64421763add4bL, ScopeParameter);
    builder.put(0x75bb0160f191d79fL, ShowExpression_old);
    builder.put(0x75bb0160f191d6ebL, UsagesExpression);
    builder.put(0x3ac2ae2c0bcf368bL, WithStatement);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
