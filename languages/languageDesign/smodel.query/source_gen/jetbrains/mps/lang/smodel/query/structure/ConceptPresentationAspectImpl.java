package jetbrains.mps.lang.smodel.query.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractPrintExpression_old = new ConceptPresentationBuilder().deprecated(true).deprecated().create();
  private final ConceptPresentation props_BLCommand_old = new ConceptPresentationBuilder().deprecated(true).deprecated().shortDesc("baseLanguage statements").create();
  private final ConceptPresentation props_BLExpression_old = new ConceptPresentationBuilder().deprecated(true).deprecated().shortDesc("baseLanguage expression").create();
  private final ConceptPresentation props_CustomScope = new ConceptPresentationBuilder().shortDesc("? extends SearchScope").create();
  private final ConceptPresentation props_ExpressionHelpProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GlobalScope_old = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_HelpProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstancesExpression = new ConceptPresentationBuilder().shortDesc("instances of a concept in scope").create();
  private final ConceptPresentation props_ModelScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelsExpression = new ConceptPresentationBuilder().shortDesc("all models in scope").create();
  private final ConceptPresentation props_ModulesExpression = new ConceptPresentationBuilder().shortDesc("all modules in scope").create();
  private final ConceptPresentation props_ModulesScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodesExpression = new ConceptPresentationBuilder().shortDesc("all nodes in scope").create();
  private final ConceptPresentation props_OperationHelpProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintExpression_old = new ConceptPresentationBuilder().deprecated(true).shortDesc("smart print depending on content").create();
  private final ConceptPresentation props_PrintNodeExpression_old = new ConceptPresentationBuilder().deprecated(true).shortDesc("print node copy").create();
  private final ConceptPresentation props_PrintNodeReferenceExpression_old = new ConceptPresentationBuilder().deprecated(true).shortDesc("print reference to the node").create();
  private final ConceptPresentation props_PrintSequenceExpression_old = new ConceptPresentationBuilder().deprecated(true).shortDesc("print size with link to usages view").create();
  private final ConceptPresentation props_PrintTextExpression_old = new ConceptPresentationBuilder().deprecated(true).shortDesc("print as string").create();
  private final ConceptPresentation props_ProjectExpression_old = new ConceptPresentationBuilder().deprecated(true).shortDesc("the current project").create();
  private final ConceptPresentation props_ProjectScope_old = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_QueryExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameterExact = new ConceptPresentationBuilder().shortDesc("exact instances").create();
  private final ConceptPresentation props_QueryParameterIncludeReadOnly = new ConceptPresentationBuilder().shortDesc("include read only").create();
  private final ConceptPresentation props_QueryParameterList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameterScope = new ConceptPresentationBuilder().shortDesc("used search scope").create();
  private final ConceptPresentation props_ReferencesExpression = new ConceptPresentationBuilder().shortDesc("all references in scope").create();
  private final ConceptPresentation props_ScopeParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShowExpression_old = new ConceptPresentationBuilder().deprecated(true).deprecated().shortDesc("show in usage view").create();
  private final ConceptPresentation props_UsagesExpression = new ConceptPresentationBuilder().shortDesc("direct references to a node in scope").create();
  private final ConceptPresentation props_WithStatement = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractPrintExpression_old:
        return props_AbstractPrintExpression_old;
      case LanguageConceptSwitch.BLCommand_old:
        return props_BLCommand_old;
      case LanguageConceptSwitch.BLExpression_old:
        return props_BLExpression_old;
      case LanguageConceptSwitch.CustomScope:
        return props_CustomScope;
      case LanguageConceptSwitch.ExpressionHelpProvider:
        return props_ExpressionHelpProvider;
      case LanguageConceptSwitch.GlobalScope_old:
        return props_GlobalScope_old;
      case LanguageConceptSwitch.HelpProvider:
        return props_HelpProvider;
      case LanguageConceptSwitch.InstancesExpression:
        return props_InstancesExpression;
      case LanguageConceptSwitch.ModelScope:
        return props_ModelScope;
      case LanguageConceptSwitch.ModelsExpression:
        return props_ModelsExpression;
      case LanguageConceptSwitch.ModulesExpression:
        return props_ModulesExpression;
      case LanguageConceptSwitch.ModulesScope:
        return props_ModulesScope;
      case LanguageConceptSwitch.NodesExpression:
        return props_NodesExpression;
      case LanguageConceptSwitch.OperationHelpProvider:
        return props_OperationHelpProvider;
      case LanguageConceptSwitch.PrintExpression_old:
        return props_PrintExpression_old;
      case LanguageConceptSwitch.PrintNodeExpression_old:
        return props_PrintNodeExpression_old;
      case LanguageConceptSwitch.PrintNodeReferenceExpression_old:
        return props_PrintNodeReferenceExpression_old;
      case LanguageConceptSwitch.PrintSequenceExpression_old:
        return props_PrintSequenceExpression_old;
      case LanguageConceptSwitch.PrintTextExpression_old:
        return props_PrintTextExpression_old;
      case LanguageConceptSwitch.ProjectExpression_old:
        return props_ProjectExpression_old;
      case LanguageConceptSwitch.ProjectScope_old:
        return props_ProjectScope_old;
      case LanguageConceptSwitch.QueryExpression:
        return props_QueryExpression;
      case LanguageConceptSwitch.QueryParameter:
        return props_QueryParameter;
      case LanguageConceptSwitch.QueryParameterExact:
        return props_QueryParameterExact;
      case LanguageConceptSwitch.QueryParameterIncludeReadOnly:
        return props_QueryParameterIncludeReadOnly;
      case LanguageConceptSwitch.QueryParameterList:
        return props_QueryParameterList;
      case LanguageConceptSwitch.QueryParameterScope:
        return props_QueryParameterScope;
      case LanguageConceptSwitch.ReferencesExpression:
        return props_ReferencesExpression;
      case LanguageConceptSwitch.ScopeParameter:
        return props_ScopeParameter;
      case LanguageConceptSwitch.ShowExpression_old:
        return props_ShowExpression_old;
      case LanguageConceptSwitch.UsagesExpression:
        return props_UsagesExpression;
      case LanguageConceptSwitch.WithStatement:
        return props_WithStatement;
    }
    return null;
  }
}
