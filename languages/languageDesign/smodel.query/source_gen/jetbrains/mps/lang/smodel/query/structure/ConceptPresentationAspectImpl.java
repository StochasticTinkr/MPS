package jetbrains.mps.lang.smodel.query.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractPrintExpression_old;
  private ConceptPresentation props_BLCommand_old;
  private ConceptPresentation props_BLExpression_old;
  private ConceptPresentation props_CustomScope;
  private ConceptPresentation props_ExpressionHelpProvider;
  private ConceptPresentation props_GlobalScope_old;
  private ConceptPresentation props_HelpProvider;
  private ConceptPresentation props_InstancesExpression;
  private ConceptPresentation props_ModelScope;
  private ConceptPresentation props_ModelsExpression;
  private ConceptPresentation props_ModulesExpression;
  private ConceptPresentation props_ModulesScope;
  private ConceptPresentation props_NodesExpression;
  private ConceptPresentation props_OperationHelpProvider;
  private ConceptPresentation props_PrintExpression_old;
  private ConceptPresentation props_PrintNodeExpression_old;
  private ConceptPresentation props_PrintNodeReferenceExpression_old;
  private ConceptPresentation props_PrintSequenceExpression_old;
  private ConceptPresentation props_PrintTextExpression_old;
  private ConceptPresentation props_ProjectExpression_old;
  private ConceptPresentation props_ProjectScope_old;
  private ConceptPresentation props_QueryExpression;
  private ConceptPresentation props_QueryExpressionScopeProvider;
  private ConceptPresentation props_QueryParameter;
  private ConceptPresentation props_QueryParameterExact;
  private ConceptPresentation props_QueryParameterIncludeReadOnly;
  private ConceptPresentation props_QueryParameterList;
  private ConceptPresentation props_QueryParameterScope;
  private ConceptPresentation props_ReferencesExpression;
  private ConceptPresentation props_ScopeParameter;
  private ConceptPresentation props_ShowExpression_old;
  private ConceptPresentation props_UsagesExpression;
  private ConceptPresentation props_WithStatement;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractPrintExpression_old:
        if (props_AbstractPrintExpression_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x6c8954f469a7c420L);
          cpb.deprecated(true);
          cpb.deprecateAggregation(0x7417cca3eb1ff761L, "object_old");
          props_AbstractPrintExpression_old = cpb.create();
        }
        return props_AbstractPrintExpression_old;
      case LanguageConceptSwitch.BLCommand_old:
        if (props_BLCommand_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x4bd43869e610f3e9L);
          cpb.deprecated(true);
          cpb.deprecateAggregation(0x188f8efcef6cea65L, "body_old");
          cpb.shortDesc("baseLanguage statements");
          props_BLCommand_old = cpb.create();
        }
        return props_BLCommand_old;
      case LanguageConceptSwitch.BLExpression_old:
        if (props_BLExpression_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x6a40a3596560a9d9L);
          cpb.deprecated(true);
          cpb.deprecateAggregation(0x6a40a3596560aa42L, "expression_old");
          cpb.shortDesc("baseLanguage expression");
          props_BLExpression_old = cpb.create();
        }
        return props_BLExpression_old;
      case LanguageConceptSwitch.CustomScope:
        if (props_CustomScope == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("? extends SearchScope");
          props_CustomScope = cpb.create();
        }
        return props_CustomScope;
      case LanguageConceptSwitch.ExpressionHelpProvider:
        if (props_ExpressionHelpProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ExpressionHelpProvider = cpb.create();
        }
        return props_ExpressionHelpProvider;
      case LanguageConceptSwitch.GlobalScope_old:
        if (props_GlobalScope_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          props_GlobalScope_old = cpb.create();
        }
        return props_GlobalScope_old;
      case LanguageConceptSwitch.HelpProvider:
        if (props_HelpProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_HelpProvider = cpb.create();
        }
        return props_HelpProvider;
      case LanguageConceptSwitch.InstancesExpression:
        if (props_InstancesExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("instances of a concept in scope");
          props_InstancesExpression = cpb.create();
        }
        return props_InstancesExpression;
      case LanguageConceptSwitch.ModelScope:
        if (props_ModelScope == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ModelScope = cpb.create();
        }
        return props_ModelScope;
      case LanguageConceptSwitch.ModelsExpression:
        if (props_ModelsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("all models in scope");
          props_ModelsExpression = cpb.create();
        }
        return props_ModelsExpression;
      case LanguageConceptSwitch.ModulesExpression:
        if (props_ModulesExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("all modules in scope");
          props_ModulesExpression = cpb.create();
        }
        return props_ModulesExpression;
      case LanguageConceptSwitch.ModulesScope:
        if (props_ModulesScope == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ModulesScope = cpb.create();
        }
        return props_ModulesScope;
      case LanguageConceptSwitch.NodesExpression:
        if (props_NodesExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("all nodes in scope");
          props_NodesExpression = cpb.create();
        }
        return props_NodesExpression;
      case LanguageConceptSwitch.OperationHelpProvider:
        if (props_OperationHelpProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_OperationHelpProvider = cpb.create();
        }
        return props_OperationHelpProvider;
      case LanguageConceptSwitch.PrintExpression_old:
        if (props_PrintExpression_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.shortDesc("smart print depending on content");
          props_PrintExpression_old = cpb.create();
        }
        return props_PrintExpression_old;
      case LanguageConceptSwitch.PrintNodeExpression_old:
        if (props_PrintNodeExpression_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.shortDesc("print node copy");
          props_PrintNodeExpression_old = cpb.create();
        }
        return props_PrintNodeExpression_old;
      case LanguageConceptSwitch.PrintNodeReferenceExpression_old:
        if (props_PrintNodeReferenceExpression_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.shortDesc("print reference to the node");
          props_PrintNodeReferenceExpression_old = cpb.create();
        }
        return props_PrintNodeReferenceExpression_old;
      case LanguageConceptSwitch.PrintSequenceExpression_old:
        if (props_PrintSequenceExpression_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.shortDesc("print size with link to usages view");
          props_PrintSequenceExpression_old = cpb.create();
        }
        return props_PrintSequenceExpression_old;
      case LanguageConceptSwitch.PrintTextExpression_old:
        if (props_PrintTextExpression_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.shortDesc("print as string");
          props_PrintTextExpression_old = cpb.create();
        }
        return props_PrintTextExpression_old;
      case LanguageConceptSwitch.ProjectExpression_old:
        if (props_ProjectExpression_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.shortDesc("the current project");
          props_ProjectExpression_old = cpb.create();
        }
        return props_ProjectExpression_old;
      case LanguageConceptSwitch.ProjectScope_old:
        if (props_ProjectScope_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          props_ProjectScope_old = cpb.create();
        }
        return props_ProjectScope_old;
      case LanguageConceptSwitch.QueryExpression:
        if (props_QueryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_QueryExpression = cpb.create();
        }
        return props_QueryExpression;
      case LanguageConceptSwitch.QueryExpressionScopeProvider:
        if (props_QueryExpressionScopeProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_QueryExpressionScopeProvider = cpb.create();
        }
        return props_QueryExpressionScopeProvider;
      case LanguageConceptSwitch.QueryParameter:
        if (props_QueryParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_QueryParameter = cpb.create();
        }
        return props_QueryParameter;
      case LanguageConceptSwitch.QueryParameterExact:
        if (props_QueryParameterExact == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("exact instances");
          props_QueryParameterExact = cpb.create();
        }
        return props_QueryParameterExact;
      case LanguageConceptSwitch.QueryParameterIncludeReadOnly:
        if (props_QueryParameterIncludeReadOnly == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("include read only");
          props_QueryParameterIncludeReadOnly = cpb.create();
        }
        return props_QueryParameterIncludeReadOnly;
      case LanguageConceptSwitch.QueryParameterList:
        if (props_QueryParameterList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_QueryParameterList = cpb.create();
        }
        return props_QueryParameterList;
      case LanguageConceptSwitch.QueryParameterScope:
        if (props_QueryParameterScope == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("used search scope");
          props_QueryParameterScope = cpb.create();
        }
        return props_QueryParameterScope;
      case LanguageConceptSwitch.ReferencesExpression:
        if (props_ReferencesExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("all references in scope");
          props_ReferencesExpression = cpb.create();
        }
        return props_ReferencesExpression;
      case LanguageConceptSwitch.ScopeParameter:
        if (props_ScopeParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ScopeParameter = cpb.create();
        }
        return props_ScopeParameter;
      case LanguageConceptSwitch.ShowExpression_old:
        if (props_ShowExpression_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x75bb0160f191d79fL);
          cpb.deprecated(true);
          cpb.deprecateAggregation(0x6979f0787b81e875L, "object_old");
          cpb.shortDesc("show in usage view");
          props_ShowExpression_old = cpb.create();
        }
        return props_ShowExpression_old;
      case LanguageConceptSwitch.UsagesExpression:
        if (props_UsagesExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("direct references to a node in scope");
          props_UsagesExpression = cpb.create();
        }
        return props_UsagesExpression;
      case LanguageConceptSwitch.WithStatement:
        if (props_WithStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_WithStatement = cpb.create();
        }
        return props_WithStatement;
    }
    return null;
  }
}
