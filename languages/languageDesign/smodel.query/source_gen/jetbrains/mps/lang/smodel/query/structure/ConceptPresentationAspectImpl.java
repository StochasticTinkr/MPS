package jetbrains.mps.lang.smodel.query.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractPrintExpression_old = new ConceptPresentationBuilder().deprecated().deprecated().create();
  private final ConceptPresentation props_BLCommand_old = new ConceptPresentationBuilder().deprecated().deprecated().create();
  private final ConceptPresentation props_BLExpression_old = new ConceptPresentationBuilder().deprecated().deprecated().create();
  private final ConceptPresentation props_CustomScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExpressionHelpProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GlobalScope_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_HelpProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstancesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModulesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModulesScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationHelpProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintExpression_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_PrintNodeExpression_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_PrintNodeReferenceExpression_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_PrintSequenceExpression_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_PrintTextExpression_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ProjectExpression_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ProjectScope_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_QueryExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameterIncludeReadOnly = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameterList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameterScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferencesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ScopeParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShowExpression_old = new ConceptPresentationBuilder().deprecated().deprecated().create();
  private final ConceptPresentation props_UsagesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WithStatement = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_lpa09p_a0gb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractPrintExpression_old;
          }
          break;
        case 1:
          if (true) {
            return props_BLCommand_old;
          }
          break;
        case 2:
          if (true) {
            return props_BLExpression_old;
          }
          break;
        case 3:
          if (true) {
            return props_CustomScope;
          }
          break;
        case 4:
          if (true) {
            return props_ExpressionHelpProvider;
          }
          break;
        case 5:
          if (true) {
            return props_GlobalScope_old;
          }
          break;
        case 6:
          if (true) {
            return props_HelpProvider;
          }
          break;
        case 7:
          if (true) {
            return props_InstancesExpression;
          }
          break;
        case 8:
          if (true) {
            return props_ModelScope;
          }
          break;
        case 9:
          if (true) {
            return props_ModelsExpression;
          }
          break;
        case 10:
          if (true) {
            return props_ModulesExpression;
          }
          break;
        case 11:
          if (true) {
            return props_ModulesScope;
          }
          break;
        case 12:
          if (true) {
            return props_NodesExpression;
          }
          break;
        case 13:
          if (true) {
            return props_OperationHelpProvider;
          }
          break;
        case 14:
          if (true) {
            return props_PrintExpression_old;
          }
          break;
        case 15:
          if (true) {
            return props_PrintNodeExpression_old;
          }
          break;
        case 16:
          if (true) {
            return props_PrintNodeReferenceExpression_old;
          }
          break;
        case 17:
          if (true) {
            return props_PrintSequenceExpression_old;
          }
          break;
        case 18:
          if (true) {
            return props_PrintTextExpression_old;
          }
          break;
        case 19:
          if (true) {
            return props_ProjectExpression_old;
          }
          break;
        case 20:
          if (true) {
            return props_ProjectScope_old;
          }
          break;
        case 21:
          if (true) {
            return props_QueryExpression;
          }
          break;
        case 22:
          if (true) {
            return props_QueryParameter;
          }
          break;
        case 23:
          if (true) {
            return props_QueryParameterIncludeReadOnly;
          }
          break;
        case 24:
          if (true) {
            return props_QueryParameterList;
          }
          break;
        case 25:
          if (true) {
            return props_QueryParameterScope;
          }
          break;
        case 26:
          if (true) {
            return props_ReferencesExpression;
          }
          break;
        case 27:
          if (true) {
            return props_ScopeParameter;
          }
          break;
        case 28:
          if (true) {
            return props_ShowExpression_old;
          }
          break;
        case 29:
          if (true) {
            return props_UsagesExpression;
          }
          break;
        case 30:
          if (true) {
            return props_WithStatement;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_lpa09p_a0gb = buildConceptIndices(MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x6c8954f469a7c420L, "AbstractPrintExpression_old"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x4bd43869e610f3e9L, "BLCommand_old"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x6a40a3596560a9d9L, "BLExpression_old"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x307931d0f98575c9L, "CustomScope"), MetaAdapterFactory.getInterfaceConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x613b3dd6aa6dac90L, "ExpressionHelpProvider"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x3bc64421763add42L, "GlobalScope_old"), MetaAdapterFactory.getInterfaceConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x690b986730edd07L, "HelpProvider"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x6b643f33718aa10dL, "InstancesExpression"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x307931d0f952484eL, "ModelScope"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x5f41efb675beab2dL, "ModelsExpression"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x5f41efb675cc2262L, "ModulesExpression"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x263c7e661fa6d53dL, "ModulesScope"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x272b1214886bd08eL, "NodesExpression"), MetaAdapterFactory.getInterfaceConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x5252d9021b8b6c03L, "OperationHelpProvider"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x6979f0787b2a9377L, "PrintExpression_old"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x4c7a26b31bd03b59L, "PrintNodeExpression_old"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x5f195a051bd9bddcL, "PrintNodeReferenceExpression_old"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x6979f0787b7db64fL, "PrintSequenceExpression_old"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x7417cca3eb1feca9L, "PrintTextExpression_old"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0xa721a59126bb908L, "ProjectExpression_old"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x3bc64421763adda2L, "ProjectScope_old"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x3bc64421760bacfdL, "QueryExpression"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x3bc64421760badf5L, "QueryParameter"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x3bc644217618ec86L, "QueryParameterIncludeReadOnly"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x3bc644217616ddf9L, "QueryParameterList"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x3bc644217618ed2fL, "QueryParameterScope"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x57bda059470950bdL, "ReferencesExpression"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x3bc64421763add4bL, "ScopeParameter"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x75bb0160f191d79fL, "ShowExpression_old"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x75bb0160f191d6ebL, "UsagesExpression"), MetaAdapterFactory.getConcept(0x1a8554c4eb8443baL, 0x8c346f0d90c6e75aL, 0x3ac2ae2c0bcf368bL, "WithStatement"));
}
