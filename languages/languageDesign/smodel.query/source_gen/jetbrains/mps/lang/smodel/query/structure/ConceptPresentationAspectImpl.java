package jetbrains.mps.lang.smodel.query.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_CustomScope;
  private ConceptPresentation props_CustomScope_old;
  private ConceptPresentation props_ExpressionHelpProvider;
  private ConceptPresentation props_HelpProvider;
  private ConceptPresentation props_InstancesExpression;
  private ConceptPresentation props_ModelsExpression;
  private ConceptPresentation props_ModelsScope;
  private ConceptPresentation props_ModelsScope_old;
  private ConceptPresentation props_ModulesExpression;
  private ConceptPresentation props_ModulesScope;
  private ConceptPresentation props_ModulesScope_old;
  private ConceptPresentation props_NodesExpression;
  private ConceptPresentation props_OperationHelpProvider;
  private ConceptPresentation props_QueryExpression;
  private ConceptPresentation props_QueryExpressionScopeProvider;
  private ConceptPresentation props_QueryParameter;
  private ConceptPresentation props_QueryParameterExact;
  private ConceptPresentation props_QueryParameterIncludeReadOnly_old;
  private ConceptPresentation props_QueryParameterList;
  private ConceptPresentation props_QueryParameterScope;
  private ConceptPresentation props_QueryParameterScope_old;
  private ConceptPresentation props_ReferencesExpression;
  private ConceptPresentation props_ScopeParameter;
  private ConceptPresentation props_ScopeParameter_old;
  private ConceptPresentation props_UsagesExpression;
  private ConceptPresentation props_WithStatement;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.CustomScope:
        if (props_CustomScope == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("? extends SearchScope");
          cpb.rawPresentation("custom");
          props_CustomScope = cpb.create();
        }
        return props_CustomScope;
      case LanguageConceptSwitch.CustomScope_old:
        if (props_CustomScope_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.shortDesc("? extends SearchScope");
          cpb.rawPresentation("custom");
          props_CustomScope_old = cpb.create();
        }
        return props_CustomScope_old;
      case LanguageConceptSwitch.ExpressionHelpProvider:
        if (props_ExpressionHelpProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ExpressionHelpProvider = cpb.create();
        }
        return props_ExpressionHelpProvider;
      case LanguageConceptSwitch.HelpProvider:
        if (props_HelpProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_HelpProvider = cpb.create();
        }
        return props_HelpProvider;
      case LanguageConceptSwitch.InstancesExpression:
        if (props_InstancesExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("instances of a concept in scope");
          cpb.rawPresentation("#instances");
          props_InstancesExpression = cpb.create();
        }
        return props_InstancesExpression;
      case LanguageConceptSwitch.ModelsExpression:
        if (props_ModelsExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("all models in scope");
          cpb.rawPresentation("#models");
          props_ModelsExpression = cpb.create();
        }
        return props_ModelsExpression;
      case LanguageConceptSwitch.ModelsScope:
        if (props_ModelsScope == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("specified models");
          cpb.rawPresentation("models");
          props_ModelsScope = cpb.create();
        }
        return props_ModelsScope;
      case LanguageConceptSwitch.ModelsScope_old:
        if (props_ModelsScope_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.rawPresentation("models");
          props_ModelsScope_old = cpb.create();
        }
        return props_ModelsScope_old;
      case LanguageConceptSwitch.ModulesExpression:
        if (props_ModulesExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("all modules in scope");
          cpb.rawPresentation("#modules");
          props_ModulesExpression = cpb.create();
        }
        return props_ModulesExpression;
      case LanguageConceptSwitch.ModulesScope:
        if (props_ModulesScope == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("specified modules");
          cpb.rawPresentation("modules");
          props_ModulesScope = cpb.create();
        }
        return props_ModulesScope;
      case LanguageConceptSwitch.ModulesScope_old:
        if (props_ModulesScope_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.rawPresentation("modules");
          props_ModulesScope_old = cpb.create();
        }
        return props_ModulesScope_old;
      case LanguageConceptSwitch.NodesExpression:
        if (props_NodesExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("all nodes in scope");
          cpb.rawPresentation("#nodes");
          props_NodesExpression = cpb.create();
        }
        return props_NodesExpression;
      case LanguageConceptSwitch.OperationHelpProvider:
        if (props_OperationHelpProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_OperationHelpProvider = cpb.create();
        }
        return props_OperationHelpProvider;
      case LanguageConceptSwitch.QueryExpression:
        if (props_QueryExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_QueryExpression = cpb.create();
        }
        return props_QueryExpression;
      case LanguageConceptSwitch.QueryExpressionScopeProvider:
        if (props_QueryExpressionScopeProvider == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_QueryExpressionScopeProvider = cpb.create();
        }
        return props_QueryExpressionScopeProvider;
      case LanguageConceptSwitch.QueryParameter:
        if (props_QueryParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_QueryParameter = cpb.create();
        }
        return props_QueryParameter;
      case LanguageConceptSwitch.QueryParameterExact:
        if (props_QueryParameterExact == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("exact instances");
          cpb.rawPresentation("exact");
          props_QueryParameterExact = cpb.create();
        }
        return props_QueryParameterExact;
      case LanguageConceptSwitch.QueryParameterIncludeReadOnly_old:
        if (props_QueryParameterIncludeReadOnly_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.shortDesc("include read only");
          cpb.rawPresentation("r/o+");
          props_QueryParameterIncludeReadOnly_old = cpb.create();
        }
        return props_QueryParameterIncludeReadOnly_old;
      case LanguageConceptSwitch.QueryParameterList:
        if (props_QueryParameterList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("< .. >");
          props_QueryParameterList = cpb.create();
        }
        return props_QueryParameterList;
      case LanguageConceptSwitch.QueryParameterScope:
        if (props_QueryParameterScope == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("used search scope");
          cpb.rawPresentation("scope");
          props_QueryParameterScope = cpb.create();
        }
        return props_QueryParameterScope;
      case LanguageConceptSwitch.QueryParameterScope_old:
        if (props_QueryParameterScope_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          cpb.shortDesc("used search scope (deprecated)");
          cpb.rawPresentation("scope");
          props_QueryParameterScope_old = cpb.create();
        }
        return props_QueryParameterScope_old;
      case LanguageConceptSwitch.ReferencesExpression:
        if (props_ReferencesExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("all references in scope");
          cpb.rawPresentation("#references");
          props_ReferencesExpression = cpb.create();
        }
        return props_ReferencesExpression;
      case LanguageConceptSwitch.ScopeParameter:
        if (props_ScopeParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ScopeParameter = cpb.create();
        }
        return props_ScopeParameter;
      case LanguageConceptSwitch.ScopeParameter_old:
        if (props_ScopeParameter_old == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.deprecated(true);
          props_ScopeParameter_old = cpb.create();
        }
        return props_ScopeParameter_old;
      case LanguageConceptSwitch.UsagesExpression:
        if (props_UsagesExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("direct references to a node in scope");
          cpb.rawPresentation("#usages");
          props_UsagesExpression = cpb.create();
        }
        return props_UsagesExpression;
      case LanguageConceptSwitch.WithStatement:
        if (props_WithStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("with");
          props_WithStatement = cpb.create();
        }
        return props_WithStatement;
    }
    return null;
  }
}
