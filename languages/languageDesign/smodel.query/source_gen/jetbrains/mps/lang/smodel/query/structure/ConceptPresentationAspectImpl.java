package jetbrains.mps.lang.smodel.query.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractPrintExpression_old = new ConceptPresentationBuilder().deprecated().deprecated().create();
  private final ConceptPresentation props_BLCommand_old = new ConceptPresentationBuilder().deprecated().deprecated().create();
  private final ConceptPresentation props_BLExpression_old = new ConceptPresentationBuilder().deprecated().deprecated().create();
  private final ConceptPresentation props_CustomScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExpressionHelpProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GlobalScope_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_HelpProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstancesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModulesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModulesScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationHelpProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PrintExpression_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_PrintNodeExpression_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_PrintNodeReferenceExpression_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_PrintSequenceExpression_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_PrintTextExpression_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ProjectExpression_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ProjectScope_old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_QueryExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameterIncludeReadOnly = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameterList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryParameterScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferencesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ScopeParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShowExpression_old = new ConceptPresentationBuilder().deprecated().deprecated().create();
  private final ConceptPresentation props_UsagesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WithStatement = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("1a8554c4-eb84-43ba-8c34-6f0d90c6e75a"), "jetbrains.mps.lang.smodel.query")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractPrintExpression_old;
      case 1:
        return props_BLCommand_old;
      case 2:
        return props_BLExpression_old;
      case 3:
        return props_CustomScope;
      case 4:
        return props_ExpressionHelpProvider;
      case 5:
        return props_GlobalScope_old;
      case 6:
        return props_HelpProvider;
      case 7:
        return props_InstancesExpression;
      case 8:
        return props_ModelScope;
      case 9:
        return props_ModelsExpression;
      case 10:
        return props_ModulesExpression;
      case 11:
        return props_ModulesScope;
      case 12:
        return props_NodesExpression;
      case 13:
        return props_OperationHelpProvider;
      case 14:
        return props_PrintExpression_old;
      case 15:
        return props_PrintNodeExpression_old;
      case 16:
        return props_PrintNodeReferenceExpression_old;
      case 17:
        return props_PrintSequenceExpression_old;
      case 18:
        return props_PrintTextExpression_old;
      case 19:
        return props_ProjectExpression_old;
      case 20:
        return props_ProjectScope_old;
      case 21:
        return props_QueryExpression;
      case 22:
        return props_QueryParameter;
      case 23:
        return props_QueryParameterIncludeReadOnly;
      case 24:
        return props_QueryParameterList;
      case 25:
        return props_QueryParameterScope;
      case 26:
        return props_ReferencesExpression;
      case 27:
        return props_ScopeParameter;
      case 28:
        return props_ShowExpression_old;
      case 29:
        return props_UsagesExpression;
      case 30:
        return props_WithStatement;
    }
    throw new IllegalStateException();
  }
}
