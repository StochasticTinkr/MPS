package jetbrains.mps.lang.structure.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractConceptDeclaration = 0;
  public static final int AggregationLinkDeclarationScopeKind = 1;
  public static final int AttributeInfo = 2;
  public static final int AttributeInfo_AttributedConcept = 3;
  public static final int AttributeInfo_IsMultiple = 4;
  public static final int ConceptDeclaration = 5;
  public static final int ConstrainedDataTypeDeclaration = 6;
  public static final int DataTypeDeclaration = 7;
  public static final int DeprecatedNodeAnnotation = 8;
  public static final int DocumentationObjective = 9;
  public static final int DocumentationObjectiveRef = 10;
  public static final int DocumentedNodeAnnotation = 11;
  public static final int EnumerationDataTypeDeclaration = 12;
  public static final int EnumerationMemberDeclaration = 13;
  public static final int IConceptAspect = 14;
  public static final int IStructureDeprecatable = 15;
  public static final int InterfaceConceptDeclaration = 16;
  public static final int InterfaceConceptReference = 17;
  public static final int LinkDeclaration = 18;
  public static final int PrimitiveDataTypeDeclaration = 19;
  public static final int PropertyDeclaration = 20;
  public static final int RefPresentationTemplate = 21;
  public static final int ReferenceLinkDeclartionScopeKind = 22;
  public static final int SmartReferenceAttribute = 23;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xc72da2b97cce4447L, 0x8389f407dc1158b7L);
    builder.put(0x1103553c5ffL, AbstractConceptDeclaration);
    builder.put(0x4f57884e07c08a31L, AggregationLinkDeclarationScopeKind);
    builder.put(0x29889a701b928195L, AttributeInfo);
    builder.put(0x5405fd03496acb49L, AttributeInfo_AttributedConcept);
    builder.put(0x5405fd034959f7dcL, AttributeInfo_IsMultiple);
    builder.put(0xf979ba0450L, ConceptDeclaration);
    builder.put(0xfc268c7a37L, ConstrainedDataTypeDeclaration);
    builder.put(0xfc26875dfaL, DataTypeDeclaration);
    builder.put(0x11d0a70ae54L, DeprecatedNodeAnnotation);
    builder.put(0x6d1df6c2700b0eaeL, DocumentationObjective);
    builder.put(0x6d1df6c2700b0eb5L, DocumentationObjectiveRef);
    builder.put(0x6d1df6c2700b0ea9L, DocumentedNodeAnnotation);
    builder.put(0xfc26875dfbL, EnumerationDataTypeDeclaration);
    builder.put(0xfc321331b2L, EnumerationMemberDeclaration);
    builder.put(0x24614259e94f0c84L, IConceptAspect);
    builder.put(0x11d2ea63881L, IStructureDeprecatable);
    builder.put(0x1103556dcafL, InterfaceConceptDeclaration);
    builder.put(0x110356fc618L, InterfaceConceptReference);
    builder.put(0xf979bd086aL, LinkDeclaration);
    builder.put(0xfc3652de27L, PrimitiveDataTypeDeclaration);
    builder.put(0xf979bd086bL, PropertyDeclaration);
    builder.put(0x7ab7b29c4d66855eL, RefPresentationTemplate);
    builder.put(0x4f57884e07c08838L, ReferenceLinkDeclartionScopeKind);
    builder.put(0x7ab7b29c4d6297e8L, SmartReferenceAttribute);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
