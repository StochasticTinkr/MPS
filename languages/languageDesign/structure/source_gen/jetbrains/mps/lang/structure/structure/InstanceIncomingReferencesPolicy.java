package jetbrains.mps.lang.structure.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;

public enum InstanceIncomingReferencesPolicy {
  allowed("allowed", null),
  local("same root only", "local"),
  forbidden("forbidden", "forbidden");

  private final String myName;
  public String getName() {
    return myName;
  }
  private final String myValue;
  private InstanceIncomingReferencesPolicy(String name, String value) {
    myName = name;
    myValue = value;
  }
  public String getValue() {
    return myValue;
  }
  public String getValueAsString() {
    return myValue;
  }
  public static List<InstanceIncomingReferencesPolicy> getConstants() {
    List<InstanceIncomingReferencesPolicy> list = ListSequence.fromList(new LinkedList<InstanceIncomingReferencesPolicy>());
    ListSequence.fromList(list).addElement(InstanceIncomingReferencesPolicy.allowed);
    ListSequence.fromList(list).addElement(InstanceIncomingReferencesPolicy.local);
    ListSequence.fromList(list).addElement(InstanceIncomingReferencesPolicy.forbidden);
    return list;
  }
  public static InstanceIncomingReferencesPolicy getDefault() {
    return InstanceIncomingReferencesPolicy.allowed;
  }
  public static InstanceIncomingReferencesPolicy parseValue(String value) {
    if (value == null) {
      return InstanceIncomingReferencesPolicy.getDefault();
    }
    if (value.equals(InstanceIncomingReferencesPolicy.allowed.getValueAsString())) {
      return InstanceIncomingReferencesPolicy.allowed;
    }
    if (value.equals(InstanceIncomingReferencesPolicy.local.getValueAsString())) {
      return InstanceIncomingReferencesPolicy.local;
    }
    if (value.equals(InstanceIncomingReferencesPolicy.forbidden.getValueAsString())) {
      return InstanceIncomingReferencesPolicy.forbidden;
    }
    return InstanceIncomingReferencesPolicy.getDefault();
  }
}
