package jetbrains.mps.lang.structure.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractConceptDeclaration = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x2237c3bc85b3755cL, "helpURL"), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x46ab0ad5826c74caL, "conceptAlias"), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x403a32c5772bbe20L, "conceptShortDescription"), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x403a32c5772c7ec2L, "abstract"), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x403a32c5772c7ec7L, "final"), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x16096a174f259419L, "intConceptId"), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x5d2e6079771f8cc0L, "conceptId"), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x7cf94884f2237423L, "languageId"), MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x45b8a887cfd27b2cL, "sourceNode")).create();
  private final ConceptPresentation props_AggregationLinkDeclarationScopeKind = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributeInfo = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributeInfo_AttributedConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributeInfo_IsMultiple = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptDeclaration = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xff49c1d648L, "rootable"), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0x10e328118ddL, "iconPath"), MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0x4b014033eedc8a48L, "staticScope"), MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xf979be93cfL, "extends")).icon("structure.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_ConstrainedDataTypeDeclaration = new ConceptPresentationBuilder().icon("constrainedTD.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_DataTypeDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DeprecatedNodeAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EnumerationDataTypeDeclaration = new ConceptPresentationBuilder().icon("enum.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_EnumerationMemberDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IConceptAspect = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStructureDeprecatable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InterfaceConceptDeclaration = new ConceptPresentationBuilder().icon("interfaceStructure.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_InterfaceConceptReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkDeclaration = new ConceptPresentationBuilder().icon("link.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_PrimitiveDataTypeDeclaration = new ConceptPresentationBuilder().icon("primitiveTD.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_PropertyDeclaration = new ConceptPresentationBuilder().icon("property.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_ReferenceLinkDeclartionScopeKind = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_lpa09p_a0u.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractConceptDeclaration;
          }
          break;
        case 1:
          if (true) {
            return props_AggregationLinkDeclarationScopeKind;
          }
          break;
        case 2:
          if (true) {
            return props_AttributeInfo;
          }
          break;
        case 3:
          if (true) {
            return props_AttributeInfo_AttributedConcept;
          }
          break;
        case 4:
          if (true) {
            return props_AttributeInfo_IsMultiple;
          }
          break;
        case 5:
          if (true) {
            return props_ConceptDeclaration;
          }
          break;
        case 6:
          if (true) {
            return props_ConstrainedDataTypeDeclaration;
          }
          break;
        case 7:
          if (true) {
            return props_DataTypeDeclaration;
          }
          break;
        case 8:
          if (true) {
            return props_DeprecatedNodeAnnotation;
          }
          break;
        case 9:
          if (true) {
            return props_EnumerationDataTypeDeclaration;
          }
          break;
        case 10:
          if (true) {
            return props_EnumerationMemberDeclaration;
          }
          break;
        case 11:
          if (true) {
            return props_IConceptAspect;
          }
          break;
        case 12:
          if (true) {
            return props_IStructureDeprecatable;
          }
          break;
        case 13:
          if (true) {
            return props_InterfaceConceptDeclaration;
          }
          break;
        case 14:
          if (true) {
            return props_InterfaceConceptReference;
          }
          break;
        case 15:
          if (true) {
            return props_LinkDeclaration;
          }
          break;
        case 16:
          if (true) {
            return props_PrimitiveDataTypeDeclaration;
          }
          break;
        case 17:
          if (true) {
            return props_PropertyDeclaration;
          }
          break;
        case 18:
          if (true) {
            return props_ReferenceLinkDeclartionScopeKind;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_lpa09p_a0u = buildConceptIndices(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "AbstractConceptDeclaration"), MetaAdapterFactory.getInterfaceConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x4f57884e07c08a31L, "AggregationLinkDeclarationScopeKind"), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x29889a701b928195L, "AttributeInfo"), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x5405fd03496acb49L, "AttributeInfo_AttributedConcept"), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x5405fd034959f7dcL, "AttributeInfo_IsMultiple"), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "ConceptDeclaration"), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xfc268c7a37L, "ConstrainedDataTypeDeclaration"), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xfc26875dfaL, "DataTypeDeclaration"), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x11d0a70ae54L, "DeprecatedNodeAnnotation"), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xfc26875dfbL, "EnumerationDataTypeDeclaration"), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xfc321331b2L, "EnumerationMemberDeclaration"), MetaAdapterFactory.getInterfaceConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x24614259e94f0c84L, "IConceptAspect"), MetaAdapterFactory.getInterfaceConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x11d2ea63881L, "IStructureDeprecatable"), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103556dcafL, "InterfaceConceptDeclaration"), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x110356fc618L, "InterfaceConceptReference"), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "LinkDeclaration"), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xfc3652de27L, "PrimitiveDataTypeDeclaration"), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086bL, "PropertyDeclaration"), MetaAdapterFactory.getInterfaceConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x4f57884e07c08838L, "ReferenceLinkDeclartionScopeKind"));
}
