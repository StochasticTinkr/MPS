package jetbrains.mps.lang.structure.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.openapi.editor.cells.CellAction;

public class AbstractConceptDeclaration_Link_Actions {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.INSERT_PLACEHOLDER, new AbstractConceptDeclaration_Link_Actions.AbstractConceptDeclaration_Link_Actions_INSERT_PLACEHOLDER(node));
    editorCell.setAction(CellActionType.INSERT_PLACEHOLDER_BEFORE, new AbstractConceptDeclaration_Link_Actions.AbstractConceptDeclaration_Link_Actions_INSERT_PLACEHOLDER_BEFORE(node));
  }
  public static class AbstractConceptDeclaration_Link_Actions_INSERT_PLACEHOLDER extends AbstractCellAction {
    /*package*/ SNode myNode;
    public AbstractConceptDeclaration_Link_Actions_INSERT_PLACEHOLDER(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      CellAction action = editorContext.getContextCell().getAction(CellActionType.INSERT);
      action.execute(editorContext);
    }
    @Override
    public boolean canExecute(EditorContext editorContext) {
      return this.canExecute_internal(editorContext, this.myNode);
    }
    public boolean canExecute_internal(EditorContext editorContext, SNode node) {
      CellAction action = editorContext.getContextCell().getAction(CellActionType.INSERT);
      return action.canExecute(editorContext);
    }
  }
  public static class AbstractConceptDeclaration_Link_Actions_INSERT_PLACEHOLDER_BEFORE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public AbstractConceptDeclaration_Link_Actions_INSERT_PLACEHOLDER_BEFORE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      CellAction action = editorContext.getContextCell().getAction(CellActionType.INSERT_BEFORE);
      action.execute(editorContext);
    }
    @Override
    public boolean canExecute(EditorContext editorContext) {
      return this.canExecute_internal(editorContext, this.myNode);
    }
    public boolean canExecute_internal(EditorContext editorContext, SNode node) {
      CellAction action = editorContext.getContextCell().getAction(CellActionType.INSERT_BEFORE);
      return action.canExecute(editorContext);
    }
  }
}
