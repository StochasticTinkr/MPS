package jetbrains.mps.lang.structure.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeReference;

public class ConceptAncestors_Finder extends GeneratedFinder {
  public ConceptAncestors_Finder() {
  }
  @Override
  public String getDescription() {
    return "Concept Ancestors";
  }
  @Override
  public String getLongDescription() {
    return "";
  }
  @Override
  public SAbstractConcept getSConcept() {
    return MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration");
  }

  @Override
  protected void doFind0(@NotNull SNode node, SearchScope scope, IFinder.FindCallback callback, ProgressMonitor monitor) {
    try {
      monitor.start("ancestors", 10);
      ConceptMRO methodResolutionOrder = new ConceptMRO();
      AbstractConceptWrap wrapper = AbstractConceptWrap.wrap(node);
      List<AbstractConceptWrap> linearization = methodResolutionOrder.calcLinearization(wrapper);
      monitor.advance(5);
      ProgressMonitor subMonitor = monitor.subTask(5);
      subMonitor.start("", linearization.size());
      try {
        for (AbstractConceptWrap wrap : ListSequence.fromList(linearization)) {
          subMonitor.advance(1);
          if (monitor.isCanceled()) {
            return;
          }
          SNode ancestorConcept = wrap.getPeer();
          if (ancestorConcept == node) {
            continue;
          }
          callback.onUsageFound(createSingleResult(wrap.getPeer()));
        }
      } finally {
        subMonitor.done();
      }
    } finally {
      monitor.done();
    }
  }

  @Override
  public String getNodeCategory(SNode node) {
    return "Concept Ancestors";
  }

  @Nullable
  @Override
  public SNodeReference getDeclarationNode() {
    return buildNodePointer(FindUsagesDescriptor.DECLARING_MODEL, "6148399791138458971");
  }
}
