package jetbrains.mps.lang.structure.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeReference;

public class ImplementingConcepts_Finder extends GeneratedFinder {
  public ImplementingConcepts_Finder() {
  }
  @Override
  public String getDescription() {
    return "Implementing Concepts";
  }
  @Override
  public String getLongDescription() {
    return "";
  }
  @Override
  public SAbstractConcept getSConcept() {
    return MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103556dcafL, "jetbrains.mps.lang.structure.structure.InterfaceConceptDeclaration");
  }

  @Override
  protected void doFind0(@NotNull SNode node, SearchScope scope, IFinder.FindCallback callback, ProgressMonitor monitor) {
    monitor.start(getDescription(), 0);
    try {
      FindUtils.searchForResults(monitor.subTask(1), new IFinder.FindCallback() {
        public void onUsageFound(@NotNull SearchResult<?> searchResult) {
          SNode nodeParam = (SNode) searchResult.getObject();
          FindUtils.searchForResults(monitor.subTask(1), new IFinder.FindCallback() {
            public void onUsageFound(@NotNull SearchResult<?> searchResult) {
              SNode nodeParam = (SNode) searchResult.getObject();
              SNode conceptNode = SNodeOperations.getParent(nodeParam);
              if (SNodeOperations.isInstanceOf(conceptNode, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"))) {
                // concept implements interface case 
                if (SNodeOperations.hasRole(nodeParam, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0x110358d693eL, "implements"))) {
                  callback.onUsageFound(createSingleResult(conceptNode));
                  FindUtils.searchForResults(monitor.subTask(1), new IFinder.FindCallback() {
                    public void onUsageFound(@NotNull SearchResult<?> searchResult) {
                      SNode nodeParam = (SNode) searchResult.getObject();
                      callback.onUsageFound(createSingleResult(nodeParam));
                    }
                  }, new SearchQuery(conceptNode, scope), FindUtils.getFinder("jetbrains.mps.lang.structure.findUsages.DerivedConcepts_Finder"));
                }
              }
            }
          }, new SearchQuery(nodeParam, scope), FindUtils.getFinder("jetbrains.mps.lang.structure.findUsages.NodeUsages_Finder"));
        }
      }, new SearchQuery(node, scope), FindUtils.getFinder("jetbrains.mps.lang.structure.findUsages.DerivedInterfaceConcepts_Finder"), FindUtils.getFinder("jetbrains.mps.lang.core.findUsages.IdentityFinder_Finder"));
    } finally {
      monitor.done();
    }
  }

  @Override
  public String getNodeCategory(SNode node) {
    return "Implementing Concepts";
  }

  @Nullable
  @Override
  public SNodeReference getDeclarationNode() {
    return buildNodePointer(FindUsagesDescriptor.DECLARING_MODEL, "1200310248824");
  }
}
