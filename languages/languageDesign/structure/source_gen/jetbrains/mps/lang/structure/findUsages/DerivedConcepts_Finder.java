package jetbrains.mps.lang.structure.findUsages;

/*Generated by MPS */

import jetbrains.mps.ide.findusages.findalgorithm.finders.GeneratedFinder;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.ide.findusages.findalgorithm.finders.IFinder;
import org.jetbrains.mps.openapi.util.ProgressMonitor;
import java.util.Queue;
import jetbrains.mps.internal.collections.runtime.QueueSequence;
import java.util.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.ide.findusages.view.FindUtils;
import jetbrains.mps.ide.findusages.model.SearchResult;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.ide.findusages.model.SearchQuery;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.model.SNodeReference;

public class DerivedConcepts_Finder extends GeneratedFinder {
  public DerivedConcepts_Finder() {
  }
  @Override
  public String getDescription() {
    return "Derived Concepts";
  }
  @Override
  public String getLongDescription() {
    return "";
  }
  @Override
  public SAbstractConcept getSConcept() {
    return MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration");
  }

  @Override
  protected void doFind0(@NotNull SNode node, SearchScope scope, final IFinder.FindCallback callback, ProgressMonitor monitor) {
    try {
      monitor.start("Derived Concepts", 1000);
      final Queue<SNode> currentConcepts = QueueSequence.fromQueue(new LinkedList<SNode>());
      QueueSequence.fromQueue(currentConcepts).addLastElement(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration")));
      while (QueueSequence.fromQueue(currentConcepts).isNotEmpty()) {
        SNode nextNode = QueueSequence.fromQueue(currentConcepts).removeFirstElement();
        FindUtils.searchForResults(monitor.subTask(1), new IFinder.FindCallback() {
          public void onUsageFound(@NotNull SearchResult<?> searchResult) {
            SNode nodeParam = (SNode) searchResult.getObject();
            new _FunctionTypes._void_P1_E0<SNode>() {
              public void invoke(SNode directDescendant) {
                SNode foundConcept = SNodeOperations.cast(directDescendant, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, "jetbrains.mps.lang.structure.structure.ConceptDeclaration"));
                QueueSequence.fromQueue(currentConcepts).addLastElement(foundConcept);
                callback.onUsageFound(createSingleResult(foundConcept));
              }
            }.invoke(nodeParam);
          }
        }, new SearchQuery(nextNode, scope), FindUtils.getFinder("jetbrains.mps.lang.structure.findUsages.StraightDescendants_Finder"));
      }
    } finally {
      monitor.done();
    }
  }

  @Override
  public String getNodeCategory(SNode node) {
    return "Derived Concepts";
  }

  @Nullable
  @Override
  public SNodeReference getDeclarationNode() {
    return buildNodePointer(FindUsagesDescriptor.DECLARING_MODEL, "6869265041613386780");
  }
}
