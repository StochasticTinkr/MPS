package jetbrains.mps.lang.structure.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.EnumerationDescriptorBase;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import java.util.Arrays;

public class EnumerationDescriptor_InstanceIncomingReferencesPolicy extends EnumerationDescriptorBase {

  public EnumerationDescriptor_InstanceIncomingReferencesPolicy() {
    super(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x703af6ad4d1ea0f8L, "InstanceIncomingReferencesPolicy", "r:00000000-0000-4000-0000-011c89590292(jetbrains.mps.lang.structure.structure)/8087047305080774904");
  }

  private final EnumerationDescriptor.MemberDescriptor VALUE__0 = new EnumerationDescriptor.MemberDescriptor(null, "allowed", "r:00000000-0000-4000-0000-011c89590292(jetbrains.mps.lang.structure.structure)/8087047305080775282");
  private final EnumerationDescriptor.MemberDescriptor VALUE_local_0 = new EnumerationDescriptor.MemberDescriptor("local", "same root only", "r:00000000-0000-4000-0000-011c89590292(jetbrains.mps.lang.structure.structure)/8087047305080775412");
  private final EnumerationDescriptor.MemberDescriptor VALUE_forbidden_0 = new EnumerationDescriptor.MemberDescriptor("forbidden", "forbidden", "r:00000000-0000-4000-0000-011c89590292(jetbrains.mps.lang.structure.structure)/8087047305080775416");

  @Nullable
  @Override
  public EnumerationDescriptor.MemberDescriptor getDefault() {
    return VALUE__0;
  }

  @NotNull
  @Override
  public Collection<EnumerationDescriptor.MemberDescriptor> getMembers() {
    return Arrays.asList(VALUE__0, VALUE_local_0, VALUE_forbidden_0);
  }

  @Nullable
  @Override
  public EnumerationDescriptor.MemberDescriptor getMember(@Nullable String string) {
    if (string == null) {
      return VALUE__0;
    }
    switch (string) {
      case "local":
        return VALUE_local_0;
      case "forbidden":
        return VALUE_forbidden_0;
    }
    return null;
  }
}
