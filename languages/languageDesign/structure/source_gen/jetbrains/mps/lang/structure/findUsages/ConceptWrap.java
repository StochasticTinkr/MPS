package jetbrains.mps.lang.structure.findUsages;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.api.AbstractConceptLike;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public final class ConceptWrap extends AbstractConceptWrap implements AbstractConceptLike.ConceptLike {
  private final SNode myPeer;

  public ConceptWrap(SNode peer) {
    super(peer);
    myPeer = peer;
  }

  @Override
  public boolean isAbstract() {
    return SPropertyOperations.getBoolean(myPeer, MetaAdapterFactory.getProperty(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, 0x403a32c5772c7ec2L, "abstract"));
  }

  @Nullable
  @Override
  public AbstractConceptLike.ConceptLike getSuperConcept() {
    SNode superConcept = SLinkOperations.getTarget(myPeer, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0xf979be93cfL, "extends"));
    if (superConcept == null) {
      return null;
    }
    return new ConceptWrap(superConcept);
  }

  @NotNull
  @Override
  public List<AbstractConceptLike.InterfaceConceptLike> getSuperInterfaces() {
    List<AbstractConceptLike.InterfaceConceptLike> result = new ArrayList<AbstractConceptLike.InterfaceConceptLike>();
    List<SNode> superInterfaces = SLinkOperations.getChildren(myPeer, MetaAdapterFactory.getContainmentLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979ba0450L, 0x110358d693eL, "implements"));
    for (SNode superInterfaceRef : ListSequence.fromList(superInterfaces)) {
      result.add(new InterfaceConceptWrap(SLinkOperations.getTarget(superInterfaceRef, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x110356fc618L, 0x110356fe029L, "intfc"))));
    }
    return result;
  }
}
