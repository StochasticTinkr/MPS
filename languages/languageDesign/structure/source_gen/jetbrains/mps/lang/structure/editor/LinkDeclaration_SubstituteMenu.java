package jetbrains.mps.lang.structure.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.substitute.SubstituteMenuBase;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.substitute.SubstituteMenuContext;
import java.util.ArrayList;
import jetbrains.mps.lang.editor.menus.EditorMenuDescriptorBase;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.editor.menus.GroupMenuPart;
import java.util.Arrays;
import jetbrains.mps.lang.editor.menus.substitute.ConstraintsFilteringSubstituteMenuPartDecorator;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.editor.menus.ParameterizedMenuPart;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.structure.constraints.Scopes;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.editor.menus.substitute.SingleItemSubstituteMenuPart;
import jetbrains.mps.lang.editor.menus.substitute.DefaultSubstituteMenuItem;
import jetbrains.mps.openapi.editor.menus.EditorMenuTraceInfo;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.presentation.NodePresentationUtil;
import jetbrains.mps.smodel.runtime.IconResource;
import jetbrains.mps.smodel.runtime.IconResourceUtil;

public class LinkDeclaration_SubstituteMenu extends SubstituteMenuBase {
  @NotNull
  @Override
  protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts(final SubstituteMenuContext _context) {
    List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> result = new ArrayList<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>();
    result.add(new LinkDeclaration_SubstituteMenu.SMP_Group_3looc_a());
    return result;
  }

  @NotNull
  @Override
  public List<SubstituteMenuItem> createMenuItems(@NotNull SubstituteMenuContext context) {
    context.getEditorMenuTrace().pushTraceInfo();
    context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("default substitute menu for " + "LinkDeclaration", new SNodePointer("r:00000000-0000-4000-0000-011c8959028d(jetbrains.mps.lang.structure.editor)", "1741258697587094707")));
    try {
      return super.createMenuItems(context);
    } finally {
      context.getEditorMenuTrace().popTraceInfo();
    }
  }


  public class SMP_Group_3looc_a extends GroupMenuPart<SubstituteMenuItem, SubstituteMenuContext> {
    @Override
    protected boolean isApplicable(SubstituteMenuContext _context) {
      return _context.getCurrentTargetNode() != null;
    }
    @NotNull
    @Override
    public List<SubstituteMenuItem> createItems(@NotNull SubstituteMenuContext context) {
      context.getEditorMenuTrace().pushTraceInfo();
      context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("substitute menu group", new SNodePointer("r:00000000-0000-4000-0000-011c8959028d(jetbrains.mps.lang.structure.editor)", "1741258697587094709")));
      try {
        return super.createItems(context);
      } finally {
        context.getEditorMenuTrace().popTraceInfo();
      }
    }

    @Override
    protected List<MenuPart<SubstituteMenuItem, SubstituteMenuContext>> getParts() {
      return Arrays.<MenuPart<SubstituteMenuItem, SubstituteMenuContext>>asList(new ConstraintsFilteringSubstituteMenuPartDecorator(new LinkDeclaration_SubstituteMenu.SMP_Group_3looc_a.SMP_Param_3looc_a0(), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")));
    }
    private class SMP_Param_3looc_a0 extends ParameterizedMenuPart<SNode, SubstituteMenuItem, SubstituteMenuContext> {
      @NotNull
      @Override
      protected List<SubstituteMenuItem> createItems(SNode parameter, SubstituteMenuContext context) {
        return new LinkDeclaration_SubstituteMenu.SMP_Group_3looc_a.SMP_Param_3looc_a0.SMP_Action_3looc_a0a(parameter).createItems(context);
      }
      @NotNull
      @Override
      public List<SubstituteMenuItem> createItems(@NotNull SubstituteMenuContext context) {
        context.getEditorMenuTrace().pushTraceInfo();
        context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase("parameterized substitute menu part", new SNodePointer("r:00000000-0000-4000-0000-011c8959028d(jetbrains.mps.lang.structure.editor)", "1741258697587094743")));
        try {
          return super.createItems(context);
        } finally {
          context.getEditorMenuTrace().popTraceInfo();
        }
      }
      @Nullable
      @Override
      protected Iterable<? extends SNode> getParameters(SubstituteMenuContext _context) {
        return Sequence.fromIterable(Scopes.forConcepts(_context.getParentNode(), MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration")).getAvailableElements("")).select(new ISelector<SNode, SNode>() {
          public SNode select(SNode it) {
            return SNodeOperations.as(it, MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL, "jetbrains.mps.lang.structure.structure.AbstractConceptDeclaration"));
          }
        }).where(new IWhereFilter<SNode>() {
          public boolean accept(SNode it) {
            return it != null;
          }
        }).toListSequence();
      }
      private class SMP_Action_3looc_a0a extends SingleItemSubstituteMenuPart {
        private final SNode myParameterObject;
        public SMP_Action_3looc_a0a(SNode parameterObject) {
          myParameterObject = parameterObject;
        }

        @Nullable
        @Override
        protected SubstituteMenuItem createItem(SubstituteMenuContext _context) {
          return new LinkDeclaration_SubstituteMenu.SMP_Group_3looc_a.SMP_Param_3looc_a0.SMP_Action_3looc_a0a.Item(_context);
        }
        private class Item extends DefaultSubstituteMenuItem {
          private final SubstituteMenuContext _context;
          private EditorMenuTraceInfo myTraceInfo;
          public Item(SubstituteMenuContext context) {
            super(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration"), context.getParentNode(), context.getCurrentTargetNode(), context.getEditorContext());
            _context = context;
            _context.getEditorMenuTrace().pushTraceInfo();
            String description = "Substitute item: " + getMatchingText("");
            description += " .Parameter object: " + myParameterObject;
            _context.getEditorMenuTrace().setDescriptor(new EditorMenuDescriptorBase(description, new SNodePointer("r:00000000-0000-4000-0000-011c8959028d(jetbrains.mps.lang.structure.editor)", "1741258697587094802")));
            this.myTraceInfo = context.getEditorMenuTrace().getTraceInfo();
            _context.getEditorMenuTrace().popTraceInfo();
          }

          @Nullable
          @Override
          public SNode createNode(@NotNull String pattern) {
            SNode linkDeclaration = SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, "jetbrains.mps.lang.structure.structure.LinkDeclaration")), _context.getCurrentTargetNode());
            SLinkOperations.setTarget(linkDeclaration, MetaAdapterFactory.getReferenceLink(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL, 0xf98055fef0L, "target"), myParameterObject);
            return linkDeclaration;
          }

          @Override
          public EditorMenuTraceInfo getTraceInfo() {
            return myTraceInfo;
          }
          @Nullable
          @Override
          public String getMatchingText(@NotNull String pattern) {
            return NodePresentationUtil.visibleMatchingText(myParameterObject, null);
          }
          @Nullable
          @Override
          public String getDescriptionText(@NotNull String pattern) {
            return "^" + NodePresentationUtil.descriptionText(myParameterObject);
          }
          @Nullable
          @Override
          public IconResource getIcon(@NotNull String pattern) {
            return IconResourceUtil.getIconResourceForConcept(SNodeOperations.getConcept(myParameterObject));
          }
        }
      }

    }
  }
}
