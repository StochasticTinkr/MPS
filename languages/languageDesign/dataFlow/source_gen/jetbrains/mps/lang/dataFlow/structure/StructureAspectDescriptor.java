package jetbrains.mps.lang.dataFlow.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(34);
  /*package*/ final ConceptDescriptor myConceptAfterPosition = createDescriptorForAfterPosition();
  /*package*/ final ConceptDescriptor myConceptBaseEmitJumpStatement = createDescriptorForBaseEmitJumpStatement();
  /*package*/ final ConceptDescriptor myConceptBaseEmitVariableStatement = createDescriptorForBaseEmitVariableStatement();
  /*package*/ final ConceptDescriptor myConceptBaseInstructionOperation = createDescriptorForBaseInstructionOperation();
  /*package*/ final ConceptDescriptor myConceptBeforePosition = createDescriptorForBeforePosition();
  /*package*/ final ConceptDescriptor myConceptBooleanInstructionOperation = createDescriptorForBooleanInstructionOperation();
  /*package*/ final ConceptDescriptor myConceptBuilderBlock = createDescriptorForBuilderBlock();
  /*package*/ final ConceptDescriptor myConceptDataFlowBuilderDeclaration = createDescriptorForDataFlowBuilderDeclaration();
  /*package*/ final ConceptDescriptor myConceptEmitCodeForStatement = createDescriptorForEmitCodeForStatement();
  /*package*/ final ConceptDescriptor myConceptEmitIfJumpStatement = createDescriptorForEmitIfJumpStatement();
  /*package*/ final ConceptDescriptor myConceptEmitJumpStatement = createDescriptorForEmitJumpStatement();
  /*package*/ final ConceptDescriptor myConceptEmitLabelStatement = createDescriptorForEmitLabelStatement();
  /*package*/ final ConceptDescriptor myConceptEmitMayBeUnreachable = createDescriptorForEmitMayBeUnreachable();
  /*package*/ final ConceptDescriptor myConceptEmitNopStatement = createDescriptorForEmitNopStatement();
  /*package*/ final ConceptDescriptor myConceptEmitReadStatement = createDescriptorForEmitReadStatement();
  /*package*/ final ConceptDescriptor myConceptEmitRetStatement = createDescriptorForEmitRetStatement();
  /*package*/ final ConceptDescriptor myConceptEmitStatement = createDescriptorForEmitStatement();
  /*package*/ final ConceptDescriptor myConceptEmitTryFinallyStatement = createDescriptorForEmitTryFinallyStatement();
  /*package*/ final ConceptDescriptor myConceptEmitWriteStatement = createDescriptorForEmitWriteStatement();
  /*package*/ final ConceptDescriptor myConceptGetCodeForExpression = createDescriptorForGetCodeForExpression();
  /*package*/ final ConceptDescriptor myConceptIBuilderMode = createDescriptorForIBuilderMode();
  /*package*/ final ConceptDescriptor myConceptInsertAfter = createDescriptorForInsertAfter();
  /*package*/ final ConceptDescriptor myConceptInsertBefore = createDescriptorForInsertBefore();
  /*package*/ final ConceptDescriptor myConceptInsertPosition = createDescriptorForInsertPosition();
  /*package*/ final ConceptDescriptor myConceptInstructionGetSourceOperation = createDescriptorForInstructionGetSourceOperation();
  /*package*/ final ConceptDescriptor myConceptInstructionIsJump = createDescriptorForInstructionIsJump();
  /*package*/ final ConceptDescriptor myConceptInstructionIsNop = createDescriptorForInstructionIsNop();
  /*package*/ final ConceptDescriptor myConceptInstructionIsRet = createDescriptorForInstructionIsRet();
  /*package*/ final ConceptDescriptor myConceptInstructionType = createDescriptorForInstructionType();
  /*package*/ final ConceptDescriptor myConceptIntraProcedural_BuilderMode = createDescriptorForIntraProcedural_BuilderMode();
  /*package*/ final ConceptDescriptor myConceptLabelPosition = createDescriptorForLabelPosition();
  /*package*/ final ConceptDescriptor myConceptNodeParameter = createDescriptorForNodeParameter();
  /*package*/ final ConceptDescriptor myConceptPosition = createDescriptorForPosition();
  /*package*/ final ConceptDescriptor myConceptRelativePosition = createDescriptorForRelativePosition();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptAfterPosition.getId(), 0);
    myIndexMap.put(myConceptBaseEmitJumpStatement.getId(), 1);
    myIndexMap.put(myConceptBaseEmitVariableStatement.getId(), 2);
    myIndexMap.put(myConceptBaseInstructionOperation.getId(), 3);
    myIndexMap.put(myConceptBeforePosition.getId(), 4);
    myIndexMap.put(myConceptBooleanInstructionOperation.getId(), 5);
    myIndexMap.put(myConceptBuilderBlock.getId(), 6);
    myIndexMap.put(myConceptDataFlowBuilderDeclaration.getId(), 7);
    myIndexMap.put(myConceptEmitCodeForStatement.getId(), 8);
    myIndexMap.put(myConceptEmitIfJumpStatement.getId(), 9);
    myIndexMap.put(myConceptEmitJumpStatement.getId(), 10);
    myIndexMap.put(myConceptEmitLabelStatement.getId(), 11);
    myIndexMap.put(myConceptEmitMayBeUnreachable.getId(), 12);
    myIndexMap.put(myConceptEmitNopStatement.getId(), 13);
    myIndexMap.put(myConceptEmitReadStatement.getId(), 14);
    myIndexMap.put(myConceptEmitRetStatement.getId(), 15);
    myIndexMap.put(myConceptEmitStatement.getId(), 16);
    myIndexMap.put(myConceptEmitTryFinallyStatement.getId(), 17);
    myIndexMap.put(myConceptEmitWriteStatement.getId(), 18);
    myIndexMap.put(myConceptGetCodeForExpression.getId(), 19);
    myIndexMap.put(myConceptIBuilderMode.getId(), 20);
    myIndexMap.put(myConceptInsertAfter.getId(), 21);
    myIndexMap.put(myConceptInsertBefore.getId(), 22);
    myIndexMap.put(myConceptInsertPosition.getId(), 23);
    myIndexMap.put(myConceptInstructionGetSourceOperation.getId(), 24);
    myIndexMap.put(myConceptInstructionIsJump.getId(), 25);
    myIndexMap.put(myConceptInstructionIsNop.getId(), 26);
    myIndexMap.put(myConceptInstructionIsRet.getId(), 27);
    myIndexMap.put(myConceptInstructionType.getId(), 28);
    myIndexMap.put(myConceptIntraProcedural_BuilderMode.getId(), 29);
    myIndexMap.put(myConceptLabelPosition.getId(), 30);
    myIndexMap.put(myConceptNodeParameter.getId(), 31);
    myIndexMap.put(myConceptPosition.getId(), 32);
    myIndexMap.put(myConceptRelativePosition.getId(), 33);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAfterPosition, myConceptBaseEmitJumpStatement, myConceptBaseEmitVariableStatement, myConceptBaseInstructionOperation, myConceptBeforePosition, myConceptBooleanInstructionOperation, myConceptBuilderBlock, myConceptDataFlowBuilderDeclaration, myConceptEmitCodeForStatement, myConceptEmitIfJumpStatement, myConceptEmitJumpStatement, myConceptEmitLabelStatement, myConceptEmitMayBeUnreachable, myConceptEmitNopStatement, myConceptEmitReadStatement, myConceptEmitRetStatement, myConceptEmitStatement, myConceptEmitTryFinallyStatement, myConceptEmitWriteStatement, myConceptGetCodeForExpression, myConceptIBuilderMode, myConceptInsertAfter, myConceptInsertBefore, myConceptInsertPosition, myConceptInstructionGetSourceOperation, myConceptInstructionIsJump, myConceptInstructionIsNop, myConceptInstructionIsRet, myConceptInstructionType, myConceptIntraProcedural_BuilderMode, myConceptLabelPosition, myConceptNodeParameter, myConceptPosition, myConceptRelativePosition);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptAfterPosition;
      case 1:
        return myConceptBaseEmitJumpStatement;
      case 2:
        return myConceptBaseEmitVariableStatement;
      case 3:
        return myConceptBaseInstructionOperation;
      case 4:
        return myConceptBeforePosition;
      case 5:
        return myConceptBooleanInstructionOperation;
      case 6:
        return myConceptBuilderBlock;
      case 7:
        return myConceptDataFlowBuilderDeclaration;
      case 8:
        return myConceptEmitCodeForStatement;
      case 9:
        return myConceptEmitIfJumpStatement;
      case 10:
        return myConceptEmitJumpStatement;
      case 11:
        return myConceptEmitLabelStatement;
      case 12:
        return myConceptEmitMayBeUnreachable;
      case 13:
        return myConceptEmitNopStatement;
      case 14:
        return myConceptEmitReadStatement;
      case 15:
        return myConceptEmitRetStatement;
      case 16:
        return myConceptEmitStatement;
      case 17:
        return myConceptEmitTryFinallyStatement;
      case 18:
        return myConceptEmitWriteStatement;
      case 19:
        return myConceptGetCodeForExpression;
      case 20:
        return myConceptIBuilderMode;
      case 21:
        return myConceptInsertAfter;
      case 22:
        return myConceptInsertBefore;
      case 23:
        return myConceptInsertPosition;
      case 24:
        return myConceptInstructionGetSourceOperation;
      case 25:
        return myConceptInstructionIsJump;
      case 26:
        return myConceptInstructionIsNop;
      case 27:
        return myConceptInstructionIsRet;
      case 28:
        return myConceptInstructionType;
      case 29:
        return myConceptIntraProcedural_BuilderMode;
      case 30:
        return myConceptLabelPosition;
      case 31:
        return myConceptNodeParameter;
      case 32:
        return myConceptPosition;
      case 33:
        return myConceptRelativePosition;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForAfterPosition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "AfterPosition", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5bb091aL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.RelativePosition", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5b86667L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206445082906");
    b.alias("after");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBaseEmitJumpStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "BaseEmitJumpStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5bc8a99L);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.EmitStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5a42658L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206445181593");
    b.aggregate("jumpTo", 0x118e5bcba84L).target(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5b7dfc0L).optional(false).ordered(true).multiple(false).origin("1206445193860").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBaseEmitVariableStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "BaseEmitVariableStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5b40208L);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.EmitStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5a42658L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206444622344");
    b.aggregate("variable", 0x118e5b41f27L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("1206444629799").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBaseInstructionOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "BaseInstructionOperation", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x194dbbd57c9dbb65L);
    b.class_(false, true, false);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1823319949748058981");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBeforePosition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "BeforePosition", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5bad3a1L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.RelativePosition", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5b86667L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206445069217");
    b.alias("before");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBooleanInstructionOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "BooleanInstructionOperation", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x63a490c22d094d63L);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x194dbbd57c9dbb65L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/7180022869589052771");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBuilderBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "BuilderBlock", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5960f51L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunction", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206442659665");
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDataFlowBuilderDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "DataFlowBuilderDeclaration", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e58cd635L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x24614259e94f0c84L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x12509ddfaa98f128L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206442055221");
    b.associate("conceptDeclaration", 0x118e58d76a0L).target(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL).optional(false).origin("1206442096288").done();
    b.aggregate("builderBlock", 0x118e59865a7L).target(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5960f51L).optional(false).ordered(true).multiple(false).origin("1206442812839").done();
    b.aggregate("modes", 0x6e8db6877fd04efbL).target(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x6e8db6877fc9fed4L).optional(true).ordered(true).multiple(true).origin("7966224008969473787").done();
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    b.alias("Data Flow Builder");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmitCodeForStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "EmitCodeForStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e643e7efL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.EmitStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5a42658L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206454052847");
    b.aggregate("codeFor", 0x118e6444eb9L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("1206454079161").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("code for");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmitIfJumpStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "EmitIfJumpStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5be47c5L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5bc8a99L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206445295557");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("ifjump");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmitJumpStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "EmitJumpStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5be8165L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.BaseEmitJumpStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5bc8a99L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206445310309");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("jump");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmitLabelStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "EmitLabelStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x1190a87adadL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.EmitStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5a42658L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1207062474157");
    b.alias("label");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmitMayBeUnreachable() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "EmitMayBeUnreachable", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118eb0b6674L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Statement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1192e7dfdd1L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206534235764");
    b.aggregate("emitStatement", 0x118eb0b872cL).target(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5a42658L).optional(false).ordered(true).multiple(false).origin("1206534244140").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("{ <emit> }");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmitNopStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "EmitNopStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5a554f4L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.EmitStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5a42658L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206443660532");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("nop");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmitReadStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "EmitReadStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5a7d02aL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5b40208L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206443823146");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("read");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmitRetStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "EmitRetStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e6ca4377L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.EmitStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5a42658L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206462858103");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("ret");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmitStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "EmitStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5a42658L);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Statement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206443583064");
    b.aggregate("position", 0x1160a375bea5106L).target(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x75c73261efe5e666L).optional(true).ordered(true).multiple(false).origin("78261276407124230").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmitTryFinallyStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "EmitTryFinallyStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x119043714f5L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.EmitStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5a42658L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206956528885");
    b.aggregate("tryPart", 0x11904378e28L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L).optional(false).ordered(true).multiple(false).origin("1206956559912").done();
    b.aggregate("finallyPart", 0x1190437aab4L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L).optional(false).ordered(true).multiple(false).origin("1206956567220").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("try");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEmitWriteStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "EmitWriteStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5afd8deL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.BaseEmitVariableStatement", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5b40208L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206444349662");
    b.aggregate("value", 0x11e7d9f7c3bL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(true).ordered(true).multiple(false).origin("1230468250683").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("write");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGetCodeForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "GetCodeForExpression", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x2912c3e08c4f3324L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/2959643274329928484");
    b.aggregate("expression", 0x2912c3e08c4f3325L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("2959643274329928485").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("get code for");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIBuilderMode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "IBuilderMode", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x6e8db6877fc9fed4L);
    b.interface_();
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/7966224008969060052");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInsertAfter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "InsertAfter", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x75c73261efe5e662L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.InsertPosition", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x75c73261efe5e666L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/8486807419021026914");
    b.alias("after");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInsertBefore() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "InsertBefore", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x75c73261efe5e664L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.InsertPosition", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x75c73261efe5e666L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/8486807419021026916");
    b.alias("before");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInsertPosition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "InsertPosition", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x75c73261efe5e666L);
    b.class_(false, true, false);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/8486807419021026918");
    b.aggregate("instruction", 0x75c73261efe5e689L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("8486807419021026953").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInstructionGetSourceOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "InstructionGetSourceOperation", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x194dbbd57c9dbb64L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.BaseInstructionOperation", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x194dbbd57c9dbb65L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1823319949748058980");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("getSource");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInstructionIsJump() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "InstructionIsJump", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x797fabdf814e7af5L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x63a490c22d094d63L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/8754905177066994421");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("isJump");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInstructionIsNop() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "InstructionIsNop", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x63a490c22d094d5cL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x63a490c22d094d63L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/7180022869589052764");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("isNop");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInstructionIsRet() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "InstructionIsRet", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x63a490c22d094d5dL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.BooleanInstructionOperation", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x63a490c22d094d63L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/7180022869589052765");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("isRet");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInstructionType() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "InstructionType", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x44f5e79f9e613080L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Type", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/4969132436616196224");
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    b.alias("instruction");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntraProcedural_BuilderMode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "IntraProcedural_BuilderMode", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x6e8db6877fc9fed5L);
    b.class_(false, false, false);
    b.parent(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x6e8db6877fc9fed4L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/7966224008969060053");
    b.alias("intra-procedural");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLabelPosition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "LabelPosition", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x1190a8b1526L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.Position", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5b7dfc0L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1207062697254");
    b.associate("label", 0x1190a8b2ed8L).target(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x1190a87adadL).optional(false).origin("1207062703832").done();
    b.alias("after label");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNodeParameter() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "NodeParameter", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e597667fL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206442747519");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("node");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPosition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "Position", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5b7dfc0L);
    b.class_(false, true, false);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206444875712");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRelativePosition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.dataFlow", "RelativePosition", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5b86667L);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.lang.dataFlow.structure.Position", 0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5b7dfc0L);
    b.origin("r:00000000-0000-4000-0000-011c8959037d(jetbrains.mps.lang.dataFlow.structure)/1206444910183");
    b.aggregate("relativeTo", 0x118e5b89bc2L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("1206444923842").done();
    return b.create();
  }
}
