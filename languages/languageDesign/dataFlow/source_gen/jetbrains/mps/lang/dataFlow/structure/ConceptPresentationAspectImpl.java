package jetbrains.mps.lang.dataFlow.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AfterPosition;
  private ConceptPresentation props_BaseEmitJumpStatement;
  private ConceptPresentation props_BaseEmitVariableStatement;
  private ConceptPresentation props_BaseInstructionOperation;
  private ConceptPresentation props_BeforePosition;
  private ConceptPresentation props_BooleanInstructionOperation;
  private ConceptPresentation props_BuilderBlock;
  private ConceptPresentation props_DataFlowBuilderDeclaration;
  private ConceptPresentation props_EmitCodeForStatement;
  private ConceptPresentation props_EmitIfJumpStatement;
  private ConceptPresentation props_EmitJumpStatement;
  private ConceptPresentation props_EmitLabelStatement;
  private ConceptPresentation props_EmitMayBeUnreachable;
  private ConceptPresentation props_EmitNopStatement;
  private ConceptPresentation props_EmitReadStatement;
  private ConceptPresentation props_EmitRetStatement;
  private ConceptPresentation props_EmitStatement;
  private ConceptPresentation props_EmitTryFinallyStatement;
  private ConceptPresentation props_EmitWriteStatement;
  private ConceptPresentation props_GetCodeForExpression;
  private ConceptPresentation props_IBuilderMode;
  private ConceptPresentation props_InsertAfter;
  private ConceptPresentation props_InsertBefore;
  private ConceptPresentation props_InsertPosition;
  private ConceptPresentation props_InstructionGetSourceOperation;
  private ConceptPresentation props_InstructionIsJump;
  private ConceptPresentation props_InstructionIsNop;
  private ConceptPresentation props_InstructionIsRet;
  private ConceptPresentation props_InstructionType;
  private ConceptPresentation props_IntraProcedural_BuilderMode;
  private ConceptPresentation props_LabelPosition;
  private ConceptPresentation props_NodeParameter;
  private ConceptPresentation props_Position;
  private ConceptPresentation props_RelativePosition;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AfterPosition:
        if (props_AfterPosition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AfterPosition = cpb.create();
        }
        return props_AfterPosition;
      case LanguageConceptSwitch.BaseEmitJumpStatement:
        if (props_BaseEmitJumpStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BaseEmitJumpStatement = cpb.create();
        }
        return props_BaseEmitJumpStatement;
      case LanguageConceptSwitch.BaseEmitVariableStatement:
        if (props_BaseEmitVariableStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BaseEmitVariableStatement = cpb.create();
        }
        return props_BaseEmitVariableStatement;
      case LanguageConceptSwitch.BaseInstructionOperation:
        if (props_BaseInstructionOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BaseInstructionOperation = cpb.create();
        }
        return props_BaseInstructionOperation;
      case LanguageConceptSwitch.BeforePosition:
        if (props_BeforePosition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BeforePosition = cpb.create();
        }
        return props_BeforePosition;
      case LanguageConceptSwitch.BooleanInstructionOperation:
        if (props_BooleanInstructionOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BooleanInstructionOperation = cpb.create();
        }
        return props_BooleanInstructionOperation;
      case LanguageConceptSwitch.BuilderBlock:
        if (props_BuilderBlock == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_BuilderBlock = cpb.create();
        }
        return props_BuilderBlock;
      case LanguageConceptSwitch.DataFlowBuilderDeclaration:
        if (props_DataFlowBuilderDeclaration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.icon(IconContainer.RESOURCE_a0a1a0a7b0jb);
          props_DataFlowBuilderDeclaration = cpb.create();
        }
        return props_DataFlowBuilderDeclaration;
      case LanguageConceptSwitch.EmitCodeForStatement:
        if (props_EmitCodeForStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EmitCodeForStatement = cpb.create();
        }
        return props_EmitCodeForStatement;
      case LanguageConceptSwitch.EmitIfJumpStatement:
        if (props_EmitIfJumpStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EmitIfJumpStatement = cpb.create();
        }
        return props_EmitIfJumpStatement;
      case LanguageConceptSwitch.EmitJumpStatement:
        if (props_EmitJumpStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EmitJumpStatement = cpb.create();
        }
        return props_EmitJumpStatement;
      case LanguageConceptSwitch.EmitLabelStatement:
        if (props_EmitLabelStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EmitLabelStatement = cpb.create();
        }
        return props_EmitLabelStatement;
      case LanguageConceptSwitch.EmitMayBeUnreachable:
        if (props_EmitMayBeUnreachable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("emit maybe unreachable command");
          props_EmitMayBeUnreachable = cpb.create();
        }
        return props_EmitMayBeUnreachable;
      case LanguageConceptSwitch.EmitNopStatement:
        if (props_EmitNopStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EmitNopStatement = cpb.create();
        }
        return props_EmitNopStatement;
      case LanguageConceptSwitch.EmitReadStatement:
        if (props_EmitReadStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EmitReadStatement = cpb.create();
        }
        return props_EmitReadStatement;
      case LanguageConceptSwitch.EmitRetStatement:
        if (props_EmitRetStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EmitRetStatement = cpb.create();
        }
        return props_EmitRetStatement;
      case LanguageConceptSwitch.EmitStatement:
        if (props_EmitStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EmitStatement = cpb.create();
        }
        return props_EmitStatement;
      case LanguageConceptSwitch.EmitTryFinallyStatement:
        if (props_EmitTryFinallyStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EmitTryFinallyStatement = cpb.create();
        }
        return props_EmitTryFinallyStatement;
      case LanguageConceptSwitch.EmitWriteStatement:
        if (props_EmitWriteStatement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EmitWriteStatement = cpb.create();
        }
        return props_EmitWriteStatement;
      case LanguageConceptSwitch.GetCodeForExpression:
        if (props_GetCodeForExpression == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_GetCodeForExpression = cpb.create();
        }
        return props_GetCodeForExpression;
      case LanguageConceptSwitch.IBuilderMode:
        if (props_IBuilderMode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IBuilderMode = cpb.create();
        }
        return props_IBuilderMode;
      case LanguageConceptSwitch.InsertAfter:
        if (props_InsertAfter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_InsertAfter = cpb.create();
        }
        return props_InsertAfter;
      case LanguageConceptSwitch.InsertBefore:
        if (props_InsertBefore == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_InsertBefore = cpb.create();
        }
        return props_InsertBefore;
      case LanguageConceptSwitch.InsertPosition:
        if (props_InsertPosition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_InsertPosition = cpb.create();
        }
        return props_InsertPosition;
      case LanguageConceptSwitch.InstructionGetSourceOperation:
        if (props_InstructionGetSourceOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_InstructionGetSourceOperation = cpb.create();
        }
        return props_InstructionGetSourceOperation;
      case LanguageConceptSwitch.InstructionIsJump:
        if (props_InstructionIsJump == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_InstructionIsJump = cpb.create();
        }
        return props_InstructionIsJump;
      case LanguageConceptSwitch.InstructionIsNop:
        if (props_InstructionIsNop == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_InstructionIsNop = cpb.create();
        }
        return props_InstructionIsNop;
      case LanguageConceptSwitch.InstructionIsRet:
        if (props_InstructionIsRet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_InstructionIsRet = cpb.create();
        }
        return props_InstructionIsRet;
      case LanguageConceptSwitch.InstructionType:
        if (props_InstructionType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_InstructionType = cpb.create();
        }
        return props_InstructionType;
      case LanguageConceptSwitch.IntraProcedural_BuilderMode:
        if (props_IntraProcedural_BuilderMode == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_IntraProcedural_BuilderMode = cpb.create();
        }
        return props_IntraProcedural_BuilderMode;
      case LanguageConceptSwitch.LabelPosition:
        if (props_LabelPosition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_LabelPosition = cpb.create();
        }
        return props_LabelPosition;
      case LanguageConceptSwitch.NodeParameter:
        if (props_NodeParameter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("node to build DFA for");
          props_NodeParameter = cpb.create();
        }
        return props_NodeParameter;
      case LanguageConceptSwitch.Position:
        if (props_Position == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Position = cpb.create();
        }
        return props_Position;
      case LanguageConceptSwitch.RelativePosition:
        if (props_RelativePosition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_RelativePosition = cpb.create();
        }
        return props_RelativePosition;
    }
    return null;
  }
}
