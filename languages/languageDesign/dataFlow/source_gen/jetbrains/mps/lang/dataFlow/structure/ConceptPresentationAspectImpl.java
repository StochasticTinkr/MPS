package jetbrains.mps.lang.dataFlow.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AfterPosition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseEmitJumpStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseEmitVariableStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseInstructionOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BeforePosition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BooleanInstructionOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuilderBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DataFlowBuilderDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0h).create();
  private final ConceptPresentation props_EmitCodeForStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmitIfJumpStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmitJumpStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmitLabelStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmitMayBeUnreachable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmitNopStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmitReadStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmitRetStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmitStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmitTryFinallyStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmitWriteStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetCodeForExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IBuilderMode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InsertAfter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InsertBefore = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InsertPosition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstructionGetSourceOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstructionIsJump = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstructionIsNop = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstructionIsRet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InstructionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntraProcedural_BuilderMode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LabelPosition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Position = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RelativePosition = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("7fa12e9c-b949-4976-b4fa-19accbc320b4"), "jetbrains.mps.lang.dataFlow")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AfterPosition;
      case 1:
        return props_BaseEmitJumpStatement;
      case 2:
        return props_BaseEmitVariableStatement;
      case 3:
        return props_BaseInstructionOperation;
      case 4:
        return props_BeforePosition;
      case 5:
        return props_BooleanInstructionOperation;
      case 6:
        return props_BuilderBlock;
      case 7:
        return props_DataFlowBuilderDeclaration;
      case 8:
        return props_EmitCodeForStatement;
      case 9:
        return props_EmitIfJumpStatement;
      case 10:
        return props_EmitJumpStatement;
      case 11:
        return props_EmitLabelStatement;
      case 12:
        return props_EmitMayBeUnreachable;
      case 13:
        return props_EmitNopStatement;
      case 14:
        return props_EmitReadStatement;
      case 15:
        return props_EmitRetStatement;
      case 16:
        return props_EmitStatement;
      case 17:
        return props_EmitTryFinallyStatement;
      case 18:
        return props_EmitWriteStatement;
      case 19:
        return props_GetCodeForExpression;
      case 20:
        return props_IBuilderMode;
      case 21:
        return props_InsertAfter;
      case 22:
        return props_InsertBefore;
      case 23:
        return props_InsertPosition;
      case 24:
        return props_InstructionGetSourceOperation;
      case 25:
        return props_InstructionIsJump;
      case 26:
        return props_InstructionIsNop;
      case 27:
        return props_InstructionIsRet;
      case 28:
        return props_InstructionType;
      case 29:
        return props_IntraProcedural_BuilderMode;
      case 30:
        return props_LabelPosition;
      case 31:
        return props_NodeParameter;
      case 32:
        return props_Position;
      case 33:
        return props_RelativePosition;
    }
    throw new IllegalStateException();
  }
}
