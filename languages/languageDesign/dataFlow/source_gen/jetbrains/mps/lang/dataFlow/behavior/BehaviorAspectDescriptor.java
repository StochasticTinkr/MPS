package jetbrains.mps.lang.dataFlow.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myDataFlowBuilderDeclaration__BehaviorDescriptor = new DataFlowBuilderDeclaration__BehaviorDescriptor();
  private final BHDescriptor myBuilderBlock__BehaviorDescriptor = new BuilderBlock__BehaviorDescriptor();
  private final BHDescriptor myNodeParameter__BehaviorDescriptor = new NodeParameter__BehaviorDescriptor();
  private final BHDescriptor myEmitStatement__BehaviorDescriptor = new EmitStatement__BehaviorDescriptor();
  private final BHDescriptor myLabelPosition__BehaviorDescriptor = new LabelPosition__BehaviorDescriptor();
  private final BHDescriptor myInstructionType__BehaviorDescriptor = new InstructionType__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myBuilderBlock__BehaviorDescriptor;
      case 1:
        return myDataFlowBuilderDeclaration__BehaviorDescriptor;
      case 2:
        return myEmitStatement__BehaviorDescriptor;
      case 3:
        return myInstructionType__BehaviorDescriptor;
      case 4:
        return myLabelPosition__BehaviorDescriptor;
      case 5:
        return myNodeParameter__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5960f51L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e58cd635L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5a42658L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x44f5e79f9e613080L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x1190a8b1526L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e597667fL)).seal();
}
