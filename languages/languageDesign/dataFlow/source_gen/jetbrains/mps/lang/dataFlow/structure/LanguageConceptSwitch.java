package jetbrains.mps.lang.dataFlow.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AfterPosition = 0;
  public static final int BaseEmitJumpStatement = 1;
  public static final int BaseEmitVariableStatement = 2;
  public static final int BaseInstructionOperation = 3;
  public static final int BeforePosition = 4;
  public static final int BooleanInstructionOperation = 5;
  public static final int BuilderBlock = 6;
  public static final int DataFlowBuilderDeclaration = 7;
  public static final int EmitCodeForStatement = 8;
  public static final int EmitIfJumpStatement = 9;
  public static final int EmitJumpStatement = 10;
  public static final int EmitLabelStatement = 11;
  public static final int EmitMayBeUnreachable = 12;
  public static final int EmitNopStatement = 13;
  public static final int EmitReadStatement = 14;
  public static final int EmitRetStatement = 15;
  public static final int EmitStatement = 16;
  public static final int EmitTryFinallyStatement = 17;
  public static final int EmitWriteStatement = 18;
  public static final int GetCodeForExpression = 19;
  public static final int IBuilderMode = 20;
  public static final int InsertAfter = 21;
  public static final int InsertBefore = 22;
  public static final int InsertPosition = 23;
  public static final int InstructionGetSourceOperation = 24;
  public static final int InstructionIsJump = 25;
  public static final int InstructionIsNop = 26;
  public static final int InstructionIsRet = 27;
  public static final int InstructionType = 28;
  public static final int IntraProcedural_BuilderMode = 29;
  public static final int LabelPosition = 30;
  public static final int NodeParameter = 31;
  public static final int Position = 32;
  public static final int RelativePosition = 33;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L);
    builder.put(0x118e5bb091aL, AfterPosition);
    builder.put(0x118e5bc8a99L, BaseEmitJumpStatement);
    builder.put(0x118e5b40208L, BaseEmitVariableStatement);
    builder.put(0x194dbbd57c9dbb65L, BaseInstructionOperation);
    builder.put(0x118e5bad3a1L, BeforePosition);
    builder.put(0x63a490c22d094d63L, BooleanInstructionOperation);
    builder.put(0x118e5960f51L, BuilderBlock);
    builder.put(0x118e58cd635L, DataFlowBuilderDeclaration);
    builder.put(0x118e643e7efL, EmitCodeForStatement);
    builder.put(0x118e5be47c5L, EmitIfJumpStatement);
    builder.put(0x118e5be8165L, EmitJumpStatement);
    builder.put(0x1190a87adadL, EmitLabelStatement);
    builder.put(0x118eb0b6674L, EmitMayBeUnreachable);
    builder.put(0x118e5a554f4L, EmitNopStatement);
    builder.put(0x118e5a7d02aL, EmitReadStatement);
    builder.put(0x118e6ca4377L, EmitRetStatement);
    builder.put(0x118e5a42658L, EmitStatement);
    builder.put(0x119043714f5L, EmitTryFinallyStatement);
    builder.put(0x118e5afd8deL, EmitWriteStatement);
    builder.put(0x2912c3e08c4f3324L, GetCodeForExpression);
    builder.put(0x6e8db6877fc9fed4L, IBuilderMode);
    builder.put(0x75c73261efe5e662L, InsertAfter);
    builder.put(0x75c73261efe5e664L, InsertBefore);
    builder.put(0x75c73261efe5e666L, InsertPosition);
    builder.put(0x194dbbd57c9dbb64L, InstructionGetSourceOperation);
    builder.put(0x797fabdf814e7af5L, InstructionIsJump);
    builder.put(0x63a490c22d094d5cL, InstructionIsNop);
    builder.put(0x63a490c22d094d5dL, InstructionIsRet);
    builder.put(0x44f5e79f9e613080L, InstructionType);
    builder.put(0x6e8db6877fc9fed5L, IntraProcedural_BuilderMode);
    builder.put(0x1190a8b1526L, LabelPosition);
    builder.put(0x118e597667fL, NodeParameter);
    builder.put(0x118e5b7dfc0L, Position);
    builder.put(0x118e5b86667L, RelativePosition);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
