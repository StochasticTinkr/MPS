package jetbrains.mps.lang.dataFlow.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (index_xbvbvu_a0a.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new BaseEmitJumpStatement_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new BaseEmitVariableStatement_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new BaseInstructionOperation_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new DataFlowBuilderDeclaration_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new EmitCodeForStatement_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new EmitLabelStatement_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new EmitMayBeUnreachable_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new EmitNopStatement_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new EmitRetStatement_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new EmitTryFinallyStatement_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new EmitWriteStatement_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new GetCodeForExpression_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new InsertAfter_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new InsertBefore_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new IntraProcedural_BuilderMode_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new LabelPosition_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new RelativePosition_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (index_xbvbvu_a0d.index(cncpt)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new BaseEmitJumpStatement_TransformationMenu());
      case 1:
        return Collections.<TransformationMenu>singletonList(new EmitStatement_TransformationMenu());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (index_xbvbvu_a0e.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new NodeParameter_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex index_xbvbvu_a0a = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5bc8a99L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5b40208L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x194dbbd57c9dbb65L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e58cd635L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e643e7efL), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x1190a87adadL), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118eb0b6674L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5a554f4L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e6ca4377L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x119043714f5L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5afd8deL), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x2912c3e08c4f3324L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x75c73261efe5e662L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x75c73261efe5e664L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x6e8db6877fc9fed5L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x1190a8b1526L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5b86667L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0d = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5bc8a99L), MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e5a42658L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0e = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7fa12e9cb9494976L, 0xb4fa19accbc320b4L, 0x118e597667fL)).seal();
}
