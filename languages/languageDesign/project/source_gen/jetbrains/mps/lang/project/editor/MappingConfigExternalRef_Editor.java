package jetbrains.mps.lang.project.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class MappingConfigExternalRef_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_njrz2i_a(editorContext, node);
  }
  private EditorCell createCollection_njrz2i_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_njrz2i_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_njrz2i_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_njrz2i_b0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_njrz2i_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_njrz2i_d0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_njrz2i_e0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_njrz2i_f0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_njrz2i_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "generator");
    editorCell.setCellId("Constant_njrz2i_a0");
    Style style = new StyleImpl();
    ProjectStructure_StyleSheet.apply_KeyWord(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_njrz2i_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "/");
    editorCell.setCellId("Constant_njrz2i_b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_njrz2i_c0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new MappingConfigExternalRef_Editor.generatorSingleRoleHandler_njrz2i_c0(node, MetaAdapterFactory.getContainmentLink(0x86ef829012bb4ca7L, 0x947f093788f263a9L, 0x25c3f284595727e1L, 0x25c3f284595727e3L, "generator"), editorContext);
    return provider.createCell();
  }
  private class generatorSingleRoleHandler_njrz2i_c0 extends SingleRoleCellProvider {
    public generatorSingleRoleHandler_njrz2i_c0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("generator");
      }
      Style style = new StyleImpl();
      style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
      editorCell.getStyle().putAll(style);
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_generator");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no generator>";
    }
  }
  private EditorCell createConstant_njrz2i_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "/");
    editorCell.setCellId("Constant_njrz2i_d0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.PUNCTUATION_LEFT, 0, true);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_njrz2i_e0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "->");
    editorCell.setCellId("Constant_njrz2i_e0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_njrz2i_f0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new MappingConfigExternalRef_Editor.innerRefSingleRoleHandler_njrz2i_f0(node, MetaAdapterFactory.getContainmentLink(0x86ef829012bb4ca7L, 0x947f093788f263a9L, 0x25c3f284595727e1L, 0x25c3f284595727e2L, "innerRef"), editorContext);
    return provider.createCell();
  }
  private class innerRefSingleRoleHandler_njrz2i_f0 extends SingleRoleCellProvider {
    public innerRefSingleRoleHandler_njrz2i_f0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("innerRef");
      }
      Style style = new StyleImpl();
      style.set(StyleAttributes.PUNCTUATION_RIGHT, 0, true);
      editorCell.getStyle().putAll(style);
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_innerRef");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no innerRef>";
    }
  }
}
