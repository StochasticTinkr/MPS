package jetbrains.mps.lang.project.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_DevKit = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Generator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Language = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x86ef829012bb4ca7L, 0x947f093788f263a9L, 0x5869770da61dfe1fL, 0x3be012d639e820aL, "genPath"), MetaAdapterFactory.getProperty(0x86ef829012bb4ca7L, 0x947f093788f263a9L, 0x5869770da61dfe1fL, 0x5edd58f612649635L, "languagePath"), MetaAdapterFactory.getProperty(0x86ef829012bb4ca7L, 0x947f093788f263a9L, 0x5869770da61dfe1fL, 0x50317e9064ec725dL, "version")).create();
  private final ConceptPresentation props_MappingConfigExternalRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingConfigNormalRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingConfigRefAllGlobal = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingConfigRefAllLocal = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingConfigRefBase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingConfigRefSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingPriorityRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Module = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModuleDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModuleReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Solution = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SourcePath = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubEntry = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubSolution = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_DevKit;
      case 1:
        return props_Generator;
      case 2:
        return props_Language;
      case 3:
        return props_MappingConfigExternalRef;
      case 4:
        return props_MappingConfigNormalRef;
      case 5:
        return props_MappingConfigRefAllGlobal;
      case 6:
        return props_MappingConfigRefAllLocal;
      case 7:
        return props_MappingConfigRefBase;
      case 8:
        return props_MappingConfigRefSet;
      case 9:
        return props_MappingPriorityRule;
      case 10:
        return props_ModelReference;
      case 11:
        return props_ModelRoot;
      case 12:
        return props_Module;
      case 13:
        return props_ModuleDependency;
      case 14:
        return props_ModuleReference;
      case 15:
        return props_Solution;
      case 16:
        return props_SourcePath;
      case 17:
        return props_StubEntry;
      case 18:
        return props_StubSolution;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
