package jetbrains.mps.lang.refactoring.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractMoveExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractMoveNodeExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractMoveNodesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AffectedNodesClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_Model = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_Module = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_SModel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_SNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextMemberOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateRefactoringContext = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DoRefactorClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DoWhenDoneClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteRefactoringStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetModelsToUpdateClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsApplicableToModelClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsApplicableToModuleClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsApplicableToNodeClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsRefactoringApplicable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MainProjectOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelDescriptorOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelsToGenerateByDefault = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelsToGenerateClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModuleOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModuleTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveNodeToModelExpression = new ConceptPresentationBuilder().shortDesc("move node to model").create();
  private final ConceptPresentation props_MoveNodeToNodeExpression = new ConceptPresentationBuilder().shortDesc("move node to another node").create();
  private final ConceptPresentation props_MoveNodesToModelExpression = new ConceptPresentationBuilder().shortDesc("move nodes to model").create();
  private final ConceptPresentation props_MoveNodesToNodeExpression = new ConceptPresentationBuilder().shortDesc("move nodes to another node").create();
  private final ConceptPresentation props_NodeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodesOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationContextOperation = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_ProjectOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Refactoring = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0kb).create();
  private final ConceptPresentation props_RefactoringAction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringArgument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringArgumentReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringContext_ConceptFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringField = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringFieldReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RepositoryOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ScopeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UpdateModelProcedure = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractMoveExpression:
        return props_AbstractMoveExpression;
      case LanguageConceptSwitch.AbstractMoveNodeExpression:
        return props_AbstractMoveNodeExpression;
      case LanguageConceptSwitch.AbstractMoveNodesExpression:
        return props_AbstractMoveNodesExpression;
      case LanguageConceptSwitch.AffectedNodesClause:
        return props_AffectedNodesClause;
      case LanguageConceptSwitch.ConceptFunctionParameter_Model:
        return props_ConceptFunctionParameter_Model;
      case LanguageConceptSwitch.ConceptFunctionParameter_Module:
        return props_ConceptFunctionParameter_Module;
      case LanguageConceptSwitch.ConceptFunctionParameter_SModel:
        return props_ConceptFunctionParameter_SModel;
      case LanguageConceptSwitch.ConceptFunctionParameter_SNode:
        return props_ConceptFunctionParameter_SNode;
      case LanguageConceptSwitch.ContextMemberOperation:
        return props_ContextMemberOperation;
      case LanguageConceptSwitch.ContextType:
        return props_ContextType;
      case LanguageConceptSwitch.CreateRefactoringContext:
        return props_CreateRefactoringContext;
      case LanguageConceptSwitch.DoRefactorClause:
        return props_DoRefactorClause;
      case LanguageConceptSwitch.DoWhenDoneClause:
        return props_DoWhenDoneClause;
      case LanguageConceptSwitch.ExecuteRefactoringStatement:
        return props_ExecuteRefactoringStatement;
      case LanguageConceptSwitch.GetModelsToUpdateClause:
        return props_GetModelsToUpdateClause;
      case LanguageConceptSwitch.InitClause:
        return props_InitClause;
      case LanguageConceptSwitch.IsApplicableToModelClause:
        return props_IsApplicableToModelClause;
      case LanguageConceptSwitch.IsApplicableToModuleClause:
        return props_IsApplicableToModuleClause;
      case LanguageConceptSwitch.IsApplicableToNodeClause:
        return props_IsApplicableToNodeClause;
      case LanguageConceptSwitch.IsRefactoringApplicable:
        return props_IsRefactoringApplicable;
      case LanguageConceptSwitch.MainProjectOperation:
        return props_MainProjectOperation;
      case LanguageConceptSwitch.ModelDescriptorOperation:
        return props_ModelDescriptorOperation;
      case LanguageConceptSwitch.ModelTarget:
        return props_ModelTarget;
      case LanguageConceptSwitch.ModelsToGenerateByDefault:
        return props_ModelsToGenerateByDefault;
      case LanguageConceptSwitch.ModelsToGenerateClause:
        return props_ModelsToGenerateClause;
      case LanguageConceptSwitch.ModuleOperation:
        return props_ModuleOperation;
      case LanguageConceptSwitch.ModuleTarget:
        return props_ModuleTarget;
      case LanguageConceptSwitch.MoveNodeToModelExpression:
        return props_MoveNodeToModelExpression;
      case LanguageConceptSwitch.MoveNodeToNodeExpression:
        return props_MoveNodeToNodeExpression;
      case LanguageConceptSwitch.MoveNodesToModelExpression:
        return props_MoveNodesToModelExpression;
      case LanguageConceptSwitch.MoveNodesToNodeExpression:
        return props_MoveNodesToNodeExpression;
      case LanguageConceptSwitch.NodeOperation:
        return props_NodeOperation;
      case LanguageConceptSwitch.NodeTarget:
        return props_NodeTarget;
      case LanguageConceptSwitch.NodesOperation:
        return props_NodesOperation;
      case LanguageConceptSwitch.OperationContextOperation:
        return props_OperationContextOperation;
      case LanguageConceptSwitch.ProjectOperation:
        return props_ProjectOperation;
      case LanguageConceptSwitch.Refactoring:
        return props_Refactoring;
      case LanguageConceptSwitch.RefactoringAction:
        return props_RefactoringAction;
      case LanguageConceptSwitch.RefactoringArgument:
        return props_RefactoringArgument;
      case LanguageConceptSwitch.RefactoringArgumentReference:
        return props_RefactoringArgumentReference;
      case LanguageConceptSwitch.RefactoringContext_ConceptFunctionParameter:
        return props_RefactoringContext_ConceptFunctionParameter;
      case LanguageConceptSwitch.RefactoringField:
        return props_RefactoringField;
      case LanguageConceptSwitch.RefactoringFieldReference:
        return props_RefactoringFieldReference;
      case LanguageConceptSwitch.RefactoringParameter:
        return props_RefactoringParameter;
      case LanguageConceptSwitch.RefactoringParameterReference:
        return props_RefactoringParameterReference;
      case LanguageConceptSwitch.RefactoringTarget:
        return props_RefactoringTarget;
      case LanguageConceptSwitch.RepositoryOperation:
        return props_RepositoryOperation;
      case LanguageConceptSwitch.ScopeOperation:
        return props_ScopeOperation;
      case LanguageConceptSwitch.UpdateModelProcedure:
        return props_UpdateModelProcedure;
    }
    return null;
  }
}
