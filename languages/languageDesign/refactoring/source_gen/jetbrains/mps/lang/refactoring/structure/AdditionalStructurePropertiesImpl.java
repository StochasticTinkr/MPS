package jetbrains.mps.lang.refactoring.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractMoveExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractMoveNodeExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractMoveNodesExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AffectedNodesClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_Model = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_Module = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_SModel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_SNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextMemberOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateRefactoringContext = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DoRefactorClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DoWhenDoneClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteRefactoringStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetModelsToUpdateClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InitClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsApplicableToModelClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsApplicableToModuleClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsApplicableToNodeClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsRefactoringApplicable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MainProjectOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelDescriptorOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelsToGenerateByDefault = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelsToGenerateClause = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModuleOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModuleTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveNodeToModelExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveNodeToNodeExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveNodesToModelExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveNodesToNodeExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodesOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationContextOperation = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ProjectOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Refactoring = new ConceptPresentationBuilder().icon("refactoring.png", AdditionalStructurePropertiesImpl.class).create();
  private final ConceptPresentation props_RefactoringAction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringArgument = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringArgumentReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringContext_ConceptFunctionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringField = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringFieldReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringTarget = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RepositoryOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ScopeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UpdateModelProcedure = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0yb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractMoveExpression;
          }
          break;
        case 1:
          if (true) {
            return props_AbstractMoveNodeExpression;
          }
          break;
        case 2:
          if (true) {
            return props_AbstractMoveNodesExpression;
          }
          break;
        case 3:
          if (true) {
            return props_AffectedNodesClause;
          }
          break;
        case 4:
          if (true) {
            return props_ConceptFunctionParameter_Model;
          }
          break;
        case 5:
          if (true) {
            return props_ConceptFunctionParameter_Module;
          }
          break;
        case 6:
          if (true) {
            return props_ConceptFunctionParameter_SModel;
          }
          break;
        case 7:
          if (true) {
            return props_ConceptFunctionParameter_SNode;
          }
          break;
        case 8:
          if (true) {
            return props_ContextMemberOperation;
          }
          break;
        case 9:
          if (true) {
            return props_ContextType;
          }
          break;
        case 10:
          if (true) {
            return props_CreateRefactoringContext;
          }
          break;
        case 11:
          if (true) {
            return props_DoRefactorClause;
          }
          break;
        case 12:
          if (true) {
            return props_DoWhenDoneClause;
          }
          break;
        case 13:
          if (true) {
            return props_ExecuteRefactoringStatement;
          }
          break;
        case 14:
          if (true) {
            return props_GetModelsToUpdateClause;
          }
          break;
        case 15:
          if (true) {
            return props_InitClause;
          }
          break;
        case 16:
          if (true) {
            return props_IsApplicableToModelClause;
          }
          break;
        case 17:
          if (true) {
            return props_IsApplicableToModuleClause;
          }
          break;
        case 18:
          if (true) {
            return props_IsApplicableToNodeClause;
          }
          break;
        case 19:
          if (true) {
            return props_IsRefactoringApplicable;
          }
          break;
        case 20:
          if (true) {
            return props_MainProjectOperation;
          }
          break;
        case 21:
          if (true) {
            return props_ModelDescriptorOperation;
          }
          break;
        case 22:
          if (true) {
            return props_ModelTarget;
          }
          break;
        case 23:
          if (true) {
            return props_ModelsToGenerateByDefault;
          }
          break;
        case 24:
          if (true) {
            return props_ModelsToGenerateClause;
          }
          break;
        case 25:
          if (true) {
            return props_ModuleOperation;
          }
          break;
        case 26:
          if (true) {
            return props_ModuleTarget;
          }
          break;
        case 27:
          if (true) {
            return props_MoveNodeToModelExpression;
          }
          break;
        case 28:
          if (true) {
            return props_MoveNodeToNodeExpression;
          }
          break;
        case 29:
          if (true) {
            return props_MoveNodesToModelExpression;
          }
          break;
        case 30:
          if (true) {
            return props_MoveNodesToNodeExpression;
          }
          break;
        case 31:
          if (true) {
            return props_NodeOperation;
          }
          break;
        case 32:
          if (true) {
            return props_NodeTarget;
          }
          break;
        case 33:
          if (true) {
            return props_NodesOperation;
          }
          break;
        case 34:
          if (true) {
            return props_OperationContextOperation;
          }
          break;
        case 35:
          if (true) {
            return props_ProjectOperation;
          }
          break;
        case 36:
          if (true) {
            return props_Refactoring;
          }
          break;
        case 37:
          if (true) {
            return props_RefactoringAction;
          }
          break;
        case 38:
          if (true) {
            return props_RefactoringArgument;
          }
          break;
        case 39:
          if (true) {
            return props_RefactoringArgumentReference;
          }
          break;
        case 40:
          if (true) {
            return props_RefactoringContext_ConceptFunctionParameter;
          }
          break;
        case 41:
          if (true) {
            return props_RefactoringField;
          }
          break;
        case 42:
          if (true) {
            return props_RefactoringFieldReference;
          }
          break;
        case 43:
          if (true) {
            return props_RefactoringParameter;
          }
          break;
        case 44:
          if (true) {
            return props_RefactoringParameterReference;
          }
          break;
        case 45:
          if (true) {
            return props_RefactoringTarget;
          }
          break;
        case 46:
          if (true) {
            return props_RepositoryOperation;
          }
          break;
        case 47:
          if (true) {
            return props_ScopeOperation;
          }
          break;
        case 48:
          if (true) {
            return props_UpdateModelProcedure;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0yb = buildConceptIndices(MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x1174ee3c478L, "AbstractMoveExpression"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x1174eee67c1L, "AbstractMoveNodeExpression"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x1174eeedfb6L, "AbstractMoveNodesExpression"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x1179d272ac6L, "AffectedNodesClause"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x1199f5764daL, "ConceptFunctionParameter_Model"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x5fb04b74a77a0577L, "ConceptFunctionParameter_Module"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x114ff551cd5L, "ConceptFunctionParameter_SModel"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x5fb04b74a77a059eL, "ConceptFunctionParameter_SNode"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x6e6245e06b61646dL, "ContextMemberOperation"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x6e6245e06b65b84aL, "ContextType"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x335c206b02bc2de5L, "CreateRefactoringContext"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x114ff4a9da3L, "DoRefactorClause"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x1c9210c7226dbbf4L, "DoWhenDoneClause"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x1fe4fcef62d0186cL, "ExecuteRefactoringStatement"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x119f1c05cbcL, "GetModelsToUpdateClause"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x4c4b92003e4d77d2L, "InitClause"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x1199f56b378L, "IsApplicableToModelClause"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x5fb04b74a77a0571L, "IsApplicableToModuleClause"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x5fb04b74a77a0598L, "IsApplicableToNodeClause"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x5b9318cd86fd917dL, "IsRefactoringApplicable"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x709995bad7715796L, "MainProjectOperation"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x6e6245e06b61646fL, "ModelDescriptorOperation"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x5fb04b74a77a056aL, "ModelTarget"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x3c55f2dab56d441dL, "ModelsToGenerateByDefault"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x175aa0f4225aa61fL, "ModelsToGenerateClause"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x6e6245e06b616471L, "ModuleOperation"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x5fb04b74a77a056bL, "ModuleTarget"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x1174ef1677bL, "MoveNodeToModelExpression"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x1174ef58749L, "MoveNodeToNodeExpression"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x1174ef7a718L, "MoveNodesToModelExpression"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x1174efa95a1L, "MoveNodesToNodeExpression"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x6e6245e06b616473L, "NodeOperation"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x5fb04b74a77a056cL, "NodeTarget"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x6e6245e06b616475L, "NodesOperation"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x6e6245e06b616477L, "OperationContextOperation"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x6e6245e06b616479L, "ProjectOperation"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x5fb04b74a778e245L, "Refactoring"), MetaAdapterFactory.getInterfaceConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x2cfffca8ff395f2fL, "RefactoringAction"), MetaAdapterFactory.getInterfaceConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x6a4d729d0327d5dL, "RefactoringArgument"), MetaAdapterFactory.getInterfaceConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x6a4d729d0327dc4L, "RefactoringArgumentReference"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x6e6245e06b61724aL, "RefactoringContext_ConceptFunctionParameter"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x5fb04b74a77a0662L, "RefactoringField"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x4c4b92003e483aaaL, "RefactoringFieldReference"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x5fb04b74a77a0664L, "RefactoringParameter"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x5fb04b74a77cda06L, "RefactoringParameterReference"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x5fb04b74a77a0569L, "RefactoringTarget"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x526920001de2794bL, "RepositoryOperation"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x6e6245e06b61647bL, "ScopeOperation"), MetaAdapterFactory.getConcept(0x3ecd7c84cde345deL, 0x886c135ecc69b742L, 0x11710c75c77L, "UpdateModelProcedure"));
}
