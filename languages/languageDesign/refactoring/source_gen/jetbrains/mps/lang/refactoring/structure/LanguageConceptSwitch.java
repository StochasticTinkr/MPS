package jetbrains.mps.lang.refactoring.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractMoveExpression = 0;
  public static final int AbstractMoveNodeExpression = 1;
  public static final int AbstractMoveNodesExpression = 2;
  public static final int AffectedNodesClause = 3;
  public static final int ConceptFunctionParameter_Model = 4;
  public static final int ConceptFunctionParameter_Module = 5;
  public static final int ConceptFunctionParameter_SModel = 6;
  public static final int ConceptFunctionParameter_SNode = 7;
  public static final int ContextMemberOperation = 8;
  public static final int ContextType = 9;
  public static final int CreateRefactoringContext = 10;
  public static final int DoRefactorClause = 11;
  public static final int DoWhenDoneClause = 12;
  public static final int ExecuteRefactoringStatement = 13;
  public static final int GetModelsToUpdateClause = 14;
  public static final int InitClause = 15;
  public static final int IsApplicableToModelClause = 16;
  public static final int IsApplicableToModuleClause = 17;
  public static final int IsApplicableToNodeClause = 18;
  public static final int IsRefactoringApplicable = 19;
  public static final int MainProjectOperation = 20;
  public static final int ModelDescriptorOperation = 21;
  public static final int ModelTarget = 22;
  public static final int ModelsToGenerateByDefault = 23;
  public static final int ModelsToGenerateClause = 24;
  public static final int ModuleOperation = 25;
  public static final int ModuleTarget = 26;
  public static final int MoveNodeToModelExpression = 27;
  public static final int MoveNodeToNodeExpression = 28;
  public static final int MoveNodesToModelExpression = 29;
  public static final int MoveNodesToNodeExpression = 30;
  public static final int NodeOperation = 31;
  public static final int NodeTarget = 32;
  public static final int NodesOperation = 33;
  public static final int ProjectOperation = 34;
  public static final int Refactoring = 35;
  public static final int RefactoringAction = 36;
  public static final int RefactoringArgument = 37;
  public static final int RefactoringArgumentReference = 38;
  public static final int RefactoringContext_ConceptFunctionParameter = 39;
  public static final int RefactoringField = 40;
  public static final int RefactoringFieldReference = 41;
  public static final int RefactoringParameter = 42;
  public static final int RefactoringParameterReference = 43;
  public static final int RefactoringTarget = 44;
  public static final int RepositoryOperation = 45;
  public static final int ScopeOperation = 46;
  public static final int UpdateModelProcedure = 47;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x3ecd7c84cde345deL, 0x886c135ecc69b742L);
    builder.put(0x1174ee3c478L, AbstractMoveExpression);
    builder.put(0x1174eee67c1L, AbstractMoveNodeExpression);
    builder.put(0x1174eeedfb6L, AbstractMoveNodesExpression);
    builder.put(0x1179d272ac6L, AffectedNodesClause);
    builder.put(0x1199f5764daL, ConceptFunctionParameter_Model);
    builder.put(0x5fb04b74a77a0577L, ConceptFunctionParameter_Module);
    builder.put(0x114ff551cd5L, ConceptFunctionParameter_SModel);
    builder.put(0x5fb04b74a77a059eL, ConceptFunctionParameter_SNode);
    builder.put(0x6e6245e06b61646dL, ContextMemberOperation);
    builder.put(0x6e6245e06b65b84aL, ContextType);
    builder.put(0x335c206b02bc2de5L, CreateRefactoringContext);
    builder.put(0x114ff4a9da3L, DoRefactorClause);
    builder.put(0x1c9210c7226dbbf4L, DoWhenDoneClause);
    builder.put(0x1fe4fcef62d0186cL, ExecuteRefactoringStatement);
    builder.put(0x119f1c05cbcL, GetModelsToUpdateClause);
    builder.put(0x4c4b92003e4d77d2L, InitClause);
    builder.put(0x1199f56b378L, IsApplicableToModelClause);
    builder.put(0x5fb04b74a77a0571L, IsApplicableToModuleClause);
    builder.put(0x5fb04b74a77a0598L, IsApplicableToNodeClause);
    builder.put(0x5b9318cd86fd917dL, IsRefactoringApplicable);
    builder.put(0x709995bad7715796L, MainProjectOperation);
    builder.put(0x6e6245e06b61646fL, ModelDescriptorOperation);
    builder.put(0x5fb04b74a77a056aL, ModelTarget);
    builder.put(0x3c55f2dab56d441dL, ModelsToGenerateByDefault);
    builder.put(0x175aa0f4225aa61fL, ModelsToGenerateClause);
    builder.put(0x6e6245e06b616471L, ModuleOperation);
    builder.put(0x5fb04b74a77a056bL, ModuleTarget);
    builder.put(0x1174ef1677bL, MoveNodeToModelExpression);
    builder.put(0x1174ef58749L, MoveNodeToNodeExpression);
    builder.put(0x1174ef7a718L, MoveNodesToModelExpression);
    builder.put(0x1174efa95a1L, MoveNodesToNodeExpression);
    builder.put(0x6e6245e06b616473L, NodeOperation);
    builder.put(0x5fb04b74a77a056cL, NodeTarget);
    builder.put(0x6e6245e06b616475L, NodesOperation);
    builder.put(0x6e6245e06b616479L, ProjectOperation);
    builder.put(0x5fb04b74a778e245L, Refactoring);
    builder.put(0x2cfffca8ff395f2fL, RefactoringAction);
    builder.put(0x6a4d729d0327d5dL, RefactoringArgument);
    builder.put(0x6a4d729d0327dc4L, RefactoringArgumentReference);
    builder.put(0x6e6245e06b61724aL, RefactoringContext_ConceptFunctionParameter);
    builder.put(0x5fb04b74a77a0662L, RefactoringField);
    builder.put(0x4c4b92003e483aaaL, RefactoringFieldReference);
    builder.put(0x5fb04b74a77a0664L, RefactoringParameter);
    builder.put(0x5fb04b74a77cda06L, RefactoringParameterReference);
    builder.put(0x5fb04b74a77a0569L, RefactoringTarget);
    builder.put(0x526920001de2794bL, RepositoryOperation);
    builder.put(0x6e6245e06b61647bL, ScopeOperation);
    builder.put(0x11710c75c77L, UpdateModelProcedure);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
