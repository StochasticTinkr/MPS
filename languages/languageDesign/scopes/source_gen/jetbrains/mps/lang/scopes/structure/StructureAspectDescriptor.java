package jetbrains.mps.lang.scopes.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptComeFromExpression = createDescriptorForComeFromExpression();
  /*package*/ final ConceptDescriptor myConceptCompositeWithParentScopeExpression = createDescriptorForCompositeWithParentScopeExpression();
  /*package*/ final ConceptDescriptor myConceptParentScope = createDescriptorForParentScope();
  /*package*/ final ConceptDescriptor myConceptUniformScopeProvider = createDescriptorForUniformScopeProvider();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptComeFromExpression, myConceptCompositeWithParentScopeExpression, myConceptParentScope, myConceptUniformScopeProvider);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.ComeFromExpression:
        return myConceptComeFromExpression;
      case LanguageConceptSwitch.CompositeWithParentScopeExpression:
        return myConceptCompositeWithParentScopeExpression;
      case LanguageConceptSwitch.ParentScope:
        return myConceptParentScope;
      case LanguageConceptSwitch.UniformScopeProvider:
        return myConceptUniformScopeProvider;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList();
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForComeFromExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.scopes", "ComeFromExpression", 0xd8f591ec4d864af2L, 0x9f92a9e93c803ffaL, 0x701a981462928bdfL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:142fc2e9-fc09-4c4f-92d7-6ce0e3f66b61(jetbrains.mps.lang.scopes.structure)/8077936094962944991");
    b.version(2);
    b.associate("link", 0x701a981462928f1eL).target(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0xf979bd086aL).optional(false).origin("8077936094962945822").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("come from");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCompositeWithParentScopeExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.scopes", "CompositeWithParentScopeExpression", 0xd8f591ec4d864af2L, 0x9f92a9e93c803ffaL, 0x701a9814629119bdL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:142fc2e9-fc09-4c4f-92d7-6ce0e3f66b61(jetbrains.mps.lang.scopes.structure)/8077936094962850237");
    b.version(2);
    b.aggregate("expr", 0x701a98146292ea53L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("8077936094962969171").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("composite with");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParentScope() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.scopes", "ParentScope", 0xd8f591ec4d864af2L, 0x9f92a9e93c803ffaL, 0x701a981462920832L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:142fc2e9-fc09-4c4f-92d7-6ce0e3f66b61(jetbrains.mps.lang.scopes.structure)/8077936094962911282");
    b.version(2);
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("parent scope");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUniformScopeProvider() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.lang.scopes", "UniformScopeProvider", 0xd8f591ec4d864af2L, 0x9f92a9e93c803ffaL, 0x299275268ba48780L);
    b.interface_();
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x33d23ee961a0cbf3L);
    b.origin("r:142fc2e9-fc09-4c4f-92d7-6ce0e3f66b61(jetbrains.mps.lang.scopes.structure)/2995585510566823808");
    b.version(2);
    return b.create();
  }
}
