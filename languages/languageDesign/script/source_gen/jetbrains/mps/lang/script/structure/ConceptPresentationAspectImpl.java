package jetbrains.mps.lang.script.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractClassifierSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractMethodSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommentMigrationScriptPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DirectClassifierSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DirectMethodSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExtractInterfaceMigration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FQNameClassifierSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FQNameMethodSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FactoryMigrationScriptPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigrationScript = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0xeddeefac2d64437L, 0xbc2cde50fd4ce470L, 0x11225e9072dL, 0x11225f2354aL, "title"), MetaAdapterFactory.getProperty(0xeddeefac2d64437L, 0xbc2cde50fd4ce470L, 0x11225e9072dL, 0x118d28c5944L, "migrationFromBuild"), MetaAdapterFactory.getProperty(0xeddeefac2d64437L, 0xbc2cde50fd4ce470L, 0x11225e9072dL, 0x118d28cf5b3L, "category"), MetaAdapterFactory.getProperty(0xeddeefac2d64437L, 0xbc2cde50fd4ce470L, 0x11225e9072dL, 0x498b4f71ee081153L, "type"), MetaAdapterFactory.getProperty(0xeddeefac2d64437L, 0xbc2cde50fd4ce470L, 0x11225e9072dL, 0x498b4f71ee081155L, "toBuild")).icon(IconContainer.RESOURCE_a0a0j).create();
  private final ConceptPresentation props_MigrationScriptPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigrationScriptPart_Instance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigrationScriptPart_Instance_Predicate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigrationScriptPart_Instance_Updater = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigrationScriptPart_node = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PullUpMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WhitespaceMigrationScriptPart = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("0eddeefa-c2d6-4437-bc2c-de50fd4ce470"), "jetbrains.mps.lang.script")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractClassifierSpecification;
      case 1:
        return props_AbstractMethodSpecification;
      case 2:
        return props_CommentMigrationScriptPart;
      case 3:
        return props_DirectClassifierSpecification;
      case 4:
        return props_DirectMethodSpecification;
      case 5:
        return props_ExtractInterfaceMigration;
      case 6:
        return props_FQNameClassifierSpecification;
      case 7:
        return props_FQNameMethodSpecification;
      case 8:
        return props_FactoryMigrationScriptPart;
      case 9:
        return props_MigrationScript;
      case 10:
        return props_MigrationScriptPart;
      case 11:
        return props_MigrationScriptPart_Instance;
      case 12:
        return props_MigrationScriptPart_Instance_Predicate;
      case 13:
        return props_MigrationScriptPart_Instance_Updater;
      case 14:
        return props_MigrationScriptPart_node;
      case 15:
        return props_PullUpMethod;
      case 16:
        return props_WhitespaceMigrationScriptPart;
    }
    throw new IllegalStateException();
  }
}
