package jetbrains.mps.lang.behavior.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ConceptBehavior = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0a).create();
  private final ConceptPresentation props_ConceptConstructorDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptMethodDeclaration = new ConceptPresentationBuilder(0xaf65afd8f0dd4942L, 0x87d963a55f2a9db1L, 0x11d4348057eL).deprecateProperty(0x11d43480581L, "isPrivate").create();
  private final ConceptPresentation props_LocalBehaviorMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SuperConceptExpression = new ConceptPresentationBuilder().shortDesc("super concept").create();
  private final ConceptPresentation props_SuperExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SuperNodeExpression = new ConceptPresentationBuilder().shortDesc("super node").create();
  private final ConceptPresentation props_ThisConceptExpression = new ConceptPresentationBuilder().shortDesc("this concept").create();
  private final ConceptPresentation props_ThisNodeExpression = new ConceptPresentationBuilder().shortDesc("this node").create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ConceptBehavior:
        return props_ConceptBehavior;
      case LanguageConceptSwitch.ConceptConstructorDeclaration:
        return props_ConceptConstructorDeclaration;
      case LanguageConceptSwitch.ConceptMethodDeclaration:
        return props_ConceptMethodDeclaration;
      case LanguageConceptSwitch.LocalBehaviorMethodCall:
        return props_LocalBehaviorMethodCall;
      case LanguageConceptSwitch.SuperConceptExpression:
        return props_SuperConceptExpression;
      case LanguageConceptSwitch.SuperExpression:
        return props_SuperExpression;
      case LanguageConceptSwitch.SuperNodeExpression:
        return props_SuperNodeExpression;
      case LanguageConceptSwitch.ThisConceptExpression:
        return props_ThisConceptExpression;
      case LanguageConceptSwitch.ThisNodeExpression:
        return props_ThisNodeExpression;
    }
    return null;
  }
}
