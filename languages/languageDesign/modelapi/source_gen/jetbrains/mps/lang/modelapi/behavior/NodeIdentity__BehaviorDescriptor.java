package jetbrains.mps.lang.modelapi.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SRepository;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class NodeIdentity__BehaviorDescriptor extends BaseBHDescriptor {
  private static final Logger LOG = LogManager.getLogger(NodeIdentity__BehaviorDescriptor.class);
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getInterfaceConcept(0x446c26eb2b7b4bf0L, 0x9b35f83fa582753eL, 0x502fe7548a208f7L, "jetbrains.mps.lang.modelapi.structure.NodeIdentity");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<SNodeReference> toNodeReference_id4nxIQVLmsc4 = new SMethodBuilder<SNodeReference>(new SJavaCompoundTypeImpl(SNodeReference.class)).name("toNodeReference").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4nxIQVLmsc4").registry(REGISTRY).build();
  public static final SMethod<SNode> toNode_id46J8CTY3sAt = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl(SNode.class)).name("toNode").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("46J8CTY3sAt").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(SRepository.class, ""));
  public static final SMethod<SNode> toNodeSafe_id3bhfBP4572W = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl(SNode.class)).name("toNodeSafe").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3bhfBP4572W").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(SRepository.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(toNodeReference_id4nxIQVLmsc4, toNode_id46J8CTY3sAt, toNodeSafe_id3bhfBP4572W);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNodeReference toNodeReference_id4nxIQVLmsc4(@NotNull SNode __thisNode__) {
    return null;
  }
  /*package*/ static SNode toNode_id46J8CTY3sAt(@NotNull SNode __thisNode__, SRepository repo) {
    SNodeReference nr = NodeIdentity__BehaviorDescriptor.toNodeReference_id4nxIQVLmsc4.invoke(__thisNode__);
    if (nr == null) {
      return null;
    }

    return nr.resolve(repo);
  }
  /*package*/ static SNode toNodeSafe_id3bhfBP4572W(@NotNull SNode __thisNode__, SRepository repo) {
    SNode target = null;
    try {
      target = NodeIdentity__BehaviorDescriptor.toNode_id46J8CTY3sAt.invoke(__thisNode__, repo);
    } catch (Exception e) {
      if (LOG.isDebugEnabled()) {
        LOG.debug("Exception on resolving NodeIdentity instance: " + __thisNode__);
      }
    }
    return target;
  }

  /*package*/ NodeIdentity__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNodeReference) toNodeReference_id4nxIQVLmsc4(node));
      case 1:
        return (T) ((SNode) toNode_id46J8CTY3sAt(node, (SRepository) parameters[0]));
      case 2:
        return (T) ((SNode) toNodeSafe_id3bhfBP4572W(node, (SRepository) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
