package jetbrains.mps.lang.modelapi.constraints;

/*Generated by MPS */

import jetbrains.mps.scope.Scope;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.scope.ListScope;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class NamedNodeReferencesScope {

  private NamedNodeReferencesScope() {
  }

  public static Scope createRootsScope(SModel model) {
    return ListScope.forNamedElements(findCandidates(SModelOperations.rootsIncludingImported(model, null)));
  }

  public static Scope createDescendantsScope(SNode node) {
    return ListScope.forNamedElements(findCandidates(SNodeOperations.getChildren(node)));
  }

  public static List<SNode> findCandidates(List<SNode> initialNodes) {
    Iterable<SNode> queue = initialNodes;
    List<SNode> candidates = ListSequence.fromList(new ArrayList<SNode>());

    while (Sequence.fromIterable(queue).isNotEmpty()) {
      List<SNode> newQueue = ListSequence.fromList(new ArrayList<SNode>());
      for (SNode elem : Sequence.fromIterable(queue)) {
        if (SNodeOperations.isInstanceOf(elem, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept"))) {
          ListSequence.fromList(candidates).addElement(SNodeOperations.cast(elem, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept")));
        } else {
          ListSequence.fromList(newQueue).addSequence(ListSequence.fromList(SNodeOperations.getChildren(elem)));
        }
      }
      queue = newQueue;
    }

    return candidates;
  }
}
