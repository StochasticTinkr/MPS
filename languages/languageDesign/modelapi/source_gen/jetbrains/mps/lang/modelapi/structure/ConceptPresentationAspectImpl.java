package jetbrains.mps.lang.modelapi.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ConceptIdentity;
  private ConceptPresentation props_ModelIdentity;
  private ConceptPresentation props_ModelName;
  private ConceptPresentation props_ModelPointer;
  private ConceptPresentation props_ModuleIdentity;
  private ConceptPresentation props_ModulePointer;
  private ConceptPresentation props_NamedNodeReference;
  private ConceptPresentation props_NodeIdentity;
  private ConceptPresentation props_NodePointer;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ConceptIdentity:
        if (props_ConceptIdentity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ConceptIdentity = cpb.create();
        }
        return props_ConceptIdentity;
      case LanguageConceptSwitch.ModelIdentity:
        if (props_ModelIdentity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ModelIdentity = cpb.create();
        }
        return props_ModelIdentity;
      case LanguageConceptSwitch.ModelName:
        if (props_ModelName == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ModelName");
          props_ModelName = cpb.create();
        }
        return props_ModelName;
      case LanguageConceptSwitch.ModelPointer:
        if (props_ModelPointer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("node<> presentation for openapi.model.SModelReference class");
          cpb.rawPresentation("ModelPointer");
          props_ModelPointer = cpb.create();
        }
        return props_ModelPointer;
      case LanguageConceptSwitch.ModuleIdentity:
        if (props_ModuleIdentity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ModuleIdentity = cpb.create();
        }
        return props_ModuleIdentity;
      case LanguageConceptSwitch.ModulePointer:
        if (props_ModulePointer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("node<> presentation for openapi.module.SModuleReference");
          cpb.rawPresentation("ModulePointer");
          props_ModulePointer = cpb.create();
        }
        return props_ModulePointer;
      case LanguageConceptSwitch.NamedNodeReference:
        if (props_NamedNodeReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("reference to named node");
          props_NamedNodeReference = cpb.create();
        }
        return props_NamedNodeReference;
      case LanguageConceptSwitch.NodeIdentity:
        if (props_NodeIdentity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_NodeIdentity = cpb.create();
        }
        return props_NodeIdentity;
      case LanguageConceptSwitch.NodePointer:
        if (props_NodePointer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("node<> presentation for openapi.model.SNodeReference");
          cpb.rawPresentation("NodePointer");
          props_NodePointer = cpb.create();
        }
        return props_NodePointer;
    }
    return null;
  }
}
