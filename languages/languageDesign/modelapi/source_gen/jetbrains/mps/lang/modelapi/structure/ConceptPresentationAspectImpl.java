package jetbrains.mps.lang.modelapi.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_ConceptIdentity;
  private ConceptPresentation props_ModelIdentity;
  private ConceptPresentation props_NodeIdentity;
  private ConceptPresentation props_SModelReference;
  private ConceptPresentation props_SModuleReference;
  private ConceptPresentation props_SNodeReference;
  private ConceptPresentation props_TrivialModelId;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ConceptIdentity:
        if (props_ConceptIdentity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ConceptIdentity = cpb.create();
        }
        return props_ConceptIdentity;
      case LanguageConceptSwitch.ModelIdentity:
        if (props_ModelIdentity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ModelIdentity = cpb.create();
        }
        return props_ModelIdentity;
      case LanguageConceptSwitch.NodeIdentity:
        if (props_NodeIdentity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_NodeIdentity = cpb.create();
        }
        return props_NodeIdentity;
      case LanguageConceptSwitch.SModelReference:
        if (props_SModelReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("node<> presentation for openapi.model.SModelReference class");
          cpb.rawPresentation("SModelReference");
          props_SModelReference = cpb.create();
        }
        return props_SModelReference;
      case LanguageConceptSwitch.SModuleReference:
        if (props_SModuleReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("node<> presentation for openapi.module.SModuleReference");
          cpb.rawPresentation("SModuleReference");
          props_SModuleReference = cpb.create();
        }
        return props_SModuleReference;
      case LanguageConceptSwitch.SNodeReference:
        if (props_SNodeReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("node<> presentation for openapi.model.SNodeReference");
          cpb.rawPresentation("SNodeReference");
          props_SNodeReference = cpb.create();
        }
        return props_SNodeReference;
      case LanguageConceptSwitch.TrivialModelId:
        if (props_TrivialModelId == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("TrivialModelId");
          props_TrivialModelId = cpb.create();
        }
        return props_TrivialModelId;
    }
    return null;
  }
}
