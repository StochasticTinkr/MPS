package jetbrains.mps.lang.modelapi.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNodeReference;
import org.jetbrains.mps.openapi.module.SRepository;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.ArrayList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class NamedNodeReference__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x446c26eb2b7b4bf0L, 0x9b35f83fa582753eL, 0x41af228e7e0d7f3eL, "jetbrains.mps.lang.modelapi.structure.NamedNodeReference");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  /*package*/ static final SMethod<SNode> findTarget_id4nxIQVLmGTU = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("findTarget").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("4nxIQVLmGTU").registry(REGISTRY).build();
  public static final SMethod<Iterable<SNode>> getChildCandidates_id6iN_brIgiQS = new SMethodBuilder<Iterable<SNode>>(new SJavaCompoundTypeImpl((Class<Iterable<SNode>>) ((Class) Object.class))).name("getChildCandidates").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("6iN_brIgiQS").registry(REGISTRY).build();
  public static final SMethod<SNodeReference> toNodeReference_id4nxIQVLmsc4 = new SMethodBuilder<SNodeReference>(new SJavaCompoundTypeImpl(SNodeReference.class)).name("toNodeReference").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("4nxIQVLmsc4").registry(REGISTRY).build();
  public static final SMethod<SNode> toNode_id46J8CTY3sAt = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl(SNode.class)).name("toNode").modifiers(SModifiersImpl.create(8, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("46J8CTY3sAt").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(SRepository.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(findTarget_id4nxIQVLmGTU, getChildCandidates_id6iN_brIgiQS, toNodeReference_id4nxIQVLmsc4, toNode_id46J8CTY3sAt);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static SNode findTarget_id4nxIQVLmGTU(@NotNull SNode __thisNode__) {
    SNode node = __thisNode__;
    while ((SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x446c26eb2b7b4bf0L, 0x9b35f83fa582753eL, 0x41af228e7e0d7f3eL, 0x64b394b6ee402fbcL, "child")) != null)) {
      node = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x446c26eb2b7b4bf0L, 0x9b35f83fa582753eL, 0x41af228e7e0d7f3eL, 0x64b394b6ee402fbcL, "child"));
    }
    return SLinkOperations.getTarget(node, MetaAdapterFactory.getReferenceLink(0x446c26eb2b7b4bf0L, 0x9b35f83fa582753eL, 0x41af228e7e0d7f3eL, 0x64b394b6ee402faaL, "target"));
  }
  /*package*/ static Iterable<SNode> getChildCandidates_id6iN_brIgiQS(@NotNull SNode __thisNode__) {
    List<SNode> candidates = ListSequence.fromList(new ArrayList<SNode>());
    Iterable<SNode> queue = SNodeOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getReferenceLink(0x446c26eb2b7b4bf0L, 0x9b35f83fa582753eL, 0x41af228e7e0d7f3eL, 0x64b394b6ee402faaL, "target")));

    while (Sequence.fromIterable(queue).isNotEmpty()) {
      List<SNode> newQueue = ListSequence.fromList(new ArrayList<SNode>());
      for (SNode elem : Sequence.fromIterable(queue)) {
        if (SNodeOperations.isInstanceOf(elem, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept"))) {
          ListSequence.fromList(candidates).addElement(SNodeOperations.cast(elem, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept")));
        } else {
          ListSequence.fromList(newQueue).addSequence(ListSequence.fromList(SNodeOperations.getChildren(elem)));
        }
      }
      queue = newQueue;
    }

    return candidates;
  }
  /*package*/ static SNodeReference toNodeReference_id4nxIQVLmsc4(@NotNull SNode __thisNode__) {
    return SNodeOperations.getPointer(NamedNodeReference__BehaviorDescriptor.findTarget_id4nxIQVLmGTU.invoke(__thisNode__));
  }
  /*package*/ static SNode toNode_id46J8CTY3sAt(@NotNull SNode __thisNode__, SRepository repo) {
    return ((SNode) NamedNodeReference__BehaviorDescriptor.findTarget_id4nxIQVLmGTU.invoke(__thisNode__));
  }

  /*package*/ NamedNodeReference__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((SNode) findTarget_id4nxIQVLmGTU(node));
      case 1:
        return (T) ((Iterable<SNode>) getChildCandidates_id6iN_brIgiQS(node));
      case 2:
        return (T) ((SNodeReference) toNodeReference_id4nxIQVLmsc4(node));
      case 3:
        return (T) ((SNode) toNode_id46J8CTY3sAt(node, (SRepository) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
