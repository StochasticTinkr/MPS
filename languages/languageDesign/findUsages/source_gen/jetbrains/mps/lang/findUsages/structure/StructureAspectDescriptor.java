package jetbrains.mps.lang.findUsages.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import javax.swing.Icon;
import jetbrains.mps.util.IconUtil;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private static final Icon CONCEPT_ICON_FinderDeclaration_ = IconUtil.getIcon("usagesFinder.png");

  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(16);
  /*package*/ final ConceptDescriptor myConceptAbstractFinderDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.AbstractFinderDeclaration", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x11bd0c17f12L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x11bd0c2f241L, "forConcept", MetaIdFactory.conceptId(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x1103553c5ffL), false)).references("forConcept").childDescriptors(new ConceptDescriptorBuilder.Link(0x11bd0c21634L, "isApplicableFunction", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116b5695a94L), true, false, false), new ConceptDescriptorBuilder.Link(0x11bd0c21635L, "findFunction", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116b5695a88L), false, false, false), new ConceptDescriptorBuilder.Link(0x11bd0c21636L, "searchedNodesBlock", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x118e6b5cc19L), true, false, false), new ConceptDescriptorBuilder.Link(0x11bd0c21637L, "categorizeBlock", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x118e6b14c36L), true, false, false)).children(new String[]{"isApplicableFunction", "findFunction", "searchedNodesBlock", "categorizeBlock"}, new boolean[]{false, false, false, false}).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "1218978086674")).create();
  /*package*/ final ConceptDescriptor myConceptCategorizeBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.CategorizeBlock", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x118e6b14c36L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).alias("getCategory", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "1206461221942")).create();
  /*package*/ final ConceptDescriptor myConceptCheckCancelledStatusStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.CheckCancelledStatusStatement", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1190f427b83L)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).alias("check cancelled status", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "1207141825411")).create();
  /*package*/ final ConceptDescriptor myConceptConceptFunctionParameter_node = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.ConceptFunctionParameter_node", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116c9c51f82L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunctionParameter", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101c66e2c0bL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("node", "function parameter").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "1197386047362")).create();
  /*package*/ final ConceptDescriptor myConceptExecuteFinderExpression = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.ExecuteFinderExpression", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x118d6fce801L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x118d6fce808L, "finder", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116b5695a8dL), false)).references("finder").childDescriptors(new ConceptDescriptorBuilder.Link(0x118d6fce804L, "queryNode", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false), new ConceptDescriptorBuilder.Link(0x118d6fce805L, "queryScope", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false), new ConceptDescriptorBuilder.Link(0x75272a849af7fedfL, "monitor", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false)).children(new String[]{"queryNode", "queryScope", "monitor"}, new boolean[]{false, false, false}).alias("execute", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "1206197741569")).create();
  /*package*/ final ConceptDescriptor myConceptExecuteFindersGetSearchResults = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.ExecuteFindersGetSearchResults", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1bd5a514384e1959L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x585a05e7f411353eL, "queryNode", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false), new ConceptDescriptorBuilder.Link(0x585a05e7f411353fL, "scope", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false), new ConceptDescriptorBuilder.Link(0x585a05e7f4113540L, "progress", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false), new ConceptDescriptorBuilder.Link(0x711c6afd1909d279L, "finder", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1bd5a514384e195fL), false, true, false)).children(new String[]{"queryNode", "scope", "progress", "finder"}, new boolean[]{false, false, false, true}).alias("execute finders", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "2005690715325995353")).create();
  /*package*/ final ConceptDescriptor myConceptFindBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.FindBlock", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116b5695a88L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).alias("find", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "1197044488840")).create();
  /*package*/ final ConceptDescriptor myConceptFinderDeclaration = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.FinderDeclaration", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116b5695a8dL)).super_("jetbrains.mps.lang.findUsages.structure.AbstractFinderDeclaration").version(1).super_(MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x11bd0c17f12L)).parents("jetbrains.mps.lang.findUsages.structure.AbstractFinderDeclaration", "jetbrains.mps.baseLanguage.structure.IValidIdentifier", "jetbrains.mps.lang.checkedName.structure.ICheckedNamePolicy", "jetbrains.mps.lang.structure.structure.IConceptAspect", "jetbrains.mps.lang.core.structure.InterfacePart").parentIds(MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x11bd0c17f12L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL), MetaIdFactory.conceptId(0xfe9d76d7580945c9L, 0xae28a40915b4d6ffL, 0x433c3c31e7218f38L), MetaIdFactory.conceptId(0xc72da2b97cce4447L, 0x8389f407dc1158b7L, 0x24614259e94f0c84L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x12509ddfaa98f128L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x116c9c44c38L, "description"), new ConceptDescriptorBuilder.Prop(0x1180ec04907L, "longDescription")).properties("description", "longDescription").childDescriptors(new ConceptDescriptorBuilder.Link(0x11b36e6cbecL, "isVisibleBlock", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x11b36e60151L), true, false, false), new ConceptDescriptorBuilder.Link(0x1660f4e8320e447L, "isUsedByDefault", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1660f4e85a04a8fL), true, false, false)).children(new String[]{"isVisibleBlock", "isUsedByDefault"}, new boolean[]{false, false}).rootable().icon(CONCEPT_ICON_FinderDeclaration_).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "1197044488845")).create();
  /*package*/ final ConceptDescriptor myConceptFinderReference = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.FinderReference", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1bd5a514384e195fL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x643a39f7c0869a50L, "finder", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116b5695a8dL), false)).references("finder").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "2005690715325995359")).create();
  /*package*/ final ConceptDescriptor myConceptIsApplicableBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.IsApplicableBlock", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116b5695a94L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).alias("isApplicable", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "1197044488852")).create();
  /*package*/ final ConceptDescriptor myConceptIsUsedByDefault = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.IsUsedByDefault", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1660f4e85a04a8fL)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).alias("isUsedByDefault", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "100784871586155151")).create();
  /*package*/ final ConceptDescriptor myConceptIsVisibleBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.IsVisibleBlock", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x11b36e60151L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).alias("isVisible", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "1216396788049")).create();
  /*package*/ final ConceptDescriptor myConceptMakeResultProvider = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.MakeResultProvider", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x585a05e7f40a28d1L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x585a05e7f40a28d2L, "finder", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1bd5a514384e195fL), false, true, false)).children(new String[]{"finder"}, new boolean[]{true}).alias("make result provider", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "6366407517031508177")).create();
  /*package*/ final ConceptDescriptor myConceptNodeStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.NodeStatement", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1177408145aL)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11774086327L, "foundNode", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"foundNode"}, new boolean[]{false}).alias("add node", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "1200242562138")).create();
  /*package*/ final ConceptDescriptor myConceptResultStatement = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.ResultStatement", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1177404a3f4L)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x117740540a3L, "foundNode", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"foundNode"}, new boolean[]{false}).alias("add result", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "1200242336756")).create();
  /*package*/ final ConceptDescriptor myConceptSearchedNodesBlock = new ConceptDescriptorBuilder("jetbrains.mps.lang.findUsages.structure.SearchedNodesBlock", MetaIdFactory.conceptId(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x118e6b5cc19L)).super_("jetbrains.mps.baseLanguage.structure.ConceptFunction").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).parents("jetbrains.mps.baseLanguage.structure.ConceptFunction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x108bbca0f48L)).alias("getSearchedNodes", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959035b(jetbrains.mps.lang.findUsages.structure)", "1206461516825")).create();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptAbstractFinderDeclaration.getId(), 0);
    myIndexMap.put(myConceptCategorizeBlock.getId(), 1);
    myIndexMap.put(myConceptCheckCancelledStatusStatement.getId(), 2);
    myIndexMap.put(myConceptConceptFunctionParameter_node.getId(), 3);
    myIndexMap.put(myConceptExecuteFinderExpression.getId(), 4);
    myIndexMap.put(myConceptExecuteFindersGetSearchResults.getId(), 5);
    myIndexMap.put(myConceptFindBlock.getId(), 6);
    myIndexMap.put(myConceptFinderDeclaration.getId(), 7);
    myIndexMap.put(myConceptFinderReference.getId(), 8);
    myIndexMap.put(myConceptIsApplicableBlock.getId(), 9);
    myIndexMap.put(myConceptIsUsedByDefault.getId(), 10);
    myIndexMap.put(myConceptIsVisibleBlock.getId(), 11);
    myIndexMap.put(myConceptMakeResultProvider.getId(), 12);
    myIndexMap.put(myConceptNodeStatement.getId(), 13);
    myIndexMap.put(myConceptResultStatement.getId(), 14);
    myIndexMap.put(myConceptSearchedNodesBlock.getId(), 15);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbstractFinderDeclaration, myConceptCategorizeBlock, myConceptCheckCancelledStatusStatement, myConceptConceptFunctionParameter_node, myConceptExecuteFinderExpression, myConceptExecuteFindersGetSearchResults, myConceptFindBlock, myConceptFinderDeclaration, myConceptFinderReference, myConceptIsApplicableBlock, myConceptIsUsedByDefault, myConceptIsVisibleBlock, myConceptMakeResultProvider, myConceptNodeStatement, myConceptResultStatement, myConceptSearchedNodesBlock);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptAbstractFinderDeclaration;
      case 1:
        return myConceptCategorizeBlock;
      case 2:
        return myConceptCheckCancelledStatusStatement;
      case 3:
        return myConceptConceptFunctionParameter_node;
      case 4:
        return myConceptExecuteFinderExpression;
      case 5:
        return myConceptExecuteFindersGetSearchResults;
      case 6:
        return myConceptFindBlock;
      case 7:
        return myConceptFinderDeclaration;
      case 8:
        return myConceptFinderReference;
      case 9:
        return myConceptIsApplicableBlock;
      case 10:
        return myConceptIsUsedByDefault;
      case 11:
        return myConceptIsVisibleBlock;
      case 12:
        return myConceptMakeResultProvider;
      case 13:
        return myConceptNodeStatement;
      case 14:
        return myConceptResultStatement;
      case 15:
        return myConceptSearchedNodesBlock;
      default:
        throw new IllegalStateException();
    }
  }
}
