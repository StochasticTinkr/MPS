package jetbrains.mps.lang.findUsages.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myFindBlock__BehaviorDescriptor = new FindBlock__BehaviorDescriptor();
  private final BHDescriptor myFinderDeclaration__BehaviorDescriptor = new FinderDeclaration__BehaviorDescriptor();
  private final BHDescriptor myIsApplicableBlock__BehaviorDescriptor = new IsApplicableBlock__BehaviorDescriptor();
  private final BHDescriptor myResultStatement__BehaviorDescriptor = new ResultStatement__BehaviorDescriptor();
  private final BHDescriptor myNodeStatement__BehaviorDescriptor = new NodeStatement__BehaviorDescriptor();
  private final BHDescriptor myExecuteFinderExpression__BehaviorDescriptor = new ExecuteFinderExpression__BehaviorDescriptor();
  private final BHDescriptor myCategorizeBlock__BehaviorDescriptor = new CategorizeBlock__BehaviorDescriptor();
  private final BHDescriptor mySearchedNodesBlock__BehaviorDescriptor = new SearchedNodesBlock__BehaviorDescriptor();
  private final BHDescriptor myCheckCancelledStatusStatement__BehaviorDescriptor = new CheckCancelledStatusStatement__BehaviorDescriptor();
  private final BHDescriptor myIsVisibleBlock__BehaviorDescriptor = new IsVisibleBlock__BehaviorDescriptor();
  private final BHDescriptor myIsUsedByDefault__BehaviorDescriptor = new IsUsedByDefault__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0o.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          return myCategorizeBlock__BehaviorDescriptor;
        case 1:
          return myCheckCancelledStatusStatement__BehaviorDescriptor;
        case 2:
          return myExecuteFinderExpression__BehaviorDescriptor;
        case 3:
          return myFindBlock__BehaviorDescriptor;
        case 4:
          return myFinderDeclaration__BehaviorDescriptor;
        case 5:
          return myIsApplicableBlock__BehaviorDescriptor;
        case 6:
          return myIsUsedByDefault__BehaviorDescriptor;
        case 7:
          return myIsVisibleBlock__BehaviorDescriptor;
        case 8:
          return myNodeStatement__BehaviorDescriptor;
        case 9:
          return myResultStatement__BehaviorDescriptor;
        case 10:
          return mySearchedNodesBlock__BehaviorDescriptor;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0o = buildConceptIndices(MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x118e6b14c36L, "jetbrains.mps.lang.findUsages.structure.CategorizeBlock"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1190f427b83L, "jetbrains.mps.lang.findUsages.structure.CheckCancelledStatusStatement"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x118d6fce801L, "jetbrains.mps.lang.findUsages.structure.ExecuteFinderExpression"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116b5695a88L, "jetbrains.mps.lang.findUsages.structure.FindBlock"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116b5695a8dL, "jetbrains.mps.lang.findUsages.structure.FinderDeclaration"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116b5695a94L, "jetbrains.mps.lang.findUsages.structure.IsApplicableBlock"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1660f4e85a04a8fL, "jetbrains.mps.lang.findUsages.structure.IsUsedByDefault"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x11b36e60151L, "jetbrains.mps.lang.findUsages.structure.IsVisibleBlock"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1177408145aL, "jetbrains.mps.lang.findUsages.structure.NodeStatement"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1177404a3f4L, "jetbrains.mps.lang.findUsages.structure.ResultStatement"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x118e6b5cc19L, "jetbrains.mps.lang.findUsages.structure.SearchedNodesBlock"));
}
