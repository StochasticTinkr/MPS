package jetbrains.mps.lang.findUsages.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;

public class ParameterActionMap {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.INSERT, new ParameterActionMap.ParameterActionMap_INSERT(node));
    editorCell.setAction(CellActionType.INSERT_BEFORE, new ParameterActionMap.ParameterActionMap_INSERT_BEFORE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new ParameterActionMap.ParameterActionMap_BACKSPACE(node));
    editorCell.setAction(CellActionType.COMPLETE, new ParameterActionMap.ParameterActionMap_COMPLETE(node));
    editorCell.setAction(CellActionType.COMPLETE_SMART, new ParameterActionMap.ParameterActionMap_COMPLETE_SMART(node));
    editorCell.setAction(CellActionType.DELETE, new ParameterActionMap.ParameterActionMap_DELETE(node));
    editorCell.setAction(CellActionType.DELETE_TO_WORD_END, new ParameterActionMap.ParameterActionMap_DELETE_TO_WORD_END(node));
    editorCell.setAction(CellActionType.COMMENT, new ParameterActionMap.ParameterActionMap_COMMENT(node));
  }
  public static class ParameterActionMap_INSERT extends AbstractCellAction {
    /*package*/ SNode myNode;
    public ParameterActionMap_INSERT(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
    }
    @Override
    public boolean canExecute(EditorContext editorContext) {
      return this.canExecute_internal(editorContext, this.myNode);
    }
    public boolean canExecute_internal(EditorContext editorContext, SNode node) {
      return false;
    }
  }
  public static class ParameterActionMap_INSERT_BEFORE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public ParameterActionMap_INSERT_BEFORE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
    }
    @Override
    public boolean canExecute(EditorContext editorContext) {
      return this.canExecute_internal(editorContext, this.myNode);
    }
    public boolean canExecute_internal(EditorContext editorContext, SNode node) {
      return false;
    }
  }
  public static class ParameterActionMap_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public ParameterActionMap_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
    }
    @Override
    public boolean canExecute(EditorContext editorContext) {
      return this.canExecute_internal(editorContext, this.myNode);
    }
    public boolean canExecute_internal(EditorContext editorContext, SNode node) {
      return false;
    }
  }
  public static class ParameterActionMap_COMPLETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public ParameterActionMap_COMPLETE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
    }
    @Override
    public boolean canExecute(EditorContext editorContext) {
      return this.canExecute_internal(editorContext, this.myNode);
    }
    public boolean canExecute_internal(EditorContext editorContext, SNode node) {
      return false;
    }
  }
  public static class ParameterActionMap_COMPLETE_SMART extends AbstractCellAction {
    /*package*/ SNode myNode;
    public ParameterActionMap_COMPLETE_SMART(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
    }
    @Override
    public boolean canExecute(EditorContext editorContext) {
      return this.canExecute_internal(editorContext, this.myNode);
    }
    public boolean canExecute_internal(EditorContext editorContext, SNode node) {
      return false;
    }
  }
  public static class ParameterActionMap_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public ParameterActionMap_DELETE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
    }
    @Override
    public boolean canExecute(EditorContext editorContext) {
      return this.canExecute_internal(editorContext, this.myNode);
    }
    public boolean canExecute_internal(EditorContext editorContext, SNode node) {
      return false;
    }
  }
  public static class ParameterActionMap_DELETE_TO_WORD_END extends AbstractCellAction {
    /*package*/ SNode myNode;
    public ParameterActionMap_DELETE_TO_WORD_END(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
    }
    @Override
    public boolean canExecute(EditorContext editorContext) {
      return this.canExecute_internal(editorContext, this.myNode);
    }
    public boolean canExecute_internal(EditorContext editorContext, SNode node) {
      return false;
    }
  }
  public static class ParameterActionMap_COMMENT extends AbstractCellAction {
    /*package*/ SNode myNode;
    public ParameterActionMap_COMMENT(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
    }
    @Override
    public boolean canExecute(EditorContext editorContext) {
      return this.canExecute_internal(editorContext, this.myNode);
    }
    public boolean canExecute_internal(EditorContext editorContext, SNode node) {
      return false;
    }
  }
}
