package jetbrains.mps.lang.findUsages.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractFinderDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CategorizeBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CheckCancelledStatusStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_node = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteFinderExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteFindersGetSearchResults = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FindBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FinderDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0h).create();
  private final ConceptPresentation props_FinderReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsApplicableBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsUsedByDefault = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsVisibleBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MakeResultProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResultStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SearchedNodesBlock = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_lpa09p_a0r.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractFinderDeclaration;
          }
          break;
        case 1:
          if (true) {
            return props_CategorizeBlock;
          }
          break;
        case 2:
          if (true) {
            return props_CheckCancelledStatusStatement;
          }
          break;
        case 3:
          if (true) {
            return props_ConceptFunctionParameter_node;
          }
          break;
        case 4:
          if (true) {
            return props_ExecuteFinderExpression;
          }
          break;
        case 5:
          if (true) {
            return props_ExecuteFindersGetSearchResults;
          }
          break;
        case 6:
          if (true) {
            return props_FindBlock;
          }
          break;
        case 7:
          if (true) {
            return props_FinderDeclaration;
          }
          break;
        case 8:
          if (true) {
            return props_FinderReference;
          }
          break;
        case 9:
          if (true) {
            return props_IsApplicableBlock;
          }
          break;
        case 10:
          if (true) {
            return props_IsUsedByDefault;
          }
          break;
        case 11:
          if (true) {
            return props_IsVisibleBlock;
          }
          break;
        case 12:
          if (true) {
            return props_MakeResultProvider;
          }
          break;
        case 13:
          if (true) {
            return props_NodeStatement;
          }
          break;
        case 14:
          if (true) {
            return props_ResultStatement;
          }
          break;
        case 15:
          if (true) {
            return props_SearchedNodesBlock;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_lpa09p_a0r = buildConceptIndices(MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x11bd0c17f12L, "jetbrains.mps.lang.findUsages.structure.AbstractFinderDeclaration"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x118e6b14c36L, "jetbrains.mps.lang.findUsages.structure.CategorizeBlock"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1190f427b83L, "jetbrains.mps.lang.findUsages.structure.CheckCancelledStatusStatement"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116c9c51f82L, "jetbrains.mps.lang.findUsages.structure.ConceptFunctionParameter_node"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x118d6fce801L, "jetbrains.mps.lang.findUsages.structure.ExecuteFinderExpression"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1bd5a514384e1959L, "jetbrains.mps.lang.findUsages.structure.ExecuteFindersGetSearchResults"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116b5695a88L, "jetbrains.mps.lang.findUsages.structure.FindBlock"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116b5695a8dL, "jetbrains.mps.lang.findUsages.structure.FinderDeclaration"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1bd5a514384e195fL, "jetbrains.mps.lang.findUsages.structure.FinderReference"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x116b5695a94L, "jetbrains.mps.lang.findUsages.structure.IsApplicableBlock"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1660f4e85a04a8fL, "jetbrains.mps.lang.findUsages.structure.IsUsedByDefault"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x11b36e60151L, "jetbrains.mps.lang.findUsages.structure.IsVisibleBlock"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x585a05e7f40a28d1L, "jetbrains.mps.lang.findUsages.structure.MakeResultProvider"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1177408145aL, "jetbrains.mps.lang.findUsages.structure.NodeStatement"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x1177404a3f4L, "jetbrains.mps.lang.findUsages.structure.ResultStatement"), MetaAdapterFactory.getConcept(0x64d34fcdad024e73L, 0xaff8a581124c2e30L, 0x118e6b5cc19L, "jetbrains.mps.lang.findUsages.structure.SearchedNodesBlock"));
}
