package jetbrains.mps.lang.findUsages.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractFinderDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CategorizeBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CheckCancelledStatusStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_node = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteFinderExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteFindersGetSearchResults = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FindBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FinderDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0h).create();
  private final ConceptPresentation props_FinderReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsApplicableBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsUsedByDefault = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsVisibleBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MakeResultProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResultStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SearchedNodesBlock = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("64d34fcd-ad02-4e73-aff8-a581124c2e30"), "jetbrains.mps.lang.findUsages")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractFinderDeclaration;
      case 1:
        return props_CategorizeBlock;
      case 2:
        return props_CheckCancelledStatusStatement;
      case 3:
        return props_ConceptFunctionParameter_node;
      case 4:
        return props_ExecuteFinderExpression;
      case 5:
        return props_ExecuteFindersGetSearchResults;
      case 6:
        return props_FindBlock;
      case 7:
        return props_FinderDeclaration;
      case 8:
        return props_FinderReference;
      case 9:
        return props_IsApplicableBlock;
      case 10:
        return props_IsUsedByDefault;
      case 11:
        return props_IsVisibleBlock;
      case 12:
        return props_MakeResultProvider;
      case 13:
        return props_NodeStatement;
      case 14:
        return props_ResultStatement;
      case 15:
        return props_SearchedNodesBlock;
    }
    throw new IllegalStateException();
  }
}
