package jetbrains.mps.lang.findUsages.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractFinderDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CategorizeBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CheckCancelledStatusStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_node = new ConceptPresentationBuilder().shortDesc("function parameter").create();
  private final ConceptPresentation props_ExecuteFinderExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteFindersGetSearchResults = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FindBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FinderDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0h).create();
  private final ConceptPresentation props_FinderReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FinderReferenceExpression = new ConceptPresentationBuilder().shortDesc("Access to an instance of linked FinderDeclaration").create();
  private final ConceptPresentation props_IsApplicableBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsUsedByDefault = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsVisibleBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MakeResultProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResultStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SearchedNodesBlock = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractFinderDeclaration:
        return props_AbstractFinderDeclaration;
      case LanguageConceptSwitch.CategorizeBlock:
        return props_CategorizeBlock;
      case LanguageConceptSwitch.CheckCancelledStatusStatement:
        return props_CheckCancelledStatusStatement;
      case LanguageConceptSwitch.ConceptFunctionParameter_node:
        return props_ConceptFunctionParameter_node;
      case LanguageConceptSwitch.ExecuteFinderExpression:
        return props_ExecuteFinderExpression;
      case LanguageConceptSwitch.ExecuteFindersGetSearchResults:
        return props_ExecuteFindersGetSearchResults;
      case LanguageConceptSwitch.FindBlock:
        return props_FindBlock;
      case LanguageConceptSwitch.FinderDeclaration:
        return props_FinderDeclaration;
      case LanguageConceptSwitch.FinderReference:
        return props_FinderReference;
      case LanguageConceptSwitch.FinderReferenceExpression:
        return props_FinderReferenceExpression;
      case LanguageConceptSwitch.IsApplicableBlock:
        return props_IsApplicableBlock;
      case LanguageConceptSwitch.IsUsedByDefault:
        return props_IsUsedByDefault;
      case LanguageConceptSwitch.IsVisibleBlock:
        return props_IsVisibleBlock;
      case LanguageConceptSwitch.MakeResultProvider:
        return props_MakeResultProvider;
      case LanguageConceptSwitch.NodeStatement:
        return props_NodeStatement;
      case LanguageConceptSwitch.ResultStatement:
        return props_ResultStatement;
      case LanguageConceptSwitch.SearchedNodesBlock:
        return props_SearchedNodesBlock;
    }
    return null;
  }
}
