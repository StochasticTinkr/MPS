package jetbrains.mps.transformation.test.outputLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(7);
  /*package*/ final ConceptDescriptor myConceptCustomRoot = createDescriptorForCustomRoot();
  /*package*/ final ConceptDescriptor myConceptCustomStatement = createDescriptorForCustomStatement();
  /*package*/ final ConceptDescriptor myConceptCustomStatementRef = createDescriptorForCustomStatementRef();
  /*package*/ final ConceptDescriptor myConceptOutputNode = createDescriptorForOutputNode();
  /*package*/ final ConceptDescriptor myConceptOutputNode_forDontApplyReductionTwice_test = createDescriptorForOutputNode_forDontApplyReductionTwice_test();
  /*package*/ final ConceptDescriptor myConceptOutputRoot = createDescriptorForOutputRoot();
  /*package*/ final ConceptDescriptor myConceptTwoVarStatement = createDescriptorForTwoVarStatement();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptCustomRoot.getId(), 0);
    myIndexMap.put(myConceptCustomStatement.getId(), 1);
    myIndexMap.put(myConceptCustomStatementRef.getId(), 2);
    myIndexMap.put(myConceptOutputNode.getId(), 3);
    myIndexMap.put(myConceptOutputNode_forDontApplyReductionTwice_test.getId(), 4);
    myIndexMap.put(myConceptOutputRoot.getId(), 5);
    myIndexMap.put(myConceptTwoVarStatement.getId(), 6);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptCustomRoot, myConceptCustomStatement, myConceptCustomStatementRef, myConceptOutputNode, myConceptOutputNode_forDontApplyReductionTwice_test, myConceptOutputRoot, myConceptTwoVarStatement);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptCustomRoot;
      case 1:
        return myConceptCustomStatement;
      case 2:
        return myConceptCustomStatementRef;
      case 3:
        return myConceptOutputNode;
      case 4:
        return myConceptOutputNode_forDontApplyReductionTwice_test;
      case 5:
        return myConceptOutputRoot;
      case 6:
        return myConceptTwoVarStatement;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForCustomRoot() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.transformation.test.outputLang", "CustomRoot", 0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x398b8e251df78584L);
    b.class_(false, false, true);
    b.origin("r:00000000-0000-4000-0000-011c89590605(jetbrains.mps.transformation.test.outputLang.structure)/4146564171992368516");
    b.aggregate("statement", 0x398b8e251df78585L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfc092b6b77L).optional(false).ordered(true).multiple(false).origin("4146564171992368517").done();
    b.alias("custom root");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCustomStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.transformation.test.outputLang", "CustomStatement", 0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x2535e9813339efcaL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Statement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:00000000-0000-4000-0000-011c89590605(jetbrains.mps.transformation.test.outputLang.structure)/2681305894288486346");
    b.aggregate("inner", 0x2535e9813339efcdL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("2681305894288486349").done();
    b.alias("work: ");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCustomStatementRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.transformation.test.outputLang", "CustomStatementRef", 0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x1e076e8c8ce9211aL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:00000000-0000-4000-0000-011c89590605(jetbrains.mps.transformation.test.outputLang.structure)/2163819695913378074");
    b.prop("ii", 0x1e076e8c8ce92802L, "2163819695913379842");
    b.associate("myStatement", 0x1e076e8c8ce92801L).target(0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x2535e9813339efcaL).optional(false).origin("2163819695913379841").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOutputNode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.transformation.test.outputLang", "OutputNode", 0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x1164564a526L);
    b.class_(false, false, false);
    b.origin("r:00000000-0000-4000-0000-011c89590605(jetbrains.mps.transformation.test.outputLang.structure)/1195165132070");
    b.prop("text", 0x11645b5a797L, "1195170441111");
    b.aggregate("outputChild", 0x117f047d47fL).target(0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x1164564a526L).optional(true).ordered(true).multiple(true).origin("1202327114879").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOutputNode_forDontApplyReductionTwice_test() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.transformation.test.outputLang", "OutputNode_forDontApplyReductionTwice_test", 0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x119a204b891L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.transformation.test.outputLang.structure.OutputNode", 0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x1164564a526L);
    b.origin("r:00000000-0000-4000-0000-011c89590605(jetbrains.mps.transformation.test.outputLang.structure)/1209604028561");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOutputRoot() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.transformation.test.outputLang", "OutputRoot", 0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x116455d922fL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:00000000-0000-4000-0000-011c89590605(jetbrains.mps.transformation.test.outputLang.structure)/1195164668463");
    b.prop("text", 0x116455e8bf1L, "1195164732401");
    b.aggregate("outputChild", 0x11645a94e4aL).target(0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x1164564a526L).optional(true).ordered(true).multiple(true).origin("1195169631818").done();
    b.aggregate("specialChild", 0x11bc24e708cL).target(0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x1164564a526L).optional(true).ordered(true).multiple(false).origin("1218735665292").done();
    b.alias("output root concept");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTwoVarStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.transformation.test.outputLang", "TwoVarStatement", 0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x5369bd6a5b4e4e08L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Statement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L);
    b.origin("r:00000000-0000-4000-0000-011c89590605(jetbrains.mps.transformation.test.outputLang.structure)/6010543442198679048");
    b.prop("name1", 0x5369bd6a5b4e4e0bL, "6010543442198679051");
    b.prop("name2", 0x5369bd6a5b4e4e0cL, "6010543442198679052");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    return b.create();
  }
}
