package jetbrains.mps.transformation.test.outputLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_CustomRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomStatementRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputNode_forDontApplyReductionTwice_test = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TwoVarStatement = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0i.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_CustomRoot;
          }
          break;
        case 1:
          if (true) {
            return props_CustomStatement;
          }
          break;
        case 2:
          if (true) {
            return props_CustomStatementRef;
          }
          break;
        case 3:
          if (true) {
            return props_OutputNode;
          }
          break;
        case 4:
          if (true) {
            return props_OutputNode_forDontApplyReductionTwice_test;
          }
          break;
        case 5:
          if (true) {
            return props_OutputRoot;
          }
          break;
        case 6:
          if (true) {
            return props_TwoVarStatement;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0i = buildConceptIndices(MetaAdapterFactory.getConcept(0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x398b8e251df78584L, "CustomRoot"), MetaAdapterFactory.getConcept(0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x2535e9813339efcaL, "CustomStatement"), MetaAdapterFactory.getConcept(0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x1e076e8c8ce9211aL, "CustomStatementRef"), MetaAdapterFactory.getConcept(0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x1164564a526L, "OutputNode"), MetaAdapterFactory.getConcept(0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x119a204b891L, "OutputNode_forDontApplyReductionTwice_test"), MetaAdapterFactory.getConcept(0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x116455d922fL, "OutputRoot"), MetaAdapterFactory.getConcept(0x157a9668bf58417bL, 0x893e53d86388dc56L, 0x5369bd6a5b4e4e08L, "TwoVarStatement"));
}
