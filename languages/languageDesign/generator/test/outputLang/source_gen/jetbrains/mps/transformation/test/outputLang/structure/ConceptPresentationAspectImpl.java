package jetbrains.mps.transformation.test.outputLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_CustomRoot = new ConceptPresentationBuilder().shortDesc("root for tests").create();
  private final ConceptPresentation props_CustomStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomStatementRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputNode_forDontApplyReductionTwice_test = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TwoVarStatement = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.CustomRoot:
        return props_CustomRoot;
      case LanguageConceptSwitch.CustomStatement:
        return props_CustomStatement;
      case LanguageConceptSwitch.CustomStatementRef:
        return props_CustomStatementRef;
      case LanguageConceptSwitch.OutputNode:
        return props_OutputNode;
      case LanguageConceptSwitch.OutputNode_forDontApplyReductionTwice_test:
        return props_OutputNode_forDontApplyReductionTwice_test;
      case LanguageConceptSwitch.OutputRoot:
        return props_OutputRoot;
      case LanguageConceptSwitch.TwoVarStatement:
        return props_TwoVarStatement;
    }
    return null;
  }
}
