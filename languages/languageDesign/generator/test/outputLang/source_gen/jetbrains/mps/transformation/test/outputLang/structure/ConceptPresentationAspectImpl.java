package jetbrains.mps.transformation.test.outputLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_CustomRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CustomStatementRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputNode_forDontApplyReductionTwice_test = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutputRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TwoVarStatement = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("157a9668-bf58-417b-893e-53d86388dc56"), "jetbrains.mps.transformation.test.outputLang")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_CustomRoot;
      case 1:
        return props_CustomStatement;
      case 2:
        return props_CustomStatementRef;
      case 3:
        return props_OutputNode;
      case 4:
        return props_OutputNode_forDontApplyReductionTwice_test;
      case 5:
        return props_OutputRoot;
      case 6:
        return props_TwoVarStatement;
    }
    throw new IllegalStateException();
  }
}
