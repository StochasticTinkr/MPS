package jetbrains.mps.transformation.test.inputLang.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ExpressionToReduceToStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InputNode_A = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InputNode_B = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InputNode_C = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InputRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InputRootWithStatementList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefTestClass = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefTestExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefTestMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefTestMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefTestParam = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefTestParamRef = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("ab0ae915-e3b5-4f35-b55a-c655d649a03c"), "jetbrains.mps.transformation.test.inputLang")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_ExpressionToReduceToStatement;
      case 1:
        return props_InputNode;
      case 2:
        return props_InputNode_A;
      case 3:
        return props_InputNode_B;
      case 4:
        return props_InputNode_C;
      case 5:
        return props_InputRoot;
      case 6:
        return props_InputRootWithStatementList;
      case 7:
        return props_RefTestClass;
      case 8:
        return props_RefTestExpression;
      case 9:
        return props_RefTestMethod;
      case 10:
        return props_RefTestMethodCall;
      case 11:
        return props_RefTestParam;
      case 12:
        return props_RefTestParamRef;
    }
    throw new IllegalStateException();
  }
}
