package jetbrains.mps.lang.generator.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbandonInput_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseMappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseMappingRule_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextVariableProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CopySrcListMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CopySrcNodeMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateRootRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateRootRule_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DismissTopMappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DropAttributeRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DropAttributeRule_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DropRootRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DropRootRule_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportEntry = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportLabel = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ExportLabelParameter_inputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportLabelParameter_keeper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportLabelParameter_outputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportMacro = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_GeneratorDebug_InputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorDebug_LabelEntry = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorDebug_Mappings = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorDebug_NodeMapEntry = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorDebug_NodeRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_AbstractReferenceDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_InternalReferenceDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_PropertyDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_ReferenceDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorMessage = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IGeneratorParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IParameterizedTemplate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITemplateCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfMacro_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncludeMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineSwitch_Case = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineSwitch_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineTemplateWithContext_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineTemplate_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InsertMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InsertMacro_CreateNodeQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LabelMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LoopMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapSrcListMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapSrcMacro_MapperFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapSrcMacro_PostMapperFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapSrcNodeMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingConfiguration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0yb).create();
  private final ConceptPresentation props_MappingConfiguration_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingLabelDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingScript = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0bc).create();
  private final ConceptPresentation props_MappingScriptReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingScript_CodeBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MarshalFunction = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ModelIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PatternReduction_MappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyMacro_GetPropertyValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReductionRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Reduction_MappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceMacro_GetReferent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RootTemplateAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Root_MappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SourceSubstituteMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SourceSubstituteMacro_SourceNodeQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SourceSubstituteMacro_SourceNodesQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentLinkPatternRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentParameterExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentPatternRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentPatternVarRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentPropertyPatternRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentQueryExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentVariableRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateCallMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ed).create();
  private final ConceptPresentation props_TemplateDeclarationReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFragment = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0xff1b29b76cL, 0x1179c366b2fL, "labelDeclaration")).create();
  private final ConceptPresentation props_TemplateFragment_ContextNodeQuery = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_TemplateFunctionParameter_mainContextNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_outputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_parentOutputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_sourceNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_templatePropertyValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_templateReferent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateQueryBase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateSwitch = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0qd).create();
  private final ConceptPresentation props_TemplateSwitchMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateSwitchReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TraceMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TrivialModelId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TrivialNodeId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnmarshalFunction = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_VarMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VarMacro_ValueQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WeaveEach_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WeaveMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WeavingAnchorQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Weaving_MappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Weaving_MappingRule_ContextNodeQuery = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbandonInput_RuleConsequence;
      case 1:
        return props_AbstractMacro;
      case 2:
        return props_BaseMappingRule;
      case 3:
        return props_BaseMappingRule_Condition;
      case 4:
        return props_ContextVariableDeclaration;
      case 5:
        return props_ContextVariableProvider;
      case 6:
        return props_CopySrcListMacro;
      case 7:
        return props_CopySrcNodeMacro;
      case 8:
        return props_CreateRootRule;
      case 9:
        return props_CreateRootRule_Condition;
      case 10:
        return props_DismissTopMappingRule;
      case 11:
        return props_DropAttributeRule;
      case 12:
        return props_DropAttributeRule_Condition;
      case 13:
        return props_DropRootRule;
      case 14:
        return props_DropRootRule_Condition;
      case 15:
        return props_ExportEntry;
      case 16:
        return props_ExportLabel;
      case 17:
        return props_ExportLabelParameter_inputNode;
      case 18:
        return props_ExportLabelParameter_keeper;
      case 19:
        return props_ExportLabelParameter_outputNode;
      case 20:
        return props_ExportMacro;
      case 21:
        return props_GeneratorDebug_InputNode;
      case 22:
        return props_GeneratorDebug_LabelEntry;
      case 23:
        return props_GeneratorDebug_Mappings;
      case 24:
        return props_GeneratorDebug_NodeMapEntry;
      case 25:
        return props_GeneratorDebug_NodeRef;
      case 26:
        return props_GeneratorInternal_AbstractReferenceDescriptor;
      case 27:
        return props_GeneratorInternal_InternalReferenceDescriptor;
      case 28:
        return props_GeneratorInternal_PropertyDescriptor;
      case 29:
        return props_GeneratorInternal_ReferenceDescriptor;
      case 30:
        return props_GeneratorMessage;
      case 31:
        return props_GeneratorParameterReference;
      case 32:
        return props_IGeneratorParameter;
      case 33:
        return props_IParameterizedTemplate;
      case 34:
        return props_ITemplateCall;
      case 35:
        return props_IfMacro;
      case 36:
        return props_IfMacro_Condition;
      case 37:
        return props_IncludeMacro;
      case 38:
        return props_InlineSwitch_Case;
      case 39:
        return props_InlineSwitch_RuleConsequence;
      case 40:
        return props_InlineTemplateWithContext_RuleConsequence;
      case 41:
        return props_InlineTemplate_RuleConsequence;
      case 42:
        return props_InsertMacro;
      case 43:
        return props_InsertMacro_CreateNodeQuery;
      case 44:
        return props_LabelMacro;
      case 45:
        return props_LoopMacro;
      case 46:
        return props_MapSrcListMacro;
      case 47:
        return props_MapSrcMacro_MapperFunction;
      case 48:
        return props_MapSrcMacro_PostMapperFunction;
      case 49:
        return props_MapSrcNodeMacro;
      case 50:
        return props_MappingConfiguration;
      case 51:
        return props_MappingConfiguration_Condition;
      case 52:
        return props_MappingLabelDeclaration;
      case 53:
        return props_MappingScript;
      case 54:
        return props_MappingScriptReference;
      case 55:
        return props_MappingScript_CodeBlock;
      case 56:
        return props_MarshalFunction;
      case 57:
        return props_ModelIdentity;
      case 58:
        return props_NodeIdentity;
      case 59:
        return props_NodeMacro;
      case 60:
        return props_PatternReduction_MappingRule;
      case 61:
        return props_PropertyMacro;
      case 62:
        return props_PropertyMacro_GetPropertyValue;
      case 63:
        return props_ReductionRule;
      case 64:
        return props_Reduction_MappingRule;
      case 65:
        return props_ReferenceMacro;
      case 66:
        return props_ReferenceMacro_GetReferent;
      case 67:
        return props_RootTemplateAnnotation;
      case 68:
        return props_Root_MappingRule;
      case 69:
        return props_RuleConsequence;
      case 70:
        return props_SourceSubstituteMacro;
      case 71:
        return props_SourceSubstituteMacro_SourceNodeQuery;
      case 72:
        return props_SourceSubstituteMacro_SourceNodesQuery;
      case 73:
        return props_TemplateArgumentLinkPatternRefExpression;
      case 74:
        return props_TemplateArgumentParameterExpression;
      case 75:
        return props_TemplateArgumentPatternRef;
      case 76:
        return props_TemplateArgumentPatternVarRefExpression;
      case 77:
        return props_TemplateArgumentPropertyPatternRefExpression;
      case 78:
        return props_TemplateArgumentQuery;
      case 79:
        return props_TemplateArgumentQueryExpression;
      case 80:
        return props_TemplateArgumentVariableRefExpression;
      case 81:
        return props_TemplateCallMacro;
      case 82:
        return props_TemplateDeclaration;
      case 83:
        return props_TemplateDeclarationReference;
      case 84:
        return props_TemplateFragment;
      case 85:
        return props_TemplateFragment_ContextNodeQuery;
      case 86:
        return props_TemplateFunctionParameter_mainContextNode;
      case 87:
        return props_TemplateFunctionParameter_outputNode;
      case 88:
        return props_TemplateFunctionParameter_parentOutputNode;
      case 89:
        return props_TemplateFunctionParameter_sourceNode;
      case 90:
        return props_TemplateFunctionParameter_templatePropertyValue;
      case 91:
        return props_TemplateFunctionParameter_templateReferent;
      case 92:
        return props_TemplateParameterDeclaration;
      case 93:
        return props_TemplateQueryBase;
      case 94:
        return props_TemplateSwitch;
      case 95:
        return props_TemplateSwitchMacro;
      case 96:
        return props_TemplateSwitchReference;
      case 97:
        return props_TraceMacro;
      case 98:
        return props_TrivialModelId;
      case 99:
        return props_TrivialNodeId;
      case 100:
        return props_UnmarshalFunction;
      case 101:
        return props_VarMacro;
      case 102:
        return props_VarMacro_ValueQuery;
      case 103:
        return props_WeaveEach_RuleConsequence;
      case 104:
        return props_WeaveMacro;
      case 105:
        return props_WeavingAnchorQuery;
      case 106:
        return props_Weaving_MappingRule;
      case 107:
        return props_Weaving_MappingRule_ContextNodeQuery;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
