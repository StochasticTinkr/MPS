package jetbrains.mps.lang.generator.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbandonInput_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseMappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseMappingRule_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextVariableProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CopySrcListMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CopySrcNodeMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateRootRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateRootRule_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DismissTopMappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DropAttributeRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DropAttributeRule_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DropRootRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DropRootRule_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportEntry = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportLabel = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ExportLabelParameter_inputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportLabelParameter_keeper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportLabelParameter_outputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportMacro = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_GeneratorDebug_InputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorDebug_LabelEntry = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorDebug_Mappings = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorDebug_NodeMapEntry = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorDebug_NodeRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_AbstractReferenceDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_InternalReferenceDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_PropertyDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_ReferenceDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorMessage = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IGeneratorParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IParameterizedTemplate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITemplateCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfMacro_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncludeMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineSwitch_Case = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineSwitch_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineTemplateWithContext_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineTemplate_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InsertMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InsertMacro_CreateNodeQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LabelMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LoopMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapSrcListMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapSrcMacro_MapperFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapSrcMacro_PostMapperFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapSrcNodeMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingConfiguration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0yb).create();
  private final ConceptPresentation props_MappingConfiguration_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingLabelDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingScript = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0bc).create();
  private final ConceptPresentation props_MappingScriptReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingScript_CodeBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MarshalFunction = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ModelIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PatternReduction_MappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyMacro_GetPropertyValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReductionRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Reduction_MappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceMacro_GetReferent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RootTemplateAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Root_MappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SourceSubstituteMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SourceSubstituteMacro_SourceNodeQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SourceSubstituteMacro_SourceNodesQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentLinkPatternRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentParameterExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentPatternRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentPatternVarRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentPropertyPatternRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentQueryExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentVariableRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateCallMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ed).create();
  private final ConceptPresentation props_TemplateDeclarationReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFragment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_mainContextNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_outputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_parentOutputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_sourceNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_templatePropertyValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_templateReferent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateQueryBase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateSwitch = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0pd).create();
  private final ConceptPresentation props_TemplateSwitchMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateSwitchReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TraceMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TrivialModelId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TrivialNodeId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnmarshalFunction = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_VarMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VarMacro_ValueQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WeaveEach_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WeaveMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WeavingAnchorQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Weaving_MappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Weaving_MappingRule_ContextNodeQuery = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbandonInput_RuleConsequence:
        return props_AbandonInput_RuleConsequence;
      case LanguageConceptSwitch.AbstractMacro:
        return props_AbstractMacro;
      case LanguageConceptSwitch.BaseMappingRule:
        return props_BaseMappingRule;
      case LanguageConceptSwitch.BaseMappingRule_Condition:
        return props_BaseMappingRule_Condition;
      case LanguageConceptSwitch.ContextVariableDeclaration:
        return props_ContextVariableDeclaration;
      case LanguageConceptSwitch.ContextVariableProvider:
        return props_ContextVariableProvider;
      case LanguageConceptSwitch.CopySrcListMacro:
        return props_CopySrcListMacro;
      case LanguageConceptSwitch.CopySrcNodeMacro:
        return props_CopySrcNodeMacro;
      case LanguageConceptSwitch.CreateRootRule:
        return props_CreateRootRule;
      case LanguageConceptSwitch.CreateRootRule_Condition:
        return props_CreateRootRule_Condition;
      case LanguageConceptSwitch.DismissTopMappingRule:
        return props_DismissTopMappingRule;
      case LanguageConceptSwitch.DropAttributeRule:
        return props_DropAttributeRule;
      case LanguageConceptSwitch.DropAttributeRule_Condition:
        return props_DropAttributeRule_Condition;
      case LanguageConceptSwitch.DropRootRule:
        return props_DropRootRule;
      case LanguageConceptSwitch.DropRootRule_Condition:
        return props_DropRootRule_Condition;
      case LanguageConceptSwitch.ExportEntry:
        return props_ExportEntry;
      case LanguageConceptSwitch.ExportLabel:
        return props_ExportLabel;
      case LanguageConceptSwitch.ExportLabelParameter_inputNode:
        return props_ExportLabelParameter_inputNode;
      case LanguageConceptSwitch.ExportLabelParameter_keeper:
        return props_ExportLabelParameter_keeper;
      case LanguageConceptSwitch.ExportLabelParameter_outputNode:
        return props_ExportLabelParameter_outputNode;
      case LanguageConceptSwitch.ExportMacro:
        return props_ExportMacro;
      case LanguageConceptSwitch.GeneratorDebug_InputNode:
        return props_GeneratorDebug_InputNode;
      case LanguageConceptSwitch.GeneratorDebug_LabelEntry:
        return props_GeneratorDebug_LabelEntry;
      case LanguageConceptSwitch.GeneratorDebug_Mappings:
        return props_GeneratorDebug_Mappings;
      case LanguageConceptSwitch.GeneratorDebug_NodeMapEntry:
        return props_GeneratorDebug_NodeMapEntry;
      case LanguageConceptSwitch.GeneratorDebug_NodeRef:
        return props_GeneratorDebug_NodeRef;
      case LanguageConceptSwitch.GeneratorInternal_AbstractReferenceDescriptor:
        return props_GeneratorInternal_AbstractReferenceDescriptor;
      case LanguageConceptSwitch.GeneratorInternal_InternalReferenceDescriptor:
        return props_GeneratorInternal_InternalReferenceDescriptor;
      case LanguageConceptSwitch.GeneratorInternal_PropertyDescriptor:
        return props_GeneratorInternal_PropertyDescriptor;
      case LanguageConceptSwitch.GeneratorInternal_ReferenceDescriptor:
        return props_GeneratorInternal_ReferenceDescriptor;
      case LanguageConceptSwitch.GeneratorMessage:
        return props_GeneratorMessage;
      case LanguageConceptSwitch.GeneratorParameterReference:
        return props_GeneratorParameterReference;
      case LanguageConceptSwitch.IGeneratorParameter:
        return props_IGeneratorParameter;
      case LanguageConceptSwitch.IParameterizedTemplate:
        return props_IParameterizedTemplate;
      case LanguageConceptSwitch.ITemplateCall:
        return props_ITemplateCall;
      case LanguageConceptSwitch.IfMacro:
        return props_IfMacro;
      case LanguageConceptSwitch.IfMacro_Condition:
        return props_IfMacro_Condition;
      case LanguageConceptSwitch.IncludeMacro:
        return props_IncludeMacro;
      case LanguageConceptSwitch.InlineSwitch_Case:
        return props_InlineSwitch_Case;
      case LanguageConceptSwitch.InlineSwitch_RuleConsequence:
        return props_InlineSwitch_RuleConsequence;
      case LanguageConceptSwitch.InlineTemplateWithContext_RuleConsequence:
        return props_InlineTemplateWithContext_RuleConsequence;
      case LanguageConceptSwitch.InlineTemplate_RuleConsequence:
        return props_InlineTemplate_RuleConsequence;
      case LanguageConceptSwitch.InsertMacro:
        return props_InsertMacro;
      case LanguageConceptSwitch.InsertMacro_CreateNodeQuery:
        return props_InsertMacro_CreateNodeQuery;
      case LanguageConceptSwitch.LabelMacro:
        return props_LabelMacro;
      case LanguageConceptSwitch.LoopMacro:
        return props_LoopMacro;
      case LanguageConceptSwitch.MapSrcListMacro:
        return props_MapSrcListMacro;
      case LanguageConceptSwitch.MapSrcMacro_MapperFunction:
        return props_MapSrcMacro_MapperFunction;
      case LanguageConceptSwitch.MapSrcMacro_PostMapperFunction:
        return props_MapSrcMacro_PostMapperFunction;
      case LanguageConceptSwitch.MapSrcNodeMacro:
        return props_MapSrcNodeMacro;
      case LanguageConceptSwitch.MappingConfiguration:
        return props_MappingConfiguration;
      case LanguageConceptSwitch.MappingConfiguration_Condition:
        return props_MappingConfiguration_Condition;
      case LanguageConceptSwitch.MappingLabelDeclaration:
        return props_MappingLabelDeclaration;
      case LanguageConceptSwitch.MappingScript:
        return props_MappingScript;
      case LanguageConceptSwitch.MappingScriptReference:
        return props_MappingScriptReference;
      case LanguageConceptSwitch.MappingScript_CodeBlock:
        return props_MappingScript_CodeBlock;
      case LanguageConceptSwitch.MarshalFunction:
        return props_MarshalFunction;
      case LanguageConceptSwitch.ModelIdentity:
        return props_ModelIdentity;
      case LanguageConceptSwitch.NodeIdentity:
        return props_NodeIdentity;
      case LanguageConceptSwitch.NodeMacro:
        return props_NodeMacro;
      case LanguageConceptSwitch.PatternReduction_MappingRule:
        return props_PatternReduction_MappingRule;
      case LanguageConceptSwitch.PropertyMacro:
        return props_PropertyMacro;
      case LanguageConceptSwitch.PropertyMacro_GetPropertyValue:
        return props_PropertyMacro_GetPropertyValue;
      case LanguageConceptSwitch.ReductionRule:
        return props_ReductionRule;
      case LanguageConceptSwitch.Reduction_MappingRule:
        return props_Reduction_MappingRule;
      case LanguageConceptSwitch.ReferenceMacro:
        return props_ReferenceMacro;
      case LanguageConceptSwitch.ReferenceMacro_GetReferent:
        return props_ReferenceMacro_GetReferent;
      case LanguageConceptSwitch.RootTemplateAnnotation:
        return props_RootTemplateAnnotation;
      case LanguageConceptSwitch.Root_MappingRule:
        return props_Root_MappingRule;
      case LanguageConceptSwitch.RuleConsequence:
        return props_RuleConsequence;
      case LanguageConceptSwitch.SourceSubstituteMacro:
        return props_SourceSubstituteMacro;
      case LanguageConceptSwitch.SourceSubstituteMacro_SourceNodeQuery:
        return props_SourceSubstituteMacro_SourceNodeQuery;
      case LanguageConceptSwitch.SourceSubstituteMacro_SourceNodesQuery:
        return props_SourceSubstituteMacro_SourceNodesQuery;
      case LanguageConceptSwitch.TemplateArgumentLinkPatternRefExpression:
        return props_TemplateArgumentLinkPatternRefExpression;
      case LanguageConceptSwitch.TemplateArgumentParameterExpression:
        return props_TemplateArgumentParameterExpression;
      case LanguageConceptSwitch.TemplateArgumentPatternRef:
        return props_TemplateArgumentPatternRef;
      case LanguageConceptSwitch.TemplateArgumentPatternVarRefExpression:
        return props_TemplateArgumentPatternVarRefExpression;
      case LanguageConceptSwitch.TemplateArgumentPropertyPatternRefExpression:
        return props_TemplateArgumentPropertyPatternRefExpression;
      case LanguageConceptSwitch.TemplateArgumentQuery:
        return props_TemplateArgumentQuery;
      case LanguageConceptSwitch.TemplateArgumentQueryExpression:
        return props_TemplateArgumentQueryExpression;
      case LanguageConceptSwitch.TemplateArgumentVariableRefExpression:
        return props_TemplateArgumentVariableRefExpression;
      case LanguageConceptSwitch.TemplateCallMacro:
        return props_TemplateCallMacro;
      case LanguageConceptSwitch.TemplateDeclaration:
        return props_TemplateDeclaration;
      case LanguageConceptSwitch.TemplateDeclarationReference:
        return props_TemplateDeclarationReference;
      case LanguageConceptSwitch.TemplateFragment:
        return props_TemplateFragment;
      case LanguageConceptSwitch.TemplateFunctionParameter_mainContextNode:
        return props_TemplateFunctionParameter_mainContextNode;
      case LanguageConceptSwitch.TemplateFunctionParameter_outputNode:
        return props_TemplateFunctionParameter_outputNode;
      case LanguageConceptSwitch.TemplateFunctionParameter_parentOutputNode:
        return props_TemplateFunctionParameter_parentOutputNode;
      case LanguageConceptSwitch.TemplateFunctionParameter_sourceNode:
        return props_TemplateFunctionParameter_sourceNode;
      case LanguageConceptSwitch.TemplateFunctionParameter_templatePropertyValue:
        return props_TemplateFunctionParameter_templatePropertyValue;
      case LanguageConceptSwitch.TemplateFunctionParameter_templateReferent:
        return props_TemplateFunctionParameter_templateReferent;
      case LanguageConceptSwitch.TemplateParameterDeclaration:
        return props_TemplateParameterDeclaration;
      case LanguageConceptSwitch.TemplateQueryBase:
        return props_TemplateQueryBase;
      case LanguageConceptSwitch.TemplateSwitch:
        return props_TemplateSwitch;
      case LanguageConceptSwitch.TemplateSwitchMacro:
        return props_TemplateSwitchMacro;
      case LanguageConceptSwitch.TemplateSwitchReference:
        return props_TemplateSwitchReference;
      case LanguageConceptSwitch.TraceMacro:
        return props_TraceMacro;
      case LanguageConceptSwitch.TrivialModelId:
        return props_TrivialModelId;
      case LanguageConceptSwitch.TrivialNodeId:
        return props_TrivialNodeId;
      case LanguageConceptSwitch.UnmarshalFunction:
        return props_UnmarshalFunction;
      case LanguageConceptSwitch.VarMacro:
        return props_VarMacro;
      case LanguageConceptSwitch.VarMacro_ValueQuery:
        return props_VarMacro_ValueQuery;
      case LanguageConceptSwitch.WeaveEach_RuleConsequence:
        return props_WeaveEach_RuleConsequence;
      case LanguageConceptSwitch.WeaveMacro:
        return props_WeaveMacro;
      case LanguageConceptSwitch.WeavingAnchorQuery:
        return props_WeavingAnchorQuery;
      case LanguageConceptSwitch.Weaving_MappingRule:
        return props_Weaving_MappingRule;
      case LanguageConceptSwitch.Weaving_MappingRule_ContextNodeQuery:
        return props_Weaving_MappingRule_ContextNodeQuery;
    }
    return null;
  }
}
