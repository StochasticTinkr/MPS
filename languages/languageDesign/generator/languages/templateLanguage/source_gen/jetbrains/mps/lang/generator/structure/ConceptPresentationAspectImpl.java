package jetbrains.mps.lang.generator.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbandonInput_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseMappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseMappingRule_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextVariableProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CopySrcListMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CopySrcNodeMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateRootRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CreateRootRule_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DismissTopMappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DropAttributeRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DropAttributeRule_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DropRootRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DropRootRule_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportEntry = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportLabel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportLabelParameter_inputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportLabelParameter_keeper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportLabelParameter_outputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExportMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorDebug_LabelEntry = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorDebug_Mappings = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorDebug_NodeMapEntry = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorDebug_NodeRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_AbstractReferenceDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_InternalReferenceDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_PropertyDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_ReferenceDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorMessage = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IGeneratorParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IParameterizedTemplate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITemplateCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfMacro_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncludeMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineSwitch_Case = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineSwitch_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineTemplateWithContext_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineTemplate_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InsertMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InsertMacro_CreateNodeQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LabelMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LoopMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapSrcListMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapSrcMacro_MapperFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapSrcMacro_PostMapperFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MapSrcNodeMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingConfiguration = new ConceptPresentationBuilder().icon("mappingConf.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_MappingConfiguration_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingLabelDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingScript = new ConceptPresentationBuilder().icon("generatorScript.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_MappingScriptReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MappingScript_CodeBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MarshalFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeIdentity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PatternReduction_MappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyMacro_GetPropertyValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReductionRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Reduction_MappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceMacro_GetReferent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RootTemplateAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Root_MappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SourceSubstituteMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SourceSubstituteMacro_SourceNodeQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SourceSubstituteMacro_SourceNodesQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentLinkPatternRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentParameterExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentPatternRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentPatternVarRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentPropertyPatternRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentQueryExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateArgumentVariableRefExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateCallMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateDeclaration = new ConceptPresentationBuilder().icon("templateFragment.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_TemplateDeclarationReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFragment = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getReferenceLink(0xb401a68083254110L, 0x8fd384331ff25befL, 0xff1b29b76cL, 0x1179c366b2fL, "labelDeclaration")).create();
  private final ConceptPresentation props_TemplateFragment_ContextNodeQuery = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_TemplateFunctionParameter_mainContextNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_outputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_parentOutputNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_sourceNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_templatePropertyValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_templateReferent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateParameterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateQueryBase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateSwitch = new ConceptPresentationBuilder().icon("switch.png", ConceptPresentationAspectImpl.class).create();
  private final ConceptPresentation props_TemplateSwitchMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateSwitchReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TraceMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TrivialModelId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TrivialNodeId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnmarshalFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VarMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VarMacro_ValueQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WeaveEach_RuleConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WeaveMacro = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WeavingAnchorQuery = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Weaving_MappingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Weaving_MappingRule_ContextNodeQuery = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_lpa09p_a0ee.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbandonInput_RuleConsequence;
          }
          break;
        case 1:
          if (true) {
            return props_AbstractMacro;
          }
          break;
        case 2:
          if (true) {
            return props_BaseMappingRule;
          }
          break;
        case 3:
          if (true) {
            return props_BaseMappingRule_Condition;
          }
          break;
        case 4:
          if (true) {
            return props_ContextVariableDeclaration;
          }
          break;
        case 5:
          if (true) {
            return props_ContextVariableProvider;
          }
          break;
        case 6:
          if (true) {
            return props_CopySrcListMacro;
          }
          break;
        case 7:
          if (true) {
            return props_CopySrcNodeMacro;
          }
          break;
        case 8:
          if (true) {
            return props_CreateRootRule;
          }
          break;
        case 9:
          if (true) {
            return props_CreateRootRule_Condition;
          }
          break;
        case 10:
          if (true) {
            return props_DismissTopMappingRule;
          }
          break;
        case 11:
          if (true) {
            return props_DropAttributeRule;
          }
          break;
        case 12:
          if (true) {
            return props_DropAttributeRule_Condition;
          }
          break;
        case 13:
          if (true) {
            return props_DropRootRule;
          }
          break;
        case 14:
          if (true) {
            return props_DropRootRule_Condition;
          }
          break;
        case 15:
          if (true) {
            return props_ExportEntry;
          }
          break;
        case 16:
          if (true) {
            return props_ExportLabel;
          }
          break;
        case 17:
          if (true) {
            return props_ExportLabelParameter_inputNode;
          }
          break;
        case 18:
          if (true) {
            return props_ExportLabelParameter_keeper;
          }
          break;
        case 19:
          if (true) {
            return props_ExportLabelParameter_outputNode;
          }
          break;
        case 20:
          if (true) {
            return props_ExportMacro;
          }
          break;
        case 21:
          if (true) {
            return props_GeneratorDebug_LabelEntry;
          }
          break;
        case 22:
          if (true) {
            return props_GeneratorDebug_Mappings;
          }
          break;
        case 23:
          if (true) {
            return props_GeneratorDebug_NodeMapEntry;
          }
          break;
        case 24:
          if (true) {
            return props_GeneratorDebug_NodeRef;
          }
          break;
        case 25:
          if (true) {
            return props_GeneratorInternal_AbstractReferenceDescriptor;
          }
          break;
        case 26:
          if (true) {
            return props_GeneratorInternal_InternalReferenceDescriptor;
          }
          break;
        case 27:
          if (true) {
            return props_GeneratorInternal_PropertyDescriptor;
          }
          break;
        case 28:
          if (true) {
            return props_GeneratorInternal_ReferenceDescriptor;
          }
          break;
        case 29:
          if (true) {
            return props_GeneratorMessage;
          }
          break;
        case 30:
          if (true) {
            return props_GeneratorParameterReference;
          }
          break;
        case 31:
          if (true) {
            return props_IGeneratorParameter;
          }
          break;
        case 32:
          if (true) {
            return props_IParameterizedTemplate;
          }
          break;
        case 33:
          if (true) {
            return props_ITemplateCall;
          }
          break;
        case 34:
          if (true) {
            return props_IfMacro;
          }
          break;
        case 35:
          if (true) {
            return props_IfMacro_Condition;
          }
          break;
        case 36:
          if (true) {
            return props_IncludeMacro;
          }
          break;
        case 37:
          if (true) {
            return props_InlineSwitch_Case;
          }
          break;
        case 38:
          if (true) {
            return props_InlineSwitch_RuleConsequence;
          }
          break;
        case 39:
          if (true) {
            return props_InlineTemplateWithContext_RuleConsequence;
          }
          break;
        case 40:
          if (true) {
            return props_InlineTemplate_RuleConsequence;
          }
          break;
        case 41:
          if (true) {
            return props_InsertMacro;
          }
          break;
        case 42:
          if (true) {
            return props_InsertMacro_CreateNodeQuery;
          }
          break;
        case 43:
          if (true) {
            return props_LabelMacro;
          }
          break;
        case 44:
          if (true) {
            return props_LoopMacro;
          }
          break;
        case 45:
          if (true) {
            return props_MapSrcListMacro;
          }
          break;
        case 46:
          if (true) {
            return props_MapSrcMacro_MapperFunction;
          }
          break;
        case 47:
          if (true) {
            return props_MapSrcMacro_PostMapperFunction;
          }
          break;
        case 48:
          if (true) {
            return props_MapSrcNodeMacro;
          }
          break;
        case 49:
          if (true) {
            return props_MappingConfiguration;
          }
          break;
        case 50:
          if (true) {
            return props_MappingConfiguration_Condition;
          }
          break;
        case 51:
          if (true) {
            return props_MappingLabelDeclaration;
          }
          break;
        case 52:
          if (true) {
            return props_MappingScript;
          }
          break;
        case 53:
          if (true) {
            return props_MappingScriptReference;
          }
          break;
        case 54:
          if (true) {
            return props_MappingScript_CodeBlock;
          }
          break;
        case 55:
          if (true) {
            return props_MarshalFunction;
          }
          break;
        case 56:
          if (true) {
            return props_ModelIdentity;
          }
          break;
        case 57:
          if (true) {
            return props_NodeIdentity;
          }
          break;
        case 58:
          if (true) {
            return props_NodeMacro;
          }
          break;
        case 59:
          if (true) {
            return props_PatternReduction_MappingRule;
          }
          break;
        case 60:
          if (true) {
            return props_PropertyMacro;
          }
          break;
        case 61:
          if (true) {
            return props_PropertyMacro_GetPropertyValue;
          }
          break;
        case 62:
          if (true) {
            return props_ReductionRule;
          }
          break;
        case 63:
          if (true) {
            return props_Reduction_MappingRule;
          }
          break;
        case 64:
          if (true) {
            return props_ReferenceMacro;
          }
          break;
        case 65:
          if (true) {
            return props_ReferenceMacro_GetReferent;
          }
          break;
        case 66:
          if (true) {
            return props_RootTemplateAnnotation;
          }
          break;
        case 67:
          if (true) {
            return props_Root_MappingRule;
          }
          break;
        case 68:
          if (true) {
            return props_RuleConsequence;
          }
          break;
        case 69:
          if (true) {
            return props_SourceSubstituteMacro;
          }
          break;
        case 70:
          if (true) {
            return props_SourceSubstituteMacro_SourceNodeQuery;
          }
          break;
        case 71:
          if (true) {
            return props_SourceSubstituteMacro_SourceNodesQuery;
          }
          break;
        case 72:
          if (true) {
            return props_TemplateArgumentLinkPatternRefExpression;
          }
          break;
        case 73:
          if (true) {
            return props_TemplateArgumentParameterExpression;
          }
          break;
        case 74:
          if (true) {
            return props_TemplateArgumentPatternRef;
          }
          break;
        case 75:
          if (true) {
            return props_TemplateArgumentPatternVarRefExpression;
          }
          break;
        case 76:
          if (true) {
            return props_TemplateArgumentPropertyPatternRefExpression;
          }
          break;
        case 77:
          if (true) {
            return props_TemplateArgumentQuery;
          }
          break;
        case 78:
          if (true) {
            return props_TemplateArgumentQueryExpression;
          }
          break;
        case 79:
          if (true) {
            return props_TemplateArgumentVariableRefExpression;
          }
          break;
        case 80:
          if (true) {
            return props_TemplateCallMacro;
          }
          break;
        case 81:
          if (true) {
            return props_TemplateDeclaration;
          }
          break;
        case 82:
          if (true) {
            return props_TemplateDeclarationReference;
          }
          break;
        case 83:
          if (true) {
            return props_TemplateFragment;
          }
          break;
        case 84:
          if (true) {
            return props_TemplateFragment_ContextNodeQuery;
          }
          break;
        case 85:
          if (true) {
            return props_TemplateFunctionParameter_mainContextNode;
          }
          break;
        case 86:
          if (true) {
            return props_TemplateFunctionParameter_outputNode;
          }
          break;
        case 87:
          if (true) {
            return props_TemplateFunctionParameter_parentOutputNode;
          }
          break;
        case 88:
          if (true) {
            return props_TemplateFunctionParameter_sourceNode;
          }
          break;
        case 89:
          if (true) {
            return props_TemplateFunctionParameter_templatePropertyValue;
          }
          break;
        case 90:
          if (true) {
            return props_TemplateFunctionParameter_templateReferent;
          }
          break;
        case 91:
          if (true) {
            return props_TemplateParameterDeclaration;
          }
          break;
        case 92:
          if (true) {
            return props_TemplateQueryBase;
          }
          break;
        case 93:
          if (true) {
            return props_TemplateSwitch;
          }
          break;
        case 94:
          if (true) {
            return props_TemplateSwitchMacro;
          }
          break;
        case 95:
          if (true) {
            return props_TemplateSwitchReference;
          }
          break;
        case 96:
          if (true) {
            return props_TraceMacro;
          }
          break;
        case 97:
          if (true) {
            return props_TrivialModelId;
          }
          break;
        case 98:
          if (true) {
            return props_TrivialNodeId;
          }
          break;
        case 99:
          if (true) {
            return props_UnmarshalFunction;
          }
          break;
        case 100:
          if (true) {
            return props_VarMacro;
          }
          break;
        case 101:
          if (true) {
            return props_VarMacro_ValueQuery;
          }
          break;
        case 102:
          if (true) {
            return props_WeaveEach_RuleConsequence;
          }
          break;
        case 103:
          if (true) {
            return props_WeaveMacro;
          }
          break;
        case 104:
          if (true) {
            return props_WeavingAnchorQuery;
          }
          break;
        case 105:
          if (true) {
            return props_Weaving_MappingRule;
          }
          break;
        case 106:
          if (true) {
            return props_Weaving_MappingRule_ContextNodeQuery;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_lpa09p_a0ee = buildConceptIndices(MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1180b1792dbL, "AbandonInput_RuleConsequence"), MetaAdapterFactory.getInterfaceConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11dc0f7933bL, "AbstractMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fc0b64647L, "BaseMappingRule"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fc0b05beaL, "BaseMappingRule_Condition"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x671e792f3d94989fL, "ContextVariableDeclaration"), MetaAdapterFactory.getInterfaceConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x671e792f3d934cacL, "ContextVariableProvider"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1038b0c2cc7L, "CopySrcListMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10389b50fefL, "CopySrcNodeMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fbbd5854aL, "CreateRootRule"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fbbd643c6L, "CreateRootRule_Condition"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11013931abdL, "DismissTopMappingRule"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x67b585b44f4d943bL, "DropAttributeRule"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x67b585b44f4d9446L, "DropAttributeRule_Condition"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11c0acf58efL, "DropRootRule"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11c0ad08d2aL, "DropRootRule_Condition"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x7d58bd9fd9b3d34dL, "ExportEntry"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x6db65d569f9bacaL, "ExportLabel"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x65a7fcfba8f41bdeL, "ExportLabelParameter_inputNode"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x7bb9ef7499a77cc2L, "ExportLabelParameter_keeper"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x65a7fcfba8f4e964L, "ExportLabelParameter_outputNode"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x7bb9ef7499aab606L, "ExportMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x35a02f6bfc9806c4L, "GeneratorDebug_LabelEntry"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x35a02f6bfc97f1c1L, "GeneratorDebug_Mappings"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x35a02f6bfc9806c7L, "GeneratorDebug_NodeMapEntry"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x35a02f6bfc9806d2L, "GeneratorDebug_NodeRef"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x2073070af8a4bc2aL, "GeneratorInternal_AbstractReferenceDescriptor"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x2073070af8a4bc1bL, "GeneratorInternal_InternalReferenceDescriptor"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x2073070af892f9edL, "GeneratorInternal_PropertyDescriptor"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x2073070af8a42ba1L, "GeneratorInternal_ReferenceDescriptor"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11055c63121L, "GeneratorMessage"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x90726ff283cbf8aL, "GeneratorParameterReference"), MetaAdapterFactory.getInterfaceConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x90726ff283822d4L, "IGeneratorParameter"), MetaAdapterFactory.getInterfaceConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xda3dc6e5137e9b1L, "IParameterizedTemplate"), MetaAdapterFactory.getInterfaceConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x17e941d108ce3120L, "ITemplateCall"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1047c1472deL, "IfMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10feefdbd6eL, "IfMacro_Condition"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11621ab7715L, "IncludeMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11644fdbf49L, "InlineSwitch_Case"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11644fa2edeL, "InlineSwitch_RuleConsequence"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x7b85dded0be53d6cL, "InlineTemplateWithContext_RuleConsequence"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x112103dd1e8L, "InlineTemplate_RuleConsequence"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1231e32ff7a958ceL, "InsertMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1231e32ff7a958cfL, "InsertMacro_CreateNodeQuery"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x473cc5baf8a1e7a4L, "LabelMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1047ce009c3L, "LoopMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x107ce4fbf98L, "MapSrcListMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11094af4e18L, "MapSrcMacro_MapperFunction"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11d455674bfL, "MapSrcMacro_PostMapperFunction"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10759372d78L, "MapSrcNodeMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xff0bea0475L, "MappingConfiguration"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x6cab949e66d5ae81L, "MappingConfiguration_Condition"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1179be47606L, "MappingLabelDeclaration"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1165958fcd6L, "MappingScript"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x116597b27aaL, "MappingScriptReference"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11659655aa8L, "MappingScript_CodeBlock"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x65a7fcfba8f40208L, "MarshalFunction"), MetaAdapterFactory.getInterfaceConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x7d58bd9fd9c8b6d3L, "ModelIdentity"), MetaAdapterFactory.getInterfaceConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x7d58bd9fd9b5e358L, "NodeIdentity"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfd47ed6742L, "NodeMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x190d31fe6a12ebb4L, "PatternReduction_MappingRule"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfd47e9f6f0L, "PropertyMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fe3afb5ffL, "PropertyMacro_GetPropertyValue"), MetaAdapterFactory.getInterfaceConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x3592736deb001cfdL, "ReductionRule"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fca296532L, "Reduction_MappingRule"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfd7f44d616L, "ReferenceMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fe485cc9bL, "ReferenceMacro_GetReferent"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11017244494L, "RootTemplateAnnotation"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fd54746dbL, "Root_MappingRule"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x110138ccc4bL, "RuleConsequence"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fef52f5efL, "SourceSubstituteMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10ff3acfa74L, "SourceSubstituteMacro_SourceNodeQuery"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fef5bd603L, "SourceSubstituteMacro_SourceNodesQuery"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x42d71bfbeb1a5de8L, "TemplateArgumentLinkPatternRefExpression"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x457655815a794e79L, "TemplateArgumentParameterExpression"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x42d71bfbeb1a07e5L, "TemplateArgumentPatternRef"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x40be82ad503b3c88L, "TemplateArgumentPatternVarRefExpression"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x42d71bfbeb1a5de7L, "TemplateArgumentPropertyPatternRefExpression"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x380132d742e95ce5L, "TemplateArgumentQuery"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x380132d742e8ccb0L, "TemplateArgumentQueryExpression"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x3d6f2506d88aa028L, "TemplateArgumentVariableRefExpression"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x14f7f8a311b8f14fL, "TemplateCallMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfe43cb41d0L, "TemplateDeclaration"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11013906056L, "TemplateDeclarationReference"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xff1b29b76cL, "TemplateFragment"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x113c2300eb1L, "TemplateFragment_ContextNodeQuery"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x113c23283bdL, "TemplateFunctionParameter_mainContextNode"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x113d50d6be6L, "TemplateFunctionParameter_outputNode"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x113db24924aL, "TemplateFunctionParameter_parentOutputNode"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fc0b471fcL, "TemplateFunctionParameter_sourceNode"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fe3b1dbebL, "TemplateFunctionParameter_templatePropertyValue"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fe4879c6aL, "TemplateFunctionParameter_templateReferent"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x190d31fe6a0962e6L, "TemplateParameterDeclaration"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11b4d0ca830L, "TemplateQueryBase"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313ed7688L, "TemplateSwitch"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xda3dc6e51747593L, "TemplateSwitchMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1031eb3122dL, "TemplateSwitchReference"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x2b456582595e739bL, "TraceMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x7d58bd9fd9c8b8cbL, "TrivialModelId"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x7d58bd9fd9b64463L, "TrivialNodeId"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x65a7fcfba8f41ba9L, "UnmarshalFunction"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x45991daad6a3d34eL, "VarMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x45991daad6a5c71aL, "VarMacro_ValueQuery"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1104fcac3b1L, "WeaveEach_RuleConsequence"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x300c02df884235d3L, "WeaveMacro"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0xe2b8adb3aba4b3bL, "WeavingAnchorQuery"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fc0d8c573L, "Weaving_MappingRule"), MetaAdapterFactory.getConcept(0xb401a68083254110L, 0x8fd384331ff25befL, 0x113d09e4da2L, "Weaving_MappingRule_ContextNodeQuery"));
}
