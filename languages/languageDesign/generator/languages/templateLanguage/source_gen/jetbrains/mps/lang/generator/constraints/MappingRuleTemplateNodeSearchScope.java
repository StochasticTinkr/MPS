package jetbrains.mps.lang.generator.constraints;

/*Generated by MPS */

import jetbrains.mps.scope.ModelsScope;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.smodel.SModelOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.SModelStereotype;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

/*package*/ class MappingRuleTemplateNodeSearchScope extends ModelsScope {
  public MappingRuleTemplateNodeSearchScope(SModel model) {
    // any named node (restriction of rule target link) inside a visible generator model 
    super(Sequence.fromIterable(((Iterable<SModel>) SModelOperations.allImportedModels(model))).union(Sequence.fromIterable(Sequence.<SModel>singleton(model))).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return SModelStereotype.isGeneratorModel(it);
      }
    }), true, MetaAdapterFactory.getInterfaceConcept(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, "jetbrains.mps.lang.core.structure.INamedConcept"));
  }
}
