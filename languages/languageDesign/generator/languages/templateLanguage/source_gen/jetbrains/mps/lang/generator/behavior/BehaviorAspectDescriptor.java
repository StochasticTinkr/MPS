package jetbrains.mps.lang.generator.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myPropertyMacro__BehaviorDescriptor = new PropertyMacro__BehaviorDescriptor();
  private final BHDescriptor myNodeMacro__BehaviorDescriptor = new NodeMacro__BehaviorDescriptor();
  private final BHDescriptor myReferenceMacro__BehaviorDescriptor = new ReferenceMacro__BehaviorDescriptor();
  private final BHDescriptor myTemplateDeclaration__BehaviorDescriptor = new TemplateDeclaration__BehaviorDescriptor();
  private final BHDescriptor myMappingConfiguration__BehaviorDescriptor = new MappingConfiguration__BehaviorDescriptor();
  private final BHDescriptor myTemplateFragment__BehaviorDescriptor = new TemplateFragment__BehaviorDescriptor();
  private final BHDescriptor myTemplateSwitch__BehaviorDescriptor = new TemplateSwitch__BehaviorDescriptor();
  private final BHDescriptor myCopySrcNodeMacro__BehaviorDescriptor = new CopySrcNodeMacro__BehaviorDescriptor();
  private final BHDescriptor myCopySrcListMacro__BehaviorDescriptor = new CopySrcListMacro__BehaviorDescriptor();
  private final BHDescriptor myIfMacro__BehaviorDescriptor = new IfMacro__BehaviorDescriptor();
  private final BHDescriptor myLoopMacro__BehaviorDescriptor = new LoopMacro__BehaviorDescriptor();
  private final BHDescriptor myMapSrcNodeMacro__BehaviorDescriptor = new MapSrcNodeMacro__BehaviorDescriptor();
  private final BHDescriptor myMapSrcListMacro__BehaviorDescriptor = new MapSrcListMacro__BehaviorDescriptor();
  private final BHDescriptor myCreateRootRule__BehaviorDescriptor = new CreateRootRule__BehaviorDescriptor();
  private final BHDescriptor myCreateRootRule_Condition__BehaviorDescriptor = new CreateRootRule_Condition__BehaviorDescriptor();
  private final BHDescriptor myBaseMappingRule_Condition__BehaviorDescriptor = new BaseMappingRule_Condition__BehaviorDescriptor();
  private final BHDescriptor myTemplateFunctionParameter_sourceNode__BehaviorDescriptor = new TemplateFunctionParameter_sourceNode__BehaviorDescriptor();
  private final BHDescriptor myBaseMappingRule__BehaviorDescriptor = new BaseMappingRule__BehaviorDescriptor();
  private final BHDescriptor myReduction_MappingRule__BehaviorDescriptor = new Reduction_MappingRule__BehaviorDescriptor();
  private final BHDescriptor myRoot_MappingRule__BehaviorDescriptor = new Root_MappingRule__BehaviorDescriptor();
  private final BHDescriptor myPropertyMacro_GetPropertyValue__BehaviorDescriptor = new PropertyMacro_GetPropertyValue__BehaviorDescriptor();
  private final BHDescriptor myTemplateFunctionParameter_templatePropertyValue__BehaviorDescriptor = new TemplateFunctionParameter_templatePropertyValue__BehaviorDescriptor();
  private final BHDescriptor myReferenceMacro_GetReferent__BehaviorDescriptor = new ReferenceMacro_GetReferent__BehaviorDescriptor();
  private final BHDescriptor myTemplateFunctionParameter_templateReferent__BehaviorDescriptor = new TemplateFunctionParameter_templateReferent__BehaviorDescriptor();
  private final BHDescriptor myIfMacro_Condition__BehaviorDescriptor = new IfMacro_Condition__BehaviorDescriptor();
  private final BHDescriptor mySourceSubstituteMacro__BehaviorDescriptor = new SourceSubstituteMacro__BehaviorDescriptor();
  private final BHDescriptor mySourceSubstituteMacro_SourceNodesQuery__BehaviorDescriptor = new SourceSubstituteMacro_SourceNodesQuery__BehaviorDescriptor();
  private final BHDescriptor mySourceSubstituteMacro_SourceNodeQuery__BehaviorDescriptor = new SourceSubstituteMacro_SourceNodeQuery__BehaviorDescriptor();
  private final BHDescriptor myRuleConsequence__BehaviorDescriptor = new RuleConsequence__BehaviorDescriptor();
  private final BHDescriptor myTemplateDeclarationReference__BehaviorDescriptor = new TemplateDeclarationReference__BehaviorDescriptor();
  private final BHDescriptor myRootTemplateAnnotation__BehaviorDescriptor = new RootTemplateAnnotation__BehaviorDescriptor();
  private final BHDescriptor myMapSrcMacro_MapperFunction__BehaviorDescriptor = new MapSrcMacro_MapperFunction__BehaviorDescriptor();
  private final BHDescriptor myInlineTemplate_RuleConsequence__BehaviorDescriptor = new InlineTemplate_RuleConsequence__BehaviorDescriptor();
  private final BHDescriptor myTemplateFunctionParameter_mainContextNode__BehaviorDescriptor = new TemplateFunctionParameter_mainContextNode__BehaviorDescriptor();
  private final BHDescriptor myWeaving_MappingRule_ContextNodeQuery__BehaviorDescriptor = new Weaving_MappingRule_ContextNodeQuery__BehaviorDescriptor();
  private final BHDescriptor myTemplateFunctionParameter_parentOutputNode__BehaviorDescriptor = new TemplateFunctionParameter_parentOutputNode__BehaviorDescriptor();
  private final BHDescriptor myIncludeMacro__BehaviorDescriptor = new IncludeMacro__BehaviorDescriptor();
  private final BHDescriptor myMappingScript_CodeBlock__BehaviorDescriptor = new MappingScript_CodeBlock__BehaviorDescriptor();
  private final BHDescriptor myTemplateQueryBase__BehaviorDescriptor = new TemplateQueryBase__BehaviorDescriptor();
  private final BHDescriptor myDropRootRule_Condition__BehaviorDescriptor = new DropRootRule_Condition__BehaviorDescriptor();
  private final BHDescriptor myMapSrcMacro_PostMapperFunction__BehaviorDescriptor = new MapSrcMacro_PostMapperFunction__BehaviorDescriptor();
  private final BHDescriptor myIGeneratorParameter__BehaviorDescriptor = new IGeneratorParameter__BehaviorDescriptor();
  private final BHDescriptor myTemplateSwitchMacro__BehaviorDescriptor = new TemplateSwitchMacro__BehaviorDescriptor();
  private final BHDescriptor myWeavingAnchorQuery__BehaviorDescriptor = new WeavingAnchorQuery__BehaviorDescriptor();
  private final BHDescriptor myInsertMacro__BehaviorDescriptor = new InsertMacro__BehaviorDescriptor();
  private final BHDescriptor myInsertMacro_CreateNodeQuery__BehaviorDescriptor = new InsertMacro_CreateNodeQuery__BehaviorDescriptor();
  private final BHDescriptor myTemplateCallMacro__BehaviorDescriptor = new TemplateCallMacro__BehaviorDescriptor();
  private final BHDescriptor myITemplateCall__BehaviorDescriptor = new ITemplateCall__BehaviorDescriptor();
  private final BHDescriptor myPatternReduction_MappingRule__BehaviorDescriptor = new PatternReduction_MappingRule__BehaviorDescriptor();
  private final BHDescriptor myWeaveMacro__BehaviorDescriptor = new WeaveMacro__BehaviorDescriptor();
  private final BHDescriptor myGeneratorDebug_LabelEntry__BehaviorDescriptor = new GeneratorDebug_LabelEntry__BehaviorDescriptor();
  private final BHDescriptor myGeneratorDebug_NodeMapEntry__BehaviorDescriptor = new GeneratorDebug_NodeMapEntry__BehaviorDescriptor();
  private final BHDescriptor myTemplateArgumentQuery__BehaviorDescriptor = new TemplateArgumentQuery__BehaviorDescriptor();
  private final BHDescriptor myTemplateArgumentPatternVarRefExpression__BehaviorDescriptor = new TemplateArgumentPatternVarRefExpression__BehaviorDescriptor();
  private final BHDescriptor myTemplateArgumentPatternRef__BehaviorDescriptor = new TemplateArgumentPatternRef__BehaviorDescriptor();
  private final BHDescriptor myTemplateArgumentPropertyPatternRefExpression__BehaviorDescriptor = new TemplateArgumentPropertyPatternRefExpression__BehaviorDescriptor();
  private final BHDescriptor myTemplateArgumentLinkPatternRefExpression__BehaviorDescriptor = new TemplateArgumentLinkPatternRefExpression__BehaviorDescriptor();
  private final BHDescriptor myVarMacro__BehaviorDescriptor = new VarMacro__BehaviorDescriptor();
  private final BHDescriptor myVarMacro_ValueQuery__BehaviorDescriptor = new VarMacro_ValueQuery__BehaviorDescriptor();
  private final BHDescriptor myLabelMacro__BehaviorDescriptor = new LabelMacro__BehaviorDescriptor();
  private final BHDescriptor myContextVariableProvider__BehaviorDescriptor = new ContextVariableProvider__BehaviorDescriptor();
  private final BHDescriptor myDropAttributeRule_Condition__BehaviorDescriptor = new DropAttributeRule_Condition__BehaviorDescriptor();
  private final BHDescriptor myMappingConfiguration_Condition__BehaviorDescriptor = new MappingConfiguration_Condition__BehaviorDescriptor();
  private final BHDescriptor myInlineTemplateWithContext_RuleConsequence__BehaviorDescriptor = new InlineTemplateWithContext_RuleConsequence__BehaviorDescriptor();
  private final BHDescriptor myNodeIdentity__BehaviorDescriptor = new NodeIdentity__BehaviorDescriptor();
  private final BHDescriptor myTrivialNodeId__BehaviorDescriptor = new TrivialNodeId__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myBaseMappingRule__BehaviorDescriptor;
      case 1:
        return myBaseMappingRule_Condition__BehaviorDescriptor;
      case 2:
        return myContextVariableProvider__BehaviorDescriptor;
      case 3:
        return myCopySrcListMacro__BehaviorDescriptor;
      case 4:
        return myCopySrcNodeMacro__BehaviorDescriptor;
      case 5:
        return myCreateRootRule__BehaviorDescriptor;
      case 6:
        return myCreateRootRule_Condition__BehaviorDescriptor;
      case 7:
        return myDropAttributeRule_Condition__BehaviorDescriptor;
      case 8:
        return myDropRootRule_Condition__BehaviorDescriptor;
      case 9:
        return myGeneratorDebug_LabelEntry__BehaviorDescriptor;
      case 10:
        return myGeneratorDebug_NodeMapEntry__BehaviorDescriptor;
      case 11:
        return myIGeneratorParameter__BehaviorDescriptor;
      case 12:
        return myITemplateCall__BehaviorDescriptor;
      case 13:
        return myIfMacro__BehaviorDescriptor;
      case 14:
        return myIfMacro_Condition__BehaviorDescriptor;
      case 15:
        return myIncludeMacro__BehaviorDescriptor;
      case 16:
        return myInlineTemplateWithContext_RuleConsequence__BehaviorDescriptor;
      case 17:
        return myInlineTemplate_RuleConsequence__BehaviorDescriptor;
      case 18:
        return myInsertMacro__BehaviorDescriptor;
      case 19:
        return myInsertMacro_CreateNodeQuery__BehaviorDescriptor;
      case 20:
        return myLabelMacro__BehaviorDescriptor;
      case 21:
        return myLoopMacro__BehaviorDescriptor;
      case 22:
        return myMapSrcListMacro__BehaviorDescriptor;
      case 23:
        return myMapSrcMacro_MapperFunction__BehaviorDescriptor;
      case 24:
        return myMapSrcMacro_PostMapperFunction__BehaviorDescriptor;
      case 25:
        return myMapSrcNodeMacro__BehaviorDescriptor;
      case 26:
        return myMappingConfiguration__BehaviorDescriptor;
      case 27:
        return myMappingConfiguration_Condition__BehaviorDescriptor;
      case 28:
        return myMappingScript_CodeBlock__BehaviorDescriptor;
      case 29:
        return myNodeIdentity__BehaviorDescriptor;
      case 30:
        return myNodeMacro__BehaviorDescriptor;
      case 31:
        return myPatternReduction_MappingRule__BehaviorDescriptor;
      case 32:
        return myPropertyMacro__BehaviorDescriptor;
      case 33:
        return myPropertyMacro_GetPropertyValue__BehaviorDescriptor;
      case 34:
        return myReduction_MappingRule__BehaviorDescriptor;
      case 35:
        return myReferenceMacro__BehaviorDescriptor;
      case 36:
        return myReferenceMacro_GetReferent__BehaviorDescriptor;
      case 37:
        return myRootTemplateAnnotation__BehaviorDescriptor;
      case 38:
        return myRoot_MappingRule__BehaviorDescriptor;
      case 39:
        return myRuleConsequence__BehaviorDescriptor;
      case 40:
        return mySourceSubstituteMacro__BehaviorDescriptor;
      case 41:
        return mySourceSubstituteMacro_SourceNodeQuery__BehaviorDescriptor;
      case 42:
        return mySourceSubstituteMacro_SourceNodesQuery__BehaviorDescriptor;
      case 43:
        return myTemplateArgumentLinkPatternRefExpression__BehaviorDescriptor;
      case 44:
        return myTemplateArgumentPatternRef__BehaviorDescriptor;
      case 45:
        return myTemplateArgumentPatternVarRefExpression__BehaviorDescriptor;
      case 46:
        return myTemplateArgumentPropertyPatternRefExpression__BehaviorDescriptor;
      case 47:
        return myTemplateArgumentQuery__BehaviorDescriptor;
      case 48:
        return myTemplateCallMacro__BehaviorDescriptor;
      case 49:
        return myTemplateDeclaration__BehaviorDescriptor;
      case 50:
        return myTemplateDeclarationReference__BehaviorDescriptor;
      case 51:
        return myTemplateFragment__BehaviorDescriptor;
      case 52:
        return myTemplateFunctionParameter_mainContextNode__BehaviorDescriptor;
      case 53:
        return myTemplateFunctionParameter_parentOutputNode__BehaviorDescriptor;
      case 54:
        return myTemplateFunctionParameter_sourceNode__BehaviorDescriptor;
      case 55:
        return myTemplateFunctionParameter_templatePropertyValue__BehaviorDescriptor;
      case 56:
        return myTemplateFunctionParameter_templateReferent__BehaviorDescriptor;
      case 57:
        return myTemplateQueryBase__BehaviorDescriptor;
      case 58:
        return myTemplateSwitch__BehaviorDescriptor;
      case 59:
        return myTemplateSwitchMacro__BehaviorDescriptor;
      case 60:
        return myTrivialNodeId__BehaviorDescriptor;
      case 61:
        return myVarMacro__BehaviorDescriptor;
      case 62:
        return myVarMacro_ValueQuery__BehaviorDescriptor;
      case 63:
        return myWeaveMacro__BehaviorDescriptor;
      case 64:
        return myWeavingAnchorQuery__BehaviorDescriptor;
      case 65:
        return myWeaving_MappingRule_ContextNodeQuery__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fc0b64647L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fc0b05beaL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x671e792f3d934cacL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1038b0c2cc7L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10389b50fefL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fbbd5854aL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fbbd643c6L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x67b585b44f4d9446L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11c0ad08d2aL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x35a02f6bfc9806c4L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x35a02f6bfc9806c7L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x90726ff283822d4L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x17e941d108ce3120L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1047c1472deL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10feefdbd6eL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11621ab7715L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x7b85dded0be53d6cL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x112103dd1e8L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1231e32ff7a958ceL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1231e32ff7a958cfL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x473cc5baf8a1e7a4L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x1047ce009c3L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x107ce4fbf98L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11094af4e18L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11d455674bfL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10759372d78L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0xff0bea0475L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x6cab949e66d5ae81L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11659655aa8L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x7d58bd9fd9b5e358L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfd47ed6742L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x190d31fe6a12ebb4L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfd47e9f6f0L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fe3afb5ffL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fca296532L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfd7f44d616L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fe485cc9bL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11017244494L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fd54746dbL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x110138ccc4bL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fef52f5efL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10ff3acfa74L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fef5bd603L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x42d71bfbeb1a5de8L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x42d71bfbeb1a07e5L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x40be82ad503b3c88L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x42d71bfbeb1a5de7L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x380132d742e95ce5L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x14f7f8a311b8f14fL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0xfe43cb41d0L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11013906056L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0xff1b29b76cL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x113c23283bdL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x113db24924aL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fc0b471fcL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fe3b1dbebL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10fe4879c6aL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x11b4d0ca830L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x10313ed7688L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0xda3dc6e51747593L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x7d58bd9fd9b64463L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x45991daad6a3d34eL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x45991daad6a5c71aL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x300c02df884235d3L), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0xe2b8adb3aba4b3bL), MetaIdFactory.conceptId(0xb401a68083254110L, 0x8fd384331ff25befL, 0x113d09e4da2L)).seal();
}
