package jetbrains.mps.lang.descriptor.generator.template.main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.runtime.MapConfigBase;
import jetbrains.mps.generator.runtime.TemplateMappingConfiguration;
import java.util.Collection;
import jetbrains.mps.generator.runtime.TemplateCreateRootRule;
import jetbrains.mps.generator.runtime.TemplateRootMappingRule;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.runtime.TemplateModel;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.generator.runtime.TemplateUtil;
import jetbrains.mps.generator.template.ITemplateGenerator;
import jetbrains.mps.generator.template.TemplateQueryContext;
import jetbrains.mps.generator.runtime.MapRootRuleBase;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.generator.runtime.TemplateContext;
import jetbrains.mps.generator.runtime.GenerationException;
import jetbrains.mps.generator.runtime.TemplateExecutionEnvironment;
import jetbrains.mps.generator.runtime.CreateRootRuleBase;
import jetbrains.mps.generator.impl.DefaultTemplateContext;

@Generated
public class Mapping_LanguageModule extends MapConfigBase implements TemplateMappingConfiguration {
  private final Collection<TemplateCreateRootRule> createRules;
  private final Collection<TemplateRootMappingRule> rootRules;
  public Mapping_LanguageModule(@NotNull TemplateModel model) {
    super(new SNodePointer("r:1dfaf07d-c77a-451e-91d3-b6f80f0f8508(jetbrains.mps.lang.descriptor.generator.template.main@generator)", "3919235298192647143"), "LanguageModule", model, false);
    createRules = TemplateUtil.<TemplateCreateRootRule>asCollection(new Mapping_LanguageModule.CreateRootRule0());
    rootRules = TemplateUtil.<TemplateRootMappingRule>asCollection(new Mapping_LanguageModule.RootMappingRule0());
  }
  @Override
  public boolean isApplicable(@NotNull ITemplateGenerator generator) {
    return QueriesGenerated.mc_Condition_4(new TemplateQueryContext(getMappingNode(), generator));
  }
  @Override
  public Collection<TemplateCreateRootRule> getCreateRules() {
    return createRules;
  }
  @Override
  public Collection<TemplateRootMappingRule> getRootRules() {
    return rootRules;
  }
  public class RootMappingRule0 extends MapRootRuleBase implements TemplateRootMappingRule {
    public RootMappingRule0() {
      super(new SNodePointer("r:1dfaf07d-c77a-451e-91d3-b6f80f0f8508(jetbrains.mps.lang.descriptor.generator.template.main@generator)", "8780540425167303786"), MetaAdapterFactory.getConcept(0xf4ad079dbc714ffbL, 0x96009328705cf998L, 0x7d2f7947ef1533a5L, "jetbrains.mps.lang.descriptor.structure.LanguageDescriptor"), false, false);
    }
    @Override
    public Collection<SNode> apply(@NotNull final TemplateContext context) throws GenerationException {
      final TemplateExecutionEnvironment environment = context.getEnvironment();
      Collection<SNode> result = new Template_Language().apply(context);
      return result;
    }
  }
  public class CreateRootRule0 extends CreateRootRuleBase implements TemplateCreateRootRule {
    public CreateRootRule0() {
      super(new SNodePointer("r:1dfaf07d-c77a-451e-91d3-b6f80f0f8508(jetbrains.mps.lang.descriptor.generator.template.main@generator)", "3919235298192674546"));
    }
    public Collection<SNode> apply(TemplateExecutionEnvironment environment) throws GenerationException {
      DefaultTemplateContext context = new DefaultTemplateContext(environment, null, null);
      Collection<SNode> result = new Template_language_descriptor().apply(context);
      return result;
    }
  }
}
