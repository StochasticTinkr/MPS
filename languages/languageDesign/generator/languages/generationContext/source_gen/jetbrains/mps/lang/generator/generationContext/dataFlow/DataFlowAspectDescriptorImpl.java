package jetbrains.mps.lang.generator.generationContext.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.framework.DataFlowAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.lang.dataFlow.framework.IDataFlowBuilder;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class DataFlowAspectDescriptorImpl extends DataFlowAspectDescriptorBase {

  @NotNull
  @Override
  public Collection<IDataFlowBuilder> getDataFlowBuilders(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = ((SAbstractConcept) concept);
      switch (index_vhxjlb_a0b.index(cncpt)) {
        case 0:
          return Collections.<IDataFlowBuilder>singletonList(new GenerationContextOp_CreateUniqueName_DataFlow());
        case 1:
          return Collections.<IDataFlowBuilder>singletonList(new GenerationContextOp_GetCopiedOutputByInput_DataFlow());
        case 2:
          return Collections.<IDataFlowBuilder>singletonList(new GenerationContextOp_GetOriginalCopiedInputByOutput_DataFlow());
        case 3:
          return Collections.<IDataFlowBuilder>singletonList(new GenerationContextOp_GetOutputByLabelAndInput_DataFlow());
        case 4:
          return Collections.<IDataFlowBuilder>singletonList(new GenerationContextOp_GetOutputByLabelAndInputAndReferenceScope_DataFlow());
        case 5:
          return Collections.<IDataFlowBuilder>singletonList(new GenerationContextOp_GetOutputListByLabelAndInput_DataFlow());
        case 6:
          return Collections.<IDataFlowBuilder>singletonList(new GenerationContextOp_ShowMessageBase_DataFlow());
        case 7:
          return Collections.<IDataFlowBuilder>singletonList(new GenerationContextOp_UserObjectAccessBase_DataFlow());
        default:
          // default 
      }
    }
    return Collections.<IDataFlowBuilder>emptyList();
  }
  private static final ConceptSwitchIndex index_vhxjlb_a0b = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xd7706f639be2479cL, 0xa3daae92af1e64d5L, 0x11b994bfa0fL), MetaIdFactory.conceptId(0xd7706f639be2479cL, 0xa3daae92af1e64d5L, 0x11b8f9620cdL), MetaIdFactory.conceptId(0xd7706f639be2479cL, 0xa3daae92af1e64d5L, 0x11e42912257L), MetaIdFactory.conceptId(0xd7706f639be2479cL, 0xa3daae92af1e64d5L, 0x11b5282d0dbL), MetaIdFactory.conceptId(0xd7706f639be2479cL, 0xa3daae92af1e64d5L, 0x11c5652e4d5L), MetaIdFactory.conceptId(0xd7706f639be2479cL, 0xa3daae92af1e64d5L, 0x11c529a6c83L), MetaIdFactory.conceptId(0xd7706f639be2479cL, 0xa3daae92af1e64d5L, 0x11b9417864bL), MetaIdFactory.conceptId(0xd7706f639be2479cL, 0xa3daae92af1e64d5L, 0x11b8fe60348L)).seal();
}
