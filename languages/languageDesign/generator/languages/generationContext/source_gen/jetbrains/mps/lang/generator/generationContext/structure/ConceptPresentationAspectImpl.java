package jetbrains.mps.lang.generator.generationContext.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_GenerationContextOp_Base = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_ContextVarRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_CopyWithTrace = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_CreateUniqueName = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_DirtyNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_GenParameterRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_GetCopiedOutputByInput = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_GetExport = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_GetInputModel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_GetInvocationContext = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_GenerationContextOp_GetOriginalCopiedInputByOutput = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_GetOriginalInputModel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_GetOutputByLabel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_GetOutputByLabelAndInput = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_GetOutputByLabelAndInputAndReferenceScope = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_GetOutputListByLabelAndInput = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_GetOutputModel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_GetPrevInputByLabel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_GetTemplateNode = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_GenerationContextOp_LinkPatternRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_NodePatternRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_ParameterRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_PatternRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_PropertyPatternRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_RegisterLabel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_SessionObjectAccess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_ShowErrorMessage = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_ShowInfoMessage = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_ShowMessageBase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_ShowWarningMessage = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_StepObjectAccess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_TransientObjectAccess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_UserObjectAccessBase = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextOp_VarRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GenerationContextType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemplateFunctionParameter_generationContext = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_GenerationContextOp_Base;
      case 1:
        return props_GenerationContextOp_ContextVarRef;
      case 2:
        return props_GenerationContextOp_CopyWithTrace;
      case 3:
        return props_GenerationContextOp_CreateUniqueName;
      case 4:
        return props_GenerationContextOp_DirtyNode;
      case 5:
        return props_GenerationContextOp_GenParameterRef;
      case 6:
        return props_GenerationContextOp_GetCopiedOutputByInput;
      case 7:
        return props_GenerationContextOp_GetExport;
      case 8:
        return props_GenerationContextOp_GetInputModel;
      case 9:
        return props_GenerationContextOp_GetInvocationContext;
      case 10:
        return props_GenerationContextOp_GetOriginalCopiedInputByOutput;
      case 11:
        return props_GenerationContextOp_GetOriginalInputModel;
      case 12:
        return props_GenerationContextOp_GetOutputByLabel;
      case 13:
        return props_GenerationContextOp_GetOutputByLabelAndInput;
      case 14:
        return props_GenerationContextOp_GetOutputByLabelAndInputAndReferenceScope;
      case 15:
        return props_GenerationContextOp_GetOutputListByLabelAndInput;
      case 16:
        return props_GenerationContextOp_GetOutputModel;
      case 17:
        return props_GenerationContextOp_GetPrevInputByLabel;
      case 18:
        return props_GenerationContextOp_GetTemplateNode;
      case 19:
        return props_GenerationContextOp_LinkPatternRef;
      case 20:
        return props_GenerationContextOp_NodePatternRef;
      case 21:
        return props_GenerationContextOp_ParameterRef;
      case 22:
        return props_GenerationContextOp_PatternRef;
      case 23:
        return props_GenerationContextOp_PropertyPatternRef;
      case 24:
        return props_GenerationContextOp_RegisterLabel;
      case 25:
        return props_GenerationContextOp_SessionObjectAccess;
      case 26:
        return props_GenerationContextOp_ShowErrorMessage;
      case 27:
        return props_GenerationContextOp_ShowInfoMessage;
      case 28:
        return props_GenerationContextOp_ShowMessageBase;
      case 29:
        return props_GenerationContextOp_ShowWarningMessage;
      case 30:
        return props_GenerationContextOp_StepObjectAccess;
      case 31:
        return props_GenerationContextOp_TransientObjectAccess;
      case 32:
        return props_GenerationContextOp_UserObjectAccessBase;
      case 33:
        return props_GenerationContextOp_VarRef;
      case 34:
        return props_GenerationContextType;
      case 35:
        return props_TemplateFunctionParameter_generationContext;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
