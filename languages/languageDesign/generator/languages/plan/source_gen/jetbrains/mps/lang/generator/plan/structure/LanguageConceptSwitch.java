package jetbrains.mps.lang.generator.plan.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int ApplyGenerators = 0;
  public static final int Checkpoint = 1;
  public static final int CheckpointDeclaration = 2;
  public static final int CheckpointSpecification = 3;
  public static final int CheckpointSynchronization = 4;
  public static final int DeclaredCheckpointSpec = 5;
  public static final int DocumentationLine = 6;
  public static final int DocumentationStep = 7;
  public static final int Fork = 8;
  public static final int InPlaceCheckpointRefSpec = 9;
  public static final int InPlaceCheckpointSpec = 10;
  public static final int IncludePlan = 11;
  public static final int Plan = 12;
  public static final int Step = 13;
  public static final int TextDocLine = 14;
  public static final int Transform = 15;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x7ab1a6fa0a114b95L, 0x9e4875f363d6cb00L);
    builder.put(0x73246de9adeca171L, ApplyGenerators);
    builder.put(0x19443180a2071801L, Checkpoint);
    builder.put(0x56d679ca1f4b53ceL, CheckpointDeclaration);
    builder.put(0x340cd07aed7ca164L, CheckpointSpecification);
    builder.put(0xc11e5088a794d07L, CheckpointSynchronization);
    builder.put(0x340cd07aed7cb2fdL, DeclaredCheckpointSpec);
    builder.put(0xc6a8aea78a50f67L, DocumentationLine);
    builder.put(0xc6a8aea78a4805dL, DocumentationStep);
    builder.put(0x2bf683196b12a3cbL, Fork);
    builder.put(0x340cd07aed7cb32cL, InPlaceCheckpointRefSpec);
    builder.put(0x340cd07aed7ca161L, InPlaceCheckpointSpec);
    builder.put(0x336c2500000e1b2fL, IncludePlan);
    builder.put(0x19443180a20717fbL, Plan);
    builder.put(0x19443180a20717fcL, Step);
    builder.put(0x2913ee226f7cdcb5L, TextDocLine);
    builder.put(0x19443180a2071802L, Transform);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
