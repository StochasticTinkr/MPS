package jetbrains.mps.lang.generator.plan.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ApplyGenerators = new ConceptPresentationBuilder().shortDesc("Collection of generators to apply directly").create();
  private final ConceptPresentation props_Checkpoint = new ConceptPresentationBuilder().shortDesc("Synchronization point of a generation plan").create();
  private final ConceptPresentation props_Plan = new ConceptPresentationBuilder().shortDesc("Sequence of transformation steps").create();
  private final ConceptPresentation props_Step = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Transform = new ConceptPresentationBuilder().shortDesc("Collection of languages to reduce (iow, generators to apply)").create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ApplyGenerators:
        return props_ApplyGenerators;
      case LanguageConceptSwitch.Checkpoint:
        return props_Checkpoint;
      case LanguageConceptSwitch.Plan:
        return props_Plan;
      case LanguageConceptSwitch.Step:
        return props_Step;
      case LanguageConceptSwitch.Transform:
        return props_Transform;
    }
    return null;
  }
}
