package jetbrains.mps.lang.quotation.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractAntiquotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Antiquotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_InternalReferenceHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_PropertyDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GeneratorInternal_ReferenceDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListAntiquotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeBuilder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeBuilderExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeBuilderInitLink = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeBuilderInitPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeBuilderInitProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeBuilderList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeBuilderNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodeBuilderRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyAntiquotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Quotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReferenceAntiquotation = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractAntiquotation;
      case 1:
        return props_Antiquotation;
      case 2:
        return props_GeneratorInternal_InternalReferenceHolder;
      case 3:
        return props_GeneratorInternal_PropertyDescriptor;
      case 4:
        return props_GeneratorInternal_ReferenceDescriptor;
      case 5:
        return props_ListAntiquotation;
      case 6:
        return props_NodeBuilder;
      case 7:
        return props_NodeBuilderExpression;
      case 8:
        return props_NodeBuilderInitLink;
      case 9:
        return props_NodeBuilderInitPart;
      case 10:
        return props_NodeBuilderInitProperty;
      case 11:
        return props_NodeBuilderList;
      case 12:
        return props_NodeBuilderNode;
      case 13:
        return props_NodeBuilderRef;
      case 14:
        return props_PropertyAntiquotation;
      case 15:
        return props_Quotation;
      case 16:
        return props_ReferenceAntiquotation;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
