package jetbrains.mps.lang.quotation.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myAbstractAntiquotation__BehaviorDescriptor = new AbstractAntiquotation__BehaviorDescriptor();
  private final BHDescriptor myAntiquotation__BehaviorDescriptor = new Antiquotation__BehaviorDescriptor();
  private final BHDescriptor myQuotation__BehaviorDescriptor = new Quotation__BehaviorDescriptor();
  private final BHDescriptor myReferenceAntiquotation__BehaviorDescriptor = new ReferenceAntiquotation__BehaviorDescriptor();
  private final BHDescriptor myListAntiquotation__BehaviorDescriptor = new ListAntiquotation__BehaviorDescriptor();
  private final BHDescriptor myPropertyAntiquotation__BehaviorDescriptor = new PropertyAntiquotation__BehaviorDescriptor();
  private final BHDescriptor myNodeBuilder__BehaviorDescriptor = new NodeBuilder__BehaviorDescriptor();
  private final BHDescriptor myNodeBuilderNode__BehaviorDescriptor = new NodeBuilderNode__BehaviorDescriptor();
  private final BHDescriptor myNodeBuilderInitLink__BehaviorDescriptor = new NodeBuilderInitLink__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myAbstractAntiquotation__BehaviorDescriptor;
      case 1:
        return myAntiquotation__BehaviorDescriptor;
      case 2:
        return myListAntiquotation__BehaviorDescriptor;
      case 3:
        return myNodeBuilder__BehaviorDescriptor;
      case 4:
        return myNodeBuilderInitLink__BehaviorDescriptor;
      case 5:
        return myNodeBuilderNode__BehaviorDescriptor;
      case 6:
        return myPropertyAntiquotation__BehaviorDescriptor;
      case 7:
        return myQuotation__BehaviorDescriptor;
      case 8:
        return myReferenceAntiquotation__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x3a13115c633c4c5cL, 0xbbcc75c4219e9555L, 0x1168c104656L), MetaIdFactory.conceptId(0x3a13115c633c4c5cL, 0xbbcc75c4219e9555L, 0x1168c104658L), MetaIdFactory.conceptId(0x3a13115c633c4c5cL, 0xbbcc75c4219e9555L, 0x1168c10465eL), MetaIdFactory.conceptId(0x3a13115c633c4c5cL, 0xbbcc75c4219e9555L, 0x4bb51009d20a4a9dL), MetaIdFactory.conceptId(0x3a13115c633c4c5cL, 0xbbcc75c4219e9555L, 0x4bb51009d20c8e1aL), MetaIdFactory.conceptId(0x3a13115c633c4c5cL, 0xbbcc75c4219e9555L, 0x4bb51009d20a4aa0L), MetaIdFactory.conceptId(0x3a13115c633c4c5cL, 0xbbcc75c4219e9555L, 0x116aac96587L), MetaIdFactory.conceptId(0x3a13115c633c4c5cL, 0xbbcc75c4219e9555L, 0x1168c104659L), MetaIdFactory.conceptId(0x3a13115c633c4c5cL, 0xbbcc75c4219e9555L, 0x1168c10465dL)).seal();
}
