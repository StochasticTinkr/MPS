package jetbrains.mps.lang.resources.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.lang.resources.behavior.Image__BehaviorDescriptor;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.nodeEditor.cells.EditorCell_Image;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import jetbrains.mps.editor.runtime.EditorUtil;

public class Image_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_w2956w_a(editorContext, node);
  }
  private EditorCell createCollection_w2956w_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_w2956w_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createAlternation_w2956w_a0(editorContext, node));
    editorCell.addEditorCell(this.createJComponent_w2956w_b0(editorContext, node));
    return editorCell;
  }
  private EditorCell createAlternation_w2956w_a0(EditorContext editorContext, SNode node) {
    boolean alternationCondition = true;
    alternationCondition = Image_Editor.renderingCondition_w2956w_a0a(node, editorContext);
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = this.createConstant_w2956w_a0a(editorContext, node);
    } else {
      editorCell = this.createAlternation_w2956w_a0a(editorContext, node);
    }
    return editorCell;
  }
  private static boolean renderingCondition_w2956w_a0a(SNode node, EditorContext editorContext) {
    return isEmptyString(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0xb8b96b5078f3367L, 0xb8b96b5078f33bbL, "file")));
  }
  private EditorCell createConstant_w2956w_a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "<no icon>");
    editorCell.setCellId("Constant_w2956w_a0a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.lightGray));
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createAlternation_w2956w_a0a(EditorContext editorContext, SNode node) {
    boolean alternationCondition = true;
    alternationCondition = Image_Editor.renderingCondition_w2956w_a0a0(node, editorContext);
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = this.createCollection_w2956w_a0a0(editorContext, node);
    } else {
      editorCell = this.createConstant_w2956w_a0a0(editorContext, node);
    }
    return editorCell;
  }
  private static boolean renderingCondition_w2956w_a0a0(SNode node, EditorContext editorContext) {
    return (boolean) Image__BehaviorDescriptor.isValid_idIb_Fk7zRKP.invoke(node);
  }
  private EditorCell createCollection_w2956w_a0a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_w2956w_a0a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createImage_w2956w_a0a0a(editorContext, node));
    return editorCell;
  }
  private EditorCell createImage_w2956w_a0a0a(final EditorContext editorContext, final SNode node) {
    SModule imageModule;
    String imagePath;
    imageModule = SNodeOperations.getModel(node).getModule();
    imagePath = (new _FunctionTypes._return_P0_E0<String>() {
      public String invoke() {
        return MacrosFactory.forModule(((AbstractModule) SNodeOperations.getModel(node).getModule())).expandPath(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0xb8b96b5078f3367L, 0xb8b96b5078f33bbL, "file")));
      }
    }).invoke();
    EditorCell_Image editorCell = EditorCell_Image.createImageCell(editorContext, node, imageModule, imagePath);
    editorCell.setCellId("Image_w2956w_a0a0a");
    editorCell.setDescent(0);
    return editorCell;
  }
  private EditorCell createConstant_w2956w_a0a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "<invalid path>");
    editorCell.setCellId("Constant_w2956w_a0a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.red));
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createJComponent_w2956w_b0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, Image_Editor._QueryFunction_JComponent_w2956w_a1a(node, editorContext), "_w2956w_b0");
    editorCell.setCellId("JComponent_w2956w_b0");
    return editorCell;
  }
  private static JComponent _QueryFunction_JComponent_w2956w_a1a(final SNode node, final EditorContext editorContext) {
    return EditorUtil.createSelectIconButton(node, "file", editorContext);
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
