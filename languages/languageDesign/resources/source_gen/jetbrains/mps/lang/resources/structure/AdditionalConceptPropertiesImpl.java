package jetbrains.mps.lang.resources.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalConceptPropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_Icon = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IconBundle = new ConceptPropsBuilder().icon("iconResourceBundle.png", AdditionalConceptPropertiesImpl.class).create();
  private final AdditionalConceptProperties props_IconDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IconExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IconReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IconResourceExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Resource = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_5xh3cq_a0i.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_Icon;
          }
          break;
        case 1:
          if (true) {
            return props_IconBundle;
          }
          break;
        case 2:
          if (true) {
            return props_IconDeclaration;
          }
          break;
        case 3:
          if (true) {
            return props_IconExpression;
          }
          break;
        case 4:
          if (true) {
            return props_IconReference;
          }
          break;
        case 5:
          if (true) {
            return props_IconResourceExpression;
          }
          break;
        case 6:
          if (true) {
            return props_Resource;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_5xh3cq_a0i = buildConceptIndices(MetaAdapterFactory.getConcept(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6bbL, "Icon"), MetaAdapterFactory.getConcept(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6bdL, "IconBundle"), MetaAdapterFactory.getConcept(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6c0L, "IconDeclaration"), MetaAdapterFactory.getConcept(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6c3L, "IconExpression"), MetaAdapterFactory.getConcept(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6c7L, "IconReference"), MetaAdapterFactory.getConcept(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x52fb86deea79455eL, "IconResourceExpression"), MetaAdapterFactory.getInterfaceConcept(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6caL, "Resource"));
}
