package jetbrains.mps.lang.resources.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Circle = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Color = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ColorLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FileIcon = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6bbL, 0x26417c377428f6b3L, "file")).create();
  private final ConceptPresentation props_Icon = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IconExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IconLayerDescription = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IconResourceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Image = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OldIconBundle = new ConceptPresentationBuilder().deprecated().icon(IconContainer.RESOURCE_a0a0j).create();
  private final ConceptPresentation props_OldIconDeclaration = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_OldIconReference = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_Primitive = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Rect = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Resource = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6caL, 0x7c8b08a50a39c6cbL, "path")).create();
  private final ConceptPresentation props_Text = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextIcon = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("982eb8df-2c96-4bd7-9963-11712ea622e5"), "jetbrains.mps.lang.resources")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_Circle;
      case 1:
        return props_Color;
      case 2:
        return props_ColorLiteral;
      case 3:
        return props_FileIcon;
      case 4:
        return props_Icon;
      case 5:
        return props_IconExpression;
      case 6:
        return props_IconLayerDescription;
      case 7:
        return props_IconResourceExpression;
      case 8:
        return props_Image;
      case 9:
        return props_OldIconBundle;
      case 10:
        return props_OldIconDeclaration;
      case 11:
        return props_OldIconReference;
      case 12:
        return props_Primitive;
      case 13:
        return props_Rect;
      case 14:
        return props_Resource;
      case 15:
        return props_Text;
      case 16:
        return props_TextIcon;
    }
    throw new IllegalStateException();
  }
}
