package jetbrains.mps.lang.resources.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.lang.resources.behavior.FileIcon__BehaviorDescriptor;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.baseLanguage.closures.runtime._FunctionTypes;
import jetbrains.mps.util.MacrosFactory;
import jetbrains.mps.project.AbstractModule;
import jetbrains.mps.nodeEditor.cells.EditorCell_Image;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import jetbrains.mps.editor.runtime.EditorUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.OldNewCompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.lang.editor.menus.substitute.DefaultEmptyCellSubstituteMenuLookup;
import jetbrains.mps.editor.runtime.EditorCell_Empty;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.nodeEditor.cellActions.CellAction_DeleteNode;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import java.awt.Color;

public class FileIcon_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_tl1n57_a(editorContext, node);
  }
  public EditorCell createInspectedCell(EditorContext editorContext, SNode node) {
    return this.createProperty_tl1n57_a(editorContext, node);
  }
  private EditorCell createCollection_tl1n57_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_tl1n57_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createCollection_tl1n57_a0(editorContext, node));
    if (renderingCondition_tl1n57_a1a_0(node, editorContext)) {
      editorCell.addEditorCell(this.createAlternation_tl1n57_b0(editorContext, node));
    }
    return editorCell;
  }
  private EditorCell createCollection_tl1n57_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_tl1n57_a0");
    editorCell.addEditorCell(this.createAlternation_tl1n57_a0a(editorContext, node));
    editorCell.addEditorCell(this.createJComponent_tl1n57_b0a(editorContext, node));
    return editorCell;
  }
  private EditorCell createAlternation_tl1n57_a0a(EditorContext editorContext, SNode node) {
    boolean alternationCondition = true;
    alternationCondition = FileIcon_Editor.renderingCondition_tl1n57_a0a0(node, editorContext);
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = this.createConstant_tl1n57_a0a0(editorContext, node);
    } else {
      editorCell = this.createAlternation_tl1n57_a0a0(editorContext, node);
    }
    return editorCell;
  }
  private static boolean renderingCondition_tl1n57_a0a0(SNode node, EditorContext editorContext) {
    return isEmptyString(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6bbL, 0x26417c377428f6b3L, "file")));
  }
  private EditorCell createConstant_tl1n57_a0a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "<no icon>");
    editorCell.setCellId("Constant_tl1n57_a0a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.lightGray));
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createAlternation_tl1n57_a0a0(EditorContext editorContext, SNode node) {
    boolean alternationCondition = true;
    alternationCondition = FileIcon_Editor.renderingCondition_tl1n57_a0a0a(node, editorContext);
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = this.createCollection_tl1n57_a0a0a(editorContext, node);
    } else {
      editorCell = this.createConstant_tl1n57_a0a0a(editorContext, node);
    }
    return editorCell;
  }
  private static boolean renderingCondition_tl1n57_a0a0a(SNode node, EditorContext editorContext) {
    return (boolean) FileIcon__BehaviorDescriptor.isValid_id7Mb2akaestJ.invoke(node);
  }
  private EditorCell createCollection_tl1n57_a0a0a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_tl1n57_a0a0a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createImage_tl1n57_a0a0a0(editorContext, node));
    return editorCell;
  }
  private EditorCell createImage_tl1n57_a0a0a0(final EditorContext editorContext, final SNode node) {
    SModule imageModule;
    String imagePath;
    imageModule = SNodeOperations.getModel(node).getModule();
    imagePath = (new _FunctionTypes._return_P0_E0<String>() {
      public String invoke() {
        return MacrosFactory.forModule(((AbstractModule) SNodeOperations.getModel(node).getModule())).expandPath(SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6bbL, 0x26417c377428f6b3L, "file")));
      }
    }).invoke();
    EditorCell_Image editorCell = EditorCell_Image.createImageCell(editorContext, node, imageModule, imagePath);
    editorCell.setCellId("Image_tl1n57_a0a0a0");
    editorCell.setDescent(0);
    return editorCell;
  }
  private EditorCell createConstant_tl1n57_a0a0a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "<invalid path>");
    editorCell.setCellId("Constant_tl1n57_a0a0a");
    Style style = new StyleImpl();
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.red));
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createJComponent_tl1n57_b0a(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, FileIcon_Editor._QueryFunction_JComponent_tl1n57_a1a0(node, editorContext), "_tl1n57_b0a");
    editorCell.setCellId("JComponent_tl1n57_b0a");
    return editorCell;
  }
  private static JComponent _QueryFunction_JComponent_tl1n57_a1a0(final SNode node, final EditorContext editorContext) {
    return EditorUtil.createSelectIconButton(node, "file", editorContext);
  }
  private EditorCell createAlternation_tl1n57_b0(EditorContext editorContext, SNode node) {
    boolean alternationCondition = true;
    alternationCondition = FileIcon_Editor.renderingCondition_tl1n57_a1a(node, editorContext);
    EditorCell editorCell = null;
    if (alternationCondition) {
      editorCell = this.createRefNode_tl1n57_a1a(editorContext, node);
    } else {
      editorCell = this.createEmpty_tl1n57_a1a(editorContext, node);
    }
    return editorCell;
  }
  private static boolean renderingCondition_tl1n57_a1a(SNode node, EditorContext editorContext) {
    return (SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6bbL, 0x60d1cf8c81faea09L, "iconExpression")) != null);
  }
  private static boolean renderingCondition_tl1n57_a1a_0(SNode node, EditorContext editorContext) {
    return (SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6bbL, 0x60d1cf8c81faea09L, "iconExpression")) != null);
  }
  private EditorCell createRefNode_tl1n57_a1a(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new FileIcon_Editor.iconExpressionSingleRoleHandler_tl1n57_a1a(node, MetaAdapterFactory.getContainmentLink(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6bbL, 0x60d1cf8c81faea09L, "iconExpression"), editorContext);
    return provider.createCell();
  }
  private class iconExpressionSingleRoleHandler_tl1n57_a1a extends SingleRoleCellProvider {
    public iconExpressionSingleRoleHandler_tl1n57_a1a(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new OldNewCompositeSubstituteInfo(myEditorContext, new SChildSubstituteInfo(editorCell, myOwnerNode, MetaAdapterFactory.getContainmentLink(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6bbL, 0x60d1cf8c81faea09L, "iconExpression"), child), new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext)));
      if (editorCell.getRole() == null) {
        editorCell.setRole("iconExpression");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_iconExpression");
      installCellInfo(null, editorCell);
      editorCell.setTransformationMenuLookup(new DefaultEmptyCellSubstituteMenuLookup(MetaAdapterFactory.getContainmentLink(0x982eb8df2c964bd7L, 0x996311712ea622e5L, 0x7c8b08a50a39c6bbL, 0x60d1cf8c81faea09L, "iconExpression")));

      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no iconExpression>";
    }
  }
  private EditorCell createEmpty_tl1n57_a1a(EditorContext editorContext, SNode node) {
    EditorCell_Empty editorCell = new EditorCell_Empty(editorContext, node);
    editorCell.setAction(CellActionType.DELETE, new CellAction_DeleteNode(editorCell.getSNode(), CellAction_DeleteNode.DeleteDirection.FORWARD));
    editorCell.setAction(CellActionType.BACKSPACE, new CellAction_DeleteNode(editorCell.getSNode(), CellAction_DeleteNode.DeleteDirection.BACKWARD));
    editorCell.setCellId("Empty_tl1n57_a1a");
    return editorCell;
  }
  private EditorCell createProperty_tl1n57_a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("file");
    provider.setNoTargetText("<no file>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_file");
    editorCell.setBig(true);
    Style style = new StyleImpl();
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(FileIcon_Editor._StyleParameter_QueryFunction_tl1n57_a0a(editorContext, node)));
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private static Color _StyleParameter_QueryFunction_tl1n57_a0a(EditorContext editorContext, SNode node) {
    return ((boolean) FileIcon__BehaviorDescriptor.isValid_id7Mb2akaestJ.invoke(node) ? Color.BLACK : Color.RED);
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
