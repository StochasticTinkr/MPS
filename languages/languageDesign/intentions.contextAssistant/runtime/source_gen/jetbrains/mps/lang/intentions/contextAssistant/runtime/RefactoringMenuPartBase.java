package jetbrains.mps.lang.intentions.contextAssistant.runtime;

/*Generated by MPS */

import jetbrains.mps.lang.editor.menus.transformation.SingleItemMenuPart;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.menus.transformation.MenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import jetbrains.mps.refactoring.framework.IRefactoring;
import jetbrains.mps.refactoring.framework.RefactoringUtil;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.openapi.editor.menus.transformation.ActionItemBase;
import jetbrains.mps.project.MPSProject;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import com.intellij.ide.DataManager;
import java.awt.Component;
import jetbrains.mps.refactoring.framework.RefactoringContext;
import java.util.Collections;
import jetbrains.mps.refactoring.runtime.access.RefactoringAccess;

public class RefactoringMenuPartBase extends SingleItemMenuPart {
  private final String myRefactoringClassName;

  public RefactoringMenuPartBase(String refactoringClassName) {
    myRefactoringClassName = refactoringClassName;
  }

  @Nullable
  @Override
  protected MenuItem createItem(TransformationMenuContext context) {
    IRefactoring refactoring = RefactoringUtil.getRefactoringByClassName(myRefactoringClassName);
    if (refactoring == null) {
      return null;
    }

    return createItem(context, refactoring);
  }

  @Nullable
  protected MenuItem createItem(@NotNull TransformationMenuContext context, @NotNull IRefactoring refactoring) {
    return null;
  }

  protected static class ItemBase extends ActionItemBase {
    protected final TransformationMenuContext _context;
    protected final IRefactoring myRefactoring;

    protected ItemBase(TransformationMenuContext context, IRefactoring refactoring) {
      _context = context;
      myRefactoring = refactoring;
    }

    @Nullable
    @Override
    public String getLabelText(@NotNull String pattern) {
      return myRefactoring.getUserFriendlyName();
    }

    @Override
    public void execute(@NotNull String pattern) {
      MPSProject project = MPSCommonDataKeys.MPS_PROJECT.getData(DataManager.getInstance().getDataContext((Component) _context.getEditorContext().getEditorComponent()));

      RefactoringContext refactoringContext = RefactoringContext.createRefactoringContext(myRefactoring, Collections.emptyList(), Collections.emptyList(), _context.getNode(), project);
      RefactoringAccess.getInstance().getRefactoringFacade().execute(refactoringContext);
    }
  }
}
