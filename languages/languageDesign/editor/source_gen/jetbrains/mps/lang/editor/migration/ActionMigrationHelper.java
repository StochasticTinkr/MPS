package jetbrains.mps.lang.editor.migration;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.smodel.LanguageAspect;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;

public class ActionMigrationHelper {
  public static boolean isDefinedInLanguage(SNode concept, Language language) {
    SModel structure = LanguageAspect.STRUCTURE.get(language);
    return structure != null && Sequence.fromIterable(((Iterable<SNode>) structure.getRootNodes())).contains(concept);
  }
  public static SModel getOrCreateEditorAspect(Language language) {
    SModel editorAspect = getEditorAspect(language);
    if (editorAspect == null) {
      editorAspect = LanguageAspect.EDITOR.createNew(language);
    }
    return editorAspect;
  }
  public static SModel getEditorAspect(Language language) {
    return LanguageAspect.EDITOR.get(language);
  }
  public static String substituteSpacesWithUnderscore(String name) {
    if (name == null) {
      return name;
    }
    return name.replace(' ', '_');
  }
  public static String getMainMenuContributionName(SNode concept, String tag) {
    return SPropertyOperations.getString(concept, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "_" + tag + "_Contribution";
  }
  public static String getMainMenuContributionName(SNode concept) {
    return SPropertyOperations.getString(concept, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + "_" + "_Contribution";
  }
  public static SNode wrapDotExpressionToStatement(SNode expression) {
    SNode expressionStatement = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, "jetbrains.mps.baseLanguage.structure.ExpressionStatement"));
    SLinkOperations.setTarget(expressionStatement, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b213L, 0xf8cc56b214L, "expression"), expression);
    return expressionStatement;
  }
  public static void replace(SNode result, SAbstractConcept conceptToReplace, final SAbstractConcept conceptToReplaceOnto) {
    ListSequence.fromList(SNodeOperations.getNodeDescendants(result, SNodeOperations.asSConcept(conceptToReplace), false, new SAbstractConcept[]{})).visitAll(new IVisitor<SNode>() {
      public void visit(SNode it) {
        SNodeOperations.replaceWithAnother(it, SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(conceptToReplaceOnto)));
      }
    });
  }
  public static SNode getLastStatement(SNode statementList) {
    return ListSequence.fromList(SLinkOperations.getChildren(statementList, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L, 0xf8cc6bf961L, "statement"))).reversedList().findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return !((eq_qgr84z_a0a0a0a0a0a0a0i(SNodeOperations.getConcept(it), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L, "jetbrains.mps.baseLanguage.structure.Statement"))));
      }
    });
  }


  private static boolean eq_qgr84z_a0a0a0a0a0a0a0i(Object a, Object b) {
    return (a != null ? a.equals(b) : a == b);
  }
}
