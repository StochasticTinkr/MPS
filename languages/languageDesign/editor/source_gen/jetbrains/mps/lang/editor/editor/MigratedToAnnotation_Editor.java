package jetbrains.mps.lang.editor.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.RefCellCellProvider;
import jetbrains.mps.openapi.editor.style.StyleRegistry;
import jetbrains.mps.nodeEditor.MPSColors;
import jetbrains.mps.nodeEditor.MPSFonts;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.InlineCellProvider;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.EditorCell_RefPresentation;
import jetbrains.mps.nodeEditor.attribute.AttributeKind;

public class MigratedToAnnotation_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_9ydd10_a(editorContext, node);
  }
  private EditorCell createCollection_9ydd10_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_9ydd10_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_9ydd10_a0(editorContext, node));
    if (renderingCondition_9ydd10_a1a(node, editorContext)) {
      editorCell.addEditorCell(this.createCollection_9ydd10_b0(editorContext, node));
    }
    editorCell.addEditorCell(this.createAttributedNodeCell_9ydd10_c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_9ydd10_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "@Migrated");
    editorCell.setCellId("Constant_9ydd10_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_9ydd10_b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_9ydd10_b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createRefCell_9ydd10_a1a(editorContext, node));
    return editorCell;
  }
  private static boolean renderingCondition_9ydd10_a1a(SNode node, EditorContext editorContext) {
    return (SLinkOperations.getTarget(node, MetaAdapterFactory.getReferenceLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7ce01982652a98aL, 0x7ce01982652a9f9L, "migratedTo")) != null);
  }
  private EditorCell createRefCell_9ydd10_a1a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new RefCellCellProvider(node, editorContext);
    provider.setRole("migratedTo");
    provider.setNoTargetText("<no migratedTo>");
    EditorCell editorCell;
    provider.setAuxiliaryCellProvider(new MigratedToAnnotation_Editor._Inline_9ydd10_a0b0());
    editorCell = provider.createEditorCell(editorContext);
    if (editorCell.getRole() == null) {
      editorCell.setReferenceCell(true);
      editorCell.setRole("migratedTo");
    }
    Style style = new StyleImpl();
    style.set(StyleAttributes.NAVIGATABLE_REFERENCE, 0, "migratedTo");
    style.set(StyleAttributes.TEXT_COLOR, 0, StyleRegistry.getInstance().getSimpleColor(MPSColors.DARK_BLUE));
    style.set(StyleAttributes.FONT_STYLE, 0, MPSFonts.ITALIC);
    editorCell.getStyle().putAll(style);
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  public static class _Inline_9ydd10_a0b0 extends InlineCellProvider {
    public _Inline_9ydd10_a0b0() {
      super();
    }
    public EditorCell createEditorCell(EditorContext editorContext) {
      return this.createEditorCell(editorContext, this.getSNode());
    }
    public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
      return this.createReferencePresentation_9ydd10_a0a1a(editorContext, node);
    }
    private EditorCell createReferencePresentation_9ydd10_a0a1a(EditorContext editorContext, SNode node) {
      EditorCell_Property editorCell = EditorCell_RefPresentation.create(editorContext, node, this.getRefNode(), "migratedTo");
      editorCell.setCellId("ReferencePresentation_9ydd10_a0a1a");
      return editorCell;
    }
  }
  private EditorCell createAttributedNodeCell_9ydd10_c0(EditorContext editorContext, SNode node) {
    EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
    EditorCell editorCell = manager.getCurrentAttributedCellWithRole(AttributeKind.Node.class, node);
    return editorCell;
  }
}
