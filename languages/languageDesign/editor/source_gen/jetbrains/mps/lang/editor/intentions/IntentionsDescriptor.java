package jetbrains.mps.lang.editor.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.IntentionAspectBase;
import jetbrains.mps.intentions.IntentionFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.HashMap;
import org.jetbrains.annotations.Nullable;
import java.util.Collection;
import org.jetbrains.annotations.NotNull;
import java.util.Arrays;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class IntentionsDescriptor extends IntentionAspectBase {
  private static final IntentionFactory[] EMPTY_ARRAY = new IntentionFactory[0];
  private Map<SAbstractConcept, IntentionFactory[]> myCached = new HashMap<SAbstractConcept, IntentionFactory[]>();

  public IntentionsDescriptor() {
  }

  @Nullable
  public Collection<IntentionFactory> getIntentions(@NotNull SAbstractConcept concept) {
    if (myCached.containsKey(concept)) {
      return Arrays.asList(myCached.get(concept));
    }

    IntentionFactory[] intentions = EMPTY_ARRAY;
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_hphjzv_d0f.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            // Concept: BooleanStyleSheetItem 
            intentions = new IntentionFactory[1];
            intentions[0] = new BooleanQuery_Intention();
          }
          break;
        case 1:
          if (true) {
            // Concept: CellModel_Alternation 
            intentions = new IntentionFactory[1];
            intentions[0] = new ChangeOrientationAlternation_Intention();
          }
          break;
        case 2:
          if (true) {
            // Concept: CellModel_Collection 
            intentions = new IntentionFactory[3];
            intentions[0] = new ChangeOrientationCollection_Intention();
            intentions[1] = new UseIndentLayoutInCollection_Intention();
            intentions[2] = new MigrateToIndentLayout_Intention();
          }
          break;
        case 3:
          if (true) {
            // Concept: CellModel_Constant 
            intentions = new IntentionFactory[2];
            intentions[0] = new SplitConstantCellIntoWords_Intention();
            intentions[1] = new TrimConstantCell_Intention();
          }
          break;
        case 4:
          if (true) {
            // Concept: CellModel_ListWithRole 
            intentions = new IntentionFactory[1];
            intentions[0] = new ChangeOrientationList_Intention();
          }
          break;
        case 5:
          if (true) {
            // Concept: CellModel_NonEmptyProperty 
            intentions = new IntentionFactory[1];
            intentions[0] = new ChangeNonEmptyProperty_Intention();
          }
          break;
        case 6:
          if (true) {
            // Concept: CellModel_Property 
            intentions = new IntentionFactory[2];
            intentions[0] = new ChangeProperty_Intention();
            intentions[1] = new ChangePropertyWithNonEmpty_Intention();
          }
          break;
        case 7:
          if (true) {
            // Concept: CellModel_RefNodeList 
            intentions = new IntentionFactory[1];
            intentions[0] = new UseIndentLayoutInRefNodeList_Intention();
          }
          break;
        case 8:
          if (true) {
            // Concept: CellModel_TransactionalProperty 
            intentions = new IntentionFactory[1];
            intentions[0] = new ChangeTransactionalProperty_Intention();
          }
          break;
        case 9:
          if (true) {
            // Concept: ColorStyleClassItem 
            intentions = new IntentionFactory[1];
            intentions[0] = new ColorQuery_Intention();
          }
          break;
        case 10:
          if (true) {
            // Concept: ConceptEditorDeclaration 
            intentions = new IntentionFactory[2];
            intentions[0] = new GenerateMultiLineDefaultEditor_Intention();
            intentions[1] = new GenerateSingleLineDefaultEditor_Intention();
          }
          break;
        case 11:
          if (true) {
            // Concept: EditorCellModel 
            intentions = new IntentionFactory[10];
            intentions[0] = new SurroundWithVerticalCollection_Intention();
            intentions[1] = new SurroundWithHorizontalCollection_Intention();
            intentions[2] = new AddNewLine_Intention();
            intentions[3] = new AddIndent_Intention();
            intentions[4] = new AddOnNewLine_Intention();
            intentions[5] = new RemoveIndent_Intention();
            intentions[6] = new RemoveNewLine_Intention();
            intentions[7] = new RemoveOnNewLine_Intention();
            intentions[8] = new AddRemoveNewLineForChildren_Intention();
            intentions[9] = new SurroundWithIndentCollection_Intention();
          }
          break;
        case 12:
          if (true) {
            // Concept: FontStyleStyleClassItem 
            intentions = new IntentionFactory[1];
            intentions[0] = new FontStyleQuery_Intention();
          }
          break;
        case 13:
          if (true) {
            // Concept: StyleClass 
            intentions = new IntentionFactory[1];
            intentions[0] = new AddDominance_Intention();
          }
          break;
        case 14:
          if (true) {
            // Concept: StyleSheetClass 
            intentions = new IntentionFactory[1];
            intentions[0] = new AddExtendsClause_Intention();
          }
          break;
        default:
          // default 
      }
    }
    myCached.put(concept, intentions);
    return Arrays.asList(intentions);
  }

  @NotNull
  @Override
  public Collection<IntentionFactory> getAllIntentions() {
    IntentionFactory[] rv = new IntentionFactory[29];
    rv[0] = new SurroundWithVerticalCollection_Intention();
    rv[1] = new SurroundWithHorizontalCollection_Intention();
    rv[2] = new ColorQuery_Intention();
    rv[3] = new FontStyleQuery_Intention();
    rv[4] = new BooleanQuery_Intention();
    rv[5] = new SplitConstantCellIntoWords_Intention();
    rv[6] = new TrimConstantCell_Intention();
    rv[7] = new ChangeOrientationCollection_Intention();
    rv[8] = new ChangeOrientationList_Intention();
    rv[9] = new ChangeOrientationAlternation_Intention();
    rv[10] = new ChangeProperty_Intention();
    rv[11] = new ChangeTransactionalProperty_Intention();
    rv[12] = new UseIndentLayoutInCollection_Intention();
    rv[13] = new UseIndentLayoutInRefNodeList_Intention();
    rv[14] = new AddNewLine_Intention();
    rv[15] = new AddIndent_Intention();
    rv[16] = new AddOnNewLine_Intention();
    rv[17] = new RemoveIndent_Intention();
    rv[18] = new RemoveNewLine_Intention();
    rv[19] = new RemoveOnNewLine_Intention();
    rv[20] = new MigrateToIndentLayout_Intention();
    rv[21] = new AddExtendsClause_Intention();
    rv[22] = new AddRemoveNewLineForChildren_Intention();
    rv[23] = new SurroundWithIndentCollection_Intention();
    rv[24] = new ChangePropertyWithNonEmpty_Intention();
    rv[25] = new ChangeNonEmptyProperty_Intention();
    rv[26] = new GenerateMultiLineDefaultEditor_Intention();
    rv[27] = new GenerateSingleLineDefaultEditor_Intention();
    rv[28] = new AddDominance_Intention();
    return Arrays.asList(rv);
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_hphjzv_d0f = buildConceptIndices(MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143bd1283bL, "jetbrains.mps.lang.editor.structure.BooleanStyleSheetItem"), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfd766383e4L, "jetbrains.mps.lang.editor.structure.CellModel_Alternation"), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eaff2517L, "jetbrains.mps.lang.editor.structure.CellModel_Collection"), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb01232eL, "jetbrains.mps.lang.editor.structure.CellModel_Constant"), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1098c8cf48aL, "jetbrains.mps.lang.editor.structure.CellModel_ListWithRole"), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x113bef3a464L, "jetbrains.mps.lang.editor.structure.CellModel_NonEmptyProperty"), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb02612eL, "jetbrains.mps.lang.editor.structure.CellModel_Property"), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb0ad38eL, "jetbrains.mps.lang.editor.structure.CellModel_RefNodeList"), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11b35f4f515L, "jetbrains.mps.lang.editor.structure.CellModel_TransactionalProperty"), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143b2bb8c4L, "jetbrains.mps.lang.editor.structure.ColorStyleClassItem"), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9845363abL, "jetbrains.mps.lang.editor.structure.ConceptEditorDeclaration"), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L, "jetbrains.mps.lang.editor.structure.EditorCellModel"), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143b2c9756L, "jetbrains.mps.lang.editor.structure.FontStyleStyleClassItem"), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x2ef3b3796a126f24L, "jetbrains.mps.lang.editor.structure.StyleClass"), MetaAdapterFactory.getConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143b178f1fL, "jetbrains.mps.lang.editor.structure.StyleSheetClass"));
}
