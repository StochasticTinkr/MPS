package jetbrains.mps.lang.editor.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractCellSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractComponent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractOutputConceptContainerSubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractOutputConceptContainerTransformationMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractPaddingStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractStyledTextOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AppendTextOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ApplyStyleClass = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ApplyStyleClassCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributeStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AutoDeletableStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BackgroundColorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseEditorComponent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseLineCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BooleanStyleSheetItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BracketColorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CaretPositionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellActionMapDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0r).create();
  private final ConceptPresentation props_CellActionMapItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellActionMap_CanExecuteFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellActionMap_ExecuteFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellActionMap_FunctionParm_selectedNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellIdReferenceSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellKeyMapDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0x).create();
  private final ConceptPresentation props_CellKeyMapItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellKeyMapKeystroke = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellKeyMap_AbstractFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellKeyMap_ExecuteFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellKeyMap_FunctionParm_selectedNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellKeyMap_FunctionParm_selectedNodes = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellKeyMap_IsApplicableFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout_Flow = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout_Horizontal = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout_Indent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout_Indent_Old = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_CellLayout_Superscript = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout_Table = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout_Vertical = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout_VerticalGrid = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuComponent = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ob).create();
  private final ConceptPresentation props_CellMenuComponentFeature = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuComponentFeature_Link = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuComponentFeature_Property = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_Abstract = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_AbstractGroup = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_AbstractGroup_DescriptionText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_AbstractGroup_MatchingText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_AbstractGroup_Query = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_AbstractGroup_parameterObject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_Abstract_editedNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ApplySideTransforms = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_CellMenuComponent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_Generic_Group = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_Generic_Group_Handler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_Generic_Item = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_Generic_Item_Handler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_PropertyPostfixHints = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_PropertyPostfixHints_GetPostfixes = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_PropertyValues = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_PropertyValues_GetValues = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReferentPrimary = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChildPrimary = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_CustomChildConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_CustomChildConcept_Query = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_Group = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_Group_Create = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_Group_Query = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_Item = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_Item_Create = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_currentChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_defaultConceptOfChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceNode_CustomNodeConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceNode_Group = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceNode_Group_Create = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_AbstractLabel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_Alternation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_AttributedLinkCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_AttributedNodeCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_AttributedPropertyCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_Block = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_BlockEnd = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_BlockStart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_Collection = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eaff2517L, 0xf9eaff2519L, "vertical"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eaff2517L, 0xf9eaff251aL, "gridLayout"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eaff2517L, 0x1094a893c4dL, "usesBraces"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eaff2517L, 0x10e3893660fL, "usesFolding"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eaff2517L, 0x569b712fbc6ece21L, "collapseByDefault")).create();
  private final ConceptPresentation props_CellModel_Component = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_Constant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_ContextAssistant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_Custom = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_Empty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_Error = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_Image = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_Indent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_JComponent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_ListWithRole = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1098c8cf48aL, 0x1098c8e02faL, "vertical"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1098c8cf48aL, 0x1098c8e02fbL, "gridLayout"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1098c8cf48aL, 0x1098c8e02fcL, "usesBraces"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1098c8cf48aL, 0x10e3892b1d5L, "usesFolding"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1098c8cf48aL, 0x1098c8e02fdL, "separatorText"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1098c8cf48aL, 0x10d360ae180L, "separatorLayoutConstraint")).create();
  private final ConceptPresentation props_CellModel_ModelAccess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_NextEditor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_NonEmptyProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_Property = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_ReadOnlyModelAccessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_RefCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_RefNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_RefNodeList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_ReferencePresentation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_TransactionalProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_URL = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_WithRole = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ColorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptEditorContextHints = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ee).create();
  private final ConceptPresentation props_ConceptEditorDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0fe).create();
  private final ConceptPresentation props_ConceptEditorHintDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptEditorHintDeclarationReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptEditorHintDeclarationReferenceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_StyledText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_childNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_editorContext = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_model = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_nextNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_node = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_oldText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_parameterObject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_prevNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_selectedNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_text = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextHintsSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextVariable_EditorContext = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextVariable_Node = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultBaseLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultCaretPositionStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DominatesRecord = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DrawBorderStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DrawBracketsStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EditableStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EditorCellId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EditorCellModel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EditorComponentDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0gf).create();
  private final ConceptPresentation props_EditorComponentDeclarationReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExplicitHintsSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FirstPositionAllowedStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FloatStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FontSizeStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FontStyleStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ForegroundColorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ForegroundNullColorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HorizontalAlign = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HorizontalGapStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ICellStyle = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IContextProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IContextVariableProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IEditorContextProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IExtensibleSubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IExtensibleTransformationMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IIncludeSubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenuPartParameterized = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenuPartWithOutputConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenuReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenuReference_Default = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenuReference_Named = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenu_Concept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenu_Contribution = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenu_Default = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenu_Named = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_INodeProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IOutputConceptSubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IOutputConceptTransformationMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IParameterizableMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IQueryFunction_Color = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStyle = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStyleContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStyleSheetItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStyleSheetMember = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_ISubstituteMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISubstituteMenuReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISubstituteMenu_String = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITransformationMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITransformationMenuReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IdSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImagePathProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentLayoutIndentAnchorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentLayoutIndentStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentLayoutNewLineChildrenStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentLayoutNewLineStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentLayoutNoWrapClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentLayoutOnNewLineStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentLayoutWrapAnchorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineEditorComponent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineStyleDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LastPositionAllowedStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LayoutConstraintStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatchingLabelStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MaxWidthStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigrateManuallyAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigratedSideTransformMenuAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigratedToAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelAccessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NavigatableNodeStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NavigatableReferenceStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OptionalConceptReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrCellSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PaddingBottomStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PaddingLeftStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PaddingRightStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PaddingTopStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParametersInformationQuery = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0xh).create();
  private final ConceptPresentation props_ParametersInformationStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PositionChildrenStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PositionStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PreDefinedStyleClassItem = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_PredefinedSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyDeclarationCellSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyExpressionCellSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PunctuationLeftStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PunctuationRightStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunctionParameter_SubstituteMenu_Concept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunctionParameter_SubstituteMenu_CreatedNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunctionParameter_SubstituteMenu_CurrentTargetNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunctionParameter_SubstituteMenu_Link = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunctionParameter_SubstituteMenu_NodeToWrap = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunctionParameter_SubstituteMenu_ParentNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunctionParameter_SubstituteMenu_Strictly = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunctionParameter_TransformationMenu_CreatedNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunctionParameter_TransformationMenu_node = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunctionParameter_TransformationMenu_targetNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunctionParameter_parameterObject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunctionParameter_pattern = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_AttributeStyleParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_Boolean = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_CellProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_Color = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ColorComposit = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_FontStyle = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ImagePath = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_Integer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_IsMethodCurrent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_JComponent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_Menu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_MethodPresentation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ModelAccess_Getter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ModelAccess_Setter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ModelAccess_Validator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ModuleAndPath = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_NodeCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_NodeFactory = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_NodeListFilter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ParametersList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SeparatorText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_String = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_Style = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_StyleParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenuVariable_Initializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_ActionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_CanSubstitute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_Concept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_Concepts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_FilterConcepts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_Icon = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_Parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_Select = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_Substitute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_SubstituteString = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_WrapperHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenuVariable_Initializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_ActionLabelText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_DescriptionText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_Execute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_Extensible = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_Icon = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_Node = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_Parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_TargetNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_Text = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_WrapperHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_Underlined = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryHintsSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RGBColor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReadOnlyModelAccessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReadOnlyStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RightTransformAnchorTagWrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ScriptKindClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SelectInEditorOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SelectParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SelectPositionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SelectableStyleSheetItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SetBoldOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShowBoundariesInStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SideTransformAnchorTagStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StrikeOutStyleSheet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Alternation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Block = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Collection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Component = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Constant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_ContextAssistant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Custom = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Error = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Image = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_JComponent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_ModelAccess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_NonEmptyProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Property = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_ReadOnlyModelAccessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_RefCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_RefNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_RefNodeList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_ReferencePresentation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Table = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_TransactionalProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_URL = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubEditorCellModel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleAttributeDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleAttributeReferenceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleClass = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleClassReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleClassReferenceList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleKey = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleKeyPack = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0mm).create();
  private final ConceptPresentation props_StyleReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleSheet = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0om).create();
  private final ConceptPresentation props_StyleSheetClass = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_StyleSheetClassReference = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_StyledTextType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteFeature = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteFeature_ActionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteFeature_CanSubstitute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteFeature_DescriptionText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteFeature_Icon = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteFeature_MatchingText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteFeature_Selection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenu = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0zm).create();
  private final ConceptPresentation props_SubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuPart_Action = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuPart_AddConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuPart_Concepts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuPart_Group = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuPart_IncludeMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuPart_Parameterized = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuPart_Placeholder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuPart_Subconcepts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuPart_Wrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuReference_Default = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuReference_DefaultWithFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuReference_Named = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenu_Contribution = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0qn).create();
  private final ConceptPresentation props_SubstituteMenu_Default = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0rn).create();
  private final ConceptPresentation props_SubstituteMenu_Named = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0sn).create();
  private final ConceptPresentation props_SubstituteMenu_SimpleString = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Synchronizeable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TableComponentStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextBackgroundColorSelectedStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextBackgroundColorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransactionPropertyHandler_newValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransactionPropertyHandler_oldValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransactionalPropertyHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationFeature = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationFeature_ActionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationFeature_DescriptionText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationFeature_Icon = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationLocation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationLocation_Completion = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationLocation_ContextAssistant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationLocation_SideTransform = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationLocation_SideTransform_PlaceInCellHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenu = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ko).create();
  private final ConceptPresentation props_TransformationMenuContribution = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0lo).create();
  private final ConceptPresentation props_TransformationMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuPart_Action = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuPart_Group = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuPart_IncludeMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuPart_IncludeSubstituteMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuPart_Parameterized = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuPart_Placeholder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuPart_SubMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuPart_Super = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuPart_WrapSubstituteMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuReference_Default = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuReference_Named = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuSection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenu_Default = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0bp).create();
  private final ConceptPresentation props_TransformationMenu_Named = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0cp).create();
  private final ConceptPresentation props_UnapplyStyle = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnderlinedStyleClassItem = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractCellSelector;
      case 1:
        return props_AbstractComponent;
      case 2:
        return props_AbstractOutputConceptContainerSubstituteMenuPart;
      case 3:
        return props_AbstractOutputConceptContainerTransformationMenuPart;
      case 4:
        return props_AbstractPaddingStyleClassItem;
      case 5:
        return props_AbstractStyledTextOperation;
      case 6:
        return props_AppendTextOperation;
      case 7:
        return props_ApplyStyleClass;
      case 8:
        return props_ApplyStyleClassCondition;
      case 9:
        return props_AttributeStyleClassItem;
      case 10:
        return props_AutoDeletableStyleClassItem;
      case 11:
        return props_BackgroundColorStyleClassItem;
      case 12:
        return props_BaseEditorComponent;
      case 13:
        return props_BaseLineCell;
      case 14:
        return props_BooleanStyleSheetItem;
      case 15:
        return props_BracketColorStyleClassItem;
      case 16:
        return props_CaretPositionParameter;
      case 17:
        return props_CellActionMapDeclaration;
      case 18:
        return props_CellActionMapItem;
      case 19:
        return props_CellActionMap_CanExecuteFunction;
      case 20:
        return props_CellActionMap_ExecuteFunction;
      case 21:
        return props_CellActionMap_FunctionParm_selectedNode;
      case 22:
        return props_CellIdReferenceSelector;
      case 23:
        return props_CellKeyMapDeclaration;
      case 24:
        return props_CellKeyMapItem;
      case 25:
        return props_CellKeyMapKeystroke;
      case 26:
        return props_CellKeyMap_AbstractFunction;
      case 27:
        return props_CellKeyMap_ExecuteFunction;
      case 28:
        return props_CellKeyMap_FunctionParm_selectedNode;
      case 29:
        return props_CellKeyMap_FunctionParm_selectedNodes;
      case 30:
        return props_CellKeyMap_IsApplicableFunction;
      case 31:
        return props_CellLayout;
      case 32:
        return props_CellLayout_Flow;
      case 33:
        return props_CellLayout_Horizontal;
      case 34:
        return props_CellLayout_Indent;
      case 35:
        return props_CellLayout_Indent_Old;
      case 36:
        return props_CellLayout_Superscript;
      case 37:
        return props_CellLayout_Table;
      case 38:
        return props_CellLayout_Vertical;
      case 39:
        return props_CellLayout_VerticalGrid;
      case 40:
        return props_CellMenuComponent;
      case 41:
        return props_CellMenuComponentFeature;
      case 42:
        return props_CellMenuComponentFeature_Link;
      case 43:
        return props_CellMenuComponentFeature_Property;
      case 44:
        return props_CellMenuDescriptor;
      case 45:
        return props_CellMenuPart_Abstract;
      case 46:
        return props_CellMenuPart_AbstractGroup;
      case 47:
        return props_CellMenuPart_AbstractGroup_DescriptionText;
      case 48:
        return props_CellMenuPart_AbstractGroup_MatchingText;
      case 49:
        return props_CellMenuPart_AbstractGroup_Query;
      case 50:
        return props_CellMenuPart_AbstractGroup_parameterObject;
      case 51:
        return props_CellMenuPart_Abstract_editedNode;
      case 52:
        return props_CellMenuPart_ApplySideTransforms;
      case 53:
        return props_CellMenuPart_CellMenuComponent;
      case 54:
        return props_CellMenuPart_Generic_Group;
      case 55:
        return props_CellMenuPart_Generic_Group_Handler;
      case 56:
        return props_CellMenuPart_Generic_Item;
      case 57:
        return props_CellMenuPart_Generic_Item_Handler;
      case 58:
        return props_CellMenuPart_PropertyPostfixHints;
      case 59:
        return props_CellMenuPart_PropertyPostfixHints_GetPostfixes;
      case 60:
        return props_CellMenuPart_PropertyValues;
      case 61:
        return props_CellMenuPart_PropertyValues_GetValues;
      case 62:
        return props_CellMenuPart_ReferentPrimary;
      case 63:
        return props_CellMenuPart_ReplaceChildPrimary;
      case 64:
        return props_CellMenuPart_ReplaceChild_CustomChildConcept;
      case 65:
        return props_CellMenuPart_ReplaceChild_CustomChildConcept_Query;
      case 66:
        return props_CellMenuPart_ReplaceChild_Group;
      case 67:
        return props_CellMenuPart_ReplaceChild_Group_Create;
      case 68:
        return props_CellMenuPart_ReplaceChild_Group_Query;
      case 69:
        return props_CellMenuPart_ReplaceChild_Item;
      case 70:
        return props_CellMenuPart_ReplaceChild_Item_Create;
      case 71:
        return props_CellMenuPart_ReplaceChild_currentChild;
      case 72:
        return props_CellMenuPart_ReplaceChild_defaultConceptOfChild;
      case 73:
        return props_CellMenuPart_ReplaceNode_CustomNodeConcept;
      case 74:
        return props_CellMenuPart_ReplaceNode_Group;
      case 75:
        return props_CellMenuPart_ReplaceNode_Group_Create;
      case 76:
        return props_CellModel_AbstractLabel;
      case 77:
        return props_CellModel_Alternation;
      case 78:
        return props_CellModel_AttributedLinkCell;
      case 79:
        return props_CellModel_AttributedNodeCell;
      case 80:
        return props_CellModel_AttributedPropertyCell;
      case 81:
        return props_CellModel_Block;
      case 82:
        return props_CellModel_BlockEnd;
      case 83:
        return props_CellModel_BlockStart;
      case 84:
        return props_CellModel_Collection;
      case 85:
        return props_CellModel_Component;
      case 86:
        return props_CellModel_Constant;
      case 87:
        return props_CellModel_ContextAssistant;
      case 88:
        return props_CellModel_Custom;
      case 89:
        return props_CellModel_Empty;
      case 90:
        return props_CellModel_Error;
      case 91:
        return props_CellModel_Image;
      case 92:
        return props_CellModel_Indent;
      case 93:
        return props_CellModel_JComponent;
      case 94:
        return props_CellModel_ListWithRole;
      case 95:
        return props_CellModel_ModelAccess;
      case 96:
        return props_CellModel_NextEditor;
      case 97:
        return props_CellModel_NonEmptyProperty;
      case 98:
        return props_CellModel_Property;
      case 99:
        return props_CellModel_ReadOnlyModelAccessor;
      case 100:
        return props_CellModel_RefCell;
      case 101:
        return props_CellModel_RefNode;
      case 102:
        return props_CellModel_RefNodeList;
      case 103:
        return props_CellModel_ReferencePresentation;
      case 104:
        return props_CellModel_TransactionalProperty;
      case 105:
        return props_CellModel_URL;
      case 106:
        return props_CellModel_WithRole;
      case 107:
        return props_ColorStyleClassItem;
      case 108:
        return props_ConceptEditorContextHints;
      case 109:
        return props_ConceptEditorDeclaration;
      case 110:
        return props_ConceptEditorHintDeclaration;
      case 111:
        return props_ConceptEditorHintDeclarationReference;
      case 112:
        return props_ConceptEditorHintDeclarationReferenceExpression;
      case 113:
        return props_ConceptFunctionParameter_StyledText;
      case 114:
        return props_ConceptFunctionParameter_childNode;
      case 115:
        return props_ConceptFunctionParameter_editorContext;
      case 116:
        return props_ConceptFunctionParameter_model;
      case 117:
        return props_ConceptFunctionParameter_nextNode;
      case 118:
        return props_ConceptFunctionParameter_node;
      case 119:
        return props_ConceptFunctionParameter_oldText;
      case 120:
        return props_ConceptFunctionParameter_parameterObject;
      case 121:
        return props_ConceptFunctionParameter_prevNode;
      case 122:
        return props_ConceptFunctionParameter_selectedNode;
      case 123:
        return props_ConceptFunctionParameter_text;
      case 124:
        return props_ContextHintsSpecification;
      case 125:
        return props_ContextVariable;
      case 126:
        return props_ContextVariable_EditorContext;
      case 127:
        return props_ContextVariable_Node;
      case 128:
        return props_DefaultBaseLine;
      case 129:
        return props_DefaultCaretPositionStyleClassItem;
      case 130:
        return props_DominatesRecord;
      case 131:
        return props_DrawBorderStyleClassItem;
      case 132:
        return props_DrawBracketsStyleClassItem;
      case 133:
        return props_EditableStyleClassItem;
      case 134:
        return props_EditorCellId;
      case 135:
        return props_EditorCellModel;
      case 136:
        return props_EditorComponentDeclaration;
      case 137:
        return props_EditorComponentDeclarationReference;
      case 138:
        return props_ExplicitHintsSpecification;
      case 139:
        return props_FirstPositionAllowedStyleClassItem;
      case 140:
        return props_FloatStyleClassItem;
      case 141:
        return props_FontSizeStyleClassItem;
      case 142:
        return props_FontStyleStyleClassItem;
      case 143:
        return props_ForegroundColorStyleClassItem;
      case 144:
        return props_ForegroundNullColorStyleClassItem;
      case 145:
        return props_HorizontalAlign;
      case 146:
        return props_HorizontalGapStyleClassItem;
      case 147:
        return props_ICellStyle;
      case 148:
        return props_IContextProvider;
      case 149:
        return props_IContextVariableProvider;
      case 150:
        return props_IEditorContextProvider;
      case 151:
        return props_IExtensibleSubstituteMenuPart;
      case 152:
        return props_IExtensibleTransformationMenuPart;
      case 153:
        return props_IIncludeSubstituteMenuPart;
      case 154:
        return props_IMenu;
      case 155:
        return props_IMenuPartParameterized;
      case 156:
        return props_IMenuPartWithOutputConcept;
      case 157:
        return props_IMenuReference;
      case 158:
        return props_IMenuReference_Default;
      case 159:
        return props_IMenuReference_Named;
      case 160:
        return props_IMenu_Concept;
      case 161:
        return props_IMenu_Contribution;
      case 162:
        return props_IMenu_Default;
      case 163:
        return props_IMenu_Named;
      case 164:
        return props_INodeProvider;
      case 165:
        return props_IOutputConceptSubstituteMenuPart;
      case 166:
        return props_IOutputConceptTransformationMenuPart;
      case 167:
        return props_IParameterizableMenuPart;
      case 168:
        return props_IQueryFunction_Color;
      case 169:
        return props_IStyle;
      case 170:
        return props_IStyleContainer;
      case 171:
        return props_IStyleSheetItem;
      case 172:
        return props_IStyleSheetMember;
      case 173:
        return props_ISubstituteMenu;
      case 174:
        return props_ISubstituteMenuReference;
      case 175:
        return props_ISubstituteMenu_String;
      case 176:
        return props_ITransformationMenu;
      case 177:
        return props_ITransformationMenuReference;
      case 178:
        return props_IdSelector;
      case 179:
        return props_ImagePathProvider;
      case 180:
        return props_IndentLayoutIndentAnchorStyleClassItem;
      case 181:
        return props_IndentLayoutIndentStyleClassItem;
      case 182:
        return props_IndentLayoutNewLineChildrenStyleClassItem;
      case 183:
        return props_IndentLayoutNewLineStyleClassItem;
      case 184:
        return props_IndentLayoutNoWrapClassItem;
      case 185:
        return props_IndentLayoutOnNewLineStyleClassItem;
      case 186:
        return props_IndentLayoutWrapAnchorStyleClassItem;
      case 187:
        return props_InlineEditorComponent;
      case 188:
        return props_InlineStyleDeclaration;
      case 189:
        return props_LastPositionAllowedStyleClassItem;
      case 190:
        return props_LayoutConstraintStyleClassItem;
      case 191:
        return props_MatchingLabelStyleClassItem;
      case 192:
        return props_MaxWidthStyleClassItem;
      case 193:
        return props_MigrateManuallyAnnotation;
      case 194:
        return props_MigratedSideTransformMenuAttribute;
      case 195:
        return props_MigratedToAnnotation;
      case 196:
        return props_ModelAccessor;
      case 197:
        return props_NavigatableNodeStyleClassItem;
      case 198:
        return props_NavigatableReferenceStyleClassItem;
      case 199:
        return props_OptionalConceptReference;
      case 200:
        return props_OrCellSelector;
      case 201:
        return props_PaddingBottomStyleClassItem;
      case 202:
        return props_PaddingLeftStyleClassItem;
      case 203:
        return props_PaddingRightStyleClassItem;
      case 204:
        return props_PaddingTopStyleClassItem;
      case 205:
        return props_ParametersInformationQuery;
      case 206:
        return props_ParametersInformationStyleClassItem;
      case 207:
        return props_PositionChildrenStyleClassItem;
      case 208:
        return props_PositionStyleClassItem;
      case 209:
        return props_PreDefinedStyleClassItem;
      case 210:
        return props_PredefinedSelector;
      case 211:
        return props_PropertyDeclarationCellSelector;
      case 212:
        return props_PropertyExpressionCellSelector;
      case 213:
        return props_PunctuationLeftStyleClassItem;
      case 214:
        return props_PunctuationRightStyleClassItem;
      case 215:
        return props_QueryFunctionParameter_SubstituteMenu_Concept;
      case 216:
        return props_QueryFunctionParameter_SubstituteMenu_CreatedNode;
      case 217:
        return props_QueryFunctionParameter_SubstituteMenu_CurrentTargetNode;
      case 218:
        return props_QueryFunctionParameter_SubstituteMenu_Link;
      case 219:
        return props_QueryFunctionParameter_SubstituteMenu_NodeToWrap;
      case 220:
        return props_QueryFunctionParameter_SubstituteMenu_ParentNode;
      case 221:
        return props_QueryFunctionParameter_SubstituteMenu_Strictly;
      case 222:
        return props_QueryFunctionParameter_TransformationMenu_CreatedNode;
      case 223:
        return props_QueryFunctionParameter_TransformationMenu_node;
      case 224:
        return props_QueryFunctionParameter_TransformationMenu_targetNode;
      case 225:
        return props_QueryFunctionParameter_parameterObject;
      case 226:
        return props_QueryFunctionParameter_pattern;
      case 227:
        return props_QueryFunction_AttributeStyleParameter;
      case 228:
        return props_QueryFunction_Boolean;
      case 229:
        return props_QueryFunction_CellProvider;
      case 230:
        return props_QueryFunction_Color;
      case 231:
        return props_QueryFunction_ColorComposit;
      case 232:
        return props_QueryFunction_FontStyle;
      case 233:
        return props_QueryFunction_ImagePath;
      case 234:
        return props_QueryFunction_Integer;
      case 235:
        return props_QueryFunction_IsMethodCurrent;
      case 236:
        return props_QueryFunction_JComponent;
      case 237:
        return props_QueryFunction_Menu;
      case 238:
        return props_QueryFunction_MethodPresentation;
      case 239:
        return props_QueryFunction_ModelAccess_Getter;
      case 240:
        return props_QueryFunction_ModelAccess_Setter;
      case 241:
        return props_QueryFunction_ModelAccess_Validator;
      case 242:
        return props_QueryFunction_ModuleAndPath;
      case 243:
        return props_QueryFunction_NodeCondition;
      case 244:
        return props_QueryFunction_NodeFactory;
      case 245:
        return props_QueryFunction_NodeListFilter;
      case 246:
        return props_QueryFunction_ParametersList;
      case 247:
        return props_QueryFunction_SNode;
      case 248:
        return props_QueryFunction_SeparatorText;
      case 249:
        return props_QueryFunction_String;
      case 250:
        return props_QueryFunction_Style;
      case 251:
        return props_QueryFunction_StyleParameter;
      case 252:
        return props_QueryFunction_SubstituteMenu;
      case 253:
        return props_QueryFunction_SubstituteMenuPart;
      case 254:
        return props_QueryFunction_SubstituteMenuVariable_Initializer;
      case 255:
        return props_QueryFunction_SubstituteMenu_ActionType;
      case 256:
        return props_QueryFunction_SubstituteMenu_CanSubstitute;
      case 257:
        return props_QueryFunction_SubstituteMenu_Concept;
      case 258:
        return props_QueryFunction_SubstituteMenu_Concepts;
      case 259:
        return props_QueryFunction_SubstituteMenu_Condition;
      case 260:
        return props_QueryFunction_SubstituteMenu_FilterConcepts;
      case 261:
        return props_QueryFunction_SubstituteMenu_Icon;
      case 262:
        return props_QueryFunction_SubstituteMenu_Parameter;
      case 263:
        return props_QueryFunction_SubstituteMenu_Select;
      case 264:
        return props_QueryFunction_SubstituteMenu_Substitute;
      case 265:
        return props_QueryFunction_SubstituteMenu_SubstituteString;
      case 266:
        return props_QueryFunction_SubstituteMenu_WrapperHandler;
      case 267:
        return props_QueryFunction_TransformationMenu;
      case 268:
        return props_QueryFunction_TransformationMenuVariable_Initializer;
      case 269:
        return props_QueryFunction_TransformationMenu_ActionLabelText;
      case 270:
        return props_QueryFunction_TransformationMenu_Condition;
      case 271:
        return props_QueryFunction_TransformationMenu_DescriptionText;
      case 272:
        return props_QueryFunction_TransformationMenu_Execute;
      case 273:
        return props_QueryFunction_TransformationMenu_Extensible;
      case 274:
        return props_QueryFunction_TransformationMenu_Icon;
      case 275:
        return props_QueryFunction_TransformationMenu_Node;
      case 276:
        return props_QueryFunction_TransformationMenu_Parameter;
      case 277:
        return props_QueryFunction_TransformationMenu_TargetNode;
      case 278:
        return props_QueryFunction_TransformationMenu_Text;
      case 279:
        return props_QueryFunction_TransformationMenu_WrapperHandler;
      case 280:
        return props_QueryFunction_Underlined;
      case 281:
        return props_QueryHintsSpecification;
      case 282:
        return props_RGBColor;
      case 283:
        return props_ReadOnlyModelAccessor;
      case 284:
        return props_ReadOnlyStyleClassItem;
      case 285:
        return props_RightTransformAnchorTagWrapper;
      case 286:
        return props_ScriptKindClassItem;
      case 287:
        return props_SelectInEditorOperation;
      case 288:
        return props_SelectParameter;
      case 289:
        return props_SelectPositionParameter;
      case 290:
        return props_SelectableStyleSheetItem;
      case 291:
        return props_SetBoldOperation;
      case 292:
        return props_ShowBoundariesInStyleClassItem;
      case 293:
        return props_SideTransformAnchorTagStyleClassItem;
      case 294:
        return props_StrikeOutStyleSheet;
      case 295:
        return props_StubCellModel_Alternation;
      case 296:
        return props_StubCellModel_Block;
      case 297:
        return props_StubCellModel_Collection;
      case 298:
        return props_StubCellModel_Component;
      case 299:
        return props_StubCellModel_Constant;
      case 300:
        return props_StubCellModel_ContextAssistant;
      case 301:
        return props_StubCellModel_Custom;
      case 302:
        return props_StubCellModel_Error;
      case 303:
        return props_StubCellModel_Image;
      case 304:
        return props_StubCellModel_JComponent;
      case 305:
        return props_StubCellModel_ModelAccess;
      case 306:
        return props_StubCellModel_NonEmptyProperty;
      case 307:
        return props_StubCellModel_Property;
      case 308:
        return props_StubCellModel_ReadOnlyModelAccessor;
      case 309:
        return props_StubCellModel_RefCell;
      case 310:
        return props_StubCellModel_RefNode;
      case 311:
        return props_StubCellModel_RefNodeList;
      case 312:
        return props_StubCellModel_ReferencePresentation;
      case 313:
        return props_StubCellModel_Table;
      case 314:
        return props_StubCellModel_TransactionalProperty;
      case 315:
        return props_StubCellModel_URL;
      case 316:
        return props_StubEditorCellModel;
      case 317:
        return props_StyleAttributeDeclaration;
      case 318:
        return props_StyleAttributeReferenceExpression;
      case 319:
        return props_StyleClass;
      case 320:
        return props_StyleClassItem;
      case 321:
        return props_StyleClassReference;
      case 322:
        return props_StyleClassReferenceList;
      case 323:
        return props_StyleKey;
      case 324:
        return props_StyleKeyPack;
      case 325:
        return props_StyleReference;
      case 326:
        return props_StyleSheet;
      case 327:
        return props_StyleSheetClass;
      case 328:
        return props_StyleSheetClassReference;
      case 329:
        return props_StyledTextType;
      case 330:
        return props_SubstituteFeature;
      case 331:
        return props_SubstituteFeature_ActionType;
      case 332:
        return props_SubstituteFeature_CanSubstitute;
      case 333:
        return props_SubstituteFeature_DescriptionText;
      case 334:
        return props_SubstituteFeature_Icon;
      case 335:
        return props_SubstituteFeature_MatchingText;
      case 336:
        return props_SubstituteFeature_Selection;
      case 337:
        return props_SubstituteMenu;
      case 338:
        return props_SubstituteMenuPart;
      case 339:
        return props_SubstituteMenuPart_Action;
      case 340:
        return props_SubstituteMenuPart_AddConcept;
      case 341:
        return props_SubstituteMenuPart_Concepts;
      case 342:
        return props_SubstituteMenuPart_Group;
      case 343:
        return props_SubstituteMenuPart_IncludeMenu;
      case 344:
        return props_SubstituteMenuPart_Parameterized;
      case 345:
        return props_SubstituteMenuPart_Placeholder;
      case 346:
        return props_SubstituteMenuPart_Subconcepts;
      case 347:
        return props_SubstituteMenuPart_Wrapper;
      case 348:
        return props_SubstituteMenuReference;
      case 349:
        return props_SubstituteMenuReference_Default;
      case 350:
        return props_SubstituteMenuReference_DefaultWithFunction;
      case 351:
        return props_SubstituteMenuReference_Named;
      case 352:
        return props_SubstituteMenuVariableDeclaration;
      case 353:
        return props_SubstituteMenuVariableReference;
      case 354:
        return props_SubstituteMenu_Contribution;
      case 355:
        return props_SubstituteMenu_Default;
      case 356:
        return props_SubstituteMenu_Named;
      case 357:
        return props_SubstituteMenu_SimpleString;
      case 358:
        return props_Synchronizeable;
      case 359:
        return props_TableComponentStyleClassItem;
      case 360:
        return props_TextBackgroundColorSelectedStyleClassItem;
      case 361:
        return props_TextBackgroundColorStyleClassItem;
      case 362:
        return props_TransactionPropertyHandler_newValue;
      case 363:
        return props_TransactionPropertyHandler_oldValue;
      case 364:
        return props_TransactionalPropertyHandler;
      case 365:
        return props_TransformationFeature;
      case 366:
        return props_TransformationFeature_ActionType;
      case 367:
        return props_TransformationFeature_DescriptionText;
      case 368:
        return props_TransformationFeature_Icon;
      case 369:
        return props_TransformationLocation;
      case 370:
        return props_TransformationLocation_Completion;
      case 371:
        return props_TransformationLocation_ContextAssistant;
      case 372:
        return props_TransformationLocation_SideTransform;
      case 373:
        return props_TransformationLocation_SideTransform_PlaceInCellHolder;
      case 374:
        return props_TransformationMenu;
      case 375:
        return props_TransformationMenuContribution;
      case 376:
        return props_TransformationMenuPart;
      case 377:
        return props_TransformationMenuPart_Action;
      case 378:
        return props_TransformationMenuPart_Group;
      case 379:
        return props_TransformationMenuPart_IncludeMenu;
      case 380:
        return props_TransformationMenuPart_IncludeSubstituteMenu;
      case 381:
        return props_TransformationMenuPart_Parameterized;
      case 382:
        return props_TransformationMenuPart_Placeholder;
      case 383:
        return props_TransformationMenuPart_SubMenu;
      case 384:
        return props_TransformationMenuPart_Super;
      case 385:
        return props_TransformationMenuPart_WrapSubstituteMenu;
      case 386:
        return props_TransformationMenuReference_Default;
      case 387:
        return props_TransformationMenuReference_Named;
      case 388:
        return props_TransformationMenuSection;
      case 389:
        return props_TransformationMenuVariableDeclaration;
      case 390:
        return props_TransformationMenuVariableReference;
      case 391:
        return props_TransformationMenu_Default;
      case 392:
        return props_TransformationMenu_Named;
      case 393:
        return props_UnapplyStyle;
      case 394:
        return props_UnderlinedStyleClassItem;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
