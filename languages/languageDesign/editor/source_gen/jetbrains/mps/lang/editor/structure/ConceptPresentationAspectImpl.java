package jetbrains.mps.lang.editor.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractCellSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractComponent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractOutputConceptContainerSubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractOutputConceptContainerTransformationMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractPaddingStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractStyledTextOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AppendTextOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ApplyStyleClass = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ApplyStyleClassCondition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AttributeStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AutoDeletableStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BackgroundColorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseEditorComponent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseLineCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BooleanStyleSheetItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BracketColorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CaretPositionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellActionMapDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0r).create();
  private final ConceptPresentation props_CellActionMapItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellActionMap_CanExecuteFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellActionMap_ExecuteFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellActionMap_FunctionParm_selectedNode = new ConceptPresentationBuilder().shortDesc("selected node (action map function parameter)").create();
  private final ConceptPresentation props_CellIdReferenceSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellKeyMapDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0x).create();
  private final ConceptPresentation props_CellKeyMapItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellKeyMapKeystroke = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellKeyMap_AbstractFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellKeyMap_ExecuteFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellKeyMap_FunctionParm_selectedNode = new ConceptPresentationBuilder().shortDesc("keymap function parameter").create();
  private final ConceptPresentation props_CellKeyMap_FunctionParm_selectedNodes = new ConceptPresentationBuilder().shortDesc("keymap function parameter").create();
  private final ConceptPresentation props_CellKeyMap_IsApplicableFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout_Flow = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout_Horizontal = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout_Indent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout_Superscript = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout_Table = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout_Vertical = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellLayout_VerticalGrid = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuComponent = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0nb).create();
  private final ConceptPresentation props_CellMenuComponentFeature = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuComponentFeature_Link = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuComponentFeature_Property = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuDescriptor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_Abstract = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_AbstractGroup = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_AbstractGroup_DescriptionText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_AbstractGroup_MatchingText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_AbstractGroup_Query = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_AbstractGroup_parameterObject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_Abstract_editedNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ApplySideTransforms = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_CellMenuPart_CellMenuComponent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_Generic_Group = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_Generic_Group_Handler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_Generic_Item = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_Generic_Item_Handler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_PropertyPostfixHints = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_PropertyPostfixHints_GetPostfixes = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_PropertyValues = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_PropertyValues_GetValues = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReferentPrimary = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChildPrimary = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_CustomChildConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_CustomChildConcept_Query = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_Group = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_Group_Create = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_Group_Query = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_Item = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_Item_Create = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_currentChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_defaultChildConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceChild_defaultConceptOfChild = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_CellMenuPart_ReplaceNode_CustomNodeConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceNode_Group = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellMenuPart_ReplaceNode_Group_Create = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_AbstractLabel = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfb4e7c3a4cL, 0x116e805ff79L, "defaultCaretPosition")).create();
  private final ConceptPresentation props_CellModel_Alternation = new ConceptPresentationBuilder().shortDesc("cell alternation").create();
  private final ConceptPresentation props_CellModel_AttributedLinkCell = new ConceptPresentationBuilder().shortDesc("cell for attributed link").create();
  private final ConceptPresentation props_CellModel_AttributedNodeCell = new ConceptPresentationBuilder().shortDesc("cell for attributed node").create();
  private final ConceptPresentation props_CellModel_AttributedPropertyCell = new ConceptPresentationBuilder().shortDesc("cell for attributed property").create();
  private final ConceptPresentation props_CellModel_Block = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_BlockEnd = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_BlockStart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_Collection = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eaff2517L, 0xf9eaff2519L, "vertical"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eaff2517L, 0xf9eaff251aL, "gridLayout"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eaff2517L, 0x1094a893c4dL, "usesBraces"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eaff2517L, 0x10e3893660fL, "usesFolding"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eaff2517L, 0x569b712fbc6ece21L, "collapseByDefault")).shortDesc("collection of cells").create();
  private final ConceptPresentation props_CellModel_Component = new ConceptPresentationBuilder().shortDesc("reference to editor component").create();
  private final ConceptPresentation props_CellModel_Constant = new ConceptPresentationBuilder().shortDesc("text label").create();
  private final ConceptPresentation props_CellModel_ContextAssistant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_Custom = new ConceptPresentationBuilder().shortDesc("reference to cell provider").create();
  private final ConceptPresentation props_CellModel_Empty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_Error = new ConceptPresentationBuilder().shortDesc("red text label").create();
  private final ConceptPresentation props_CellModel_Image = new ConceptPresentationBuilder().shortDesc("cell for an image").create();
  private final ConceptPresentation props_CellModel_Indent = new ConceptPresentationBuilder().shortDesc("indent").create();
  private final ConceptPresentation props_CellModel_JComponent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_ListWithRole = new ConceptPresentationBuilder().deprecated(MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1098c8cf48aL, 0x1098c8e02faL, "vertical"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1098c8cf48aL, 0x1098c8e02fbL, "gridLayout"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1098c8cf48aL, 0x1098c8e02fcL, "usesBraces"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1098c8cf48aL, 0x10e3892b1d5L, "usesFolding"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1098c8cf48aL, 0x1098c8e02fdL, "separatorText"), MetaAdapterFactory.getProperty(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1098c8cf48aL, 0x10d360ae180L, "separatorLayoutConstraint")).create();
  private final ConceptPresentation props_CellModel_ModelAccess = new ConceptPresentationBuilder().shortDesc("reference to accessor").create();
  private final ConceptPresentation props_CellModel_NextEditor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_NonEmptyProperty = new ConceptPresentationBuilder().shortDesc("not empty property").create();
  private final ConceptPresentation props_CellModel_Property = new ConceptPresentationBuilder().shortDesc("property").create();
  private final ConceptPresentation props_CellModel_ReadOnlyModelAccessor = new ConceptPresentationBuilder().shortDesc("reference to read only accessor").create();
  private final ConceptPresentation props_CellModel_RefCell = new ConceptPresentationBuilder().shortDesc("reference").create();
  private final ConceptPresentation props_CellModel_RefNode = new ConceptPresentationBuilder().shortDesc("single aggregation").create();
  private final ConceptPresentation props_CellModel_RefNodeList = new ConceptPresentationBuilder().shortDesc("multiple aggregation").create();
  private final ConceptPresentation props_CellModel_ReferencePresentation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_TransactionalProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CellModel_URL = new ConceptPresentationBuilder().shortDesc("URL property").create();
  private final ConceptPresentation props_CellModel_WithRole = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ColorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptEditorContextHints = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ee).create();
  private final ConceptPresentation props_ConceptEditorDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0fe).create();
  private final ConceptPresentation props_ConceptEditorHintDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptEditorHintDeclarationReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptEditorHintDeclarationReferenceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_StyledText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_childNode = new ConceptPresentationBuilder().shortDesc("function parameter").create();
  private final ConceptPresentation props_ConceptFunctionParameter_editorContext = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_model = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_nextNode = new ConceptPresentationBuilder().shortDesc("function parameter").create();
  private final ConceptPresentation props_ConceptFunctionParameter_node = new ConceptPresentationBuilder().shortDesc("function parameter").create();
  private final ConceptPresentation props_ConceptFunctionParameter_oldText = new ConceptPresentationBuilder().shortDesc("function parameter").create();
  private final ConceptPresentation props_ConceptFunctionParameter_parameterObject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptFunctionParameter_prevNode = new ConceptPresentationBuilder().shortDesc("function parameter").create();
  private final ConceptPresentation props_ConceptFunctionParameter_selectedNode = new ConceptPresentationBuilder().shortDesc("selected node").create();
  private final ConceptPresentation props_ConceptFunctionParameter_sourceNode = new ConceptPresentationBuilder().shortDesc("function parameter").create();
  private final ConceptPresentation props_ConceptFunctionParameter_targetNode = new ConceptPresentationBuilder().shortDesc("function parameter").create();
  private final ConceptPresentation props_ConceptFunctionParameter_text = new ConceptPresentationBuilder().shortDesc("function parameter").create();
  private final ConceptPresentation props_ContextHintsSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextVariable_EditorContext = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ContextVariable_Node = new ConceptPresentationBuilder().shortDesc("node").create();
  private final ConceptPresentation props_DefaultBaseLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DefaultCaretPositionStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DominatesRecord = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DrawBorderStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DrawBracketsStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EditableStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EditorCellId = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EditorCellModel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EditorComponentDeclaration = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0if).create();
  private final ConceptPresentation props_EditorComponentDeclarationReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExplicitHintsSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FirstPositionAllowedStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FloatStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FontSizeStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FontStyleStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ForegroundColorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ForegroundNullColorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HorizontalAlign = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HorizontalGapStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ICellStyle = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IContextNodeAccessQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IContextProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IContextVariableProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IEditorContextAccessQualifier = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IEditorContextProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IExtensibleSubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IExtensibleTransformationMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IIncludeSubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenuPartParameterized = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenuPartWithOutputConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenuReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenuReference_Default = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenuReference_Named = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenu_Concept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenu_Contribution = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenu_Default = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMenu_Named = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_INodeProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IOutputConceptSubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IOutputConceptTransformationMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IParameterizableMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IQueryFunction_Color = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStyle = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStyleContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IStyleSheetItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISubstituteMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISubstituteMenuReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ISubstituteMenu_String = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITransformationMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ITransformationMenuReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IdSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImagePathProvider = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentLayoutIndentAnchorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentLayoutIndentStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentLayoutNewLineChildrenStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentLayoutNewLineStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentLayoutNoWrapClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentLayoutOnNewLineStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IndentLayoutWrapAnchorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineEditorComponent = new ConceptPresentationBuilder().shortDesc("in-line editor component").create();
  private final ConceptPresentation props_InlineStyleDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LastPositionAllowedStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LayoutConstraintStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LayoutContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatchingLabelStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MaxWidthStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigrateManuallyAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigratedSideTransformMenuAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigratedToAnnotation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ModelAccessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NavigatableNodeStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NavigatableReferenceStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OptionalConceptReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrCellSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PaddingBottomStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PaddingLeftStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PaddingRightStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PaddingTopStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParametersInformationQuery = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0bi).create();
  private final ConceptPresentation props_ParametersInformationStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PositionChildrenStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PositionStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PredefinedSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyDeclarationCellSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyExpressionCellSelector = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PunctuationLeftStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PunctuationRightStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunctionParameter_SubstituteMenu_Concept = new ConceptPresentationBuilder().shortDesc("subconcept of current concept").create();
  private final ConceptPresentation props_QueryFunctionParameter_SubstituteMenu_CreatedNode = new ConceptPresentationBuilder().shortDesc("node<> returned from create child node block").create();
  private final ConceptPresentation props_QueryFunctionParameter_SubstituteMenu_CurrentTargetNode = new ConceptPresentationBuilder().shortDesc("node<> to substitute").create();
  private final ConceptPresentation props_QueryFunctionParameter_SubstituteMenu_Link = new ConceptPresentationBuilder().shortDesc("containment link for where result of this substitution will be saved or null if LinkDeclaration was not determined").create();
  private final ConceptPresentation props_QueryFunctionParameter_SubstituteMenu_NodeToWrap = new ConceptPresentationBuilder().shortDesc("instance of wrapped concept created by another substitute action").create();
  private final ConceptPresentation props_QueryFunctionParameter_SubstituteMenu_ParentNode = new ConceptPresentationBuilder().shortDesc("the parent node<> of the node<> to substitute").create();
  private final ConceptPresentation props_QueryFunctionParameter_SubstituteMenu_Strictly = new ConceptPresentationBuilder().shortDesc("true if matching text should match specified pattern completely, false if only beggining of matching text should match this pattern").create();
  private final ConceptPresentation props_QueryFunctionParameter_SubstituteMenu_WrappedItem = new ConceptPresentationBuilder().shortDesc("substitute item from the wrapped menu").create();
  private final ConceptPresentation props_QueryFunctionParameter_TransformationMenu_CreatedNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunctionParameter_TransformationMenu_node = new ConceptPresentationBuilder().shortDesc("the node that the menu is being shown for").create();
  private final ConceptPresentation props_QueryFunctionParameter_TransformationMenu_targetNode = new ConceptPresentationBuilder().shortDesc("the node that the menu is being shown for").create();
  private final ConceptPresentation props_QueryFunctionParameter_parameterObject = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunctionParameter_pattern = new ConceptPresentationBuilder().shortDesc("string entered by user inside competion pop-up, used to hide those actions which matching text was not matched with the pattern").create();
  private final ConceptPresentation props_QueryFunction_AttributeStyleParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_Boolean = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_CellProvider = new ConceptPresentationBuilder().shortDesc("embedded block of code").create();
  private final ConceptPresentation props_QueryFunction_Color = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ColorComposit = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_FontStyle = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ImagePath = new ConceptPresentationBuilder().shortDesc("embedded block of code").create();
  private final ConceptPresentation props_QueryFunction_Integer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_IsMethodCurrent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_JComponent = new ConceptPresentationBuilder().shortDesc("embedded block of code").create();
  private final ConceptPresentation props_QueryFunction_Menu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_MethodPresentation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_ModelAccess_Getter = new ConceptPresentationBuilder().shortDesc("embedded block of code").create();
  private final ConceptPresentation props_QueryFunction_ModelAccess_Setter = new ConceptPresentationBuilder().shortDesc("embedded block of code").create();
  private final ConceptPresentation props_QueryFunction_ModelAccess_Validator = new ConceptPresentationBuilder().shortDesc("embedded block of code").create();
  private final ConceptPresentation props_QueryFunction_ModuleAndPath = new ConceptPresentationBuilder().shortDesc("embedded block of code").create();
  private final ConceptPresentation props_QueryFunction_NodeCondition = new ConceptPresentationBuilder().shortDesc("embedded block of code").create();
  private final ConceptPresentation props_QueryFunction_NodeFactory = new ConceptPresentationBuilder().shortDesc("embedded block of code").create();
  private final ConceptPresentation props_QueryFunction_NodeListFilter = new ConceptPresentationBuilder().shortDesc("embedded block of code").create();
  private final ConceptPresentation props_QueryFunction_ParametersList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_RefPresentation = new ConceptPresentationBuilder().shortDesc("custom referent presentation").create();
  private final ConceptPresentation props_QueryFunction_SNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SeparatorText = new ConceptPresentationBuilder().shortDesc("embedded block of code").create();
  private final ConceptPresentation props_QueryFunction_String = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_Style = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_StyleParameter = new ConceptPresentationBuilder().shortDesc("embedded block of code").create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenuVariable_Initializer = new ConceptPresentationBuilder().shortDesc("return initial value of the variable").create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_ActionType = new ConceptPresentationBuilder().shortDesc("return result type for this action, used for smart completion").create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_CanSubstitute = new ConceptPresentationBuilder().shortDesc("return false if this action should be excluded from the substitute menu").create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_Concept = new ConceptPresentationBuilder().shortDesc("returns concept to include substitutemenu for").create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_Concepts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_FilterConcepts = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_Icon = new ConceptPresentationBuilder().shortDesc("icon").create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_Parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_Select = new ConceptPresentationBuilder().shortDesc("do selection").create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_Substitute = new ConceptPresentationBuilder().shortDesc("return node<> to substitute currentChild with").create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_SubstituteString = new ConceptPresentationBuilder().shortDesc("return text string").create();
  private final ConceptPresentation props_QueryFunction_SubstituteMenu_WrapperHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenuVariable_Initializer = new ConceptPresentationBuilder().shortDesc("return initial value of the variable").create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_ActionLabelText = new ConceptPresentationBuilder().shortDesc("a block of code").create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_Condition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_DescriptionText = new ConceptPresentationBuilder().shortDesc("a block of code").create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_Execute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_Extensible = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_Icon = new ConceptPresentationBuilder().shortDesc("a block of code").create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_Node = new ConceptPresentationBuilder().shortDesc("a block of code").create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_Parameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_TargetNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_Text = new ConceptPresentationBuilder().shortDesc("a block of code").create();
  private final ConceptPresentation props_QueryFunction_TransformationMenu_WrapperHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryFunction_Underlined = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QueryHintsSpecification = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RGBColor = new ConceptPresentationBuilder().shortDesc("#RRGGBB").create();
  private final ConceptPresentation props_ReadOnlyModelAccessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReadOnlyStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RightTransformAnchorTagWrapper = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_ScriptKindClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SelectInEditorOperation = new ConceptPresentationBuilder().shortDesc("select node in the editor").create();
  private final ConceptPresentation props_SelectParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SelectPositionParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SelectableStyleSheetItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SetBoldOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ShowBoundariesInStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SideTransformAnchorTagStyleClassItem = new ConceptPresentationBuilder().deprecated(true).create();
  private final ConceptPresentation props_StrikeOutStyleSheet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Alternation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Block = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Collection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Component = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Constant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_ContextAssistant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Custom = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Error = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Image = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_JComponent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_ModelAccess = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_NonEmptyProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Property = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_ReadOnlyModelAccessor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_RefCell = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_RefNode = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_RefNodeList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_ReferencePresentation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_Table = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_TransactionalProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubCellModel_URL = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StubEditorCellModel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleAttributeDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleAttributeReferenceExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleClass = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleClassReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleClassReferenceList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleKey = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleKeyPack = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0rm).create();
  private final ConceptPresentation props_StyleReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StyleSheet = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0tm).create();
  private final ConceptPresentation props_StyledTextType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteFeature = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteFeature_ActionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteFeature_CanSubstitute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteFeature_DescriptionText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteFeature_Icon = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteFeature_MatchingText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteFeature_Selection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenu = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0cn).create();
  private final ConceptPresentation props_SubstituteMenuItemType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuItem_AbstractOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuItem_DescriptionText_Operation = new ConceptPresentationBuilder().shortDesc("description text of the item").create();
  private final ConceptPresentation props_SubstituteMenuItem_MatchingText_Operation = new ConceptPresentationBuilder().shortDesc("matching text of the item").create();
  private final ConceptPresentation props_SubstituteMenuItem_OutputConcept_Operation = new ConceptPresentationBuilder().shortDesc("output concept of the item").create();
  private final ConceptPresentation props_SubstituteMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuPart_Action = new ConceptPresentationBuilder().shortDesc("customizable action").create();
  private final ConceptPresentation props_SubstituteMenuPart_AddConcept = new ConceptPresentationBuilder().shortDesc("creates a new instance of the specified concept").create();
  private final ConceptPresentation props_SubstituteMenuPart_Concepts = new ConceptPresentationBuilder().shortDesc("collection of simple actions for specified concepts").create();
  private final ConceptPresentation props_SubstituteMenuPart_Group = new ConceptPresentationBuilder().shortDesc("composite part which can specify variables and applicability condition").create();
  private final ConceptPresentation props_SubstituteMenuPart_IncludeMenu = new ConceptPresentationBuilder().shortDesc("include another substitute menu").create();
  private final ConceptPresentation props_SubstituteMenuPart_Parameterized = new ConceptPresentationBuilder().shortDesc("parameterized menu part").create();
  private final ConceptPresentation props_SubstituteMenuPart_Placeholder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuPart_Subconcepts = new ConceptPresentationBuilder().shortDesc("includes default substitute menu of all the direct subconcepts").create();
  private final ConceptPresentation props_SubstituteMenuPart_Wrapper = new ConceptPresentationBuilder().shortDesc("wraps another substitute menu and customizes its behavior").create();
  private final ConceptPresentation props_SubstituteMenuReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuReference_Default = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuReference_DefaultWithFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuReference_Named = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenuVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubstituteMenu_Contribution = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0yn).create();
  private final ConceptPresentation props_SubstituteMenu_Default = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0zn).create();
  private final ConceptPresentation props_SubstituteMenu_Named = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0ao).create();
  private final ConceptPresentation props_SubstituteMenu_SimpleString = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Synchronizeable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TableComponentStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextBackgroundColorSelectedStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextBackgroundColorStyleClassItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransactionPropertyHandler_newValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransactionPropertyHandler_oldValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransactionalPropertyHandler = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationFeature = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationFeature_ActionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationFeature_DescriptionText = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationFeature_Icon = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationLocation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationLocation_Completion = new ConceptPresentationBuilder().shortDesc("center of the cell").create();
  private final ConceptPresentation props_TransformationLocation_ContextAssistant = new ConceptPresentationBuilder().shortDesc("in-editor context assistant").create();
  private final ConceptPresentation props_TransformationLocation_SideTransform = new ConceptPresentationBuilder().shortDesc("bound of the cell").create();
  private final ConceptPresentation props_TransformationLocation_SideTransform_PlaceInCellHolder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenu = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0so).create();
  private final ConceptPresentation props_TransformationMenuContribution = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0to).create();
  private final ConceptPresentation props_TransformationMenuPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuPart_Action = new ConceptPresentationBuilder().shortDesc("action with custom code").create();
  private final ConceptPresentation props_TransformationMenuPart_Group = new ConceptPresentationBuilder().shortDesc("composite part which can specify variables and applicability condition").create();
  private final ConceptPresentation props_TransformationMenuPart_IncludeMenu = new ConceptPresentationBuilder().shortDesc("include another menu").create();
  private final ConceptPresentation props_TransformationMenuPart_IncludeSubstituteMenu = new ConceptPresentationBuilder().shortDesc("includes specified substitute menu").create();
  private final ConceptPresentation props_TransformationMenuPart_Parameterized = new ConceptPresentationBuilder().shortDesc("parameterized menu part").create();
  private final ConceptPresentation props_TransformationMenuPart_Placeholder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuPart_SubMenu = new ConceptPresentationBuilder().shortDesc("submenu with further parts").create();
  private final ConceptPresentation props_TransformationMenuPart_Super = new ConceptPresentationBuilder().shortDesc("superconcepts menu").create();
  private final ConceptPresentation props_TransformationMenuPart_WrapSubstituteMenu = new ConceptPresentationBuilder().shortDesc("wraps the specified substitute menu and customizes its behavior").create();
  private final ConceptPresentation props_TransformationMenuReference_Default = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuReference_Named = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuSection = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuVariableDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenuVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformationMenu_Default = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0jp).create();
  private final ConceptPresentation props_TransformationMenu_Named = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0kp).create();
  private final ConceptPresentation props_UnapplyStyle = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnderlinedStyleClassItem = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractCellSelector:
        return props_AbstractCellSelector;
      case LanguageConceptSwitch.AbstractComponent:
        return props_AbstractComponent;
      case LanguageConceptSwitch.AbstractOutputConceptContainerSubstituteMenuPart:
        return props_AbstractOutputConceptContainerSubstituteMenuPart;
      case LanguageConceptSwitch.AbstractOutputConceptContainerTransformationMenuPart:
        return props_AbstractOutputConceptContainerTransformationMenuPart;
      case LanguageConceptSwitch.AbstractPaddingStyleClassItem:
        return props_AbstractPaddingStyleClassItem;
      case LanguageConceptSwitch.AbstractStyledTextOperation:
        return props_AbstractStyledTextOperation;
      case LanguageConceptSwitch.AppendTextOperation:
        return props_AppendTextOperation;
      case LanguageConceptSwitch.ApplyStyleClass:
        return props_ApplyStyleClass;
      case LanguageConceptSwitch.ApplyStyleClassCondition:
        return props_ApplyStyleClassCondition;
      case LanguageConceptSwitch.AttributeStyleClassItem:
        return props_AttributeStyleClassItem;
      case LanguageConceptSwitch.AutoDeletableStyleClassItem:
        return props_AutoDeletableStyleClassItem;
      case LanguageConceptSwitch.BackgroundColorStyleClassItem:
        return props_BackgroundColorStyleClassItem;
      case LanguageConceptSwitch.BaseEditorComponent:
        return props_BaseEditorComponent;
      case LanguageConceptSwitch.BaseLineCell:
        return props_BaseLineCell;
      case LanguageConceptSwitch.BooleanStyleSheetItem:
        return props_BooleanStyleSheetItem;
      case LanguageConceptSwitch.BracketColorStyleClassItem:
        return props_BracketColorStyleClassItem;
      case LanguageConceptSwitch.CaretPositionParameter:
        return props_CaretPositionParameter;
      case LanguageConceptSwitch.CellActionMapDeclaration:
        return props_CellActionMapDeclaration;
      case LanguageConceptSwitch.CellActionMapItem:
        return props_CellActionMapItem;
      case LanguageConceptSwitch.CellActionMap_CanExecuteFunction:
        return props_CellActionMap_CanExecuteFunction;
      case LanguageConceptSwitch.CellActionMap_ExecuteFunction:
        return props_CellActionMap_ExecuteFunction;
      case LanguageConceptSwitch.CellActionMap_FunctionParm_selectedNode:
        return props_CellActionMap_FunctionParm_selectedNode;
      case LanguageConceptSwitch.CellIdReferenceSelector:
        return props_CellIdReferenceSelector;
      case LanguageConceptSwitch.CellKeyMapDeclaration:
        return props_CellKeyMapDeclaration;
      case LanguageConceptSwitch.CellKeyMapItem:
        return props_CellKeyMapItem;
      case LanguageConceptSwitch.CellKeyMapKeystroke:
        return props_CellKeyMapKeystroke;
      case LanguageConceptSwitch.CellKeyMap_AbstractFunction:
        return props_CellKeyMap_AbstractFunction;
      case LanguageConceptSwitch.CellKeyMap_ExecuteFunction:
        return props_CellKeyMap_ExecuteFunction;
      case LanguageConceptSwitch.CellKeyMap_FunctionParm_selectedNode:
        return props_CellKeyMap_FunctionParm_selectedNode;
      case LanguageConceptSwitch.CellKeyMap_FunctionParm_selectedNodes:
        return props_CellKeyMap_FunctionParm_selectedNodes;
      case LanguageConceptSwitch.CellKeyMap_IsApplicableFunction:
        return props_CellKeyMap_IsApplicableFunction;
      case LanguageConceptSwitch.CellLayout:
        return props_CellLayout;
      case LanguageConceptSwitch.CellLayout_Flow:
        return props_CellLayout_Flow;
      case LanguageConceptSwitch.CellLayout_Horizontal:
        return props_CellLayout_Horizontal;
      case LanguageConceptSwitch.CellLayout_Indent:
        return props_CellLayout_Indent;
      case LanguageConceptSwitch.CellLayout_Superscript:
        return props_CellLayout_Superscript;
      case LanguageConceptSwitch.CellLayout_Table:
        return props_CellLayout_Table;
      case LanguageConceptSwitch.CellLayout_Vertical:
        return props_CellLayout_Vertical;
      case LanguageConceptSwitch.CellLayout_VerticalGrid:
        return props_CellLayout_VerticalGrid;
      case LanguageConceptSwitch.CellMenuComponent:
        return props_CellMenuComponent;
      case LanguageConceptSwitch.CellMenuComponentFeature:
        return props_CellMenuComponentFeature;
      case LanguageConceptSwitch.CellMenuComponentFeature_Link:
        return props_CellMenuComponentFeature_Link;
      case LanguageConceptSwitch.CellMenuComponentFeature_Property:
        return props_CellMenuComponentFeature_Property;
      case LanguageConceptSwitch.CellMenuDescriptor:
        return props_CellMenuDescriptor;
      case LanguageConceptSwitch.CellMenuPart_Abstract:
        return props_CellMenuPart_Abstract;
      case LanguageConceptSwitch.CellMenuPart_AbstractGroup:
        return props_CellMenuPart_AbstractGroup;
      case LanguageConceptSwitch.CellMenuPart_AbstractGroup_DescriptionText:
        return props_CellMenuPart_AbstractGroup_DescriptionText;
      case LanguageConceptSwitch.CellMenuPart_AbstractGroup_MatchingText:
        return props_CellMenuPart_AbstractGroup_MatchingText;
      case LanguageConceptSwitch.CellMenuPart_AbstractGroup_Query:
        return props_CellMenuPart_AbstractGroup_Query;
      case LanguageConceptSwitch.CellMenuPart_AbstractGroup_parameterObject:
        return props_CellMenuPart_AbstractGroup_parameterObject;
      case LanguageConceptSwitch.CellMenuPart_Abstract_editedNode:
        return props_CellMenuPart_Abstract_editedNode;
      case LanguageConceptSwitch.CellMenuPart_ApplySideTransforms:
        return props_CellMenuPart_ApplySideTransforms;
      case LanguageConceptSwitch.CellMenuPart_CellMenuComponent:
        return props_CellMenuPart_CellMenuComponent;
      case LanguageConceptSwitch.CellMenuPart_Generic_Group:
        return props_CellMenuPart_Generic_Group;
      case LanguageConceptSwitch.CellMenuPart_Generic_Group_Handler:
        return props_CellMenuPart_Generic_Group_Handler;
      case LanguageConceptSwitch.CellMenuPart_Generic_Item:
        return props_CellMenuPart_Generic_Item;
      case LanguageConceptSwitch.CellMenuPart_Generic_Item_Handler:
        return props_CellMenuPart_Generic_Item_Handler;
      case LanguageConceptSwitch.CellMenuPart_PropertyPostfixHints:
        return props_CellMenuPart_PropertyPostfixHints;
      case LanguageConceptSwitch.CellMenuPart_PropertyPostfixHints_GetPostfixes:
        return props_CellMenuPart_PropertyPostfixHints_GetPostfixes;
      case LanguageConceptSwitch.CellMenuPart_PropertyValues:
        return props_CellMenuPart_PropertyValues;
      case LanguageConceptSwitch.CellMenuPart_PropertyValues_GetValues:
        return props_CellMenuPart_PropertyValues_GetValues;
      case LanguageConceptSwitch.CellMenuPart_ReferentPrimary:
        return props_CellMenuPart_ReferentPrimary;
      case LanguageConceptSwitch.CellMenuPart_ReplaceChildPrimary:
        return props_CellMenuPart_ReplaceChildPrimary;
      case LanguageConceptSwitch.CellMenuPart_ReplaceChild_CustomChildConcept:
        return props_CellMenuPart_ReplaceChild_CustomChildConcept;
      case LanguageConceptSwitch.CellMenuPart_ReplaceChild_CustomChildConcept_Query:
        return props_CellMenuPart_ReplaceChild_CustomChildConcept_Query;
      case LanguageConceptSwitch.CellMenuPart_ReplaceChild_Group:
        return props_CellMenuPart_ReplaceChild_Group;
      case LanguageConceptSwitch.CellMenuPart_ReplaceChild_Group_Create:
        return props_CellMenuPart_ReplaceChild_Group_Create;
      case LanguageConceptSwitch.CellMenuPart_ReplaceChild_Group_Query:
        return props_CellMenuPart_ReplaceChild_Group_Query;
      case LanguageConceptSwitch.CellMenuPart_ReplaceChild_Item:
        return props_CellMenuPart_ReplaceChild_Item;
      case LanguageConceptSwitch.CellMenuPart_ReplaceChild_Item_Create:
        return props_CellMenuPart_ReplaceChild_Item_Create;
      case LanguageConceptSwitch.CellMenuPart_ReplaceChild_currentChild:
        return props_CellMenuPart_ReplaceChild_currentChild;
      case LanguageConceptSwitch.CellMenuPart_ReplaceChild_defaultChildConcept:
        return props_CellMenuPart_ReplaceChild_defaultChildConcept;
      case LanguageConceptSwitch.CellMenuPart_ReplaceChild_defaultConceptOfChild:
        return props_CellMenuPart_ReplaceChild_defaultConceptOfChild;
      case LanguageConceptSwitch.CellMenuPart_ReplaceNode_CustomNodeConcept:
        return props_CellMenuPart_ReplaceNode_CustomNodeConcept;
      case LanguageConceptSwitch.CellMenuPart_ReplaceNode_Group:
        return props_CellMenuPart_ReplaceNode_Group;
      case LanguageConceptSwitch.CellMenuPart_ReplaceNode_Group_Create:
        return props_CellMenuPart_ReplaceNode_Group_Create;
      case LanguageConceptSwitch.CellModel_AbstractLabel:
        return props_CellModel_AbstractLabel;
      case LanguageConceptSwitch.CellModel_Alternation:
        return props_CellModel_Alternation;
      case LanguageConceptSwitch.CellModel_AttributedLinkCell:
        return props_CellModel_AttributedLinkCell;
      case LanguageConceptSwitch.CellModel_AttributedNodeCell:
        return props_CellModel_AttributedNodeCell;
      case LanguageConceptSwitch.CellModel_AttributedPropertyCell:
        return props_CellModel_AttributedPropertyCell;
      case LanguageConceptSwitch.CellModel_Block:
        return props_CellModel_Block;
      case LanguageConceptSwitch.CellModel_BlockEnd:
        return props_CellModel_BlockEnd;
      case LanguageConceptSwitch.CellModel_BlockStart:
        return props_CellModel_BlockStart;
      case LanguageConceptSwitch.CellModel_Collection:
        return props_CellModel_Collection;
      case LanguageConceptSwitch.CellModel_Component:
        return props_CellModel_Component;
      case LanguageConceptSwitch.CellModel_Constant:
        return props_CellModel_Constant;
      case LanguageConceptSwitch.CellModel_ContextAssistant:
        return props_CellModel_ContextAssistant;
      case LanguageConceptSwitch.CellModel_Custom:
        return props_CellModel_Custom;
      case LanguageConceptSwitch.CellModel_Empty:
        return props_CellModel_Empty;
      case LanguageConceptSwitch.CellModel_Error:
        return props_CellModel_Error;
      case LanguageConceptSwitch.CellModel_Image:
        return props_CellModel_Image;
      case LanguageConceptSwitch.CellModel_Indent:
        return props_CellModel_Indent;
      case LanguageConceptSwitch.CellModel_JComponent:
        return props_CellModel_JComponent;
      case LanguageConceptSwitch.CellModel_ListWithRole:
        return props_CellModel_ListWithRole;
      case LanguageConceptSwitch.CellModel_ModelAccess:
        return props_CellModel_ModelAccess;
      case LanguageConceptSwitch.CellModel_NextEditor:
        return props_CellModel_NextEditor;
      case LanguageConceptSwitch.CellModel_NonEmptyProperty:
        return props_CellModel_NonEmptyProperty;
      case LanguageConceptSwitch.CellModel_Property:
        return props_CellModel_Property;
      case LanguageConceptSwitch.CellModel_ReadOnlyModelAccessor:
        return props_CellModel_ReadOnlyModelAccessor;
      case LanguageConceptSwitch.CellModel_RefCell:
        return props_CellModel_RefCell;
      case LanguageConceptSwitch.CellModel_RefNode:
        return props_CellModel_RefNode;
      case LanguageConceptSwitch.CellModel_RefNodeList:
        return props_CellModel_RefNodeList;
      case LanguageConceptSwitch.CellModel_ReferencePresentation:
        return props_CellModel_ReferencePresentation;
      case LanguageConceptSwitch.CellModel_TransactionalProperty:
        return props_CellModel_TransactionalProperty;
      case LanguageConceptSwitch.CellModel_URL:
        return props_CellModel_URL;
      case LanguageConceptSwitch.CellModel_WithRole:
        return props_CellModel_WithRole;
      case LanguageConceptSwitch.ColorStyleClassItem:
        return props_ColorStyleClassItem;
      case LanguageConceptSwitch.ConceptEditorContextHints:
        return props_ConceptEditorContextHints;
      case LanguageConceptSwitch.ConceptEditorDeclaration:
        return props_ConceptEditorDeclaration;
      case LanguageConceptSwitch.ConceptEditorHintDeclaration:
        return props_ConceptEditorHintDeclaration;
      case LanguageConceptSwitch.ConceptEditorHintDeclarationReference:
        return props_ConceptEditorHintDeclarationReference;
      case LanguageConceptSwitch.ConceptEditorHintDeclarationReferenceExpression:
        return props_ConceptEditorHintDeclarationReferenceExpression;
      case LanguageConceptSwitch.ConceptFunctionParameter_StyledText:
        return props_ConceptFunctionParameter_StyledText;
      case LanguageConceptSwitch.ConceptFunctionParameter_childNode:
        return props_ConceptFunctionParameter_childNode;
      case LanguageConceptSwitch.ConceptFunctionParameter_editorContext:
        return props_ConceptFunctionParameter_editorContext;
      case LanguageConceptSwitch.ConceptFunctionParameter_model:
        return props_ConceptFunctionParameter_model;
      case LanguageConceptSwitch.ConceptFunctionParameter_nextNode:
        return props_ConceptFunctionParameter_nextNode;
      case LanguageConceptSwitch.ConceptFunctionParameter_node:
        return props_ConceptFunctionParameter_node;
      case LanguageConceptSwitch.ConceptFunctionParameter_oldText:
        return props_ConceptFunctionParameter_oldText;
      case LanguageConceptSwitch.ConceptFunctionParameter_parameterObject:
        return props_ConceptFunctionParameter_parameterObject;
      case LanguageConceptSwitch.ConceptFunctionParameter_prevNode:
        return props_ConceptFunctionParameter_prevNode;
      case LanguageConceptSwitch.ConceptFunctionParameter_selectedNode:
        return props_ConceptFunctionParameter_selectedNode;
      case LanguageConceptSwitch.ConceptFunctionParameter_sourceNode:
        return props_ConceptFunctionParameter_sourceNode;
      case LanguageConceptSwitch.ConceptFunctionParameter_targetNode:
        return props_ConceptFunctionParameter_targetNode;
      case LanguageConceptSwitch.ConceptFunctionParameter_text:
        return props_ConceptFunctionParameter_text;
      case LanguageConceptSwitch.ContextHintsSpecification:
        return props_ContextHintsSpecification;
      case LanguageConceptSwitch.ContextVariable:
        return props_ContextVariable;
      case LanguageConceptSwitch.ContextVariable_EditorContext:
        return props_ContextVariable_EditorContext;
      case LanguageConceptSwitch.ContextVariable_Node:
        return props_ContextVariable_Node;
      case LanguageConceptSwitch.DefaultBaseLine:
        return props_DefaultBaseLine;
      case LanguageConceptSwitch.DefaultCaretPositionStyleClassItem:
        return props_DefaultCaretPositionStyleClassItem;
      case LanguageConceptSwitch.DominatesRecord:
        return props_DominatesRecord;
      case LanguageConceptSwitch.DrawBorderStyleClassItem:
        return props_DrawBorderStyleClassItem;
      case LanguageConceptSwitch.DrawBracketsStyleClassItem:
        return props_DrawBracketsStyleClassItem;
      case LanguageConceptSwitch.EditableStyleClassItem:
        return props_EditableStyleClassItem;
      case LanguageConceptSwitch.EditorCellId:
        return props_EditorCellId;
      case LanguageConceptSwitch.EditorCellModel:
        return props_EditorCellModel;
      case LanguageConceptSwitch.EditorComponentDeclaration:
        return props_EditorComponentDeclaration;
      case LanguageConceptSwitch.EditorComponentDeclarationReference:
        return props_EditorComponentDeclarationReference;
      case LanguageConceptSwitch.ExplicitHintsSpecification:
        return props_ExplicitHintsSpecification;
      case LanguageConceptSwitch.FirstPositionAllowedStyleClassItem:
        return props_FirstPositionAllowedStyleClassItem;
      case LanguageConceptSwitch.FloatStyleClassItem:
        return props_FloatStyleClassItem;
      case LanguageConceptSwitch.FontSizeStyleClassItem:
        return props_FontSizeStyleClassItem;
      case LanguageConceptSwitch.FontStyleStyleClassItem:
        return props_FontStyleStyleClassItem;
      case LanguageConceptSwitch.ForegroundColorStyleClassItem:
        return props_ForegroundColorStyleClassItem;
      case LanguageConceptSwitch.ForegroundNullColorStyleClassItem:
        return props_ForegroundNullColorStyleClassItem;
      case LanguageConceptSwitch.HorizontalAlign:
        return props_HorizontalAlign;
      case LanguageConceptSwitch.HorizontalGapStyleClassItem:
        return props_HorizontalGapStyleClassItem;
      case LanguageConceptSwitch.ICellStyle:
        return props_ICellStyle;
      case LanguageConceptSwitch.IContextNodeAccessQualifier:
        return props_IContextNodeAccessQualifier;
      case LanguageConceptSwitch.IContextProvider:
        return props_IContextProvider;
      case LanguageConceptSwitch.IContextVariableProvider:
        return props_IContextVariableProvider;
      case LanguageConceptSwitch.IEditorContextAccessQualifier:
        return props_IEditorContextAccessQualifier;
      case LanguageConceptSwitch.IEditorContextProvider:
        return props_IEditorContextProvider;
      case LanguageConceptSwitch.IExtensibleSubstituteMenuPart:
        return props_IExtensibleSubstituteMenuPart;
      case LanguageConceptSwitch.IExtensibleTransformationMenuPart:
        return props_IExtensibleTransformationMenuPart;
      case LanguageConceptSwitch.IIncludeSubstituteMenuPart:
        return props_IIncludeSubstituteMenuPart;
      case LanguageConceptSwitch.IMenu:
        return props_IMenu;
      case LanguageConceptSwitch.IMenuPartParameterized:
        return props_IMenuPartParameterized;
      case LanguageConceptSwitch.IMenuPartWithOutputConcept:
        return props_IMenuPartWithOutputConcept;
      case LanguageConceptSwitch.IMenuReference:
        return props_IMenuReference;
      case LanguageConceptSwitch.IMenuReference_Default:
        return props_IMenuReference_Default;
      case LanguageConceptSwitch.IMenuReference_Named:
        return props_IMenuReference_Named;
      case LanguageConceptSwitch.IMenu_Concept:
        return props_IMenu_Concept;
      case LanguageConceptSwitch.IMenu_Contribution:
        return props_IMenu_Contribution;
      case LanguageConceptSwitch.IMenu_Default:
        return props_IMenu_Default;
      case LanguageConceptSwitch.IMenu_Named:
        return props_IMenu_Named;
      case LanguageConceptSwitch.INodeProvider:
        return props_INodeProvider;
      case LanguageConceptSwitch.IOutputConceptSubstituteMenuPart:
        return props_IOutputConceptSubstituteMenuPart;
      case LanguageConceptSwitch.IOutputConceptTransformationMenuPart:
        return props_IOutputConceptTransformationMenuPart;
      case LanguageConceptSwitch.IParameterizableMenuPart:
        return props_IParameterizableMenuPart;
      case LanguageConceptSwitch.IQueryFunction_Color:
        return props_IQueryFunction_Color;
      case LanguageConceptSwitch.IStyle:
        return props_IStyle;
      case LanguageConceptSwitch.IStyleContainer:
        return props_IStyleContainer;
      case LanguageConceptSwitch.IStyleSheetItem:
        return props_IStyleSheetItem;
      case LanguageConceptSwitch.ISubstituteMenu:
        return props_ISubstituteMenu;
      case LanguageConceptSwitch.ISubstituteMenuReference:
        return props_ISubstituteMenuReference;
      case LanguageConceptSwitch.ISubstituteMenu_String:
        return props_ISubstituteMenu_String;
      case LanguageConceptSwitch.ITransformationMenu:
        return props_ITransformationMenu;
      case LanguageConceptSwitch.ITransformationMenuReference:
        return props_ITransformationMenuReference;
      case LanguageConceptSwitch.IdSelector:
        return props_IdSelector;
      case LanguageConceptSwitch.ImagePathProvider:
        return props_ImagePathProvider;
      case LanguageConceptSwitch.IndentLayoutIndentAnchorStyleClassItem:
        return props_IndentLayoutIndentAnchorStyleClassItem;
      case LanguageConceptSwitch.IndentLayoutIndentStyleClassItem:
        return props_IndentLayoutIndentStyleClassItem;
      case LanguageConceptSwitch.IndentLayoutNewLineChildrenStyleClassItem:
        return props_IndentLayoutNewLineChildrenStyleClassItem;
      case LanguageConceptSwitch.IndentLayoutNewLineStyleClassItem:
        return props_IndentLayoutNewLineStyleClassItem;
      case LanguageConceptSwitch.IndentLayoutNoWrapClassItem:
        return props_IndentLayoutNoWrapClassItem;
      case LanguageConceptSwitch.IndentLayoutOnNewLineStyleClassItem:
        return props_IndentLayoutOnNewLineStyleClassItem;
      case LanguageConceptSwitch.IndentLayoutWrapAnchorStyleClassItem:
        return props_IndentLayoutWrapAnchorStyleClassItem;
      case LanguageConceptSwitch.InlineEditorComponent:
        return props_InlineEditorComponent;
      case LanguageConceptSwitch.InlineStyleDeclaration:
        return props_InlineStyleDeclaration;
      case LanguageConceptSwitch.LastPositionAllowedStyleClassItem:
        return props_LastPositionAllowedStyleClassItem;
      case LanguageConceptSwitch.LayoutConstraintStyleClassItem:
        return props_LayoutConstraintStyleClassItem;
      case LanguageConceptSwitch.LayoutContainer:
        return props_LayoutContainer;
      case LanguageConceptSwitch.MatchingLabelStyleClassItem:
        return props_MatchingLabelStyleClassItem;
      case LanguageConceptSwitch.MaxWidthStyleClassItem:
        return props_MaxWidthStyleClassItem;
      case LanguageConceptSwitch.MigrateManuallyAnnotation:
        return props_MigrateManuallyAnnotation;
      case LanguageConceptSwitch.MigratedSideTransformMenuAttribute:
        return props_MigratedSideTransformMenuAttribute;
      case LanguageConceptSwitch.MigratedToAnnotation:
        return props_MigratedToAnnotation;
      case LanguageConceptSwitch.ModelAccessor:
        return props_ModelAccessor;
      case LanguageConceptSwitch.NavigatableNodeStyleClassItem:
        return props_NavigatableNodeStyleClassItem;
      case LanguageConceptSwitch.NavigatableReferenceStyleClassItem:
        return props_NavigatableReferenceStyleClassItem;
      case LanguageConceptSwitch.OptionalConceptReference:
        return props_OptionalConceptReference;
      case LanguageConceptSwitch.OrCellSelector:
        return props_OrCellSelector;
      case LanguageConceptSwitch.PaddingBottomStyleClassItem:
        return props_PaddingBottomStyleClassItem;
      case LanguageConceptSwitch.PaddingLeftStyleClassItem:
        return props_PaddingLeftStyleClassItem;
      case LanguageConceptSwitch.PaddingRightStyleClassItem:
        return props_PaddingRightStyleClassItem;
      case LanguageConceptSwitch.PaddingTopStyleClassItem:
        return props_PaddingTopStyleClassItem;
      case LanguageConceptSwitch.ParametersInformationQuery:
        return props_ParametersInformationQuery;
      case LanguageConceptSwitch.ParametersInformationStyleClassItem:
        return props_ParametersInformationStyleClassItem;
      case LanguageConceptSwitch.PositionChildrenStyleClassItem:
        return props_PositionChildrenStyleClassItem;
      case LanguageConceptSwitch.PositionStyleClassItem:
        return props_PositionStyleClassItem;
      case LanguageConceptSwitch.PredefinedSelector:
        return props_PredefinedSelector;
      case LanguageConceptSwitch.PropertyDeclarationCellSelector:
        return props_PropertyDeclarationCellSelector;
      case LanguageConceptSwitch.PropertyExpressionCellSelector:
        return props_PropertyExpressionCellSelector;
      case LanguageConceptSwitch.PunctuationLeftStyleClassItem:
        return props_PunctuationLeftStyleClassItem;
      case LanguageConceptSwitch.PunctuationRightStyleClassItem:
        return props_PunctuationRightStyleClassItem;
      case LanguageConceptSwitch.QueryFunctionParameter_SubstituteMenu_Concept:
        return props_QueryFunctionParameter_SubstituteMenu_Concept;
      case LanguageConceptSwitch.QueryFunctionParameter_SubstituteMenu_CreatedNode:
        return props_QueryFunctionParameter_SubstituteMenu_CreatedNode;
      case LanguageConceptSwitch.QueryFunctionParameter_SubstituteMenu_CurrentTargetNode:
        return props_QueryFunctionParameter_SubstituteMenu_CurrentTargetNode;
      case LanguageConceptSwitch.QueryFunctionParameter_SubstituteMenu_Link:
        return props_QueryFunctionParameter_SubstituteMenu_Link;
      case LanguageConceptSwitch.QueryFunctionParameter_SubstituteMenu_NodeToWrap:
        return props_QueryFunctionParameter_SubstituteMenu_NodeToWrap;
      case LanguageConceptSwitch.QueryFunctionParameter_SubstituteMenu_ParentNode:
        return props_QueryFunctionParameter_SubstituteMenu_ParentNode;
      case LanguageConceptSwitch.QueryFunctionParameter_SubstituteMenu_Strictly:
        return props_QueryFunctionParameter_SubstituteMenu_Strictly;
      case LanguageConceptSwitch.QueryFunctionParameter_SubstituteMenu_WrappedItem:
        return props_QueryFunctionParameter_SubstituteMenu_WrappedItem;
      case LanguageConceptSwitch.QueryFunctionParameter_TransformationMenu_CreatedNode:
        return props_QueryFunctionParameter_TransformationMenu_CreatedNode;
      case LanguageConceptSwitch.QueryFunctionParameter_TransformationMenu_node:
        return props_QueryFunctionParameter_TransformationMenu_node;
      case LanguageConceptSwitch.QueryFunctionParameter_TransformationMenu_targetNode:
        return props_QueryFunctionParameter_TransformationMenu_targetNode;
      case LanguageConceptSwitch.QueryFunctionParameter_parameterObject:
        return props_QueryFunctionParameter_parameterObject;
      case LanguageConceptSwitch.QueryFunctionParameter_pattern:
        return props_QueryFunctionParameter_pattern;
      case LanguageConceptSwitch.QueryFunction_AttributeStyleParameter:
        return props_QueryFunction_AttributeStyleParameter;
      case LanguageConceptSwitch.QueryFunction_Boolean:
        return props_QueryFunction_Boolean;
      case LanguageConceptSwitch.QueryFunction_CellProvider:
        return props_QueryFunction_CellProvider;
      case LanguageConceptSwitch.QueryFunction_Color:
        return props_QueryFunction_Color;
      case LanguageConceptSwitch.QueryFunction_ColorComposit:
        return props_QueryFunction_ColorComposit;
      case LanguageConceptSwitch.QueryFunction_FontStyle:
        return props_QueryFunction_FontStyle;
      case LanguageConceptSwitch.QueryFunction_ImagePath:
        return props_QueryFunction_ImagePath;
      case LanguageConceptSwitch.QueryFunction_Integer:
        return props_QueryFunction_Integer;
      case LanguageConceptSwitch.QueryFunction_IsMethodCurrent:
        return props_QueryFunction_IsMethodCurrent;
      case LanguageConceptSwitch.QueryFunction_JComponent:
        return props_QueryFunction_JComponent;
      case LanguageConceptSwitch.QueryFunction_Menu:
        return props_QueryFunction_Menu;
      case LanguageConceptSwitch.QueryFunction_MethodPresentation:
        return props_QueryFunction_MethodPresentation;
      case LanguageConceptSwitch.QueryFunction_ModelAccess_Getter:
        return props_QueryFunction_ModelAccess_Getter;
      case LanguageConceptSwitch.QueryFunction_ModelAccess_Setter:
        return props_QueryFunction_ModelAccess_Setter;
      case LanguageConceptSwitch.QueryFunction_ModelAccess_Validator:
        return props_QueryFunction_ModelAccess_Validator;
      case LanguageConceptSwitch.QueryFunction_ModuleAndPath:
        return props_QueryFunction_ModuleAndPath;
      case LanguageConceptSwitch.QueryFunction_NodeCondition:
        return props_QueryFunction_NodeCondition;
      case LanguageConceptSwitch.QueryFunction_NodeFactory:
        return props_QueryFunction_NodeFactory;
      case LanguageConceptSwitch.QueryFunction_NodeListFilter:
        return props_QueryFunction_NodeListFilter;
      case LanguageConceptSwitch.QueryFunction_ParametersList:
        return props_QueryFunction_ParametersList;
      case LanguageConceptSwitch.QueryFunction_RefPresentation:
        return props_QueryFunction_RefPresentation;
      case LanguageConceptSwitch.QueryFunction_SNode:
        return props_QueryFunction_SNode;
      case LanguageConceptSwitch.QueryFunction_SeparatorText:
        return props_QueryFunction_SeparatorText;
      case LanguageConceptSwitch.QueryFunction_String:
        return props_QueryFunction_String;
      case LanguageConceptSwitch.QueryFunction_Style:
        return props_QueryFunction_Style;
      case LanguageConceptSwitch.QueryFunction_StyleParameter:
        return props_QueryFunction_StyleParameter;
      case LanguageConceptSwitch.QueryFunction_SubstituteMenu:
        return props_QueryFunction_SubstituteMenu;
      case LanguageConceptSwitch.QueryFunction_SubstituteMenuPart:
        return props_QueryFunction_SubstituteMenuPart;
      case LanguageConceptSwitch.QueryFunction_SubstituteMenuVariable_Initializer:
        return props_QueryFunction_SubstituteMenuVariable_Initializer;
      case LanguageConceptSwitch.QueryFunction_SubstituteMenu_ActionType:
        return props_QueryFunction_SubstituteMenu_ActionType;
      case LanguageConceptSwitch.QueryFunction_SubstituteMenu_CanSubstitute:
        return props_QueryFunction_SubstituteMenu_CanSubstitute;
      case LanguageConceptSwitch.QueryFunction_SubstituteMenu_Concept:
        return props_QueryFunction_SubstituteMenu_Concept;
      case LanguageConceptSwitch.QueryFunction_SubstituteMenu_Concepts:
        return props_QueryFunction_SubstituteMenu_Concepts;
      case LanguageConceptSwitch.QueryFunction_SubstituteMenu_Condition:
        return props_QueryFunction_SubstituteMenu_Condition;
      case LanguageConceptSwitch.QueryFunction_SubstituteMenu_FilterConcepts:
        return props_QueryFunction_SubstituteMenu_FilterConcepts;
      case LanguageConceptSwitch.QueryFunction_SubstituteMenu_Icon:
        return props_QueryFunction_SubstituteMenu_Icon;
      case LanguageConceptSwitch.QueryFunction_SubstituteMenu_Parameter:
        return props_QueryFunction_SubstituteMenu_Parameter;
      case LanguageConceptSwitch.QueryFunction_SubstituteMenu_Select:
        return props_QueryFunction_SubstituteMenu_Select;
      case LanguageConceptSwitch.QueryFunction_SubstituteMenu_Substitute:
        return props_QueryFunction_SubstituteMenu_Substitute;
      case LanguageConceptSwitch.QueryFunction_SubstituteMenu_SubstituteString:
        return props_QueryFunction_SubstituteMenu_SubstituteString;
      case LanguageConceptSwitch.QueryFunction_SubstituteMenu_WrapperHandler:
        return props_QueryFunction_SubstituteMenu_WrapperHandler;
      case LanguageConceptSwitch.QueryFunction_TransformationMenu:
        return props_QueryFunction_TransformationMenu;
      case LanguageConceptSwitch.QueryFunction_TransformationMenuVariable_Initializer:
        return props_QueryFunction_TransformationMenuVariable_Initializer;
      case LanguageConceptSwitch.QueryFunction_TransformationMenu_ActionLabelText:
        return props_QueryFunction_TransformationMenu_ActionLabelText;
      case LanguageConceptSwitch.QueryFunction_TransformationMenu_Condition:
        return props_QueryFunction_TransformationMenu_Condition;
      case LanguageConceptSwitch.QueryFunction_TransformationMenu_DescriptionText:
        return props_QueryFunction_TransformationMenu_DescriptionText;
      case LanguageConceptSwitch.QueryFunction_TransformationMenu_Execute:
        return props_QueryFunction_TransformationMenu_Execute;
      case LanguageConceptSwitch.QueryFunction_TransformationMenu_Extensible:
        return props_QueryFunction_TransformationMenu_Extensible;
      case LanguageConceptSwitch.QueryFunction_TransformationMenu_Icon:
        return props_QueryFunction_TransformationMenu_Icon;
      case LanguageConceptSwitch.QueryFunction_TransformationMenu_Node:
        return props_QueryFunction_TransformationMenu_Node;
      case LanguageConceptSwitch.QueryFunction_TransformationMenu_Parameter:
        return props_QueryFunction_TransformationMenu_Parameter;
      case LanguageConceptSwitch.QueryFunction_TransformationMenu_TargetNode:
        return props_QueryFunction_TransformationMenu_TargetNode;
      case LanguageConceptSwitch.QueryFunction_TransformationMenu_Text:
        return props_QueryFunction_TransformationMenu_Text;
      case LanguageConceptSwitch.QueryFunction_TransformationMenu_WrapperHandler:
        return props_QueryFunction_TransformationMenu_WrapperHandler;
      case LanguageConceptSwitch.QueryFunction_Underlined:
        return props_QueryFunction_Underlined;
      case LanguageConceptSwitch.QueryHintsSpecification:
        return props_QueryHintsSpecification;
      case LanguageConceptSwitch.RGBColor:
        return props_RGBColor;
      case LanguageConceptSwitch.ReadOnlyModelAccessor:
        return props_ReadOnlyModelAccessor;
      case LanguageConceptSwitch.ReadOnlyStyleClassItem:
        return props_ReadOnlyStyleClassItem;
      case LanguageConceptSwitch.RightTransformAnchorTagWrapper:
        return props_RightTransformAnchorTagWrapper;
      case LanguageConceptSwitch.ScriptKindClassItem:
        return props_ScriptKindClassItem;
      case LanguageConceptSwitch.SelectInEditorOperation:
        return props_SelectInEditorOperation;
      case LanguageConceptSwitch.SelectParameter:
        return props_SelectParameter;
      case LanguageConceptSwitch.SelectPositionParameter:
        return props_SelectPositionParameter;
      case LanguageConceptSwitch.SelectableStyleSheetItem:
        return props_SelectableStyleSheetItem;
      case LanguageConceptSwitch.SetBoldOperation:
        return props_SetBoldOperation;
      case LanguageConceptSwitch.ShowBoundariesInStyleClassItem:
        return props_ShowBoundariesInStyleClassItem;
      case LanguageConceptSwitch.SideTransformAnchorTagStyleClassItem:
        return props_SideTransformAnchorTagStyleClassItem;
      case LanguageConceptSwitch.StrikeOutStyleSheet:
        return props_StrikeOutStyleSheet;
      case LanguageConceptSwitch.StubCellModel_Alternation:
        return props_StubCellModel_Alternation;
      case LanguageConceptSwitch.StubCellModel_Block:
        return props_StubCellModel_Block;
      case LanguageConceptSwitch.StubCellModel_Collection:
        return props_StubCellModel_Collection;
      case LanguageConceptSwitch.StubCellModel_Component:
        return props_StubCellModel_Component;
      case LanguageConceptSwitch.StubCellModel_Constant:
        return props_StubCellModel_Constant;
      case LanguageConceptSwitch.StubCellModel_ContextAssistant:
        return props_StubCellModel_ContextAssistant;
      case LanguageConceptSwitch.StubCellModel_Custom:
        return props_StubCellModel_Custom;
      case LanguageConceptSwitch.StubCellModel_Error:
        return props_StubCellModel_Error;
      case LanguageConceptSwitch.StubCellModel_Image:
        return props_StubCellModel_Image;
      case LanguageConceptSwitch.StubCellModel_JComponent:
        return props_StubCellModel_JComponent;
      case LanguageConceptSwitch.StubCellModel_ModelAccess:
        return props_StubCellModel_ModelAccess;
      case LanguageConceptSwitch.StubCellModel_NonEmptyProperty:
        return props_StubCellModel_NonEmptyProperty;
      case LanguageConceptSwitch.StubCellModel_Property:
        return props_StubCellModel_Property;
      case LanguageConceptSwitch.StubCellModel_ReadOnlyModelAccessor:
        return props_StubCellModel_ReadOnlyModelAccessor;
      case LanguageConceptSwitch.StubCellModel_RefCell:
        return props_StubCellModel_RefCell;
      case LanguageConceptSwitch.StubCellModel_RefNode:
        return props_StubCellModel_RefNode;
      case LanguageConceptSwitch.StubCellModel_RefNodeList:
        return props_StubCellModel_RefNodeList;
      case LanguageConceptSwitch.StubCellModel_ReferencePresentation:
        return props_StubCellModel_ReferencePresentation;
      case LanguageConceptSwitch.StubCellModel_Table:
        return props_StubCellModel_Table;
      case LanguageConceptSwitch.StubCellModel_TransactionalProperty:
        return props_StubCellModel_TransactionalProperty;
      case LanguageConceptSwitch.StubCellModel_URL:
        return props_StubCellModel_URL;
      case LanguageConceptSwitch.StubEditorCellModel:
        return props_StubEditorCellModel;
      case LanguageConceptSwitch.StyleAttributeDeclaration:
        return props_StyleAttributeDeclaration;
      case LanguageConceptSwitch.StyleAttributeReferenceExpression:
        return props_StyleAttributeReferenceExpression;
      case LanguageConceptSwitch.StyleClass:
        return props_StyleClass;
      case LanguageConceptSwitch.StyleClassItem:
        return props_StyleClassItem;
      case LanguageConceptSwitch.StyleClassReference:
        return props_StyleClassReference;
      case LanguageConceptSwitch.StyleClassReferenceList:
        return props_StyleClassReferenceList;
      case LanguageConceptSwitch.StyleKey:
        return props_StyleKey;
      case LanguageConceptSwitch.StyleKeyPack:
        return props_StyleKeyPack;
      case LanguageConceptSwitch.StyleReference:
        return props_StyleReference;
      case LanguageConceptSwitch.StyleSheet:
        return props_StyleSheet;
      case LanguageConceptSwitch.StyledTextType:
        return props_StyledTextType;
      case LanguageConceptSwitch.SubstituteFeature:
        return props_SubstituteFeature;
      case LanguageConceptSwitch.SubstituteFeature_ActionType:
        return props_SubstituteFeature_ActionType;
      case LanguageConceptSwitch.SubstituteFeature_CanSubstitute:
        return props_SubstituteFeature_CanSubstitute;
      case LanguageConceptSwitch.SubstituteFeature_DescriptionText:
        return props_SubstituteFeature_DescriptionText;
      case LanguageConceptSwitch.SubstituteFeature_Icon:
        return props_SubstituteFeature_Icon;
      case LanguageConceptSwitch.SubstituteFeature_MatchingText:
        return props_SubstituteFeature_MatchingText;
      case LanguageConceptSwitch.SubstituteFeature_Selection:
        return props_SubstituteFeature_Selection;
      case LanguageConceptSwitch.SubstituteMenu:
        return props_SubstituteMenu;
      case LanguageConceptSwitch.SubstituteMenuItemType:
        return props_SubstituteMenuItemType;
      case LanguageConceptSwitch.SubstituteMenuItem_AbstractOperation:
        return props_SubstituteMenuItem_AbstractOperation;
      case LanguageConceptSwitch.SubstituteMenuItem_DescriptionText_Operation:
        return props_SubstituteMenuItem_DescriptionText_Operation;
      case LanguageConceptSwitch.SubstituteMenuItem_MatchingText_Operation:
        return props_SubstituteMenuItem_MatchingText_Operation;
      case LanguageConceptSwitch.SubstituteMenuItem_OutputConcept_Operation:
        return props_SubstituteMenuItem_OutputConcept_Operation;
      case LanguageConceptSwitch.SubstituteMenuPart:
        return props_SubstituteMenuPart;
      case LanguageConceptSwitch.SubstituteMenuPart_Action:
        return props_SubstituteMenuPart_Action;
      case LanguageConceptSwitch.SubstituteMenuPart_AddConcept:
        return props_SubstituteMenuPart_AddConcept;
      case LanguageConceptSwitch.SubstituteMenuPart_Concepts:
        return props_SubstituteMenuPart_Concepts;
      case LanguageConceptSwitch.SubstituteMenuPart_Group:
        return props_SubstituteMenuPart_Group;
      case LanguageConceptSwitch.SubstituteMenuPart_IncludeMenu:
        return props_SubstituteMenuPart_IncludeMenu;
      case LanguageConceptSwitch.SubstituteMenuPart_Parameterized:
        return props_SubstituteMenuPart_Parameterized;
      case LanguageConceptSwitch.SubstituteMenuPart_Placeholder:
        return props_SubstituteMenuPart_Placeholder;
      case LanguageConceptSwitch.SubstituteMenuPart_Subconcepts:
        return props_SubstituteMenuPart_Subconcepts;
      case LanguageConceptSwitch.SubstituteMenuPart_Wrapper:
        return props_SubstituteMenuPart_Wrapper;
      case LanguageConceptSwitch.SubstituteMenuReference:
        return props_SubstituteMenuReference;
      case LanguageConceptSwitch.SubstituteMenuReference_Default:
        return props_SubstituteMenuReference_Default;
      case LanguageConceptSwitch.SubstituteMenuReference_DefaultWithFunction:
        return props_SubstituteMenuReference_DefaultWithFunction;
      case LanguageConceptSwitch.SubstituteMenuReference_Named:
        return props_SubstituteMenuReference_Named;
      case LanguageConceptSwitch.SubstituteMenuVariableDeclaration:
        return props_SubstituteMenuVariableDeclaration;
      case LanguageConceptSwitch.SubstituteMenuVariableReference:
        return props_SubstituteMenuVariableReference;
      case LanguageConceptSwitch.SubstituteMenu_Contribution:
        return props_SubstituteMenu_Contribution;
      case LanguageConceptSwitch.SubstituteMenu_Default:
        return props_SubstituteMenu_Default;
      case LanguageConceptSwitch.SubstituteMenu_Named:
        return props_SubstituteMenu_Named;
      case LanguageConceptSwitch.SubstituteMenu_SimpleString:
        return props_SubstituteMenu_SimpleString;
      case LanguageConceptSwitch.Synchronizeable:
        return props_Synchronizeable;
      case LanguageConceptSwitch.TableComponentStyleClassItem:
        return props_TableComponentStyleClassItem;
      case LanguageConceptSwitch.TextBackgroundColorSelectedStyleClassItem:
        return props_TextBackgroundColorSelectedStyleClassItem;
      case LanguageConceptSwitch.TextBackgroundColorStyleClassItem:
        return props_TextBackgroundColorStyleClassItem;
      case LanguageConceptSwitch.TransactionPropertyHandler_newValue:
        return props_TransactionPropertyHandler_newValue;
      case LanguageConceptSwitch.TransactionPropertyHandler_oldValue:
        return props_TransactionPropertyHandler_oldValue;
      case LanguageConceptSwitch.TransactionalPropertyHandler:
        return props_TransactionalPropertyHandler;
      case LanguageConceptSwitch.TransformationFeature:
        return props_TransformationFeature;
      case LanguageConceptSwitch.TransformationFeature_ActionType:
        return props_TransformationFeature_ActionType;
      case LanguageConceptSwitch.TransformationFeature_DescriptionText:
        return props_TransformationFeature_DescriptionText;
      case LanguageConceptSwitch.TransformationFeature_Icon:
        return props_TransformationFeature_Icon;
      case LanguageConceptSwitch.TransformationLocation:
        return props_TransformationLocation;
      case LanguageConceptSwitch.TransformationLocation_Completion:
        return props_TransformationLocation_Completion;
      case LanguageConceptSwitch.TransformationLocation_ContextAssistant:
        return props_TransformationLocation_ContextAssistant;
      case LanguageConceptSwitch.TransformationLocation_SideTransform:
        return props_TransformationLocation_SideTransform;
      case LanguageConceptSwitch.TransformationLocation_SideTransform_PlaceInCellHolder:
        return props_TransformationLocation_SideTransform_PlaceInCellHolder;
      case LanguageConceptSwitch.TransformationMenu:
        return props_TransformationMenu;
      case LanguageConceptSwitch.TransformationMenuContribution:
        return props_TransformationMenuContribution;
      case LanguageConceptSwitch.TransformationMenuPart:
        return props_TransformationMenuPart;
      case LanguageConceptSwitch.TransformationMenuPart_Action:
        return props_TransformationMenuPart_Action;
      case LanguageConceptSwitch.TransformationMenuPart_Group:
        return props_TransformationMenuPart_Group;
      case LanguageConceptSwitch.TransformationMenuPart_IncludeMenu:
        return props_TransformationMenuPart_IncludeMenu;
      case LanguageConceptSwitch.TransformationMenuPart_IncludeSubstituteMenu:
        return props_TransformationMenuPart_IncludeSubstituteMenu;
      case LanguageConceptSwitch.TransformationMenuPart_Parameterized:
        return props_TransformationMenuPart_Parameterized;
      case LanguageConceptSwitch.TransformationMenuPart_Placeholder:
        return props_TransformationMenuPart_Placeholder;
      case LanguageConceptSwitch.TransformationMenuPart_SubMenu:
        return props_TransformationMenuPart_SubMenu;
      case LanguageConceptSwitch.TransformationMenuPart_Super:
        return props_TransformationMenuPart_Super;
      case LanguageConceptSwitch.TransformationMenuPart_WrapSubstituteMenu:
        return props_TransformationMenuPart_WrapSubstituteMenu;
      case LanguageConceptSwitch.TransformationMenuReference_Default:
        return props_TransformationMenuReference_Default;
      case LanguageConceptSwitch.TransformationMenuReference_Named:
        return props_TransformationMenuReference_Named;
      case LanguageConceptSwitch.TransformationMenuSection:
        return props_TransformationMenuSection;
      case LanguageConceptSwitch.TransformationMenuVariableDeclaration:
        return props_TransformationMenuVariableDeclaration;
      case LanguageConceptSwitch.TransformationMenuVariableReference:
        return props_TransformationMenuVariableReference;
      case LanguageConceptSwitch.TransformationMenu_Default:
        return props_TransformationMenu_Default;
      case LanguageConceptSwitch.TransformationMenu_Named:
        return props_TransformationMenu_Named;
      case LanguageConceptSwitch.UnapplyStyle:
        return props_UnapplyStyle;
      case LanguageConceptSwitch.UnderlinedStyleClassItem:
        return props_UnderlinedStyleClassItem;
    }
    return null;
  }
}
