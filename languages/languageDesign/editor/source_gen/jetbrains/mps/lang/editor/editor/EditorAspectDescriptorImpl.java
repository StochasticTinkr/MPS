package jetbrains.mps.lang.editor.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.NamedMenuId;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt_a0a = ((SAbstractConcept) concept);
    switch (index_xbvbvu_a0a.index(cncpt_a0a)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AbstractCellSelector_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AbstractPaddingStyleClassItem_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new AbstractStyledTextOperation_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new ApplyStyleClass_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new ApplyStyleClassCondition_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new AttributeStyleClassItem_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new BooleanStyleSheetItem_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new CaretPositionParameter_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new CellActionMapDeclaration_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new CellActionMapItem_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new CellIdReferenceSelector_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new CellKeyMapDeclaration_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new CellKeyMapItem_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new CellKeyMapKeystroke_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new CellLayout_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new CellMenuComponent_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new CellMenuComponentFeature_Link_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new CellMenuComponentFeature_Property_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new CellMenuDescriptor_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new CellMenuPart_Abstract_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new CellMenuPart_ApplySideTransforms_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new CellMenuPart_CellMenuComponent_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new CellMenuPart_Generic_Group_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new CellMenuPart_Generic_Item_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new CellMenuPart_PropertyPostfixHints_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new CellMenuPart_PropertyValues_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new CellMenuPart_ReferentPrimary_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new CellMenuPart_ReplaceChildPrimary_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new CellMenuPart_ReplaceChild_CustomChildConcept_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new CellMenuPart_ReplaceChild_Group_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new CellMenuPart_ReplaceChild_Item_Editor());
      case 31:
        return Collections.<ConceptEditor>singletonList(new CellMenuPart_ReplaceNode_CustomNodeConcept_Editor());
      case 32:
        return Collections.<ConceptEditor>singletonList(new CellMenuPart_ReplaceNode_Group_Editor());
      case 33:
        return Collections.<ConceptEditor>singletonList(new CellModel_Alternation_Editor());
      case 34:
        return Collections.<ConceptEditor>singletonList(new CellModel_AttributedLinkCell_Editor());
      case 35:
        return Collections.<ConceptEditor>singletonList(new CellModel_AttributedNodeCell_Editor());
      case 36:
        return Collections.<ConceptEditor>singletonList(new CellModel_AttributedPropertyCell_Editor());
      case 37:
        return Collections.<ConceptEditor>singletonList(new CellModel_Block_Editor());
      case 38:
        return Collections.<ConceptEditor>singletonList(new CellModel_BlockEnd_Editor());
      case 39:
        return Collections.<ConceptEditor>singletonList(new CellModel_BlockStart_Editor());
      case 40:
        return Collections.<ConceptEditor>singletonList(new CellModel_Collection_Editor());
      case 41:
        return Collections.<ConceptEditor>singletonList(new CellModel_Component_Editor());
      case 42:
        return Collections.<ConceptEditor>singletonList(new CellModel_Constant_Editor());
      case 43:
        return Collections.<ConceptEditor>singletonList(new CellModel_ContextAssistant_Editor());
      case 44:
        return Collections.<ConceptEditor>singletonList(new CellModel_Custom_Editor());
      case 45:
        return Collections.<ConceptEditor>singletonList(new CellModel_Empty_Editor());
      case 46:
        return Collections.<ConceptEditor>singletonList(new CellModel_Error_Editor());
      case 47:
        return Collections.<ConceptEditor>singletonList(new CellModel_Image_Editor());
      case 48:
        return Collections.<ConceptEditor>singletonList(new CellModel_Indent_Editor());
      case 49:
        return Collections.<ConceptEditor>singletonList(new CellModel_JComponent_Editor());
      case 50:
        return Collections.<ConceptEditor>singletonList(new CellModel_ModelAccess_Editor());
      case 51:
        return Collections.<ConceptEditor>singletonList(new CellModel_NextEditor_Editor());
      case 52:
        return Collections.<ConceptEditor>singletonList(new CellModel_Property_Editor());
      case 53:
        return Collections.<ConceptEditor>singletonList(new CellModel_ReadOnlyModelAccessor_Editor());
      case 54:
        return Collections.<ConceptEditor>singletonList(new CellModel_RefCell_Editor());
      case 55:
        return Collections.<ConceptEditor>singletonList(new CellModel_RefNode_Editor());
      case 56:
        return Collections.<ConceptEditor>singletonList(new CellModel_RefNodeList_Editor());
      case 57:
        return Collections.<ConceptEditor>singletonList(new CellModel_ReferencePresentation_Editor());
      case 58:
        return Collections.<ConceptEditor>singletonList(new CellModel_TransactionalProperty_Editor());
      case 59:
        return Collections.<ConceptEditor>singletonList(new CellModel_URL_Editor());
      case 60:
        return Collections.<ConceptEditor>singletonList(new ColorStyleClassItem_Editor());
      case 61:
        return Collections.<ConceptEditor>singletonList(new ConceptEditorContextHints_Editor());
      case 62:
        return Collections.<ConceptEditor>singletonList(new ConceptEditorDeclaration_Editor());
      case 63:
        return Collections.<ConceptEditor>singletonList(new ConceptEditorHintDeclaration_Editor());
      case 64:
        return Collections.<ConceptEditor>singletonList(new ConceptEditorHintDeclarationReference_Editor());
      case 65:
        return Collections.<ConceptEditor>singletonList(new ConceptEditorHintDeclarationReferenceExpression_Editor());
      case 66:
        return Collections.<ConceptEditor>singletonList(new ContextVariable_Editor());
      case 67:
        return Collections.<ConceptEditor>singletonList(new DefaultBaseLine_Editor());
      case 68:
        return Collections.<ConceptEditor>singletonList(new DefaultCaretPositionStyleClassItem_Editor());
      case 69:
        return Collections.<ConceptEditor>singletonList(new DominatesRecord_Editor());
      case 70:
        return Collections.<ConceptEditor>singletonList(new EditorCellId_Editor());
      case 71:
        return Collections.<ConceptEditor>singletonList(new EditorCellModel_Editor());
      case 72:
        return Collections.<ConceptEditor>singletonList(new EditorComponentDeclaration_Editor());
      case 73:
        return Collections.<ConceptEditor>singletonList(new EditorComponentDeclarationReference_Editor());
      case 74:
        return Collections.<ConceptEditor>singletonList(new ExplicitHintsSpecification_Editor());
      case 75:
        return Collections.<ConceptEditor>singletonList(new FloatStyleClassItem_Editor());
      case 76:
        return Collections.<ConceptEditor>singletonList(new FontSizeStyleClassItem_Editor());
      case 77:
        return Collections.<ConceptEditor>singletonList(new FontStyleStyleClassItem_Editor());
      case 78:
        return Collections.<ConceptEditor>singletonList(new GeneratedSubstituteMenuAttribute_Editor());
      case 79:
        return Collections.<ConceptEditor>singletonList(new HorizontalAlign_Editor());
      case 80:
        return Collections.<ConceptEditor>singletonList(new IdSelector_Editor());
      case 81:
        return Collections.<ConceptEditor>singletonList(new InlineEditorComponent_Editor());
      case 82:
        return Collections.<ConceptEditor>singletonList(new InlineStyleDeclaration_Editor());
      case 83:
        return Collections.<ConceptEditor>singletonList(new LayoutConstraintStyleClassItem_Editor());
      case 84:
        return Collections.<ConceptEditor>singletonList(new MatchingLabelStyleClassItem_Editor());
      case 85:
        return Collections.<ConceptEditor>singletonList(new MaxWidthStyleClassItem_Editor());
      case 86:
        return Collections.<ConceptEditor>singletonList(new MigrateManuallyAnnotation_Editor());
      case 87:
        return Collections.<ConceptEditor>singletonList(new MigratedSideTransformMenuAttribute_Editor());
      case 88:
        return Collections.<ConceptEditor>singletonList(new MigratedToAnnotation_Editor());
      case 89:
        return Collections.<ConceptEditor>singletonList(new ModelAccessor_Editor());
      case 90:
        return Collections.<ConceptEditor>singletonList(new NavigatableNodeStyleClassItem_Editor());
      case 91:
        return Collections.<ConceptEditor>singletonList(new NavigatableReferenceStyleClassItem_Editor());
      case 92:
        return Collections.<ConceptEditor>singletonList(new OptionalConceptReference_Editor());
      case 93:
        return Collections.<ConceptEditor>singletonList(new OrCellSelector_Editor());
      case 94:
        return Collections.<ConceptEditor>singletonList(new ParametersInformationQuery_Editor());
      case 95:
        return Collections.<ConceptEditor>singletonList(new ParametersInformationStyleClassItem_Editor());
      case 96:
        return Collections.<ConceptEditor>singletonList(new PositionChildrenStyleClassItem_Editor());
      case 97:
        return Collections.<ConceptEditor>singletonList(new PositionStyleClassItem_Editor());
      case 98:
        return Collections.<ConceptEditor>singletonList(new PredefinedSelector_Editor());
      case 99:
        return Collections.<ConceptEditor>singletonList(new PropertyDeclarationCellSelector_Editor());
      case 100:
        return Collections.<ConceptEditor>singletonList(new PropertyExpressionCellSelector_Editor());
      case 101:
        return Collections.<ConceptEditor>singletonList(new RGBColor_Editor());
      case 102:
        return Collections.<ConceptEditor>singletonList(new ReadOnlyModelAccessor_Editor());
      case 103:
        return Collections.<ConceptEditor>singletonList(new RightTransformAnchorTagWrapper_Editor());
      case 104:
        return Collections.<ConceptEditor>singletonList(new ScriptKindClassItem_Editor());
      case 105:
        return Collections.<ConceptEditor>singletonList(new SelectInEditorOperation_Editor());
      case 106:
        return Collections.<ConceptEditor>singletonList(new SelectPositionParameter_Editor());
      case 107:
        return Collections.<ConceptEditor>singletonList(new ShowBoundariesInStyleClassItem_Editor());
      case 108:
        return Collections.<ConceptEditor>singletonList(new SideTransformAnchorTagStyleClassItem_Editor());
      case 109:
        return Collections.<ConceptEditor>singletonList(new StubEditorCellModel_Editor());
      case 110:
        return Collections.<ConceptEditor>singletonList(new StyleAttributeDeclaration_Editor());
      case 111:
        return Collections.<ConceptEditor>singletonList(new StyleAttributeReferenceExpression_Editor());
      case 112:
        return Collections.<ConceptEditor>singletonList(new StyleClass_Editor());
      case 113:
        return Collections.<ConceptEditor>singletonList(new StyleClassReference_Editor());
      case 114:
        return Collections.<ConceptEditor>singletonList(new StyleClassReferenceList_Editor());
      case 115:
        return Collections.<ConceptEditor>singletonList(new StyleKey_Editor());
      case 116:
        return Collections.<ConceptEditor>singletonList(new StyleKeyPack_Editor());
      case 117:
        return Collections.<ConceptEditor>singletonList(new StyleReference_Editor());
      case 118:
        return Collections.<ConceptEditor>singletonList(new StyleSheet_Editor());
      case 119:
        return Collections.<ConceptEditor>singletonList(new SubstituteFeature_ActionType_Editor());
      case 120:
        return Collections.<ConceptEditor>singletonList(new SubstituteFeature_CanSubstitute_Editor());
      case 121:
        return Collections.<ConceptEditor>singletonList(new SubstituteFeature_DescriptionText_Editor());
      case 122:
        return Collections.<ConceptEditor>singletonList(new SubstituteFeature_Icon_Editor());
      case 123:
        return Collections.<ConceptEditor>singletonList(new SubstituteFeature_MatchingText_Editor());
      case 124:
        return Collections.<ConceptEditor>singletonList(new SubstituteFeature_Selection_Editor());
      case 125:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenuItem_AbstractOperation_Editor());
      case 126:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenuPart_Action_Editor());
      case 127:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenuPart_AddConcept_Editor());
      case 128:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenuPart_Concepts_Editor());
      case 129:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenuPart_Group_Editor());
      case 130:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenuPart_IncludeMenu_Editor());
      case 131:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenuPart_Parameterized_Editor());
      case 132:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenuPart_Placeholder_Editor());
      case 133:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenuPart_ReferenceScope_Editor());
      case 134:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenuPart_Subconcepts_Editor());
      case 135:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenuPart_Wrapper_Editor());
      case 136:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenuReference_Default_Editor());
      case 137:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenuReference_DefaultWithFunction_Editor());
      case 138:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenuReference_Named_Editor());
      case 139:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenuVariableDeclaration_Editor());
      case 140:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenu_Contribution_Editor());
      case 141:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenu_Default_Editor());
      case 142:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenu_Named_Editor());
      case 143:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenu_RefPresentationTemplate_Editor());
      case 144:
        return Collections.<ConceptEditor>singletonList(new SubstituteMenu_SimpleString_Editor());
      case 145:
        return Collections.<ConceptEditor>singletonList(new TableComponentStyleClassItem_Editor());
      case 146:
        return Collections.<ConceptEditor>singletonList(new TransformationFeature_ActionType_Editor());
      case 147:
        return Collections.<ConceptEditor>singletonList(new TransformationFeature_DescriptionText_Editor());
      case 148:
        return Collections.<ConceptEditor>singletonList(new TransformationFeature_Icon_Editor());
      case 149:
        return Collections.<ConceptEditor>singletonList(new TransformationLocation_Editor());
      case 150:
        return Collections.<ConceptEditor>singletonList(new TransformationLocation_SideTransform_Editor());
      case 151:
        return Collections.<ConceptEditor>singletonList(new TransformationLocation_SideTransform_PlaceInCellHolder_Editor());
      case 152:
        return Collections.<ConceptEditor>singletonList(new TransformationMenuContribution_Editor());
      case 153:
        return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_Editor());
      case 154:
        return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_Action_Editor());
      case 155:
        return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_Group_Editor());
      case 156:
        return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_IncludeMenu_Editor());
      case 157:
        return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_IncludeSubstituteMenu_Editor());
      case 158:
        return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_Parameterized_Editor());
      case 159:
        return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_Placeholder_Editor());
      case 160:
        return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_SubMenu_Editor());
      case 161:
        return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_Super_Editor());
      case 162:
        return Collections.<ConceptEditor>singletonList(new TransformationMenuPart_WrapSubstituteMenu_Editor());
      case 163:
        return Collections.<ConceptEditor>singletonList(new TransformationMenuReference_Default_Editor());
      case 164:
        return Collections.<ConceptEditor>singletonList(new TransformationMenuReference_Named_Editor());
      case 165:
        return Collections.<ConceptEditor>singletonList(new TransformationMenuSection_Editor());
      case 166:
        return Collections.<ConceptEditor>singletonList(new TransformationMenuVariableDeclaration_Editor());
      case 167:
        return Collections.<ConceptEditor>singletonList(new TransformationMenu_Default_Editor());
      case 168:
        return Collections.<ConceptEditor>singletonList(new TransformationMenu_Named_Editor());
      case 169:
        return Collections.<ConceptEditor>singletonList(new UnapplyStyle_Editor());
      case 170:
        return Collections.<ConceptEditor>singletonList(new UnderlinedStyleClassItem_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt_a0c = ((SAbstractConcept) concept);
    switch (index_xbvbvu_a0c.index(cncpt_a0c)) {
      case 0:
        if (true) {
          if ("jetbrains.mps.lang.editor.editor.CellModelCollection_FoldedCellComponent".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new CellModelCollection_FoldedCellComponent());
          }
        }
        break;
      case 1:
        if (true) {
          if ("jetbrains.mps.lang.editor.editor.CellModelListWithRole_FoldedCellComponent".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new CellModelListWithRole_FoldedCellComponent());
          }
        }
        break;
      case 2:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0c1a2, editorComponentId)) {
            case 0:
              return Collections.<ConceptEditorComponent>singletonList(new Common_Component());
            case 1:
              return Collections.<ConceptEditorComponent>singletonList(new Style_Component());
            case 2:
              return Collections.<ConceptEditorComponent>singletonList(new _CellKeyMapLnk_Component());
            case 3:
              return Collections.<ConceptEditorComponent>singletonList(new _CellModel_Common());
            case 4:
              return Collections.<ConceptEditorComponent>singletonList(new _CloseTag());
            case 5:
              return Collections.<ConceptEditorComponent>singletonList(new _FocusPolicy_Applicable());
            case 6:
              return Collections.<ConceptEditorComponent>singletonList(new _OpenTag());
            default:
              return Collections.<ConceptEditorComponent>emptyList();
          }
        }
        break;
      case 3:
        if (true) {
          if ("jetbrains.mps.lang.editor.editor.CellStyle_Component".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new CellStyle_Component());
          }
        }
        break;
      case 4:
        if (true) {
          if ("jetbrains.mps.lang.editor.editor.IOutputConcept_Component".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new IOutputConcept_Component());
          }
        }
        break;
      case 5:
        if (true) {
          if ("jetbrains.mps.lang.editor.editor.ISubstituteMenu_PartsComponent".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new ISubstituteMenu_PartsComponent());
          }
        }
        break;
      case 6:
        if (true) {
          if ("jetbrains.mps.lang.editor.editor.TransformationMenu_Sections_Component".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new TransformationMenu_Sections_Component());
          }
        }
        break;
      case 7:
        if (true) {
          if ("jetbrains.mps.lang.editor.editor.SubstituteFeatureAlias".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new SubstituteFeatureAlias());
          }
        }
        break;
      case 8:
        if (true) {
          if ("jetbrains.mps.lang.editor.editor.SubstituteMenuPartAlias".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new SubstituteMenuPartAlias());
          }
        }
        break;
      case 9:
        if (true) {
          if ("jetbrains.mps.lang.editor.editor.TransformationFeatureAlias".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new TransformationFeatureAlias());
          }
        }
        break;
      case 10:
        if (true) {
          if ("jetbrains.mps.lang.editor.editor.TransformationMenuPartAlias".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new TransformationMenuPartAlias());
          }
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }

  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt_a0e = concept;
    switch (index_xbvbvu_a0e.index(cncpt_a0e)) {
      case 0:
        return Collections.<TransformationMenu>singletonList(new AbstractCellSelector_TransformationMenu());
      case 1:
        return Collections.<TransformationMenu>singletonList(new EditorCellModel_TransformationMenu());
      case 2:
        return Collections.<TransformationMenu>singletonList(new SelectInEditorOperationSideTransforms_Contribution());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredNamedTransformationMenus(NamedMenuId menuId) {
    SAbstractConcept cncpt_a0f = (SAbstractConcept) menuId.getConcept();
    switch (index_xbvbvu_a0f.index(cncpt_a0f)) {
      case 0:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0a1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new addCondition()});
            default:
          }
        }
        break;
      case 1:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0b1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new PropertyDeclarationCellSelector_Empty_SideTransformMenu()});
            default:
          }
        }
        break;
      case 2:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0c1a5, menuId.getFqName())) {
            case 0:
              return Arrays.asList(new TransformationMenu[]{new addExtendedClass_StyleClass()});
            default:
          }
        }
        break;
      default:
    }

    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt_a0g = concept;
    switch (index_xbvbvu_a0g.index(cncpt_a0g)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new AbstractCellSelector_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new AbstractStyledTextOperation_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new CellActionMapItem_SubstituteMenu());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new CellMenuPart_Abstract_SubstituteMenu());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new CellMenuPart_AbstractGroup_parameterObject_SubstituteMenu());
      case 5:
        return Collections.<SubstituteMenu>singletonList(new CellMenuPart_Abstract_editedNode_SubstituteMenu());
      case 6:
        return Collections.<SubstituteMenu>singletonList(new CellMenuPart_ApplySideTransforms_SubstituteMenu());
      case 7:
        return Collections.<SubstituteMenu>singletonList(new CellMenuPart_PropertyPostfixHints_SubstituteMenu());
      case 8:
        return Collections.<SubstituteMenu>singletonList(new CellMenuPart_PropertyValues_SubstituteMenu());
      case 9:
        return Collections.<SubstituteMenu>singletonList(new CellMenuPart_ReferentPrimary_SubstituteMenu());
      case 10:
        return Collections.<SubstituteMenu>singletonList(new CellMenuPart_ReplaceChildPrimary_SubstituteMenu());
      case 11:
        return Collections.<SubstituteMenu>singletonList(new CellMenuPart_ReplaceChild_CustomChildConcept_SubstituteMenu());
      case 12:
        return Collections.<SubstituteMenu>singletonList(new CellMenuPart_ReplaceChild_Group_SubstituteMenu());
      case 13:
        return Collections.<SubstituteMenu>singletonList(new CellMenuPart_ReplaceChild_Item_SubstituteMenu());
      case 14:
        return Collections.<SubstituteMenu>singletonList(new CellMenuPart_ReplaceChild_currentChild_SubstituteMenu());
      case 15:
        return Collections.<SubstituteMenu>singletonList(new CellMenuPart_ReplaceChild_defaultChildConcept_SubstituteMenu());
      case 16:
        return Collections.<SubstituteMenu>singletonList(new CellMenuPart_ReplaceChild_defaultConceptOfChild_SubstituteMenu());
      case 17:
        return Collections.<SubstituteMenu>singletonList(new CellModel_NonEmptyProperty_SubstituteMenu());
      case 18:
        return Collections.<SubstituteMenu>singletonList(new CellModel_TransactionalProperty_SubstituteMenu());
      case 19:
        return Collections.<SubstituteMenu>singletonList(new ConceptFunctionParameter_StyledText_SubstituteMenu());
      case 20:
        return Collections.<SubstituteMenu>singletonList(new ConceptFunctionParameter_childNode_SubstituteMenu());
      case 21:
        return Collections.<SubstituteMenu>singletonList(new ConceptFunctionParameter_editorContext_SubstituteMenu());
      case 22:
        return Collections.<SubstituteMenu>singletonList(new ConceptFunctionParameter_model_SubstituteMenu());
      case 23:
        return Collections.<SubstituteMenu>singletonList(new ConceptFunctionParameter_nextNode_SubstituteMenu());
      case 24:
        return Collections.<SubstituteMenu>singletonList(new ConceptFunctionParameter_node_SubstituteMenu());
      case 25:
        return Collections.<SubstituteMenu>singletonList(new ConceptFunctionParameter_oldText_SubstituteMenu());
      case 26:
        return Collections.<SubstituteMenu>singletonList(new ConceptFunctionParameter_parameterObject_SubstituteMenu());
      case 27:
        return Collections.<SubstituteMenu>singletonList(new ConceptFunctionParameter_prevNode_SubstituteMenu());
      case 28:
        return Collections.<SubstituteMenu>singletonList(new ConceptFunctionParameter_selectedNode_SubstituteMenu());
      case 29:
        return Collections.<SubstituteMenu>singletonList(new ConceptFunctionParameter_sourceNode_SubstituteMenu());
      case 30:
        return Collections.<SubstituteMenu>singletonList(new ConceptFunctionParameter_targetNode_SubstituteMenu());
      case 31:
        return Collections.<SubstituteMenu>singletonList(new ConceptFunctionParameter_text_SubstituteMenu());
      case 32:
        return Collections.<SubstituteMenu>singletonList(new ContextHintsSpecification_SubstituteMenu());
      case 33:
        return Collections.<SubstituteMenu>singletonList(new EditorCellId_SubstituteMenu());
      case 34:
        return Collections.<SubstituteMenu>singletonList(new EditorCellModel_SubstituteMenu());
      case 35:
        return Collections.<SubstituteMenu>singletonList(new SubstituteAbstractStyledTextOperation_Contribution());
      case 36:
        return Collections.<SubstituteMenu>singletonList(new QueryFunction_RefPresentation_SubstituteMenu());
      case 37:
        return Collections.<SubstituteMenu>singletonList(new SideTransformAnchorTagStyleClassItem_SubstituteMenu());
      case 38:
        return Collections.<SubstituteMenu>singletonList(new StubEditorCellModel_SubstituteMenu());
      case 39:
        return Collections.<SubstituteMenu>singletonList(new StyleClassReferenceList_SubstituteMenu());
      case 40:
        return Collections.<SubstituteMenu>singletonList(new SubstituteMenuPart_Placeholder_SubstituteMenu());
      case 41:
        return Collections.<SubstituteMenu>singletonList(new SubstituteMenuReference_DefaultWithFunction_SubstituteMenu());
      case 42:
        return Collections.<SubstituteMenu>singletonList(new SubstituteMenuVariableDeclaration_SubstituteMenu());
      case 43:
        return Collections.<SubstituteMenu>singletonList(new TransactionPropertyHandler_newValue_SubstituteMenu());
      case 44:
        return Collections.<SubstituteMenu>singletonList(new TransformationFeature_SubstituteMenu());
      case 45:
        return Collections.<SubstituteMenu>singletonList(new TransformationLocation_SubstituteMenu());
      case 46:
        return Collections.<SubstituteMenu>singletonList(new TransformationMenuPart_Placeholder_SubstituteMenu());
      case 47:
        return Collections.<SubstituteMenu>singletonList(new TransformationMenuVariableDeclaration_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex index_xbvbvu_a0a = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1b0a9b8c0eb8e726L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11d878e7095L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3ee423fc2ad10eceL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1b1161f6e648b4b2L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7e9b10ab20495600L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3744c0f9eae0a402L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143bd1283bL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x117b152bc1fL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10951978cfeL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x109519879e9L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3c0028bb8556f621L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfbc216b31bL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x108b5877365L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x108b5885461L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10192dc11caL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f7d702058L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f7d86ed9bL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f7d811428L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f34f6aaacL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f34f8c0deL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x72449b609d0e77bbL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f7e91dcf6L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f58784317L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f58b5e5f6L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x112e2300bcaL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f357f9ab7L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1115d1a2839L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f5021674eL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f4f87862dL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f53a0aafeL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3a50ec74L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3fa975a0L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfd766383e4L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x108a0861503L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10bb871ad98L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1081e457de7L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1170b90f356L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x116fdba37cdL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x116fdb876c6L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eaff2517L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfb35c96896L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb01232eL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x2ea28b54668aeb4bL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfb103073dcL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x73604585b6d5c973L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfa61615ec3L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1095e12de6fL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x116fdad17a0L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x100d0e71cb2L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfa3d28fe7dL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7456aec153c7f5a2L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb02612eL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11d6d56c00cL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfd52a2c922L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb05cdc7L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eb0ad38eL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x8ace515f0191e6eL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11b35f4f515L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x334adf8cb15f3fdeL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143b2bb8c4L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x527faacef4e35767L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9845363abL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x527faacef50d095eL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x5eadaecad41188dcL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x42e5e943db1f2dd0L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x794cf8ea9e119f99L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x69c06896a0e42a51L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11ac437b468L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x22926e62b7d495a0L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3c0028bb846a5817L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfb35c2bb47L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x619d95571435dfe8L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3ae0865e9a712712L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11ae41b27e5L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143be33e36L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143b2c9756L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1d5b104bd5525fa7L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11fc74ebe6cL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1e02662c4b880750L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xfd5cee772bL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11f1d6594edL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11abafc10eaL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11fd6f8d518L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x6a2febf37d13730eL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7ce0198267c4eb2L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7ce019825aa4e82L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7ce01982652a98aL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x111f9dbb2ccL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x696ed29ebd7c1429L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11de23fdb1fL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xbb2f315607dc1f1L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x235af965a76b03fL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x6a67a319ce06acceL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x6a67a319ce060712L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11b40a56a20L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11b31a45ad7L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x313a48d996236c93L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3e970bbc3009e3a3L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3e970bbc30443a0aL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11d52e2b1a0L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11d6d3fe71eL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3212fe82cb95ffe7L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x72908ac6c78618c8L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x329d4406465c63a0L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x117b132f8cdL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x49177f9006c530a0L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11abb1e8d85L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xa2364a3edcb8ed2L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3744c0f9ea5367ebL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x53ac4acb2cb6e9d7L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x2ef3b3796a126f24L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x2ef3b3796a130c0dL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7e9b10ab1cb5b6d8L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x399cb6c68aa9aeaaL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x399cb6c68aa9af02L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7e9b10ab1edbd2fbL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143b151743L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x75a895eb6bcee96cL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7ce1116e3a2e0187L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7ce1116e3a2e0173L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x75a895eb6c03385dL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7ce1116e3a2dee5aL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x75a895eb6bcee97fL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3244dde8e150cff4L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x65e54712ab56010bL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x5c03050cab46db2L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x49f6d25f12102816L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x5c03050cab4546bL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xa22200b56b57990L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x4467282afd5201dL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x25c7da75de4cff05L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x74f6a88f89419d55L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x88a6ffdb3b4f8c6L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x5cc5669cafd1be9bL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x5480a271c0d1df1eL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x71f19593ac95dee9L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x5480a271c0d1df1fL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x780e6728403987bL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x2de9c932f4e5cb53L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x2de9c932f4e5ab84L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x33e0267905fba6fdL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3bc83bac475c4b36L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x116910ff20bL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x5ea66701cd0a0c86L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x198452f4d5eea7f2L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x198452f4d5ee9587L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x198452f4d5ee6651L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa6L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x28336854e4c19a06L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x30335f3d1845bdccL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x4e0f93d8a0c10ff0L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x16be955f384efffeL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x16be955f384f93e6L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x671b36136d224047L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xae2d2fe1c9d6be2L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x6a77f9c87420a6caL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3abfebf456f8ad25L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x6ed0e5fc004ba432L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x384b3925671e99efL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7541587144d24773L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1a533160d670600cL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x5d3b34577b3cff0cL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x5d3b34577b3cff09L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x6ec02d9918b4efbcL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11266742db0L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x16be955f384efce1L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x4e0f93d8a0ac4ee8L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1b1161f6e68dfae3L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1143bd837d7L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0c = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eaff2517L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1098c8cf48aL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x132a500f473d6174L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x6ee6ee2b8485887fL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1bc2c2df999a7727L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x4e0f93d8a0c11832L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x75a895eb6bcee969L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x5c03050cab4546aL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa5L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x16be955f384efffeL)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0e = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1b0a9b8c0eb8e726L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0f = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7e9b10ab20495600L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3e970bbc3009e3a3L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x2ef3b3796a126f24L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0g = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1b0a9b8c0eb8e726L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3ee423fc2ad10eceL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x109519879e9L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f34f8c0deL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10eecc5b3feL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10eecc9de0fL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x72449b609d0e77bbL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x112e2300bcaL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f357f9ab7L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f3f33baebL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1115d1a2839L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f5021674eL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f4f87862dL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10f53a0aafeL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10eaa3a3c68L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x306b0e1228f7e93aL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10eaa4bf8b2L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x113bef3a464L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11b35f4f515L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3ed01d37608fe0afL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x1134297c615L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10e76200a6fL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x69333c273254322aL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x6ee8c7d6704ae262L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x10a195cc7c5L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x111faaffcc5L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x950e7629b27d763L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x6ee8c7d6704ae9f2L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3a54c53a29dbb0faL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x6001c76613c99a36L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x6001c76613c99a37L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x111f9d863e4L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x40953da3e594b7a8L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x3c0028bb846a5817L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xf9eafb9a39L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x6001c76613c8c373L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11abb1e8d85L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xa2364a3edcb8ed2L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7e9b10ab1cb5b6d8L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x25c7da75de4cff05L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x71f19593ac95dee9L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x780e6728403987bL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11b35f75b6dL), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa5L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x7c45559defb64aa6L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x6ed0e5fc004ba432L), MetaIdFactory.conceptId(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x11266742db0L)).seal();
  private static String[] stringSwitchCases_xbvbvu_a0a0a0c1a2 = new String[]{"jetbrains.mps.lang.editor.editor.Common_Component", "jetbrains.mps.lang.editor.editor.Style_Component", "jetbrains.mps.lang.editor.editor._CellKeyMapLnk_Component", "jetbrains.mps.lang.editor.editor._CellModel_Common", "jetbrains.mps.lang.editor.editor._CloseTag", "jetbrains.mps.lang.editor.editor._FocusPolicy_Applicable", "jetbrains.mps.lang.editor.editor._OpenTag"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0a1a5 = new String[]{"jetbrains.mps.lang.editor.editor.addCondition"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0b1a5 = new String[]{"jetbrains.mps.lang.editor.editor.PropertyDeclarationCellSelector_Empty_SideTransformMenu"};
  private static String[] stringSwitchCases_xbvbvu_a0a0a0c1a5 = new String[]{"jetbrains.mps.lang.editor.editor.addExtendedClass_StyleClass"};
}
