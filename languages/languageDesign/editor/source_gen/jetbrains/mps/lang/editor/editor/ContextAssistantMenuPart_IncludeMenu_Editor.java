package jetbrains.mps.lang.editor.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;

public class ContextAssistantMenuPart_IncludeMenu_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_8lcor5_a(editorContext, node);
  }
  private EditorCell createCollection_8lcor5_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_8lcor5_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createComponent_8lcor5_a0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_8lcor5_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_8lcor5_c0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_8lcor5_d0(editorContext, node));
    return editorCell;
  }
  private EditorCell createComponent_8lcor5_a0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = editorContext.getCellFactory().createEditorComponentCell(node, "jetbrains.mps.lang.core.editor.alias");
    return editorCell;
  }
  private EditorCell createRefNode_8lcor5_b0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new ContextAssistantMenuPart_IncludeMenu_Editor.menuReferenceSingleRoleHandler_8lcor5_b0(node, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xae2d2fe1c9d6be2L, 0x5d3b34577b3f7ee5L, "menuReference"), editorContext);
    return provider.createCell();
  }
  private class menuReferenceSingleRoleHandler_8lcor5_b0 extends SingleRoleCellProvider {
    public menuReferenceSingleRoleHandler_8lcor5_b0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("menuReference");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_menuReference");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "default menu";
    }
  }
  private EditorCell createConstant_8lcor5_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "for");
    editorCell.setCellId("Constant_8lcor5_c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_8lcor5_d0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new ContextAssistantMenuPart_IncludeMenu_Editor.nodeFunctionSingleRoleHandler_8lcor5_d0(node, MetaAdapterFactory.getContainmentLink(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0xae2d2fe1c9d6be2L, 0xae2d2fe1c9d6bfeL, "nodeFunction"), editorContext);
    return provider.createCell();
  }
  private class nodeFunctionSingleRoleHandler_8lcor5_d0 extends SingleRoleCellProvider {
    public nodeFunctionSingleRoleHandler_8lcor5_d0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("nodeFunction");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_nodeFunction");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "current node";
    }
  }
}
