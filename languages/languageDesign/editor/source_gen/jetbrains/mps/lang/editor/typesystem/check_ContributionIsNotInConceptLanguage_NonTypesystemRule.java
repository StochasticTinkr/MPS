package jetbrains.mps.lang.editor.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.editor.behavior.IMenu__BehaviorDescriptor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;

public class check_ContributionIsNotInConceptLanguage_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_ContributionIsNotInConceptLanguage_NonTypesystemRule() {
  }
  public void applyRule(final SNode contribution, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    SNode applicableConcept = IMenu__BehaviorDescriptor.getApplicableConcept_id1quYWAD18xk.invoke(contribution);
    if ((applicableConcept == null)) {
      return;
    }
    SNode conceptModule = check_vbn2nq_a0c0b(SNodeOperations.getModel(applicableConcept));
    SNode contributionModule = check_vbn2nq_a0d0b(SNodeOperations.getModel(contribution));
    if ((conceptModule != null) && conceptModule == contributionModule) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(contribution, "Contribution to a menu must be defined in a different language from the menu being contributed to", "r:00000000-0000-4000-0000-011c8959029a(jetbrains.mps.lang.editor.typesystem)", "8721449194275282278", null, errorTarget);
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getInterfaceConcept(0x18bc659203a64e29L, 0xa83a7ff23bde13baL, 0x169efbc9a90a5d62L, "jetbrains.mps.lang.editor.structure.IMenu_Contribution");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
  private static SNode check_vbn2nq_a0c0b(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return SModelOperations.getModuleStub(checkedDotOperand);
    }
    return null;
  }
  private static SNode check_vbn2nq_a0d0b(SModel checkedDotOperand) {
    if (null != checkedDotOperand) {
      return SModelOperations.getModuleStub(checkedDotOperand);
    }
    return null;
  }
}
