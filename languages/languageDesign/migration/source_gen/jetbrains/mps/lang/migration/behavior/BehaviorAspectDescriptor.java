package jetbrains.mps.lang.migration.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myRefactoringLog__BehaviorDescriptor = new RefactoringLog__BehaviorDescriptor();
  private final BHDescriptor myReflectionNodeReference__BehaviorDescriptor = new ReflectionNodeReference__BehaviorDescriptor();
  private final BHDescriptor myAbstractNodeReference__BehaviorDescriptor = new AbstractNodeReference__BehaviorDescriptor();
  private final BHDescriptor myMoveNodeSpecialization__BehaviorDescriptor = new MoveNodeSpecialization__BehaviorDescriptor();
  private final BHDescriptor myMoveConcept__BehaviorDescriptor = new MoveConcept__BehaviorDescriptor();
  private final BHDescriptor myMoveReferenceLink__BehaviorDescriptor = new MoveReferenceLink__BehaviorDescriptor();
  private final BHDescriptor myMoveConceptMember__BehaviorDescriptor = new MoveConceptMember__BehaviorDescriptor();
  private final BHDescriptor myMoveProperty__BehaviorDescriptor = new MoveProperty__BehaviorDescriptor();
  private final BHDescriptor myMoveContainmentLink__BehaviorDescriptor = new MoveContainmentLink__BehaviorDescriptor();
  private final BHDescriptor myExecuteAfterDeclaration__BehaviorDescriptor = new ExecuteAfterDeclaration__BehaviorDescriptor();
  private final BHDescriptor myRequiredDataDeclaration__BehaviorDescriptor = new RequiredDataDeclaration__BehaviorDescriptor();
  private final BHDescriptor myDataDependency__BehaviorDescriptor = new DataDependency__BehaviorDescriptor();
  private final BHDescriptor myIMigrationUnit__BehaviorDescriptor = new IMigrationUnit__BehaviorDescriptor();
  private final BHDescriptor myTransformStatement__BehaviorDescriptor = new TransformStatement__BehaviorDescriptor();
  private final BHDescriptor myQuotationConsequence__BehaviorDescriptor = new QuotationConsequence__BehaviorDescriptor();
  private final BHDescriptor myProducedDataDeclaration__BehaviorDescriptor = new ProducedDataDeclaration__BehaviorDescriptor();
  private final BHDescriptor myPutDataExpression__BehaviorDescriptor = new PutDataExpression__BehaviorDescriptor();
  private final BHDescriptor myProducedAnnotationDataDeclaration__BehaviorDescriptor = new ProducedAnnotationDataDeclaration__BehaviorDescriptor();
  private final BHDescriptor myRequiredAnnotationDataDeclaration__BehaviorDescriptor = new RequiredAnnotationDataDeclaration__BehaviorDescriptor();
  private final BHDescriptor myAnnotationDataDependency__BehaviorDescriptor = new AnnotationDataDependency__BehaviorDescriptor();
  private final BHDescriptor myGetDataExpression__BehaviorDescriptor = new GetDataExpression__BehaviorDescriptor();
  private final BHDescriptor myDataDependencyReference__BehaviorDescriptor = new DataDependencyReference__BehaviorDescriptor();
  private final BHDescriptor myDirectNodeReference__BehaviorDescriptor = new DirectNodeReference__BehaviorDescriptor();
  private final BHDescriptor myPureMigrationScript__BehaviorDescriptor = new PureMigrationScript__BehaviorDescriptor();
  private final BHDescriptor myMigrationScript__BehaviorDescriptor = new MigrationScript__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myAbstractNodeReference__BehaviorDescriptor;
      case 1:
        return myAnnotationDataDependency__BehaviorDescriptor;
      case 2:
        return myDataDependency__BehaviorDescriptor;
      case 3:
        return myDataDependencyReference__BehaviorDescriptor;
      case 4:
        return myDirectNodeReference__BehaviorDescriptor;
      case 5:
        return myExecuteAfterDeclaration__BehaviorDescriptor;
      case 6:
        return myGetDataExpression__BehaviorDescriptor;
      case 7:
        return myIMigrationUnit__BehaviorDescriptor;
      case 8:
        return myMigrationScript__BehaviorDescriptor;
      case 9:
        return myMoveConcept__BehaviorDescriptor;
      case 10:
        return myMoveConceptMember__BehaviorDescriptor;
      case 11:
        return myMoveContainmentLink__BehaviorDescriptor;
      case 12:
        return myMoveNodeSpecialization__BehaviorDescriptor;
      case 13:
        return myMoveProperty__BehaviorDescriptor;
      case 14:
        return myMoveReferenceLink__BehaviorDescriptor;
      case 15:
        return myProducedAnnotationDataDeclaration__BehaviorDescriptor;
      case 16:
        return myProducedDataDeclaration__BehaviorDescriptor;
      case 17:
        return myPureMigrationScript__BehaviorDescriptor;
      case 18:
        return myPutDataExpression__BehaviorDescriptor;
      case 19:
        return myQuotationConsequence__BehaviorDescriptor;
      case 20:
        return myRefactoringLog__BehaviorDescriptor;
      case 21:
        return myReflectionNodeReference__BehaviorDescriptor;
      case 22:
        return myRequiredAnnotationDataDeclaration__BehaviorDescriptor;
      case 23:
        return myRequiredDataDeclaration__BehaviorDescriptor;
      case 24:
        return myTransformStatement__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1648ccL), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x5e7aa366c2b3ece9L), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x44b28148e401c891L), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x63476c2ad9bcd736L), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x67236d4a58303771L), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x398343344f07b404L), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x5e7aa366c2ba2c81L), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x47bb811da2acc4d6L), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1741b6L), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1741b8L), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1741baL), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c165c5dL), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1741b9L), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1741b7L), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x5e7aa366c2a0198dL), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x50c63f9f4a0dacfbL), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x67236d4a5836cabbL), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x5e7aa366c28dce2dL), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x4e382b39b6532d41L), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x1bf9eb43276b6d8fL), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x27bf3263be23f0dfL), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x5e7aa366c2ad9bc0L), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x3d90e8d384845a8fL), MetaIdFactory.conceptId(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x4e382b39b6529ec9L)).seal();
}
