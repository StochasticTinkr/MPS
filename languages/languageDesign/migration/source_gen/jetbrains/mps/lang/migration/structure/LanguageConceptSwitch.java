package jetbrains.mps.lang.migration.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractNodeReference = 0;
  public static final int ClassifierMemberData = 1;
  public static final int ConceptMigrationReference = 2;
  public static final int ConsequenceFunction = 3;
  public static final int DataDependency = 4;
  public static final int DataDependencyReference = 5;
  public static final int DirectNodeReference = 6;
  public static final int ExecuteAfterDeclaration = 7;
  public static final int IMigrationUnit = 8;
  public static final int IncludeMigrationPart = 9;
  public static final int LinkPatternVariableReference = 10;
  public static final int ListPatternVariableReference = 11;
  public static final int MigrationScript = 12;
  public static final int MigrationScriptReference = 13;
  public static final int MoveConcept = 14;
  public static final int MoveConceptMember = 15;
  public static final int MoveContainmentLink = 16;
  public static final int MoveNodeMigrationPart = 17;
  public static final int MoveNodeSpecialization = 18;
  public static final int MoveProperty = 19;
  public static final int MoveReferenceLink = 20;
  public static final int NodePatternVariableReference = 21;
  public static final int OrderDependency = 22;
  public static final int ProducedDataDeclaration = 23;
  public static final int PropertyPatternVariableReference = 24;
  public static final int PureMigrationPart = 25;
  public static final int PureMigrationScript = 26;
  public static final int QuotationConsequence = 27;
  public static final int RefactoringLog = 28;
  public static final int RefactoringOption = 29;
  public static final int RefactoringOptions = 30;
  public static final int RefactoringOrderDependency = 31;
  public static final int RefactoringPart = 32;
  public static final int ReflectionNodeReference = 33;
  public static final int RequiredDataDeclaration = 34;
  public static final int TransformConsequence = 35;
  public static final int TransformStatement = 36;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x9074634404fd4286L, 0x97d5b46ae6a81709L);
    builder.put(0x2b3f57492c1648ccL, AbstractNodeReference);
    builder.put(0x7e209440ba59c1e7L, ClassifierMemberData);
    builder.put(0x36182c4cf6238c95L, ConceptMigrationReference);
    builder.put(0x4e382b39b6532eb7L, ConsequenceFunction);
    builder.put(0x44b28148e401c891L, DataDependency);
    builder.put(0x63476c2ad9bcd736L, DataDependencyReference);
    builder.put(0x67236d4a58303771L, DirectNodeReference);
    builder.put(0x398343344f07b404L, ExecuteAfterDeclaration);
    builder.put(0x47bb811da2acc4d6L, IMigrationUnit);
    builder.put(0x267418e6b5c2b903L, IncludeMigrationPart);
    builder.put(0x2cb3222730d5c47bL, LinkPatternVariableReference);
    builder.put(0x550f7de0eda8c07aL, ListPatternVariableReference);
    builder.put(0x73e8a2c68b62c6a3L, MigrationScript);
    builder.put(0x66eed171c5f83bcaL, MigrationScriptReference);
    builder.put(0x2b3f57492c1741b6L, MoveConcept);
    builder.put(0x2b3f57492c1741b8L, MoveConceptMember);
    builder.put(0x2b3f57492c1741baL, MoveContainmentLink);
    builder.put(0x67236d4a5830221eL, MoveNodeMigrationPart);
    builder.put(0x2b3f57492c165c5dL, MoveNodeSpecialization);
    builder.put(0x2b3f57492c1741b9L, MoveProperty);
    builder.put(0x2b3f57492c1741b7L, MoveReferenceLink);
    builder.put(0x6877ea6323b8f1a3L, NodePatternVariableReference);
    builder.put(0x398343344f099b7aL, OrderDependency);
    builder.put(0x50c63f9f4a0dacfbL, ProducedDataDeclaration);
    builder.put(0x2cb3222730cfcbccL, PropertyPatternVariableReference);
    builder.put(0x267418e6b5c2b902L, PureMigrationPart);
    builder.put(0x67236d4a5836cabbL, PureMigrationScript);
    builder.put(0x4e382b39b6532d41L, QuotationConsequence);
    builder.put(0x1bf9eb43276b6d8fL, RefactoringLog);
    builder.put(0x31ee543051f23343L, RefactoringOption);
    builder.put(0x31ee543051f23340L, RefactoringOptions);
    builder.put(0x1bf9eb43276b6d9dL, RefactoringOrderDependency);
    builder.put(0x2b3f57492c163158L, RefactoringPart);
    builder.put(0x27bf3263be23f0dfL, ReflectionNodeReference);
    builder.put(0x3d90e8d384845a8fL, RequiredDataDeclaration);
    builder.put(0x4e382b39b6529ef3L, TransformConsequence);
    builder.put(0x4e382b39b6529ec9L, TransformStatement);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
