package jetbrains.mps.lang.migration.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractNodeReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClassifierMemberData = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptMigrationReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConsequenceFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DataDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DataDependencyReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DirectNodeReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteAfterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMigrationUnit = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncludeMigrationPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkPatternVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListPatternVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigrationScript = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0m).create();
  private final ConceptPresentation props_MigrationScriptReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveConceptMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveContainmentLink = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveNodeMigrationPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveNodeSpecialization = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveReferenceLink = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodePatternVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrderDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProducedDataDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyPatternVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PureMigrationPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PureMigrationScript = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QuotationConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringLog = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringOption = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringOptions = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringOrderDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReflectionNodeReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequiredDataDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformStatement = new ConceptPresentationBuilder().deprecated(true).create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractNodeReference:
        return props_AbstractNodeReference;
      case LanguageConceptSwitch.ClassifierMemberData:
        return props_ClassifierMemberData;
      case LanguageConceptSwitch.ConceptMigrationReference:
        return props_ConceptMigrationReference;
      case LanguageConceptSwitch.ConsequenceFunction:
        return props_ConsequenceFunction;
      case LanguageConceptSwitch.DataDependency:
        return props_DataDependency;
      case LanguageConceptSwitch.DataDependencyReference:
        return props_DataDependencyReference;
      case LanguageConceptSwitch.DirectNodeReference:
        return props_DirectNodeReference;
      case LanguageConceptSwitch.ExecuteAfterDeclaration:
        return props_ExecuteAfterDeclaration;
      case LanguageConceptSwitch.IMigrationUnit:
        return props_IMigrationUnit;
      case LanguageConceptSwitch.IncludeMigrationPart:
        return props_IncludeMigrationPart;
      case LanguageConceptSwitch.LinkPatternVariableReference:
        return props_LinkPatternVariableReference;
      case LanguageConceptSwitch.ListPatternVariableReference:
        return props_ListPatternVariableReference;
      case LanguageConceptSwitch.MigrationScript:
        return props_MigrationScript;
      case LanguageConceptSwitch.MigrationScriptReference:
        return props_MigrationScriptReference;
      case LanguageConceptSwitch.MoveConcept:
        return props_MoveConcept;
      case LanguageConceptSwitch.MoveConceptMember:
        return props_MoveConceptMember;
      case LanguageConceptSwitch.MoveContainmentLink:
        return props_MoveContainmentLink;
      case LanguageConceptSwitch.MoveNodeMigrationPart:
        return props_MoveNodeMigrationPart;
      case LanguageConceptSwitch.MoveNodeSpecialization:
        return props_MoveNodeSpecialization;
      case LanguageConceptSwitch.MoveProperty:
        return props_MoveProperty;
      case LanguageConceptSwitch.MoveReferenceLink:
        return props_MoveReferenceLink;
      case LanguageConceptSwitch.NodePatternVariableReference:
        return props_NodePatternVariableReference;
      case LanguageConceptSwitch.OrderDependency:
        return props_OrderDependency;
      case LanguageConceptSwitch.ProducedDataDeclaration:
        return props_ProducedDataDeclaration;
      case LanguageConceptSwitch.PropertyPatternVariableReference:
        return props_PropertyPatternVariableReference;
      case LanguageConceptSwitch.PureMigrationPart:
        return props_PureMigrationPart;
      case LanguageConceptSwitch.PureMigrationScript:
        return props_PureMigrationScript;
      case LanguageConceptSwitch.QuotationConsequence:
        return props_QuotationConsequence;
      case LanguageConceptSwitch.RefactoringLog:
        return props_RefactoringLog;
      case LanguageConceptSwitch.RefactoringOption:
        return props_RefactoringOption;
      case LanguageConceptSwitch.RefactoringOptions:
        return props_RefactoringOptions;
      case LanguageConceptSwitch.RefactoringOrderDependency:
        return props_RefactoringOrderDependency;
      case LanguageConceptSwitch.RefactoringPart:
        return props_RefactoringPart;
      case LanguageConceptSwitch.ReflectionNodeReference:
        return props_ReflectionNodeReference;
      case LanguageConceptSwitch.RequiredDataDeclaration:
        return props_RequiredDataDeclaration;
      case LanguageConceptSwitch.TransformConsequence:
        return props_TransformConsequence;
      case LanguageConceptSwitch.TransformStatement:
        return props_TransformStatement;
    }
    return null;
  }
}
