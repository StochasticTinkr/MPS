package jetbrains.mps.lang.migration.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractNodeReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ClassifierMemberData = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConceptMigrationReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConsequenceFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DataDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DataDependencyReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DirectNodeReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExecuteAfterDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IMigrationUnit = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncludeMigrationPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinkPatternVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListPatternVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigrationScript = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MigrationScriptReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveConcept = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveConceptMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveContainmentLink = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveNodeMigrationPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveNodeSpecialization = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoveReferenceLink = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NodePatternVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrderDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ProducedDataDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PropertyPatternVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PureMigrationPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PureMigrationScript = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QuotationConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringLog = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringOption = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringOptions = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringOrderDependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RefactoringPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReflectionNodeReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RequiredDataDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformConsequence = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransformStatement = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractNodeReference;
      case 1:
        return props_ClassifierMemberData;
      case 2:
        return props_ConceptMigrationReference;
      case 3:
        return props_ConsequenceFunction;
      case 4:
        return props_DataDependency;
      case 5:
        return props_DataDependencyReference;
      case 6:
        return props_DirectNodeReference;
      case 7:
        return props_ExecuteAfterDeclaration;
      case 8:
        return props_IMigrationUnit;
      case 9:
        return props_IncludeMigrationPart;
      case 10:
        return props_LinkPatternVariableReference;
      case 11:
        return props_ListPatternVariableReference;
      case 12:
        return props_MigrationScript;
      case 13:
        return props_MigrationScriptReference;
      case 14:
        return props_MoveConcept;
      case 15:
        return props_MoveConceptMember;
      case 16:
        return props_MoveContainmentLink;
      case 17:
        return props_MoveNodeMigrationPart;
      case 18:
        return props_MoveNodeSpecialization;
      case 19:
        return props_MoveProperty;
      case 20:
        return props_MoveReferenceLink;
      case 21:
        return props_NodePatternVariableReference;
      case 22:
        return props_OrderDependency;
      case 23:
        return props_ProducedDataDeclaration;
      case 24:
        return props_PropertyPatternVariableReference;
      case 25:
        return props_PureMigrationPart;
      case 26:
        return props_PureMigrationScript;
      case 27:
        return props_QuotationConsequence;
      case 28:
        return props_RefactoringLog;
      case 29:
        return props_RefactoringOption;
      case 30:
        return props_RefactoringOptions;
      case 31:
        return props_RefactoringOrderDependency;
      case 32:
        return props_RefactoringPart;
      case 33:
        return props_ReflectionNodeReference;
      case 34:
        return props_RequiredDataDeclaration;
      case 35:
        return props_TransformConsequence;
      case 36:
        return props_TransformStatement;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
