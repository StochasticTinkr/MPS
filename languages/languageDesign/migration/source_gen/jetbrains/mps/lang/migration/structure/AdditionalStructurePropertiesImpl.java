package jetbrains.mps.lang.migration.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_AbstractNodeReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConceptMigrationReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConsequenceFunction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DataDependency = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DataDependencyReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DirectNodeReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ExecuteAfterDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IMigrationUnit = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IncludeMigrationPart = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LinkPatternVariableReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ListPatternVariableReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MigrationScript = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MigrationScriptReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MoveConcept = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MoveConceptMember = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MoveContainmentLink = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MoveNodeMigrationPart = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MoveNodeSpecialization = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MoveProperty = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MoveReferenceLink = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NodePatternVariableReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OrderDependency = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ProducedDataDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PropertyPatternVariableReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PureMigrationPart = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PureMigrationScript = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_QuotationConsequence = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RefactoringLog = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RefactoringOption = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RefactoringOptions = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RefactoringOrderDependency = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RefactoringPart = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ReflectionNodeReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RequiredDataDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TransformConsequence = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TransformStatement = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0lb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractNodeReference;
          }
          break;
        case 1:
          if (true) {
            return props_ConceptMigrationReference;
          }
          break;
        case 2:
          if (true) {
            return props_ConsequenceFunction;
          }
          break;
        case 3:
          if (true) {
            return props_DataDependency;
          }
          break;
        case 4:
          if (true) {
            return props_DataDependencyReference;
          }
          break;
        case 5:
          if (true) {
            return props_DirectNodeReference;
          }
          break;
        case 6:
          if (true) {
            return props_ExecuteAfterDeclaration;
          }
          break;
        case 7:
          if (true) {
            return props_IMigrationUnit;
          }
          break;
        case 8:
          if (true) {
            return props_IncludeMigrationPart;
          }
          break;
        case 9:
          if (true) {
            return props_LinkPatternVariableReference;
          }
          break;
        case 10:
          if (true) {
            return props_ListPatternVariableReference;
          }
          break;
        case 11:
          if (true) {
            return props_MigrationScript;
          }
          break;
        case 12:
          if (true) {
            return props_MigrationScriptReference;
          }
          break;
        case 13:
          if (true) {
            return props_MoveConcept;
          }
          break;
        case 14:
          if (true) {
            return props_MoveConceptMember;
          }
          break;
        case 15:
          if (true) {
            return props_MoveContainmentLink;
          }
          break;
        case 16:
          if (true) {
            return props_MoveNodeMigrationPart;
          }
          break;
        case 17:
          if (true) {
            return props_MoveNodeSpecialization;
          }
          break;
        case 18:
          if (true) {
            return props_MoveProperty;
          }
          break;
        case 19:
          if (true) {
            return props_MoveReferenceLink;
          }
          break;
        case 20:
          if (true) {
            return props_NodePatternVariableReference;
          }
          break;
        case 21:
          if (true) {
            return props_OrderDependency;
          }
          break;
        case 22:
          if (true) {
            return props_ProducedDataDeclaration;
          }
          break;
        case 23:
          if (true) {
            return props_PropertyPatternVariableReference;
          }
          break;
        case 24:
          if (true) {
            return props_PureMigrationPart;
          }
          break;
        case 25:
          if (true) {
            return props_PureMigrationScript;
          }
          break;
        case 26:
          if (true) {
            return props_QuotationConsequence;
          }
          break;
        case 27:
          if (true) {
            return props_RefactoringLog;
          }
          break;
        case 28:
          if (true) {
            return props_RefactoringOption;
          }
          break;
        case 29:
          if (true) {
            return props_RefactoringOptions;
          }
          break;
        case 30:
          if (true) {
            return props_RefactoringOrderDependency;
          }
          break;
        case 31:
          if (true) {
            return props_RefactoringPart;
          }
          break;
        case 32:
          if (true) {
            return props_ReflectionNodeReference;
          }
          break;
        case 33:
          if (true) {
            return props_RequiredDataDeclaration;
          }
          break;
        case 34:
          if (true) {
            return props_TransformConsequence;
          }
          break;
        case 35:
          if (true) {
            return props_TransformStatement;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0lb = buildConceptIndices(MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1648ccL, "AbstractNodeReference"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x36182c4cf6238c95L, "ConceptMigrationReference"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x4e382b39b6532eb7L, "ConsequenceFunction"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x44b28148e401c891L, "DataDependency"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x63476c2ad9bcd736L, "DataDependencyReference"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x67236d4a58303771L, "DirectNodeReference"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x398343344f07b404L, "ExecuteAfterDeclaration"), MetaAdapterFactory.getInterfaceConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x47bb811da2acc4d6L, "IMigrationUnit"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x267418e6b5c2b903L, "IncludeMigrationPart"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2cb3222730d5c47bL, "LinkPatternVariableReference"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x550f7de0eda8c07aL, "ListPatternVariableReference"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x73e8a2c68b62c6a3L, "MigrationScript"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x66eed171c5f83bcaL, "MigrationScriptReference"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1741b6L, "MoveConcept"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1741b8L, "MoveConceptMember"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1741baL, "MoveContainmentLink"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x67236d4a5830221eL, "MoveNodeMigrationPart"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c165c5dL, "MoveNodeSpecialization"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1741b9L, "MoveProperty"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c1741b7L, "MoveReferenceLink"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x6877ea6323b8f1a3L, "NodePatternVariableReference"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x398343344f099b7aL, "OrderDependency"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x50c63f9f4a0dacfbL, "ProducedDataDeclaration"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2cb3222730cfcbccL, "PropertyPatternVariableReference"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x267418e6b5c2b902L, "PureMigrationPart"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x67236d4a5836cabbL, "PureMigrationScript"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x4e382b39b6532d41L, "QuotationConsequence"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x1bf9eb43276b6d8fL, "RefactoringLog"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x31ee543051f23343L, "RefactoringOption"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x31ee543051f23340L, "RefactoringOptions"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x1bf9eb43276b6d9dL, "RefactoringOrderDependency"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x2b3f57492c163158L, "RefactoringPart"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x27bf3263be23f0dfL, "ReflectionNodeReference"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x3d90e8d384845a8fL, "RequiredDataDeclaration"), MetaAdapterFactory.getInterfaceConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x4e382b39b6529ef3L, "TransformConsequence"), MetaAdapterFactory.getConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x4e382b39b6529ec9L, "TransformStatement"));
}
