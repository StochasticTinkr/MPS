package jetbrains.mps.lang.migration.actions.plugin;

/*Generated by MPS */

import jetbrains.mps.workbench.action.BaseAction;
import javax.swing.Icon;
import com.intellij.openapi.actionSystem.AnActionEvent;
import java.util.Map;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.smodel.Language;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModuleOperations;
import java.util.List;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.ide.actions.MPSCommonDataKeys;
import jetbrains.mps.lang.migration.behavior.IMigrationUnit__BehaviorDescriptor;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class CorrectLanguageVersion_Action extends BaseAction {
  private static final Icon ICON = null;

  public CorrectLanguageVersion_Action() {
    super("Correct Language Version", "", ICON);
    this.setIsAlwaysVisible(false);
    this.setExecuteOutsideCommand(false);
  }
  @Override
  public boolean isDumbAware() {
    return true;
  }
  @Override
  public boolean isApplicable(AnActionEvent event, final Map<String, Object> _params) {
    if (!(((SModule) MapSequence.fromMap(_params).get("module")) instanceof Language)) {
      return false;
    }
    Language lang = (Language) ((SModule) MapSequence.fromMap(_params).get("module"));

    SModel mig = SModuleOperations.getAspect(lang, "migration");
    if (mig == null) {
      return false;
    }

    List<SNode> migrations = SModelOperations.roots(mig, MetaAdapterFactory.getInterfaceConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x47bb811da2acc4d6L, "jetbrains.mps.lang.migration.structure.IMigrationUnit"));
    if (ListSequence.fromList(migrations).isEmpty()) {
      return false;
    }

    return lang.getLanguageVersion() != CorrectLanguageVersion_Action.this.getLastScriptVersion(migrations, _params) + 1;
  }
  @Override
  public void doUpdate(@NotNull AnActionEvent event, final Map<String, Object> _params) {
    this.setEnabledState(event.getPresentation(), this.isApplicable(event, _params));
  }
  @Override
  protected boolean collectActionData(AnActionEvent event, final Map<String, Object> _params) {
    if (!(super.collectActionData(event, _params))) {
      return false;
    }
    {
      SModule p = event.getData(MPSCommonDataKeys.MODULE);
      MapSequence.fromMap(_params).put("module", p);
      if (p == null) {
        return false;
      }
    }
    return true;
  }
  @Override
  public void doExecute(@NotNull final AnActionEvent event, final Map<String, Object> _params) {
    Language lang = (Language) ((SModule) MapSequence.fromMap(_params).get("module"));
    List<SNode> migrarions = SModelOperations.roots(SModuleOperations.getAspect(lang, "migration"), MetaAdapterFactory.getInterfaceConcept(0x9074634404fd4286L, 0x97d5b46ae6a81709L, 0x47bb811da2acc4d6L, "jetbrains.mps.lang.migration.structure.IMigrationUnit"));
    lang.setLanguageVersion(CorrectLanguageVersion_Action.this.getLastScriptVersion(migrarions, _params) + 1);
  }
  private int getLastScriptVersion(List<SNode> migrations, final Map<String, Object> _params) {
    return (int) IMigrationUnit__BehaviorDescriptor.fromVersion_id4uVwhQyFcnl.invoke(ListSequence.fromList(migrations).sort(new ISelector<SNode, Integer>() {
      public Integer select(SNode it) {
        return (int) IMigrationUnit__BehaviorDescriptor.fromVersion_id4uVwhQyFcnl.invoke(it);
      }
    }, false).first());
  }
}
