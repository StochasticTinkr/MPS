package jetbrains.mps.lang.text.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.editor.runtime.cells.CellIdManager;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.editor.runtime.deletionApprover.DeletionApproverUtil;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IVisitor;

/*package*/ class TextDeleteStrategyFactory {
  private TextDeleteStrategyFactory() {
  }

  private static abstract class TextDeleteStrategy extends TextStrategy {
    protected final boolean myIsForward;

    private TextDeleteStrategy(EditorContext editorContext, boolean isForward) {
      super(editorContext);
      myIsForward = isForward;
    }
  }

  /*package*/ static TextStrategy createDeleteStrategy(SNode currentNode, EditorContext editorContext, boolean isForward) {
    SNode neighbour = SNodeOperations.cast(((isForward ? SNodeOperations.getNextSibling(currentNode) : SNodeOperations.getPrevSibling(currentNode))), MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35ee7L, "jetbrains.mps.lang.text.structure.TextElement"));
    if (SNodeOperations.isInstanceOf(currentNode, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word")) && (neighbour != null)) {
      if (SNodeOperations.isInstanceOf(neighbour, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word"))) {
        return new TextDeleteStrategyFactory.GlueNeighbourWordStrategy(SNodeOperations.cast(currentNode, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word")), SNodeOperations.cast(neighbour, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word")), editorContext, isForward);
      } else if (isEmptyString(SPropertyOperations.getString(SNodeOperations.cast(currentNode, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word")), MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value")))) {
        return new TextDeleteStrategyFactory.DeleteEmptyWordStrategy(SNodeOperations.cast(currentNode, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word")), neighbour, editorContext, isForward);
      }
    }
    if ((neighbour != null)) {
      if (SNodeOperations.isInstanceOf(neighbour, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word"))) {
        return new TextDeleteStrategyFactory.SelectNeighbourWordStrategy(SNodeOperations.cast(neighbour, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word")), editorContext, isForward);
      } else {
        return new TextDeleteStrategyFactory.RemoveNeighbourStrategy(neighbour, editorContext, isForward);
      }
    } else {
      SNode currentLine = SNodeOperations.cast(SNodeOperations.getParent(currentNode), MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e561af166L, "jetbrains.mps.lang.text.structure.Line"));
      SNode neighbourLine = SNodeOperations.cast(((isForward ? SNodeOperations.getNextSibling(currentLine) : SNodeOperations.getPrevSibling(currentLine))), MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e561af166L, "jetbrains.mps.lang.text.structure.Line"));
      if ((neighbourLine != null)) {
        return new TextDeleteStrategyFactory.RemoveLineStrategy(currentNode, currentLine, neighbourLine, editorContext, isForward);
      } else {
        return new TextDeleteStrategyFactory.RemoveWholeTextStrategy(SNodeOperations.cast(SNodeOperations.getParent(currentLine), MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e5619f411L, "jetbrains.mps.lang.text.structure.Text")), editorContext, isForward);
      }
    }

  }

  private static class GlueNeighbourWordStrategy extends TextDeleteStrategyFactory.TextDeleteStrategy {
    private SNode myCurrentWord;
    private SNode myNeighbour;
    private String myCurrentWordValue;
    private String myNeighbourValue;

    /*package*/ GlueNeighbourWordStrategy(SNode currentWord, SNode neighbourWord, EditorContext editorContext, boolean isForward) {
      super(editorContext, isForward);
      myCurrentWord = currentWord;
      myNeighbour = neighbourWord;
      myCurrentWordValue = getValueOrEmpty(SPropertyOperations.getString(myCurrentWord, MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value")));
      myNeighbourValue = getValueOrEmpty(SPropertyOperations.getString(myNeighbour, MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value")));
    }

    @Override
    /*package*/ void execute() {
      int selectionIndex = (myIsForward ? myCurrentWordValue.length() : myNeighbourValue.length());
      SNode newWord;
      if ((myCurrentWordValue == null || myCurrentWordValue.length() == 0)) {
        newWord = SNodeOperations.copyNode(myNeighbour);
      } else {
        newWord = SNodeOperations.copyNode(myCurrentWord);
      }
      SPropertyOperations.assign(newWord, MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value"), getNewValue());
      SNodeOperations.deleteNode(myNeighbour);
      SNodeOperations.replaceWithAnother(myCurrentWord, newWord);
      SelectionUtil.selectLabelCellAnSetCaret(myEditorContext, newWord, "*" + CellIdManager.createPropertyId("value"), selectionIndex);
    }
    private String getNewValue() {
      StringBuilder builder = new StringBuilder();
      if (myIsForward) {
        builder.append(myCurrentWordValue);
        builder.append(myNeighbourValue);
      } else {
        builder.append(myNeighbourValue);
        builder.append(myCurrentWordValue);
      }
      return builder.toString();
    }

    private String getValueOrEmpty(String value) {
      if (value == null) {
        return "";
      } else {
        return value;
      }
    }
  }
  private static class DeleteEmptyWordStrategy extends TextDeleteStrategyFactory.TextDeleteStrategy {
    private SNode myCurrentWord;
    private SNode myNeighbour;

    private DeleteEmptyWordStrategy(SNode currentWord, SNode neighbour, EditorContext editorContext, boolean isForward) {
      super(editorContext, isForward);
      myCurrentWord = currentWord;
      myNeighbour = neighbour;
    }

    @Override
    /*package*/ void execute() {
      SNodeOperations.deleteNode(myCurrentWord);
      if (myIsForward) {
        SelectionUtil.selectLabelCellAnSetCaret(myEditorContext, myNeighbour, SelectionManager.FIRST_CELL, 0);
      } else {
        SelectionUtil.selectLabelCellAnSetCaret(myEditorContext, myNeighbour, SelectionManager.LAST_CELL, -1);
      }
    }
  }
  private static class RemoveNeighbourStrategy extends TextDeleteStrategyFactory.TextDeleteStrategy {
    private SNode myNeighbour;

    private RemoveNeighbourStrategy(SNode neighbour, EditorContext editorContext, boolean isForward) {
      super(editorContext, isForward);
      myNeighbour = neighbour;
    }

    @Override
    /*package*/ void execute() {
      boolean wasApproved = DeletionApproverUtil.approve(myEditorContext, myNeighbour);
      if (!(wasApproved)) {
        SNodeOperations.deleteNode(myNeighbour);
      }
    }
  }
  private static class SelectNeighbourWordStrategy extends TextDeleteStrategyFactory.TextDeleteStrategy {
    private SNode myNeighbour;

    private SelectNeighbourWordStrategy(SNode neighbour, EditorContext editorContext, boolean isForward) {
      super(editorContext, isForward);
      myNeighbour = neighbour;
    }

    @Override
    /*package*/ void execute() {
      if (myIsForward) {
        SelectionUtil.selectLabelCellAnSetCaret(myEditorContext, myNeighbour, SelectionManager.FIRST_CELL, 0);
      } else {
        SelectionUtil.selectLabelCellAnSetCaret(myEditorContext, myNeighbour, SelectionManager.LAST_CELL, -1);
      }
    }
  }
  private static class RemoveWholeTextStrategy extends TextDeleteStrategyFactory.TextDeleteStrategy {
    private SNode myCommentText;

    /*package*/ RemoveWholeTextStrategy(SNode text, EditorContext editorContext, boolean isForward) {
      super(editorContext, isForward);
      myCommentText = text;
    }

    @Override
    /*package*/ void execute() {
      boolean wasApproved = DeletionApproverUtil.approve(myEditorContext, myCommentText);
      if (!(wasApproved)) {
        SNodeOperations.deleteNode(myCommentText);
      }
    }
  }
  private static class RemoveLineStrategy extends TextDeleteStrategyFactory.TextDeleteStrategy {
    private SNode myNeighbourLine;
    private SNode myCurrentLine;
    private SNode myCurrentNode;


    /*package*/ RemoveLineStrategy(SNode currentNode, SNode currentLine, SNode neighbourLine, EditorContext editorContext, boolean isForward) {
      super(editorContext, isForward);
      myCurrentNode = currentNode;
      myCurrentLine = currentLine;
      myNeighbourLine = neighbourLine;
    }

    @Override
    /*package*/ void execute() {
      SNode edgeElement;
      if (myIsForward) {
        edgeElement = ListSequence.fromList(SLinkOperations.getChildren(myNeighbourLine, MetaAdapterFactory.getContainmentLink(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e561af166L, 0x2331694e561af167L, "elements"))).first();
        ListSequence.fromList(SLinkOperations.getChildren(myNeighbourLine, MetaAdapterFactory.getContainmentLink(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e561af166L, 0x2331694e561af167L, "elements"))).visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            ListSequence.fromList(SLinkOperations.getChildren(myCurrentLine, MetaAdapterFactory.getContainmentLink(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e561af166L, 0x2331694e561af167L, "elements"))).addElement(it);
          }
        });
      } else {
        edgeElement = ListSequence.fromList(SLinkOperations.getChildren(myNeighbourLine, MetaAdapterFactory.getContainmentLink(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e561af166L, 0x2331694e561af167L, "elements"))).last();
        ListSequence.fromList(SLinkOperations.getChildren(myNeighbourLine, MetaAdapterFactory.getContainmentLink(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e561af166L, 0x2331694e561af167L, "elements"))).reversedList().visitAll(new IVisitor<SNode>() {
          public void visit(SNode it) {
            ListSequence.fromList(SLinkOperations.getChildren(myCurrentLine, MetaAdapterFactory.getContainmentLink(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e561af166L, 0x2331694e561af167L, "elements"))).insertElement(0, it);
          }
        });
      }
      SNodeOperations.deleteNode(myNeighbourLine);
      if (SNodeOperations.isInstanceOf(edgeElement, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word")) && SNodeOperations.isInstanceOf(myCurrentNode, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word"))) {
        TextDeleteStrategyFactory.createDeleteStrategy(myCurrentNode, myEditorContext, myIsForward).execute();
      }
    }
  }
  private static boolean isEmptyString(String str) {
    return str == null || str.length() == 0;
  }
}
