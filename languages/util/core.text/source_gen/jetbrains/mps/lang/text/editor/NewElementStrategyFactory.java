package jetbrains.mps.lang.text.editor;

/*Generated by MPS */

import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.openapi.editor.selection.SelectionManager;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.openapi.editor.selection.Selection;
import jetbrains.mps.nodeEditor.selection.EditorCellLabelSelection;

/*package*/ class NewElementStrategyFactory {

  private NewElementStrategyFactory() {
  }

  /*package*/ static TextStrategy createNewLineStrategy(SNode node, EditorContext editorContext, boolean selectNewLine, boolean isFirstPosition) {
    if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word"))) {
      return new NewElementStrategyFactory.AddNewLineAndSplitWordStrategy(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word")), editorContext, selectNewLine);
    } else {
      return new NewElementStrategyFactory.AddNewLineStrategy(node, editorContext, selectNewLine, isFirstPosition);
    }
  }
  /*package*/ static TextStrategy createNewElementStrategy(SNode node, EditorContext editorContext, boolean isFirstPosition) {
    if (SNodeOperations.isInstanceOf(node, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word"))) {
      return new NewElementStrategyFactory.SplitWordStrategy(SNodeOperations.cast(node, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word")), editorContext, !(isFirstPosition));
    } else {
      return new NewElementStrategyFactory.AddNewWordStrategy(node, editorContext, !(isFirstPosition));
    }
  }

  private static class AddNewLineStrategy extends TextStrategy {
    protected final SNode myElement;
    protected final boolean mySelectNewLine;
    protected final boolean myIncludeCurrentElement;

    private AddNewLineStrategy(SNode element, EditorContext editorContext, boolean selectNewLine, boolean includeCurrentElement) {
      super(editorContext);
      myElement = element;
      mySelectNewLine = selectNewLine;
      myIncludeCurrentElement = includeCurrentElement;
    }
    @Override
    /*package*/ void execute() {
      SNode currentLine = SNodeOperations.cast(SNodeOperations.getParent(myElement), MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e561af166L, "jetbrains.mps.lang.text.structure.Line"));
      SNode currentSibling = SNodeOperations.cast(SNodeOperations.getNextSibling(myElement), MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35ee7L, "jetbrains.mps.lang.text.structure.TextElement"));
      SNode newElement = createNewElement();
      SNode newLine = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e561af166L, "jetbrains.mps.lang.text.structure.Line"));
      ListSequence.fromList(SLinkOperations.getChildren(newLine, MetaAdapterFactory.getContainmentLink(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e561af166L, 0x2331694e561af167L, "elements"))).addElement(newElement);
      while (currentSibling != null) {
        SNode next = SNodeOperations.cast(SNodeOperations.getNextSibling(currentSibling), MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35ee7L, "jetbrains.mps.lang.text.structure.TextElement"));
        ListSequence.fromList(SLinkOperations.getChildren(newLine, MetaAdapterFactory.getContainmentLink(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2331694e561af166L, 0x2331694e561af167L, "elements"))).addElement(currentSibling);
        currentSibling = next;
      }
      SNodeOperations.insertNextSiblingChild(currentLine, newLine);
      if (mySelectNewLine) {
        SelectionUtil.selectLabelCellAnSetCaret(myEditorContext, newElement, SelectionManager.FIRST_CELL, 0);
      }
    }

    protected SNode createNewElement() {
      if (myIncludeCurrentElement) {
        return myElement;
      } else {
        return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word"));
      }
    }
  }
  private static class AddNewLineAndSplitWordStrategy extends NewElementStrategyFactory.AddNewLineStrategy {
    private final NewElementStrategyFactory.WordSplitter mySplitter;

    private AddNewLineAndSplitWordStrategy(SNode word, EditorContext editorContext, boolean selectNewLine) {
      super(word, editorContext, selectNewLine, false);
      mySplitter = new NewElementStrategyFactory.WordSplitter(word, editorContext);
    }
    @Override
    /*package*/ void execute() {
      SPropertyOperations.set(SNodeOperations.cast(myElement, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word")), MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value"), mySplitter.getLeftText());
      super.execute();
    }


    @Override
    protected SNode createNewElement() {
      return mySplitter.getRightWord();
    }

  }

  private static class AddNewWordStrategy extends TextStrategy {
    protected final SNode myElement;
    protected final boolean myAddNext;
    /*package*/ AddNewWordStrategy(SNode element, EditorContext editorContext, boolean addNext) {
      super(editorContext);
      myElement = element;
      myAddNext = addNext;
    }

    @Override
    /*package*/ void execute() {
      SNode newWord = createNewWord();
      if (myAddNext) {
        SNodeOperations.insertNextSiblingChild(myElement, newWord);
      } else {
        SNodeOperations.insertPrevSiblingChild(myElement, newWord);
      }
      myEditorContext.flushEvents();
      if (myAddNext) {
        SelectionUtil.selectLabelCellAnSetCaret(myEditorContext, newWord, SelectionManager.FIRST_CELL, 0);
      } else {
        SelectionUtil.selectLabelCellAnSetCaret(myEditorContext, myElement, SelectionManager.FIRST_CELL, 0);
      }
    }
    protected SNode createNewWord() {
      return SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word"));
    }
  }
  private static class SplitWordStrategy extends NewElementStrategyFactory.AddNewWordStrategy {

    private final NewElementStrategyFactory.WordSplitter mySplitter;
    /*package*/ SplitWordStrategy(SNode word, EditorContext editorContext, boolean addNext) {
      super(word, editorContext, addNext);
      mySplitter = new NewElementStrategyFactory.WordSplitter(word, editorContext);
    }
    @Override
    /*package*/ void execute() {
      if (myAddNext) {
        SPropertyOperations.set(SNodeOperations.cast(myElement, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word")), MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value"), mySplitter.getLeftText());
      } else {
        SPropertyOperations.set(SNodeOperations.cast(myElement, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, "jetbrains.mps.lang.text.structure.Word")), MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value"), mySplitter.getRightText());
      }
      super.execute();
    }

    protected SNode createNewWord() {
      if (myAddNext) {
        return mySplitter.getRightWord();
      } else {
        return mySplitter.getLeftWord();
      }
    }
  }


  private static class WordSplitter {
    private final SNode myWord;

    private final String myCurrentText;
    private int mySelectionStart;
    private int mySelectionEnd;
    /*package*/ WordSplitter(SNode word, EditorContext editorContext) {
      myWord = word;
      myCurrentText = (SPropertyOperations.getString(myWord, MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value")) == null ? "" : SPropertyOperations.getString(myWord, MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value")));
      Selection selection = editorContext.getSelectionManager().getSelection();
      String value = (SPropertyOperations.getString(myWord, MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value")) == null ? "" : SPropertyOperations.getString(myWord, MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value")));
      if (selection instanceof EditorCellLabelSelection) {
        mySelectionStart = ((EditorCellLabelSelection) selection).getSelectionStart();
        mySelectionEnd = ((EditorCellLabelSelection) selection).getSelectionEnd();
      } else {
        mySelectionStart = 0;
        mySelectionEnd = value.length();
      }
    }
    /*package*/ String getLeftText() {
      return StringUtils.substring(myCurrentText, 0, mySelectionStart);
    }
    /*package*/ String getRightText() {
      return StringUtils.substring(myCurrentText, mySelectionEnd);
    }
    /*package*/ SNode getLeftWord() {
      return copyWord(getLeftText());
    }
    /*package*/ SNode getRightWord() {
      return copyWord(getRightText());
    }
    /*package*/ SNode copyWord(String text) {
      SNode copy = SNodeOperations.copyNode(myWord);
      SPropertyOperations.set(copy, MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value"), text);
      if (isEmptyString(SPropertyOperations.getString(copy, MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x229012ddae35f05L, "value")))) {
        SPropertyOperations.set(copy, MetaAdapterFactory.getProperty(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x229012ddae35f04L, 0x57d1fa7f2af1d485L, "url"), null);
      }
      return copy;
    }

    private static boolean isEmptyString(String str) {
      return str == null || str.length() == 0;
    }
  }
}
