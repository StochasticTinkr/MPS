package jetbrains.mps.lang.text.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.cells.KeyMapImpl;
import jetbrains.mps.openapi.editor.cells.KeyMapAction;
import jetbrains.mps.editor.runtime.cells.KeyMapActionImpl;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.List;

public class NodeWrapperElement_LeftBrace_KeyMap extends KeyMapImpl {
  public NodeWrapperElement_LeftBrace_KeyMap() {
    this.setApplicableToEveryModel(false);
    KeyMapAction action;
    action = new NodeWrapperElement_LeftBrace_KeyMap.NodeWrapperElement_LeftBrace_KeyMap_Action0();
    this.putAction("any", " ", action);
  }
  public static class NodeWrapperElement_LeftBrace_KeyMap_Action0 extends KeyMapActionImpl {
    public NodeWrapperElement_LeftBrace_KeyMap_Action0() {
      this.setShownInPopupMenu(false);
    }
    public boolean isMenuAlwaysShown() {
      return false;
    }
    public boolean canExecute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      if ((contextCell == null)) {
        return false;
      }
      SNode contextNode = contextCell.getSNode();
      if (contextNode == null) {
        return false;
      }
      if (!(SNodeOperations.isInstanceOf(contextNode, MetaAdapterFactory.getConcept(0xc7fb639fbe784307L, 0x89b0b5959c3fa8c8L, 0x2b7b49e536031fe9L, "jetbrains.mps.lang.text.structure.NodeWrapperElement")))) {
        return false;
      }
      return true;
    }
    public void execute(final EditorContext editorContext) {
      EditorCell contextCell = editorContext.getContextCell();
      this.execute_internal(editorContext, contextCell.getSNode(), this.getSelectedNodes(editorContext));
    }
    private void execute_internal(final EditorContext editorContext, final SNode node, final List<SNode> selectedNodes) {
      NewElementStrategyFactory.createNewElementStrategy(node, editorContext, true).execute();
    }
    public String getKeyStroke() {
      return "  ";
    }
  }
}
