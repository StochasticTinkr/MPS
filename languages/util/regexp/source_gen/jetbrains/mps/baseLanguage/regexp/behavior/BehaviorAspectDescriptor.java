package jetbrains.mps.baseLanguage.regexp.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myRegexp__BehaviorDescriptor = new Regexp__BehaviorDescriptor();
  private final BHDescriptor myStringLiteralRegexp__BehaviorDescriptor = new StringLiteralRegexp__BehaviorDescriptor();
  private final BHDescriptor myOrRegexp__BehaviorDescriptor = new OrRegexp__BehaviorDescriptor();
  private final BHDescriptor mySeqRegexp__BehaviorDescriptor = new SeqRegexp__BehaviorDescriptor();
  private final BHDescriptor myUnaryRegexp__BehaviorDescriptor = new UnaryRegexp__BehaviorDescriptor();
  private final BHDescriptor myParensRegexp__BehaviorDescriptor = new ParensRegexp__BehaviorDescriptor();
  private final BHDescriptor mySymbolClassRegexp__BehaviorDescriptor = new SymbolClassRegexp__BehaviorDescriptor();
  private final BHDescriptor myPredefinedSymbolClassRegexp__BehaviorDescriptor = new PredefinedSymbolClassRegexp__BehaviorDescriptor();
  private final BHDescriptor mySymbolClassPart__BehaviorDescriptor = new SymbolClassPart__BehaviorDescriptor();
  private final BHDescriptor myCharacterSymbolClassPart__BehaviorDescriptor = new CharacterSymbolClassPart__BehaviorDescriptor();
  private final BHDescriptor myIntervalSymbolClassPart__BehaviorDescriptor = new IntervalSymbolClassPart__BehaviorDescriptor();
  private final BHDescriptor myPredefinedSymbolClassSymbolClassPart__BehaviorDescriptor = new PredefinedSymbolClassSymbolClassPart__BehaviorDescriptor();
  private final BHDescriptor myMatchParensRegexp__BehaviorDescriptor = new MatchParensRegexp__BehaviorDescriptor();
  private final BHDescriptor myReplaceBlock__BehaviorDescriptor = new ReplaceBlock__BehaviorDescriptor();
  private final BHDescriptor myRegexpDeclarationReferenceRegexp__BehaviorDescriptor = new RegexpDeclarationReferenceRegexp__BehaviorDescriptor();
  private final BHDescriptor myNTimesRegexp__BehaviorDescriptor = new NTimesRegexp__BehaviorDescriptor();
  private final BHDescriptor myAtLeastNTimesRegexp__BehaviorDescriptor = new AtLeastNTimesRegexp__BehaviorDescriptor();
  private final BHDescriptor myFromNToMTimesRegexp__BehaviorDescriptor = new FromNToMTimesRegexp__BehaviorDescriptor();
  private final BHDescriptor myLookRegexp__BehaviorDescriptor = new LookRegexp__BehaviorDescriptor();
  private final BHDescriptor myMatchVariableReferenceRegexp__BehaviorDescriptor = new MatchVariableReferenceRegexp__BehaviorDescriptor();
  private final BHDescriptor myUnicodeCharacterRegexp__BehaviorDescriptor = new UnicodeCharacterRegexp__BehaviorDescriptor();
  private final BHDescriptor myIntersectionSymbolClassPart__BehaviorDescriptor = new IntersectionSymbolClassPart__BehaviorDescriptor();
  private final BHDescriptor mySymbolClassRegexpAndPart__BehaviorDescriptor = new SymbolClassRegexpAndPart__BehaviorDescriptor();
  private final BHDescriptor myReplaceRegexpOperation__BehaviorDescriptor = new ReplaceRegexpOperation__BehaviorDescriptor();
  private final BHDescriptor myLiteralReplacement__BehaviorDescriptor = new LiteralReplacement__BehaviorDescriptor();
  private final BHDescriptor myMatchVariableReferenceReplacement__BehaviorDescriptor = new MatchVariableReferenceReplacement__BehaviorDescriptor();
  private final BHDescriptor myReplacement__BehaviorDescriptor = new Replacement__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (index_846f5o_a0eb.index(cncpt)) {
      case 0:
        return myAtLeastNTimesRegexp__BehaviorDescriptor;
      case 1:
        return myCharacterSymbolClassPart__BehaviorDescriptor;
      case 2:
        return myFromNToMTimesRegexp__BehaviorDescriptor;
      case 3:
        return myIntersectionSymbolClassPart__BehaviorDescriptor;
      case 4:
        return myIntervalSymbolClassPart__BehaviorDescriptor;
      case 5:
        return myLiteralReplacement__BehaviorDescriptor;
      case 6:
        return myLookRegexp__BehaviorDescriptor;
      case 7:
        return myMatchParensRegexp__BehaviorDescriptor;
      case 8:
        return myMatchVariableReferenceRegexp__BehaviorDescriptor;
      case 9:
        return myMatchVariableReferenceReplacement__BehaviorDescriptor;
      case 10:
        return myNTimesRegexp__BehaviorDescriptor;
      case 11:
        return myOrRegexp__BehaviorDescriptor;
      case 12:
        return myParensRegexp__BehaviorDescriptor;
      case 13:
        return myPredefinedSymbolClassRegexp__BehaviorDescriptor;
      case 14:
        return myPredefinedSymbolClassSymbolClassPart__BehaviorDescriptor;
      case 15:
        return myRegexp__BehaviorDescriptor;
      case 16:
        return myRegexpDeclarationReferenceRegexp__BehaviorDescriptor;
      case 17:
        return myReplaceBlock__BehaviorDescriptor;
      case 18:
        return myReplaceRegexpOperation__BehaviorDescriptor;
      case 19:
        return myReplacement__BehaviorDescriptor;
      case 20:
        return mySeqRegexp__BehaviorDescriptor;
      case 21:
        return myStringLiteralRegexp__BehaviorDescriptor;
      case 22:
        return mySymbolClassPart__BehaviorDescriptor;
      case 23:
        return mySymbolClassRegexp__BehaviorDescriptor;
      case 24:
        return mySymbolClassRegexpAndPart__BehaviorDescriptor;
      case 25:
        return myUnaryRegexp__BehaviorDescriptor;
      case 26:
        return myUnicodeCharacterRegexp__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex index_846f5o_a0eb = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118dc30ee2L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791ae82fL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118dc58c6eL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c0ef7f429L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11179215e8bL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab94cL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de32185L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111797946c7L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118e0a1c55L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab94eL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118dbeda57L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a0d780L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111752101b0L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178fa2a18L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117928d9f2L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117f58ea2aL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ef80054L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c1923d18aL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab952L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174bc30e7L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a0992dL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e2916aL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c22ec8f79L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11831260718L)).seal();
}
