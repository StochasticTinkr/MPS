package jetbrains.mps.baseLanguage.regexp.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class SymbolClassPart__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L, "jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<String> validateChar_id75Jea4IFjf5 = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("validateChar").modifiers(SModifiersImpl.create(0, AccessPrivileges.PROTECTED)).concept(CONCEPT).id("75Jea4IFjf5").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<String> escapeChar_id75Jea4IEVWQ = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("escapeChar").modifiers(SModifiersImpl.create(2, AccessPrivileges.PROTECTED)).concept(CONCEPT).id("75Jea4IEVWQ").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(validateChar_id75Jea4IFjf5, escapeChar_id75Jea4IEVWQ);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String validateChar_id75Jea4IFjf5(@NotNull SNode __thisNode__, String s) {
    StringBuilder sb = new StringBuilder();
    int i = 0;
    char c = s.charAt(i);
    if (c == '\\') {
      sb.append(c);
      if (++i >= s.length()) {
        return null;
      }
      c = s.charAt(i);
      if (c == 'u') {
        sb.append(c);
        for (int e = 0; e < 4; e++) {
          if (++i >= s.length()) {
            return null;
          }
          c = s.charAt(i);
          if (!((boolean) StringLiteralRegexp__BehaviorDescriptor.isHexChar_id7KMCQ$NHaYO.invoke(SNodeOperations.asSConcept(MetaAdapterFactory.getConcept(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a0992dL, "jetbrains.mps.baseLanguage.regexp.structure.StringLiteralRegexp")), ((char) c)))) {
            return null;
          }
          sb.append(c);
        }
      } else if (Character.isDigit(c)) {
        sb.append(c);
        for (int e = 0; e < 2; e++) {
          if (++i >= s.length()) {
            return null;
          }
          c = s.charAt(i);
          if (!(Character.isDigit(c))) {
            return null;
          }
          sb.append(c);
        }
      } else if (c == 'n' || c == 't' || c == 'b' || c == 'f' || c == 'r' || c == '"' || c == '\'' || c == '\\') {
        sb.append(c);
      } else {
        return null;
      }
    } else if (c < 32) {
      return null;
    } else if (c < 128) {
      if (c == '-' || c == '(' || c == ')' || c == '[' || c == ']' || c == '{' || c == '}' || c == '+' || c == '*' || c == '?' || c == '|' || c == '^' || c == '.' || c == '$') {
        sb.append('\\');
      }
      sb.append(c);
    } else {
      sb.append("\\u");
      String val = Integer.toString(c, 16);
      sb.append("0000".substring(val.length()) + val);
    }
    i++;
    if (i != s.length()) {
      return null;
    }
    return sb.toString();
  }
  /*package*/ static String escapeChar_id75Jea4IEVWQ(@NotNull SNode __thisNode__, String s) {
    String res = SymbolClassPart__BehaviorDescriptor.validateChar_id75Jea4IFjf5.invoke(__thisNode__, s);
    if (res == null) {
      if (s.equals("\\")) {
        return "\\\\";
      }
      return "\\?";
    }
    return res;
  }

  /*package*/ SymbolClassPart__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) validateChar_id75Jea4IFjf5(node, (String) parameters[0]));
      case 1:
        return (T) ((String) escapeChar_id75Jea4IEVWQ(node, (String) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
