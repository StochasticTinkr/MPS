package jetbrains.mps.baseLanguage.regexp.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AtLeastNTimesRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CharacterSymbolClassPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DotRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FindMatchExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FindMatchStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ForEachMatchStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FromNToMTimesRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InlineRegexpExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntersectionSymbolClassPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntervalSymbolClassPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LazyPlusRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LazyQuestionRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LazyStarRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LineEndRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LineStartRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LiteralReplacement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LookRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatchParensRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatchRegexpExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatchRegexpOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatchRegexpStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatchVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatchVariableReferenceRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatchVariableReferenceReplacement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NTimesRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NegativeLookAheadRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NegativeLookBehindRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NegativeSymbolClassRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParensRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PlusRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PositiveLookAheadRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PositiveLookBehindRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PositiveSymbolClassRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PredefinedSymbolClassDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PredefinedSymbolClassRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PredefinedSymbolClassSymbolClassPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PredefinedSymbolClasses = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QuestionRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Regexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RegexpDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RegexpDeclarationReferenceRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RegexpExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RegexpUsingConstruction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Regexps = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReplaceBlock = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReplaceRegexpOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReplaceWithRegexpExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReplaceWithRegexpOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Replacement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SeqRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SplitExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SplitOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StarRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringLiteralRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SymbolClassPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SymbolClassRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SymbolClassRegexpAndPart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnaryRegexp = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnicodeCharacterRegexp = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("daafa647-f1f7-4b0b-b096-69cd7c8408c0"), "jetbrains.mps.baseLanguage.regexp")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AtLeastNTimesRegexp;
      case 1:
        return props_BinaryRegexp;
      case 2:
        return props_CharacterSymbolClassPart;
      case 3:
        return props_DotRegexp;
      case 4:
        return props_FindMatchExpression;
      case 5:
        return props_FindMatchStatement;
      case 6:
        return props_ForEachMatchStatement;
      case 7:
        return props_FromNToMTimesRegexp;
      case 8:
        return props_InlineRegexpExpression;
      case 9:
        return props_IntersectionSymbolClassPart;
      case 10:
        return props_IntervalSymbolClassPart;
      case 11:
        return props_LazyPlusRegexp;
      case 12:
        return props_LazyQuestionRegexp;
      case 13:
        return props_LazyStarRegexp;
      case 14:
        return props_LineEndRegexp;
      case 15:
        return props_LineStartRegexp;
      case 16:
        return props_LiteralReplacement;
      case 17:
        return props_LookRegexp;
      case 18:
        return props_MatchParensRegexp;
      case 19:
        return props_MatchRegexpExpression;
      case 20:
        return props_MatchRegexpOperation;
      case 21:
        return props_MatchRegexpStatement;
      case 22:
        return props_MatchVariableReference;
      case 23:
        return props_MatchVariableReferenceRegexp;
      case 24:
        return props_MatchVariableReferenceReplacement;
      case 25:
        return props_NTimesRegexp;
      case 26:
        return props_NegativeLookAheadRegexp;
      case 27:
        return props_NegativeLookBehindRegexp;
      case 28:
        return props_NegativeSymbolClassRegexp;
      case 29:
        return props_OrRegexp;
      case 30:
        return props_ParensRegexp;
      case 31:
        return props_PlusRegexp;
      case 32:
        return props_PositiveLookAheadRegexp;
      case 33:
        return props_PositiveLookBehindRegexp;
      case 34:
        return props_PositiveSymbolClassRegexp;
      case 35:
        return props_PredefinedSymbolClassDeclaration;
      case 36:
        return props_PredefinedSymbolClassRegexp;
      case 37:
        return props_PredefinedSymbolClassSymbolClassPart;
      case 38:
        return props_PredefinedSymbolClasses;
      case 39:
        return props_QuestionRegexp;
      case 40:
        return props_Regexp;
      case 41:
        return props_RegexpDeclaration;
      case 42:
        return props_RegexpDeclarationReferenceRegexp;
      case 43:
        return props_RegexpExpression;
      case 44:
        return props_RegexpUsingConstruction;
      case 45:
        return props_Regexps;
      case 46:
        return props_ReplaceBlock;
      case 47:
        return props_ReplaceRegexpOperation;
      case 48:
        return props_ReplaceWithRegexpExpression;
      case 49:
        return props_ReplaceWithRegexpOperation;
      case 50:
        return props_Replacement;
      case 51:
        return props_SeqRegexp;
      case 52:
        return props_SplitExpression;
      case 53:
        return props_SplitOperation;
      case 54:
        return props_StarRegexp;
      case 55:
        return props_StringLiteralRegexp;
      case 56:
        return props_SymbolClassPart;
      case 57:
        return props_SymbolClassRegexp;
      case 58:
        return props_SymbolClassRegexpAndPart;
      case 59:
        return props_UnaryRegexp;
      case 60:
        return props_UnicodeCharacterRegexp;
    }
    throw new IllegalStateException();
  }
}
