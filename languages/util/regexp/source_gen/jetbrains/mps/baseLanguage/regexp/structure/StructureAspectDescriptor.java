package jetbrains.mps.baseLanguage.regexp.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(61);
  /*package*/ final ConceptDescriptor myConceptAtLeastNTimesRegexp = createDescriptorForAtLeastNTimesRegexp();
  /*package*/ final ConceptDescriptor myConceptBinaryRegexp = createDescriptorForBinaryRegexp();
  /*package*/ final ConceptDescriptor myConceptCharacterSymbolClassPart = createDescriptorForCharacterSymbolClassPart();
  /*package*/ final ConceptDescriptor myConceptDotRegexp = createDescriptorForDotRegexp();
  /*package*/ final ConceptDescriptor myConceptFindMatchExpression = createDescriptorForFindMatchExpression();
  /*package*/ final ConceptDescriptor myConceptFindMatchStatement = createDescriptorForFindMatchStatement();
  /*package*/ final ConceptDescriptor myConceptForEachMatchStatement = createDescriptorForForEachMatchStatement();
  /*package*/ final ConceptDescriptor myConceptFromNToMTimesRegexp = createDescriptorForFromNToMTimesRegexp();
  /*package*/ final ConceptDescriptor myConceptInlineRegexpExpression = createDescriptorForInlineRegexpExpression();
  /*package*/ final ConceptDescriptor myConceptIntersectionSymbolClassPart = createDescriptorForIntersectionSymbolClassPart();
  /*package*/ final ConceptDescriptor myConceptIntervalSymbolClassPart = createDescriptorForIntervalSymbolClassPart();
  /*package*/ final ConceptDescriptor myConceptLazyPlusRegexp = createDescriptorForLazyPlusRegexp();
  /*package*/ final ConceptDescriptor myConceptLazyQuestionRegexp = createDescriptorForLazyQuestionRegexp();
  /*package*/ final ConceptDescriptor myConceptLazyStarRegexp = createDescriptorForLazyStarRegexp();
  /*package*/ final ConceptDescriptor myConceptLineEndRegexp = createDescriptorForLineEndRegexp();
  /*package*/ final ConceptDescriptor myConceptLineStartRegexp = createDescriptorForLineStartRegexp();
  /*package*/ final ConceptDescriptor myConceptLiteralReplacement = createDescriptorForLiteralReplacement();
  /*package*/ final ConceptDescriptor myConceptLookRegexp = createDescriptorForLookRegexp();
  /*package*/ final ConceptDescriptor myConceptMatchParensRegexp = createDescriptorForMatchParensRegexp();
  /*package*/ final ConceptDescriptor myConceptMatchRegexpExpression = createDescriptorForMatchRegexpExpression();
  /*package*/ final ConceptDescriptor myConceptMatchRegexpOperation = createDescriptorForMatchRegexpOperation();
  /*package*/ final ConceptDescriptor myConceptMatchRegexpStatement = createDescriptorForMatchRegexpStatement();
  /*package*/ final ConceptDescriptor myConceptMatchVariableReference = createDescriptorForMatchVariableReference();
  /*package*/ final ConceptDescriptor myConceptMatchVariableReferenceRegexp = createDescriptorForMatchVariableReferenceRegexp();
  /*package*/ final ConceptDescriptor myConceptMatchVariableReferenceReplacement = createDescriptorForMatchVariableReferenceReplacement();
  /*package*/ final ConceptDescriptor myConceptNTimesRegexp = createDescriptorForNTimesRegexp();
  /*package*/ final ConceptDescriptor myConceptNegativeLookAheadRegexp = createDescriptorForNegativeLookAheadRegexp();
  /*package*/ final ConceptDescriptor myConceptNegativeLookBehindRegexp = createDescriptorForNegativeLookBehindRegexp();
  /*package*/ final ConceptDescriptor myConceptNegativeSymbolClassRegexp = createDescriptorForNegativeSymbolClassRegexp();
  /*package*/ final ConceptDescriptor myConceptOrRegexp = createDescriptorForOrRegexp();
  /*package*/ final ConceptDescriptor myConceptParensRegexp = createDescriptorForParensRegexp();
  /*package*/ final ConceptDescriptor myConceptPlusRegexp = createDescriptorForPlusRegexp();
  /*package*/ final ConceptDescriptor myConceptPositiveLookAheadRegexp = createDescriptorForPositiveLookAheadRegexp();
  /*package*/ final ConceptDescriptor myConceptPositiveLookBehindRegexp = createDescriptorForPositiveLookBehindRegexp();
  /*package*/ final ConceptDescriptor myConceptPositiveSymbolClassRegexp = createDescriptorForPositiveSymbolClassRegexp();
  /*package*/ final ConceptDescriptor myConceptPredefinedSymbolClassDeclaration = createDescriptorForPredefinedSymbolClassDeclaration();
  /*package*/ final ConceptDescriptor myConceptPredefinedSymbolClassRegexp = createDescriptorForPredefinedSymbolClassRegexp();
  /*package*/ final ConceptDescriptor myConceptPredefinedSymbolClassSymbolClassPart = createDescriptorForPredefinedSymbolClassSymbolClassPart();
  /*package*/ final ConceptDescriptor myConceptPredefinedSymbolClasses = createDescriptorForPredefinedSymbolClasses();
  /*package*/ final ConceptDescriptor myConceptQuestionRegexp = createDescriptorForQuestionRegexp();
  /*package*/ final ConceptDescriptor myConceptRegexp = createDescriptorForRegexp();
  /*package*/ final ConceptDescriptor myConceptRegexpDeclaration = createDescriptorForRegexpDeclaration();
  /*package*/ final ConceptDescriptor myConceptRegexpDeclarationReferenceRegexp = createDescriptorForRegexpDeclarationReferenceRegexp();
  /*package*/ final ConceptDescriptor myConceptRegexpExpression = createDescriptorForRegexpExpression();
  /*package*/ final ConceptDescriptor myConceptRegexpUsingConstruction = createDescriptorForRegexpUsingConstruction();
  /*package*/ final ConceptDescriptor myConceptRegexps = createDescriptorForRegexps();
  /*package*/ final ConceptDescriptor myConceptReplaceBlock = createDescriptorForReplaceBlock();
  /*package*/ final ConceptDescriptor myConceptReplaceRegexpOperation = createDescriptorForReplaceRegexpOperation();
  /*package*/ final ConceptDescriptor myConceptReplaceWithRegexpExpression = createDescriptorForReplaceWithRegexpExpression();
  /*package*/ final ConceptDescriptor myConceptReplaceWithRegexpOperation = createDescriptorForReplaceWithRegexpOperation();
  /*package*/ final ConceptDescriptor myConceptReplacement = createDescriptorForReplacement();
  /*package*/ final ConceptDescriptor myConceptSeqRegexp = createDescriptorForSeqRegexp();
  /*package*/ final ConceptDescriptor myConceptSplitExpression = createDescriptorForSplitExpression();
  /*package*/ final ConceptDescriptor myConceptSplitOperation = createDescriptorForSplitOperation();
  /*package*/ final ConceptDescriptor myConceptStarRegexp = createDescriptorForStarRegexp();
  /*package*/ final ConceptDescriptor myConceptStringLiteralRegexp = createDescriptorForStringLiteralRegexp();
  /*package*/ final ConceptDescriptor myConceptSymbolClassPart = createDescriptorForSymbolClassPart();
  /*package*/ final ConceptDescriptor myConceptSymbolClassRegexp = createDescriptorForSymbolClassRegexp();
  /*package*/ final ConceptDescriptor myConceptSymbolClassRegexpAndPart = createDescriptorForSymbolClassRegexpAndPart();
  /*package*/ final ConceptDescriptor myConceptUnaryRegexp = createDescriptorForUnaryRegexp();
  /*package*/ final ConceptDescriptor myConceptUnicodeCharacterRegexp = createDescriptorForUnicodeCharacterRegexp();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptAtLeastNTimesRegexp.getId(), 0);
    myIndexMap.put(myConceptBinaryRegexp.getId(), 1);
    myIndexMap.put(myConceptCharacterSymbolClassPart.getId(), 2);
    myIndexMap.put(myConceptDotRegexp.getId(), 3);
    myIndexMap.put(myConceptFindMatchExpression.getId(), 4);
    myIndexMap.put(myConceptFindMatchStatement.getId(), 5);
    myIndexMap.put(myConceptForEachMatchStatement.getId(), 6);
    myIndexMap.put(myConceptFromNToMTimesRegexp.getId(), 7);
    myIndexMap.put(myConceptInlineRegexpExpression.getId(), 8);
    myIndexMap.put(myConceptIntersectionSymbolClassPart.getId(), 9);
    myIndexMap.put(myConceptIntervalSymbolClassPart.getId(), 10);
    myIndexMap.put(myConceptLazyPlusRegexp.getId(), 11);
    myIndexMap.put(myConceptLazyQuestionRegexp.getId(), 12);
    myIndexMap.put(myConceptLazyStarRegexp.getId(), 13);
    myIndexMap.put(myConceptLineEndRegexp.getId(), 14);
    myIndexMap.put(myConceptLineStartRegexp.getId(), 15);
    myIndexMap.put(myConceptLiteralReplacement.getId(), 16);
    myIndexMap.put(myConceptLookRegexp.getId(), 17);
    myIndexMap.put(myConceptMatchParensRegexp.getId(), 18);
    myIndexMap.put(myConceptMatchRegexpExpression.getId(), 19);
    myIndexMap.put(myConceptMatchRegexpOperation.getId(), 20);
    myIndexMap.put(myConceptMatchRegexpStatement.getId(), 21);
    myIndexMap.put(myConceptMatchVariableReference.getId(), 22);
    myIndexMap.put(myConceptMatchVariableReferenceRegexp.getId(), 23);
    myIndexMap.put(myConceptMatchVariableReferenceReplacement.getId(), 24);
    myIndexMap.put(myConceptNTimesRegexp.getId(), 25);
    myIndexMap.put(myConceptNegativeLookAheadRegexp.getId(), 26);
    myIndexMap.put(myConceptNegativeLookBehindRegexp.getId(), 27);
    myIndexMap.put(myConceptNegativeSymbolClassRegexp.getId(), 28);
    myIndexMap.put(myConceptOrRegexp.getId(), 29);
    myIndexMap.put(myConceptParensRegexp.getId(), 30);
    myIndexMap.put(myConceptPlusRegexp.getId(), 31);
    myIndexMap.put(myConceptPositiveLookAheadRegexp.getId(), 32);
    myIndexMap.put(myConceptPositiveLookBehindRegexp.getId(), 33);
    myIndexMap.put(myConceptPositiveSymbolClassRegexp.getId(), 34);
    myIndexMap.put(myConceptPredefinedSymbolClassDeclaration.getId(), 35);
    myIndexMap.put(myConceptPredefinedSymbolClassRegexp.getId(), 36);
    myIndexMap.put(myConceptPredefinedSymbolClassSymbolClassPart.getId(), 37);
    myIndexMap.put(myConceptPredefinedSymbolClasses.getId(), 38);
    myIndexMap.put(myConceptQuestionRegexp.getId(), 39);
    myIndexMap.put(myConceptRegexp.getId(), 40);
    myIndexMap.put(myConceptRegexpDeclaration.getId(), 41);
    myIndexMap.put(myConceptRegexpDeclarationReferenceRegexp.getId(), 42);
    myIndexMap.put(myConceptRegexpExpression.getId(), 43);
    myIndexMap.put(myConceptRegexpUsingConstruction.getId(), 44);
    myIndexMap.put(myConceptRegexps.getId(), 45);
    myIndexMap.put(myConceptReplaceBlock.getId(), 46);
    myIndexMap.put(myConceptReplaceRegexpOperation.getId(), 47);
    myIndexMap.put(myConceptReplaceWithRegexpExpression.getId(), 48);
    myIndexMap.put(myConceptReplaceWithRegexpOperation.getId(), 49);
    myIndexMap.put(myConceptReplacement.getId(), 50);
    myIndexMap.put(myConceptSeqRegexp.getId(), 51);
    myIndexMap.put(myConceptSplitExpression.getId(), 52);
    myIndexMap.put(myConceptSplitOperation.getId(), 53);
    myIndexMap.put(myConceptStarRegexp.getId(), 54);
    myIndexMap.put(myConceptStringLiteralRegexp.getId(), 55);
    myIndexMap.put(myConceptSymbolClassPart.getId(), 56);
    myIndexMap.put(myConceptSymbolClassRegexp.getId(), 57);
    myIndexMap.put(myConceptSymbolClassRegexpAndPart.getId(), 58);
    myIndexMap.put(myConceptUnaryRegexp.getId(), 59);
    myIndexMap.put(myConceptUnicodeCharacterRegexp.getId(), 60);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAtLeastNTimesRegexp, myConceptBinaryRegexp, myConceptCharacterSymbolClassPart, myConceptDotRegexp, myConceptFindMatchExpression, myConceptFindMatchStatement, myConceptForEachMatchStatement, myConceptFromNToMTimesRegexp, myConceptInlineRegexpExpression, myConceptIntersectionSymbolClassPart, myConceptIntervalSymbolClassPart, myConceptLazyPlusRegexp, myConceptLazyQuestionRegexp, myConceptLazyStarRegexp, myConceptLineEndRegexp, myConceptLineStartRegexp, myConceptLiteralReplacement, myConceptLookRegexp, myConceptMatchParensRegexp, myConceptMatchRegexpExpression, myConceptMatchRegexpOperation, myConceptMatchRegexpStatement, myConceptMatchVariableReference, myConceptMatchVariableReferenceRegexp, myConceptMatchVariableReferenceReplacement, myConceptNTimesRegexp, myConceptNegativeLookAheadRegexp, myConceptNegativeLookBehindRegexp, myConceptNegativeSymbolClassRegexp, myConceptOrRegexp, myConceptParensRegexp, myConceptPlusRegexp, myConceptPositiveLookAheadRegexp, myConceptPositiveLookBehindRegexp, myConceptPositiveSymbolClassRegexp, myConceptPredefinedSymbolClassDeclaration, myConceptPredefinedSymbolClassRegexp, myConceptPredefinedSymbolClassSymbolClassPart, myConceptPredefinedSymbolClasses, myConceptQuestionRegexp, myConceptRegexp, myConceptRegexpDeclaration, myConceptRegexpDeclarationReferenceRegexp, myConceptRegexpExpression, myConceptRegexpUsingConstruction, myConceptRegexps, myConceptReplaceBlock, myConceptReplaceRegexpOperation, myConceptReplaceWithRegexpExpression, myConceptReplaceWithRegexpOperation, myConceptReplacement, myConceptSeqRegexp, myConceptSplitExpression, myConceptSplitOperation, myConceptStarRegexp, myConceptStringLiteralRegexp, myConceptSymbolClassPart, myConceptSymbolClassRegexp, myConceptSymbolClassRegexpAndPart, myConceptUnaryRegexp, myConceptUnicodeCharacterRegexp);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptAtLeastNTimesRegexp;
      case 1:
        return myConceptBinaryRegexp;
      case 2:
        return myConceptCharacterSymbolClassPart;
      case 3:
        return myConceptDotRegexp;
      case 4:
        return myConceptFindMatchExpression;
      case 5:
        return myConceptFindMatchStatement;
      case 6:
        return myConceptForEachMatchStatement;
      case 7:
        return myConceptFromNToMTimesRegexp;
      case 8:
        return myConceptInlineRegexpExpression;
      case 9:
        return myConceptIntersectionSymbolClassPart;
      case 10:
        return myConceptIntervalSymbolClassPart;
      case 11:
        return myConceptLazyPlusRegexp;
      case 12:
        return myConceptLazyQuestionRegexp;
      case 13:
        return myConceptLazyStarRegexp;
      case 14:
        return myConceptLineEndRegexp;
      case 15:
        return myConceptLineStartRegexp;
      case 16:
        return myConceptLiteralReplacement;
      case 17:
        return myConceptLookRegexp;
      case 18:
        return myConceptMatchParensRegexp;
      case 19:
        return myConceptMatchRegexpExpression;
      case 20:
        return myConceptMatchRegexpOperation;
      case 21:
        return myConceptMatchRegexpStatement;
      case 22:
        return myConceptMatchVariableReference;
      case 23:
        return myConceptMatchVariableReferenceRegexp;
      case 24:
        return myConceptMatchVariableReferenceReplacement;
      case 25:
        return myConceptNTimesRegexp;
      case 26:
        return myConceptNegativeLookAheadRegexp;
      case 27:
        return myConceptNegativeLookBehindRegexp;
      case 28:
        return myConceptNegativeSymbolClassRegexp;
      case 29:
        return myConceptOrRegexp;
      case 30:
        return myConceptParensRegexp;
      case 31:
        return myConceptPlusRegexp;
      case 32:
        return myConceptPositiveLookAheadRegexp;
      case 33:
        return myConceptPositiveLookBehindRegexp;
      case 34:
        return myConceptPositiveSymbolClassRegexp;
      case 35:
        return myConceptPredefinedSymbolClassDeclaration;
      case 36:
        return myConceptPredefinedSymbolClassRegexp;
      case 37:
        return myConceptPredefinedSymbolClassSymbolClassPart;
      case 38:
        return myConceptPredefinedSymbolClasses;
      case 39:
        return myConceptQuestionRegexp;
      case 40:
        return myConceptRegexp;
      case 41:
        return myConceptRegexpDeclaration;
      case 42:
        return myConceptRegexpDeclarationReferenceRegexp;
      case 43:
        return myConceptRegexpExpression;
      case 44:
        return myConceptRegexpUsingConstruction;
      case 45:
        return myConceptRegexps;
      case 46:
        return myConceptReplaceBlock;
      case 47:
        return myConceptReplaceRegexpOperation;
      case 48:
        return myConceptReplaceWithRegexpExpression;
      case 49:
        return myConceptReplaceWithRegexpOperation;
      case 50:
        return myConceptReplacement;
      case 51:
        return myConceptSeqRegexp;
      case 52:
        return myConceptSplitExpression;
      case 53:
        return myConceptSplitOperation;
      case 54:
        return myConceptStarRegexp;
      case 55:
        return myConceptStringLiteralRegexp;
      case 56:
        return myConceptSymbolClassPart;
      case 57:
        return myConceptSymbolClassRegexp;
      case 58:
        return myConceptSymbolClassRegexpAndPart;
      case 59:
        return myConceptUnaryRegexp;
      case 60:
        return myConceptUnicodeCharacterRegexp;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForAtLeastNTimesRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "AtLeastNTimesRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118dc30ee2L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174904442594");
    b.prop("n", 0x1118dc39835L, "1174904477749");
    b.alias("{n,}");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBinaryRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "BinaryRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c56bf9L);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174485167097");
    b.aggregate("left", 0x11174c59241L).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL).optional(false).ordered(true).multiple(false).origin("1174485176897").done();
    b.aggregate("right", 0x11174c5a26fL).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL).optional(false).ordered(true).multiple(false).origin("1174485181039").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCharacterSymbolClassPart() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "CharacterSymbolClassPart", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791ae82fL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174557878319");
    b.prop("character", 0x111791b0b58L, "1174557887320");
    b.alias("'");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDotRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "DotRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111790aa926L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174556813606");
    b.alias(".");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFindMatchExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "FindMatchExpression", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x550fbf4ebc5de3f5L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.parent(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/6129327962763158517");
    b.aggregate("inputExpression", 0x550fbf4ebc5f5df9L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("6129327962763255289").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("=~");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFindMatchStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "FindMatchStatement", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1119d8807a3L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Statement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L);
    b.parent(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1175169009571");
    b.aggregate("expr", 0x1119d883fbcL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("1175169023932").done();
    b.aggregate("body", 0x1119d8a3c40L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L).optional(false).ordered(true).multiple(false).origin("1175169154112").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("if (expr =~ regex) {");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForForEachMatchStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "ForEachMatchStatement", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1119caff72eL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Statement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L);
    b.parent(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1175154849582");
    b.aggregate("expr", 0x1119cb06facL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("1175154880428").done();
    b.aggregate("body", 0x1119cb172e6L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L).optional(false).ordered(true).multiple(false).origin("1175154946790").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("while (expr =~ regex) {");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFromNToMTimesRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "FromNToMTimesRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118dc58c6eL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174904605806");
    b.prop("n", 0x1118dc5bf75L, "1174904618869");
    b.prop("m", 0x1118dc5ca73L, "1174904621683");
    b.alias("{n,m}");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInlineRegexpExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "InlineRegexpExpression", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117648961dL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.RegexpExpression", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118ea37105L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174510540317");
    b.prop("dotAll", 0x1119cedcf38L, "1175158902584");
    b.prop("multiLine", 0x1119ceddfe3L, "1175158906851");
    b.prop("caseInsensitive", 0x1119cf15020L, "1175159132192");
    b.aggregate("regexp", 0x11176490e08L).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL).optional(false).ordered(true).multiple(false).origin("1174510571016").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("/regexp/");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntersectionSymbolClassPart() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "IntersectionSymbolClassPart", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c0ef7f429L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1220021842985");
    b.aggregate("left", 0x11c22e34d8eL).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c22ec8f79L).optional(false).ordered(true).multiple(false).origin("1220356033934").done();
    b.aggregate("right", 0x11c22e2e56cL).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c22ec8f79L).optional(false).ordered(true).multiple(false).origin("1220356007276").done();
    b.alias("&&");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntervalSymbolClassPart() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "IntervalSymbolClassPart", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11179215e8bL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174558301835");
    b.prop("start", 0x1117921931aL, "1174558315290");
    b.prop("end", 0x11179219cfeL, "1174558317822");
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLazyPlusRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "LazyPlusRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117f38e076L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174660505718");
    b.alias("+?");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLazyQuestionRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "LazyQuestionRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117f394b67L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174660533095");
    b.alias("??");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLazyStarRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "LazyStarRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117f383367L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174660461415");
    b.alias("*?");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLineEndRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "LineEndRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1119d126564L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1175161300324");
    b.alias("$");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLineStartRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "LineStartRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1119d11da7eL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1175161264766");
    b.alias("^");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLiteralReplacement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "LiteralReplacement", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab94cL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Replacement", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab952L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/3796137614137538892");
    b.prop("text", 0x34ae970c192b203bL, "3796137614137565243");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLookRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "LookRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de32185L);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174906544517");
    b.aggregate("regexp", 0x1118de377b8L).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL).optional(false).ordered(true).multiple(false).origin("1174906566584").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMatchParensRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "MatchParensRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111797946c7L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11cfb3b82a4L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174564062919");
    b.aggregate("regexp", 0x111797ac579L).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL).optional(false).ordered(true).multiple(false).origin("1174564160889").done();
    b.alias("(name:");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMatchRegexpExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "MatchRegexpExpression", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x112972a0c32L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.parent(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1179357154354");
    b.aggregate("inputExpression", 0x112972c11f2L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("1179357286898").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("matches");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMatchRegexpOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "MatchRegexpOperation", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c9466ae95L);
    b.class_(false, false, false);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L);
    b.parent(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1222260469397");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("matches");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMatchRegexpStatement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "MatchRegexpStatement", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11176652f14L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Statement", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L);
    b.parent(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174512414484");
    b.aggregate("body", 0x1117665624aL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L).optional(false).ordered(true).multiple(false).origin("1174512427594").done();
    b.aggregate("expr", 0x11176678c5eL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("1174512569438").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("if (expr matches regexp) {");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMatchVariableReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "MatchVariableReference", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117987ff5eL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174565027678");
    b.associate("match", 0x11179881f99L).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111797946c7L).optional(false).origin("1174565035929").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMatchVariableReferenceRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "MatchVariableReferenceRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118e0a1c55L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174909099093");
    b.associate("match", 0x1118e0a5335L).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111797946c7L).optional(false).origin("1174909113141").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMatchVariableReferenceReplacement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "MatchVariableReferenceReplacement", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab94eL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Replacement", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab952L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/3796137614137538894");
    b.associate("match", 0x34ae970c192abbc5L).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111797946c7L).optional(false).origin("3796137614137539525").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNTimesRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "NTimesRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118dbeda57L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174904166999");
    b.prop("n", 0x1118dbf202dL, "1174904184877");
    b.alias("{n}");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNegativeLookAheadRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "NegativeLookAheadRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de1f935L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de32185L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174906468661");
    b.alias("(?!");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNegativeLookBehindRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "NegativeLookBehindRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de6e3f6L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de32185L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174906790902");
    b.alias("(?<!");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNegativeSymbolClassRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "NegativeSymbolClassRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e35c63L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e2916aL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174554238051");
    b.alias("[^");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOrRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "OrRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a0d780L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c56bf9L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174482769792");
    b.alias("|");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParensRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "ParensRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111752101b0L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174491169200");
    b.aggregate("expr", 0x1117521177bL).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL).optional(false).ordered(true).multiple(false).origin("1174491174779").done();
    b.alias("(");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlusRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "PlusRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a15de8L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174482804200");
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPositiveLookAheadRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "PositiveLookAheadRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118ddfb973L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de32185L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174906321267");
    b.alias("(?=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPositiveLookBehindRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "PositiveLookBehindRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de6742fL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de32185L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174906762287");
    b.alias("(?<=");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPositiveSymbolClassRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "PositiveSymbolClassRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e2f48cL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e2916aL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174554211468");
    b.alias("[");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPredefinedSymbolClassDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "PredefinedSymbolClassDeclaration", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e59fd0L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174554386384");
    b.prop("description", 0x11178e7fa54L, "1174554540628");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPredefinedSymbolClassRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "PredefinedSymbolClassRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178fa2a18L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174555732504");
    b.associate("symbolClass", 0x11178fbdc7dL).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e59fd0L).optional(false).origin("1174555843709").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPredefinedSymbolClassSymbolClassPart() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "PredefinedSymbolClassSymbolClassPart", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117928d9f2L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174558792178");
    b.associate("declaration", 0x111792942ceL).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e59fd0L).optional(false).origin("1174558819022").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPredefinedSymbolClasses() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "PredefinedSymbolClasses", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e5efc7L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174554406855");
    b.aggregate("symbolClass", 0x11178e61ee7L).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e59fd0L).optional(true).ordered(true).multiple(true).origin("1174554418919").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForQuestionRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "QuestionRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178c4e1e0L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174552240608");
    b.alias("?");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "Regexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL);
    b.class_(false, true, false);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174482743037");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRegexpDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "RegexpDeclaration", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a6454dL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174483125581");
    b.prop("description", 0x1117f5e9a48L, "1174662978120");
    b.aggregate("regexp", 0x11174a66599L).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL).optional(false).ordered(true).multiple(false).origin("1174483133849").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRegexpDeclarationReferenceRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "RegexpDeclarationReferenceRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117f58ea2aL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174662605354");
    b.associate("regexp", 0x1117f594636L).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a6454dL).optional(false).origin("1174662628918").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRegexpExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "RegexpExpression", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118ea37105L);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174919147781");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRegexpUsingConstruction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "RegexpUsingConstruction", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL);
    b.interface_();
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174653354106");
    b.aggregate("regexp", 0x1117ecc427cL).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118ea37105L).optional(false).ordered(true).multiple(false).origin("1174653387388").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRegexps() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "Regexps", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117f550b6dL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174662351725");
    b.aggregate("regexp", 0x1117f554ef2L).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a6454dL).optional(true).ordered(true).multiple(true).origin("1174662369010").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReplaceBlock() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "ReplaceBlock", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ef80054L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Closure", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c63f4f3f3L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174656254036");
    b.kind(ConceptKind.INTERFACE, StaticScope.NONE);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReplaceRegexpOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "ReplaceRegexpOperation", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c1923d18aL);
    b.class_(false, false, false);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/3796137614137086346");
    b.prop("dotAll", 0x34ae970c1924ee66L, "3796137614137159270");
    b.prop("multiLine", 0x34ae970c1924ee67L, "3796137614137159271");
    b.prop("caseInsensitive", 0x34ae970c1924ee68L, "3796137614137159272");
    b.prop("globalReplace", 0x34ae970c1924ee69L, "3796137614137159273");
    b.aggregate("search", 0x34ae970c1924ee3bL).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL).optional(false).ordered(true).multiple(false).origin("3796137614137159227").done();
    b.aggregate("replacement", 0x34ae970c1923d18bL).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab952L).optional(true).ordered(true).multiple(true).origin("3796137614137086347").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("s/regexp/replacement/");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReplaceWithRegexpExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "ReplaceWithRegexpExpression", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ef3f72dL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.parent(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174655989549");
    b.aggregate("expr", 0x1117ef5b26bL).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("1174656103019").done();
    b.aggregate("replaceBlock", 0x1117ef94e0cL).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ef80054L).optional(false).ordered(true).multiple(false).origin("1174656339468").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("replace with regexp");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReplaceWithRegexpOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "ReplaceWithRegexpOperation", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c94680172L);
    b.class_(false, false, false);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L);
    b.parent(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1222260556146");
    b.aggregate("replaceBlock", 0x11c946f4847L).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ef80054L).optional(false).ordered(true).multiple(false).origin("1222261033031").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("replace with");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReplacement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "Replacement", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab952L);
    b.class_(false, true, false);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/3796137614137538898");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSeqRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "SeqRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174bc30e7L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c56bf9L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174484562151");
    b.alias("seq");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSplitExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "SplitExpression", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1119d41c734L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.structure.Expression", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL);
    b.parent(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1175164405556");
    b.aggregate("expr", 0x1119d425aa1L).target(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL).optional(false).ordered(true).multiple(false).origin("1175164443297").done();
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("split with");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSplitOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "SplitOperation", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c942ab86bL);
    b.class_(false, false, false);
    b.parent(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L);
    b.parent(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1222256539755");
    b.kind(ConceptKind.NORMAL, StaticScope.NONE);
    b.alias("split with");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStarRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "StarRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a16ffaL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174482808826");
    b.alias("*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringLiteralRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "StringLiteralRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a0992dL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174482753837");
    b.prop("text", 0x11174a0b84fL, "1174482761807");
    b.alias("'");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSymbolClassPart() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "SymbolClassPart", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L);
    b.class_(false, true, false);
    b.parent(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c22ec8f79L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174557861378");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSymbolClassRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "SymbolClassRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e2916aL);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL);
    b.parent(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c22ec8f79L);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174554186090");
    b.aggregate("part", 0x11179171739L).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L).optional(true).ordered(true).multiple(true).origin("1174557628217").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSymbolClassRegexpAndPart() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "SymbolClassRegexpAndPart", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c22ec8f79L);
    b.interface_();
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1220356640633");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnaryRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "UnaryRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1174485235885");
    b.aggregate("regexp", 0x11174c6961aL).target(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL).optional(false).ordered(true).multiple(false).origin("1174485243418").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForUnicodeCharacterRegexp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.baseLanguage.regexp", "UnicodeCharacterRegexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11831260718L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp", 0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL);
    b.origin("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)/1203415418648");
    b.prop("code", 0x1183127443bL, "1203415499835");
    b.alias("\\uhhhh");
    return b.create();
  }
}
