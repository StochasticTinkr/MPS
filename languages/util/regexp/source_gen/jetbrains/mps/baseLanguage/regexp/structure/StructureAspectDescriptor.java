package jetbrains.mps.baseLanguage.regexp.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(61);
  /*package*/ final ConceptDescriptor myConceptAtLeastNTimesRegexp = createDescriptorForAtLeastNTimesRegexp();
  /*package*/ final ConceptDescriptor myConceptBinaryRegexp = createDescriptorForBinaryRegexp();
  /*package*/ final ConceptDescriptor myConceptCharacterSymbolClassPart = createDescriptorForCharacterSymbolClassPart();
  /*package*/ final ConceptDescriptor myConceptDotRegexp = createDescriptorForDotRegexp();
  /*package*/ final ConceptDescriptor myConceptFindMatchExpression = createDescriptorForFindMatchExpression();
  /*package*/ final ConceptDescriptor myConceptFindMatchStatement = createDescriptorForFindMatchStatement();
  /*package*/ final ConceptDescriptor myConceptForEachMatchStatement = createDescriptorForForEachMatchStatement();
  /*package*/ final ConceptDescriptor myConceptFromNToMTimesRegexp = createDescriptorForFromNToMTimesRegexp();
  /*package*/ final ConceptDescriptor myConceptInlineRegexpExpression = createDescriptorForInlineRegexpExpression();
  /*package*/ final ConceptDescriptor myConceptIntersectionSymbolClassPart = createDescriptorForIntersectionSymbolClassPart();
  /*package*/ final ConceptDescriptor myConceptIntervalSymbolClassPart = createDescriptorForIntervalSymbolClassPart();
  /*package*/ final ConceptDescriptor myConceptLazyPlusRegexp = createDescriptorForLazyPlusRegexp();
  /*package*/ final ConceptDescriptor myConceptLazyQuestionRegexp = createDescriptorForLazyQuestionRegexp();
  /*package*/ final ConceptDescriptor myConceptLazyStarRegexp = createDescriptorForLazyStarRegexp();
  /*package*/ final ConceptDescriptor myConceptLineEndRegexp = createDescriptorForLineEndRegexp();
  /*package*/ final ConceptDescriptor myConceptLineStartRegexp = createDescriptorForLineStartRegexp();
  /*package*/ final ConceptDescriptor myConceptLiteralReplacement = createDescriptorForLiteralReplacement();
  /*package*/ final ConceptDescriptor myConceptLookRegexp = createDescriptorForLookRegexp();
  /*package*/ final ConceptDescriptor myConceptMatchParensRegexp = createDescriptorForMatchParensRegexp();
  /*package*/ final ConceptDescriptor myConceptMatchRegexpExpression = createDescriptorForMatchRegexpExpression();
  /*package*/ final ConceptDescriptor myConceptMatchRegexpOperation = createDescriptorForMatchRegexpOperation();
  /*package*/ final ConceptDescriptor myConceptMatchRegexpStatement = createDescriptorForMatchRegexpStatement();
  /*package*/ final ConceptDescriptor myConceptMatchVariableReference = createDescriptorForMatchVariableReference();
  /*package*/ final ConceptDescriptor myConceptMatchVariableReferenceRegexp = createDescriptorForMatchVariableReferenceRegexp();
  /*package*/ final ConceptDescriptor myConceptMatchVariableReferenceReplacement = createDescriptorForMatchVariableReferenceReplacement();
  /*package*/ final ConceptDescriptor myConceptNTimesRegexp = createDescriptorForNTimesRegexp();
  /*package*/ final ConceptDescriptor myConceptNegativeLookAheadRegexp = createDescriptorForNegativeLookAheadRegexp();
  /*package*/ final ConceptDescriptor myConceptNegativeLookBehindRegexp = createDescriptorForNegativeLookBehindRegexp();
  /*package*/ final ConceptDescriptor myConceptNegativeSymbolClassRegexp = createDescriptorForNegativeSymbolClassRegexp();
  /*package*/ final ConceptDescriptor myConceptOrRegexp = createDescriptorForOrRegexp();
  /*package*/ final ConceptDescriptor myConceptParensRegexp = createDescriptorForParensRegexp();
  /*package*/ final ConceptDescriptor myConceptPlusRegexp = createDescriptorForPlusRegexp();
  /*package*/ final ConceptDescriptor myConceptPositiveLookAheadRegexp = createDescriptorForPositiveLookAheadRegexp();
  /*package*/ final ConceptDescriptor myConceptPositiveLookBehindRegexp = createDescriptorForPositiveLookBehindRegexp();
  /*package*/ final ConceptDescriptor myConceptPositiveSymbolClassRegexp = createDescriptorForPositiveSymbolClassRegexp();
  /*package*/ final ConceptDescriptor myConceptPredefinedSymbolClassDeclaration = createDescriptorForPredefinedSymbolClassDeclaration();
  /*package*/ final ConceptDescriptor myConceptPredefinedSymbolClassRegexp = createDescriptorForPredefinedSymbolClassRegexp();
  /*package*/ final ConceptDescriptor myConceptPredefinedSymbolClassSymbolClassPart = createDescriptorForPredefinedSymbolClassSymbolClassPart();
  /*package*/ final ConceptDescriptor myConceptPredefinedSymbolClasses = createDescriptorForPredefinedSymbolClasses();
  /*package*/ final ConceptDescriptor myConceptQuestionRegexp = createDescriptorForQuestionRegexp();
  /*package*/ final ConceptDescriptor myConceptRegexp = createDescriptorForRegexp();
  /*package*/ final ConceptDescriptor myConceptRegexpDeclaration = createDescriptorForRegexpDeclaration();
  /*package*/ final ConceptDescriptor myConceptRegexpDeclarationReferenceRegexp = createDescriptorForRegexpDeclarationReferenceRegexp();
  /*package*/ final ConceptDescriptor myConceptRegexpExpression = createDescriptorForRegexpExpression();
  /*package*/ final ConceptDescriptor myConceptRegexpUsingConstruction = createDescriptorForRegexpUsingConstruction();
  /*package*/ final ConceptDescriptor myConceptRegexps = createDescriptorForRegexps();
  /*package*/ final ConceptDescriptor myConceptReplaceBlock = createDescriptorForReplaceBlock();
  /*package*/ final ConceptDescriptor myConceptReplaceRegexpOperation = createDescriptorForReplaceRegexpOperation();
  /*package*/ final ConceptDescriptor myConceptReplaceWithRegexpExpression = createDescriptorForReplaceWithRegexpExpression();
  /*package*/ final ConceptDescriptor myConceptReplaceWithRegexpOperation = createDescriptorForReplaceWithRegexpOperation();
  /*package*/ final ConceptDescriptor myConceptReplacement = createDescriptorForReplacement();
  /*package*/ final ConceptDescriptor myConceptSeqRegexp = createDescriptorForSeqRegexp();
  /*package*/ final ConceptDescriptor myConceptSplitExpression = createDescriptorForSplitExpression();
  /*package*/ final ConceptDescriptor myConceptSplitOperation = createDescriptorForSplitOperation();
  /*package*/ final ConceptDescriptor myConceptStarRegexp = createDescriptorForStarRegexp();
  /*package*/ final ConceptDescriptor myConceptStringLiteralRegexp = createDescriptorForStringLiteralRegexp();
  /*package*/ final ConceptDescriptor myConceptSymbolClassPart = createDescriptorForSymbolClassPart();
  /*package*/ final ConceptDescriptor myConceptSymbolClassRegexp = createDescriptorForSymbolClassRegexp();
  /*package*/ final ConceptDescriptor myConceptSymbolClassRegexpAndPart = createDescriptorForSymbolClassRegexpAndPart();
  /*package*/ final ConceptDescriptor myConceptUnaryRegexp = createDescriptorForUnaryRegexp();
  /*package*/ final ConceptDescriptor myConceptUnicodeCharacterRegexp = createDescriptorForUnicodeCharacterRegexp();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptAtLeastNTimesRegexp.getId(), 0);
    myIndexMap.put(myConceptBinaryRegexp.getId(), 1);
    myIndexMap.put(myConceptCharacterSymbolClassPart.getId(), 2);
    myIndexMap.put(myConceptDotRegexp.getId(), 3);
    myIndexMap.put(myConceptFindMatchExpression.getId(), 4);
    myIndexMap.put(myConceptFindMatchStatement.getId(), 5);
    myIndexMap.put(myConceptForEachMatchStatement.getId(), 6);
    myIndexMap.put(myConceptFromNToMTimesRegexp.getId(), 7);
    myIndexMap.put(myConceptInlineRegexpExpression.getId(), 8);
    myIndexMap.put(myConceptIntersectionSymbolClassPart.getId(), 9);
    myIndexMap.put(myConceptIntervalSymbolClassPart.getId(), 10);
    myIndexMap.put(myConceptLazyPlusRegexp.getId(), 11);
    myIndexMap.put(myConceptLazyQuestionRegexp.getId(), 12);
    myIndexMap.put(myConceptLazyStarRegexp.getId(), 13);
    myIndexMap.put(myConceptLineEndRegexp.getId(), 14);
    myIndexMap.put(myConceptLineStartRegexp.getId(), 15);
    myIndexMap.put(myConceptLiteralReplacement.getId(), 16);
    myIndexMap.put(myConceptLookRegexp.getId(), 17);
    myIndexMap.put(myConceptMatchParensRegexp.getId(), 18);
    myIndexMap.put(myConceptMatchRegexpExpression.getId(), 19);
    myIndexMap.put(myConceptMatchRegexpOperation.getId(), 20);
    myIndexMap.put(myConceptMatchRegexpStatement.getId(), 21);
    myIndexMap.put(myConceptMatchVariableReference.getId(), 22);
    myIndexMap.put(myConceptMatchVariableReferenceRegexp.getId(), 23);
    myIndexMap.put(myConceptMatchVariableReferenceReplacement.getId(), 24);
    myIndexMap.put(myConceptNTimesRegexp.getId(), 25);
    myIndexMap.put(myConceptNegativeLookAheadRegexp.getId(), 26);
    myIndexMap.put(myConceptNegativeLookBehindRegexp.getId(), 27);
    myIndexMap.put(myConceptNegativeSymbolClassRegexp.getId(), 28);
    myIndexMap.put(myConceptOrRegexp.getId(), 29);
    myIndexMap.put(myConceptParensRegexp.getId(), 30);
    myIndexMap.put(myConceptPlusRegexp.getId(), 31);
    myIndexMap.put(myConceptPositiveLookAheadRegexp.getId(), 32);
    myIndexMap.put(myConceptPositiveLookBehindRegexp.getId(), 33);
    myIndexMap.put(myConceptPositiveSymbolClassRegexp.getId(), 34);
    myIndexMap.put(myConceptPredefinedSymbolClassDeclaration.getId(), 35);
    myIndexMap.put(myConceptPredefinedSymbolClassRegexp.getId(), 36);
    myIndexMap.put(myConceptPredefinedSymbolClassSymbolClassPart.getId(), 37);
    myIndexMap.put(myConceptPredefinedSymbolClasses.getId(), 38);
    myIndexMap.put(myConceptQuestionRegexp.getId(), 39);
    myIndexMap.put(myConceptRegexp.getId(), 40);
    myIndexMap.put(myConceptRegexpDeclaration.getId(), 41);
    myIndexMap.put(myConceptRegexpDeclarationReferenceRegexp.getId(), 42);
    myIndexMap.put(myConceptRegexpExpression.getId(), 43);
    myIndexMap.put(myConceptRegexpUsingConstruction.getId(), 44);
    myIndexMap.put(myConceptRegexps.getId(), 45);
    myIndexMap.put(myConceptReplaceBlock.getId(), 46);
    myIndexMap.put(myConceptReplaceRegexpOperation.getId(), 47);
    myIndexMap.put(myConceptReplaceWithRegexpExpression.getId(), 48);
    myIndexMap.put(myConceptReplaceWithRegexpOperation.getId(), 49);
    myIndexMap.put(myConceptReplacement.getId(), 50);
    myIndexMap.put(myConceptSeqRegexp.getId(), 51);
    myIndexMap.put(myConceptSplitExpression.getId(), 52);
    myIndexMap.put(myConceptSplitOperation.getId(), 53);
    myIndexMap.put(myConceptStarRegexp.getId(), 54);
    myIndexMap.put(myConceptStringLiteralRegexp.getId(), 55);
    myIndexMap.put(myConceptSymbolClassPart.getId(), 56);
    myIndexMap.put(myConceptSymbolClassRegexp.getId(), 57);
    myIndexMap.put(myConceptSymbolClassRegexpAndPart.getId(), 58);
    myIndexMap.put(myConceptUnaryRegexp.getId(), 59);
    myIndexMap.put(myConceptUnicodeCharacterRegexp.getId(), 60);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAtLeastNTimesRegexp, myConceptBinaryRegexp, myConceptCharacterSymbolClassPart, myConceptDotRegexp, myConceptFindMatchExpression, myConceptFindMatchStatement, myConceptForEachMatchStatement, myConceptFromNToMTimesRegexp, myConceptInlineRegexpExpression, myConceptIntersectionSymbolClassPart, myConceptIntervalSymbolClassPart, myConceptLazyPlusRegexp, myConceptLazyQuestionRegexp, myConceptLazyStarRegexp, myConceptLineEndRegexp, myConceptLineStartRegexp, myConceptLiteralReplacement, myConceptLookRegexp, myConceptMatchParensRegexp, myConceptMatchRegexpExpression, myConceptMatchRegexpOperation, myConceptMatchRegexpStatement, myConceptMatchVariableReference, myConceptMatchVariableReferenceRegexp, myConceptMatchVariableReferenceReplacement, myConceptNTimesRegexp, myConceptNegativeLookAheadRegexp, myConceptNegativeLookBehindRegexp, myConceptNegativeSymbolClassRegexp, myConceptOrRegexp, myConceptParensRegexp, myConceptPlusRegexp, myConceptPositiveLookAheadRegexp, myConceptPositiveLookBehindRegexp, myConceptPositiveSymbolClassRegexp, myConceptPredefinedSymbolClassDeclaration, myConceptPredefinedSymbolClassRegexp, myConceptPredefinedSymbolClassSymbolClassPart, myConceptPredefinedSymbolClasses, myConceptQuestionRegexp, myConceptRegexp, myConceptRegexpDeclaration, myConceptRegexpDeclarationReferenceRegexp, myConceptRegexpExpression, myConceptRegexpUsingConstruction, myConceptRegexps, myConceptReplaceBlock, myConceptReplaceRegexpOperation, myConceptReplaceWithRegexpExpression, myConceptReplaceWithRegexpOperation, myConceptReplacement, myConceptSeqRegexp, myConceptSplitExpression, myConceptSplitOperation, myConceptStarRegexp, myConceptStringLiteralRegexp, myConceptSymbolClassPart, myConceptSymbolClassRegexp, myConceptSymbolClassRegexpAndPart, myConceptUnaryRegexp, myConceptUnicodeCharacterRegexp);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptAtLeastNTimesRegexp;
      case 1:
        return myConceptBinaryRegexp;
      case 2:
        return myConceptCharacterSymbolClassPart;
      case 3:
        return myConceptDotRegexp;
      case 4:
        return myConceptFindMatchExpression;
      case 5:
        return myConceptFindMatchStatement;
      case 6:
        return myConceptForEachMatchStatement;
      case 7:
        return myConceptFromNToMTimesRegexp;
      case 8:
        return myConceptInlineRegexpExpression;
      case 9:
        return myConceptIntersectionSymbolClassPart;
      case 10:
        return myConceptIntervalSymbolClassPart;
      case 11:
        return myConceptLazyPlusRegexp;
      case 12:
        return myConceptLazyQuestionRegexp;
      case 13:
        return myConceptLazyStarRegexp;
      case 14:
        return myConceptLineEndRegexp;
      case 15:
        return myConceptLineStartRegexp;
      case 16:
        return myConceptLiteralReplacement;
      case 17:
        return myConceptLookRegexp;
      case 18:
        return myConceptMatchParensRegexp;
      case 19:
        return myConceptMatchRegexpExpression;
      case 20:
        return myConceptMatchRegexpOperation;
      case 21:
        return myConceptMatchRegexpStatement;
      case 22:
        return myConceptMatchVariableReference;
      case 23:
        return myConceptMatchVariableReferenceRegexp;
      case 24:
        return myConceptMatchVariableReferenceReplacement;
      case 25:
        return myConceptNTimesRegexp;
      case 26:
        return myConceptNegativeLookAheadRegexp;
      case 27:
        return myConceptNegativeLookBehindRegexp;
      case 28:
        return myConceptNegativeSymbolClassRegexp;
      case 29:
        return myConceptOrRegexp;
      case 30:
        return myConceptParensRegexp;
      case 31:
        return myConceptPlusRegexp;
      case 32:
        return myConceptPositiveLookAheadRegexp;
      case 33:
        return myConceptPositiveLookBehindRegexp;
      case 34:
        return myConceptPositiveSymbolClassRegexp;
      case 35:
        return myConceptPredefinedSymbolClassDeclaration;
      case 36:
        return myConceptPredefinedSymbolClassRegexp;
      case 37:
        return myConceptPredefinedSymbolClassSymbolClassPart;
      case 38:
        return myConceptPredefinedSymbolClasses;
      case 39:
        return myConceptQuestionRegexp;
      case 40:
        return myConceptRegexp;
      case 41:
        return myConceptRegexpDeclaration;
      case 42:
        return myConceptRegexpDeclarationReferenceRegexp;
      case 43:
        return myConceptRegexpExpression;
      case 44:
        return myConceptRegexpUsingConstruction;
      case 45:
        return myConceptRegexps;
      case 46:
        return myConceptReplaceBlock;
      case 47:
        return myConceptReplaceRegexpOperation;
      case 48:
        return myConceptReplaceWithRegexpExpression;
      case 49:
        return myConceptReplaceWithRegexpOperation;
      case 50:
        return myConceptReplacement;
      case 51:
        return myConceptSeqRegexp;
      case 52:
        return myConceptSplitExpression;
      case 53:
        return myConceptSplitOperation;
      case 54:
        return myConceptStarRegexp;
      case 55:
        return myConceptStringLiteralRegexp;
      case 56:
        return myConceptSymbolClassPart;
      case 57:
        return myConceptSymbolClassRegexp;
      case 58:
        return myConceptSymbolClassRegexpAndPart;
      case 59:
        return myConceptUnaryRegexp;
      case 60:
        return myConceptUnicodeCharacterRegexp;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForAtLeastNTimesRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.AtLeastNTimesRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118dc30ee2L)).super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).parents("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1118dc39835L, "n", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174904477749"))).properties("n").alias("{n,}", "at least n times").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174904442594")).create();
  }
  private static ConceptDescriptor createDescriptorForBinaryRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c56bf9L)).super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).parents("jetbrains.mps.baseLanguage.regexp.structure.Regexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11174c59241L, "left", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174485176897")), new ConceptDescriptorBuilder.Link(0x11174c5a26fL, "right", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174485181039"))).children(new String[]{"left", "right"}, new boolean[]{false, false}).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174485167097")).create();
  }
  private static ConceptDescriptor createDescriptorForCharacterSymbolClassPart() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.CharacterSymbolClassPart", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791ae82fL)).super_("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L)).parents("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x111791b0b58L, "character", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174557887320"))).properties("character").alias("'", "character").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174557878319")).create();
  }
  private static ConceptDescriptor createDescriptorForDotRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.DotRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111790aa926L)).super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).parents("jetbrains.mps.baseLanguage.regexp.structure.Regexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).alias(".", "dot regexp (any character)").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174556813606")).create();
  }
  private static ConceptDescriptor createDescriptorForFindMatchExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.FindMatchExpression", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x550fbf4ebc5de3f5L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x550fbf4ebc5f5df9L, "inputExpression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "6129327962763255289"))).children(new String[]{"inputExpression"}, new boolean[]{false}).alias("=~", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "6129327962763158517")).create();
  }
  private static ConceptDescriptor createDescriptorForFindMatchStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.FindMatchStatement", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1119d8807a3L)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1119d883fbcL, "expr", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1175169023932")), new ConceptDescriptorBuilder.Link(0x1119d8a3c40L, "body", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1175169154112"))).children(new String[]{"expr", "body"}, new boolean[]{false, false}).alias("if (expr =~ regex) {", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1175169009571")).create();
  }
  private static ConceptDescriptor createDescriptorForForEachMatchStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.ForEachMatchStatement", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1119caff72eL)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1119cb06facL, "expr", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1175154880428")), new ConceptDescriptorBuilder.Link(0x1119cb172e6L, "body", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1175154946790"))).children(new String[]{"expr", "body"}, new boolean[]{false, false}).alias("while (expr =~ regex) {", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1175154849582")).create();
  }
  private static ConceptDescriptor createDescriptorForFromNToMTimesRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.FromNToMTimesRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118dc58c6eL)).super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).parents("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1118dc5bf75L, "n", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174904618869")), new ConceptDescriptorBuilder.Prop(0x1118dc5ca73L, "m", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174904621683"))).properties("n", "m").alias("{n,m}", "at least n but not more than m times").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174904605806")).create();
  }
  private static ConceptDescriptor createDescriptorForInlineRegexpExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.InlineRegexpExpression", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117648961dL)).super_("jetbrains.mps.baseLanguage.regexp.structure.RegexpExpression").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118ea37105L)).parents("jetbrains.mps.baseLanguage.regexp.structure.RegexpExpression").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118ea37105L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1119cedcf38L, "dotAll", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1175158902584")), new ConceptDescriptorBuilder.Prop(0x1119ceddfe3L, "multiLine", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1175158906851")), new ConceptDescriptorBuilder.Prop(0x1119cf15020L, "caseInsensitive", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1175159132192"))).properties("dotAll", "multiLine", "caseInsensitive").childDescriptors(new ConceptDescriptorBuilder.Link(0x11176490e08L, "regexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174510571016"))).children(new String[]{"regexp"}, new boolean[]{false}).alias("/regexp/", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174510540317")).create();
  }
  private static ConceptDescriptor createDescriptorForIntersectionSymbolClassPart() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.IntersectionSymbolClassPart", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c0ef7f429L)).super_("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L)).parents("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11c22e34d8eL, "left", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c22ec8f79L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1220356033934")), new ConceptDescriptorBuilder.Link(0x11c22e2e56cL, "right", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c22ec8f79L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1220356007276"))).children(new String[]{"left", "right"}, new boolean[]{false, false}).alias("&&", "intersection of classes").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1220021842985")).create();
  }
  private static ConceptDescriptor createDescriptorForIntervalSymbolClassPart() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.IntervalSymbolClassPart", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11179215e8bL)).super_("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L)).parents("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1117921931aL, "start", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174558315290")), new ConceptDescriptorBuilder.Prop(0x11179219cfeL, "end", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174558317822"))).properties("start", "end").alias("-", "character range").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174558301835")).create();
  }
  private static ConceptDescriptor createDescriptorForLazyPlusRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.LazyPlusRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117f38e076L)).super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).parents("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).alias("+?", "one or more times, reluctant").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174660505718")).create();
  }
  private static ConceptDescriptor createDescriptorForLazyQuestionRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.LazyQuestionRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117f394b67L)).super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).parents("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).alias("??", "once or not at all, reluctant").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174660533095")).create();
  }
  private static ConceptDescriptor createDescriptorForLazyStarRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.LazyStarRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117f383367L)).super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).parents("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).alias("*?", "zero or more times, reluctant").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174660461415")).create();
  }
  private static ConceptDescriptor createDescriptorForLineEndRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.LineEndRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1119d126564L)).super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).parents("jetbrains.mps.baseLanguage.regexp.structure.Regexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).alias("$", "line end").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1175161300324")).create();
  }
  private static ConceptDescriptor createDescriptorForLineStartRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.LineStartRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1119d11da7eL)).super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).parents("jetbrains.mps.baseLanguage.regexp.structure.Regexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).alias("^", "line start").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1175161264766")).create();
  }
  private static ConceptDescriptor createDescriptorForLiteralReplacement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.LiteralReplacement", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab94cL)).super_("jetbrains.mps.baseLanguage.regexp.structure.Replacement").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab952L)).parents("jetbrains.mps.baseLanguage.regexp.structure.Replacement", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab952L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x34ae970c192b203bL, "text", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "3796137614137565243"))).properties("text").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "3796137614137538892")).create();
  }
  private static ConceptDescriptor createDescriptorForLookRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de32185L)).super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).parents("jetbrains.mps.baseLanguage.regexp.structure.Regexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1118de377b8L, "regexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174906566584"))).children(new String[]{"regexp"}, new boolean[]{false}).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174906544517")).create();
  }
  private static ConceptDescriptor createDescriptorForMatchParensRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.MatchParensRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111797946c7L)).super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).parents("jetbrains.mps.baseLanguage.regexp.structure.Regexp", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.structure.IVariableAssignment", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11cfb3b82a4L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x111797ac579L, "regexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174564160889"))).children(new String[]{"regexp"}, new boolean[]{false}).alias("(name:", "matching parens").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174564062919")).create();
  }
  private static ConceptDescriptor createDescriptorForMatchRegexpExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpExpression", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x112972a0c32L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x112972c11f2L, "inputExpression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1179357286898"))).children(new String[]{"inputExpression"}, new boolean[]{false}).alias("matches", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1179357154354")).create();
  }
  private static ConceptDescriptor createDescriptorForMatchRegexpOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpOperation", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c9466ae95L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation", "jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL)).alias("matches", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1222260469397")).create();
  }
  private static ConceptDescriptor createDescriptorForMatchRegexpStatement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.MatchRegexpStatement", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11176652f14L)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement", "jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1117665624aL, "body", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b200L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174512427594")), new ConceptDescriptorBuilder.Link(0x11176678c5eL, "expr", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174512569438"))).children(new String[]{"body", "expr"}, new boolean[]{false, false}).alias("if (expr matches regexp) {", "match with regexp").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174512414484")).create();
  }
  private static ConceptDescriptor createDescriptorForMatchVariableReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReference", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117987ff5eL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x11179881f99L, "match", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111797946c7L), false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174565035929"))).references("match").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174565027678")).create();
  }
  private static ConceptDescriptor createDescriptorForMatchVariableReferenceRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118e0a1c55L)).super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).parents("jetbrains.mps.baseLanguage.regexp.structure.Regexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x1118e0a5335L, "match", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111797946c7L), false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174909113141"))).references("match").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174909099093")).create();
  }
  private static ConceptDescriptor createDescriptorForMatchVariableReferenceReplacement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.MatchVariableReferenceReplacement", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab94eL)).super_("jetbrains.mps.baseLanguage.regexp.structure.Replacement").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab952L)).parents("jetbrains.mps.baseLanguage.regexp.structure.Replacement").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab952L)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x34ae970c192abbc5L, "match", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111797946c7L), false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "3796137614137539525"))).references("match").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "3796137614137538894")).create();
  }
  private static ConceptDescriptor createDescriptorForNTimesRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.NTimesRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118dbeda57L)).super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).parents("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1118dbf202dL, "n", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174904184877"))).properties("n").alias("{n}", "exactly n times").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174904166999")).create();
  }
  private static ConceptDescriptor createDescriptorForNegativeLookAheadRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.NegativeLookAheadRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de1f935L)).super_("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de32185L)).parents("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de32185L)).alias("(?!", "negative look ahead").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174906468661")).create();
  }
  private static ConceptDescriptor createDescriptorForNegativeLookBehindRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.NegativeLookBehindRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de6e3f6L)).super_("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de32185L)).parents("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de32185L)).alias("(?<!", "negative look behind").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174906790902")).create();
  }
  private static ConceptDescriptor createDescriptorForNegativeSymbolClassRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.NegativeSymbolClassRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e35c63L)).super_("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e2916aL)).parents("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e2916aL)).alias("[^", "negative symbol class").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174554238051")).create();
  }
  private static ConceptDescriptor createDescriptorForOrRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.OrRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a0d780L)).super_("jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c56bf9L)).parents("jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c56bf9L)).alias("|", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174482769792")).create();
  }
  private static ConceptDescriptor createDescriptorForParensRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.ParensRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111752101b0L)).super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).parents("jetbrains.mps.baseLanguage.regexp.structure.Regexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1117521177bL, "expr", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174491174779"))).children(new String[]{"expr"}, new boolean[]{false}).alias("(", "parens").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174491169200")).create();
  }
  private static ConceptDescriptor createDescriptorForPlusRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.PlusRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a15de8L)).super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).parents("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).alias("+", "one or more times").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174482804200")).create();
  }
  private static ConceptDescriptor createDescriptorForPositiveLookAheadRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.PositiveLookAheadRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118ddfb973L)).super_("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de32185L)).parents("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de32185L)).alias("(?=", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174906321267")).create();
  }
  private static ConceptDescriptor createDescriptorForPositiveLookBehindRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.PositiveLookBehindRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de6742fL)).super_("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de32185L)).parents("jetbrains.mps.baseLanguage.regexp.structure.LookRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118de32185L)).alias("(?<=", "positive look behind").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174906762287")).create();
  }
  private static ConceptDescriptor createDescriptorForPositiveSymbolClassRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.PositiveSymbolClassRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e2f48cL)).super_("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e2916aL)).parents("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e2916aL)).alias("[", "positive symbol class").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174554211468")).create();
  }
  private static ConceptDescriptor createDescriptorForPredefinedSymbolClassDeclaration() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassDeclaration", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e59fd0L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x11178e7fa54L, "description", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174554540628"))).properties("description").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174554386384")).create();
  }
  private static ConceptDescriptor createDescriptorForPredefinedSymbolClassRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178fa2a18L)).super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).parents("jetbrains.mps.baseLanguage.regexp.structure.Regexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x11178fbdc7dL, "symbolClass", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e59fd0L), false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174555843709"))).references("symbolClass").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174555732504")).create();
  }
  private static ConceptDescriptor createDescriptorForPredefinedSymbolClassSymbolClassPart() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClassSymbolClassPart", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117928d9f2L)).super_("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L)).parents("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x111792942ceL, "declaration", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e59fd0L), false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174558819022"))).references("declaration").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174558792178")).create();
  }
  private static ConceptDescriptor createDescriptorForPredefinedSymbolClasses() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.PredefinedSymbolClasses", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e5efc7L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11178e61ee7L, "symbolClass", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e59fd0L), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174554418919"))).children(new String[]{"symbolClass"}, new boolean[]{true}).rootable().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174554406855")).create();
  }
  private static ConceptDescriptor createDescriptorForQuestionRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.QuestionRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178c4e1e0L)).super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).parents("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).alias("?", "once or not at all").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174552240608")).create();
  }
  private static ConceptDescriptor createDescriptorForRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.Regexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174482743037")).create();
  }
  private static ConceptDescriptor createDescriptorForRegexpDeclaration() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclaration", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a6454dL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1117f5e9a48L, "description", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174662978120"))).properties("description").childDescriptors(new ConceptDescriptorBuilder.Link(0x11174a66599L, "regexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174483133849"))).children(new String[]{"regexp"}, new boolean[]{false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174483125581")).create();
  }
  private static ConceptDescriptor createDescriptorForRegexpDeclarationReferenceRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.RegexpDeclarationReferenceRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117f58ea2aL)).super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).parents("jetbrains.mps.baseLanguage.regexp.structure.Regexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x1117f594636L, "regexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a6454dL), false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174662628918"))).references("regexp").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174662605354")).create();
  }
  private static ConceptDescriptor createDescriptorForRegexpExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.RegexpExpression", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118ea37105L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).abstract_().staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174919147781")).create();
  }
  private static ConceptDescriptor createDescriptorForRegexpUsingConstruction() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL)).version(1).interface_().childDescriptors(new ConceptDescriptorBuilder.Link(0x1117ecc427cL, "regexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1118ea37105L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174653387388"))).children(new String[]{"regexp"}, new boolean[]{false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174653354106")).create();
  }
  private static ConceptDescriptor createDescriptorForRegexps() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.Regexps", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117f550b6dL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1117f554ef2L, "regexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a6454dL), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174662369010"))).children(new String[]{"regexp"}, new boolean[]{true}).rootable().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174662351725")).create();
  }
  private static ConceptDescriptor createDescriptorForReplaceBlock() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.ReplaceBlock", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ef80054L)).super_("jetbrains.mps.baseLanguage.structure.Closure").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c63f4f3f3L)).parents("jetbrains.mps.baseLanguage.structure.Closure").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10c63f4f3f3L)).staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174656254036")).create();
  }
  private static ConceptDescriptor createDescriptorForReplaceRegexpOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.ReplaceRegexpOperation", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c1923d18aL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x34ae970c1924ee66L, "dotAll", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "3796137614137159270")), new ConceptDescriptorBuilder.Prop(0x34ae970c1924ee67L, "multiLine", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "3796137614137159271")), new ConceptDescriptorBuilder.Prop(0x34ae970c1924ee68L, "caseInsensitive", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "3796137614137159272")), new ConceptDescriptorBuilder.Prop(0x34ae970c1924ee69L, "globalReplace", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "3796137614137159273"))).properties("dotAll", "multiLine", "caseInsensitive", "globalReplace").childDescriptors(new ConceptDescriptorBuilder.Link(0x34ae970c1924ee3bL, "search", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "3796137614137159227")), new ConceptDescriptorBuilder.Link(0x34ae970c1923d18bL, "replacement", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab952L), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "3796137614137086347"))).children(new String[]{"search", "replacement"}, new boolean[]{false, true}).alias("s/regexp/replacement/", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "3796137614137086346")).create();
  }
  private static ConceptDescriptor createDescriptorForReplaceWithRegexpExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpExpression", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ef3f72dL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1117ef5b26bL, "expr", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174656103019")), new ConceptDescriptorBuilder.Link(0x1117ef94e0cL, "replaceBlock", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ef80054L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174656339468"))).children(new String[]{"expr", "replaceBlock"}, new boolean[]{false, false}).alias("replace with regexp", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174655989549")).create();
  }
  private static ConceptDescriptor createDescriptorForReplaceWithRegexpOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.ReplaceWithRegexpOperation", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c94680172L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation", "jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11c946f4847L, "replaceBlock", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ef80054L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1222261033031"))).children(new String[]{"replaceBlock"}, new boolean[]{false}).alias("replace with", "replace with regexp").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1222260556146")).create();
  }
  private static ConceptDescriptor createDescriptorForReplacement() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.Replacement", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x34ae970c192ab952L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "3796137614137538898")).create();
  }
  private static ConceptDescriptor createDescriptorForSeqRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.SeqRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174bc30e7L)).super_("jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c56bf9L)).parents("jetbrains.mps.baseLanguage.regexp.structure.BinaryRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c56bf9L)).alias("seq", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174484562151")).create();
  }
  private static ConceptDescriptor createDescriptorForSplitExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.SplitExpression", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1119d41c734L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1119d425aa1L, "expr", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1175164443297"))).children(new String[]{"expr"}, new boolean[]{false}).alias("split with", "split with regexp").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1175164405556")).create();
  }
  private static ConceptDescriptor createDescriptorForSplitOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.SplitOperation", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c942ab86bL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IOperation", "jetbrains.mps.baseLanguage.regexp.structure.RegexpUsingConstruction", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x116b46ac030L), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x1117ecbc07aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).alias("split with", "split with regexp").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1222256539755")).create();
  }
  private static ConceptDescriptor createDescriptorForStarRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.StarRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a16ffaL)).super_("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).parents("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).alias("*", "zero or more times").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174482808826")).create();
  }
  private static ConceptDescriptor createDescriptorForStringLiteralRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.StringLiteralRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a0992dL)).super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).parents("jetbrains.mps.baseLanguage.regexp.structure.Regexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x11174a0b84fL, "text", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174482761807"))).properties("text").alias("'", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174482753837")).create();
  }
  private static ConceptDescriptor createDescriptorForSymbolClassPart() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassPart", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c22ec8f79L)).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174557861378")).create();
  }
  private static ConceptDescriptor createDescriptorForSymbolClassRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11178e2916aL)).super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).parents("jetbrains.mps.baseLanguage.regexp.structure.Regexp", "jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL), MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c22ec8f79L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11179171739L, "part", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x111791aa602L), true, true, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174557628217"))).children(new String[]{"part"}, new boolean[]{true}).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174554186090")).create();
  }
  private static ConceptDescriptor createDescriptorForSymbolClassRegexpAndPart() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.SymbolClassRegexpAndPart", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11c22ec8f79L)).version(1).interface_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1220356640633")).create();
  }
  private static ConceptDescriptor createDescriptorForUnaryRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.UnaryRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174c678adL)).super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).parents("jetbrains.mps.baseLanguage.regexp.structure.Regexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11174c6961aL, "regexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174485243418"))).children(new String[]{"regexp"}, new boolean[]{false}).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1174485235885")).create();
  }
  private static ConceptDescriptor createDescriptorForUnicodeCharacterRegexp() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.regexp.structure.UnicodeCharacterRegexp", MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11831260718L)).super_("jetbrains.mps.baseLanguage.regexp.structure.Regexp").version(1).super_(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).parents("jetbrains.mps.baseLanguage.regexp.structure.Regexp").parentIds(MetaIdFactory.conceptId(0xdaafa647f1f74b0bL, 0xb09669cd7c8408c0L, 0x11174a06efdL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1183127443bL, "code", new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1203415499835"))).properties("code").alias("\\uhhhh", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590518(jetbrains.mps.baseLanguage.regexp.structure)", "1203415418648")).create();
  }
}
