package jetbrains.mps.baseLanguage.extensionMethods.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_BaseExtensionMethodContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExtensionMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExtensionMethodDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExtensionStaticFieldDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExtensionStaticFieldReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LocalExtendedMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleExtensionMethodsContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ThisExtensionExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeExtension = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_BaseExtensionMethodContainer;
      case 1:
        return props_ExtensionMethodCall;
      case 2:
        return props_ExtensionMethodDeclaration;
      case 3:
        return props_ExtensionStaticFieldDeclaration;
      case 4:
        return props_ExtensionStaticFieldReference;
      case 5:
        return props_LocalExtendedMethodCall;
      case 6:
        return props_SimpleExtensionMethodsContainer;
      case 7:
        return props_ThisExtensionExpression;
      case 8:
        return props_TypeExtension;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
