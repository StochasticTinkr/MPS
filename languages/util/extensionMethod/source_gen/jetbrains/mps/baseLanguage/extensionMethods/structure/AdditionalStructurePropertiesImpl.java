package jetbrains.mps.baseLanguage.extensionMethods.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_BaseExtensionMethodContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExtensionMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExtensionMethodDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExtensionStaticFieldDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExtensionStaticFieldReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LocalExtendedMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleExtensionMethodsContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ThisExtensionExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TypeExtension = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0k.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_BaseExtensionMethodContainer;
          }
          break;
        case 1:
          if (true) {
            return props_ExtensionMethodCall;
          }
          break;
        case 2:
          if (true) {
            return props_ExtensionMethodDeclaration;
          }
          break;
        case 3:
          if (true) {
            return props_ExtensionStaticFieldDeclaration;
          }
          break;
        case 4:
          if (true) {
            return props_ExtensionStaticFieldReference;
          }
          break;
        case 5:
          if (true) {
            return props_LocalExtendedMethodCall;
          }
          break;
        case 6:
          if (true) {
            return props_SimpleExtensionMethodsContainer;
          }
          break;
        case 7:
          if (true) {
            return props_ThisExtensionExpression;
          }
          break;
        case 8:
          if (true) {
            return props_TypeExtension;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0k = buildConceptIndices(MetaAdapterFactory.getConcept(0x5dc5fc0d37ef4782L, 0x81928b5ce1f69f80L, 0x6f5433076549f519L, "BaseExtensionMethodContainer"), MetaAdapterFactory.getConcept(0x5dc5fc0d37ef4782L, 0x81928b5ce1f69f80L, 0x1583d1b63359483bL, "ExtensionMethodCall"), MetaAdapterFactory.getConcept(0x5dc5fc0d37ef4782L, 0x81928b5ce1f69f80L, 0x1583d1b63365e7f9L, "ExtensionMethodDeclaration"), MetaAdapterFactory.getConcept(0x5dc5fc0d37ef4782L, 0x81928b5ce1f69f80L, 0x1b622d944bc0aff7L, "ExtensionStaticFieldDeclaration"), MetaAdapterFactory.getConcept(0x5dc5fc0d37ef4782L, 0x81928b5ce1f69f80L, 0x1b622d944bbdfbc7L, "ExtensionStaticFieldReference"), MetaAdapterFactory.getConcept(0x5dc5fc0d37ef4782L, 0x81928b5ce1f69f80L, 0x6aa7ca55518b9170L, "LocalExtendedMethodCall"), MetaAdapterFactory.getConcept(0x5dc5fc0d37ef4782L, 0x81928b5ce1f69f80L, 0x6f5433076532f593L, "SimpleExtensionMethodsContainer"), MetaAdapterFactory.getConcept(0x5dc5fc0d37ef4782L, 0x81928b5ce1f69f80L, 0x2e076d2695911333L, "ThisExtensionExpression"), MetaAdapterFactory.getConcept(0x5dc5fc0d37ef4782L, 0x81928b5ce1f69f80L, 0x1a4abaca2a94ce10L, "TypeExtension"));
}
