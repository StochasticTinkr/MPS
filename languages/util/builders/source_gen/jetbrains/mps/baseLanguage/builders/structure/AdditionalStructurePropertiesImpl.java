package jetbrains.mps.baseLanguage.builders.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_AsBuilderStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AsTypeBuilder = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BaseSimpleBuilderDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BeanBuilder = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BeanPropertyBuilder = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Builder = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BuilderContainer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BuilderCreator = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_BuilderStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ResultExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleBuilder = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleBuilderChild = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleBuilderChildExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleBuilderDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleBuilderExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleBuilderExtensionDeclaration = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleBuilderParameter = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleBuilderParameterReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleBuilderParentExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleBuilderProperty = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleBuilderPropertyBuilder = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleBuilderPropertyExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleBuilderPropertyParent = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleBuilderPropertyValue = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimpleBuilders = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0ab.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AsBuilderStatement;
          }
          break;
        case 1:
          if (true) {
            return props_AsTypeBuilder;
          }
          break;
        case 2:
          if (true) {
            return props_BaseSimpleBuilderDeclaration;
          }
          break;
        case 3:
          if (true) {
            return props_BeanBuilder;
          }
          break;
        case 4:
          if (true) {
            return props_BeanPropertyBuilder;
          }
          break;
        case 5:
          if (true) {
            return props_Builder;
          }
          break;
        case 6:
          if (true) {
            return props_BuilderContainer;
          }
          break;
        case 7:
          if (true) {
            return props_BuilderCreator;
          }
          break;
        case 8:
          if (true) {
            return props_BuilderStatement;
          }
          break;
        case 9:
          if (true) {
            return props_ResultExpression;
          }
          break;
        case 10:
          if (true) {
            return props_SimpleBuilder;
          }
          break;
        case 11:
          if (true) {
            return props_SimpleBuilderChild;
          }
          break;
        case 12:
          if (true) {
            return props_SimpleBuilderChildExpression;
          }
          break;
        case 13:
          if (true) {
            return props_SimpleBuilderDeclaration;
          }
          break;
        case 14:
          if (true) {
            return props_SimpleBuilderExpression;
          }
          break;
        case 15:
          if (true) {
            return props_SimpleBuilderExtensionDeclaration;
          }
          break;
        case 16:
          if (true) {
            return props_SimpleBuilderParameter;
          }
          break;
        case 17:
          if (true) {
            return props_SimpleBuilderParameterReference;
          }
          break;
        case 18:
          if (true) {
            return props_SimpleBuilderParentExpression;
          }
          break;
        case 19:
          if (true) {
            return props_SimpleBuilderProperty;
          }
          break;
        case 20:
          if (true) {
            return props_SimpleBuilderPropertyBuilder;
          }
          break;
        case 21:
          if (true) {
            return props_SimpleBuilderPropertyExpression;
          }
          break;
        case 22:
          if (true) {
            return props_SimpleBuilderPropertyParent;
          }
          break;
        case 23:
          if (true) {
            return props_SimpleBuilderPropertyValue;
          }
          break;
        case 24:
          if (true) {
            return props_SimpleBuilders;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0ab = buildConceptIndices(MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6c473c8a08195e1cL, "AsBuilderStatement"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x4acc05c8d721d314L, "AsTypeBuilder"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x56cd40dfa78d35b1L, "BaseSimpleBuilderDeclaration"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x5c83892592e1ebbfL, "BeanBuilder"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x252efd34f8a58ec7L, "BeanPropertyBuilder"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x61f1de4171d2bf0bL, "Builder"), MetaAdapterFactory.getInterfaceConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6c473c8a081aa9e4L, "BuilderContainer"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x61f1de4171d2bf0eL, "BuilderCreator"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x61f1de4171d2bf23L, "BuilderStatement"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6524536b2e18dae0L, "ResultExpression"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6524536b2e24c0baL, "SimpleBuilder"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6524536b2e1d353aL, "SimpleBuilderChild"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6524536b2e1d353eL, "SimpleBuilderChildExpression"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6524536b2e1a1e38L, "SimpleBuilderDeclaration"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6524536b2e1d3540L, "SimpleBuilderExpression"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x56cd40dfa78dcaf3L, "SimpleBuilderExtensionDeclaration"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x4b4c01fdd9010958L, "SimpleBuilderParameter"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x4b4c01fdd9029ce4L, "SimpleBuilderParameterReference"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6524536b2e1d353cL, "SimpleBuilderParentExpression"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x4acc05c8d72870eaL, "SimpleBuilderProperty"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x4acc05c8d72ec05fL, "SimpleBuilderPropertyBuilder"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x4acc05c8d72c48e2L, "SimpleBuilderPropertyExpression"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x4acc05c8d72c5e70L, "SimpleBuilderPropertyParent"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x4acc05c8d72c5e8aL, "SimpleBuilderPropertyValue"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6524536b2e1a1e3bL, "SimpleBuilders"));
}
