package jetbrains.mps.baseLanguage.builders.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myBeanPropertyBuilder__BehaviorDescriptor = new BeanPropertyBuilder__BehaviorDescriptor();
  private final BHDescriptor myAsTypeBuilder__BehaviorDescriptor = new AsTypeBuilder__BehaviorDescriptor();
  private final BHDescriptor mySimpleBuilderPropertyBuilder__BehaviorDescriptor = new SimpleBuilderPropertyBuilder__BehaviorDescriptor();
  private final BHDescriptor myBaseSimpleBuilderDeclaration__BehaviorDescriptor = new BaseSimpleBuilderDeclaration__BehaviorDescriptor();
  private final BHDescriptor mySimpleBuilderExtensionDeclaration__BehaviorDescriptor = new SimpleBuilderExtensionDeclaration__BehaviorDescriptor();
  private final BHDescriptor myBeanBuilder__BehaviorDescriptor = new BeanBuilder__BehaviorDescriptor();
  private final BHDescriptor myBuilder__BehaviorDescriptor = new Builder__BehaviorDescriptor();
  private final BHDescriptor myBuilderCreator__BehaviorDescriptor = new BuilderCreator__BehaviorDescriptor();
  private final BHDescriptor myBuilderStatement__BehaviorDescriptor = new BuilderStatement__BehaviorDescriptor();
  private final BHDescriptor mySimpleBuilderDeclaration__BehaviorDescriptor = new SimpleBuilderDeclaration__BehaviorDescriptor();
  private final BHDescriptor mySimpleBuilders__BehaviorDescriptor = new SimpleBuilders__BehaviorDescriptor();
  private final BHDescriptor mySimpleBuilder__BehaviorDescriptor = new SimpleBuilder__BehaviorDescriptor();
  private final BHDescriptor myAsBuilderStatement__BehaviorDescriptor = new AsBuilderStatement__BehaviorDescriptor();
  private final BHDescriptor myBuilderContainer__BehaviorDescriptor = new BuilderContainer__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_846f5o_a0r.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          return myAsBuilderStatement__BehaviorDescriptor;
        case 1:
          return myAsTypeBuilder__BehaviorDescriptor;
        case 2:
          return myBaseSimpleBuilderDeclaration__BehaviorDescriptor;
        case 3:
          return myBeanBuilder__BehaviorDescriptor;
        case 4:
          return myBeanPropertyBuilder__BehaviorDescriptor;
        case 5:
          return myBuilder__BehaviorDescriptor;
        case 6:
          return myBuilderContainer__BehaviorDescriptor;
        case 7:
          return myBuilderCreator__BehaviorDescriptor;
        case 8:
          return myBuilderStatement__BehaviorDescriptor;
        case 9:
          return mySimpleBuilder__BehaviorDescriptor;
        case 10:
          return mySimpleBuilderDeclaration__BehaviorDescriptor;
        case 11:
          return mySimpleBuilderExtensionDeclaration__BehaviorDescriptor;
        case 12:
          return mySimpleBuilderPropertyBuilder__BehaviorDescriptor;
        case 13:
          return mySimpleBuilders__BehaviorDescriptor;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_846f5o_a0r = buildConceptIndices(MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6c473c8a08195e1cL, "jetbrains.mps.baseLanguage.builders.structure.AsBuilderStatement"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x4acc05c8d721d314L, "jetbrains.mps.baseLanguage.builders.structure.AsTypeBuilder"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x56cd40dfa78d35b1L, "jetbrains.mps.baseLanguage.builders.structure.BaseSimpleBuilderDeclaration"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x5c83892592e1ebbfL, "jetbrains.mps.baseLanguage.builders.structure.BeanBuilder"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x252efd34f8a58ec7L, "jetbrains.mps.baseLanguage.builders.structure.BeanPropertyBuilder"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x61f1de4171d2bf0bL, "jetbrains.mps.baseLanguage.builders.structure.Builder"), MetaAdapterFactory.getInterfaceConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6c473c8a081aa9e4L, "jetbrains.mps.baseLanguage.builders.structure.BuilderContainer"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x61f1de4171d2bf0eL, "jetbrains.mps.baseLanguage.builders.structure.BuilderCreator"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x61f1de4171d2bf23L, "jetbrains.mps.baseLanguage.builders.structure.BuilderStatement"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6524536b2e24c0baL, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilder"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6524536b2e1a1e38L, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderDeclaration"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x56cd40dfa78dcaf3L, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderExtensionDeclaration"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x4acc05c8d72ec05fL, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilderPropertyBuilder"), MetaAdapterFactory.getConcept(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6524536b2e1a1e3bL, "jetbrains.mps.baseLanguage.builders.structure.SimpleBuilders"));
}
