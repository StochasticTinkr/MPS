package jetbrains.mps.baseLanguage.builders.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myBeanPropertyBuilder__BehaviorDescriptor = new BeanPropertyBuilder__BehaviorDescriptor();
  private final BHDescriptor myAsTypeBuilder__BehaviorDescriptor = new AsTypeBuilder__BehaviorDescriptor();
  private final BHDescriptor mySimpleBuilderPropertyBuilder__BehaviorDescriptor = new SimpleBuilderPropertyBuilder__BehaviorDescriptor();
  private final BHDescriptor myBaseSimpleBuilderDeclaration__BehaviorDescriptor = new BaseSimpleBuilderDeclaration__BehaviorDescriptor();
  private final BHDescriptor mySimpleBuilderExtensionDeclaration__BehaviorDescriptor = new SimpleBuilderExtensionDeclaration__BehaviorDescriptor();
  private final BHDescriptor myBeanBuilder__BehaviorDescriptor = new BeanBuilder__BehaviorDescriptor();
  private final BHDescriptor myBuilder__BehaviorDescriptor = new Builder__BehaviorDescriptor();
  private final BHDescriptor myBuilderCreator__BehaviorDescriptor = new BuilderCreator__BehaviorDescriptor();
  private final BHDescriptor myBuilderStatement__BehaviorDescriptor = new BuilderStatement__BehaviorDescriptor();
  private final BHDescriptor mySimpleBuilderDeclaration__BehaviorDescriptor = new SimpleBuilderDeclaration__BehaviorDescriptor();
  private final BHDescriptor mySimpleBuilders__BehaviorDescriptor = new SimpleBuilders__BehaviorDescriptor();
  private final BHDescriptor mySimpleBuilder__BehaviorDescriptor = new SimpleBuilder__BehaviorDescriptor();
  private final BHDescriptor myAsBuilderStatement__BehaviorDescriptor = new AsBuilderStatement__BehaviorDescriptor();
  private final BHDescriptor myBuilderContainer__BehaviorDescriptor = new BuilderContainer__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt_a0r = concept;
    switch (index_846f5o_a0r.index(cncpt_a0r)) {
      case 0:
        return myAsBuilderStatement__BehaviorDescriptor;
      case 1:
        return myAsTypeBuilder__BehaviorDescriptor;
      case 2:
        return myBaseSimpleBuilderDeclaration__BehaviorDescriptor;
      case 3:
        return myBeanBuilder__BehaviorDescriptor;
      case 4:
        return myBeanPropertyBuilder__BehaviorDescriptor;
      case 5:
        return myBuilder__BehaviorDescriptor;
      case 6:
        return myBuilderContainer__BehaviorDescriptor;
      case 7:
        return myBuilderCreator__BehaviorDescriptor;
      case 8:
        return myBuilderStatement__BehaviorDescriptor;
      case 9:
        return mySimpleBuilder__BehaviorDescriptor;
      case 10:
        return mySimpleBuilderDeclaration__BehaviorDescriptor;
      case 11:
        return mySimpleBuilderExtensionDeclaration__BehaviorDescriptor;
      case 12:
        return mySimpleBuilderPropertyBuilder__BehaviorDescriptor;
      case 13:
        return mySimpleBuilders__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex index_846f5o_a0r = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6c473c8a08195e1cL), MetaIdFactory.conceptId(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x4acc05c8d721d314L), MetaIdFactory.conceptId(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x56cd40dfa78d35b1L), MetaIdFactory.conceptId(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x5c83892592e1ebbfL), MetaIdFactory.conceptId(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x252efd34f8a58ec7L), MetaIdFactory.conceptId(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x61f1de4171d2bf0bL), MetaIdFactory.conceptId(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6c473c8a081aa9e4L), MetaIdFactory.conceptId(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x61f1de4171d2bf0eL), MetaIdFactory.conceptId(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x61f1de4171d2bf23L), MetaIdFactory.conceptId(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6524536b2e24c0baL), MetaIdFactory.conceptId(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6524536b2e1a1e38L), MetaIdFactory.conceptId(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x56cd40dfa78dcaf3L), MetaIdFactory.conceptId(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x4acc05c8d72ec05fL), MetaIdFactory.conceptId(0x132aa4d8a3f7441cL, 0xa7eb3fce23492c6aL, 0x6524536b2e1a1e3bL)).seal();
}
