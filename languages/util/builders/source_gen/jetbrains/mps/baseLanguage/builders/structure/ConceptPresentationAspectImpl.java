package jetbrains.mps.baseLanguage.builders.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AsBuilderStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AsTypeBuilder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseSimpleBuilderDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BeanBuilder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BeanPropertyBuilder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Builder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuilderContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuilderCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuilderStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResultExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderChildExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderExtensionDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderParentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderPropertyBuilder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderPropertyExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderPropertyParent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderPropertyValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilders = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AsBuilderStatement;
      case 1:
        return props_AsTypeBuilder;
      case 2:
        return props_BaseSimpleBuilderDeclaration;
      case 3:
        return props_BeanBuilder;
      case 4:
        return props_BeanPropertyBuilder;
      case 5:
        return props_Builder;
      case 6:
        return props_BuilderContainer;
      case 7:
        return props_BuilderCreator;
      case 8:
        return props_BuilderStatement;
      case 9:
        return props_ResultExpression;
      case 10:
        return props_SimpleBuilder;
      case 11:
        return props_SimpleBuilderChild;
      case 12:
        return props_SimpleBuilderChildExpression;
      case 13:
        return props_SimpleBuilderDeclaration;
      case 14:
        return props_SimpleBuilderExpression;
      case 15:
        return props_SimpleBuilderExtensionDeclaration;
      case 16:
        return props_SimpleBuilderParameter;
      case 17:
        return props_SimpleBuilderParameterReference;
      case 18:
        return props_SimpleBuilderParentExpression;
      case 19:
        return props_SimpleBuilderProperty;
      case 20:
        return props_SimpleBuilderPropertyBuilder;
      case 21:
        return props_SimpleBuilderPropertyExpression;
      case 22:
        return props_SimpleBuilderPropertyParent;
      case 23:
        return props_SimpleBuilderPropertyValue;
      case 24:
        return props_SimpleBuilders;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
