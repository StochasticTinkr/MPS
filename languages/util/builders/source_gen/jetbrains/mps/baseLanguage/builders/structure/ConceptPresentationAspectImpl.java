package jetbrains.mps.baseLanguage.builders.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AsBuilderStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AsTypeBuilder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BaseSimpleBuilderDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BeanBuilder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BeanPropertyBuilder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Builder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuilderContainer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuilderCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BuilderStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ResultExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderChildExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderExtensionDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderParameter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderParameterReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderParentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderPropertyBuilder = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderPropertyExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderPropertyParent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilderPropertyValue = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleBuilders = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AsBuilderStatement:
        return props_AsBuilderStatement;
      case LanguageConceptSwitch.AsTypeBuilder:
        return props_AsTypeBuilder;
      case LanguageConceptSwitch.BaseSimpleBuilderDeclaration:
        return props_BaseSimpleBuilderDeclaration;
      case LanguageConceptSwitch.BeanBuilder:
        return props_BeanBuilder;
      case LanguageConceptSwitch.BeanPropertyBuilder:
        return props_BeanPropertyBuilder;
      case LanguageConceptSwitch.Builder:
        return props_Builder;
      case LanguageConceptSwitch.BuilderContainer:
        return props_BuilderContainer;
      case LanguageConceptSwitch.BuilderCreator:
        return props_BuilderCreator;
      case LanguageConceptSwitch.BuilderStatement:
        return props_BuilderStatement;
      case LanguageConceptSwitch.ResultExpression:
        return props_ResultExpression;
      case LanguageConceptSwitch.SimpleBuilder:
        return props_SimpleBuilder;
      case LanguageConceptSwitch.SimpleBuilderChild:
        return props_SimpleBuilderChild;
      case LanguageConceptSwitch.SimpleBuilderChildExpression:
        return props_SimpleBuilderChildExpression;
      case LanguageConceptSwitch.SimpleBuilderDeclaration:
        return props_SimpleBuilderDeclaration;
      case LanguageConceptSwitch.SimpleBuilderExpression:
        return props_SimpleBuilderExpression;
      case LanguageConceptSwitch.SimpleBuilderExtensionDeclaration:
        return props_SimpleBuilderExtensionDeclaration;
      case LanguageConceptSwitch.SimpleBuilderParameter:
        return props_SimpleBuilderParameter;
      case LanguageConceptSwitch.SimpleBuilderParameterReference:
        return props_SimpleBuilderParameterReference;
      case LanguageConceptSwitch.SimpleBuilderParentExpression:
        return props_SimpleBuilderParentExpression;
      case LanguageConceptSwitch.SimpleBuilderProperty:
        return props_SimpleBuilderProperty;
      case LanguageConceptSwitch.SimpleBuilderPropertyBuilder:
        return props_SimpleBuilderPropertyBuilder;
      case LanguageConceptSwitch.SimpleBuilderPropertyExpression:
        return props_SimpleBuilderPropertyExpression;
      case LanguageConceptSwitch.SimpleBuilderPropertyParent:
        return props_SimpleBuilderPropertyParent;
      case LanguageConceptSwitch.SimpleBuilderPropertyValue:
        return props_SimpleBuilderPropertyValue;
      case LanguageConceptSwitch.SimpleBuilders:
        return props_SimpleBuilders;
    }
    return null;
  }
}
