package jetbrains.mps.lang.editor.test.generation.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.openapi.editor.menus.transformation.SPropertyInfo;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.cells.EditorCell_Property;
import jetbrains.mps.nodeEditor.cells.ModelAccessor;
import jetbrains.mps.nodeEditor.cells.TransactionalPropertyAccessor;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.lang.editor.test.generation.editor.TestTargetStyleSheet_StyleSheet.testParentStyleStyleClass;
import jetbrains.mps.nodeEditor.EditorManager;

/*package*/ class TransactionalProperty_ICellStyle_ComponentBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public TransactionalProperty_ICellStyle_ComponentBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createTransactionalProperty_0();
  }

  private EditorCell createTransactionalProperty_0() {
    getCellFactory().pushCellContext();
    try {
      SProperty property = MetaAdapterFactory.getProperty(0xeaa98d49af584b80L, 0xb585c05e7b5fd335L, 0xbde89531aadcccL, 0xbde89531aae3a9L, "theProperty");
      getCellFactory().setPropertyInfo(new SPropertyInfo(myNode, property));
      PropertyCellProvider provider = new PropertyCellProvider(myNode, property, getEditorContext());
      EditorCell_Property editorCell = null;
      {
        ModelAccessor modelAccessor = new TransactionalPropertyAccessor(myNode, property, false, false, getEditorContext()) {
          public void doCommit(final String oldValue, final String newValue) {
            doCommitImpl(oldValue, newValue);
          }
          public void doCommitImpl(final String oldValue, final String newValue) {
          }
        };
        editorCell = EditorCell_Property.create(getEditorContext(), modelAccessor, myNode);
        editorCell.setCellId("TransactionalProperty_b29fir_a");
        Style style = new StyleImpl();
        new testParentStyleStyleClass(getEditorContext(), getNode()).apply(style, editorCell);
        editorCell.getStyle().putAll(style);
        editorCell.setDefaultText("<no theProperty>");
        setCellContext(editorCell);
        editorCell.setCommitInCommand(false);
      }
      SNode attributeConcept = provider.getRoleAttribute();
      if (attributeConcept != null) {
        EditorManager manager = EditorManager.getInstanceFromContext(getEditorContext());
        return manager.createNodeRoleAttributeCell(attributeConcept, provider.getRoleAttributeKind(), editorCell);
      } else
      return editorCell;

    } finally {
      getCellFactory().popCellContext();
    }
  }
}
