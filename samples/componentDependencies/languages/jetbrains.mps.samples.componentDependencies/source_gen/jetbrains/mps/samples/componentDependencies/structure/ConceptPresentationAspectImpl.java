package jetbrains.mps.samples.componentDependencies.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Component = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ComponentSet = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Dependency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InPort = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OutPort = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Component:
        return props_Component;
      case LanguageConceptSwitch.ComponentSet:
        return props_ComponentSet;
      case LanguageConceptSwitch.Dependency:
        return props_Dependency;
      case LanguageConceptSwitch.InPort:
        return props_InPort;
      case LanguageConceptSwitch.OutPort:
        return props_OutPort;
    }
    return null;
  }
}
