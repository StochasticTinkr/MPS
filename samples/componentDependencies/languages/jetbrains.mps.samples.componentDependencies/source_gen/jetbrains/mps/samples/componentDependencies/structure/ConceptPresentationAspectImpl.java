package jetbrains.mps.samples.componentDependencies.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Component;
  private ConceptPresentation props_ComponentSet;
  private ConceptPresentation props_Dependency;
  private ConceptPresentation props_InPort;
  private ConceptPresentation props_OutPort;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Component:
        if (props_Component == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Component = cpb.create();
        }
        return props_Component;
      case LanguageConceptSwitch.ComponentSet:
        if (props_ComponentSet == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ComponentSet = cpb.create();
        }
        return props_ComponentSet;
      case LanguageConceptSwitch.Dependency:
        if (props_Dependency == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("depends on");
          props_Dependency = cpb.create();
        }
        return props_Dependency;
      case LanguageConceptSwitch.InPort:
        if (props_InPort == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_InPort = cpb.create();
        }
        return props_InPort;
      case LanguageConceptSwitch.OutPort:
        if (props_OutPort == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_OutPort = cpb.create();
        }
        return props_OutPort;
    }
    return null;
  }
}
