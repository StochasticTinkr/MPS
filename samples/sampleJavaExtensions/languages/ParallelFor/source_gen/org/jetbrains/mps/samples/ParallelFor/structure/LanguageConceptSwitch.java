package org.jetbrains.mps.samples.ParallelFor.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int NonThreadSafeClass = 0;
  public static final int ParallelFor = 1;
  public static final int ParallelLoopVariable = 2;
  public static final int ThreadPool = 3;
  public static final int ThreadSafe = 4;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xcb7388e8f1824cdaL, 0xbd839796e8634856L);
    builder.put(0x294c1cd4b8450380L, NonThreadSafeClass);
    builder.put(0x7bd8445d1e8770aaL, ParallelFor);
    builder.put(0x7bd8445d1e8770abL, ParallelLoopVariable);
    builder.put(0x8c9905a80efd03cL, ThreadPool);
    builder.put(0x294c1cd4b84332e6L, ThreadSafe);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
