package org.jetbrains.mps.samples.Money.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ConvertTo = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CurrencyDefTable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CurrencyUnit = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CurrentStockPrice = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetAmount = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GetCurrency = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoneyLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoneyType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MovingAverage = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StockSymbol = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_ConvertTo;
      case 1:
        return props_CurrencyDefTable;
      case 2:
        return props_CurrencyUnit;
      case 3:
        return props_CurrentStockPrice;
      case 4:
        return props_GetAmount;
      case 5:
        return props_GetCurrency;
      case 6:
        return props_MoneyLiteral;
      case 7:
        return props_MoneyType;
      case 8:
        return props_MovingAverage;
      case 9:
        return props_StockSymbol;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
