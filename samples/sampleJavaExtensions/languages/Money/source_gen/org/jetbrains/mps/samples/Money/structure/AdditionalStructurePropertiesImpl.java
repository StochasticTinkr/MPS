package org.jetbrains.mps.samples.Money.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_ConvertTo = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CurrencyDefTable = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CurrencyUnit = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CurrentStockPrice = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_GetAmount = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_GetCurrency = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MoneyLiteral = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MoneyType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_MovingAverage = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StockSymbol = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0l.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_ConvertTo;
          }
          break;
        case 1:
          if (true) {
            return props_CurrencyDefTable;
          }
          break;
        case 2:
          if (true) {
            return props_CurrencyUnit;
          }
          break;
        case 3:
          if (true) {
            return props_CurrentStockPrice;
          }
          break;
        case 4:
          if (true) {
            return props_GetAmount;
          }
          break;
        case 5:
          if (true) {
            return props_GetCurrency;
          }
          break;
        case 6:
          if (true) {
            return props_MoneyLiteral;
          }
          break;
        case 7:
          if (true) {
            return props_MoneyType;
          }
          break;
        case 8:
          if (true) {
            return props_MovingAverage;
          }
          break;
        case 9:
          if (true) {
            return props_StockSymbol;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0l = buildConceptIndices(MetaAdapterFactory.getConcept(0x662a9f2b58024d16L, 0x955872c65c7a681eL, 0x18d8e0833b34209aL, "ConvertTo"), MetaAdapterFactory.getConcept(0x662a9f2b58024d16L, 0x955872c65c7a681eL, 0x3210b276d1443596L, "CurrencyDefTable"), MetaAdapterFactory.getConcept(0x662a9f2b58024d16L, 0x955872c65c7a681eL, 0x3210b276d1443597L, "CurrencyUnit"), MetaAdapterFactory.getConcept(0x662a9f2b58024d16L, 0x955872c65c7a681eL, 0x3786e3f4808999c3L, "CurrentStockPrice"), MetaAdapterFactory.getConcept(0x662a9f2b58024d16L, 0x955872c65c7a681eL, 0x4b9a2fe55913c339L, "GetAmount"), MetaAdapterFactory.getConcept(0x662a9f2b58024d16L, 0x955872c65c7a681eL, 0x18d8e0833b32f1b1L, "GetCurrency"), MetaAdapterFactory.getConcept(0x662a9f2b58024d16L, 0x955872c65c7a681eL, 0x4b9a2fe559135132L, "MoneyLiteral"), MetaAdapterFactory.getConcept(0x662a9f2b58024d16L, 0x955872c65c7a681eL, 0x4b9a2fe55913516aL, "MoneyType"), MetaAdapterFactory.getConcept(0x662a9f2b58024d16L, 0x955872c65c7a681eL, 0x3786e3f480b1c19aL, "MovingAverage"), MetaAdapterFactory.getConcept(0x662a9f2b58024d16L, 0x955872c65c7a681eL, 0x3786e3f480a9b18aL, "StockSymbol"));
}
