package jetbrains.mps.samples.formulaLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = ((SAbstractConcept) concept);
      switch (index_xbvbvu_a0a.index(cncpt)) {
        case 0:
          return Collections.<ConceptEditor>singletonList(new AndOperation_Editor());
        case 1:
          return Collections.<ConceptEditor>singletonList(new Constant_Editor());
        case 2:
          return Collections.<ConceptEditor>singletonList(new EqualsOperation_Editor());
        case 3:
          return Collections.<ConceptEditor>singletonList(new Expression_Editor());
        case 4:
          return Collections.<ConceptEditor>singletonList(new FloatingPointConstant_Editor());
        case 5:
          return Collections.<ConceptEditor>singletonList(new Formula_Editor());
        case 6:
          return Collections.<ConceptEditor>singletonList(new Function_Editor());
        case 7:
          return Collections.<ConceptEditor>singletonList(new GreaterThanOperation_Editor());
        case 8:
          return Collections.<ConceptEditor>singletonList(new IfFunction_Editor());
        case 9:
          return Collections.<ConceptEditor>singletonList(new IntegerConstant_Editor());
        case 10:
          return Collections.<ConceptEditor>singletonList(new IsNullOperation_Editor());
        case 11:
          return Collections.<ConceptEditor>singletonList(new LessThanOperation_Editor());
        case 12:
          return Collections.<ConceptEditor>singletonList(new MinusOperation_Editor());
        case 13:
          return Collections.<ConceptEditor>singletonList(new MultOperation_Editor());
        case 14:
          return Collections.<ConceptEditor>singletonList(new NotOperation_Editor());
        case 15:
          return Collections.<ConceptEditor>singletonList(new NullConstant_Editor());
        case 16:
          return Collections.<ConceptEditor>singletonList(new Operation_Editor());
        case 17:
          return Collections.<ConceptEditor>singletonList(new OrOperation_Editor());
        case 18:
          return Collections.<ConceptEditor>singletonList(new ParenthisizedExpression_Editor());
        case 19:
          return Collections.<ConceptEditor>singletonList(new PlusOperation_Editor());
        case 20:
          return Collections.<ConceptEditor>singletonList(new Reference_Editor());
        case 21:
          return Collections.<ConceptEditor>singletonList(new StringConstant_Editor());
        default:
      }
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      switch (index_xbvbvu_a0d.index(cncpt)) {
        case 0:
          return Collections.<TransformationMenu>singletonList(new Expression_TransformationMenu());
        default:
      }
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      switch (index_xbvbvu_a0e.index(cncpt)) {
        case 0:
          return Collections.<SubstituteMenu>singletonList(new Expression_SubstituteMenu());
        case 1:
          return Collections.<SubstituteMenu>singletonList(new FloatingPointConstant_SubstituteMenu());
        case 2:
          return Collections.<SubstituteMenu>singletonList(new IntegerConstant_SubstituteMenu());
        default:
      }
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex index_xbvbvu_a0a = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x108050a5816L), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10809c54870L), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8bab3cL), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db80c054L), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8296fcL), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x103009e5ee0L), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8d4298L), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8aa3f9L), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a037c6c0bL), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102ea976b99L), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102dba2244aL), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102ff4441ddL), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a04135987L), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a036c79c0L), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x108050ab746L), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10809d032baL), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102dba0a69dL), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db83846eL), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10804f6f702L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0d = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0e = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8bab3cL), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8aa3f9L)).seal();
}
