package jetbrains.mps.samples.formulaLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AndOperation = 0;
  public static final int Constant = 1;
  public static final int EqualsOperation = 2;
  public static final int Expression = 3;
  public static final int FloatingPointConstant = 4;
  public static final int Formula = 5;
  public static final int Function = 6;
  public static final int GreaterThanOperation = 7;
  public static final int IfFunction = 8;
  public static final int IntegerConstant = 9;
  public static final int IsNullOperation = 10;
  public static final int LessThanOperation = 11;
  public static final int MinusOperation = 12;
  public static final int MultOperation = 13;
  public static final int NotOperation = 14;
  public static final int NullConstant = 15;
  public static final int Operation = 16;
  public static final int OrOperation = 17;
  public static final int ParenthisizedExpression = 18;
  public static final int PlusOperation = 19;
  public static final int Reference = 20;
  public static final int StringConstant = 21;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0xb1a9bc478a264792L, 0x8b684660c531090aL);
    builder.put(0x108050a5816L, AndOperation);
    builder.put(0x102db857767L, Constant);
    builder.put(0x10809c54870L, EqualsOperation);
    builder.put(0x102db824fa1L, Expression);
    builder.put(0x102db8bab3cL, FloatingPointConstant);
    builder.put(0x102db80c054L, Formula);
    builder.put(0x102db8296fcL, Function);
    builder.put(0x103009e5ee0L, GreaterThanOperation);
    builder.put(0x102db8d4298L, IfFunction);
    builder.put(0x102db8aa3f9L, IntegerConstant);
    builder.put(0x10a037c6c0bL, IsNullOperation);
    builder.put(0x102ea976b99L, LessThanOperation);
    builder.put(0x102dba2244aL, MinusOperation);
    builder.put(0x102ff4441ddL, MultOperation);
    builder.put(0x10a04135987L, NotOperation);
    builder.put(0x10a036c79c0L, NullConstant);
    builder.put(0x102db8620dbL, Operation);
    builder.put(0x108050ab746L, OrOperation);
    builder.put(0x10809d032baL, ParenthisizedExpression);
    builder.put(0x102dba0a69dL, PlusOperation);
    builder.put(0x102db83846eL, Reference);
    builder.put(0x10804f6f702L, StringConstant);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
