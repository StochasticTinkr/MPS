package jetbrains.mps.samples.formulaLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  /*package*/ final ConceptDescriptor myConceptAndOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.AndOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x108050a5816L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("&&", "and operation").create();
  /*package*/ final ConceptDescriptor myConceptConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Constant", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptEqualsOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.EqualsOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10809c54870L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("==", "equals operation").create();
  /*package*/ final ConceptDescriptor myConceptExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Expression", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptFloatingPointConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8bab3cL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Constant").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Constant", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(1113257000626L, "value")).properties("value").alias("", "floating point constant").create();
  /*package*/ final ConceptDescriptor myConceptFormula = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Formula", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db80c054L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(1111784226798L, "expression", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false)).children(new String[]{"expression"}, new boolean[]{false}).create();
  /*package*/ final ConceptDescriptor myConceptFunction = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Function", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8296fcL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptGreaterThanOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.GreaterThanOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x103009e5ee0L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias(">", "greater than operation").create();
  /*package*/ final ConceptDescriptor myConceptIfFunction = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.IfFunction", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8d4298L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Function").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8296fcL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Function").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8296fcL)).childDescriptors(new ConceptDescriptorBuilder.Link(1111785044750L, "logicalTest", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false), new ConceptDescriptorBuilder.Link(1111785091720L, "valueIfTrue", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false), new ConceptDescriptorBuilder.Link(1111785124143L, "valueIfFalse", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false)).children(new String[]{"logicalTest", "valueIfTrue", "valueIfFalse"}, new boolean[]{false, false, false}).alias("IF(,,)", "if-function").create();
  /*package*/ final ConceptDescriptor myConceptIntegerConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.IntegerConstant", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8aa3f9L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Constant").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Constant", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(1111784874587L, "value")).properties("value").alias("", "integer constant").create();
  /*package*/ final ConceptDescriptor myConceptIsNullOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.IsNullOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a037c6c0bL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias(".isNull", "").create();
  /*package*/ final ConceptDescriptor myConceptLessThanOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.LessThanOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102ea976b99L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("<", "less than operation").create();
  /*package*/ final ConceptDescriptor myConceptMinusOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.MinusOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102dba2244aL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("-", "minus operation").create();
  /*package*/ final ConceptDescriptor myConceptMultOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.MultOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102ff4441ddL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("*", "multiply operation").create();
  /*package*/ final ConceptDescriptor myConceptNotOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.NotOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a04135987L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("!", "not operation (formula language)").create();
  /*package*/ final ConceptDescriptor myConceptNullConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.NullConstant", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a036c79c0L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).alias("null", "null expression").create();
  /*package*/ final ConceptDescriptor myConceptOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Operation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).childDescriptors(new ConceptDescriptorBuilder.Link(1111784613299L, "leftOperand", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false), new ConceptDescriptorBuilder.Link(1111784647019L, "rightOperand", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false)).children(new String[]{"leftOperand", "rightOperand"}, new boolean[]{false, false}).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptOrOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.OrOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x108050ab746L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("||", "or operation").create();
  /*package*/ final ConceptDescriptor myConceptParenthisizedExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.ParenthisizedExpression", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10809d032baL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).childDescriptors(new ConceptDescriptorBuilder.Link(1134036114963L, "expression", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), true, false, false)).children(new String[]{"expression"}, new boolean[]{false}).alias("(", "(expr)").create();
  /*package*/ final ConceptDescriptor myConceptPlusOperation = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.PlusOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102dba0a69dL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("+", "plus operation").create();
  /*package*/ final ConceptDescriptor myConceptReference = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Reference", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db83846eL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptStringConstant = new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.StringConstant", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10804f6f702L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Constant").super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Constant").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(1133954700480L, "value")).properties("value").alias("\"", "string constant").create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAndOperation, myConceptConstant, myConceptEqualsOperation, myConceptExpression, myConceptFloatingPointConstant, myConceptFormula, myConceptFunction, myConceptGreaterThanOperation, myConceptIfFunction, myConceptIntegerConstant, myConceptIsNullOperation, myConceptLessThanOperation, myConceptMinusOperation, myConceptMultOperation, myConceptNotOperation, myConceptNullConstant, myConceptOperation, myConceptOrOperation, myConceptParenthisizedExpression, myConceptPlusOperation, myConceptReference, myConceptStringConstant);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_1htk8d_a0ab.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myConceptAndOperation;
          }
          break;
        case 1:
          if (true) {
            return myConceptConstant;
          }
          break;
        case 2:
          if (true) {
            return myConceptEqualsOperation;
          }
          break;
        case 3:
          if (true) {
            return myConceptExpression;
          }
          break;
        case 4:
          if (true) {
            return myConceptFloatingPointConstant;
          }
          break;
        case 5:
          if (true) {
            return myConceptFormula;
          }
          break;
        case 6:
          if (true) {
            return myConceptFunction;
          }
          break;
        case 7:
          if (true) {
            return myConceptGreaterThanOperation;
          }
          break;
        case 8:
          if (true) {
            return myConceptIfFunction;
          }
          break;
        case 9:
          if (true) {
            return myConceptIntegerConstant;
          }
          break;
        case 10:
          if (true) {
            return myConceptIsNullOperation;
          }
          break;
        case 11:
          if (true) {
            return myConceptLessThanOperation;
          }
          break;
        case 12:
          if (true) {
            return myConceptMinusOperation;
          }
          break;
        case 13:
          if (true) {
            return myConceptMultOperation;
          }
          break;
        case 14:
          if (true) {
            return myConceptNotOperation;
          }
          break;
        case 15:
          if (true) {
            return myConceptNullConstant;
          }
          break;
        case 16:
          if (true) {
            return myConceptOperation;
          }
          break;
        case 17:
          if (true) {
            return myConceptOrOperation;
          }
          break;
        case 18:
          if (true) {
            return myConceptParenthisizedExpression;
          }
          break;
        case 19:
          if (true) {
            return myConceptPlusOperation;
          }
          break;
        case 20:
          if (true) {
            return myConceptReference;
          }
          break;
        case 21:
          if (true) {
            return myConceptStringConstant;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_1htk8d_a0ab = buildConceptIndices(MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x108050a5816L, "jetbrains.mps.samples.formulaLanguage.structure.AndOperation"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L, "jetbrains.mps.samples.formulaLanguage.structure.Constant"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10809c54870L, "jetbrains.mps.samples.formulaLanguage.structure.EqualsOperation"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L, "jetbrains.mps.samples.formulaLanguage.structure.Expression"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8bab3cL, "jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db80c054L, "jetbrains.mps.samples.formulaLanguage.structure.Formula"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8296fcL, "jetbrains.mps.samples.formulaLanguage.structure.Function"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x103009e5ee0L, "jetbrains.mps.samples.formulaLanguage.structure.GreaterThanOperation"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8d4298L, "jetbrains.mps.samples.formulaLanguage.structure.IfFunction"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8aa3f9L, "jetbrains.mps.samples.formulaLanguage.structure.IntegerConstant"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a037c6c0bL, "jetbrains.mps.samples.formulaLanguage.structure.IsNullOperation"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102ea976b99L, "jetbrains.mps.samples.formulaLanguage.structure.LessThanOperation"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102dba2244aL, "jetbrains.mps.samples.formulaLanguage.structure.MinusOperation"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102ff4441ddL, "jetbrains.mps.samples.formulaLanguage.structure.MultOperation"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a04135987L, "jetbrains.mps.samples.formulaLanguage.structure.NotOperation"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a036c79c0L, "jetbrains.mps.samples.formulaLanguage.structure.NullConstant"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL, "jetbrains.mps.samples.formulaLanguage.structure.Operation"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x108050ab746L, "jetbrains.mps.samples.formulaLanguage.structure.OrOperation"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10809d032baL, "jetbrains.mps.samples.formulaLanguage.structure.ParenthisizedExpression"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102dba0a69dL, "jetbrains.mps.samples.formulaLanguage.structure.PlusOperation"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db83846eL, "jetbrains.mps.samples.formulaLanguage.structure.Reference"), MetaAdapterFactory.getConcept(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10804f6f702L, "jetbrains.mps.samples.formulaLanguage.structure.StringConstant"));
}
