package jetbrains.mps.samples.formulaLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(22);
  /*package*/ final ConceptDescriptor myConceptAndOperation = createDescriptorForAndOperation();
  /*package*/ final ConceptDescriptor myConceptConstant = createDescriptorForConstant();
  /*package*/ final ConceptDescriptor myConceptEqualsOperation = createDescriptorForEqualsOperation();
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptFloatingPointConstant = createDescriptorForFloatingPointConstant();
  /*package*/ final ConceptDescriptor myConceptFormula = createDescriptorForFormula();
  /*package*/ final ConceptDescriptor myConceptFunction = createDescriptorForFunction();
  /*package*/ final ConceptDescriptor myConceptGreaterThanOperation = createDescriptorForGreaterThanOperation();
  /*package*/ final ConceptDescriptor myConceptIfFunction = createDescriptorForIfFunction();
  /*package*/ final ConceptDescriptor myConceptIntegerConstant = createDescriptorForIntegerConstant();
  /*package*/ final ConceptDescriptor myConceptIsNullOperation = createDescriptorForIsNullOperation();
  /*package*/ final ConceptDescriptor myConceptLessThanOperation = createDescriptorForLessThanOperation();
  /*package*/ final ConceptDescriptor myConceptMinusOperation = createDescriptorForMinusOperation();
  /*package*/ final ConceptDescriptor myConceptMultOperation = createDescriptorForMultOperation();
  /*package*/ final ConceptDescriptor myConceptNotOperation = createDescriptorForNotOperation();
  /*package*/ final ConceptDescriptor myConceptNullConstant = createDescriptorForNullConstant();
  /*package*/ final ConceptDescriptor myConceptOperation = createDescriptorForOperation();
  /*package*/ final ConceptDescriptor myConceptOrOperation = createDescriptorForOrOperation();
  /*package*/ final ConceptDescriptor myConceptParenthisizedExpression = createDescriptorForParenthisizedExpression();
  /*package*/ final ConceptDescriptor myConceptPlusOperation = createDescriptorForPlusOperation();
  /*package*/ final ConceptDescriptor myConceptReference = createDescriptorForReference();
  /*package*/ final ConceptDescriptor myConceptStringConstant = createDescriptorForStringConstant();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptAndOperation.getId(), 0);
    myIndexMap.put(myConceptConstant.getId(), 1);
    myIndexMap.put(myConceptEqualsOperation.getId(), 2);
    myIndexMap.put(myConceptExpression.getId(), 3);
    myIndexMap.put(myConceptFloatingPointConstant.getId(), 4);
    myIndexMap.put(myConceptFormula.getId(), 5);
    myIndexMap.put(myConceptFunction.getId(), 6);
    myIndexMap.put(myConceptGreaterThanOperation.getId(), 7);
    myIndexMap.put(myConceptIfFunction.getId(), 8);
    myIndexMap.put(myConceptIntegerConstant.getId(), 9);
    myIndexMap.put(myConceptIsNullOperation.getId(), 10);
    myIndexMap.put(myConceptLessThanOperation.getId(), 11);
    myIndexMap.put(myConceptMinusOperation.getId(), 12);
    myIndexMap.put(myConceptMultOperation.getId(), 13);
    myIndexMap.put(myConceptNotOperation.getId(), 14);
    myIndexMap.put(myConceptNullConstant.getId(), 15);
    myIndexMap.put(myConceptOperation.getId(), 16);
    myIndexMap.put(myConceptOrOperation.getId(), 17);
    myIndexMap.put(myConceptParenthisizedExpression.getId(), 18);
    myIndexMap.put(myConceptPlusOperation.getId(), 19);
    myIndexMap.put(myConceptReference.getId(), 20);
    myIndexMap.put(myConceptStringConstant.getId(), 21);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAndOperation, myConceptConstant, myConceptEqualsOperation, myConceptExpression, myConceptFloatingPointConstant, myConceptFormula, myConceptFunction, myConceptGreaterThanOperation, myConceptIfFunction, myConceptIntegerConstant, myConceptIsNullOperation, myConceptLessThanOperation, myConceptMinusOperation, myConceptMultOperation, myConceptNotOperation, myConceptNullConstant, myConceptOperation, myConceptOrOperation, myConceptParenthisizedExpression, myConceptPlusOperation, myConceptReference, myConceptStringConstant);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptAndOperation;
      case 1:
        return myConceptConstant;
      case 2:
        return myConceptEqualsOperation;
      case 3:
        return myConceptExpression;
      case 4:
        return myConceptFloatingPointConstant;
      case 5:
        return myConceptFormula;
      case 6:
        return myConceptFunction;
      case 7:
        return myConceptGreaterThanOperation;
      case 8:
        return myConceptIfFunction;
      case 9:
        return myConceptIntegerConstant;
      case 10:
        return myConceptIsNullOperation;
      case 11:
        return myConceptLessThanOperation;
      case 12:
        return myConceptMinusOperation;
      case 13:
        return myConceptMultOperation;
      case 14:
        return myConceptNotOperation;
      case 15:
        return myConceptNullConstant;
      case 16:
        return myConceptOperation;
      case 17:
        return myConceptOrOperation;
      case 18:
        return myConceptParenthisizedExpression;
      case 19:
        return myConceptPlusOperation;
      case 20:
        return myConceptReference;
      case 21:
        return myConceptStringConstant;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForAndOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "AndOperation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x108050a5816L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Operation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1133955930134");
    b.alias("&&");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "Constant", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Expression", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1111784519527");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForEqualsOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "EqualsOperation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10809c54870L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Operation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1134035290224");
    b.alias("==");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "Expression", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L);
    b.class_(false, true, false);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1111784312737");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFloatingPointConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "FloatingPointConstant", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8bab3cL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Constant", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1111784926012");
    b.prop("value", 0x1033349beb2L, "1113257000626");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFormula() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "Formula", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db80c054L);
    b.class_(false, false, false);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1111784210516");
    b.aggregate("expression", 0x102db80ffeeL).target(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L).optional(false).ordered(true).multiple(false).origin("1111784226798").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFunction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "Function", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8296fcL);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Expression", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1111784331004");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForGreaterThanOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "GreaterThanOperation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x103009e5ee0L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Operation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1112406908640");
    b.alias(">");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIfFunction() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "IfFunction", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8d4298L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Function", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8296fcL);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1111785030296");
    b.aggregate("logicalTest", 0x102db8d7b0eL).target(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L).optional(false).ordered(true).multiple(false).origin("1111785044750").done();
    b.aggregate("valueIfTrue", 0x102db8e3288L).target(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L).optional(false).ordered(true).multiple(false).origin("1111785091720").done();
    b.aggregate("valueIfFalse", 0x102db8eb12fL).target(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L).optional(false).ordered(true).multiple(false).origin("1111785124143").done();
    b.alias("IF(,,)");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIntegerConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "IntegerConstant", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8aa3f9L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Constant", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1111784858617");
    b.prop("value", 0x102db8ae25bL, "1111784874587");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIsNullOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "IsNullOperation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a037c6c0bL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Operation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1142519786507");
    b.alias(".isNull");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForLessThanOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "LessThanOperation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102ea976b99L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Operation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1112037354393");
    b.alias("<");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMinusOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "MinusOperation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102dba2244aL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Operation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1111786398794");
    b.alias("-");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMultOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "MultOperation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102ff4441ddL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Operation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1112384225757");
    b.alias("*");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNotOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "NotOperation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a04135987L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Operation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1142529677703");
    b.alias("!");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNullConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "NullConstant", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a036c79c0L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Expression", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1142518741440");
    b.alias("null");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "Operation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Expression", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1111784562907");
    b.aggregate("leftOperand", 0x102db86e5b3L).target(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L).optional(false).ordered(true).multiple(false).origin("1111784613299").done();
    b.aggregate("rightOperand", 0x102db87696bL).target(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L).optional(false).ordered(true).multiple(false).origin("1111784647019").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOrOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "OrOperation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x108050ab746L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Operation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1133955954502");
    b.alias("||");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForParenthisizedExpression() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "ParenthisizedExpression", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10809d032baL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Expression", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1134036005562");
    b.aggregate("expression", 0x10809d1de13L).target(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L).optional(true).ordered(true).multiple(false).origin("1134036114963").done();
    b.alias("(");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlusOperation() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "PlusOperation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102dba0a69dL);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Operation", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1111786301085");
    b.alias("+");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "Reference", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db83846eL);
    b.class_(false, true, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Expression", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1111784391790");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringConstant() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.formulaLanguage", "StringConstant", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10804f6f702L);
    b.class_(false, false, false);
    b.super_("jetbrains.mps.samples.formulaLanguage.structure.Constant", 0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L);
    b.origin("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)/1133954660098");
    b.prop("value", 0x10804f794c0L, "1133954700480");
    b.alias("\"");
    return b.create();
  }
}
