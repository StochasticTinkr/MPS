package jetbrains.mps.samples.formulaLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(22);
  /*package*/ final ConceptDescriptor myConceptAndOperation = createDescriptorForAndOperation();
  /*package*/ final ConceptDescriptor myConceptConstant = createDescriptorForConstant();
  /*package*/ final ConceptDescriptor myConceptEqualsOperation = createDescriptorForEqualsOperation();
  /*package*/ final ConceptDescriptor myConceptExpression = createDescriptorForExpression();
  /*package*/ final ConceptDescriptor myConceptFloatingPointConstant = createDescriptorForFloatingPointConstant();
  /*package*/ final ConceptDescriptor myConceptFormula = createDescriptorForFormula();
  /*package*/ final ConceptDescriptor myConceptFunction = createDescriptorForFunction();
  /*package*/ final ConceptDescriptor myConceptGreaterThanOperation = createDescriptorForGreaterThanOperation();
  /*package*/ final ConceptDescriptor myConceptIfFunction = createDescriptorForIfFunction();
  /*package*/ final ConceptDescriptor myConceptIntegerConstant = createDescriptorForIntegerConstant();
  /*package*/ final ConceptDescriptor myConceptIsNullOperation = createDescriptorForIsNullOperation();
  /*package*/ final ConceptDescriptor myConceptLessThanOperation = createDescriptorForLessThanOperation();
  /*package*/ final ConceptDescriptor myConceptMinusOperation = createDescriptorForMinusOperation();
  /*package*/ final ConceptDescriptor myConceptMultOperation = createDescriptorForMultOperation();
  /*package*/ final ConceptDescriptor myConceptNotOperation = createDescriptorForNotOperation();
  /*package*/ final ConceptDescriptor myConceptNullConstant = createDescriptorForNullConstant();
  /*package*/ final ConceptDescriptor myConceptOperation = createDescriptorForOperation();
  /*package*/ final ConceptDescriptor myConceptOrOperation = createDescriptorForOrOperation();
  /*package*/ final ConceptDescriptor myConceptParenthisizedExpression = createDescriptorForParenthisizedExpression();
  /*package*/ final ConceptDescriptor myConceptPlusOperation = createDescriptorForPlusOperation();
  /*package*/ final ConceptDescriptor myConceptReference = createDescriptorForReference();
  /*package*/ final ConceptDescriptor myConceptStringConstant = createDescriptorForStringConstant();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptAndOperation.getId(), 0);
    myIndexMap.put(myConceptConstant.getId(), 1);
    myIndexMap.put(myConceptEqualsOperation.getId(), 2);
    myIndexMap.put(myConceptExpression.getId(), 3);
    myIndexMap.put(myConceptFloatingPointConstant.getId(), 4);
    myIndexMap.put(myConceptFormula.getId(), 5);
    myIndexMap.put(myConceptFunction.getId(), 6);
    myIndexMap.put(myConceptGreaterThanOperation.getId(), 7);
    myIndexMap.put(myConceptIfFunction.getId(), 8);
    myIndexMap.put(myConceptIntegerConstant.getId(), 9);
    myIndexMap.put(myConceptIsNullOperation.getId(), 10);
    myIndexMap.put(myConceptLessThanOperation.getId(), 11);
    myIndexMap.put(myConceptMinusOperation.getId(), 12);
    myIndexMap.put(myConceptMultOperation.getId(), 13);
    myIndexMap.put(myConceptNotOperation.getId(), 14);
    myIndexMap.put(myConceptNullConstant.getId(), 15);
    myIndexMap.put(myConceptOperation.getId(), 16);
    myIndexMap.put(myConceptOrOperation.getId(), 17);
    myIndexMap.put(myConceptParenthisizedExpression.getId(), 18);
    myIndexMap.put(myConceptPlusOperation.getId(), 19);
    myIndexMap.put(myConceptReference.getId(), 20);
    myIndexMap.put(myConceptStringConstant.getId(), 21);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAndOperation, myConceptConstant, myConceptEqualsOperation, myConceptExpression, myConceptFloatingPointConstant, myConceptFormula, myConceptFunction, myConceptGreaterThanOperation, myConceptIfFunction, myConceptIntegerConstant, myConceptIsNullOperation, myConceptLessThanOperation, myConceptMinusOperation, myConceptMultOperation, myConceptNotOperation, myConceptNullConstant, myConceptOperation, myConceptOrOperation, myConceptParenthisizedExpression, myConceptPlusOperation, myConceptReference, myConceptStringConstant);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptAndOperation;
      case 1:
        return myConceptConstant;
      case 2:
        return myConceptEqualsOperation;
      case 3:
        return myConceptExpression;
      case 4:
        return myConceptFloatingPointConstant;
      case 5:
        return myConceptFormula;
      case 6:
        return myConceptFunction;
      case 7:
        return myConceptGreaterThanOperation;
      case 8:
        return myConceptIfFunction;
      case 9:
        return myConceptIntegerConstant;
      case 10:
        return myConceptIsNullOperation;
      case 11:
        return myConceptLessThanOperation;
      case 12:
        return myConceptMinusOperation;
      case 13:
        return myConceptMultOperation;
      case 14:
        return myConceptNotOperation;
      case 15:
        return myConceptNullConstant;
      case 16:
        return myConceptOperation;
      case 17:
        return myConceptOrOperation;
      case 18:
        return myConceptParenthisizedExpression;
      case 19:
        return myConceptPlusOperation;
      case 20:
        return myConceptReference;
      case 21:
        return myConceptStringConstant;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForAndOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.AndOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x108050a5816L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("&&", "and operation").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1133955930134")).create();
  }
  private static ConceptDescriptor createDescriptorForConstant() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Constant", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111784519527")).create();
  }
  private static ConceptDescriptor createDescriptorForEqualsOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.EqualsOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10809c54870L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("==", "equals operation").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1134035290224")).create();
  }
  private static ConceptDescriptor createDescriptorForExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Expression", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111784312737")).create();
  }
  private static ConceptDescriptor createDescriptorForFloatingPointConstant() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.FloatingPointConstant", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8bab3cL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Constant").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Constant", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1033349beb2L, "value", new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1113257000626"))).properties("value").alias("", "floating point constant").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111784926012")).create();
  }
  private static ConceptDescriptor createDescriptorForFormula() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Formula", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db80c054L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x102db80ffeeL, "expression", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111784226798"))).children(new String[]{"expression"}, new boolean[]{false}).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111784210516")).create();
  }
  private static ConceptDescriptor createDescriptorForFunction() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Function", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8296fcL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111784331004")).create();
  }
  private static ConceptDescriptor createDescriptorForGreaterThanOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.GreaterThanOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x103009e5ee0L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias(">", "greater than operation").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1112406908640")).create();
  }
  private static ConceptDescriptor createDescriptorForIfFunction() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.IfFunction", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8d4298L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Function").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8296fcL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Function").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8296fcL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x102db8d7b0eL, "logicalTest", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111785044750")), new ConceptDescriptorBuilder.Link(0x102db8e3288L, "valueIfTrue", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111785091720")), new ConceptDescriptorBuilder.Link(0x102db8eb12fL, "valueIfFalse", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111785124143"))).children(new String[]{"logicalTest", "valueIfTrue", "valueIfFalse"}, new boolean[]{false, false, false}).alias("IF(,,)", "if-function").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111785030296")).create();
  }
  private static ConceptDescriptor createDescriptorForIntegerConstant() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.IntegerConstant", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8aa3f9L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Constant").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Constant", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x102db8ae25bL, "value", new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111784874587"))).properties("value").alias("", "integer constant").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111784858617")).create();
  }
  private static ConceptDescriptor createDescriptorForIsNullOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.IsNullOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a037c6c0bL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias(".isNull", "").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1142519786507")).create();
  }
  private static ConceptDescriptor createDescriptorForLessThanOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.LessThanOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102ea976b99L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("<", "less than operation").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1112037354393")).create();
  }
  private static ConceptDescriptor createDescriptorForMinusOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.MinusOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102dba2244aL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("-", "minus operation").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111786398794")).create();
  }
  private static ConceptDescriptor createDescriptorForMultOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.MultOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102ff4441ddL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("*", "multiply operation").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1112384225757")).create();
  }
  private static ConceptDescriptor createDescriptorForNotOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.NotOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a04135987L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("!", "not operation (formula language)").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1142529677703")).create();
  }
  private static ConceptDescriptor createDescriptorForNullConstant() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.NullConstant", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10a036c79c0L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).alias("null", "null expression").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1142518741440")).create();
  }
  private static ConceptDescriptor createDescriptorForOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Operation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x102db86e5b3L, "leftOperand", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111784613299")), new ConceptDescriptorBuilder.Link(0x102db87696bL, "rightOperand", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), false, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111784647019"))).children(new String[]{"leftOperand", "rightOperand"}, new boolean[]{false, false}).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111784562907")).create();
  }
  private static ConceptDescriptor createDescriptorForOrOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.OrOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x108050ab746L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("||", "or operation").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1133955954502")).create();
  }
  private static ConceptDescriptor createDescriptorForParenthisizedExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.ParenthisizedExpression", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10809d032baL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x10809d1de13L, "expression", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), true, false, false, new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1134036114963"))).children(new String[]{"expression"}, new boolean[]{false}).alias("(", "(expr)").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1134036005562")).create();
  }
  private static ConceptDescriptor createDescriptorForPlusOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.PlusOperation", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102dba0a69dL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Operation").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).parents("jetbrains.mps.samples.formulaLanguage.structure.Operation").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8620dbL)).alias("+", "plus operation").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111786301085")).create();
  }
  private static ConceptDescriptor createDescriptorForReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.Reference", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db83846eL)).super_("jetbrains.mps.samples.formulaLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L)).abstract_().sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1111784391790")).create();
  }
  private static ConceptDescriptor createDescriptorForStringConstant() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.formulaLanguage.structure.StringConstant", MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x10804f6f702L)).super_("jetbrains.mps.samples.formulaLanguage.structure.Constant").version(1).super_(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L)).parents("jetbrains.mps.samples.formulaLanguage.structure.Constant").parentIds(MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db857767L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x10804f794c0L, "value", new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1133954700480"))).properties("value").alias("\"", "string constant").sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c8959043c(jetbrains.mps.samples.formulaLanguage.structure)", "1133954660098")).create();
  }
}
