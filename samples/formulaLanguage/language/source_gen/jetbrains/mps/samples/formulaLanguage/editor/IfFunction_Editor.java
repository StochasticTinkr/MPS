package jetbrains.mps.samples.formulaLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;

public class IfFunction_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_tonzor_a(editorContext, node);
  }
  private EditorCell createCollection_tonzor_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_tonzor_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_tonzor_a0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_tonzor_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_tonzor_c0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_tonzor_d0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_tonzor_e0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_tonzor_f0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_tonzor_g0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_tonzor_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "IF(");
    editorCell.setCellId("Constant_tonzor_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_tonzor_b0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new IfFunction_Editor.logicalTestSingleRoleHandler_tonzor_b0(node, MetaAdapterFactory.getContainmentLink(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8d4298L, 0x102db8d7b0eL, "logicalTest"), editorContext);
    return provider.createCell();
  }
  private class logicalTestSingleRoleHandler_tonzor_b0 extends SingleRoleCellProvider {
    public logicalTestSingleRoleHandler_tonzor_b0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("logicalTest");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_logicalTest");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no logicalTest>";
    }
  }
  private EditorCell createConstant_tonzor_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ",");
    editorCell.setCellId("Constant_tonzor_c0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_tonzor_d0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new IfFunction_Editor.valueIfTrueSingleRoleHandler_tonzor_d0(node, MetaAdapterFactory.getContainmentLink(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8d4298L, 0x102db8e3288L, "valueIfTrue"), editorContext);
    return provider.createCell();
  }
  private class valueIfTrueSingleRoleHandler_tonzor_d0 extends SingleRoleCellProvider {
    public valueIfTrueSingleRoleHandler_tonzor_d0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("valueIfTrue");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_valueIfTrue");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no valueIfTrue>";
    }
  }
  private EditorCell createConstant_tonzor_e0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ",");
    editorCell.setCellId("Constant_tonzor_e0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_tonzor_f0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new IfFunction_Editor.valueIfFalseSingleRoleHandler_tonzor_f0(node, MetaAdapterFactory.getContainmentLink(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db8d4298L, 0x102db8eb12fL, "valueIfFalse"), editorContext);
    return provider.createCell();
  }
  private class valueIfFalseSingleRoleHandler_tonzor_f0 extends SingleRoleCellProvider {
    public valueIfFalseSingleRoleHandler_tonzor_f0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("valueIfFalse");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_valueIfFalse");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no valueIfFalse>";
    }
  }
  private EditorCell createConstant_tonzor_g0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ")");
    editorCell.setCellId("Constant_tonzor_g0");
    editorCell.setDefaultText("");
    return editorCell;
  }
}
