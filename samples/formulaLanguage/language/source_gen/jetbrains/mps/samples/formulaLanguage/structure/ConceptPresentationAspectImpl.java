package jetbrains.mps.samples.formulaLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AndOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Constant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EqualsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Expression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FloatingPointConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Formula = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Function = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GreaterThanOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntegerConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsNullOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LessThanOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MinusOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NullConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Operation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParenthisizedExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PlusOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Reference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringConstant = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AndOperation;
      case 1:
        return props_Constant;
      case 2:
        return props_EqualsOperation;
      case 3:
        return props_Expression;
      case 4:
        return props_FloatingPointConstant;
      case 5:
        return props_Formula;
      case 6:
        return props_Function;
      case 7:
        return props_GreaterThanOperation;
      case 8:
        return props_IfFunction;
      case 9:
        return props_IntegerConstant;
      case 10:
        return props_IsNullOperation;
      case 11:
        return props_LessThanOperation;
      case 12:
        return props_MinusOperation;
      case 13:
        return props_MultOperation;
      case 14:
        return props_NotOperation;
      case 15:
        return props_NullConstant;
      case 16:
        return props_Operation;
      case 17:
        return props_OrOperation;
      case 18:
        return props_ParenthisizedExpression;
      case 19:
        return props_PlusOperation;
      case 20:
        return props_Reference;
      case 21:
        return props_StringConstant;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
