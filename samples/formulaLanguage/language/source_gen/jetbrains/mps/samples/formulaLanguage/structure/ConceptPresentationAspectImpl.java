package jetbrains.mps.samples.formulaLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AndOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Constant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EqualsOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Expression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FloatingPointConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Formula = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Function = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_GreaterThanOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfFunction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntegerConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsNullOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LessThanOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MinusOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NullConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Operation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParenthisizedExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PlusOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Reference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringConstant = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AndOperation:
        return props_AndOperation;
      case LanguageConceptSwitch.Constant:
        return props_Constant;
      case LanguageConceptSwitch.EqualsOperation:
        return props_EqualsOperation;
      case LanguageConceptSwitch.Expression:
        return props_Expression;
      case LanguageConceptSwitch.FloatingPointConstant:
        return props_FloatingPointConstant;
      case LanguageConceptSwitch.Formula:
        return props_Formula;
      case LanguageConceptSwitch.Function:
        return props_Function;
      case LanguageConceptSwitch.GreaterThanOperation:
        return props_GreaterThanOperation;
      case LanguageConceptSwitch.IfFunction:
        return props_IfFunction;
      case LanguageConceptSwitch.IntegerConstant:
        return props_IntegerConstant;
      case LanguageConceptSwitch.IsNullOperation:
        return props_IsNullOperation;
      case LanguageConceptSwitch.LessThanOperation:
        return props_LessThanOperation;
      case LanguageConceptSwitch.MinusOperation:
        return props_MinusOperation;
      case LanguageConceptSwitch.MultOperation:
        return props_MultOperation;
      case LanguageConceptSwitch.NotOperation:
        return props_NotOperation;
      case LanguageConceptSwitch.NullConstant:
        return props_NullConstant;
      case LanguageConceptSwitch.Operation:
        return props_Operation;
      case LanguageConceptSwitch.OrOperation:
        return props_OrOperation;
      case LanguageConceptSwitch.ParenthisizedExpression:
        return props_ParenthisizedExpression;
      case LanguageConceptSwitch.PlusOperation:
        return props_PlusOperation;
      case LanguageConceptSwitch.Reference:
        return props_Reference;
      case LanguageConceptSwitch.StringConstant:
        return props_StringConstant;
    }
    return null;
  }
}
