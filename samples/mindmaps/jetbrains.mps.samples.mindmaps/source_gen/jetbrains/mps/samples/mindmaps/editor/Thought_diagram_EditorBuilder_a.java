package jetbrains.mps.samples.mindmaps.editor;

/*Generated by MPS */

import jetbrains.mps.editor.runtime.descriptor.AbstractEditorBuilder;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.nodeEditor.cells.jetpad.BlockCell;
import jetbrains.mps.nodeEditor.cells.jetpad.PropertyMapperCell;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.util.Pair;
import org.jetbrains.mps.openapi.model.SNodeReference;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.jetpad.mapper.Mapper;
import jetbrains.jetpad.projectional.diagram.view.DiagramNodeView;
import jetbrains.jetpad.mapper.Synchronizers;
import jetbrains.jetpad.mapper.MapperFactory;
import jetbrains.mps.lang.editor.figures.library.NamedBoxFigure;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.views.MovableContentView;
import jetbrains.jetpad.model.property.WritableProperty;
import jetbrains.jetpad.geometry.Rectangle;
import jetbrains.jetpad.projectional.view.View;
import jetbrains.mps.editor.runtime.selection.SelectionUtil;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.nodeEditor.cells.jetpad.JetpadUtils;
import jetbrains.mps.nodeEditor.cells.jetpad.DiagramCell;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.views.NodeDecoratorView;
import jetbrains.jetpad.model.property.Properties;
import jetbrains.jetpad.geometry.Vector;
import jetbrains.mps.lang.editor.diagram.runtime.jetpad.views.ResizableContentView;

/*package*/ class Thought_diagram_EditorBuilder_a extends AbstractEditorBuilder {
  @NotNull
  private SNode myNode;

  public Thought_diagram_EditorBuilder_a(@NotNull EditorContext context, @NotNull SNode node) {
    super(context);
    myNode = node;
  }

  @NotNull
  @Override
  public SNode getNode() {
    return myNode;
  }

  /*package*/ EditorCell createCell() {
    return createDiagramNode_a6gtrz_a();
  }

  private EditorCell createDiagramNode_a6gtrz_a() {
    BlockCell editorCell = new Thought_diagram_EditorBuilder_a.BlockCellImpl_a6gtrz_a(getEditorContext(), myNode);
    editorCell.setCellId("DiagramNode_a6gtrz_a");
    editorCell.setBig(true);
    editorCell.setCellContext(getCellFactory().getCellContext());
    DeleteThought.setCellActions(editorCell, myNode, getEditorContext());
    return editorCell;
  }
  private class BlockCellImpl_a6gtrz_a extends BlockCell {
    private final PropertyMapperCell<Integer> myPropertyCell_a6gtrz_a0a;
    private final PropertyMapperCell<Integer> myPropertyCell_a6gtrz_a1a;
    private final PropertyMapperCell<String> myPropertyCell_a6gtrz_a2a;
    private BlockCellImpl_a6gtrz_a(EditorContext editorContext, final SNode node) {
      super(editorContext, node);
      myPropertyCell_a6gtrz_a0a = new PropertyMapperCell<Integer>(editorContext, node) {
        protected Integer getModelPropertyValueImpl() {
          return SPropertyOperations.getInteger(node, MetaAdapterFactory.getProperty(0x33f294fd370a4a40L, 0x999b43f382910018L, 0x1198689ff15ca26L, 0x1198689ff15ca27L, "x"));
        }
        protected void setModelPropertyValueImpl(Integer value) {
          SPropertyOperations.assign(node, MetaAdapterFactory.getProperty(0x33f294fd370a4a40L, 0x999b43f382910018L, 0x1198689ff15ca26L, 0x1198689ff15ca27L, "x"), "" + (value));
        }
      };
      addEditorCell(myPropertyCell_a6gtrz_a0a);
      myPropertyCell_a6gtrz_a0a.getEditorComponent().getUpdater().getCurrentUpdateSession().registerCleanDependency(myPropertyCell_a6gtrz_a0a, new Pair<SNodeReference, String>(new SNodePointer(node), "x"));
      myPropertyCell_a6gtrz_a1a = new PropertyMapperCell<Integer>(editorContext, node) {
        protected Integer getModelPropertyValueImpl() {
          return SPropertyOperations.getInteger(node, MetaAdapterFactory.getProperty(0x33f294fd370a4a40L, 0x999b43f382910018L, 0x1198689ff15ca26L, 0x1198689ff15ca29L, "y"));
        }
        protected void setModelPropertyValueImpl(Integer value) {
          SPropertyOperations.assign(node, MetaAdapterFactory.getProperty(0x33f294fd370a4a40L, 0x999b43f382910018L, 0x1198689ff15ca26L, 0x1198689ff15ca29L, "y"), "" + (value));
        }
      };
      addEditorCell(myPropertyCell_a6gtrz_a1a);
      myPropertyCell_a6gtrz_a1a.getEditorComponent().getUpdater().getCurrentUpdateSession().registerCleanDependency(myPropertyCell_a6gtrz_a1a, new Pair<SNodeReference, String>(new SNodePointer(node), "y"));
      myPropertyCell_a6gtrz_a2a = new PropertyMapperCell<String>(editorContext, node) {
        protected String getModelPropertyValueImpl() {
          return SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
        }
        protected void setModelPropertyValueImpl(String value) {
          SPropertyOperations.assign(node, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), value);
        }
      };
      addEditorCell(myPropertyCell_a6gtrz_a2a);
      myPropertyCell_a6gtrz_a2a.getEditorComponent().getUpdater().getCurrentUpdateSession().registerCleanDependency(myPropertyCell_a6gtrz_a2a, new Pair<SNodeReference, String>(new SNodePointer(node), "name"));
      synchronize();
    }
    public void synchronize() {
      super.synchronizeViewWithModel();
      myPropertyCell_a6gtrz_a0a.synchronize();
      myPropertyCell_a6gtrz_a1a.synchronize();
      myPropertyCell_a6gtrz_a2a.synchronize();
    }
    public Mapper<SNode, DiagramNodeView> createMapper() {
      return new Mapper<SNode, DiagramNodeView>(getSNode(), createDiagramNodeView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          final DiagramNodeView diagramNodeView = getTarget();
          configuration.add(Synchronizers.forConstantRole(this, getContentViewMapperSource(), getTarget().contentView.children(), new MapperFactory<String, NamedBoxFigure>() {
            public Mapper<? extends String, ? extends NamedBoxFigure> createMapper(String block) {
              return new Mapper<String, NamedBoxFigure>(block, new NamedBoxFigure()) {
                @Override
                protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
                  super.registerSynchronizers(configuration);
                  configuration.add(Synchronizers.forProperty(getTarget().prop(MovableContentView.POSITION_X), new Runnable() {
                    public void run() {
                      updatePositionsFromModel(getTarget(), diagramNodeView);
                    }
                  }));
                  configuration.add(Synchronizers.forProperty(getTarget().prop(MovableContentView.POSITION_Y), new Runnable() {
                    public void run() {
                      updatePositionsFromModel(getTarget(), diagramNodeView);
                    }
                  }));
                  configuration.add(Synchronizers.forProperty(getTarget().bounds(), new WritableProperty<Rectangle>() {
                    public void set(Rectangle bounds) {
                      getTarget().prop(MovableContentView.POSITION_X).set(bounds.origin.x);
                      getTarget().prop(MovableContentView.POSITION_Y).set(bounds.origin.y);
                    }
                  }));
                  myPropertyCell_a6gtrz_a0a.registerSynchronizers(configuration, getTarget().prop(MovableContentView.POSITION_X));
                  myPropertyCell_a6gtrz_a1a.registerSynchronizers(configuration, getTarget().prop(MovableContentView.POSITION_Y));
                  myPropertyCell_a6gtrz_a2a.registerSynchronizers(configuration, getTarget().nameText());
                }
              };
            }
          }));
          final View targetView = this.getTarget();
          configuration.add(Synchronizers.forProperty(targetView.focused(), new WritableProperty<Boolean>() {
            public void set(Boolean isFocused) {
              if (isFocused && !(isSelected())) {
                SelectionUtil.selectCell(getContext(), getSNode(), getCellId());
              }
            }
          }));
          configuration.add(Synchronizers.forProperty(mySelectedItem, new WritableProperty<Boolean>() {
            public void set(Boolean isSelected) {
              if (isSelected) {
                for (View view : Sequence.fromIterable(JetpadUtils.getAllChildren(targetView))) {
                  if (view.focused().get()) {
                    return;
                  }
                }
                targetView.container().focusedView().set(targetView);
              } else if (!(isSelected) && targetView.focused().get()) {
                targetView.container().focusedView().set(null);
              }
            }
          }));
          configuration.add(Synchronizers.forProperty(targetView.bounds(), new WritableProperty<Rectangle>() {
            public void set(Rectangle rect) {
              DiagramCell diagramCell = getDiagramCell();
              if (diagramCell == null) {
                return;
              }
              setX(rect.origin.x + diagramCell.getX());
              setY(rect.origin.y + diagramCell.getY());
              setWidth(rect.dimension.x);
              setHeight(rect.dimension.y);
            }
          }));
        }
      };
    }
    public Mapper<SNode, NodeDecoratorView> createDecorationMapper() {
      return new Mapper<SNode, NodeDecoratorView>(getSNode(), new NodeDecoratorView()) {
        @Override
        protected void registerSynchronizers(Mapper.SynchronizersConfiguration configuration) {
          super.registerSynchronizers(configuration);
          DiagramCell diagramCell = getDiagramCell();
          if (diagramCell == null) {
            return;
          }
          final Mapper<SNode, DiagramNodeView> blockMapper = getBlockMapper();
          if (blockMapper == null) {
            return;
          }
          configuration.add(Synchronizers.forProperty(myErrorItem, getTarget().hasError));
          configuration.add(Synchronizers.forProperty(blockMapper.getTarget().focused(), getTarget().isSelected));
          final NamedBoxFigure contentView = (NamedBoxFigure) getContentView();
          configuration.add(Synchronizers.forProperty(contentView.bounds(), getTarget().bounds));
          configuration.add(Synchronizers.forProperty(Properties.constant(Boolean.TRUE), getTarget().resizable));
          configuration.add(Synchronizers.forProperty(getTarget().boundsDelta, new WritableProperty<Rectangle>() {
            public void set(Rectangle delta) {
              if (delta == null) {
                return;
              }
              Vector positionDelta = delta.origin;
              Vector sizeDelta = delta.dimension;
              blockMapper.getTarget().move(positionDelta);
              contentView.prop(ResizableContentView.PREFERRED_SIZE).set(contentView.prop(ResizableContentView.PREFERRED_SIZE).get().add(sizeDelta));
            }
          }));

        }
      };
    }
  }
}
