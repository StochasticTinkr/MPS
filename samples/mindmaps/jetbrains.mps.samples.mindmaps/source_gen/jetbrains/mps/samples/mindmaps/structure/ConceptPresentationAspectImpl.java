package jetbrains.mps.samples.mindmaps.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_CoreThrought;
  private ConceptPresentation props_MindMap;
  private ConceptPresentation props_Relationship;
  private ConceptPresentation props_Specializes;
  private ConceptPresentation props_Thought;
  private ConceptPresentation props_VisualBox;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.CoreThrought:
        if (props_CoreThrought == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_CoreThrought = cpb.create();
        }
        return props_CoreThrought;
      case LanguageConceptSwitch.MindMap:
        if (props_MindMap == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MindMap = cpb.create();
        }
        return props_MindMap;
      case LanguageConceptSwitch.Relationship:
        if (props_Relationship == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Relationship = cpb.create();
        }
        return props_Relationship;
      case LanguageConceptSwitch.Specializes:
        if (props_Specializes == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Specializes = cpb.create();
        }
        return props_Specializes;
      case LanguageConceptSwitch.Thought:
        if (props_Thought == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Thought = cpb.create();
        }
        return props_Thought;
      case LanguageConceptSwitch.VisualBox:
        if (props_VisualBox == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_VisualBox = cpb.create();
        }
        return props_VisualBox;
    }
    return null;
  }
}
