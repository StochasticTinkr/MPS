package jetbrains.mps.samples.languagePatterns.Basic.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = ((SAbstractConcept) concept);
      switch (index_xbvbvu_a0a.index(cncpt)) {
        case 0:
          return Collections.<ConceptEditor>singletonList(new Address_Editor());
        case 1:
          return Collections.<ConceptEditor>singletonList(new AddressReference_Editor());
        case 2:
          return Collections.<ConceptEditor>singletonList(new Apple_Editor());
        case 3:
          return Collections.<ConceptEditor>singletonList(new Car_Editor());
        case 4:
          return Collections.<ConceptEditor>singletonList(new CombinedPerformance_Editor());
        case 5:
          return Collections.<ConceptEditor>singletonList(new Component_Editor());
        case 6:
          return Collections.<ConceptEditor>singletonList(new ComponentUsage_Editor());
        case 7:
          return Collections.<ConceptEditor>singletonList(new Concert_Editor());
        case 8:
          return Collections.<ConceptEditor>singletonList(new Container_Editor());
        case 9:
          return Collections.<ConceptEditor>singletonList(new DrawLine_Editor());
        case 10:
          return Collections.<ConceptEditor>singletonList(new DrawRect_Editor());
        case 11:
          return Collections.<ConceptEditor>singletonList(new EmptyLine_Editor());
        case 12:
          return Collections.<ConceptEditor>singletonList(new FormDescription_Editor());
        case 13:
          return Collections.<ConceptEditor>singletonList(new FruitPlate_Editor());
        case 14:
          return Collections.<ConceptEditor>singletonList(new IncompleteCommand_Editor());
        case 15:
          return Collections.<ConceptEditor>singletonList(new Item_Editor());
        case 16:
          return Collections.<ConceptEditor>singletonList(new ItemReference_Editor());
        case 17:
          return Collections.<ConceptEditor>singletonList(new LineStyle_Editor());
        case 18:
          return Collections.<ConceptEditor>singletonList(new ListOfDrawCommands_Editor());
        case 19:
          return Collections.<ConceptEditor>singletonList(new OperationOnAddress_Editor());
        case 20:
          return Collections.<ConceptEditor>singletonList(new Orange_Editor());
        case 21:
          return Collections.<ConceptEditor>singletonList(new Participant_Editor());
        case 22:
          return Collections.<ConceptEditor>singletonList(new Performance_Editor());
        case 23:
          return Collections.<ConceptEditor>singletonList(new PerformanceWithTitle_Editor());
        case 24:
          return Collections.<ConceptEditor>singletonList(new RaceParticipant_Editor());
        case 25:
          return Collections.<ConceptEditor>singletonList(new Request_Editor());
        case 26:
          return Collections.<ConceptEditor>singletonList(new SimplifiedFormDescription_Editor());
        case 27:
          return Collections.<ConceptEditor>singletonList(new Singer_Editor());
        case 28:
          return Collections.<ConceptEditor>singletonList(new SomeForm_Editor());
        case 29:
          return Collections.<ConceptEditor>singletonList(new StringDescription_Editor());
        default:
      }
    }
    return Collections.<ConceptEditor>emptyList();
  }

  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    {
      SAbstractConcept cncpt = ((SAbstractConcept) concept);
      switch (index_xbvbvu_a0c.index(cncpt)) {
        case 0:
          if (true) {
            if ("jetbrains.mps.samples.languagePatterns.Basic.editor.CarProperties".equals(editorComponentId)) {
              return Collections.<ConceptEditorComponent>singletonList(new CarProperties());
            }
          }
          break;
        case 1:
          if (true) {
            if ("jetbrains.mps.samples.languagePatterns.Basic.editor.CommonFruitProperties".equals(editorComponentId)) {
              return Collections.<ConceptEditorComponent>singletonList(new CommonFruitProperties());
            }
          }
          break;
        case 2:
          if (true) {
            if ("jetbrains.mps.samples.languagePatterns.Basic.editor.CarProperties".equals(editorComponentId)) {
              return Collections.<ConceptEditorComponent>singletonList(new TruckProperties());
            }
          }
          break;
        default:
      }
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }

  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      switch (index_xbvbvu_a0e.index(cncpt)) {
        case 0:
          return Collections.<TransformationMenu>singletonList(new AbstractRequestDescription_TransformationMenu());
        case 1:
          return Collections.<TransformationMenu>singletonList(new DrawCommand_TransformationMenu());
        case 2:
          return Collections.<TransformationMenu>singletonList(new EmptyLine_TransformationMenu());
        default:
      }
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      switch (index_xbvbvu_a0f.index(cncpt)) {
        case 0:
          return Collections.<SubstituteMenu>singletonList(new AbstractRequestDescription_SubstituteMenu());
        case 1:
          return Collections.<SubstituteMenu>singletonList(new EmptyLine_SubstituteMenu());
        case 2:
          return Collections.<SubstituteMenu>singletonList(new IncompleteCommand_SubstituteMenu());
        default:
      }
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex index_xbvbvu_a0a = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x48a6ab8c26b3f40bL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x48a6ab8c26b53535L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae786badaL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae79f4defL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae78de950L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x4ed97160b0a7fa2aL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x4ed97160b0a7fb71L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae7895c45L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x4ed97160b0a7f9fbL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb265dade0L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb26647490L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb265d1a2bL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x1a2a793c4db2245eL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae786b02dL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x7d09f66a13005410L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x7e8fc6224ac7e021L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x7e8fc6224ac7e053L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb2666fc54L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb265d07e6L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x48a6ab8c26bb7860L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae786bb3aL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae78e59fbL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae7895ce1L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae795648bL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae79f4cedL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x1a2a793c4db22351L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x1a2a793c4db223f4L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae7895c8dL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x48a6ab8c26b3f406L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x1a2a793c4db223d5L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0c = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae79f4defL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae786b2fbL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae79f4fc1L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0e = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x1a2a793c4db2238aL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb265d1022L), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb265d1a2bL)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0f = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x1a2a793c4db2238aL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb265d1a2bL), MetaIdFactory.conceptId(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x7d09f66a13005410L)).seal();
}
