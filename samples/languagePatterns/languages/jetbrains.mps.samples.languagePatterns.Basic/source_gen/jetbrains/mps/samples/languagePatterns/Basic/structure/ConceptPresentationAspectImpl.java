package jetbrains.mps.samples.languagePatterns.Basic.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractRequestDescription;
  private ConceptPresentation props_Address;
  private ConceptPresentation props_AddressReference;
  private ConceptPresentation props_AddressType;
  private ConceptPresentation props_AgendaItem;
  private ConceptPresentation props_Apple;
  private ConceptPresentation props_Car;
  private ConceptPresentation props_CombinedPerformance;
  private ConceptPresentation props_Component;
  private ConceptPresentation props_ComponentUsage;
  private ConceptPresentation props_Concert;
  private ConceptPresentation props_Container;
  private ConceptPresentation props_DottedLine;
  private ConceptPresentation props_DrawCommand;
  private ConceptPresentation props_DrawLine;
  private ConceptPresentation props_DrawRect;
  private ConceptPresentation props_EmptyLine;
  private ConceptPresentation props_FormDescription;
  private ConceptPresentation props_Fruit;
  private ConceptPresentation props_FruitPlate;
  private ConceptPresentation props_IncompleteCommand;
  private ConceptPresentation props_Item;
  private ConceptPresentation props_ItemReference;
  private ConceptPresentation props_LineStyle;
  private ConceptPresentation props_ListOfDrawCommands;
  private ConceptPresentation props_OperationOnAddress;
  private ConceptPresentation props_Orange;
  private ConceptPresentation props_Participant;
  private ConceptPresentation props_Performance;
  private ConceptPresentation props_PerformanceWithTitle;
  private ConceptPresentation props_RaceParticipant;
  private ConceptPresentation props_Request;
  private ConceptPresentation props_SimplifiedFormDescription;
  private ConceptPresentation props_Singer;
  private ConceptPresentation props_SolidLine;
  private ConceptPresentation props_SomeForm;
  private ConceptPresentation props_StreetOperation;
  private ConceptPresentation props_StringDescription;
  private ConceptPresentation props_Truck;
  private ConceptPresentation props_ZipOperation;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractRequestDescription:
        if (props_AbstractRequestDescription == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractRequestDescription = cpb.create();
        }
        return props_AbstractRequestDescription;
      case LanguageConceptSwitch.Address:
        if (props_Address == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Address");
          props_Address = cpb.create();
        }
        return props_Address;
      case LanguageConceptSwitch.AddressReference:
        if (props_AddressReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x48a6ab8c26b53535L);
          cpb.presentationByReference(0x48a6ab8c26b53536L, "target", "", "");
          props_AddressReference = cpb.create();
        }
        return props_AddressReference;
      case LanguageConceptSwitch.AddressType:
        if (props_AddressType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("address");
          props_AddressType = cpb.create();
        }
        return props_AddressType;
      case LanguageConceptSwitch.AgendaItem:
        if (props_AgendaItem == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AgendaItem = cpb.create();
        }
        return props_AgendaItem;
      case LanguageConceptSwitch.Apple:
        if (props_Apple == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("apple");
          props_Apple = cpb.create();
        }
        return props_Apple;
      case LanguageConceptSwitch.Car:
        if (props_Car == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("car");
          props_Car = cpb.create();
        }
        return props_Car;
      case LanguageConceptSwitch.CombinedPerformance:
        if (props_CombinedPerformance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("combined performance");
          props_CombinedPerformance = cpb.create();
        }
        return props_CombinedPerformance;
      case LanguageConceptSwitch.Component:
        if (props_Component == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Component = cpb.create();
        }
        return props_Component;
      case LanguageConceptSwitch.ComponentUsage:
        if (props_ComponentUsage == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ComponentUsage = cpb.create();
        }
        return props_ComponentUsage;
      case LanguageConceptSwitch.Concert:
        if (props_Concert == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Concert = cpb.create();
        }
        return props_Concert;
      case LanguageConceptSwitch.Container:
        if (props_Container == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Container = cpb.create();
        }
        return props_Container;
      case LanguageConceptSwitch.DottedLine:
        if (props_DottedLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("dotted");
          props_DottedLine = cpb.create();
        }
        return props_DottedLine;
      case LanguageConceptSwitch.DrawCommand:
        if (props_DrawCommand == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DrawCommand = cpb.create();
        }
        return props_DrawCommand;
      case LanguageConceptSwitch.DrawLine:
        if (props_DrawLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("line");
          props_DrawLine = cpb.create();
        }
        return props_DrawLine;
      case LanguageConceptSwitch.DrawRect:
        if (props_DrawRect == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("rectangle");
          props_DrawRect = cpb.create();
        }
        return props_DrawRect;
      case LanguageConceptSwitch.EmptyLine:
        if (props_EmptyLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("<empty line>");
          props_EmptyLine = cpb.create();
        }
        return props_EmptyLine;
      case LanguageConceptSwitch.FormDescription:
        if (props_FormDescription == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("form description");
          props_FormDescription = cpb.create();
        }
        return props_FormDescription;
      case LanguageConceptSwitch.Fruit:
        if (props_Fruit == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Fruit = cpb.create();
        }
        return props_Fruit;
      case LanguageConceptSwitch.FruitPlate:
        if (props_FruitPlate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FruitPlate = cpb.create();
        }
        return props_FruitPlate;
      case LanguageConceptSwitch.IncompleteCommand:
        if (props_IncompleteCommand == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("IncompleteCommand");
          props_IncompleteCommand = cpb.create();
        }
        return props_IncompleteCommand;
      case LanguageConceptSwitch.Item:
        if (props_Item == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Item = cpb.create();
        }
        return props_Item;
      case LanguageConceptSwitch.ItemReference:
        if (props_ItemReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x7e8fc6224ac7e053L);
          cpb.presentationByReference(0x7e8fc6224ac7e054L, "item", "", "");
          props_ItemReference = cpb.create();
        }
        return props_ItemReference;
      case LanguageConceptSwitch.LineStyle:
        if (props_LineStyle == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_LineStyle = cpb.create();
        }
        return props_LineStyle;
      case LanguageConceptSwitch.ListOfDrawCommands:
        if (props_ListOfDrawCommands == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ListOfDrawCommands = cpb.create();
        }
        return props_ListOfDrawCommands;
      case LanguageConceptSwitch.OperationOnAddress:
        if (props_OperationOnAddress == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_OperationOnAddress = cpb.create();
        }
        return props_OperationOnAddress;
      case LanguageConceptSwitch.Orange:
        if (props_Orange == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("orange");
          props_Orange = cpb.create();
        }
        return props_Orange;
      case LanguageConceptSwitch.Participant:
        if (props_Participant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae78e59fbL);
          cpb.presentationByReference(0x34c8853ae78e59fcL, "singer", "", "");
          props_Participant = cpb.create();
        }
        return props_Participant;
      case LanguageConceptSwitch.Performance:
        if (props_Performance == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae7895ce1L);
          cpb.presentationByReference(0x34c8853ae7895ce2L, "singer", "", "");
          props_Performance = cpb.create();
        }
        return props_Performance;
      case LanguageConceptSwitch.PerformanceWithTitle:
        if (props_PerformanceWithTitle == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("titled performance");
          props_PerformanceWithTitle = cpb.create();
        }
        return props_PerformanceWithTitle;
      case LanguageConceptSwitch.RaceParticipant:
        if (props_RaceParticipant == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_RaceParticipant = cpb.create();
        }
        return props_RaceParticipant;
      case LanguageConceptSwitch.Request:
        if (props_Request == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Request = cpb.create();
        }
        return props_Request;
      case LanguageConceptSwitch.SimplifiedFormDescription:
        if (props_SimplifiedFormDescription == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("simplified form description");
          props_SimplifiedFormDescription = cpb.create();
        }
        return props_SimplifiedFormDescription;
      case LanguageConceptSwitch.Singer:
        if (props_Singer == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Singer = cpb.create();
        }
        return props_Singer;
      case LanguageConceptSwitch.SolidLine:
        if (props_SolidLine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("solid");
          props_SolidLine = cpb.create();
        }
        return props_SolidLine;
      case LanguageConceptSwitch.SomeForm:
        if (props_SomeForm == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_SomeForm = cpb.create();
        }
        return props_SomeForm;
      case LanguageConceptSwitch.StreetOperation:
        if (props_StreetOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("street");
          props_StreetOperation = cpb.create();
        }
        return props_StreetOperation;
      case LanguageConceptSwitch.StringDescription:
        if (props_StringDescription == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("string description");
          props_StringDescription = cpb.create();
        }
        return props_StringDescription;
      case LanguageConceptSwitch.Truck:
        if (props_Truck == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("truck");
          props_Truck = cpb.create();
        }
        return props_Truck;
      case LanguageConceptSwitch.ZipOperation:
        if (props_ZipOperation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("zip");
          props_ZipOperation = cpb.create();
        }
        return props_ZipOperation;
    }
    return null;
  }
}
