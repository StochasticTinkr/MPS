package jetbrains.mps.samples.languagePatterns.Basic.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractRequestDescription = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Address = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AddressReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AgendaItem = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Apple = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Car = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CombinedPerformance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Component = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ComponentUsage = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Concert = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Container = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DottedLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DrawCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DrawLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DrawRect = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmptyLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FormDescription = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Fruit = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FruitPlate = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IncompleteCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Item = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ItemReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LineStyle = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ListOfDrawCommands = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationOnAddress = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Orange = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Participant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Performance = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PerformanceWithTitle = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RaceParticipant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Request = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimplifiedFormDescription = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Singer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SolidLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SomeForm = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StreetOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringDescription = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Truck = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ZipOperation = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractRequestDescription:
        return props_AbstractRequestDescription;
      case LanguageConceptSwitch.Address:
        return props_Address;
      case LanguageConceptSwitch.AddressReference:
        return props_AddressReference;
      case LanguageConceptSwitch.AgendaItem:
        return props_AgendaItem;
      case LanguageConceptSwitch.Apple:
        return props_Apple;
      case LanguageConceptSwitch.Car:
        return props_Car;
      case LanguageConceptSwitch.CombinedPerformance:
        return props_CombinedPerformance;
      case LanguageConceptSwitch.Component:
        return props_Component;
      case LanguageConceptSwitch.ComponentUsage:
        return props_ComponentUsage;
      case LanguageConceptSwitch.Concert:
        return props_Concert;
      case LanguageConceptSwitch.Container:
        return props_Container;
      case LanguageConceptSwitch.DottedLine:
        return props_DottedLine;
      case LanguageConceptSwitch.DrawCommand:
        return props_DrawCommand;
      case LanguageConceptSwitch.DrawLine:
        return props_DrawLine;
      case LanguageConceptSwitch.DrawRect:
        return props_DrawRect;
      case LanguageConceptSwitch.EmptyLine:
        return props_EmptyLine;
      case LanguageConceptSwitch.FormDescription:
        return props_FormDescription;
      case LanguageConceptSwitch.Fruit:
        return props_Fruit;
      case LanguageConceptSwitch.FruitPlate:
        return props_FruitPlate;
      case LanguageConceptSwitch.IncompleteCommand:
        return props_IncompleteCommand;
      case LanguageConceptSwitch.Item:
        return props_Item;
      case LanguageConceptSwitch.ItemReference:
        return props_ItemReference;
      case LanguageConceptSwitch.LineStyle:
        return props_LineStyle;
      case LanguageConceptSwitch.ListOfDrawCommands:
        return props_ListOfDrawCommands;
      case LanguageConceptSwitch.OperationOnAddress:
        return props_OperationOnAddress;
      case LanguageConceptSwitch.Orange:
        return props_Orange;
      case LanguageConceptSwitch.Participant:
        return props_Participant;
      case LanguageConceptSwitch.Performance:
        return props_Performance;
      case LanguageConceptSwitch.PerformanceWithTitle:
        return props_PerformanceWithTitle;
      case LanguageConceptSwitch.RaceParticipant:
        return props_RaceParticipant;
      case LanguageConceptSwitch.Request:
        return props_Request;
      case LanguageConceptSwitch.SimplifiedFormDescription:
        return props_SimplifiedFormDescription;
      case LanguageConceptSwitch.Singer:
        return props_Singer;
      case LanguageConceptSwitch.SolidLine:
        return props_SolidLine;
      case LanguageConceptSwitch.SomeForm:
        return props_SomeForm;
      case LanguageConceptSwitch.StreetOperation:
        return props_StreetOperation;
      case LanguageConceptSwitch.StringDescription:
        return props_StringDescription;
      case LanguageConceptSwitch.Truck:
        return props_Truck;
      case LanguageConceptSwitch.ZipOperation:
        return props_ZipOperation;
    }
    return null;
  }
}
