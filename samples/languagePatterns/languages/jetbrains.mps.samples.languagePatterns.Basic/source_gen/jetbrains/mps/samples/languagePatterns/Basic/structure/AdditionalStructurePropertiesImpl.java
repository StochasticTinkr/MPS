package jetbrains.mps.samples.languagePatterns.Basic.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_AbstractRequestDescription = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Address = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AddressReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AgendaItem = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Apple = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Car = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CombinedPerformance = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Component = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ComponentUsage = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Concert = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Container = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DottedLine = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DrawCommand = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DrawLine = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DrawRect = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EmptyLine = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_FormDescription = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Fruit = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_FruitPlate = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IncompleteCommand = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Item = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ItemReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LineStyle = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ListOfDrawCommands = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_OperationOnAddress = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Orange = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Participant = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Performance = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PerformanceWithTitle = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RaceParticipant = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Request = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SimplifiedFormDescription = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Singer = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SolidLine = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SomeForm = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StreetOperation = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_StringDescription = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Truck = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ZipOperation = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0ob.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractRequestDescription;
          }
          break;
        case 1:
          if (true) {
            return props_Address;
          }
          break;
        case 2:
          if (true) {
            return props_AddressReference;
          }
          break;
        case 3:
          if (true) {
            return props_AgendaItem;
          }
          break;
        case 4:
          if (true) {
            return props_Apple;
          }
          break;
        case 5:
          if (true) {
            return props_Car;
          }
          break;
        case 6:
          if (true) {
            return props_CombinedPerformance;
          }
          break;
        case 7:
          if (true) {
            return props_Component;
          }
          break;
        case 8:
          if (true) {
            return props_ComponentUsage;
          }
          break;
        case 9:
          if (true) {
            return props_Concert;
          }
          break;
        case 10:
          if (true) {
            return props_Container;
          }
          break;
        case 11:
          if (true) {
            return props_DottedLine;
          }
          break;
        case 12:
          if (true) {
            return props_DrawCommand;
          }
          break;
        case 13:
          if (true) {
            return props_DrawLine;
          }
          break;
        case 14:
          if (true) {
            return props_DrawRect;
          }
          break;
        case 15:
          if (true) {
            return props_EmptyLine;
          }
          break;
        case 16:
          if (true) {
            return props_FormDescription;
          }
          break;
        case 17:
          if (true) {
            return props_Fruit;
          }
          break;
        case 18:
          if (true) {
            return props_FruitPlate;
          }
          break;
        case 19:
          if (true) {
            return props_IncompleteCommand;
          }
          break;
        case 20:
          if (true) {
            return props_Item;
          }
          break;
        case 21:
          if (true) {
            return props_ItemReference;
          }
          break;
        case 22:
          if (true) {
            return props_LineStyle;
          }
          break;
        case 23:
          if (true) {
            return props_ListOfDrawCommands;
          }
          break;
        case 24:
          if (true) {
            return props_OperationOnAddress;
          }
          break;
        case 25:
          if (true) {
            return props_Orange;
          }
          break;
        case 26:
          if (true) {
            return props_Participant;
          }
          break;
        case 27:
          if (true) {
            return props_Performance;
          }
          break;
        case 28:
          if (true) {
            return props_PerformanceWithTitle;
          }
          break;
        case 29:
          if (true) {
            return props_RaceParticipant;
          }
          break;
        case 30:
          if (true) {
            return props_Request;
          }
          break;
        case 31:
          if (true) {
            return props_SimplifiedFormDescription;
          }
          break;
        case 32:
          if (true) {
            return props_Singer;
          }
          break;
        case 33:
          if (true) {
            return props_SolidLine;
          }
          break;
        case 34:
          if (true) {
            return props_SomeForm;
          }
          break;
        case 35:
          if (true) {
            return props_StreetOperation;
          }
          break;
        case 36:
          if (true) {
            return props_StringDescription;
          }
          break;
        case 37:
          if (true) {
            return props_Truck;
          }
          break;
        case 38:
          if (true) {
            return props_ZipOperation;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0ob = buildConceptIndices(MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x1a2a793c4db2238aL, "AbstractRequestDescription"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x48a6ab8c26b3f40bL, "Address"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x48a6ab8c26b53535L, "AddressReference"), MetaAdapterFactory.getInterfaceConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae78db30bL, "AgendaItem"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae786badaL, "Apple"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae79f4defL, "Car"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae78de950L, "CombinedPerformance"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x4ed97160b0a7fa2aL, "Component"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x4ed97160b0a7fb71L, "ComponentUsage"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae7895c45L, "Concert"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x4ed97160b0a7f9fbL, "Container"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb2666ff96L, "DottedLine"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb265d1022L, "DrawCommand"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb265dade0L, "DrawLine"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb26647490L, "DrawRect"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb265d1a2bL, "EmptyLine"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x1a2a793c4db2245eL, "FormDescription"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae786b2fbL, "Fruit"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae786b02dL, "FruitPlate"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x7d09f66a13005410L, "IncompleteCommand"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x7e8fc6224ac7e021L, "Item"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x7e8fc6224ac7e053L, "ItemReference"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb2666fc54L, "LineStyle"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb265d07e6L, "ListOfDrawCommands"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x48a6ab8c26bb7860L, "OperationOnAddress"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae786bb3aL, "Orange"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae78e59fbL, "Participant"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae7895ce1L, "Performance"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae795648bL, "PerformanceWithTitle"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae79f4cedL, "RaceParticipant"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x1a2a793c4db22351L, "Request"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x1a2a793c4db223f4L, "SimplifiedFormDescription"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae7895c8dL, "Singer"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x313e78bb2666fc55L, "SolidLine"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x48a6ab8c26b3f406L, "SomeForm"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x48a6ab8c26b9b2e7L, "StreetOperation"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x1a2a793c4db223d5L, "StringDescription"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x34c8853ae79f4fc1L, "Truck"), MetaAdapterFactory.getConcept(0x7a6f7ef73988464bL, 0x8cc51182671c136eL, 0x48a6ab8c26b8b81dL, "ZipOperation"));
}
