package jetbrains.mps.samples.StateChart.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_ChartOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmptyOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Event = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Log = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OperationsList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Raise = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_State = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StateChart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Transition = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.ChartOperation:
        return props_ChartOperation;
      case LanguageConceptSwitch.EmptyOperation:
        return props_EmptyOperation;
      case LanguageConceptSwitch.Event:
        return props_Event;
      case LanguageConceptSwitch.Log:
        return props_Log;
      case LanguageConceptSwitch.OperationsList:
        return props_OperationsList;
      case LanguageConceptSwitch.Raise:
        return props_Raise;
      case LanguageConceptSwitch.State:
        return props_State;
      case LanguageConceptSwitch.StateChart:
        return props_StateChart;
      case LanguageConceptSwitch.Transition:
        return props_Transition;
    }
    return null;
  }
}
