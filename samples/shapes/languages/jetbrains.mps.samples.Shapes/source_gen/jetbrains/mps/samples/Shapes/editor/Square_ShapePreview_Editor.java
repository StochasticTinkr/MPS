package jetbrains.mps.samples.Shapes.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import java.util.Collection;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.baseLanguage.editor.BaseLanguageStyle_StyleSheet;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import javax.swing.JPanel;
import java.awt.Graphics;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.samples.Shapes.behavior.Shape__BehaviorDescriptor;
import java.awt.Dimension;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class Square_ShapePreview_Editor extends DefaultNodeEditor {
  private Collection<String> myContextHints = Arrays.asList(new String[]{"jetbrains.mps.samples.Shapes.editor.Shapes.ShapePreview"});
  @Override
  public Collection<String> getContextHints() {
    return myContextHints;
  }
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_ukdplt_a(editorContext, node);
  }
  private EditorCell createCollection_ukdplt_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_ukdplt_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_ukdplt_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ukdplt_b0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_ukdplt_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ukdplt_d0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_ukdplt_e0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ukdplt_f0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_ukdplt_g0(editorContext, node));
    editorCell.addEditorCell(this.createComponent_ukdplt_h0(editorContext, node));
    editorCell.addEditorCell(this.createJComponent_ukdplt_i0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_ukdplt_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "square");
    editorCell.setCellId("Constant_ukdplt_a0");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_KeyWord(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_ukdplt_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "x:");
    editorCell.setCellId("Constant_ukdplt_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_ukdplt_c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("upperLeftX");
    provider.setNoTargetText("<no upperLeftX>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_upperLeftX");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_ukdplt_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "y:");
    editorCell.setCellId("Constant_ukdplt_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_ukdplt_e0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("upperLeftY");
    provider.setNoTargetText("<no upperLeftY>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_upperLeftY");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_ukdplt_f0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "size:");
    editorCell.setCellId("Constant_ukdplt_f0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_ukdplt_g0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("size");
    provider.setNoTargetText("<no size>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_size");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createComponent_ukdplt_h0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = editorContext.getCellFactory().createEditorComponentCell(node, "jetbrains.mps.samples.Shapes.editor.ShapeColor");
    return editorCell;
  }
  private EditorCell createJComponent_ukdplt_i0(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, Square_ShapePreview_Editor._QueryFunction_JComponent_ukdplt_a8a(node, editorContext), "_ukdplt_i0");
    editorCell.setCellId("JComponent_ukdplt_i0");
    return editorCell;
  }
  private static JComponent _QueryFunction_JComponent_ukdplt_a8a(final SNode node, final EditorContext editorContext) {
    return new JPanel() {

      @Override
      protected void paintComponent(final Graphics graphics) {
        setOpaque(false);
        super.paintComponent(graphics);
        SNodeOperations.getModel(node).getRepository().getModelAccess().runReadAction(new Runnable() {
          public void run() {
            Shape__BehaviorDescriptor.drawShapeAt_id3u6SZi0POQS.invoke(node, graphics, ((int) 10), ((int) 10));
          }
        });
      }

      @Override
      public Dimension getPreferredSize() {
        final Dimension dimension = new Dimension();

        SNodeOperations.getModel(node).getRepository().getModelAccess().runReadAction(new Runnable() {
          public void run() {
            dimension.width = 20 + SPropertyOperations.getInteger(node, MetaAdapterFactory.getProperty(0x16bafbb4c6cd4cc5L, 0x83327c6de8729b3fL, 0x51dcaa29974fc1a2L, 0x51dcaa29974fc1a8L, "size"));
            dimension.height = 20 + SPropertyOperations.getInteger(node, MetaAdapterFactory.getProperty(0x16bafbb4c6cd4cc5L, 0x83327c6de8729b3fL, 0x51dcaa29974fc1a2L, 0x51dcaa29974fc1a8L, "size"));
          }
        });
        return dimension;

      }
    };
  }
}
