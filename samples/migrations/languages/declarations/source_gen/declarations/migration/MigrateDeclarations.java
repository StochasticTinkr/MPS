package declarations.migration;

/*Generated by MPS */

import jetbrains.mps.lang.migration.runtime.base.MigrationScriptBase;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SModule;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModuleOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.lang.smodel.query.runtime.CommandUtil;
import jetbrains.mps.lang.smodel.query.runtime.QueryExecutionContext;
import java.util.Collection;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import org.apache.log4j.Level;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptReference;

public class MigrateDeclarations extends MigrationScriptBase {
  private static final Logger LOG = LogManager.getLogger(MigrateDeclarations.class);
  public String getCaption() {
    return "migrate the declarations using a TransformStatement";
  }
  @Override
  public boolean isRerunnable() {
    return false;
  }
  public SNode execute(final SModule m) {
    return doExecute(m);
  }
  public SNode doExecute(final SModule m) {
    Iterable<SModel> models = Sequence.fromIterable(((Iterable<SModel>) m.getModels())).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return !(SModuleOperations.isAspect(it, "migration"));
      }
    });

    // create the produced data to hold mapping between old and new ids of the instances 
    final SNode res = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x1b931c975a732f8bL, "declarations.structure.MigrationData_WholeModule"));

    {
      final SearchScope scope = CommandUtil.createScope(models);
      QueryExecutionContext context = new QueryExecutionContext() {
        public SearchScope getDefaultSearchScope() {
          return scope;
        }
      };
      Collection<SNode> components = CommandUtil.instances(CommandUtil.selectScope(null, context), MetaAdapterFactory.getConcept(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x6aff2c1049316cdaL, "declarations.structure.OldComponent"), false);
      CollectionSequence.fromCollection(components).visitAll(new IVisitor<SNode>() {
        public void visit(SNode oldNode) {
          final SNode newNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x6aff2c1049329d71L, "declarations.structure.NewComponent"));
          SPropertyOperations.set(newNode, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), SPropertyOperations.getString(oldNode, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
          ListSequence.fromList(SLinkOperations.getChildren(oldNode, MetaAdapterFactory.getContainmentLink(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x6aff2c1049316cdaL, 0x6aff2c104931bb27L, "member"))).visitAll(new IVisitor<SNode>() {
            public void visit(SNode oldMember) {
              ListSequence.fromList(SLinkOperations.getChildren(newNode, MetaAdapterFactory.getContainmentLink(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x6aff2c1049329d71L, 0x6aff2c1049329d74L, "member"))).addElement(oldMember);
            }
          });

          // add it to the model 
          SModelOperations.addRootNode(SNodeOperations.getModel(oldNode), newNode);

          // store the id mapping 
          SNode data = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x1b931c975a732860L, "declarations.structure.MigrationData_Component"));
          SPropertyOperations.set(data, MetaAdapterFactory.getProperty(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x1b931c975a732860L, 0x1b931c975a732f6dL, "oldId"), oldNode.getNodeId().toString());
          SPropertyOperations.set(data, MetaAdapterFactory.getProperty(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x1b931c975a732860L, 0x1b931c975a732f7bL, "newId"), newNode.getNodeId().toString());
          ListSequence.fromList(SLinkOperations.getChildren(res, MetaAdapterFactory.getContainmentLink(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x1b931c975a732f8bL, 0x1b931c975a732f9aL, "entry"))).addElement(data);
        }
      });
      // remove the old instances from their models 
      CollectionSequence.fromCollection(components).visitAll(new IVisitor<SNode>() {
        public void visit(SNode it) {
          SNodeOperations.deleteNode(it);
        }
      });
    }
    // return the produced data 
    if (LOG.isEnabledFor(Level.WARN)) {
      LOG.warn("Returning migration data: " + SLinkOperations.getChildren(res, MetaAdapterFactory.getContainmentLink(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x1b931c975a732f8bL, 0x1b931c975a732f9aL, "entry")));
    }
    return res;
  }
  public MigrationScriptReference getDescriptor() {
    return new MigrationScriptReference(MetaAdapterFactory.getLanguage(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, "declarations"), 0);
  }

}
