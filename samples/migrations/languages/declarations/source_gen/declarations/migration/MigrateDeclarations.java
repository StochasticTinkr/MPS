package declarations.migration;

/*Generated by MPS */

import jetbrains.mps.lang.migration.runtime.base.MigrationScriptBase;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SModule;
import jetbrains.mps.lang.pattern.GeneratedMatchingPattern;
import jetbrains.mps.internal.collections.runtime.Sequence;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.ITranslator2;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModelOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModuleOperations;
import jetbrains.mps.internal.collections.runtime.ISelector;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.util.Computable;
import java.util.List;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptReference;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.pattern.IMatchingPattern;
import org.jetbrains.mps.openapi.language.SConcept;
import org.jetbrains.mps.openapi.model.SNodeAccessUtil;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;
import jetbrains.mps.lang.typesystem.runtime.HUtil;

public class MigrateDeclarations extends MigrationScriptBase {
  public String getCaption() {
    return "migrate the declarations using a TransformStatement";
  }
  @Override
  public boolean isRerunnable() {
    return false;
  }
  public SNode execute(final SModule m) {
    {
      final GeneratedMatchingPattern pattern = new MigrateDeclarations.Pattern_9wc3oy_a0a0a0a2();
      Sequence.fromIterable(((Iterable<SModel>) m.getModels())).translate(new ITranslator2<SModel, SNode>() {
        public Iterable<SNode> translate(SModel it) {
          return SModelOperations.nodes(it, SNodeOperations.asSConcept(pattern.getConcept()));
        }
      }).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return pattern.match(it);
        }
      }).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return !(isInTransformPattern(it));
        }
      }).where(new IWhereFilter<SNode>() {
        public boolean accept(SNode n) {
          return !(SModuleOperations.isAspect(SNodeOperations.getModel(n), "migration"));
        }
      }).sort(new ISelector<SNode, Integer>() {
        public Integer select(SNode it) {
          return ListSequence.fromList(SNodeOperations.getNodeAncestors(it, null, false)).count();
        }
      }, false).visitAll(new IVisitor<SNode>() {
        public void visit(final SNode nodeToMigrate) {
          pattern.match(nodeToMigrate);
          applyTransormMigration(nodeToMigrate, new Computable<SNode>() {
            public SNode compute() {
              return _quotation_createNode_9wc3oy_a0a0f(MigrationScriptBase.detachListPatternVariable(((List<SNode>) pattern.getFieldValue("patternVar_deps"))), ((String) pattern.getFieldValue("patternVar_name")));
            }
          }, null);
        }
      });
    }
    return null;
  }
  public MigrationScriptReference getDescriptor() {
    return new MigrationScriptReference(MetaAdapterFactory.getLanguage(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, "declarations"), 0);
  }

  public static class Pattern_9wc3oy_a0a0a0a2 extends GeneratedMatchingPattern implements IMatchingPattern {
    /*package*/ List<SNode> patternVar_deps;
    /*package*/ String patternVar_name;
    public Pattern_9wc3oy_a0a0a0a2() {
    }
    public SConcept getConcept() {
      return MetaAdapterFactory.getConcept(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x6aff2c1049316cdaL, "declarations.structure.OldComponent");
    }
    public boolean match(SNode nodeToMatch) {
      {
        SNode nodeToMatch_9wc3oy_a0a0f = nodeToMatch;
        if (!(MetaAdapterFactory.getConcept(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x6aff2c1049316cdaL, "declarations.structure.OldComponent").equals(nodeToMatch_9wc3oy_a0a0f.getConcept()))) {
          return false;
        }
        patternVar_name = SNodeAccessUtil.getProperty(nodeToMatch_9wc3oy_a0a0f, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"));
        {
          SContainmentLink childRole_9wc3oy_ = MetaAdapterFactory.getContainmentLink(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x6aff2c1049316cdaL, 0x6aff2c104931bb27L, "member");
          this.patternVar_deps = ListSequence.fromList(new ArrayList<SNode>());
          for (SNode childVar : nodeToMatch_9wc3oy_a0a0f.getChildren(childRole_9wc3oy_)) {
            ListSequence.fromList(this.patternVar_deps).addElement(childVar);
          }
        }
      }
      return true;
    }
    public boolean hasAntiquotations() {
      return false;
    }
    public void fillFieldValuesFrom(GeneratedMatchingPattern pattern) {
      if (pattern != null && pattern.getClass() == this.getClass()) {
        patternVar_deps = (List<SNode>) pattern.getFieldValue("patternVar_deps");
        patternVar_name = (String) pattern.getFieldValue("patternVar_name");
      }
    }
    public Object getFieldValue(String fieldName) {
      if ("patternVar_deps".equals(fieldName)) {
        return patternVar_deps;
      }
      if ("patternVar_name".equals(fieldName)) {
        return patternVar_name;
      }
      return null;
    }
    public void performActions(Object o) {
    }
  }
  private static SNode _quotation_createNode_9wc3oy_a0a0f(Object parameter_1, Object parameter_2) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode quotedNode_3 = null;
    SNode quotedNode_4 = null;
    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x6aff2c1049329d71L, "declarations.structure.NewComponent"), null, null, false);
    SNodeAccessUtil.setProperty(quotedNode_3, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), (String) parameter_2);
    {
      List<SNode> nodes = (List<SNode>) parameter_1;
      for (SNode child : nodes) {
        quotedNode_3.addChild(MetaAdapterFactory.getContainmentLink(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x6aff2c1049329d71L, 0x6aff2c1049329d74L, "member"), HUtil.copyIfNecessary(child));
      }
    }
    return quotedNode_3;
  }
}
