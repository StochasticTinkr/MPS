package references.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(2);
  /*package*/ final ConceptDescriptor myConceptNewComponentRef = createDescriptorForNewComponentRef();
  /*package*/ final ConceptDescriptor myConceptOldComponentRef = createDescriptorForOldComponentRef();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptNewComponentRef.getId(), 0);
    myIndexMap.put(myConceptOldComponentRef.getId(), 1);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptNewComponentRef, myConceptOldComponentRef);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptNewComponentRef;
      case 1:
        return myConceptOldComponentRef;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForNewComponentRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("references", "NewComponentRef", 0x1610048531ac4899L, 0x91122289e22843ddL, 0x6aff2c104932a6c9L);
    b.class_(false, false, false);
    b.parent(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x6aff2c104932a602L);
    b.origin("r:e4cb768c-551e-430a-8374-9cbd0ea2f656(references.structure)/7709929535540733641");
    b.associate("target", 0x6aff2c104932a6caL).target(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x6aff2c1049329d71L).optional(false).origin("7709929535540733642").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOldComponentRef() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("references", "OldComponentRef", 0x1610048531ac4899L, 0x91122289e22843ddL, 0x6aff2c104931574dL);
    b.class_(false, false, false);
    b.parent(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x6aff2c104931bb26L);
    b.origin("r:e4cb768c-551e-430a-8374-9cbd0ea2f656(references.structure)/7709929535540647757");
    b.associate("target", 0x6aff2c104932a69aL).target(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x6aff2c1049316cdaL).optional(false).origin("7709929535540733594").done();
    return b.create();
  }
}
