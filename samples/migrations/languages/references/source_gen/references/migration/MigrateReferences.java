package references.migration;

/*Generated by MPS */

import jetbrains.mps.lang.migration.runtime.base.MigrationScriptBase;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.model.SNode;
import org.jetbrains.mps.openapi.module.SModule;
import java.util.Map;
import jetbrains.mps.lang.migration.runtime.base.MigrationScriptReference;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SModel;
import jetbrains.mps.internal.collections.runtime.Sequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SModuleOperations;
import org.jetbrains.mps.openapi.module.SearchScope;
import jetbrains.mps.lang.smodel.query.runtime.CommandUtil;
import jetbrains.mps.lang.smodel.query.runtime.QueryExecutionContext;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import jetbrains.mps.internal.collections.runtime.IVisitor;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import org.apache.log4j.Level;
import org.jetbrains.mps.openapi.model.SReference;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.ArrayList;

public class MigrateReferences extends MigrationScriptBase {
  private static final Logger LOG = LogManager.getLogger(MigrateReferences.class);
  public String getCaption() {
    return "migrate the references using a TransformStatement";
  }
  @Override
  public boolean isRerunnable() {
    return false;
  }
  public SNode execute(final SModule m) {
    doExecute(m);
    return null;
  }
  public void doExecute(final SModule m) {
    final Map<SModule, SNode> declarationsData = getDataCollector().collectData(m, new MigrationScriptReference(MetaAdapterFactory.getLanguage(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, "declarations"), 0));
    Iterable<SModel> models = Sequence.fromIterable(((Iterable<SModel>) m.getModels())).where(new IWhereFilter<SModel>() {
      public boolean accept(SModel it) {
        return !(SModuleOperations.isAspect(it, "migration"));
      }
    });

    // the received data are of a map type - mapping modules to their respective migration information 
    final Map<SModule, SNode> requiredData = declarationsData;


    {
      final SearchScope scope = CommandUtil.createScope(models);
      QueryExecutionContext context = new QueryExecutionContext() {
        public SearchScope getDefaultSearchScope() {
          return scope;
        }
      };
      CollectionSequence.fromCollection(CommandUtil.instances(CommandUtil.selectScope(null, context), MetaAdapterFactory.getConcept(0x1610048531ac4899L, 0x91122289e22843ddL, 0x6aff2c104931574dL, "references.structure.OldComponentRef"), false)).visitAll(new IVisitor<SNode>() {
        public void visit(SNode oldNode) {
          SNode newNode = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0x1610048531ac4899L, 0x91122289e22843ddL, 0x6aff2c104932a6c9L, "references.structure.NewComponentRef"));
          if (LOG.isEnabledFor(Level.WARN)) {
            LOG.warn("Received migration data: " + requiredData);
          }
          // find the target of the old reference and its containing model 
          final SReference oldRef = oldNode.getReference(MetaAdapterFactory.getReferenceLink(0x1610048531ac4899L, 0x91122289e22843ddL, 0x6aff2c104931574dL, 0x6aff2c104932a69aL, "target"));
          SModel oldModel = oldRef.getTargetSModelReference().resolve(m.getRepository());

          // get the id of the component that the old component has been migrated into 
          SNode newNodeId = ListSequence.fromList(SLinkOperations.getChildren(MapSequence.fromMap(requiredData).get(oldModel.getModule()), MetaAdapterFactory.getContainmentLink(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x1b931c975a732f8bL, 0x1b931c975a732f9aL, "entry"))).findFirst(new IWhereFilter<SNode>() {
            public boolean accept(SNode it) {
              return SPropertyOperations.getString(it, MetaAdapterFactory.getProperty(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x1b931c975a732860L, 0x1b931c975a732f6dL, "oldId")).equals(oldRef.getTargetNodeId().toString());
            }
          });

          // get the new component instance 
          SNode newTarget = oldModel.getNode(PersistenceFacade.getInstance().createNodeId(SPropertyOperations.getString(newNodeId, MetaAdapterFactory.getProperty(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, 0x1b931c975a732860L, 0x1b931c975a732f7bL, "newId"))));

          SLinkOperations.setTarget(newNode, MetaAdapterFactory.getReferenceLink(0x1610048531ac4899L, 0x91122289e22843ddL, 0x6aff2c104932a6c9L, 0x6aff2c104932a6caL, "target"), ((SNode) newTarget));
          // replace the old reference in the model with the newly created one 
          SNodeOperations.replaceWithAnother(oldNode, newNode);

        }
      });
    }
  }
  public Iterable<MigrationScriptReference> requiresData() {
    return ListSequence.fromListAndArray(new ArrayList<MigrationScriptReference>(), new MigrationScriptReference(MetaAdapterFactory.getLanguage(0x1d2b03a474044a1eL, 0x939c9c1c316327e7L, "declarations"), 0));
  }
  public MigrationScriptReference getDescriptor() {
    return new MigrationScriptReference(MetaAdapterFactory.getLanguage(0x1610048531ac4899L, 0x91122289e22843ddL, "references"), 0);
  }

}
