package decl.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_DeclMigrationData_Component = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DeclMigrationData_WholeModule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NewComponent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NewComponentMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OldComponent = new ConceptPresentationBuilder().deprecated().create();
  private final ConceptPresentation props_OldComponentMember = new ConceptPresentationBuilder().deprecated().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("9de7c5ce-ea6f-4fb4-a7ba-45e62b53cbad"), "decl")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_DeclMigrationData_Component;
      case 1:
        return props_DeclMigrationData_WholeModule;
      case 2:
        return props_NewComponent;
      case 3:
        return props_NewComponentMember;
      case 4:
        return props_OldComponent;
      case 5:
        return props_OldComponentMember;
    }
    throw new IllegalStateException();
  }
}
