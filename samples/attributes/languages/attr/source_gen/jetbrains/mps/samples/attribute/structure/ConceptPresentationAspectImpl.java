package jetbrains.mps.samples.attribute.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_CommentAttribute = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommentAttribute2 = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HandlerAsChild = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HandlerAsRoot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubConceptToTransform = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubConceptToTransformNested = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.CommentAttribute:
        return props_CommentAttribute;
      case LanguageConceptSwitch.CommentAttribute2:
        return props_CommentAttribute2;
      case LanguageConceptSwitch.HandlerAsChild:
        return props_HandlerAsChild;
      case LanguageConceptSwitch.HandlerAsRoot:
        return props_HandlerAsRoot;
      case LanguageConceptSwitch.SubConceptToTransform:
        return props_SubConceptToTransform;
      case LanguageConceptSwitch.SubConceptToTransformNested:
        return props_SubConceptToTransformNested;
    }
    return null;
  }
}
