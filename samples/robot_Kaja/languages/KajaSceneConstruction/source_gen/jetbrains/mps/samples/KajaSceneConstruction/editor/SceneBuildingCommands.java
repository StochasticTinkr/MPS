package jetbrains.mps.samples.KajaSceneConstruction.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.contextAssistant.ContextAssistantMenuBase;
import java.util.List;
import jetbrains.mps.lang.editor.contextAssistant.MenuPart;
import java.util.Arrays;
import jetbrains.mps.lang.editor.contextAssistant.SubMenuMenuPart;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.editor.contextAssistant.ActionItemMenuPart;
import jetbrains.mps.openapi.editor.descriptor.ContextAssistantMenu;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class SceneBuildingCommands extends ContextAssistantMenuBase {
  @Override
  protected List<MenuPart> getParts() {
    return Arrays.<MenuPart>asList(new SubMenuMenuPart() {
      @Override
      protected String getText(EditorContext context, SNode node) {
        return "Scene builder";
      }

      @Override
      protected List<MenuPart> getParts() {
        return Arrays.<MenuPart>asList(new MenuPart[]{new ActionItemMenuPart() {
          @Override
          protected String getText(ContextAssistantMenu.Context context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            return "Build wall";
          }

          @Override
          protected void execute(ContextAssistantMenu.Context context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            {
              SNode inserted = SNodeOperations.insertPrevSiblingChild(node, SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x2c8eb033a8341e10L, "jetbrains.mps.samples.KajaSceneConstruction.structure.BuildWall")), null));
              editorContext.selectWRTFocusPolicy(inserted);
            }
          }
        }, new ActionItemMenuPart() {
          @Override
          protected String getText(ContextAssistantMenu.Context context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            return "Destroy wall";
          }

          @Override
          protected void execute(ContextAssistantMenu.Context context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            {
              SNode inserted = SNodeOperations.insertPrevSiblingChild(node, SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x2c8eb033a834fa55L, "jetbrains.mps.samples.KajaSceneConstruction.structure.DestroyWall")), null));
              editorContext.selectWRTFocusPolicy(inserted);

            }
          }
        }, new ActionItemMenuPart() {
          @Override
          protected String getText(ContextAssistantMenu.Context context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            return "Drop mark";
          }

          @Override
          protected void execute(ContextAssistantMenu.Context context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            {
              SNode inserted = SNodeOperations.insertPrevSiblingChild(node, SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x2c8eb033a834fe3eL, "jetbrains.mps.samples.KajaSceneConstruction.structure.DropMark")), null));
              editorContext.selectWRTFocusPolicy(inserted);
            }
          }
        }, new ActionItemMenuPart() {
          @Override
          protected String getText(ContextAssistantMenu.Context context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            return "Pick mark";
          }

          @Override
          protected void execute(ContextAssistantMenu.Context context) {
            final EditorContext editorContext = context.getEditorContext();
            final SNode node = context.getNode();
            {
              SNode inserted = SNodeOperations.insertPrevSiblingChild(node, SNodeFactoryOperations.createNewNode(SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0xb56912a3674f4530L, 0xb0cf55261b526a1fL, 0x2c8eb033a835165fL, "jetbrains.mps.samples.KajaSceneConstruction.structure.PickMark")), null));
              editorContext.selectWRTFocusPolicy(inserted);
            }
          }
        }});
      }
    });
  }
}
