package jetbrains.mps.samples.KajaAndOr.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(3);
  /*package*/ final ConceptDescriptor myConceptAnd = createDescriptorForAnd();
  /*package*/ final ConceptDescriptor myConceptLogicalOperator = createDescriptorForLogicalOperator();
  /*package*/ final ConceptDescriptor myConceptOr = createDescriptorForOr();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptAnd.getId(), 0);
    myIndexMap.put(myConceptLogicalOperator.getId(), 1);
    myIndexMap.put(myConceptOr.getId(), 2);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAnd, myConceptLogicalOperator, myConceptOr);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptAnd;
      case 1:
        return myConceptLogicalOperator;
      case 2:
        return myConceptOr;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForAnd() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.KajaAndOr.structure.And", MetaIdFactory.conceptId(0x44306fd2ef944b56L, 0x9806d9ab509536dbL, 0x1a6f404e630a460aL)).super_("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator").version(1).super_(MetaIdFactory.conceptId(0x44306fd2ef944b56L, 0x9806d9ab509536dbL, 0x1a6f404e630a46d9L)).parents("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator").parentIds(MetaIdFactory.conceptId(0x44306fd2ef944b56L, 0x9806d9ab509536dbL, 0x1a6f404e630a46d9L)).alias("and", "").sourceNode(new SNodePointer("r:d3eab93d-0231-40c7-b095-39bdf7a89e92(jetbrains.mps.samples.KajaAndOr.structure)", "1904811872814253578")).create();
  }
  private static ConceptDescriptor createDescriptorForLogicalOperator() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator", MetaIdFactory.conceptId(0x44306fd2ef944b56L, 0x9806d9ab509536dbL, 0x1a6f404e630a46d9L)).super_("jetbrains.mps.samples.Kaja.structure.LogicalExpression").version(1).super_(MetaIdFactory.conceptId(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ec9fc1L)).parents("jetbrains.mps.samples.Kaja.structure.LogicalExpression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ec9fc1L), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1a6f404e630a460cL, "left", MetaIdFactory.conceptId(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ec9fc1L), false, false, false, new SNodePointer("r:d3eab93d-0231-40c7-b095-39bdf7a89e92(jetbrains.mps.samples.KajaAndOr.structure)", "1904811872814253580")), new ConceptDescriptorBuilder.Link(0x1a6f404e630a460dL, "right", MetaIdFactory.conceptId(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ec9fc1L), false, false, false, new SNodePointer("r:d3eab93d-0231-40c7-b095-39bdf7a89e92(jetbrains.mps.samples.KajaAndOr.structure)", "1904811872814253581"))).children(new String[]{"left", "right"}, new boolean[]{false, false}).abstract_().sourceNode(new SNodePointer("r:d3eab93d-0231-40c7-b095-39bdf7a89e92(jetbrains.mps.samples.KajaAndOr.structure)", "1904811872814253785")).create();
  }
  private static ConceptDescriptor createDescriptorForOr() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.KajaAndOr.structure.Or", MetaIdFactory.conceptId(0x44306fd2ef944b56L, 0x9806d9ab509536dbL, 0x1a6f404e630a46bbL)).super_("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator").version(1).super_(MetaIdFactory.conceptId(0x44306fd2ef944b56L, 0x9806d9ab509536dbL, 0x1a6f404e630a46d9L)).parents("jetbrains.mps.samples.KajaAndOr.structure.LogicalOperator").parentIds(MetaIdFactory.conceptId(0x44306fd2ef944b56L, 0x9806d9ab509536dbL, 0x1a6f404e630a46d9L)).alias("or", "").sourceNode(new SNodePointer("r:d3eab93d-0231-40c7-b095-39bdf7a89e92(jetbrains.mps.samples.KajaAndOr.structure)", "1904811872814253755")).create();
  }
}
