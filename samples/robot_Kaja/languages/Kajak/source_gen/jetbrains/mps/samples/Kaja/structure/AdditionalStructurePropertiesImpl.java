package jetbrains.mps.samples.Kaja.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_AbstractCommand = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommandList = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_CommentLine = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Direction = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Drop = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_East = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EmptyLine = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Heading = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IfStatement = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IsFull = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IsMark = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_IsWall = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LeftTurn = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Library = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_LogicalExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Looking = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_North = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Not = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Pick = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Repeat = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Require = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RoutineCall = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_RoutineDefinition = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Script = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_South = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Step = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TraceMessage = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_West = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_While = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0eb.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbstractCommand;
          }
          break;
        case 1:
          if (true) {
            return props_CommandList;
          }
          break;
        case 2:
          if (true) {
            return props_CommentLine;
          }
          break;
        case 3:
          if (true) {
            return props_Direction;
          }
          break;
        case 4:
          if (true) {
            return props_Drop;
          }
          break;
        case 5:
          if (true) {
            return props_East;
          }
          break;
        case 6:
          if (true) {
            return props_EmptyLine;
          }
          break;
        case 7:
          if (true) {
            return props_Heading;
          }
          break;
        case 8:
          if (true) {
            return props_IfStatement;
          }
          break;
        case 9:
          if (true) {
            return props_IsFull;
          }
          break;
        case 10:
          if (true) {
            return props_IsMark;
          }
          break;
        case 11:
          if (true) {
            return props_IsWall;
          }
          break;
        case 12:
          if (true) {
            return props_LeftTurn;
          }
          break;
        case 13:
          if (true) {
            return props_Library;
          }
          break;
        case 14:
          if (true) {
            return props_LogicalExpression;
          }
          break;
        case 15:
          if (true) {
            return props_Looking;
          }
          break;
        case 16:
          if (true) {
            return props_North;
          }
          break;
        case 17:
          if (true) {
            return props_Not;
          }
          break;
        case 18:
          if (true) {
            return props_Pick;
          }
          break;
        case 19:
          if (true) {
            return props_Repeat;
          }
          break;
        case 20:
          if (true) {
            return props_Require;
          }
          break;
        case 21:
          if (true) {
            return props_RoutineCall;
          }
          break;
        case 22:
          if (true) {
            return props_RoutineDefinition;
          }
          break;
        case 23:
          if (true) {
            return props_Script;
          }
          break;
        case 24:
          if (true) {
            return props_South;
          }
          break;
        case 25:
          if (true) {
            return props_Step;
          }
          break;
        case 26:
          if (true) {
            return props_TraceMessage;
          }
          break;
        case 27:
          if (true) {
            return props_West;
          }
          break;
        case 28:
          if (true) {
            return props_While;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0eb = buildConceptIndices(MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2d523c5e4cc4574aL, "AbstractCommand"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785f06a3fL, "CommandList"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x58e59ea713fa2b43L, "CommentLine"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ed0d39L, "Direction"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x58e59ea713f79f27L, "Drop"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ed0d41L, "East"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ee0a16L, "EmptyLine"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ed2c41L, "Heading"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ec9fbeL, "IfStatement"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0xbebd01a737bec18L, "IsFull"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x58e59ea713f89fe6L, "IsMark"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785eca02cL, "IsWall"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ec9f8bL, "LeftTurn"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x3cfcda239f19d316L, "Library"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ec9fc1L, "LogicalExpression"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x61fd16e423a38042L, "Looking"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ed0d3bL, "North"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ecb8b0L, "Not"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x58e59ea713f85f1dL, "Pick"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ecd14cL, "Repeat"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x3cfcda239f1a1049L, "Require"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ed6f92L, "RoutineCall"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ed6f79L, "RoutineDefinition"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2d523c5e4cc45746L, "Script"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ed0d4bL, "South"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2d523c5e4cc45762L, "Step"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2c8eb033a8375aeeL, "TraceMessage"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ed2c3cL, "West"), MetaAdapterFactory.getConcept(0x49a08c51fe543ccL, 0xbd998b46d641d7f5L, 0x2de971c785ecece0L, "While"));
}
