package jetbrains.mps.samples.Kaja.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractCommand = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommandList = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CommentLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Direction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Drop = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_East = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmptyLine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Heading = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IfStatement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsFull = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsMark = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IsWall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LeftTurn = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Library = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0n).create();
  private final ConceptPresentation props_LogicalExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Looking = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_North = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Not = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Pick = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Repeat = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Require = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RoutineCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_RoutineDefinition = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Script = new ConceptPresentationBuilder().icon(IconContainer.RESOURCE_a0a0x).create();
  private final ConceptPresentation props_South = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Step = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TraceMessage = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_West = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_While = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractCommand:
        return props_AbstractCommand;
      case LanguageConceptSwitch.CommandList:
        return props_CommandList;
      case LanguageConceptSwitch.CommentLine:
        return props_CommentLine;
      case LanguageConceptSwitch.Direction:
        return props_Direction;
      case LanguageConceptSwitch.Drop:
        return props_Drop;
      case LanguageConceptSwitch.East:
        return props_East;
      case LanguageConceptSwitch.EmptyLine:
        return props_EmptyLine;
      case LanguageConceptSwitch.Heading:
        return props_Heading;
      case LanguageConceptSwitch.IfStatement:
        return props_IfStatement;
      case LanguageConceptSwitch.IsFull:
        return props_IsFull;
      case LanguageConceptSwitch.IsMark:
        return props_IsMark;
      case LanguageConceptSwitch.IsWall:
        return props_IsWall;
      case LanguageConceptSwitch.LeftTurn:
        return props_LeftTurn;
      case LanguageConceptSwitch.Library:
        return props_Library;
      case LanguageConceptSwitch.LogicalExpression:
        return props_LogicalExpression;
      case LanguageConceptSwitch.Looking:
        return props_Looking;
      case LanguageConceptSwitch.North:
        return props_North;
      case LanguageConceptSwitch.Not:
        return props_Not;
      case LanguageConceptSwitch.Pick:
        return props_Pick;
      case LanguageConceptSwitch.Repeat:
        return props_Repeat;
      case LanguageConceptSwitch.Require:
        return props_Require;
      case LanguageConceptSwitch.RoutineCall:
        return props_RoutineCall;
      case LanguageConceptSwitch.RoutineDefinition:
        return props_RoutineDefinition;
      case LanguageConceptSwitch.Script:
        return props_Script;
      case LanguageConceptSwitch.South:
        return props_South;
      case LanguageConceptSwitch.Step:
        return props_Step;
      case LanguageConceptSwitch.TraceMessage:
        return props_TraceMessage;
      case LanguageConceptSwitch.West:
        return props_West;
      case LanguageConceptSwitch.While:
        return props_While;
    }
    return null;
  }
}
