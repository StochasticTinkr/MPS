package jetbrains.mps.samples.workflowDefinition.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt_a0a = ((SAbstractConcept) concept);
    switch (index_xbvbvu_a0a.index(cncpt_a0a)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new Event_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new State_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new StateChart_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Transition_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt_a0c = ((SAbstractConcept) concept);
    switch (index_xbvbvu_a0c.index(cncpt_a0c)) {
      case 0:
        if (true) {
          if ("jetbrains.mps.samples.workflowDefinition.editor.StateTransitions".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new StateTransitions());
          }
        }
        break;
      case 1:
        if (true) {
          switch (Arrays.binarySearch(stringSwitchCases_xbvbvu_a0a0a0b1a2, editorComponentId)) {
            case 0:
              return Collections.<ConceptEditorComponent>singletonList(new StateStates());
            case 1:
              return Collections.<ConceptEditorComponent>singletonList(new StateTriggers());
            default:
              return Collections.<ConceptEditorComponent>emptyList();
          }
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }

  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt_a0e = concept;
    switch (index_xbvbvu_a0e.index(cncpt_a0e)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new Transition_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex index_xbvbvu_a0a = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x96c081ab0e0743cbL, 0x984296a96536026eL, 0x5644d45f594dc7a5L), MetaIdFactory.conceptId(0x96c081ab0e0743cbL, 0x984296a96536026eL, 0x5644d45f594df419L), MetaIdFactory.conceptId(0x96c081ab0e0743cbL, 0x984296a96536026eL, 0x5644d45f594dc7a2L), MetaIdFactory.conceptId(0x96c081ab0e0743cbL, 0x984296a96536026eL, 0x5644d45f594dc7abL)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0c = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x96c081ab0e0743cbL, 0x984296a96536026eL, 0x5644d45f594df419L), MetaIdFactory.conceptId(0x96c081ab0e0743cbL, 0x984296a96536026eL, 0x5644d45f594dc7a8L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0e = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x96c081ab0e0743cbL, 0x984296a96536026eL, 0x5644d45f594dc7abL)).seal();
  private static String[] stringSwitchCases_xbvbvu_a0a0a0b1a2 = new String[]{"jetbrains.mps.samples.workflowDefinition.editor.StateStates", "jetbrains.mps.samples.workflowDefinition.editor.StateTriggers"};
}
