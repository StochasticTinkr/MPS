package jetbrains.mps.samples.workflowDefinition.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.messageTargets.ReferenceMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.errors.BaseQuickFixProvider;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class check_Stateful_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_Stateful_NonTypesystemRule() {
  }
  public void applyRule(final SNode stateful, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    if ((SLinkOperations.getTarget(stateful, MetaAdapterFactory.getReferenceLink(0x96c081ab0e0743cbL, 0x984296a96536026eL, 0x5644d45f594dc7a8L, 0x5644d45f5950783dL, "initial")) == null) && ListSequence.fromList(SLinkOperations.getChildren(stateful, MetaAdapterFactory.getContainmentLink(0x96c081ab0e0743cbL, 0x984296a96536026eL, 0x5644d45f594dc7a8L, 0x5644d45f594df3f5L, "states"))).isNotEmpty()) {
      {
        MessageTarget errorTarget = new NodeMessageTarget();
        errorTarget = new ReferenceMessageTarget("initial");
        IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(stateful, "Missing an initial state", "r:aaadfb7b-0118-471e-b984-03a2409ed5ea(jetbrains.mps.samples.workflowDefinition.typesystem)", "6216326891663598485", null, errorTarget);
        {
          BaseQuickFixProvider intentionProvider = new BaseQuickFixProvider("jetbrains.mps.samples.workflowDefinition.typesystem.ChooseTheFirstState_QuickFix", false);
          _reporter_2309309498.addIntentionProvider(intentionProvider);
        }
      }
    }
  }
  public SAbstractConcept getApplicableConcept() {
    return MetaAdapterFactory.getConcept(0x96c081ab0e0743cbL, 0x984296a96536026eL, 0x5644d45f594dc7a8L, "jetbrains.mps.samples.workflowDefinition.structure.Stateful");
  }
  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    return new IsApplicableStatus(argument.getConcept().isSubConceptOf(getApplicableConcept()), null);
  }
  public boolean overrides() {
    return false;
  }
}
