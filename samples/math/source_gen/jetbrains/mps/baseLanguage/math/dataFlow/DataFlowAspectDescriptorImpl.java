package jetbrains.mps.baseLanguage.math.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.framework.DataFlowAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.lang.dataFlow.framework.IDataFlowBuilder;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class DataFlowAspectDescriptorImpl extends DataFlowAspectDescriptorBase {

  @NotNull
  @Override
  public Collection<IDataFlowBuilder> getDataFlowBuilders(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (index_vhxjlb_a0b.index(cncpt)) {
      case 0:
        return Collections.<IDataFlowBuilder>singletonList(new Determinant_DataFlow());
      case 1:
        return Collections.<IDataFlowBuilder>singletonList(new DivExpressionFraction_DataFlow());
      case 2:
        return Collections.<IDataFlowBuilder>singletonList(new ExponentialOperation_DataFlow());
      case 3:
        return Collections.<IDataFlowBuilder>singletonList(new LinearSolveOperation_DataFlow());
      case 4:
        return Collections.<IDataFlowBuilder>singletonList(new MathFuncExpression_DataFlow());
      case 5:
        return Collections.<IDataFlowBuilder>singletonList(new MathSymbol_DataFlow());
      case 6:
        return Collections.<IDataFlowBuilder>singletonList(new MathSymbolFromToIndex_DataFlow());
      case 7:
        return Collections.<IDataFlowBuilder>singletonList(new MathSymbolIndex_DataFlow());
      case 8:
        return Collections.<IDataFlowBuilder>singletonList(new MathSymbolIndexReference_DataFlow());
      case 9:
        return Collections.<IDataFlowBuilder>singletonList(new MatrixConstructor_DataFlow());
      case 10:
        return Collections.<IDataFlowBuilder>singletonList(new MatrixElementAccessExpression_DataFlow());
      case 11:
        return Collections.<IDataFlowBuilder>singletonList(new MatrixInitializer_DataFlow());
      case 12:
        return Collections.<IDataFlowBuilder>singletonList(new MatrixInitializerIndexReference_DataFlow());
      case 13:
        return Collections.<IDataFlowBuilder>singletonList(new MatrixNorm_DataFlow());
      case 14:
        return Collections.<IDataFlowBuilder>singletonList(new MatrixZero_DataFlow());
      case 15:
        return Collections.<IDataFlowBuilder>singletonList(new VectorInitializer_DataFlow());
      default:
    }
    return Collections.<IDataFlowBuilder>emptyList();
  }
  private static final ConceptSwitchIndex index_vhxjlb_a0b = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x3a6682eeb060fd5L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12008f4e805L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e6443a20L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x13afebc2af505abdL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca1899L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea765cf0L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca6da8L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0d91491L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a626b0a85L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x58aab8999c8f432aL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240a048L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f252L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0xcc7e1ce69847db2L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x36700251396ecb7bL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d424d0fb5L)).seal();
}
