package jetbrains.mps.baseLanguage.math.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbsExpression = 0;
  public static final int AbstractIndex = 1;
  public static final int ArithmSymbol = 2;
  public static final int BigComplexType = 3;
  public static final int BigDecimalType = 4;
  public static final int BigIntegerType = 5;
  public static final int BigMaxExpression = 6;
  public static final int BigMinExpression = 7;
  public static final int BigProdExpression = 8;
  public static final int BigSumExpression = 9;
  public static final int ComplexLiteral = 10;
  public static final int ComplexType = 11;
  public static final int ConjugateOperation = 12;
  public static final int CosineExpression = 13;
  public static final int DecimalBinaryOperation = 14;
  public static final int DecimalDivExpression = 15;
  public static final int DecimalMinusExpression = 16;
  public static final int DecimalMulExpression = 17;
  public static final int DecimalPlusExpression = 18;
  public static final int Determinant = 19;
  public static final int DivExpressionFraction = 20;
  public static final int ExponentExpression = 21;
  public static final int ExponentialOperation = 22;
  public static final int ExtrSymbol = 23;
  public static final int InIntervalExpression = 24;
  public static final int IntervalContainsExpression = 25;
  public static final int IntervalLiteral = 26;
  public static final int IntervalType = 27;
  public static final int LinearSolveOperation = 28;
  public static final int LiteralI = 29;
  public static final int LogExpression = 30;
  public static final int MathContext = 31;
  public static final int MathFuncExpression = 32;
  public static final int MathPrimitiveType = 33;
  public static final int MathSymbol = 34;
  public static final int MathSymbolFromToIndex = 35;
  public static final int MathSymbolIndex = 36;
  public static final int MathSymbolIndexReference = 37;
  public static final int MathTypeCast = 38;
  public static final int MatrixConstructor = 39;
  public static final int MatrixElementAccessExpression = 40;
  public static final int MatrixExponentialOperation = 41;
  public static final int MatrixIndexWildcard = 42;
  public static final int MatrixInitializer = 43;
  public static final int MatrixInitializerIndex = 44;
  public static final int MatrixInitializerIndexReference = 45;
  public static final int MatrixInverseOperation = 46;
  public static final int MatrixNorm = 47;
  public static final int MatrixOrVectorInitializer = 48;
  public static final int MatrixOrVectorType = 49;
  public static final int MatrixType = 50;
  public static final int MatrixUnit = 51;
  public static final int MatrixZero = 52;
  public static final int PowExpression = 53;
  public static final int SineExpression = 54;
  public static final int TangentExpression = 55;
  public static final int TransposeOperation = 56;
  public static final int VectorInitializer = 57;
  public static final int VectorType = 58;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL);
    builder.put(0x12051ecbe19L, AbsExpression);
    builder.put(0x11fea76c7e0L, AbstractIndex);
    builder.put(0x11fe0e7ac42L, ArithmSymbol);
    builder.put(0x120096f8e4cL, BigComplexType);
    builder.put(0x12009449465L, BigDecimalType);
    builder.put(0x1200944b8b7L, BigIntegerType);
    builder.put(0x11fe0e16047L, BigMaxExpression);
    builder.put(0x11fe0e1674dL, BigMinExpression);
    builder.put(0x11fe0e12aa0L, BigProdExpression);
    builder.put(0x11fe188eafbL, BigSumExpression);
    builder.put(0x12052224b0bL, ComplexLiteral);
    builder.put(0x120095d7138L, ComplexType);
    builder.put(0x64b1e972e64afe53L, ConjugateOperation);
    builder.put(0x12053114b76L, CosineExpression);
    builder.put(0x120568d9c5bL, DecimalBinaryOperation);
    builder.put(0x1207697107bL, DecimalDivExpression);
    builder.put(0x12076988136L, DecimalMinusExpression);
    builder.put(0x120769754c8L, DecimalMulExpression);
    builder.put(0x1207697a328L, DecimalPlusExpression);
    builder.put(0x3a6682eeb060fd5L, Determinant);
    builder.put(0x12008f4e805L, DivExpressionFraction);
    builder.put(0x120531e6b2fL, ExponentExpression);
    builder.put(0x64b1e972e6443a20L, ExponentialOperation);
    builder.put(0x11fe0e1ca4eL, ExtrSymbol);
    builder.put(0x11fb8483964L, InIntervalExpression);
    builder.put(0x11fb8483968L, IntervalContainsExpression);
    builder.put(0x11fb848396cL, IntervalLiteral);
    builder.put(0x11fb8483972L, IntervalType);
    builder.put(0x13afebc2af505abdL, LinearSolveOperation);
    builder.put(0x1205202c5edL, LiteralI);
    builder.put(0x1205311f8ffL, LogExpression);
    builder.put(0x1a6fbb5a434b008bL, MathContext);
    builder.put(0x1205307b067L, MathFuncExpression);
    builder.put(0x1200ff11214L, MathPrimitiveType);
    builder.put(0x11fe0ca1899L, MathSymbol);
    builder.put(0x11fea765cf0L, MathSymbolFromToIndex);
    builder.put(0x11fe0ca6da8L, MathSymbolIndex);
    builder.put(0x11fe0d91491L, MathSymbolIndexReference);
    builder.put(0x1200fb8bcedL, MathTypeCast);
    builder.put(0x42d5783a626b0a85L, MatrixConstructor);
    builder.put(0x58aab8999c8f432aL, MatrixElementAccessExpression);
    builder.put(0x64b1e972e647ad7dL, MatrixExponentialOperation);
    builder.put(0x58aab8999c8f4339L, MatrixIndexWildcard);
    builder.put(0x5650ac0d4240a048L, MatrixInitializer);
    builder.put(0x5650ac0d4240f255L, MatrixInitializerIndex);
    builder.put(0x5650ac0d4240f252L, MatrixInitializerIndexReference);
    builder.put(0x13afebc2af505abcL, MatrixInverseOperation);
    builder.put(0xcc7e1ce69847db2L, MatrixNorm);
    builder.put(0x5650ac0d424d5141L, MatrixOrVectorInitializer);
    builder.put(0x513c04200c187a63L, MatrixOrVectorType);
    builder.put(0x42d5783a6267f776L, MatrixType);
    builder.put(0x13afebc2af3c3bdfL, MatrixUnit);
    builder.put(0x36700251396ecb7bL, MatrixZero);
    builder.put(0x12052b2cdd3L, PowExpression);
    builder.put(0x1205311204eL, SineExpression);
    builder.put(0x1205311cb56L, TangentExpression);
    builder.put(0x7418107bdc9576d4L, TransposeOperation);
    builder.put(0x5650ac0d424d0fb5L, VectorInitializer);
    builder.put(0x42d5783a6267f775L, VectorType);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
