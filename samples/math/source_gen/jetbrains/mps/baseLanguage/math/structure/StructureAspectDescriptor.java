package jetbrains.mps.baseLanguage.math.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  /*package*/ final ConceptDescriptor myConceptAbsExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.AbsExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12051ecbe19L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(1238325188444L, "expr", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"expr"}, new boolean[]{false}).alias("abs", "Absolute value of a number").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptAbstractIndex = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.AbstractIndex", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea76c7e0L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL)).abstract_().create();
  /*package*/ final ConceptDescriptor myConceptArithmSymbol = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e7ac42L)).super_("jetbrains.mps.baseLanguage.math.structure.MathSymbol").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca1899L)).parents("jetbrains.mps.baseLanguage.math.structure.MathSymbol").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca1899L)).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBigComplexType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigComplexType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120096f8e4cL)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).alias("bigcomplex", "Arbitrary precision complex number").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBigDecimalType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigDecimalType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12009449465L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).alias("bigdecimal", "Arbitrary precision signed decimal number").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBigIntegerType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigIntegerType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200944b8b7L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).alias("biginteger", "Arbitrary precision integer").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBigMaxExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigMaxExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e16047L)).super_("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e1ca4eL)).parents("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e1ca4eL)).alias("max", "Maximum of expressions").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBigMinExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigMinExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e1674dL)).super_("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e1ca4eL)).parents("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e1ca4eL)).alias("min", "Minimum of expressions").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBigProdExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigProdExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e12aa0L)).super_("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e7ac42L)).parents("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e7ac42L)).alias("prod", "Product of expressions").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptBigSumExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigSumExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe188eafbL)).super_("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e7ac42L)).parents("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e7ac42L)).alias("sum", "Sum of expressions").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptComplexLiteral = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ComplexLiteral", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12052224b0bL)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).childDescriptors(new ConceptDescriptorBuilder.Link(1238328589271L, "real", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false), new ConceptDescriptorBuilder.Link(1238328589757L, "imag", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"real", "imag"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptComplexType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ComplexType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120095d7138L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).alias("complex", "Double precision complex number").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConjugateOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ConjugateOperation", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e64afe53L)).super_("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e647ad7dL)).parents("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e647ad7dL)).alias("", "Matrix conjugate").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptCosineExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.CosineExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12053114b76L)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).alias("cos", "Trigonometric cosine of a value").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDecimalBinaryOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL)).parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL)).childDescriptors(new ConceptDescriptorBuilder.Link(1904947163751462528L, "context", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1a6fbb5a434b008bL), false, false, false)).children(new String[]{"context"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDecimalDivExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DecimalDivExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1207697107bL)).super_("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).parents("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).alias(":/d", "divide operation for big decimal types").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDecimalMinusExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DecimalMinusExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12076988136L)).super_("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).parents("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).alias(":-d", "minus operation for big decimal types").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDecimalMulExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DecimalMulExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120769754c8L)).super_("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).parents("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).alias(":*d", "multiplication operation for big decimal types").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDecimalPlusExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DecimalPlusExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1207697a328L)).super_("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).parents("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).alias(":+d", "plus operation for bigdecimal types").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDeterminant = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.Determinant", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x3a6682eeb060fd5L)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).alias("det", "Matrix determinant").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDivExpressionFraction = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12008f4e805L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(1237102925695L, "numerator", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false), new ConceptDescriptorBuilder.Link(1237102926618L, "denominator", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"numerator", "denominator"}, new boolean[]{false, false}).alias("frac", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExponentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ExponentExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120531e6b2fL)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).alias("exp", "Exponent of a value").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExponentialOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ExponentialOperation", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e6443a20L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).childDescriptors(new ConceptDescriptorBuilder.Link(7255837154369354274L, "expr", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"expr"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptExtrSymbol = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e1ca4eL)).super_("jetbrains.mps.baseLanguage.math.structure.MathSymbol").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca1899L)).parents("jetbrains.mps.baseLanguage.math.structure.MathSymbol").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca1899L)).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptInIntervalExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.InIntervalExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb8483964L)).super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL)).parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL)).alias(":in:", "is in interval").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIntervalContainsExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.IntervalContainsExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb8483968L)).super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL)).parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL)).alias(":contains:", "(?) interval contains").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIntervalLiteral = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.IntervalLiteral", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb848396cL)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(1235747354991L, "startIncluded"), new ConceptDescriptorBuilder.Prop(1235747354992L, "endIncluded")).properties("startIncluded", "endIncluded").childDescriptors(new ConceptDescriptorBuilder.Link(1235747354989L, "start", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false), new ConceptDescriptorBuilder.Link(1235747354990L, "end", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false)).children(new String[]{"start", "end"}, new boolean[]{false, false}).alias("interval", "Interval literal").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptIntervalType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.IntervalType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb8483972L)).super_("jetbrains.mps.baseLanguage.structure.Type").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).parents("jetbrains.mps.baseLanguage.structure.Type").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).childDescriptors(new ConceptDescriptorBuilder.Link(1235747354995L, "elementType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), false, false, false)).children(new String[]{"elementType"}, new boolean[]{false}).alias("interval", "Interval type").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLinearSolveOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x13afebc2af505abdL)).super_("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL)).parents("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL)).childDescriptors(new ConceptDescriptorBuilder.Link(1418611629042470806L, "matrix", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false), new ConceptDescriptorBuilder.Link(1418611629042470807L, "vector", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false), new ConceptDescriptorBuilder.Link(1904947163751468044L, "context", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1a6fbb5a434b008bL), true, false, false)).children(new String[]{"matrix", "vector", "context"}, new boolean[]{false, false, false}).alias("lsolve", "").create();
  /*package*/ final ConceptDescriptor myConceptLiteralI = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.LiteralI", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205202c5edL)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).alias("I", "Imaginary unit").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptLogExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.LogExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205311f8ffL)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).alias("ln", "Natural logarithm of a value").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMathContext = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathContext", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1a6fbb5a434b008bL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(1904947163751462195L, "roundingMode"), new ConceptDescriptorBuilder.Prop(1904947163751462196L, "precision"), new ConceptDescriptorBuilder.Prop(1904947163751462197L, "precisionSetting")).properties("roundingMode", "precision", "precisionSetting").create();
  /*package*/ final ConceptDescriptor myConceptMathFuncExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(1238343896784L, "param", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"param"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMathPrimitiveType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).super_("jetbrains.mps.baseLanguage.structure.Type").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).parents("jetbrains.mps.baseLanguage.structure.Type").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMathSymbol = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathSymbol", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca1899L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(1236427007990L, "var", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea76c7e0L), false, false, false), new ConceptDescriptorBuilder.Link(1236427008116L, "expression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false), new ConceptDescriptorBuilder.Link(1236427162021L, "precondition", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false), new ConceptDescriptorBuilder.Link(1236594888470L, "upperBound", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false)).children(new String[]{"var", "expression", "precondition", "upperBound"}, new boolean[]{false, false, false, false}).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMathSymbolFromToIndex = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathSymbolFromToIndex", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea765cf0L)).super_("jetbrains.mps.baseLanguage.math.structure.AbstractIndex").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea76c7e0L)).parents("jetbrains.mps.baseLanguage.math.structure.AbstractIndex").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea76c7e0L)).childDescriptors(new ConceptDescriptorBuilder.Link(1236589606450L, "from", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"from"}, new boolean[]{false}).alias("", "iterate over interval of integers").create();
  /*package*/ final ConceptDescriptor myConceptMathSymbolIndex = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndex", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca6da8L)).super_("jetbrains.mps.baseLanguage.math.structure.AbstractIndex").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea76c7e0L)).parents("jetbrains.mps.baseLanguage.math.structure.AbstractIndex").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea76c7e0L)).childDescriptors(new ConceptDescriptorBuilder.Link(1236427140288L, "iterable", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"iterable"}, new boolean[]{false}).alias("", "iterate over arbitrary iterable class").create();
  /*package*/ final ConceptDescriptor myConceptMathSymbolIndexReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndexReference", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0d91491L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(1236427955167L, "indexRef", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea76c7e0L), false)).references("indexRef").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMathTypeCast = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathTypeCast", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200fb8bcedL)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(1237214516967L, "target")).properties("target").childDescriptors(new ConceptDescriptorBuilder.Link(1237546614691L, "castedExpr", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"castedExpr"}, new boolean[]{false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixConstructor = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixConstructor", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a626b0a85L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(3498370411873418560L, "column")).properties("column").childDescriptors(new ConceptDescriptorBuilder.Link(4815887568697232013L, "components", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, true, false)).children(new String[]{"components"}, new boolean[]{true}).alias("[", "Matrix row constructor").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixElementAccessExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixElementAccessExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x58aab8999c8f432aL)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).childDescriptors(new ConceptDescriptorBuilder.Link(6389121991274611516L, "expression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false), new ConceptDescriptorBuilder.Link(6389121991274611517L, "rowIndex", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false), new ConceptDescriptorBuilder.Link(6389121991274611518L, "colIndex", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"expression", "rowIndex", "colIndex"}, new boolean[]{false, false, false}).staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixExponentialOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e647ad7dL)).super_("jetbrains.mps.baseLanguage.math.structure.ExponentialOperation").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e6443a20L)).parents("jetbrains.mps.baseLanguage.math.structure.ExponentialOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e6443a20L)).abstract_().staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixIndexWildcard = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixIndexWildcard", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x58aab8999c8f4339L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).alias("*", "Wildcard index").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixInitializer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixInitializer", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240a048L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d424d5141L)).childDescriptors(new ConceptDescriptorBuilder.Link(6219660258344759899L, "rowIndex", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f255L), false, false, false), new ConceptDescriptorBuilder.Link(6219660258344759900L, "colIndex", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f255L), false, false, false), new ConceptDescriptorBuilder.Link(6219660258345039001L, "rowsCount", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false), new ConceptDescriptorBuilder.Link(6219660258345039002L, "colsCount", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false), new ConceptDescriptorBuilder.Link(6219660258344753239L, "expression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"rowIndex", "colIndex", "rowsCount", "colsCount", "expression"}, new boolean[]{false, false, false, false, false}).alias("matrix", "Matrix initializer").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixInitializerIndex = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndex", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f255L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d424d5141L)).create();
  /*package*/ final ConceptDescriptor myConceptMatrixInitializerIndexReference = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndexReference", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f252L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(6219660258344759925L, "index", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f255L), false)).references("index").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixInverseOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x13afebc2af505abcL)).super_("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e647ad7dL)).parents("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e647ad7dL)).childDescriptors(new ConceptDescriptorBuilder.Link(1904947163751464663L, "context", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1a6fbb5a434b008bL), true, false, false)).children(new String[]{"context"}, new boolean[]{false}).alias("", "Matrix inverse operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixNorm = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixNorm", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0xcc7e1ce69847db2L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(758819215871550447L, "deg")).properties("deg").childDescriptors(new ConceptDescriptorBuilder.Link(758819215871053777L, "mat", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"mat"}, new boolean[]{false}).alias("norm", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixOrVectorInitializer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d424d5141L)).interface_().create();
  /*package*/ final ConceptDescriptor myConceptMatrixOrVectorType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x513c04200c187a63L)).interface_().create();
  /*package*/ final ConceptDescriptor myConceptMatrixType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a6267f776L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x513c04200c187a63L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(4815887568697048492L, "rows"), new ConceptDescriptorBuilder.Prop(4815887568697048493L, "columns")).properties("rows", "columns").childDescriptors(new ConceptDescriptorBuilder.Link(4815887568697050707L, "elementType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), false, false, false)).children(new String[]{"elementType"}, new boolean[]{false}).alias("matrix", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixUnit = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixUnit", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x13afebc2af3c3bdfL)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(1418611629041138656L, "size", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"size"}, new boolean[]{false}).alias("identity", "Identity matrix").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptMatrixZero = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixZero", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x36700251396ecb7bL)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(3922637823319028534L, "square")).properties("square").childDescriptors(new ConceptDescriptorBuilder.Link(3922637823319028532L, "rows", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false), new ConceptDescriptorBuilder.Link(3922637823319028533L, "columns", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"rows", "columns"}, new boolean[]{false, false}).alias("zero", "Zero matrix").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptPowExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.PowExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12052b2cdd3L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(1238338314123L, "base", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false), new ConceptDescriptorBuilder.Link(1238338314983L, "exponent", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"base", "exponent"}, new boolean[]{false, false}).alias("^", "Power expression").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSineExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.SineExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205311204eL)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).alias("sin", "Trigonometric sine of a value").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTangentExpression = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.TangentExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205311cb56L)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).alias("tan", "Trigonometric tangent of a value").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptTransposeOperation = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.TransposeOperation", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x7418107bdc9576d4L)).super_("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e647ad7dL)).parents("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e647ad7dL)).alias("", "Transpose operation").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptVectorInitializer = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.VectorInitializer", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d424d0fb5L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d424d5141L)).childDescriptors(new ConceptDescriptorBuilder.Link(6219660258345553847L, "rowIndex", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f255L), false, false, false), new ConceptDescriptorBuilder.Link(6219660258345553848L, "expression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false), new ConceptDescriptorBuilder.Link(6219660258345553849L, "rowsCount", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"rowIndex", "expression", "rowsCount"}, new boolean[]{false, false, false}).alias("vector", "Vector initializer").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptVectorType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.VectorType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a6267f775L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x513c04200c187a63L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(4815887568697050734L, "height")).properties("height").childDescriptors(new ConceptDescriptorBuilder.Link(4815887568697050735L, "elementType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), false, false, false)).children(new String[]{"elementType"}, new boolean[]{false}).alias("vector", "").staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbsExpression, myConceptAbstractIndex, myConceptArithmSymbol, myConceptBigComplexType, myConceptBigDecimalType, myConceptBigIntegerType, myConceptBigMaxExpression, myConceptBigMinExpression, myConceptBigProdExpression, myConceptBigSumExpression, myConceptComplexLiteral, myConceptComplexType, myConceptConjugateOperation, myConceptCosineExpression, myConceptDecimalBinaryOperation, myConceptDecimalDivExpression, myConceptDecimalMinusExpression, myConceptDecimalMulExpression, myConceptDecimalPlusExpression, myConceptDeterminant, myConceptDivExpressionFraction, myConceptExponentExpression, myConceptExponentialOperation, myConceptExtrSymbol, myConceptInIntervalExpression, myConceptIntervalContainsExpression, myConceptIntervalLiteral, myConceptIntervalType, myConceptLinearSolveOperation, myConceptLiteralI, myConceptLogExpression, myConceptMathContext, myConceptMathFuncExpression, myConceptMathPrimitiveType, myConceptMathSymbol, myConceptMathSymbolFromToIndex, myConceptMathSymbolIndex, myConceptMathSymbolIndexReference, myConceptMathTypeCast, myConceptMatrixConstructor, myConceptMatrixElementAccessExpression, myConceptMatrixExponentialOperation, myConceptMatrixIndexWildcard, myConceptMatrixInitializer, myConceptMatrixInitializerIndex, myConceptMatrixInitializerIndexReference, myConceptMatrixInverseOperation, myConceptMatrixNorm, myConceptMatrixOrVectorInitializer, myConceptMatrixOrVectorType, myConceptMatrixType, myConceptMatrixUnit, myConceptMatrixZero, myConceptPowExpression, myConceptSineExpression, myConceptTangentExpression, myConceptTransposeOperation, myConceptVectorInitializer, myConceptVectorType);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_1htk8d_a0lc.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myConceptAbsExpression;
          }
          break;
        case 1:
          if (true) {
            return myConceptAbstractIndex;
          }
          break;
        case 2:
          if (true) {
            return myConceptArithmSymbol;
          }
          break;
        case 3:
          if (true) {
            return myConceptBigComplexType;
          }
          break;
        case 4:
          if (true) {
            return myConceptBigDecimalType;
          }
          break;
        case 5:
          if (true) {
            return myConceptBigIntegerType;
          }
          break;
        case 6:
          if (true) {
            return myConceptBigMaxExpression;
          }
          break;
        case 7:
          if (true) {
            return myConceptBigMinExpression;
          }
          break;
        case 8:
          if (true) {
            return myConceptBigProdExpression;
          }
          break;
        case 9:
          if (true) {
            return myConceptBigSumExpression;
          }
          break;
        case 10:
          if (true) {
            return myConceptComplexLiteral;
          }
          break;
        case 11:
          if (true) {
            return myConceptComplexType;
          }
          break;
        case 12:
          if (true) {
            return myConceptConjugateOperation;
          }
          break;
        case 13:
          if (true) {
            return myConceptCosineExpression;
          }
          break;
        case 14:
          if (true) {
            return myConceptDecimalBinaryOperation;
          }
          break;
        case 15:
          if (true) {
            return myConceptDecimalDivExpression;
          }
          break;
        case 16:
          if (true) {
            return myConceptDecimalMinusExpression;
          }
          break;
        case 17:
          if (true) {
            return myConceptDecimalMulExpression;
          }
          break;
        case 18:
          if (true) {
            return myConceptDecimalPlusExpression;
          }
          break;
        case 19:
          if (true) {
            return myConceptDeterminant;
          }
          break;
        case 20:
          if (true) {
            return myConceptDivExpressionFraction;
          }
          break;
        case 21:
          if (true) {
            return myConceptExponentExpression;
          }
          break;
        case 22:
          if (true) {
            return myConceptExponentialOperation;
          }
          break;
        case 23:
          if (true) {
            return myConceptExtrSymbol;
          }
          break;
        case 24:
          if (true) {
            return myConceptInIntervalExpression;
          }
          break;
        case 25:
          if (true) {
            return myConceptIntervalContainsExpression;
          }
          break;
        case 26:
          if (true) {
            return myConceptIntervalLiteral;
          }
          break;
        case 27:
          if (true) {
            return myConceptIntervalType;
          }
          break;
        case 28:
          if (true) {
            return myConceptLinearSolveOperation;
          }
          break;
        case 29:
          if (true) {
            return myConceptLiteralI;
          }
          break;
        case 30:
          if (true) {
            return myConceptLogExpression;
          }
          break;
        case 31:
          if (true) {
            return myConceptMathContext;
          }
          break;
        case 32:
          if (true) {
            return myConceptMathFuncExpression;
          }
          break;
        case 33:
          if (true) {
            return myConceptMathPrimitiveType;
          }
          break;
        case 34:
          if (true) {
            return myConceptMathSymbol;
          }
          break;
        case 35:
          if (true) {
            return myConceptMathSymbolFromToIndex;
          }
          break;
        case 36:
          if (true) {
            return myConceptMathSymbolIndex;
          }
          break;
        case 37:
          if (true) {
            return myConceptMathSymbolIndexReference;
          }
          break;
        case 38:
          if (true) {
            return myConceptMathTypeCast;
          }
          break;
        case 39:
          if (true) {
            return myConceptMatrixConstructor;
          }
          break;
        case 40:
          if (true) {
            return myConceptMatrixElementAccessExpression;
          }
          break;
        case 41:
          if (true) {
            return myConceptMatrixExponentialOperation;
          }
          break;
        case 42:
          if (true) {
            return myConceptMatrixIndexWildcard;
          }
          break;
        case 43:
          if (true) {
            return myConceptMatrixInitializer;
          }
          break;
        case 44:
          if (true) {
            return myConceptMatrixInitializerIndex;
          }
          break;
        case 45:
          if (true) {
            return myConceptMatrixInitializerIndexReference;
          }
          break;
        case 46:
          if (true) {
            return myConceptMatrixInverseOperation;
          }
          break;
        case 47:
          if (true) {
            return myConceptMatrixNorm;
          }
          break;
        case 48:
          if (true) {
            return myConceptMatrixOrVectorInitializer;
          }
          break;
        case 49:
          if (true) {
            return myConceptMatrixOrVectorType;
          }
          break;
        case 50:
          if (true) {
            return myConceptMatrixType;
          }
          break;
        case 51:
          if (true) {
            return myConceptMatrixUnit;
          }
          break;
        case 52:
          if (true) {
            return myConceptMatrixZero;
          }
          break;
        case 53:
          if (true) {
            return myConceptPowExpression;
          }
          break;
        case 54:
          if (true) {
            return myConceptSineExpression;
          }
          break;
        case 55:
          if (true) {
            return myConceptTangentExpression;
          }
          break;
        case 56:
          if (true) {
            return myConceptTransposeOperation;
          }
          break;
        case 57:
          if (true) {
            return myConceptVectorInitializer;
          }
          break;
        case 58:
          if (true) {
            return myConceptVectorType;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_1htk8d_a0lc = buildConceptIndices(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12051ecbe19L, "jetbrains.mps.baseLanguage.math.structure.AbsExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea76c7e0L, "jetbrains.mps.baseLanguage.math.structure.AbstractIndex"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e7ac42L, "jetbrains.mps.baseLanguage.math.structure.ArithmSymbol"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120096f8e4cL, "jetbrains.mps.baseLanguage.math.structure.BigComplexType"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12009449465L, "jetbrains.mps.baseLanguage.math.structure.BigDecimalType"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200944b8b7L, "jetbrains.mps.baseLanguage.math.structure.BigIntegerType"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e16047L, "jetbrains.mps.baseLanguage.math.structure.BigMaxExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e1674dL, "jetbrains.mps.baseLanguage.math.structure.BigMinExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e12aa0L, "jetbrains.mps.baseLanguage.math.structure.BigProdExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe188eafbL, "jetbrains.mps.baseLanguage.math.structure.BigSumExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12052224b0bL, "jetbrains.mps.baseLanguage.math.structure.ComplexLiteral"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120095d7138L, "jetbrains.mps.baseLanguage.math.structure.ComplexType"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e64afe53L, "jetbrains.mps.baseLanguage.math.structure.ConjugateOperation"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12053114b76L, "jetbrains.mps.baseLanguage.math.structure.CosineExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL, "jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1207697107bL, "jetbrains.mps.baseLanguage.math.structure.DecimalDivExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12076988136L, "jetbrains.mps.baseLanguage.math.structure.DecimalMinusExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120769754c8L, "jetbrains.mps.baseLanguage.math.structure.DecimalMulExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1207697a328L, "jetbrains.mps.baseLanguage.math.structure.DecimalPlusExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x3a6682eeb060fd5L, "jetbrains.mps.baseLanguage.math.structure.Determinant"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12008f4e805L, "jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120531e6b2fL, "jetbrains.mps.baseLanguage.math.structure.ExponentExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e6443a20L, "jetbrains.mps.baseLanguage.math.structure.ExponentialOperation"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e1ca4eL, "jetbrains.mps.baseLanguage.math.structure.ExtrSymbol"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb8483964L, "jetbrains.mps.baseLanguage.math.structure.InIntervalExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb8483968L, "jetbrains.mps.baseLanguage.math.structure.IntervalContainsExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb848396cL, "jetbrains.mps.baseLanguage.math.structure.IntervalLiteral"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb8483972L, "jetbrains.mps.baseLanguage.math.structure.IntervalType"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x13afebc2af505abdL, "jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205202c5edL, "jetbrains.mps.baseLanguage.math.structure.LiteralI"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205311f8ffL, "jetbrains.mps.baseLanguage.math.structure.LogExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1a6fbb5a434b008bL, "jetbrains.mps.baseLanguage.math.structure.MathContext"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L, "jetbrains.mps.baseLanguage.math.structure.MathFuncExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L, "jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca1899L, "jetbrains.mps.baseLanguage.math.structure.MathSymbol"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea765cf0L, "jetbrains.mps.baseLanguage.math.structure.MathSymbolFromToIndex"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca6da8L, "jetbrains.mps.baseLanguage.math.structure.MathSymbolIndex"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0d91491L, "jetbrains.mps.baseLanguage.math.structure.MathSymbolIndexReference"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200fb8bcedL, "jetbrains.mps.baseLanguage.math.structure.MathTypeCast"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a626b0a85L, "jetbrains.mps.baseLanguage.math.structure.MatrixConstructor"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x58aab8999c8f432aL, "jetbrains.mps.baseLanguage.math.structure.MatrixElementAccessExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e647ad7dL, "jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x58aab8999c8f4339L, "jetbrains.mps.baseLanguage.math.structure.MatrixIndexWildcard"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240a048L, "jetbrains.mps.baseLanguage.math.structure.MatrixInitializer"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f255L, "jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndex"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f252L, "jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndexReference"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x13afebc2af505abcL, "jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0xcc7e1ce69847db2L, "jetbrains.mps.baseLanguage.math.structure.MatrixNorm"), MetaAdapterFactory.getInterfaceConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d424d5141L, "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer"), MetaAdapterFactory.getInterfaceConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x513c04200c187a63L, "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a6267f776L, "jetbrains.mps.baseLanguage.math.structure.MatrixType"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x13afebc2af3c3bdfL, "jetbrains.mps.baseLanguage.math.structure.MatrixUnit"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x36700251396ecb7bL, "jetbrains.mps.baseLanguage.math.structure.MatrixZero"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12052b2cdd3L, "jetbrains.mps.baseLanguage.math.structure.PowExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205311204eL, "jetbrains.mps.baseLanguage.math.structure.SineExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205311cb56L, "jetbrains.mps.baseLanguage.math.structure.TangentExpression"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x7418107bdc9576d4L, "jetbrains.mps.baseLanguage.math.structure.TransposeOperation"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d424d0fb5L, "jetbrains.mps.baseLanguage.math.structure.VectorInitializer"), MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a6267f775L, "jetbrains.mps.baseLanguage.math.structure.VectorType"));
}
