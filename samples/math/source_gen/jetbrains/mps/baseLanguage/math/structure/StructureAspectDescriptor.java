package jetbrains.mps.baseLanguage.math.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(59);
  /*package*/ final ConceptDescriptor myConceptAbsExpression = createDescriptorForAbsExpression();
  /*package*/ final ConceptDescriptor myConceptAbstractIndex = createDescriptorForAbstractIndex();
  /*package*/ final ConceptDescriptor myConceptArithmSymbol = createDescriptorForArithmSymbol();
  /*package*/ final ConceptDescriptor myConceptBigComplexType = createDescriptorForBigComplexType();
  /*package*/ final ConceptDescriptor myConceptBigDecimalType = createDescriptorForBigDecimalType();
  /*package*/ final ConceptDescriptor myConceptBigIntegerType = createDescriptorForBigIntegerType();
  /*package*/ final ConceptDescriptor myConceptBigMaxExpression = createDescriptorForBigMaxExpression();
  /*package*/ final ConceptDescriptor myConceptBigMinExpression = createDescriptorForBigMinExpression();
  /*package*/ final ConceptDescriptor myConceptBigProdExpression = createDescriptorForBigProdExpression();
  /*package*/ final ConceptDescriptor myConceptBigSumExpression = createDescriptorForBigSumExpression();
  /*package*/ final ConceptDescriptor myConceptComplexLiteral = createDescriptorForComplexLiteral();
  /*package*/ final ConceptDescriptor myConceptComplexType = createDescriptorForComplexType();
  /*package*/ final ConceptDescriptor myConceptConjugateOperation = createDescriptorForConjugateOperation();
  /*package*/ final ConceptDescriptor myConceptCosineExpression = createDescriptorForCosineExpression();
  /*package*/ final ConceptDescriptor myConceptDecimalBinaryOperation = createDescriptorForDecimalBinaryOperation();
  /*package*/ final ConceptDescriptor myConceptDecimalDivExpression = createDescriptorForDecimalDivExpression();
  /*package*/ final ConceptDescriptor myConceptDecimalMinusExpression = createDescriptorForDecimalMinusExpression();
  /*package*/ final ConceptDescriptor myConceptDecimalMulExpression = createDescriptorForDecimalMulExpression();
  /*package*/ final ConceptDescriptor myConceptDecimalPlusExpression = createDescriptorForDecimalPlusExpression();
  /*package*/ final ConceptDescriptor myConceptDeterminant = createDescriptorForDeterminant();
  /*package*/ final ConceptDescriptor myConceptDivExpressionFraction = createDescriptorForDivExpressionFraction();
  /*package*/ final ConceptDescriptor myConceptExponentExpression = createDescriptorForExponentExpression();
  /*package*/ final ConceptDescriptor myConceptExponentialOperation = createDescriptorForExponentialOperation();
  /*package*/ final ConceptDescriptor myConceptExtrSymbol = createDescriptorForExtrSymbol();
  /*package*/ final ConceptDescriptor myConceptInIntervalExpression = createDescriptorForInIntervalExpression();
  /*package*/ final ConceptDescriptor myConceptIntervalContainsExpression = createDescriptorForIntervalContainsExpression();
  /*package*/ final ConceptDescriptor myConceptIntervalLiteral = createDescriptorForIntervalLiteral();
  /*package*/ final ConceptDescriptor myConceptIntervalType = createDescriptorForIntervalType();
  /*package*/ final ConceptDescriptor myConceptLinearSolveOperation = createDescriptorForLinearSolveOperation();
  /*package*/ final ConceptDescriptor myConceptLiteralI = createDescriptorForLiteralI();
  /*package*/ final ConceptDescriptor myConceptLogExpression = createDescriptorForLogExpression();
  /*package*/ final ConceptDescriptor myConceptMathContext = createDescriptorForMathContext();
  /*package*/ final ConceptDescriptor myConceptMathFuncExpression = createDescriptorForMathFuncExpression();
  /*package*/ final ConceptDescriptor myConceptMathPrimitiveType = createDescriptorForMathPrimitiveType();
  /*package*/ final ConceptDescriptor myConceptMathSymbol = createDescriptorForMathSymbol();
  /*package*/ final ConceptDescriptor myConceptMathSymbolFromToIndex = createDescriptorForMathSymbolFromToIndex();
  /*package*/ final ConceptDescriptor myConceptMathSymbolIndex = createDescriptorForMathSymbolIndex();
  /*package*/ final ConceptDescriptor myConceptMathSymbolIndexReference = createDescriptorForMathSymbolIndexReference();
  /*package*/ final ConceptDescriptor myConceptMathTypeCast = createDescriptorForMathTypeCast();
  /*package*/ final ConceptDescriptor myConceptMatrixConstructor = createDescriptorForMatrixConstructor();
  /*package*/ final ConceptDescriptor myConceptMatrixElementAccessExpression = createDescriptorForMatrixElementAccessExpression();
  /*package*/ final ConceptDescriptor myConceptMatrixExponentialOperation = createDescriptorForMatrixExponentialOperation();
  /*package*/ final ConceptDescriptor myConceptMatrixIndexWildcard = createDescriptorForMatrixIndexWildcard();
  /*package*/ final ConceptDescriptor myConceptMatrixInitializer = createDescriptorForMatrixInitializer();
  /*package*/ final ConceptDescriptor myConceptMatrixInitializerIndex = createDescriptorForMatrixInitializerIndex();
  /*package*/ final ConceptDescriptor myConceptMatrixInitializerIndexReference = createDescriptorForMatrixInitializerIndexReference();
  /*package*/ final ConceptDescriptor myConceptMatrixInverseOperation = createDescriptorForMatrixInverseOperation();
  /*package*/ final ConceptDescriptor myConceptMatrixNorm = createDescriptorForMatrixNorm();
  /*package*/ final ConceptDescriptor myConceptMatrixOrVectorInitializer = createDescriptorForMatrixOrVectorInitializer();
  /*package*/ final ConceptDescriptor myConceptMatrixOrVectorType = createDescriptorForMatrixOrVectorType();
  /*package*/ final ConceptDescriptor myConceptMatrixType = createDescriptorForMatrixType();
  /*package*/ final ConceptDescriptor myConceptMatrixUnit = createDescriptorForMatrixUnit();
  /*package*/ final ConceptDescriptor myConceptMatrixZero = createDescriptorForMatrixZero();
  /*package*/ final ConceptDescriptor myConceptPowExpression = createDescriptorForPowExpression();
  /*package*/ final ConceptDescriptor myConceptSineExpression = createDescriptorForSineExpression();
  /*package*/ final ConceptDescriptor myConceptTangentExpression = createDescriptorForTangentExpression();
  /*package*/ final ConceptDescriptor myConceptTransposeOperation = createDescriptorForTransposeOperation();
  /*package*/ final ConceptDescriptor myConceptVectorInitializer = createDescriptorForVectorInitializer();
  /*package*/ final ConceptDescriptor myConceptVectorType = createDescriptorForVectorType();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptAbsExpression.getId(), 0);
    myIndexMap.put(myConceptAbstractIndex.getId(), 1);
    myIndexMap.put(myConceptArithmSymbol.getId(), 2);
    myIndexMap.put(myConceptBigComplexType.getId(), 3);
    myIndexMap.put(myConceptBigDecimalType.getId(), 4);
    myIndexMap.put(myConceptBigIntegerType.getId(), 5);
    myIndexMap.put(myConceptBigMaxExpression.getId(), 6);
    myIndexMap.put(myConceptBigMinExpression.getId(), 7);
    myIndexMap.put(myConceptBigProdExpression.getId(), 8);
    myIndexMap.put(myConceptBigSumExpression.getId(), 9);
    myIndexMap.put(myConceptComplexLiteral.getId(), 10);
    myIndexMap.put(myConceptComplexType.getId(), 11);
    myIndexMap.put(myConceptConjugateOperation.getId(), 12);
    myIndexMap.put(myConceptCosineExpression.getId(), 13);
    myIndexMap.put(myConceptDecimalBinaryOperation.getId(), 14);
    myIndexMap.put(myConceptDecimalDivExpression.getId(), 15);
    myIndexMap.put(myConceptDecimalMinusExpression.getId(), 16);
    myIndexMap.put(myConceptDecimalMulExpression.getId(), 17);
    myIndexMap.put(myConceptDecimalPlusExpression.getId(), 18);
    myIndexMap.put(myConceptDeterminant.getId(), 19);
    myIndexMap.put(myConceptDivExpressionFraction.getId(), 20);
    myIndexMap.put(myConceptExponentExpression.getId(), 21);
    myIndexMap.put(myConceptExponentialOperation.getId(), 22);
    myIndexMap.put(myConceptExtrSymbol.getId(), 23);
    myIndexMap.put(myConceptInIntervalExpression.getId(), 24);
    myIndexMap.put(myConceptIntervalContainsExpression.getId(), 25);
    myIndexMap.put(myConceptIntervalLiteral.getId(), 26);
    myIndexMap.put(myConceptIntervalType.getId(), 27);
    myIndexMap.put(myConceptLinearSolveOperation.getId(), 28);
    myIndexMap.put(myConceptLiteralI.getId(), 29);
    myIndexMap.put(myConceptLogExpression.getId(), 30);
    myIndexMap.put(myConceptMathContext.getId(), 31);
    myIndexMap.put(myConceptMathFuncExpression.getId(), 32);
    myIndexMap.put(myConceptMathPrimitiveType.getId(), 33);
    myIndexMap.put(myConceptMathSymbol.getId(), 34);
    myIndexMap.put(myConceptMathSymbolFromToIndex.getId(), 35);
    myIndexMap.put(myConceptMathSymbolIndex.getId(), 36);
    myIndexMap.put(myConceptMathSymbolIndexReference.getId(), 37);
    myIndexMap.put(myConceptMathTypeCast.getId(), 38);
    myIndexMap.put(myConceptMatrixConstructor.getId(), 39);
    myIndexMap.put(myConceptMatrixElementAccessExpression.getId(), 40);
    myIndexMap.put(myConceptMatrixExponentialOperation.getId(), 41);
    myIndexMap.put(myConceptMatrixIndexWildcard.getId(), 42);
    myIndexMap.put(myConceptMatrixInitializer.getId(), 43);
    myIndexMap.put(myConceptMatrixInitializerIndex.getId(), 44);
    myIndexMap.put(myConceptMatrixInitializerIndexReference.getId(), 45);
    myIndexMap.put(myConceptMatrixInverseOperation.getId(), 46);
    myIndexMap.put(myConceptMatrixNorm.getId(), 47);
    myIndexMap.put(myConceptMatrixOrVectorInitializer.getId(), 48);
    myIndexMap.put(myConceptMatrixOrVectorType.getId(), 49);
    myIndexMap.put(myConceptMatrixType.getId(), 50);
    myIndexMap.put(myConceptMatrixUnit.getId(), 51);
    myIndexMap.put(myConceptMatrixZero.getId(), 52);
    myIndexMap.put(myConceptPowExpression.getId(), 53);
    myIndexMap.put(myConceptSineExpression.getId(), 54);
    myIndexMap.put(myConceptTangentExpression.getId(), 55);
    myIndexMap.put(myConceptTransposeOperation.getId(), 56);
    myIndexMap.put(myConceptVectorInitializer.getId(), 57);
    myIndexMap.put(myConceptVectorType.getId(), 58);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbsExpression, myConceptAbstractIndex, myConceptArithmSymbol, myConceptBigComplexType, myConceptBigDecimalType, myConceptBigIntegerType, myConceptBigMaxExpression, myConceptBigMinExpression, myConceptBigProdExpression, myConceptBigSumExpression, myConceptComplexLiteral, myConceptComplexType, myConceptConjugateOperation, myConceptCosineExpression, myConceptDecimalBinaryOperation, myConceptDecimalDivExpression, myConceptDecimalMinusExpression, myConceptDecimalMulExpression, myConceptDecimalPlusExpression, myConceptDeterminant, myConceptDivExpressionFraction, myConceptExponentExpression, myConceptExponentialOperation, myConceptExtrSymbol, myConceptInIntervalExpression, myConceptIntervalContainsExpression, myConceptIntervalLiteral, myConceptIntervalType, myConceptLinearSolveOperation, myConceptLiteralI, myConceptLogExpression, myConceptMathContext, myConceptMathFuncExpression, myConceptMathPrimitiveType, myConceptMathSymbol, myConceptMathSymbolFromToIndex, myConceptMathSymbolIndex, myConceptMathSymbolIndexReference, myConceptMathTypeCast, myConceptMatrixConstructor, myConceptMatrixElementAccessExpression, myConceptMatrixExponentialOperation, myConceptMatrixIndexWildcard, myConceptMatrixInitializer, myConceptMatrixInitializerIndex, myConceptMatrixInitializerIndexReference, myConceptMatrixInverseOperation, myConceptMatrixNorm, myConceptMatrixOrVectorInitializer, myConceptMatrixOrVectorType, myConceptMatrixType, myConceptMatrixUnit, myConceptMatrixZero, myConceptPowExpression, myConceptSineExpression, myConceptTangentExpression, myConceptTransposeOperation, myConceptVectorInitializer, myConceptVectorType);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptAbsExpression;
      case 1:
        return myConceptAbstractIndex;
      case 2:
        return myConceptArithmSymbol;
      case 3:
        return myConceptBigComplexType;
      case 4:
        return myConceptBigDecimalType;
      case 5:
        return myConceptBigIntegerType;
      case 6:
        return myConceptBigMaxExpression;
      case 7:
        return myConceptBigMinExpression;
      case 8:
        return myConceptBigProdExpression;
      case 9:
        return myConceptBigSumExpression;
      case 10:
        return myConceptComplexLiteral;
      case 11:
        return myConceptComplexType;
      case 12:
        return myConceptConjugateOperation;
      case 13:
        return myConceptCosineExpression;
      case 14:
        return myConceptDecimalBinaryOperation;
      case 15:
        return myConceptDecimalDivExpression;
      case 16:
        return myConceptDecimalMinusExpression;
      case 17:
        return myConceptDecimalMulExpression;
      case 18:
        return myConceptDecimalPlusExpression;
      case 19:
        return myConceptDeterminant;
      case 20:
        return myConceptDivExpressionFraction;
      case 21:
        return myConceptExponentExpression;
      case 22:
        return myConceptExponentialOperation;
      case 23:
        return myConceptExtrSymbol;
      case 24:
        return myConceptInIntervalExpression;
      case 25:
        return myConceptIntervalContainsExpression;
      case 26:
        return myConceptIntervalLiteral;
      case 27:
        return myConceptIntervalType;
      case 28:
        return myConceptLinearSolveOperation;
      case 29:
        return myConceptLiteralI;
      case 30:
        return myConceptLogExpression;
      case 31:
        return myConceptMathContext;
      case 32:
        return myConceptMathFuncExpression;
      case 33:
        return myConceptMathPrimitiveType;
      case 34:
        return myConceptMathSymbol;
      case 35:
        return myConceptMathSymbolFromToIndex;
      case 36:
        return myConceptMathSymbolIndex;
      case 37:
        return myConceptMathSymbolIndexReference;
      case 38:
        return myConceptMathTypeCast;
      case 39:
        return myConceptMatrixConstructor;
      case 40:
        return myConceptMatrixElementAccessExpression;
      case 41:
        return myConceptMatrixExponentialOperation;
      case 42:
        return myConceptMatrixIndexWildcard;
      case 43:
        return myConceptMatrixInitializer;
      case 44:
        return myConceptMatrixInitializerIndex;
      case 45:
        return myConceptMatrixInitializerIndexReference;
      case 46:
        return myConceptMatrixInverseOperation;
      case 47:
        return myConceptMatrixNorm;
      case 48:
        return myConceptMatrixOrVectorInitializer;
      case 49:
        return myConceptMatrixOrVectorType;
      case 50:
        return myConceptMatrixType;
      case 51:
        return myConceptMatrixUnit;
      case 52:
        return myConceptMatrixZero;
      case 53:
        return myConceptPowExpression;
      case 54:
        return myConceptSineExpression;
      case 55:
        return myConceptTangentExpression;
      case 56:
        return myConceptTransposeOperation;
      case 57:
        return myConceptVectorInitializer;
      case 58:
        return myConceptVectorType;
      default:
        throw new IllegalStateException();
    }
  }

  private static ConceptDescriptor createDescriptorForAbsExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.AbsExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12051ecbe19L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x12051eed75cL, "expr", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238325188444"))).children(new String[]{"expr"}, new boolean[]{false}).alias("abs", "Absolute value of a number").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238325050905")).create();
  }
  private static ConceptDescriptor createDescriptorForAbstractIndex() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.AbstractIndex", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea76c7e0L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.baseLanguage.structure.IValidIdentifier").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11a3afa8c0dL)).abstract_().sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236589266912")).create();
  }
  private static ConceptDescriptor createDescriptorForArithmSymbol() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e7ac42L)).super_("jetbrains.mps.baseLanguage.math.structure.MathSymbol").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca1899L)).parents("jetbrains.mps.baseLanguage.math.structure.MathSymbol").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca1899L)).abstract_().staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236428893250")).create();
  }
  private static ConceptDescriptor createDescriptorForBigComplexType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigComplexType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120096f8e4cL)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).alias("bigcomplex", "Arbitrary precision complex number").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1237108887116")).create();
  }
  private static ConceptDescriptor createDescriptorForBigDecimalType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigDecimalType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12009449465L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).alias("bigdecimal", "Arbitrary precision signed decimal number").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1237106070629")).create();
  }
  private static ConceptDescriptor createDescriptorForBigIntegerType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigIntegerType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200944b8b7L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).alias("biginteger", "Arbitrary precision integer").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1237106079927")).create();
  }
  private static ConceptDescriptor createDescriptorForBigMaxExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigMaxExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e16047L)).super_("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e1ca4eL)).parents("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e1ca4eL)).alias("max", "Maximum of expressions").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236428480583")).create();
  }
  private static ConceptDescriptor createDescriptorForBigMinExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigMinExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e1674dL)).super_("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e1ca4eL)).parents("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e1ca4eL)).alias("min", "Minimum of expressions").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236428482381")).create();
  }
  private static ConceptDescriptor createDescriptorForBigProdExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigProdExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e12aa0L)).super_("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e7ac42L)).parents("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e7ac42L)).alias("prod", "Product of expressions").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236428466848")).create();
  }
  private static ConceptDescriptor createDescriptorForBigSumExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.BigSumExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe188eafbL)).super_("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e7ac42L)).parents("jetbrains.mps.baseLanguage.math.structure.ArithmSymbol").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e7ac42L)).alias("sum", "Sum of expressions").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236439460603")).create();
  }
  private static ConceptDescriptor createDescriptorForComplexLiteral() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ComplexLiteral", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12052224b0bL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1205222bbd7L, "real", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238328589271")), new ConceptDescriptorBuilder.Link(0x1205222bdbdL, "imag", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238328589757"))).children(new String[]{"real", "imag"}, new boolean[]{false, false}).staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238328560395")).create();
  }
  private static ConceptDescriptor createDescriptorForComplexType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ComplexType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120095d7138L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).alias("complex", "Double precision complex number").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1237107700024")).create();
  }
  private static ConceptDescriptor createDescriptorForConjugateOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ConjugateOperation", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e64afe53L)).super_("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e647ad7dL)).parents("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e647ad7dL)).alias("", "Matrix conjugate").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "7255837154369797715")).create();
  }
  private static ConceptDescriptor createDescriptorForCosineExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.CosineExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12053114b76L)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).alias("cos", "Trigonometric cosine of a value").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238344223606")).create();
  }
  private static ConceptDescriptor createDescriptorForDecimalBinaryOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL)).parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1a6fbb5a434b3680L, "context", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1a6fbb5a434b008bL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1904947163751462528"))).children(new String[]{"context"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238402702427")).create();
  }
  private static ConceptDescriptor createDescriptorForDecimalDivExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DecimalDivExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1207697107bL)).super_("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).parents("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).alias(":/d", "divide operation for big decimal types").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238940192891")).create();
  }
  private static ConceptDescriptor createDescriptorForDecimalMinusExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DecimalMinusExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12076988136L)).super_("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).parents("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).alias(":-d", "minus operation for big decimal types").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238940287286")).create();
  }
  private static ConceptDescriptor createDescriptorForDecimalMulExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DecimalMulExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120769754c8L)).super_("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).parents("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).alias(":*d", "multiplication operation for big decimal types").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238940210376")).create();
  }
  private static ConceptDescriptor createDescriptorForDecimalPlusExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DecimalPlusExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1207697a328L)).super_("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).parents("jetbrains.mps.baseLanguage.math.structure.DecimalBinaryOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL)).alias(":+d", "plus operation for bigdecimal types").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238940230440")).create();
  }
  private static ConceptDescriptor createDescriptorForDeterminant() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.Determinant", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x3a6682eeb060fd5L)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).alias("det", "Matrix determinant").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "263012178968580053")).create();
  }
  private static ConceptDescriptor createDescriptorForDivExpressionFraction() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.DivExpressionFraction", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12008f4e805L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1200914977fL, "numerator", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1237102925695")), new ConceptDescriptorBuilder.Link(0x12009149b1aL, "denominator", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1237102926618"))).children(new String[]{"numerator", "denominator"}, new boolean[]{false, false}).alias("frac", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1237100849157")).create();
  }
  private static ConceptDescriptor createDescriptorForExponentExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ExponentExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120531e6b2fL)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).alias("exp", "Exponent of a value").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238345083695")).create();
  }
  private static ConceptDescriptor createDescriptorForExponentialOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ExponentialOperation", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e6443a20L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x64b1e972e6443a22L, "expr", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "7255837154369354274"))).children(new String[]{"expr"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "7255837154369354272")).create();
  }
  private static ConceptDescriptor createDescriptorForExtrSymbol() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.ExtrSymbol", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e1ca4eL)).super_("jetbrains.mps.baseLanguage.math.structure.MathSymbol").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca1899L)).parents("jetbrains.mps.baseLanguage.math.structure.MathSymbol").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca1899L)).abstract_().staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236428507726")).create();
  }
  private static ConceptDescriptor createDescriptorForInIntervalExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.InIntervalExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb8483964L)).super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL)).parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL)).alias(":in:", "is in interval").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1235747354980")).create();
  }
  private static ConceptDescriptor createDescriptorForIntervalContainsExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.IntervalContainsExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb8483968L)).super_("jetbrains.mps.baseLanguage.structure.BinaryOperation").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL)).parents("jetbrains.mps.baseLanguage.structure.BinaryOperation").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xfbdeb6fecfL)).alias(":contains:", "(?) interval contains").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1235747354984")).create();
  }
  private static ConceptDescriptor createDescriptorForIntervalLiteral() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.IntervalLiteral", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb848396cL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x11fb848396fL, "startIncluded", new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1235747354991")), new ConceptDescriptorBuilder.Prop(0x11fb8483970L, "endIncluded", new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1235747354992"))).properties("startIncluded", "endIncluded").childDescriptors(new ConceptDescriptorBuilder.Link(0x11fb848396dL, "start", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1235747354989")), new ConceptDescriptorBuilder.Link(0x11fb848396eL, "end", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1235747354990"))).children(new String[]{"start", "end"}, new boolean[]{false, false}).alias("interval", "Interval literal").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1235747354988")).create();
  }
  private static ConceptDescriptor createDescriptorForIntervalType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.IntervalType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb8483972L)).super_("jetbrains.mps.baseLanguage.structure.Type").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).parents("jetbrains.mps.baseLanguage.structure.Type").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11fb8483973L, "elementType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1235747354995"))).children(new String[]{"elementType"}, new boolean[]{false}).alias("interval", "Interval type").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1235747354994")).create();
  }
  private static ConceptDescriptor createDescriptorForLinearSolveOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.LinearSolveOperation", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x13afebc2af505abdL)).super_("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL)).parents("jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x13afebc2af508f96L, "matrix", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1418611629042470806")), new ConceptDescriptorBuilder.Link(0x13afebc2af508f97L, "vector", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1418611629042470807")), new ConceptDescriptorBuilder.Link(0x1a6fbb5a434b4c0cL, "context", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1a6fbb5a434b008bL), true, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1904947163751468044"))).children(new String[]{"matrix", "vector", "context"}, new boolean[]{false, false, false}).alias("lsolve", "").sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1418611629042457277")).create();
  }
  private static ConceptDescriptor createDescriptorForLiteralI() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.LiteralI", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205202c5edL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).alias("I", "Imaginary unit").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238326494701")).create();
  }
  private static ConceptDescriptor createDescriptorForLogExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.LogExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205311f8ffL)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).alias("ln", "Natural logarithm of a value").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238344268031")).create();
  }
  private static ConceptDescriptor createDescriptorForMathContext() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathContext", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1a6fbb5a434b008bL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1a6fbb5a434b3533L, "roundingMode", new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1904947163751462195")), new ConceptDescriptorBuilder.Prop(0x1a6fbb5a434b3534L, "precision", new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1904947163751462196")), new ConceptDescriptorBuilder.Prop(0x1a6fbb5a434b3535L, "precisionSetting", new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1904947163751462197"))).properties("roundingMode", "precision", "precisionSetting").sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1904947163751448715")).create();
  }
  private static ConceptDescriptor createDescriptorForMathFuncExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x120530c4ed0L, "param", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238343896784"))).children(new String[]{"param"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238343594087")).create();
  }
  private static ConceptDescriptor createDescriptorForMathPrimitiveType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).super_("jetbrains.mps.baseLanguage.structure.Type").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).parents("jetbrains.mps.baseLanguage.structure.Type").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).abstract_().staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1237218038292")).create();
  }
  private static ConceptDescriptor createDescriptorForMathSymbol() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathSymbol", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca1899L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11fe0cae7f6L, "var", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea76c7e0L), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236427007990")), new ConceptDescriptorBuilder.Link(0x11fe0cae874L, "expression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236427008116")), new ConceptDescriptorBuilder.Link(0x11fe0cd41a5L, "precondition", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236427162021")), new ConceptDescriptorBuilder.Link(0x11feacc8f16L, "upperBound", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236594888470"))).children(new String[]{"var", "expression", "precondition", "upperBound"}, new boolean[]{false, false, false, false}).abstract_().staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236426954905")).create();
  }
  private static ConceptDescriptor createDescriptorForMathSymbolFromToIndex() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathSymbolFromToIndex", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea765cf0L)).super_("jetbrains.mps.baseLanguage.math.structure.AbstractIndex").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea76c7e0L)).parents("jetbrains.mps.baseLanguage.math.structure.AbstractIndex").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea76c7e0L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11fea7bf632L, "from", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236589606450"))).children(new String[]{"from"}, new boolean[]{false}).alias("", "iterate over interval of integers").sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236589239536")).create();
  }
  private static ConceptDescriptor createDescriptorForMathSymbolIndex() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndex", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca6da8L)).super_("jetbrains.mps.baseLanguage.math.structure.AbstractIndex").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea76c7e0L)).parents("jetbrains.mps.baseLanguage.math.structure.AbstractIndex").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea76c7e0L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11fe0ccecc0L, "iterable", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236427140288"))).children(new String[]{"iterable"}, new boolean[]{false}).alias("", "iterate over arbitrary iterable class").sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236426976680")).create();
  }
  private static ConceptDescriptor createDescriptorForMathSymbolIndexReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathSymbolIndexReference", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0d91491L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x11fe0d95bdfL, "indexRef", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea76c7e0L), false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236427955167"))).references("indexRef").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1236427936913")).create();
  }
  private static ConceptDescriptor createDescriptorForMathTypeCast() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MathTypeCast", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200fb8bcedL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1200fbb56e7L, "target", new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1237214516967"))).properties("target").childDescriptors(new ConceptDescriptorBuilder.Link(0x1202386bfa3L, "castedExpr", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1237546614691"))).children(new String[]{"castedExpr"}, new boolean[]{false}).staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1237214346477")).create();
  }
  private static ConceptDescriptor createDescriptorForMatrixConstructor() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixConstructor", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a626b0a85L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x308cb55abc73bd40L, "column", new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "3498370411873418560"))).properties("column").childDescriptors(new ConceptDescriptorBuilder.Link(0x42d5783a626b0a8dL, "components", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, true, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "4815887568697232013"))).children(new String[]{"components"}, new boolean[]{true}).alias("[", "Matrix row constructor").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "4815887568697232005")).create();
  }
  private static ConceptDescriptor createDescriptorForMatrixElementAccessExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixElementAccessExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x58aab8999c8f432aL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.lang.core.structure.IDontSubstituteByDefault").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x19796fa16a19888bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x58aab8999c8f433cL, "expression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6389121991274611516")), new ConceptDescriptorBuilder.Link(0x58aab8999c8f433dL, "rowIndex", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6389121991274611517")), new ConceptDescriptorBuilder.Link(0x58aab8999c8f433eL, "colIndex", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6389121991274611518"))).children(new String[]{"expression", "rowIndex", "colIndex"}, new boolean[]{false, false, false}).staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6389121991274611498")).create();
  }
  private static ConceptDescriptor createDescriptorForMatrixExponentialOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e647ad7dL)).super_("jetbrains.mps.baseLanguage.math.structure.ExponentialOperation").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e6443a20L)).parents("jetbrains.mps.baseLanguage.math.structure.ExponentialOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e6443a20L)).abstract_().staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "7255837154369580413")).create();
  }
  private static ConceptDescriptor createDescriptorForMatrixIndexWildcard() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixIndexWildcard", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x58aab8999c8f4339L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).alias("*", "Wildcard index").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6389121991274611513")).create();
  }
  private static ConceptDescriptor createDescriptorForMatrixInitializer() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixInitializer", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240a048L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d424d5141L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x5650ac0d4240f25bL, "rowIndex", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f255L), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6219660258344759899")), new ConceptDescriptorBuilder.Link(0x5650ac0d4240f25cL, "colIndex", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f255L), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6219660258344759900")), new ConceptDescriptorBuilder.Link(0x5650ac0d42453499L, "rowsCount", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6219660258345039001")), new ConceptDescriptorBuilder.Link(0x5650ac0d4245349aL, "colsCount", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6219660258345039002")), new ConceptDescriptorBuilder.Link(0x5650ac0d4240d857L, "expression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6219660258344753239"))).children(new String[]{"rowIndex", "colIndex", "rowsCount", "colsCount", "expression"}, new boolean[]{false, false, false, false, false}).alias("matrix", "Matrix initializer").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6219660258344738888")).create();
  }
  private static ConceptDescriptor createDescriptorForMatrixInitializerIndex() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndex", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f255L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d424d5141L)).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6219660258344759893")).create();
  }
  private static ConceptDescriptor createDescriptorForMatrixInitializerIndexReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixInitializerIndexReference", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f252L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x5650ac0d4240f275L, "index", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f255L), false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6219660258344759925"))).references("index").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6219660258344759890")).create();
  }
  private static ConceptDescriptor createDescriptorForMatrixInverseOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixInverseOperation", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x13afebc2af505abcL)).super_("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e647ad7dL)).parents("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e647ad7dL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1a6fbb5a434b3ed7L, "context", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1a6fbb5a434b008bL), true, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1904947163751464663"))).children(new String[]{"context"}, new boolean[]{false}).alias("", "Matrix inverse operation").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1418611629042457276")).create();
  }
  private static ConceptDescriptor createDescriptorForMatrixNorm() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixNorm", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0xcc7e1ce69847db2L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0xa87de0e72c3a3efL, "deg", new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "758819215871550447"))).properties("deg").childDescriptors(new ConceptDescriptorBuilder.Link(0xa87de0e72bc0fd1L, "mat", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "758819215871053777"))).children(new String[]{"mat"}, new boolean[]{false}).alias("norm", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "920952925470358962")).create();
  }
  private static ConceptDescriptor createDescriptorForMatrixOrVectorInitializer() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d424d5141L)).version(1).interface_().sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6219660258345570625")).create();
  }
  private static ConceptDescriptor createDescriptorForMatrixOrVectorType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x513c04200c187a63L)).version(1).interface_().sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "5853558151363197539")).create();
  }
  private static ConceptDescriptor createDescriptorForMatrixType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a6267f776L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x513c04200c187a63L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x42d5783a62683dacL, "rows", new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "4815887568697048492")), new ConceptDescriptorBuilder.Prop(0x42d5783a62683dadL, "columns", new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "4815887568697048493"))).properties("rows", "columns").childDescriptors(new ConceptDescriptorBuilder.Link(0x42d5783a62684653L, "elementType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "4815887568697050707"))).children(new String[]{"elementType"}, new boolean[]{false}).alias("matrix", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "4815887568697030518")).create();
  }
  private static ConceptDescriptor createDescriptorForMatrixUnit() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixUnit", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x13afebc2af3c3bdfL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x13afebc2af3c3be0L, "size", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1418611629041138656"))).children(new String[]{"size"}, new boolean[]{false}).alias("identity", "Identity matrix").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1418611629041138655")).create();
  }
  private static ConceptDescriptor createDescriptorForMatrixZero() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.MatrixZero", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x36700251396ecb7bL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x3670025139713336L, "square", new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "3922637823319028534"))).properties("square").childDescriptors(new ConceptDescriptorBuilder.Link(0x3670025139713334L, "rows", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "3922637823319028532")), new ConceptDescriptorBuilder.Link(0x3670025139713335L, "columns", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "3922637823319028533"))).children(new String[]{"rows", "columns"}, new boolean[]{false, false}).alias("zero", "Zero matrix").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "3922637823318870907")).create();
  }
  private static ConceptDescriptor createDescriptorForPowExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.PowExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12052b2cdd3L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x12052b71f8bL, "base", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238338314123")), new ConceptDescriptorBuilder.Link(0x12052b722e7L, "exponent", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238338314983"))).children(new String[]{"base", "exponent"}, new boolean[]{false, false}).alias("^", "Power expression").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238338031059")).create();
  }
  private static ConceptDescriptor createDescriptorForSineExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.SineExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205311204eL)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).alias("sin", "Trigonometric sine of a value").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238344212558")).create();
  }
  private static ConceptDescriptor createDescriptorForTangentExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.TangentExpression", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205311cb56L)).super_("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).parents("jetbrains.mps.baseLanguage.math.structure.MathFuncExpression").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L)).alias("tan", "Trigonometric tangent of a value").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "1238344256342")).create();
  }
  private static ConceptDescriptor createDescriptorForTransposeOperation() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.TransposeOperation", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x7418107bdc9576d4L)).super_("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e647ad7dL)).parents("jetbrains.mps.baseLanguage.math.structure.MatrixExponentialOperation").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e647ad7dL)).alias("", "Transpose operation").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "8365454432008500948")).create();
  }
  private static ConceptDescriptor createDescriptorForVectorInitializer() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.VectorInitializer", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d424d0fb5L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorInitializer").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d424d5141L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x5650ac0d424d0fb7L, "rowIndex", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f255L), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6219660258345553847")), new ConceptDescriptorBuilder.Link(0x5650ac0d424d0fb8L, "expression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6219660258345553848")), new ConceptDescriptorBuilder.Link(0x5650ac0d424d0fb9L, "rowsCount", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6219660258345553849"))).children(new String[]{"rowIndex", "expression", "rowsCount"}, new boolean[]{false, false, false}).alias("vector", "Vector initializer").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "6219660258345553845")).create();
  }
  private static ConceptDescriptor createDescriptorForVectorType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.math.structure.VectorType", MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a6267f775L)).super_("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType").version(1).super_(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L)).parents("jetbrains.mps.baseLanguage.math.structure.MathPrimitiveType", "jetbrains.mps.baseLanguage.math.structure.MatrixOrVectorType").parentIds(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200ff11214L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x513c04200c187a63L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x42d5783a6268466eL, "height", new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "4815887568697050734"))).properties("height").childDescriptors(new ConceptDescriptorBuilder.Link(0x42d5783a6268466fL, "elementType", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL), false, false, false, new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "4815887568697050735"))).children(new String[]{"elementType"}, new boolean[]{false}).alias("vector", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:cb1a36c8-1ffb-415a-aba8-afb9dc042d1b(jetbrains.mps.baseLanguage.math.structure)", "4815887568697030517")).create();
  }
}
