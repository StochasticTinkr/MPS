package jetbrains.mps.baseLanguage.math.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractIndex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArithmSymbol = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BigComplexType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BigDecimalType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BigIntegerType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BigMaxExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BigMinExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BigProdExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BigSumExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ComplexLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ComplexType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConjugateOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CosineExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DecimalBinaryOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DecimalDivExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DecimalMinusExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DecimalMulExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DecimalPlusExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Determinant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DivExpressionFraction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExponentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExponentialOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExtrSymbol = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InIntervalExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntervalContainsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntervalLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntervalType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinearSolveOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LiteralI = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LogExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathContext = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathFuncExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathPrimitiveType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathSymbol = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathSymbolFromToIndex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathSymbolIndex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathSymbolIndexReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathTypeCast = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixConstructor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixElementAccessExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixExponentialOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixIndexWildcard = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixInitializerIndex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixInitializerIndexReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixInverseOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixNorm = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixOrVectorInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixOrVectorType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixUnit = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixZero = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PowExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SineExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TangentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransposeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VectorInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VectorType = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbsExpression;
      case 1:
        return props_AbstractIndex;
      case 2:
        return props_ArithmSymbol;
      case 3:
        return props_BigComplexType;
      case 4:
        return props_BigDecimalType;
      case 5:
        return props_BigIntegerType;
      case 6:
        return props_BigMaxExpression;
      case 7:
        return props_BigMinExpression;
      case 8:
        return props_BigProdExpression;
      case 9:
        return props_BigSumExpression;
      case 10:
        return props_ComplexLiteral;
      case 11:
        return props_ComplexType;
      case 12:
        return props_ConjugateOperation;
      case 13:
        return props_CosineExpression;
      case 14:
        return props_DecimalBinaryOperation;
      case 15:
        return props_DecimalDivExpression;
      case 16:
        return props_DecimalMinusExpression;
      case 17:
        return props_DecimalMulExpression;
      case 18:
        return props_DecimalPlusExpression;
      case 19:
        return props_Determinant;
      case 20:
        return props_DivExpressionFraction;
      case 21:
        return props_ExponentExpression;
      case 22:
        return props_ExponentialOperation;
      case 23:
        return props_ExtrSymbol;
      case 24:
        return props_InIntervalExpression;
      case 25:
        return props_IntervalContainsExpression;
      case 26:
        return props_IntervalLiteral;
      case 27:
        return props_IntervalType;
      case 28:
        return props_LinearSolveOperation;
      case 29:
        return props_LiteralI;
      case 30:
        return props_LogExpression;
      case 31:
        return props_MathContext;
      case 32:
        return props_MathFuncExpression;
      case 33:
        return props_MathPrimitiveType;
      case 34:
        return props_MathSymbol;
      case 35:
        return props_MathSymbolFromToIndex;
      case 36:
        return props_MathSymbolIndex;
      case 37:
        return props_MathSymbolIndexReference;
      case 38:
        return props_MathTypeCast;
      case 39:
        return props_MatrixConstructor;
      case 40:
        return props_MatrixElementAccessExpression;
      case 41:
        return props_MatrixExponentialOperation;
      case 42:
        return props_MatrixIndexWildcard;
      case 43:
        return props_MatrixInitializer;
      case 44:
        return props_MatrixInitializerIndex;
      case 45:
        return props_MatrixInitializerIndexReference;
      case 46:
        return props_MatrixInverseOperation;
      case 47:
        return props_MatrixNorm;
      case 48:
        return props_MatrixOrVectorInitializer;
      case 49:
        return props_MatrixOrVectorType;
      case 50:
        return props_MatrixType;
      case 51:
        return props_MatrixUnit;
      case 52:
        return props_MatrixZero;
      case 53:
        return props_PowExpression;
      case 54:
        return props_SineExpression;
      case 55:
        return props_TangentExpression;
      case 56:
        return props_TransposeOperation;
      case 57:
        return props_VectorInitializer;
      case 58:
        return props_VectorType;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
