package jetbrains.mps.baseLanguage.math.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractIndex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArithmSymbol = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BigComplexType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BigDecimalType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BigIntegerType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BigMaxExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BigMinExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BigProdExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BigSumExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ComplexLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ComplexType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConjugateOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CosineExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DecimalBinaryOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DecimalDivExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DecimalMinusExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DecimalMulExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DecimalPlusExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Determinant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DivExpressionFraction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExponentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExponentialOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ExtrSymbol = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_InIntervalExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntervalContainsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntervalLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_IntervalType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LinearSolveOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LiteralI = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LogExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathContext = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathFuncExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathPrimitiveType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathSymbol = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathSymbolFromToIndex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathSymbolIndex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathSymbolIndexReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MathTypeCast = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixConstructor = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixElementAccessExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixExponentialOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixIndexWildcard = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixInitializerIndex = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixInitializerIndexReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixInverseOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixNorm = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixOrVectorInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixOrVectorType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixUnit = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MatrixZero = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PowExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SineExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TangentExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TransposeOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VectorInitializer = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VectorType = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbsExpression:
        return props_AbsExpression;
      case LanguageConceptSwitch.AbstractIndex:
        return props_AbstractIndex;
      case LanguageConceptSwitch.ArithmSymbol:
        return props_ArithmSymbol;
      case LanguageConceptSwitch.BigComplexType:
        return props_BigComplexType;
      case LanguageConceptSwitch.BigDecimalType:
        return props_BigDecimalType;
      case LanguageConceptSwitch.BigIntegerType:
        return props_BigIntegerType;
      case LanguageConceptSwitch.BigMaxExpression:
        return props_BigMaxExpression;
      case LanguageConceptSwitch.BigMinExpression:
        return props_BigMinExpression;
      case LanguageConceptSwitch.BigProdExpression:
        return props_BigProdExpression;
      case LanguageConceptSwitch.BigSumExpression:
        return props_BigSumExpression;
      case LanguageConceptSwitch.ComplexLiteral:
        return props_ComplexLiteral;
      case LanguageConceptSwitch.ComplexType:
        return props_ComplexType;
      case LanguageConceptSwitch.ConjugateOperation:
        return props_ConjugateOperation;
      case LanguageConceptSwitch.CosineExpression:
        return props_CosineExpression;
      case LanguageConceptSwitch.DecimalBinaryOperation:
        return props_DecimalBinaryOperation;
      case LanguageConceptSwitch.DecimalDivExpression:
        return props_DecimalDivExpression;
      case LanguageConceptSwitch.DecimalMinusExpression:
        return props_DecimalMinusExpression;
      case LanguageConceptSwitch.DecimalMulExpression:
        return props_DecimalMulExpression;
      case LanguageConceptSwitch.DecimalPlusExpression:
        return props_DecimalPlusExpression;
      case LanguageConceptSwitch.Determinant:
        return props_Determinant;
      case LanguageConceptSwitch.DivExpressionFraction:
        return props_DivExpressionFraction;
      case LanguageConceptSwitch.ExponentExpression:
        return props_ExponentExpression;
      case LanguageConceptSwitch.ExponentialOperation:
        return props_ExponentialOperation;
      case LanguageConceptSwitch.ExtrSymbol:
        return props_ExtrSymbol;
      case LanguageConceptSwitch.InIntervalExpression:
        return props_InIntervalExpression;
      case LanguageConceptSwitch.IntervalContainsExpression:
        return props_IntervalContainsExpression;
      case LanguageConceptSwitch.IntervalLiteral:
        return props_IntervalLiteral;
      case LanguageConceptSwitch.IntervalType:
        return props_IntervalType;
      case LanguageConceptSwitch.LinearSolveOperation:
        return props_LinearSolveOperation;
      case LanguageConceptSwitch.LiteralI:
        return props_LiteralI;
      case LanguageConceptSwitch.LogExpression:
        return props_LogExpression;
      case LanguageConceptSwitch.MathContext:
        return props_MathContext;
      case LanguageConceptSwitch.MathFuncExpression:
        return props_MathFuncExpression;
      case LanguageConceptSwitch.MathPrimitiveType:
        return props_MathPrimitiveType;
      case LanguageConceptSwitch.MathSymbol:
        return props_MathSymbol;
      case LanguageConceptSwitch.MathSymbolFromToIndex:
        return props_MathSymbolFromToIndex;
      case LanguageConceptSwitch.MathSymbolIndex:
        return props_MathSymbolIndex;
      case LanguageConceptSwitch.MathSymbolIndexReference:
        return props_MathSymbolIndexReference;
      case LanguageConceptSwitch.MathTypeCast:
        return props_MathTypeCast;
      case LanguageConceptSwitch.MatrixConstructor:
        return props_MatrixConstructor;
      case LanguageConceptSwitch.MatrixElementAccessExpression:
        return props_MatrixElementAccessExpression;
      case LanguageConceptSwitch.MatrixExponentialOperation:
        return props_MatrixExponentialOperation;
      case LanguageConceptSwitch.MatrixIndexWildcard:
        return props_MatrixIndexWildcard;
      case LanguageConceptSwitch.MatrixInitializer:
        return props_MatrixInitializer;
      case LanguageConceptSwitch.MatrixInitializerIndex:
        return props_MatrixInitializerIndex;
      case LanguageConceptSwitch.MatrixInitializerIndexReference:
        return props_MatrixInitializerIndexReference;
      case LanguageConceptSwitch.MatrixInverseOperation:
        return props_MatrixInverseOperation;
      case LanguageConceptSwitch.MatrixNorm:
        return props_MatrixNorm;
      case LanguageConceptSwitch.MatrixOrVectorInitializer:
        return props_MatrixOrVectorInitializer;
      case LanguageConceptSwitch.MatrixOrVectorType:
        return props_MatrixOrVectorType;
      case LanguageConceptSwitch.MatrixType:
        return props_MatrixType;
      case LanguageConceptSwitch.MatrixUnit:
        return props_MatrixUnit;
      case LanguageConceptSwitch.MatrixZero:
        return props_MatrixZero;
      case LanguageConceptSwitch.PowExpression:
        return props_PowExpression;
      case LanguageConceptSwitch.SineExpression:
        return props_SineExpression;
      case LanguageConceptSwitch.TangentExpression:
        return props_TangentExpression;
      case LanguageConceptSwitch.TransposeOperation:
        return props_TransposeOperation;
      case LanguageConceptSwitch.VectorInitializer:
        return props_VectorInitializer;
      case LanguageConceptSwitch.VectorType:
        return props_VectorType;
    }
    return null;
  }
}
