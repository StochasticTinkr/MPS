package jetbrains.mps.baseLanguage.math.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.menus.transformation.TransformationMenuBase;
import java.util.Set;
import jetbrains.mps.internal.collections.runtime.SetSequence;
import java.util.HashSet;
import jetbrains.mps.editor.contextActionsTool.lang.menus.runtime.MenuLocations;
import org.jetbrains.annotations.NotNull;
import java.util.List;
import jetbrains.mps.lang.editor.menus.MenuPart;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuItem;
import jetbrains.mps.openapi.editor.menus.transformation.TransformationMenuContext;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.editor.menus.transformation.SubMenuMenuTransformationMenuPart;
import java.util.Arrays;
import jetbrains.mps.lang.editor.menus.SingleItemMenuPart;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.openapi.editor.menus.transformation.ActionItemBase;
import jetbrains.mps.editor.contextActionsTool.lang.menus.runtime.SidebarActionItem;
import jetbrains.mps.smodel.action.SNodeFactoryOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.runtime.IconResource;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class Math extends TransformationMenuBase {
  public Math() {
    super(true);
  }
  private final Set<String> myLocations = SetSequence.fromSetAndArray(new HashSet<String>(), MenuLocations.CONTEXT_ACTIONS_TOOL);
  @Override
  public boolean isApplicableToLocation(@NotNull String location) {
    return SetSequence.fromSet(myLocations).contains(location);
  }

  @Override
  @NotNull
  protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts(TransformationMenuContext _context) {
    List<MenuPart<TransformationMenuItem, TransformationMenuContext>> result = new ArrayList<MenuPart<TransformationMenuItem, TransformationMenuContext>>();
    if (ListSequence.fromListAndArray(new ArrayList<String>(), MenuLocations.CONTEXT_ACTIONS_TOOL).contains(_context.getMenuLocation())) {
      result.add(new Math.TMP_SubMenu_pmdw_a0());
      result.add(new Math.TMP_SubMenu_pmdw_b0());
      result.add(new Math.TMP_SubMenu_pmdw_c0());
      result.add(new Math.TMP_SubMenu_pmdw_d0());
      result.add(new Math.TMP_SubMenu_pmdw_e0());
    }
    return result;
  }

  public class TMP_SubMenu_pmdw_a0 extends SubMenuMenuTransformationMenuPart {
    @Override
    protected String getText(TransformationMenuContext _context) {
      return "Math";
    }

    @Override
    protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts() {
      return Arrays.<MenuPart<TransformationMenuItem, TransformationMenuContext>>asList(new Math.TMP_SubMenu_pmdw_a0.TMP_SubMenu_pmdw_a0a());
    }
    public class TMP_SubMenu_pmdw_a0a extends SubMenuMenuTransformationMenuPart {
      @Override
      protected String getText(TransformationMenuContext _context) {
        return "Operations";
      }

      @Override
      protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts() {
        return Arrays.<MenuPart<TransformationMenuItem, TransformationMenuContext>>asList(new Math.TMP_SubMenu_pmdw_a0.TMP_SubMenu_pmdw_a0a.TMP_Action_pmdw_a0a0(), new Math.TMP_SubMenu_pmdw_a0.TMP_SubMenu_pmdw_a0a.TMP_Action_pmdw_b0a0(), new Math.TMP_SubMenu_pmdw_a0.TMP_SubMenu_pmdw_a0a.TMP_Action_pmdw_c0a0(), new Math.TMP_SubMenu_pmdw_a0.TMP_SubMenu_pmdw_a0a.TMP_Action_pmdw_d0a0());
      }
      private class TMP_Action_pmdw_a0a0 extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
        @Nullable
        protected TransformationMenuItem createItem(TransformationMenuContext context) {
          return new Math.TMP_SubMenu_pmdw_a0.TMP_SubMenu_pmdw_a0a.TMP_Action_pmdw_a0a0.Item(context);
        }

        private class Item extends ActionItemBase implements SidebarActionItem {
          private final TransformationMenuContext _context;

          private Item(TransformationMenuContext context) {
            _context = context;
          }

          @Nullable
          @Override
          public String getLabelText(String pattern) {
            return "";
          }

          @Override
          public void execute(@NotNull String pattern) {
            SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e16047L, "jetbrains.mps.baseLanguage.math.structure.BigMaxExpression")));
          }


          @Override
          public IconResource getIcon() {
            return IconContainer.RESOURCE_a0a9c3d6;
          }
          @Override
          public String getTooltipText() {
            return "MAX operation";
          }
        }
      }
      private class TMP_Action_pmdw_b0a0 extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
        @Nullable
        protected TransformationMenuItem createItem(TransformationMenuContext context) {
          return new Math.TMP_SubMenu_pmdw_a0.TMP_SubMenu_pmdw_a0a.TMP_Action_pmdw_b0a0.Item(context);
        }

        private class Item extends ActionItemBase implements SidebarActionItem {
          private final TransformationMenuContext _context;

          private Item(TransformationMenuContext context) {
            _context = context;
          }

          @Nullable
          @Override
          public String getLabelText(String pattern) {
            return "";
          }

          @Override
          public void execute(@NotNull String pattern) {
            SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e1674dL, "jetbrains.mps.baseLanguage.math.structure.BigMinExpression")));
          }


          @Override
          public IconResource getIcon() {
            return IconContainer.RESOURCE_a0a9c4d6;
          }
          @Override
          public String getTooltipText() {
            return "MIN operation";
          }
        }
      }
      private class TMP_Action_pmdw_c0a0 extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
        @Nullable
        protected TransformationMenuItem createItem(TransformationMenuContext context) {
          return new Math.TMP_SubMenu_pmdw_a0.TMP_SubMenu_pmdw_a0a.TMP_Action_pmdw_c0a0.Item(context);
        }

        private class Item extends ActionItemBase implements SidebarActionItem {
          private final TransformationMenuContext _context;

          private Item(TransformationMenuContext context) {
            _context = context;
          }

          @Nullable
          @Override
          public String getLabelText(String pattern) {
            return "";
          }

          @Override
          public void execute(@NotNull String pattern) {
            SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0e12aa0L, "jetbrains.mps.baseLanguage.math.structure.BigProdExpression")));
          }


          @Override
          public IconResource getIcon() {
            return IconContainer.RESOURCE_a0a9c5d6;
          }
          @Override
          public String getTooltipText() {
            return "Product operation";
          }
        }
      }
      private class TMP_Action_pmdw_d0a0 extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
        @Nullable
        protected TransformationMenuItem createItem(TransformationMenuContext context) {
          return new Math.TMP_SubMenu_pmdw_a0.TMP_SubMenu_pmdw_a0a.TMP_Action_pmdw_d0a0.Item(context);
        }

        private class Item extends ActionItemBase implements SidebarActionItem {
          private final TransformationMenuContext _context;

          private Item(TransformationMenuContext context) {
            _context = context;
          }

          @Nullable
          @Override
          public String getLabelText(String pattern) {
            return "";
          }

          @Override
          public void execute(@NotNull String pattern) {
            SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe188eafbL, "jetbrains.mps.baseLanguage.math.structure.BigSumExpression")));
          }


          @Override
          public IconResource getIcon() {
            return IconContainer.RESOURCE_a0a9c6d6;
          }
          @Override
          public String getTooltipText() {
            return "Sum operation";
          }
        }
      }
    }
  }
  public class TMP_SubMenu_pmdw_b0 extends SubMenuMenuTransformationMenuPart {
    @Override
    protected String getText(TransformationMenuContext _context) {
      return "Matrix";
    }

    @Override
    protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts() {
      return Arrays.<MenuPart<TransformationMenuItem, TransformationMenuContext>>asList(new Math.TMP_SubMenu_pmdw_b0.TMP_Action_pmdw_a1a(), new Math.TMP_SubMenu_pmdw_b0.TMP_Action_pmdw_b1a());
    }
    private class TMP_Action_pmdw_a1a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        return new Math.TMP_SubMenu_pmdw_b0.TMP_Action_pmdw_a1a.Item(context);
      }

      private class Item extends ActionItemBase implements SidebarActionItem {
        private final TransformationMenuContext _context;

        private Item(TransformationMenuContext context) {
          _context = context;
        }

        @Nullable
        @Override
        public String getLabelText(String pattern) {
          return "";
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNode m = SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a626b0a85L, "jetbrains.mps.baseLanguage.math.structure.MatrixConstructor")));
          SPropertyOperations.set(m, MetaAdapterFactory.getProperty(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a626b0a85L, 0x308cb55abc73bd40L, "column"), "" + (true));
        }


        @Override
        public IconResource getIcon() {
          return IconContainer.RESOURCE_a0a9c3h;
        }
        @Override
        public String getTooltipText() {
          return "Matrix column";
        }
      }
    }
    private class TMP_Action_pmdw_b1a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        return new Math.TMP_SubMenu_pmdw_b0.TMP_Action_pmdw_b1a.Item(context);
      }

      private class Item extends ActionItemBase implements SidebarActionItem {
        private final TransformationMenuContext _context;

        private Item(TransformationMenuContext context) {
          _context = context;
        }

        @Nullable
        @Override
        public String getLabelText(String pattern) {
          return "";
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a626b0a85L, "jetbrains.mps.baseLanguage.math.structure.MatrixConstructor")));
        }


        @Override
        public IconResource getIcon() {
          return IconContainer.RESOURCE_a0a9c4h;
        }
        @Override
        public String getTooltipText() {
          return "Matrix";
        }
      }
    }
  }
  public class TMP_SubMenu_pmdw_c0 extends SubMenuMenuTransformationMenuPart {
    @Override
    protected String getText(TransformationMenuContext _context) {
      return "High precision";
    }

    @Override
    protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts() {
      return Arrays.<MenuPart<TransformationMenuItem, TransformationMenuContext>>asList(new Math.TMP_SubMenu_pmdw_c0.TMP_Action_pmdw_a2a(), new Math.TMP_SubMenu_pmdw_c0.TMP_Action_pmdw_b2a(), new Math.TMP_SubMenu_pmdw_c0.TMP_Action_pmdw_c2a(), new Math.TMP_SubMenu_pmdw_c0.TMP_Action_pmdw_d2a());
    }
    private class TMP_Action_pmdw_a2a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        return new Math.TMP_SubMenu_pmdw_c0.TMP_Action_pmdw_a2a.Item(context);
      }

      private class Item extends ActionItemBase implements SidebarActionItem {
        private final TransformationMenuContext _context;

        private Item(TransformationMenuContext context) {
          _context = context;
        }

        @Nullable
        @Override
        public String getLabelText(String pattern) {
          return "";
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1207697a328L, "jetbrains.mps.baseLanguage.math.structure.DecimalPlusExpression")));
        }


        @Override
        public IconResource getIcon() {
          return IconContainer.RESOURCE_a0a9c3i;
        }
        @Override
        public String getTooltipText() {
          return "Plus operation";
        }
      }
    }
    private class TMP_Action_pmdw_b2a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        return new Math.TMP_SubMenu_pmdw_c0.TMP_Action_pmdw_b2a.Item(context);
      }

      private class Item extends ActionItemBase implements SidebarActionItem {
        private final TransformationMenuContext _context;

        private Item(TransformationMenuContext context) {
          _context = context;
        }

        @Nullable
        @Override
        public String getLabelText(String pattern) {
          return "";
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12076988136L, "jetbrains.mps.baseLanguage.math.structure.DecimalMinusExpression")));
        }


        @Override
        public IconResource getIcon() {
          return IconContainer.RESOURCE_a0a9c4i;
        }
        @Override
        public String getTooltipText() {
          return "Minus operation";
        }
      }
    }
    private class TMP_Action_pmdw_c2a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        return new Math.TMP_SubMenu_pmdw_c0.TMP_Action_pmdw_c2a.Item(context);
      }

      private class Item extends ActionItemBase implements SidebarActionItem {
        private final TransformationMenuContext _context;

        private Item(TransformationMenuContext context) {
          _context = context;
        }

        @Nullable
        @Override
        public String getLabelText(String pattern) {
          return "";
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120769754c8L, "jetbrains.mps.baseLanguage.math.structure.DecimalMulExpression")));
        }


        @Override
        public IconResource getIcon() {
          return IconContainer.RESOURCE_a0a9c5i;
        }
        @Override
        public String getTooltipText() {
          return "Multiply operation";
        }
      }
    }
    private class TMP_Action_pmdw_d2a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        return new Math.TMP_SubMenu_pmdw_c0.TMP_Action_pmdw_d2a.Item(context);
      }

      private class Item extends ActionItemBase implements SidebarActionItem {
        private final TransformationMenuContext _context;

        private Item(TransformationMenuContext context) {
          _context = context;
        }

        @Nullable
        @Override
        public String getLabelText(String pattern) {
          return "";
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1207697107bL, "jetbrains.mps.baseLanguage.math.structure.DecimalDivExpression")));
        }


        @Override
        public IconResource getIcon() {
          return IconContainer.RESOURCE_a0a9c6i;
        }
        @Override
        public String getTooltipText() {
          return "Divide operation";
        }
      }
    }
  }
  public class TMP_SubMenu_pmdw_d0 extends SubMenuMenuTransformationMenuPart {
    @Override
    protected String getText(TransformationMenuContext _context) {
      return "Functions";
    }

    @Override
    protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts() {
      return Arrays.<MenuPart<TransformationMenuItem, TransformationMenuContext>>asList(new Math.TMP_SubMenu_pmdw_d0.TMP_Action_pmdw_a3a(), new Math.TMP_SubMenu_pmdw_d0.TMP_Action_pmdw_b3a(), new Math.TMP_SubMenu_pmdw_d0.TMP_Action_pmdw_c3a(), new Math.TMP_SubMenu_pmdw_d0.TMP_Action_pmdw_d3a());
    }
    private class TMP_Action_pmdw_a3a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        return new Math.TMP_SubMenu_pmdw_d0.TMP_Action_pmdw_a3a.Item(context);
      }

      private class Item extends ActionItemBase implements SidebarActionItem {
        private final TransformationMenuContext _context;

        private Item(TransformationMenuContext context) {
          _context = context;
        }

        @Nullable
        @Override
        public String getLabelText(String pattern) {
          return "";
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12051ecbe19L, "jetbrains.mps.baseLanguage.math.structure.AbsExpression")));
        }


        @Override
        public IconResource getIcon() {
          return IconContainer.RESOURCE_a0a9c3j;
        }
        @Override
        public String getTooltipText() {
          return "Absolute value";
        }
      }
    }
    private class TMP_Action_pmdw_b3a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        return new Math.TMP_SubMenu_pmdw_d0.TMP_Action_pmdw_b3a.Item(context);
      }

      private class Item extends ActionItemBase implements SidebarActionItem {
        private final TransformationMenuContext _context;

        private Item(TransformationMenuContext context) {
          _context = context;
        }

        @Nullable
        @Override
        public String getLabelText(String pattern) {
          return "";
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205311f8ffL, "jetbrains.mps.baseLanguage.math.structure.LogExpression")));
        }


        @Override
        public IconResource getIcon() {
          return IconContainer.RESOURCE_a0a9c4j;
        }
        @Override
        public String getTooltipText() {
          return "Logarithm";
        }
      }
    }
    private class TMP_Action_pmdw_c3a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        return new Math.TMP_SubMenu_pmdw_d0.TMP_Action_pmdw_c3a.Item(context);
      }

      private class Item extends ActionItemBase implements SidebarActionItem {
        private final TransformationMenuContext _context;

        private Item(TransformationMenuContext context) {
          _context = context;
        }

        @Nullable
        @Override
        public String getLabelText(String pattern) {
          return "";
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120531e6b2fL, "jetbrains.mps.baseLanguage.math.structure.ExponentExpression")));
        }


        @Override
        public IconResource getIcon() {
          return IconContainer.RESOURCE_a0a9c5j;
        }
        @Override
        public String getTooltipText() {
          return "Exponent";
        }
      }
    }
    private class TMP_Action_pmdw_d3a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        return new Math.TMP_SubMenu_pmdw_d0.TMP_Action_pmdw_d3a.Item(context);
      }

      private class Item extends ActionItemBase implements SidebarActionItem {
        private final TransformationMenuContext _context;

        private Item(TransformationMenuContext context) {
          _context = context;
        }

        @Nullable
        @Override
        public String getLabelText(String pattern) {
          return "";
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12052b2cdd3L, "jetbrains.mps.baseLanguage.math.structure.PowExpression")));
        }


        @Override
        public IconResource getIcon() {
          return IconContainer.RESOURCE_a0a9c6j;
        }
        @Override
        public String getTooltipText() {
          return "Power";
        }
      }
    }
  }
  public class TMP_SubMenu_pmdw_e0 extends SubMenuMenuTransformationMenuPart {
    @Override
    protected String getText(TransformationMenuContext _context) {
      return "Trigonometric";
    }

    @Override
    protected List<MenuPart<TransformationMenuItem, TransformationMenuContext>> getParts() {
      return Arrays.<MenuPart<TransformationMenuItem, TransformationMenuContext>>asList(new Math.TMP_SubMenu_pmdw_e0.TMP_Action_pmdw_a4a(), new Math.TMP_SubMenu_pmdw_e0.TMP_Action_pmdw_b4a(), new Math.TMP_SubMenu_pmdw_e0.TMP_Action_pmdw_c4a());
    }
    private class TMP_Action_pmdw_a4a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        return new Math.TMP_SubMenu_pmdw_e0.TMP_Action_pmdw_a4a.Item(context);
      }

      private class Item extends ActionItemBase implements SidebarActionItem {
        private final TransformationMenuContext _context;

        private Item(TransformationMenuContext context) {
          _context = context;
        }

        @Nullable
        @Override
        public String getLabelText(String pattern) {
          return "Sine";
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205311204eL, "jetbrains.mps.baseLanguage.math.structure.SineExpression")));
        }


        @Override
        public IconResource getIcon() {
          return null;
        }
        @Override
        public String getTooltipText() {
          return "Sine";
        }
      }
    }
    private class TMP_Action_pmdw_b4a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        return new Math.TMP_SubMenu_pmdw_e0.TMP_Action_pmdw_b4a.Item(context);
      }

      private class Item extends ActionItemBase implements SidebarActionItem {
        private final TransformationMenuContext _context;

        private Item(TransformationMenuContext context) {
          _context = context;
        }

        @Nullable
        @Override
        public String getLabelText(String pattern) {
          return "Cosine";
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12053114b76L, "jetbrains.mps.baseLanguage.math.structure.CosineExpression")));
        }


        @Override
        public IconResource getIcon() {
          return null;
        }
        @Override
        public String getTooltipText() {
          return "Cosine";
        }
      }
    }
    private class TMP_Action_pmdw_c4a extends SingleItemMenuPart<TransformationMenuItem, TransformationMenuContext> {
      @Nullable
      protected TransformationMenuItem createItem(TransformationMenuContext context) {
        return new Math.TMP_SubMenu_pmdw_e0.TMP_Action_pmdw_c4a.Item(context);
      }

      private class Item extends ActionItemBase implements SidebarActionItem {
        private final TransformationMenuContext _context;

        private Item(TransformationMenuContext context) {
          _context = context;
        }

        @Nullable
        @Override
        public String getLabelText(String pattern) {
          return "Tangent";
        }

        @Override
        public void execute(@NotNull String pattern) {
          SNodeFactoryOperations.replaceWithNewChild(_context.getNode(), SNodeFactoryOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205311cb56L, "jetbrains.mps.baseLanguage.math.structure.TangentExpression")));
        }


        @Override
        public IconResource getIcon() {
          return null;
        }
        @Override
        public String getTooltipText() {
          return "Tangent";
        }
      }
    }
  }
}
