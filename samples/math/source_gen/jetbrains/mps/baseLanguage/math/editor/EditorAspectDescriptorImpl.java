package jetbrains.mps.baseLanguage.math.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditorComponent;
import jetbrains.mps.openapi.editor.descriptor.TransformationMenu;
import java.util.Arrays;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt_a0a = ((SAbstractConcept) concept);
    switch (index_xbvbvu_a0a.index(cncpt_a0a)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AbsExpression_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new ComplexLiteral_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new DecimalBinaryOperation_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new DivExpressionFraction_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new ExponentialOperation_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new InIntervalExpression_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new IntervalContainsExpression_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new IntervalLiteral_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new IntervalType_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new LinearSolveOperation_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new LiteralI_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new MathFuncExpression_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new MathSymbol_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new MathSymbolFromToIndex_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new MathSymbolIndex_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new MathSymbolIndexReference_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new MathTypeCast_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new MatrixConstructor_Editor());
      case 18:
        return Collections.<ConceptEditor>singletonList(new MatrixElementAccessExpression_Editor());
      case 19:
        return Collections.<ConceptEditor>singletonList(new MatrixIndexWildcard_Editor());
      case 20:
        return Collections.<ConceptEditor>singletonList(new MatrixInitializer_Editor());
      case 21:
        return Collections.<ConceptEditor>singletonList(new MatrixInitializerIndex_Editor());
      case 22:
        return Collections.<ConceptEditor>singletonList(new MatrixInitializerIndexReference_Editor());
      case 23:
        return Collections.<ConceptEditor>singletonList(new MatrixInverseOperation_Editor());
      case 24:
        return Collections.<ConceptEditor>singletonList(new MatrixNorm_Editor());
      case 25:
        return Collections.<ConceptEditor>singletonList(new MatrixType_Editor());
      case 26:
        return Collections.<ConceptEditor>singletonList(new MatrixUnit_Editor());
      case 27:
        return Collections.<ConceptEditor>singletonList(new MatrixZero_Editor());
      case 28:
        return Collections.<ConceptEditor>singletonList(new PowExpression_Editor());
      case 29:
        return Collections.<ConceptEditor>singletonList(new VectorInitializer_Editor());
      case 30:
        return Collections.<ConceptEditor>singletonList(new VectorType_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }

  @NotNull
  public Collection<ConceptEditorComponent> getDeclaredEditorComponents(SAbstractConcept concept, String editorComponentId) {
    SAbstractConcept cncpt_a0c = ((SAbstractConcept) concept);
    switch (index_xbvbvu_a0c.index(cncpt_a0c)) {
      case 0:
        if (true) {
          if ("jetbrains.mps.baseLanguage.math.editor.ExponentOperation_Component".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new ExponentOperation_Component());
          }
        }
        break;
      case 1:
        if (true) {
          if ("jetbrains.mps.baseLanguage.math.editor.MathContextEditorPart".equals(editorComponentId)) {
            return Collections.<ConceptEditorComponent>singletonList(new MathContextEditorPart());
          }
        }
        break;
      default:
    }
    return Collections.<ConceptEditorComponent>emptyList();
  }

  @NotNull
  @Override
  public Collection<TransformationMenu> getDeclaredDefaultTransformationMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt_a0e = concept;
    switch (index_xbvbvu_a0e.index(cncpt_a0e)) {
      case 0:
        return Arrays.asList(new TransformationMenu[]{new ML_SideTransforms_Expression_Contribution(), new Math()});
      case 1:
        return Collections.<TransformationMenu>singletonList(new ML_SideTransforms_LocalVariableDeclaration_Contribution());
      default:
    }
    return Collections.<TransformationMenu>emptyList();
  }
  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt_a0f = concept;
    switch (index_xbvbvu_a0f.index(cncpt_a0f)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new ComplexLiteral_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new ExponentialOperation_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new ML_Actions_Contribution());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new MathSymbolIndexReference_SubstituteMenu());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new MathTypeCast_SubstituteMenu());
      case 5:
        return Collections.<SubstituteMenu>singletonList(new MatrixElementAccessExpression_SubstituteMenu());
      case 6:
        return Collections.<SubstituteMenu>singletonList(new MatrixInitializerIndexReference_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex index_xbvbvu_a0a = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12051ecbe19L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12052224b0bL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x120568d9c5bL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12008f4e805L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e6443a20L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb8483964L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb8483968L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb848396cL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fb8483972L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x13afebc2af505abdL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205202c5edL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1205307b067L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca1899L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fea765cf0L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0ca6da8L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0d91491L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200fb8bcedL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a626b0a85L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x58aab8999c8f432aL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x58aab8999c8f4339L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240a048L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f255L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f252L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x13afebc2af505abcL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0xcc7e1ce69847db2L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a6267f776L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x13afebc2af3c3bdfL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x36700251396ecb7bL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12052b2cdd3L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d424d0fb5L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x42d5783a6267f775L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0c = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e6443a20L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1a6fbb5a434b008bL)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0e = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc67c7efL)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0f = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x12052224b0bL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x64b1e972e6443a20L), MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x11fe0d91491L), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x1200fb8bcedL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x58aab8999c8f432aL), MetaIdFactory.conceptId(0x3304fc6e7c6b401eL, 0xa016b944934bb21fL, 0x5650ac0d4240f252L)).seal();
}
