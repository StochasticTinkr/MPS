package jetbrains.mps.samples.complex.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.runtime.StaticScope;
import jetbrains.mps.smodel.SNodePointer;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(9);
  /*package*/ final ConceptDescriptor myConceptAbsExpression = createDescriptorForAbsExpression();
  /*package*/ final ConceptDescriptor myConceptArgExpression = createDescriptorForArgExpression();
  /*package*/ final ConceptDescriptor myConceptComplexType = createDescriptorForComplexType();
  /*package*/ final ConceptDescriptor myConceptConjugateComplexExpression = createDescriptorForConjugateComplexExpression();
  /*package*/ final ConceptDescriptor myConceptDegreeComplexExpression = createDescriptorForDegreeComplexExpression();
  /*package*/ final ConceptDescriptor myConceptImExpression = createDescriptorForImExpression();
  /*package*/ final ConceptDescriptor myConceptImaginaryUnit = createDescriptorForImaginaryUnit();
  /*package*/ final ConceptDescriptor myConceptReExpression = createDescriptorForReExpression();
  /*package*/ final ConceptDescriptor myConceptSingleComplexExpression = createDescriptorForSingleComplexExpression();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptAbsExpression.getId(), 0);
    myIndexMap.put(myConceptArgExpression.getId(), 1);
    myIndexMap.put(myConceptComplexType.getId(), 2);
    myIndexMap.put(myConceptConjugateComplexExpression.getId(), 3);
    myIndexMap.put(myConceptDegreeComplexExpression.getId(), 4);
    myIndexMap.put(myConceptImExpression.getId(), 5);
    myIndexMap.put(myConceptImaginaryUnit.getId(), 6);
    myIndexMap.put(myConceptReExpression.getId(), 7);
    myIndexMap.put(myConceptSingleComplexExpression.getId(), 8);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbsExpression, myConceptArgExpression, myConceptComplexType, myConceptConjugateComplexExpression, myConceptDegreeComplexExpression, myConceptImExpression, myConceptImaginaryUnit, myConceptReExpression, myConceptSingleComplexExpression);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptAbsExpression;
      case 1:
        return myConceptArgExpression;
      case 2:
        return myConceptComplexType;
      case 3:
        return myConceptConjugateComplexExpression;
      case 4:
        return myConceptDegreeComplexExpression;
      case 5:
        return myConceptImExpression;
      case 6:
        return myConceptImaginaryUnit;
      case 7:
        return myConceptReExpression;
      case 8:
        return myConceptSingleComplexExpression;
      default:
        throw new IllegalStateException();
    }
  }

  private static ConceptDescriptor createDescriptorForAbsExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.AbsExpression", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686e48f9fL)).super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").version(1).super_(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parentIds(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).alias("abs", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590425(jetbrains.mps.samples.complex.structure)", "1196264034207")).create();
  }
  private static ConceptDescriptor createDescriptorForArgExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ArgExpression", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686e1a51cL)).super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").version(1).super_(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parentIds(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).alias("arg", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590425(jetbrains.mps.samples.complex.structure)", "1196263843100")).create();
  }
  private static ConceptDescriptor createDescriptorForComplexType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ComplexType", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686a0422aL)).super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f0ad8bde4L)).parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f0ad8bde4L)).alias("complex", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590425(jetbrains.mps.samples.complex.structure)", "1196259557930")).create();
  }
  private static ConceptDescriptor createDescriptorForConjugateComplexExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ConjugateComplexExpression", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x116901f57f4L)).super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").version(1).super_(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parentIds(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).alias("conj", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590425(jetbrains.mps.samples.complex.structure)", "1196418881524")).create();
  }
  private static ConceptDescriptor createDescriptorForDegreeComplexExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.DegreeComplexExpression", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x116904e45f4L)).super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").version(1).super_(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parentIds(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x116904f9752L, "degree", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1129778b846L), false, false, false)).children(new String[]{"degree"}, new boolean[]{false}).alias("deg", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590425(jetbrains.mps.samples.complex.structure)", "1196421957108")).create();
  }
  private static ConceptDescriptor createDescriptorForImExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ImExpression", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686c35f98L)).super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").version(1).super_(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parentIds(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).alias("im", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590425(jetbrains.mps.samples.complex.structure)", "1196261859224")).create();
  }
  private static ConceptDescriptor createDescriptorForImaginaryUnit() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ImaginaryUnit", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11691060ce1L)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).alias("i", "complex imaginary unit").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590425(jetbrains.mps.samples.complex.structure)", "1196434001121")).create();
  }
  private static ConceptDescriptor createDescriptorForReExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ReExpression", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b25791L)).super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").version(1).super_(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parentIds(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).alias("re", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590425(jetbrains.mps.samples.complex.structure)", "1196260743057")).create();
  }
  private static ConceptDescriptor createDescriptorForSingleComplexExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.SingleComplexExpression", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).super_("jetbrains.mps.baseLanguage.structure.Expression").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11686b4a081L, "complexExpression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false)).children(new String[]{"complexExpression"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c89590425(jetbrains.mps.samples.complex.structure)", "1196260832413")).create();
  }
}
