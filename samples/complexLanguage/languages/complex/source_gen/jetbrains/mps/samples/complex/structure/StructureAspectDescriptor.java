package jetbrains.mps.samples.complex.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.runtime.StaticScope;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  /*package*/ final ConceptDescriptor myConceptAbsExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.AbsExpression", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686e48f9fL)).super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").super_(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parentIds(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).alias("abs", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptArgExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ArgExpression", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686e1a51cL)).super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").super_(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parentIds(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).alias("arg", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptComplexType = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ComplexType", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686a0422aL)).super_("jetbrains.mps.baseLanguage.structure.PrimitiveType").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f0ad8bde4L)).parents("jetbrains.mps.baseLanguage.structure.PrimitiveType").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10f0ad8bde4L)).alias("complex", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptConjugateComplexExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ConjugateComplexExpression", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x116901f57f4L)).super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").super_(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parentIds(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).alias("conj", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptDegreeComplexExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.DegreeComplexExpression", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x116904e45f4L)).super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").super_(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parentIds(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).childDescriptors(new ConceptDescriptorBuilder.Link(1196422043474L, "degree", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x1129778b846L), false, false, false)).children(new String[]{"degree"}, new boolean[]{false}).alias("deg", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptImExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ImExpression", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686c35f98L)).super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").super_(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parentIds(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).alias("im", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptImaginaryUnit = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ImaginaryUnit", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11691060ce1L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).alias("i", "complex imaginary unit").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptReExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.ReExpression", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b25791L)).super_("jetbrains.mps.samples.complex.structure.SingleComplexExpression").super_(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).parents("jetbrains.mps.samples.complex.structure.SingleComplexExpression").parentIds(MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).alias("re", "").staticScope(StaticScope.NONE).create();
  /*package*/ final ConceptDescriptor myConceptSingleComplexExpression = new ConceptDescriptorBuilder("jetbrains.mps.samples.complex.structure.SingleComplexExpression", MetaIdFactory.conceptId(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(1196260892801L, "complexExpression", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), true, false, false)).children(new String[]{"complexExpression"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).create();

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAbsExpression, myConceptArgExpression, myConceptComplexType, myConceptConjugateComplexExpression, myConceptDegreeComplexExpression, myConceptImExpression, myConceptImaginaryUnit, myConceptReExpression, myConceptSingleComplexExpression);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SAbstractConcept concept) {
    {
      SAbstractConcept cncpt = concept;
      Integer preIndex = indices_1htk8d_a0n.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return myConceptAbsExpression;
          }
          break;
        case 1:
          if (true) {
            return myConceptArgExpression;
          }
          break;
        case 2:
          if (true) {
            return myConceptComplexType;
          }
          break;
        case 3:
          if (true) {
            return myConceptConjugateComplexExpression;
          }
          break;
        case 4:
          if (true) {
            return myConceptDegreeComplexExpression;
          }
          break;
        case 5:
          if (true) {
            return myConceptImExpression;
          }
          break;
        case 6:
          if (true) {
            return myConceptImaginaryUnit;
          }
          break;
        case 7:
          if (true) {
            return myConceptReExpression;
          }
          break;
        case 8:
          if (true) {
            return myConceptSingleComplexExpression;
          }
          break;
        default:
          // default 
      }
    }
    return null;
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_1htk8d_a0n = buildConceptIndices(MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686e48f9fL, "jetbrains.mps.samples.complex.structure.AbsExpression"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686e1a51cL, "jetbrains.mps.samples.complex.structure.ArgExpression"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686a0422aL, "jetbrains.mps.samples.complex.structure.ComplexType"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x116901f57f4L, "jetbrains.mps.samples.complex.structure.ConjugateComplexExpression"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x116904e45f4L, "jetbrains.mps.samples.complex.structure.DegreeComplexExpression"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686c35f98L, "jetbrains.mps.samples.complex.structure.ImExpression"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11691060ce1L, "jetbrains.mps.samples.complex.structure.ImaginaryUnit"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b25791L, "jetbrains.mps.samples.complex.structure.ReExpression"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL, "jetbrains.mps.samples.complex.structure.SingleComplexExpression"));
}
