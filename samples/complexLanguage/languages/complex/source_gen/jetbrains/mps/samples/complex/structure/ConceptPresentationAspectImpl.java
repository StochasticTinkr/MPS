package jetbrains.mps.samples.complex.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbsExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArgExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ComplexType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConjugateComplexExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DegreeComplexExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ImaginaryUnit = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ReExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SingleComplexExpression = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("ff24ab03-965e-4d15-9aed-52dc276658f4"), "jetbrains.mps.samples.complex")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbsExpression;
      case 1:
        return props_ArgExpression;
      case 2:
        return props_ComplexType;
      case 3:
        return props_ConjugateComplexExpression;
      case 4:
        return props_DegreeComplexExpression;
      case 5:
        return props_ImExpression;
      case 6:
        return props_ImaginaryUnit;
      case 7:
        return props_ReExpression;
      case 8:
        return props_SingleComplexExpression;
    }
    throw new IllegalStateException();
  }
}
