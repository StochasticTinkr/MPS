package jetbrains.mps.samples.complex.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_AbsExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ArgExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ComplexType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ConjugateComplexExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DegreeComplexExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ImExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ImaginaryUnit = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ReExpression = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SingleComplexExpression = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0k.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AbsExpression;
          }
          break;
        case 1:
          if (true) {
            return props_ArgExpression;
          }
          break;
        case 2:
          if (true) {
            return props_ComplexType;
          }
          break;
        case 3:
          if (true) {
            return props_ConjugateComplexExpression;
          }
          break;
        case 4:
          if (true) {
            return props_DegreeComplexExpression;
          }
          break;
        case 5:
          if (true) {
            return props_ImExpression;
          }
          break;
        case 6:
          if (true) {
            return props_ImaginaryUnit;
          }
          break;
        case 7:
          if (true) {
            return props_ReExpression;
          }
          break;
        case 8:
          if (true) {
            return props_SingleComplexExpression;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0k = buildConceptIndices(MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686e48f9fL, "AbsExpression"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686e1a51cL, "ArgExpression"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686a0422aL, "ComplexType"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x116901f57f4L, "ConjugateComplexExpression"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x116904e45f4L, "DegreeComplexExpression"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686c35f98L, "ImExpression"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11691060ce1L, "ImaginaryUnit"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b25791L, "ReExpression"), MetaAdapterFactory.getConcept(0xff24ab03965e4d15L, 0x9aed52dc276658f4L, 0x11686b3b49dL, "SingleComplexExpression"));
}
