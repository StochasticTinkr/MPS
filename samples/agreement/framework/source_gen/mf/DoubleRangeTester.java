package mf;

/*Generated by MPS */

import junit.framework.TestCase;
import org.junit.Test;
import org.junit.Assert;

public class DoubleRangeTester extends TestCase {
  public DoubleRangeTester(String arg) {
    super(arg);
  }
  @Test
  public void testBasic() {
    DoubleRange range = new DoubleRange(-5.5, 6.6);
    Assert.assertTrue(range.includes(5));
    Assert.assertTrue(range.includes(-5.5));
    Assert.assertTrue(range.includes(6.6));
    Assert.assertTrue(!(range.includes(6.601)));
    Assert.assertTrue(!(range.includes(-5.501)));
  }
  @Test
  public void testExclusives() {
    DoubleRange exRange = new DoubleRange(-5.5, false, 6.6, true);
    Assert.assertTrue(exRange.includes(5));
    Assert.assertTrue(!(exRange.includes(-5.5)));
    Assert.assertTrue(exRange.includes(-5.4999));
    Assert.assertTrue(exRange.includes(6.6));
    Assert.assertTrue(!(exRange.includes(6.601)));
    Assert.assertTrue(!(exRange.includes(-5.501)));
  }
  @Test
  public void testEmpty() {
    Assert.assertTrue(!(new DoubleRange(5, 6).isEmpty()));
    Assert.assertTrue(!(new DoubleRange(6, 6).isEmpty()));
    Assert.assertTrue(new DoubleRange(7, 6).isEmpty());
  }
  @Test
  public void testUpTo() {
    DoubleRange range = DoubleRange.upTo(5.5);
    Assert.assertTrue(range.includes(5.5));
    Assert.assertTrue(range.includes(-5.5));
    Assert.assertTrue(range.includes(Double.NEGATIVE_INFINITY));
    Assert.assertTrue(!(range.includes(5.5001)));
  }
  @Test
  public void testAndMore() {
    DoubleRange range = DoubleRange.andMore(5.5);
    Assert.assertTrue(range.includes(5.5));
    Assert.assertTrue(!(range.includes(5.4999)));
    Assert.assertTrue(!(range.includes(-5.5)));
    Assert.assertTrue(range.includes(Double.POSITIVE_INFINITY));
    Assert.assertTrue(range.includes(5.5001));
  }
  @Test
  public void testOverlaps() {
    DoubleRange r5_10 = new DoubleRange(5, 10);
    DoubleRange r1_10 = new DoubleRange(1, 10);
    DoubleRange r4_6 = new DoubleRange(4, 6);
    DoubleRange r5_15 = new DoubleRange(5, 15);
    DoubleRange r12_16 = new DoubleRange(12, 16);
    DoubleRange x10_12 = new DoubleRange(10, false, 12, true);
    Assert.assertTrue(r5_10.overlaps(r1_10));
    Assert.assertTrue(r1_10.overlaps(r5_10));
    Assert.assertTrue(r4_6.overlaps(r1_10));
    Assert.assertTrue(r1_10.overlaps(r4_6));
    Assert.assertTrue(r5_10.overlaps(r5_15));
    Assert.assertTrue(r5_15.overlaps(r1_10));
    Assert.assertTrue(r1_10.overlaps(r5_15));
    Assert.assertTrue(!(r1_10.overlaps(r12_16)));
    Assert.assertTrue(!(r12_16.overlaps(r1_10)));
    Assert.assertTrue(r5_10.overlaps(r5_10));
    Assert.assertTrue(!(r1_10.overlaps(x10_12)));
    Assert.assertTrue(!(x10_12.overlaps(r1_10)));
  }
  @Test
  public void testIncludesRange() {
    DoubleRange r5_10 = new DoubleRange(5, 10);
    DoubleRange r1_10 = new DoubleRange(1, 10);
    DoubleRange r4_6 = new DoubleRange(4, 6);
    Assert.assertTrue(!(r5_10.includes(r1_10)));
    Assert.assertTrue(r1_10.includes(r5_10));
    Assert.assertTrue(!(r4_6.includes(r1_10)));
    Assert.assertTrue(r1_10.includes(r4_6));
    Assert.assertTrue(r5_10.includes(r5_10));
  }
}
