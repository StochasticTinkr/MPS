package jetbrains.mps.samples.agreementLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt = ((SAbstractConcept) concept);
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new AccountType_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new AgreementDeclarations_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new Date_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new Date_Future_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Date_Past_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Event_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new EventType_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new EventVariable_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new EventVariableReference_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new Plan_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new PostingRule_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new PostingRuleTemporalProperty_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new Quantity_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new QuantityTemporalProperty_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new Value_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new ValueReference_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex1.index(cncpt)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new Event_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new EventVariableReference_SubstituteMenu());
      case 2:
        return Collections.<SubstituteMenu>singletonList(new quantity_Contribution());
      case 3:
        return Collections.<SubstituteMenu>singletonList(new PostingRule_SubstituteMenu());
      case 4:
        return Collections.<SubstituteMenu>singletonList(new Quantity_SubstituteMenu());
      case 5:
        return Collections.<SubstituteMenu>singletonList(new ValueReference_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dc29baa2L), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102fae6140bL), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dbfd8dcdL), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x103f15b1a76L), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x103f1595f54L), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dbe8f094L), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dc1185c3L), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dc12643eL), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102ea8a3c37L), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dbe79bfeL), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dc23b0daL), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dc2154d7L), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dbf92b68L), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dbff8d6dL), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dbe8ab0eL), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102eaa8102cL)).seal();
  private static final ConceptSwitchIndex conceptIndex1 = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dbe8f094L), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102ea8a3c37L), MetaIdFactory.conceptId(0xb1a9bc478a264792L, 0x8b684660c531090aL, 0x102db824fa1L), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dc23b0daL), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dbf92b68L), MetaIdFactory.conceptId(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102eaa8102cL)).seal();
}
