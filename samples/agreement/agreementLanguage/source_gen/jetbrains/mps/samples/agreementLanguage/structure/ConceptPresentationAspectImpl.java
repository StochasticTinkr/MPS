package jetbrains.mps.samples.agreementLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AccountType;
  private ConceptPresentation props_AgreementDeclarations;
  private ConceptPresentation props_Date;
  private ConceptPresentation props_Date_Future;
  private ConceptPresentation props_Date_Past;
  private ConceptPresentation props_Event;
  private ConceptPresentation props_EventType;
  private ConceptPresentation props_EventVariable;
  private ConceptPresentation props_EventVariableReference;
  private ConceptPresentation props_Plan;
  private ConceptPresentation props_PostingRule;
  private ConceptPresentation props_PostingRuleTemporalProperty;
  private ConceptPresentation props_Quantity;
  private ConceptPresentation props_QuantityTemporalProperty;
  private ConceptPresentation props_TemporalProperty;
  private ConceptPresentation props_Value;
  private ConceptPresentation props_ValueReference;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AccountType:
        if (props_AccountType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AccountType = cpb.create();
        }
        return props_AccountType;
      case LanguageConceptSwitch.AgreementDeclarations:
        if (props_AgreementDeclarations == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("AgreementDeclarations");
          props_AgreementDeclarations = cpb.create();
        }
        return props_AgreementDeclarations;
      case LanguageConceptSwitch.Date:
        if (props_Date == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("exect date");
          cpb.rawPresentation("date");
          props_Date = cpb.create();
        }
        return props_Date;
      case LanguageConceptSwitch.Date_Future:
        if (props_Date_Future == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("future time");
          cpb.rawPresentation("FUTURE");
          props_Date_Future = cpb.create();
        }
        return props_Date_Future;
      case LanguageConceptSwitch.Date_Past:
        if (props_Date_Past == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("past time");
          cpb.rawPresentation("PAST");
          props_Date_Past = cpb.create();
        }
        return props_Date_Past;
      case LanguageConceptSwitch.Event:
        if (props_Event == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Event");
          props_Event = cpb.create();
        }
        return props_Event;
      case LanguageConceptSwitch.EventType:
        if (props_EventType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EventType = cpb.create();
        }
        return props_EventType;
      case LanguageConceptSwitch.EventVariable:
        if (props_EventVariable == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_EventVariable = cpb.create();
        }
        return props_EventVariable;
      case LanguageConceptSwitch.EventVariableReference:
        if (props_EventVariableReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("EventVariableReference");
          props_EventVariableReference = cpb.create();
        }
        return props_EventVariableReference;
      case LanguageConceptSwitch.Plan:
        if (props_Plan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Plan = cpb.create();
        }
        return props_Plan;
      case LanguageConceptSwitch.PostingRule:
        if (props_PostingRule == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PostingRule");
          props_PostingRule = cpb.create();
        }
        return props_PostingRule;
      case LanguageConceptSwitch.PostingRuleTemporalProperty:
        if (props_PostingRuleTemporalProperty == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("PostingRuleTemporalProperty");
          props_PostingRuleTemporalProperty = cpb.create();
        }
        return props_PostingRuleTemporalProperty;
      case LanguageConceptSwitch.Quantity:
        if (props_Quantity == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Quantity");
          props_Quantity = cpb.create();
        }
        return props_Quantity;
      case LanguageConceptSwitch.QuantityTemporalProperty:
        if (props_QuantityTemporalProperty == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("QuantityTemporalProperty");
          props_QuantityTemporalProperty = cpb.create();
        }
        return props_QuantityTemporalProperty;
      case LanguageConceptSwitch.TemporalProperty:
        if (props_TemporalProperty == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TemporalProperty = cpb.create();
        }
        return props_TemporalProperty;
      case LanguageConceptSwitch.Value:
        if (props_Value == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Value = cpb.create();
        }
        return props_Value;
      case LanguageConceptSwitch.ValueReference:
        if (props_ValueReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ValueReference");
          props_ValueReference = cpb.create();
        }
        return props_ValueReference;
    }
    return null;
  }
}
