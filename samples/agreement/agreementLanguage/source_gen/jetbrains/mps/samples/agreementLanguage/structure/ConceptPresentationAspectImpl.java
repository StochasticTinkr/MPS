package jetbrains.mps.samples.agreementLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AccountType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AgreementDeclarations = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Date = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Date_Future = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Date_Past = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Event = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EventType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EventVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EventVariableReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Plan = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PostingRule = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_PostingRuleTemporalProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Quantity = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_QuantityTemporalProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TemporalProperty = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Value = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ValueReference = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AccountType;
      case 1:
        return props_AgreementDeclarations;
      case 2:
        return props_Date;
      case 3:
        return props_Date_Future;
      case 4:
        return props_Date_Past;
      case 5:
        return props_Event;
      case 6:
        return props_EventType;
      case 7:
        return props_EventVariable;
      case 8:
        return props_EventVariableReference;
      case 9:
        return props_Plan;
      case 10:
        return props_PostingRule;
      case 11:
        return props_PostingRuleTemporalProperty;
      case 12:
        return props_Quantity;
      case 13:
        return props_QuantityTemporalProperty;
      case 14:
        return props_TemporalProperty;
      case 15:
        return props_Value;
      case 16:
        return props_ValueReference;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
