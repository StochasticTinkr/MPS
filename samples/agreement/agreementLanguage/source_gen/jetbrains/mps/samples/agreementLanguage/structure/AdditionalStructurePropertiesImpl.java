package jetbrains.mps.samples.agreementLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_AccountType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_AgreementDeclarations = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Date = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Date_Future = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Date_Past = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Event = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EventType = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EventVariable = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_EventVariableReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Plan = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PostingRule = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_PostingRuleTemporalProperty = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Quantity = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_QuantityTemporalProperty = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_TemporalProperty = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Value = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ValueReference = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0s.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_AccountType;
          }
          break;
        case 1:
          if (true) {
            return props_AgreementDeclarations;
          }
          break;
        case 2:
          if (true) {
            return props_Date;
          }
          break;
        case 3:
          if (true) {
            return props_Date_Future;
          }
          break;
        case 4:
          if (true) {
            return props_Date_Past;
          }
          break;
        case 5:
          if (true) {
            return props_Event;
          }
          break;
        case 6:
          if (true) {
            return props_EventType;
          }
          break;
        case 7:
          if (true) {
            return props_EventVariable;
          }
          break;
        case 8:
          if (true) {
            return props_EventVariableReference;
          }
          break;
        case 9:
          if (true) {
            return props_Plan;
          }
          break;
        case 10:
          if (true) {
            return props_PostingRule;
          }
          break;
        case 11:
          if (true) {
            return props_PostingRuleTemporalProperty;
          }
          break;
        case 12:
          if (true) {
            return props_Quantity;
          }
          break;
        case 13:
          if (true) {
            return props_QuantityTemporalProperty;
          }
          break;
        case 14:
          if (true) {
            return props_TemporalProperty;
          }
          break;
        case 15:
          if (true) {
            return props_Value;
          }
          break;
        case 16:
          if (true) {
            return props_ValueReference;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0s = buildConceptIndices(MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dc29baa2L, "AccountType"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102fae6140bL, "AgreementDeclarations"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dbfd8dcdL, "Date"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x103f15b1a76L, "Date_Future"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x103f1595f54L, "Date_Past"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dbe8f094L, "Event"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dc1185c3L, "EventType"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dc12643eL, "EventVariable"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102ea8a3c37L, "EventVariableReference"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dbe79bfeL, "Plan"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dc23b0daL, "PostingRule"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dc2154d7L, "PostingRuleTemporalProperty"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dbf92b68L, "Quantity"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dbff8d6dL, "QuantityTemporalProperty"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dbfd085fL, "TemporalProperty"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102dbe8ab0eL, "Value"), MetaAdapterFactory.getConcept(0x144f7012c2d543beL, 0xbe2b4bfb7dff6503L, 0x102eaa8102cL, "ValueReference"));
}
