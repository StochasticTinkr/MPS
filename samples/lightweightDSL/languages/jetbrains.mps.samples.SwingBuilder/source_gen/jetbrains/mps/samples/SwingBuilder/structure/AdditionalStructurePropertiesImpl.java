package jetbrains.mps.samples.SwingBuilder.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Button = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Component = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Converter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ElementReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmptyComponent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Filter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Frame = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Label = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Map = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Panel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Pipeline = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SourceDataType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SwingBuilderMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TargetDataType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextField = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Transformers = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0r.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_Button;
          }
          break;
        case 1:
          if (true) {
            return props_Component;
          }
          break;
        case 2:
          if (true) {
            return props_Converter;
          }
          break;
        case 3:
          if (true) {
            return props_ElementReference;
          }
          break;
        case 4:
          if (true) {
            return props_EmptyComponent;
          }
          break;
        case 5:
          if (true) {
            return props_Filter;
          }
          break;
        case 6:
          if (true) {
            return props_Frame;
          }
          break;
        case 7:
          if (true) {
            return props_Label;
          }
          break;
        case 8:
          if (true) {
            return props_Map;
          }
          break;
        case 9:
          if (true) {
            return props_Panel;
          }
          break;
        case 10:
          if (true) {
            return props_Pipeline;
          }
          break;
        case 11:
          if (true) {
            return props_SourceDataType;
          }
          break;
        case 12:
          if (true) {
            return props_SwingBuilderMember;
          }
          break;
        case 13:
          if (true) {
            return props_TargetDataType;
          }
          break;
        case 14:
          if (true) {
            return props_TextField;
          }
          break;
        case 15:
          if (true) {
            return props_Transformers;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0r = buildConceptIndices(MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0x4a1cc65caa543043L, "Button"), MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0x4a1cc65caa543016L, "Component"), MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0x4d5f82383b28563fL, "Converter"), MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0xd0f6999e83a1e8aL, "ElementReference"), MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0x4a1cc65caa545621L, "EmptyComponent"), MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0xd0f6999e83a1c61L, "Filter"), MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0x4a1cc65caa543006L, "Frame"), MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0x4a1cc65caa543023L, "Label"), MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0xd0f6999e83a1d95L, "Map"), MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0x4a1cc65caa543033L, "Panel"), MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0xd0f6999e83a1e59L, "Pipeline"), MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0x4d5f82383b276c5aL, "SourceDataType"), MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0x4a1cc65caa5245c9L, "SwingBuilderMember"), MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0x4d5f82383b277405L, "TargetDataType"), MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0x4a1cc65caa54931bL, "TextField"), MetaAdapterFactory.getConcept(0xb4dbff0c8c314a79L, 0xa45a98e5fd0530e7L, 0xd0f6999e83a1e78L, "Transformers"));
}
