package jetbrains.mps.samples.SwingBuilder.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Button;
  private ConceptPresentation props_Component;
  private ConceptPresentation props_Converter;
  private ConceptPresentation props_ElementReference;
  private ConceptPresentation props_EmptyComponent;
  private ConceptPresentation props_Filter;
  private ConceptPresentation props_Frame;
  private ConceptPresentation props_Label;
  private ConceptPresentation props_Map;
  private ConceptPresentation props_Panel;
  private ConceptPresentation props_Pipeline;
  private ConceptPresentation props_SourceDataType;
  private ConceptPresentation props_SwingBuilderMember;
  private ConceptPresentation props_TargetDataType;
  private ConceptPresentation props_TextField;
  private ConceptPresentation props_Transformers;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Button:
        if (props_Button == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Button = cpb.create();
        }
        return props_Button;
      case LanguageConceptSwitch.Component:
        if (props_Component == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Component = cpb.create();
        }
        return props_Component;
      case LanguageConceptSwitch.Converter:
        if (props_Converter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Converter = cpb.create();
        }
        return props_Converter;
      case LanguageConceptSwitch.ElementReference:
        if (props_ElementReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_ElementReference = cpb.create();
        }
        return props_ElementReference;
      case LanguageConceptSwitch.EmptyComponent:
        if (props_EmptyComponent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EmptyComponent = cpb.create();
        }
        return props_EmptyComponent;
      case LanguageConceptSwitch.Filter:
        if (props_Filter == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Filter = cpb.create();
        }
        return props_Filter;
      case LanguageConceptSwitch.Frame:
        if (props_Frame == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Frame = cpb.create();
        }
        return props_Frame;
      case LanguageConceptSwitch.Label:
        if (props_Label == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Label = cpb.create();
        }
        return props_Label;
      case LanguageConceptSwitch.Map:
        if (props_Map == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Map = cpb.create();
        }
        return props_Map;
      case LanguageConceptSwitch.Panel:
        if (props_Panel == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Panel = cpb.create();
        }
        return props_Panel;
      case LanguageConceptSwitch.Pipeline:
        if (props_Pipeline == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Pipeline = cpb.create();
        }
        return props_Pipeline;
      case LanguageConceptSwitch.SourceDataType:
        if (props_SourceDataType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SourceDataType = cpb.create();
        }
        return props_SourceDataType;
      case LanguageConceptSwitch.SwingBuilderMember:
        if (props_SwingBuilderMember == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_SwingBuilderMember = cpb.create();
        }
        return props_SwingBuilderMember;
      case LanguageConceptSwitch.TargetDataType:
        if (props_TargetDataType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TargetDataType = cpb.create();
        }
        return props_TargetDataType;
      case LanguageConceptSwitch.TextField:
        if (props_TextField == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_TextField = cpb.create();
        }
        return props_TextField;
      case LanguageConceptSwitch.Transformers:
        if (props_Transformers == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Transformers = cpb.create();
        }
        return props_Transformers;
    }
    return null;
  }
}
