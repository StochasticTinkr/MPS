package jetbrains.mps.samples.SwingBuilder.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Button = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Component = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Converter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ElementReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EmptyComponent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Filter = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Frame = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Label = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Map = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Panel = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Pipeline = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SourceDataType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SwingBuilderMember = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TargetDataType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextField = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Transformers = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_Button;
      case 1:
        return props_Component;
      case 2:
        return props_Converter;
      case 3:
        return props_ElementReference;
      case 4:
        return props_EmptyComponent;
      case 5:
        return props_Filter;
      case 6:
        return props_Frame;
      case 7:
        return props_Label;
      case 8:
        return props_Map;
      case 9:
        return props_Panel;
      case 10:
        return props_Pipeline;
      case 11:
        return props_SourceDataType;
      case 12:
        return props_SwingBuilderMember;
      case 13:
        return props_TargetDataType;
      case 14:
        return props_TextField;
      case 15:
        return props_Transformers;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
