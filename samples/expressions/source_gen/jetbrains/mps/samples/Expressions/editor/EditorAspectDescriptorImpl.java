package jetbrains.mps.samples.Expressions.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt_a0a = ((SAbstractConcept) concept);
    switch (index_xbvbvu_a0a.index(cncpt_a0a)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new ArithmeticSimpleMathExpression_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new LogicalSimpleMathExpression_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new NotSimpleMathExpression_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new SimpleMathAssignment_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new SimpleMathBooleanConstant_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new SimpleMathBooleanType_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new SimpleMathElementType_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new SimpleMathFloatConstant_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new SimpleMathFloatType_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new SimpleMathIntegerConstant_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new SimpleMathIntegerType_Editor());
      case 11:
        return Collections.<ConceptEditor>singletonList(new SimpleMathLongConstant_Editor());
      case 12:
        return Collections.<ConceptEditor>singletonList(new SimpleMathLongType_Editor());
      case 13:
        return Collections.<ConceptEditor>singletonList(new SimpleMathNumberType_Editor());
      case 14:
        return Collections.<ConceptEditor>singletonList(new SimpleMathTypedVarDeclaration_Editor());
      case 15:
        return Collections.<ConceptEditor>singletonList(new SimpleMathVarDeclaration_Editor());
      case 16:
        return Collections.<ConceptEditor>singletonList(new SimpleMathVarReference_Editor());
      case 17:
        return Collections.<ConceptEditor>singletonList(new SimpleMathWrapper_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt_a0d = concept;
    switch (index_xbvbvu_a0d.index(cncpt_a0d)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new SimpleMathVarReference_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex index_xbvbvu_a0a = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b8289497L), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81dcba5L), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81d5484L), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0xce8a4f56651064cL), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b826823eL), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f68L), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b835454eL), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b84b40a4L), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b84b3e3eL), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b826940aL), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b82698e0L), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b83bf7eaL), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b837a88aL), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b8354763L), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x77a1220187231476L), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b832ccbfL), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b832e4e1L), MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b8237002L)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0d = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b832e4e1L)).seal();
}
