package jetbrains.mps.samples.Expressions.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(24);
  /*package*/ final ConceptDescriptor myConceptAndSimpleMathExpression = createDescriptorForAndSimpleMathExpression();
  /*package*/ final ConceptDescriptor myConceptArithmeticSimpleMathExpression = createDescriptorForArithmeticSimpleMathExpression();
  /*package*/ final ConceptDescriptor myConceptBinarySimpleMathExpression = createDescriptorForBinarySimpleMathExpression();
  /*package*/ final ConceptDescriptor myConceptLogicalSimpleMathExpression = createDescriptorForLogicalSimpleMathExpression();
  /*package*/ final ConceptDescriptor myConceptNotSimpleMathExpression = createDescriptorForNotSimpleMathExpression();
  /*package*/ final ConceptDescriptor myConceptOrSimpleMathExpression = createDescriptorForOrSimpleMathExpression();
  /*package*/ final ConceptDescriptor myConceptSimpleMathAssignment = createDescriptorForSimpleMathAssignment();
  /*package*/ final ConceptDescriptor myConceptSimpleMathBooleanConstant = createDescriptorForSimpleMathBooleanConstant();
  /*package*/ final ConceptDescriptor myConceptSimpleMathBooleanType = createDescriptorForSimpleMathBooleanType();
  /*package*/ final ConceptDescriptor myConceptSimpleMathElementType = createDescriptorForSimpleMathElementType();
  /*package*/ final ConceptDescriptor myConceptSimpleMathExpression = createDescriptorForSimpleMathExpression();
  /*package*/ final ConceptDescriptor myConceptSimpleMathFloatConstant = createDescriptorForSimpleMathFloatConstant();
  /*package*/ final ConceptDescriptor myConceptSimpleMathFloatType = createDescriptorForSimpleMathFloatType();
  /*package*/ final ConceptDescriptor myConceptSimpleMathIntegerConstant = createDescriptorForSimpleMathIntegerConstant();
  /*package*/ final ConceptDescriptor myConceptSimpleMathIntegerType = createDescriptorForSimpleMathIntegerType();
  /*package*/ final ConceptDescriptor myConceptSimpleMathLongConstant = createDescriptorForSimpleMathLongConstant();
  /*package*/ final ConceptDescriptor myConceptSimpleMathLongType = createDescriptorForSimpleMathLongType();
  /*package*/ final ConceptDescriptor myConceptSimpleMathNumberType = createDescriptorForSimpleMathNumberType();
  /*package*/ final ConceptDescriptor myConceptSimpleMathType = createDescriptorForSimpleMathType();
  /*package*/ final ConceptDescriptor myConceptSimpleMathTypedVarDeclaration = createDescriptorForSimpleMathTypedVarDeclaration();
  /*package*/ final ConceptDescriptor myConceptSimpleMathVarDeclaration = createDescriptorForSimpleMathVarDeclaration();
  /*package*/ final ConceptDescriptor myConceptSimpleMathVarReference = createDescriptorForSimpleMathVarReference();
  /*package*/ final ConceptDescriptor myConceptSimpleMathWrapper = createDescriptorForSimpleMathWrapper();
  /*package*/ final ConceptDescriptor myConceptUnarySimpleMathExpression = createDescriptorForUnarySimpleMathExpression();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptAndSimpleMathExpression.getId(), 0);
    myIndexMap.put(myConceptArithmeticSimpleMathExpression.getId(), 1);
    myIndexMap.put(myConceptBinarySimpleMathExpression.getId(), 2);
    myIndexMap.put(myConceptLogicalSimpleMathExpression.getId(), 3);
    myIndexMap.put(myConceptNotSimpleMathExpression.getId(), 4);
    myIndexMap.put(myConceptOrSimpleMathExpression.getId(), 5);
    myIndexMap.put(myConceptSimpleMathAssignment.getId(), 6);
    myIndexMap.put(myConceptSimpleMathBooleanConstant.getId(), 7);
    myIndexMap.put(myConceptSimpleMathBooleanType.getId(), 8);
    myIndexMap.put(myConceptSimpleMathElementType.getId(), 9);
    myIndexMap.put(myConceptSimpleMathExpression.getId(), 10);
    myIndexMap.put(myConceptSimpleMathFloatConstant.getId(), 11);
    myIndexMap.put(myConceptSimpleMathFloatType.getId(), 12);
    myIndexMap.put(myConceptSimpleMathIntegerConstant.getId(), 13);
    myIndexMap.put(myConceptSimpleMathIntegerType.getId(), 14);
    myIndexMap.put(myConceptSimpleMathLongConstant.getId(), 15);
    myIndexMap.put(myConceptSimpleMathLongType.getId(), 16);
    myIndexMap.put(myConceptSimpleMathNumberType.getId(), 17);
    myIndexMap.put(myConceptSimpleMathType.getId(), 18);
    myIndexMap.put(myConceptSimpleMathTypedVarDeclaration.getId(), 19);
    myIndexMap.put(myConceptSimpleMathVarDeclaration.getId(), 20);
    myIndexMap.put(myConceptSimpleMathVarReference.getId(), 21);
    myIndexMap.put(myConceptSimpleMathWrapper.getId(), 22);
    myIndexMap.put(myConceptUnarySimpleMathExpression.getId(), 23);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAndSimpleMathExpression, myConceptArithmeticSimpleMathExpression, myConceptBinarySimpleMathExpression, myConceptLogicalSimpleMathExpression, myConceptNotSimpleMathExpression, myConceptOrSimpleMathExpression, myConceptSimpleMathAssignment, myConceptSimpleMathBooleanConstant, myConceptSimpleMathBooleanType, myConceptSimpleMathElementType, myConceptSimpleMathExpression, myConceptSimpleMathFloatConstant, myConceptSimpleMathFloatType, myConceptSimpleMathIntegerConstant, myConceptSimpleMathIntegerType, myConceptSimpleMathLongConstant, myConceptSimpleMathLongType, myConceptSimpleMathNumberType, myConceptSimpleMathType, myConceptSimpleMathTypedVarDeclaration, myConceptSimpleMathVarDeclaration, myConceptSimpleMathVarReference, myConceptSimpleMathWrapper, myConceptUnarySimpleMathExpression);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptAndSimpleMathExpression;
      case 1:
        return myConceptArithmeticSimpleMathExpression;
      case 2:
        return myConceptBinarySimpleMathExpression;
      case 3:
        return myConceptLogicalSimpleMathExpression;
      case 4:
        return myConceptNotSimpleMathExpression;
      case 5:
        return myConceptOrSimpleMathExpression;
      case 6:
        return myConceptSimpleMathAssignment;
      case 7:
        return myConceptSimpleMathBooleanConstant;
      case 8:
        return myConceptSimpleMathBooleanType;
      case 9:
        return myConceptSimpleMathElementType;
      case 10:
        return myConceptSimpleMathExpression;
      case 11:
        return myConceptSimpleMathFloatConstant;
      case 12:
        return myConceptSimpleMathFloatType;
      case 13:
        return myConceptSimpleMathIntegerConstant;
      case 14:
        return myConceptSimpleMathIntegerType;
      case 15:
        return myConceptSimpleMathLongConstant;
      case 16:
        return myConceptSimpleMathLongType;
      case 17:
        return myConceptSimpleMathNumberType;
      case 18:
        return myConceptSimpleMathType;
      case 19:
        return myConceptSimpleMathTypedVarDeclaration;
      case 20:
        return myConceptSimpleMathVarDeclaration;
      case 21:
        return myConceptSimpleMathVarReference;
      case 22:
        return myConceptSimpleMathWrapper;
      case 23:
        return myConceptUnarySimpleMathExpression;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForAndSimpleMathExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.AndSimpleMathExpression", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b825cc49L)).super_("jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81dcba5L)).parents("jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81dcba5L)).alias("and", "").sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467208490057")).create();
  }
  private static ConceptDescriptor createDescriptorForArithmeticSimpleMathExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.ArithmeticSimpleMathExpression", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b8289497L)).super_("jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c52ccL)).parents("jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c52ccL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1cc69153b82894eaL, "operator", new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467208672490"))).properties("operator").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467208672407")).create();
  }
  private static ConceptDescriptor createDescriptorForBinarySimpleMathExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c52ccL)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1cc69153b81d5476L, "left", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL), false, false, false, new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467207935094")), new ConceptDescriptorBuilder.Link(0x1cc69153b81d5478L, "right", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL), false, false, false, new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467207935096"))).children(new String[]{"left", "right"}, new boolean[]{false, false}).abstract_().sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467207869132")).create();
  }
  private static ConceptDescriptor createDescriptorForLogicalSimpleMathExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81dcba5L)).super_("jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c52ccL)).parents("jetbrains.mps.samples.Expressions.structure.BinarySimpleMathExpression").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c52ccL)).abstract_().sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467207965605")).create();
  }
  private static ConceptDescriptor createDescriptorForNotSimpleMathExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.NotSimpleMathExpression", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81d5484L)).super_("jetbrains.mps.samples.Expressions.structure.UnarySimpleMathExpression").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81d547bL)).parents("jetbrains.mps.samples.Expressions.structure.UnarySimpleMathExpression").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81d547bL)).alias("not", "").sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467207935108")).create();
  }
  private static ConceptDescriptor createDescriptorForOrSimpleMathExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.OrSimpleMathExpression", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b825cc4aL)).super_("jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81dcba5L)).parents("jetbrains.mps.samples.Expressions.structure.LogicalSimpleMathExpression").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81dcba5L)).alias("or", "").sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467208490058")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathAssignment() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathAssignment", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0xce8a4f56651064cL)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0xce8a4f566511a30L, "variable", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b832e4e1L), false, false, false, new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "930174696942541360")), new ConceptDescriptorBuilder.Link(0xce8a4f566511a32L, "expression", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL), false, false, false, new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "930174696942541362"))).children(new String[]{"variable", "expression"}, new boolean[]{false, false}).alias(":=", "").sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "930174696942536268")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathBooleanConstant() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathBooleanConstant", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b826823eL)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1cc69153b826823fL, "value", new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467208536639"))).properties("value").sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467208536638")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathBooleanType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathBooleanType", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f68L)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathType").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f67L)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathType").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f67L)).alias("Bool", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467208085352")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathElementType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathElementType", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b835454eL)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathType").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f67L)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathType").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f67L)).alias("Element", "").sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467209504078")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467207867403")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathFloatConstant() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathFloatConstant", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b84b40a4L)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1cc69153b84b40a5L, "value", new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467210944677"))).properties("value").sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467210944676")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathFloatType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathFloatType", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b84b3e3eL)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathType").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f67L)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathType").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f67L)).alias("Float", "").sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467210944062")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathIntegerConstant() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathIntegerConstant", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b826940aL)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1cc69153b826940bL, "value", new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467208541195"))).properties("value").sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467208541194")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathIntegerType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathIntegerType", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b82698e0L)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathType").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f67L)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathType").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f67L)).alias("Int", "").sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467208542432")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathLongConstant() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathLongConstant", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b83bf7eaL)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1cc69153b83bf81eL, "value", new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467209943070"))).properties("value").sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467209943018")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathLongType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathLongType", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b837a88aL)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathType").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f67L)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathType").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f67L)).alias("Long", "").sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467209660554")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathNumberType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathNumberType", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b8354763L)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathType").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f67L)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathType").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f67L)).alias("Number", "").sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467209504611")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathType() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathType", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f67L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467208085351")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathTypedVarDeclaration() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathTypedVarDeclaration", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x77a1220187231476L)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathVarDeclaration").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b832ccbfL)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathVarDeclaration").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b832ccbfL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x77a122018723285dL, "type", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81f9f67L), false, false, false, new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "8620208551721379933"))).children(new String[]{"type"}, new boolean[]{false}).sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "8620208551721374838")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathVarDeclaration() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathVarDeclaration", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b832ccbfL)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1cc69153b832cd14L, "initializer", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL), false, false, false, new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467209342228"))).children(new String[]{"initializer"}, new boolean[]{false}).alias("var", "").sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467209342143")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathVarReference() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathVarReference", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b832e4e1L)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).referenceDescriptors(new ConceptDescriptorBuilder.Ref(0x1cc69153b832e4e2L, "declaration", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b832ccbfL), false, new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467209348322"))).references("declaration").sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467209348321")).create();
  }
  private static ConceptDescriptor createDescriptorForSimpleMathWrapper() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.SimpleMathWrapper", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b8237002L)).super_("jetbrains.mps.baseLanguage.structure.Statement").version(1).super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).parents("jetbrains.mps.baseLanguage.structure.Statement").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b215L)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1cc69153b8237177L, "expressions", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL), true, true, false, new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467208335735"))).children(new String[]{"expressions"}, new boolean[]{true}).sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467208335362")).create();
  }
  private static ConceptDescriptor createDescriptorForUnarySimpleMathExpression() {
    return new ConceptDescriptorBuilder("jetbrains.mps.samples.Expressions.structure.UnarySimpleMathExpression", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81d547bL)).super_("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").version(1).super_(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).parents("jetbrains.mps.samples.Expressions.structure.SimpleMathExpression").parentIds(MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x1cc69153b81d547cL, "original", MetaIdFactory.conceptId(0x7e282943fc6b4900L, 0xada534c0024cc4f4L, 0x1cc69153b81c4c0bL), false, false, false, new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467207935100"))).children(new String[]{"original"}, new boolean[]{false}).abstract_().sourceNode(new SNodePointer("r:5607284d-edb3-4e34-bafc-a3b8fa3360be(jetbrains.mps.samples.Expressions.structure)", "2073504467207935099")).create();
  }
}
