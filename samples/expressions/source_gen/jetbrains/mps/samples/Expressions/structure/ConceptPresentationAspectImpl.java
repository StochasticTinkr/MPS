package jetbrains.mps.samples.Expressions.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AndSimpleMathExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ArithmeticSimpleMathExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinarySimpleMathExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LogicalSimpleMathExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotSimpleMathExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_OrSimpleMathExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathAssignment = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathBooleanConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathBooleanType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathElementType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathFloatConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathFloatType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathIntegerConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathIntegerType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathLongConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathLongType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathNumberType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathTypedVarDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathVarDeclaration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathVarReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SimpleMathWrapper = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_UnarySimpleMathExpression = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AndSimpleMathExpression;
      case 1:
        return props_ArithmeticSimpleMathExpression;
      case 2:
        return props_BinarySimpleMathExpression;
      case 3:
        return props_LogicalSimpleMathExpression;
      case 4:
        return props_NotSimpleMathExpression;
      case 5:
        return props_OrSimpleMathExpression;
      case 6:
        return props_SimpleMathAssignment;
      case 7:
        return props_SimpleMathBooleanConstant;
      case 8:
        return props_SimpleMathBooleanType;
      case 9:
        return props_SimpleMathElementType;
      case 10:
        return props_SimpleMathExpression;
      case 11:
        return props_SimpleMathFloatConstant;
      case 12:
        return props_SimpleMathFloatType;
      case 13:
        return props_SimpleMathIntegerConstant;
      case 14:
        return props_SimpleMathIntegerType;
      case 15:
        return props_SimpleMathLongConstant;
      case 16:
        return props_SimpleMathLongType;
      case 17:
        return props_SimpleMathNumberType;
      case 18:
        return props_SimpleMathType;
      case 19:
        return props_SimpleMathTypedVarDeclaration;
      case 20:
        return props_SimpleMathVarDeclaration;
      case 21:
        return props_SimpleMathVarReference;
      case 22:
        return props_SimpleMathWrapper;
      case 23:
        return props_UnarySimpleMathExpression;
    }
    throw new IllegalStateException("Unknown concept " + c);
  }
}
