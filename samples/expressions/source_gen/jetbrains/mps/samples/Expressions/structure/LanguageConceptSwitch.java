package jetbrains.mps.samples.Expressions.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AndSimpleMathExpression = 0;
  public static final int ArithmeticSimpleMathExpression = 1;
  public static final int BinarySimpleMathExpression = 2;
  public static final int LogicalSimpleMathExpression = 3;
  public static final int NotSimpleMathExpression = 4;
  public static final int OrSimpleMathExpression = 5;
  public static final int SimpleMathAssignment = 6;
  public static final int SimpleMathBooleanConstant = 7;
  public static final int SimpleMathBooleanType = 8;
  public static final int SimpleMathElementType = 9;
  public static final int SimpleMathExpression = 10;
  public static final int SimpleMathFloatConstant = 11;
  public static final int SimpleMathFloatType = 12;
  public static final int SimpleMathIntegerConstant = 13;
  public static final int SimpleMathIntegerType = 14;
  public static final int SimpleMathLongConstant = 15;
  public static final int SimpleMathLongType = 16;
  public static final int SimpleMathNumberType = 17;
  public static final int SimpleMathType = 18;
  public static final int SimpleMathTypedVarDeclaration = 19;
  public static final int SimpleMathVarDeclaration = 20;
  public static final int SimpleMathVarReference = 21;
  public static final int SimpleMathWrapper = 22;
  public static final int UnarySimpleMathExpression = 23;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x7e282943fc6b4900L, 0xada534c0024cc4f4L);
    builder.put(0x1cc69153b825cc49L, AndSimpleMathExpression);
    builder.put(0x1cc69153b8289497L, ArithmeticSimpleMathExpression);
    builder.put(0x1cc69153b81c52ccL, BinarySimpleMathExpression);
    builder.put(0x1cc69153b81dcba5L, LogicalSimpleMathExpression);
    builder.put(0x1cc69153b81d5484L, NotSimpleMathExpression);
    builder.put(0x1cc69153b825cc4aL, OrSimpleMathExpression);
    builder.put(0xce8a4f56651064cL, SimpleMathAssignment);
    builder.put(0x1cc69153b826823eL, SimpleMathBooleanConstant);
    builder.put(0x1cc69153b81f9f68L, SimpleMathBooleanType);
    builder.put(0x1cc69153b835454eL, SimpleMathElementType);
    builder.put(0x1cc69153b81c4c0bL, SimpleMathExpression);
    builder.put(0x1cc69153b84b40a4L, SimpleMathFloatConstant);
    builder.put(0x1cc69153b84b3e3eL, SimpleMathFloatType);
    builder.put(0x1cc69153b826940aL, SimpleMathIntegerConstant);
    builder.put(0x1cc69153b82698e0L, SimpleMathIntegerType);
    builder.put(0x1cc69153b83bf7eaL, SimpleMathLongConstant);
    builder.put(0x1cc69153b837a88aL, SimpleMathLongType);
    builder.put(0x1cc69153b8354763L, SimpleMathNumberType);
    builder.put(0x1cc69153b81f9f67L, SimpleMathType);
    builder.put(0x77a1220187231476L, SimpleMathTypedVarDeclaration);
    builder.put(0x1cc69153b832ccbfL, SimpleMathVarDeclaration);
    builder.put(0x1cc69153b832e4e1L, SimpleMathVarReference);
    builder.put(0x1cc69153b8237002L, SimpleMathWrapper);
    builder.put(0x1cc69153b81d547bL, UnarySimpleMathExpression);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
