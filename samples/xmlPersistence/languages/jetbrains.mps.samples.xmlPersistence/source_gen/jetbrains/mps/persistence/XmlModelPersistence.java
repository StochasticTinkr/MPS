package jetbrains.mps.persistence;

/*Generated by MPS */

import jetbrains.mps.extapi.model.CustomPersistenceLoadFacility;
import jetbrains.mps.extapi.model.CustomPersistenceSModelBase;
import jetbrains.mps.extapi.model.SModelSimpleHeader;
import org.jetbrains.mps.openapi.persistence.ModelFactory;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.persistence.datasource.DataSourceType;
import org.jetbrains.mps.openapi.persistence.datasource.FileExtensionDataSourceType;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import org.jetbrains.mps.openapi.persistence.UnsupportedDataSourceException;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SModel;
import org.jetbrains.mps.openapi.persistence.DataSource;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import org.jetbrains.mps.openapi.model.SModelReference;
import jetbrains.mps.smodel.SModelId;
import jetbrains.mps.util.FileUtil;
import org.jetbrains.mps.openapi.persistence.StreamDataSource;
import org.jetbrains.mps.openapi.model.SModelName;
import org.jetbrains.mps.openapi.persistence.ModelLoadingOption;
import org.jetbrains.mps.openapi.persistence.ModelCreationException;

import java.io.OutputStreamWriter;
import java.util.List;
import java.util.Collections;

import jetbrains.mps.extapi.persistence.FileSystemBasedDataSource;
import java.util.ArrayList;
import org.jetbrains.mps.openapi.persistence.ModelFactoryType;
import org.jetbrains.mps.openapi.persistence.ModelLoadException;
import org.jetbrains.mps.openapi.persistence.ModelSaveException;
import jetbrains.mps.extapi.model.SModelBase;
import jetbrains.mps.extapi.model.SModelData;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.persistence.xml.XmlConverter;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.io.InputStream;
import org.xml.sax.InputSource;
import java.io.InputStreamReader;
import org.jdom.Document;
import jetbrains.mps.util.JDOMUtil;
import org.jdom.JDOMException;
import java.util.Iterator;
import jetbrains.mps.extapi.model.PersistenceProblem;
import jetbrains.mps.util.IterableUtil;
import jetbrains.mps.text.impl.RegularTextUnit;
import jetbrains.mps.text.TextUnit;
import java.io.OutputStream;
import java.io.BufferedOutputStream;

/**
 * A sample custom persistence implementation.
 */
public class XmlModelPersistence implements ModelFactory {
  private static final Logger LOG = LogManager.getLogger(XmlModelPersistence.class);
  private static final String XML_EXTENSION = "xml";
  private static final DataSourceType XML_TYPE = FileExtensionDataSourceType.of(XML_EXTENSION);

  private final PersistenceFacade myFacade = PersistenceFacade.getInstance();

  public XmlModelPersistence() {
  }

  /**
   * Instantiates a model on a given data source. Options can be used to pass additional parameters
   * like stream encoding (usually, the default is utf-8), package name, containing module reference
   * or module relative path of the source.
   * 
   * @throws UnsupportedDataSourceException if the data source is not supported
   * @return The loaded model
   */
  @NotNull
  @Override
  public SModel load(@NotNull DataSource dataSource, @NotNull ModelLoadingOption... options) throws UnsupportedDataSourceException, ModelLoadException {
    if (!(supports(dataSource))) {
      throw new UnsupportedDataSourceException(dataSource);
    }
    CustomPersistenceLoadFacility facility = new MyCustomPersistenceLoadFacility((StreamDataSource) dataSource, this);
    return CustomPersistenceSModelBase.readHeaderAndCreate((StreamDataSource) dataSource, facility);
  }

  class MyCustomPersistenceLoadFacility implements CustomPersistenceLoadFacility {
    @NotNull private final StreamDataSource mySource;
    @NotNull private final ModelFactory myFactory;

    public MyCustomPersistenceLoadFacility(@NotNull StreamDataSource source, @NotNull ModelFactory factory) {
      mySource = source;
      myFactory = factory;
    }

    @NotNull
    @Override
    public ModelFactory getModelFactory() {
      return myFactory;
    }

    @NotNull
    @Override
    public StreamDataSource getSource() {
      return mySource;
    }

    @NotNull
    @Override
    public SModelSimpleHeader readHeader() throws ModelLoadException {
      try (InputStreamReader reader = new InputStreamReader(mySource.openInputStream())) {
        String firstLine = FileUtil.readLine(reader, 0);
        String prefix = "modelRef=";
        if (firstLine == null || !firstLine.startsWith(prefix)) {
          throw new ModelLoadException("Invalid stream format, could not read the model header");
        }
        String modelRef = firstLine.substring(prefix.length());
        final SModelReference mr = PersistenceFacade.getInstance().createModelReference(modelRef);
        return new SModelSimpleHeader(mr);
      } catch (IOException e) {
        throw new ModelLoadException(e.getMessage(), new ArrayList<>(), e);
      }
    }

    @NotNull
    @Override
    public SModelData readModel(@NotNull SModelSimpleHeader header) throws ModelLoadException {
      InputStream in = null;
      SModelReference reference = header.getModelReference();
      try {
        String name = reference.getModelName();
        if (reference.getModelId() instanceof SModelId.RelativePathSModelId) {
          name = FileUtil.getNameWithoutExtension(((SModelId.RelativePathSModelId) reference.getModelId()).getFileName());
        }
        try {
          in = mySource.openInputStream();
          new BufferedReader(new InputStreamReader(in)).readLine(); // skip the header
          InputSource inputSource = new InputSource(new InputStreamReader(in, FileUtil.DEFAULT_CHARSET));
          Document document = JDOMUtil.loadDocument(inputSource);
          SNode xmlFile = XmlConverter.convertDocument(name, document);

          jetbrains.mps.smodel.SModel sModel = new jetbrains.mps.smodel.SModel(reference);
          sModel.addLanguage(MetaAdapterFactory.getLanguage(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, "jetbrains.mps.core.xml"));
          sModel.addRootNode(xmlFile);
          return sModel;
        } catch (IOException e) {
          throw new ModelLoadException("Could not read the model " + reference, new ArrayList<>(), e);
        }
      } catch (JDOMException e) {
        throw new ModelLoadException("Could not read from " + mySource.getLocation(), new ArrayList<>(), e);
      } finally {
        FileUtil.closeFileSafe(in);
      }
    }

    @Override
    public void writeModel(@NotNull SModelSimpleHeader header, @NotNull SModelData modelData) throws ModelSaveException {
      try {
        XmlModelPersistence.this.writeModel(header.getModelReference(), modelData, mySource);
      } catch (IOException e) {
        throw new ModelSaveException("Could not write the model " + header, new ArrayList<>(), e);
      }
    }
  }

  @NotNull
  @Override
  public List<DataSourceType> getPreferredDataSourceTypes() {
    return Collections.singletonList(XML_TYPE);
  }

  @NotNull
  @Override
  public ModelFactoryType getType() {
    return XmlModelPersistence.XmlModelPersistenceType.INSTANCE;
  }

  @Override
  public boolean supports(@NotNull DataSource source) {
    return source instanceof FileSystemBasedDataSource && source instanceof StreamDataSource;
  }

  /**
   * Creates a new empty model.
   *
   * @throws UnsupportedDataSourceException if the data source is not supported
   */
  @NotNull
  @Override
  public SModel create(@NotNull DataSource dataSource,
                       @NotNull SModelName modelName,
                       @NotNull ModelLoadingOption... options) throws UnsupportedDataSourceException, ModelCreationException {
    if (!(supports(dataSource))) {
      throw new UnsupportedDataSourceException(dataSource);
    }
    org.jetbrains.mps.openapi.model.SModelId id = myFacade.createModelId("path:" + dataSource);
    SModelReference ref = myFacade.createModelReference(null, id, modelName);
    MyCustomPersistenceLoadFacility facility = new MyCustomPersistenceLoadFacility((StreamDataSource) dataSource, this);
    CustomPersistenceSModelBase newModel =
        new CustomPersistenceSModelBase(new SModelSimpleHeader(ref), (StreamDataSource) dataSource, facility);
    addRootAndImportXMLLang(newModel);
    return newModel;
  }

  private void addRootAndImportXMLLang(CustomPersistenceSModelBase model) {
    String name = model.getName().getSimpleName();
    SNode xmlFile = XmlConverter.newDocument(name);
    model.addLanguage(MetaAdapterFactory.getLanguage(0x479c7a8c02f943b5L, 0x9139d910cb22f298L, "jetbrains.mps.core.xml"));
    model.addRootNode(xmlFile);
  }

  /**
   * Saves the model in the factory-specific format (including conversion when needed).
   */
  @Override
  public void save(@NotNull SModel model, @NotNull DataSource dataSource) throws ModelSaveException, IOException {
    if (!(supports(dataSource))) {
      throw new UnsupportedDataSourceException(dataSource);
    }
    writeModel(model.getReference(), ((SModelBase) model).getModelData(), (StreamDataSource) dataSource);
  }

  /**
   * Loads the model content, and saves it back in the up-to-date format.
   */
  @Override
  public void upgrade(@NotNull DataSource dataSource) throws IOException {
  }

  public void writeModel(SModelReference modelReference, SModelData model, StreamDataSource source) throws IOException, ModelSaveException {
    Iterator<SNode> iterator = model.getRootNodes().iterator();
    SNode root = (iterator.hasNext() ? iterator.next() : null);
    if (root == null) {
      throw new ModelSaveException("cannot save empty model", Collections.<SModel.Problem>singletonList(new PersistenceProblem(SModel.Problem.Kind.Save, "cannot save empty model", null, true)));
    }
    // TODO check concepts
    if (IterableUtil.copyToList(model.getRootNodes()).size() > 1) {
      throw new ModelSaveException("cannot save more than one root into .xml file", Collections.<SModel.Problem>singletonList(new PersistenceProblem(SModel.Problem.Kind.Save, "cannot save more than one root into .xml file", null, true, -1, -1, root)));
    }

    RegularTextUnit tu = new RegularTextUnit(root, "dummy.xml");
    tu.generate();
    if (tu.getState() != TextUnit.Status.Generated) {
      throw new ModelSaveException("cannot save xml root", Collections.<SModel.Problem>singleton(new PersistenceProblem(SModel.Problem.Kind.Save, "Failed to generate text, status is " + tu.getState(), null, true)));
    }
    byte[] content = tu.getBytes();
    OutputStream stream = new BufferedOutputStream(source.openOutputStream());
    try {
      BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(stream));
      String ref = "modelRef=" + PersistenceFacade.getInstance().asString(modelReference);
      writer.write(ref);
      stream.write(content);
      stream.flush();
    } finally {
      FileUtil.closeFileSafe(stream);
    }
  }

  public enum XmlModelPersistenceType implements ModelFactoryType {
    INSTANCE();


    @NotNull
    @Override
    public String getFormatTitle() {
      return "XML Language Persistence";
    }
  }
}


