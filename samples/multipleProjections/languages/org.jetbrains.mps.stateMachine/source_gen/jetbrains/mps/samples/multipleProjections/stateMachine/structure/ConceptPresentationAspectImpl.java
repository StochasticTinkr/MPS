package jetbrains.mps.samples.multipleProjections.stateMachine.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AbstractStateMachineElement;
  private ConceptPresentation props_Event;
  private ConceptPresentation props_EventReference;
  private ConceptPresentation props_State;
  private ConceptPresentation props_StateMachine;
  private ConceptPresentation props_StateReference;
  private ConceptPresentation props_Transition;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractStateMachineElement:
        if (props_AbstractStateMachineElement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_AbstractStateMachineElement = cpb.create();
        }
        return props_AbstractStateMachineElement;
      case LanguageConceptSwitch.Event:
        if (props_Event == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Event = cpb.create();
        }
        return props_Event;
      case LanguageConceptSwitch.EventReference:
        if (props_EventReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_EventReference = cpb.create();
        }
        return props_EventReference;
      case LanguageConceptSwitch.State:
        if (props_State == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_State = cpb.create();
        }
        return props_State;
      case LanguageConceptSwitch.StateMachine:
        if (props_StateMachine == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_StateMachine = cpb.create();
        }
        return props_StateMachine;
      case LanguageConceptSwitch.StateReference:
        if (props_StateReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_StateReference = cpb.create();
        }
        return props_StateReference;
      case LanguageConceptSwitch.Transition:
        if (props_Transition == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Transition = cpb.create();
        }
        return props_Transition;
    }
    return null;
  }
}
