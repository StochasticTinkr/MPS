package jetbrains.mps.samples.multipleProjections.stateMachine.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractStateMachineElement = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Event = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_EventReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_State = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StateMachine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StateReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Transition = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractStateMachineElement:
        return props_AbstractStateMachineElement;
      case LanguageConceptSwitch.Event:
        return props_Event;
      case LanguageConceptSwitch.EventReference:
        return props_EventReference;
      case LanguageConceptSwitch.State:
        return props_State;
      case LanguageConceptSwitch.StateMachine:
        return props_StateMachine;
      case LanguageConceptSwitch.StateReference:
        return props_StateReference;
      case LanguageConceptSwitch.Transition:
        return props_Transition;
    }
    return null;
  }
}
