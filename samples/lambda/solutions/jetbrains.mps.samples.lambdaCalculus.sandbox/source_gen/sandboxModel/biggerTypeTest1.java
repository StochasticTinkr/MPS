package sandboxModel;

/*Generated by MPS */

import jetbrains.mps.samples.lambdaCalculus.runtime.Function;
import java.util.List;
import java.util.ArrayList;

public class biggerTypeTest1 {
  public biggerTypeTest1() {
  }
  public static void main(String[] args) {
    System.out.println((eval()));
  }
  public static Object eval() {
    return new biggerTypeTest1.Function_1751004816843669402();
  }
  public static class Function_1751004816843669402 extends Function {
    private List myOuterVars = new ArrayList();
    public Function_1751004816843669402() {
      myType = "((AnyType->AnyType)->(((AnyType->AnyType)->AnyType)->AnyType))";
    }
    public Function_1751004816843669402(List outerVars) {
      myType = "((AnyType->AnyType)->(((AnyType->AnyType)->AnyType)->AnyType))";
      myOuterVars.addAll(outerVars);
    }
    public Object eval() {
      int i = 0;
      int j = 0;
      Function x = (Function) myArgs.get(i++);
      Function y = (Function) myArgs.get(i++);
      return (Object) ((Function) x).apply((Object) ((Function) y).apply(x));
    }
    public int getParamsCount() {
      return 2;
    }
    public Function copy() {
      return new biggerTypeTest1.Function_1751004816843669402(myOuterVars);
    }
  }
}
