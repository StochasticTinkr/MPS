package jetbrains.mps.samples.lambdaCalculus.editor;

/*Generated by MPS */

import jetbrains.mps.openapi.editor.cells.EditorCell;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.openapi.editor.EditorContext;
import jetbrains.mps.openapi.editor.cells.CellActionType;
import jetbrains.mps.editor.runtime.cells.AbstractCellAction;
import jetbrains.mps.editor.runtime.highlight.DeletionApproverUtil;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;

public class Abstraction_Variable_actions {
  public static void setCellActions(EditorCell editorCell, SNode node, EditorContext context) {
    editorCell.setAction(CellActionType.DELETE, new Abstraction_Variable_actions.Abstraction_Variable_actions_DELETE(node));
    editorCell.setAction(CellActionType.BACKSPACE, new Abstraction_Variable_actions.Abstraction_Variable_actions_BACKSPACE(node));
  }
  public static class Abstraction_Variable_actions_DELETE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public Abstraction_Variable_actions_DELETE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      if (DeletionApproverUtil.approve(editorContext, node, "variableCollection")) {
        return;
      }
      SNode body = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x7c9e280794ad4afcL, 0xadf0aaee45eb2895L, 0x37d11ba7d7eccf80L, 0x37d11ba7d7ee2dc5L, "body"));
      SNodeOperations.replaceWithAnother(node, body);
    }
  }
  public static class Abstraction_Variable_actions_BACKSPACE extends AbstractCellAction {
    /*package*/ SNode myNode;
    public Abstraction_Variable_actions_BACKSPACE(SNode node) {
      this.myNode = node;
    }
    public void execute(EditorContext editorContext) {
      this.execute_internal(editorContext, this.myNode);
    }
    public void execute_internal(EditorContext editorContext, SNode node) {
      if (DeletionApproverUtil.approve(editorContext, node, "variableCollection")) {
        return;
      }
      SNode body = SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x7c9e280794ad4afcL, 0xadf0aaee45eb2895L, 0x37d11ba7d7eccf80L, 0x37d11ba7d7ee2dc5L, "body"));
      SNodeOperations.replaceWithAnother(node, body);
    }
  }
}
