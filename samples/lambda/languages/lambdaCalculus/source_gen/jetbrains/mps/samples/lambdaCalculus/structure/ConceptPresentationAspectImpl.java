package jetbrains.mps.samples.lambdaCalculus.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractionVarRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractionVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AddOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryNumericOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryStringOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConcatenateOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DivideOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FunctionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LambdaAbstraction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LambdaApplication = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LambdaExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LambdaType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LetExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LetRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LetVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultipleExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultiplyOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NumberType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NumericConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParenthesisExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Program = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubtractOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Variable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableOwner = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableReference = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AbstractionVarRef:
        return props_AbstractionVarRef;
      case LanguageConceptSwitch.AbstractionVariable:
        return props_AbstractionVariable;
      case LanguageConceptSwitch.AddOperation:
        return props_AddOperation;
      case LanguageConceptSwitch.BinaryNumericOperation:
        return props_BinaryNumericOperation;
      case LanguageConceptSwitch.BinaryOperation:
        return props_BinaryOperation;
      case LanguageConceptSwitch.BinaryStringOperation:
        return props_BinaryStringOperation;
      case LanguageConceptSwitch.ConcatenateOperation:
        return props_ConcatenateOperation;
      case LanguageConceptSwitch.DivideOperation:
        return props_DivideOperation;
      case LanguageConceptSwitch.FunctionType:
        return props_FunctionType;
      case LanguageConceptSwitch.LambdaAbstraction:
        return props_LambdaAbstraction;
      case LanguageConceptSwitch.LambdaApplication:
        return props_LambdaApplication;
      case LanguageConceptSwitch.LambdaExpression:
        return props_LambdaExpression;
      case LanguageConceptSwitch.LambdaType:
        return props_LambdaType;
      case LanguageConceptSwitch.LetExpression:
        return props_LetExpression;
      case LanguageConceptSwitch.LetRef:
        return props_LetRef;
      case LanguageConceptSwitch.LetVariable:
        return props_LetVariable;
      case LanguageConceptSwitch.MultipleExpression:
        return props_MultipleExpression;
      case LanguageConceptSwitch.MultiplyOperation:
        return props_MultiplyOperation;
      case LanguageConceptSwitch.NumberType:
        return props_NumberType;
      case LanguageConceptSwitch.NumericConstant:
        return props_NumericConstant;
      case LanguageConceptSwitch.ParenthesisExpression:
        return props_ParenthesisExpression;
      case LanguageConceptSwitch.Program:
        return props_Program;
      case LanguageConceptSwitch.StringConstant:
        return props_StringConstant;
      case LanguageConceptSwitch.StringType:
        return props_StringType;
      case LanguageConceptSwitch.SubtractOperation:
        return props_SubtractOperation;
      case LanguageConceptSwitch.Variable:
        return props_Variable;
      case LanguageConceptSwitch.VariableOwner:
        return props_VariableOwner;
      case LanguageConceptSwitch.VariableReference:
        return props_VariableReference;
    }
    return null;
  }
}
