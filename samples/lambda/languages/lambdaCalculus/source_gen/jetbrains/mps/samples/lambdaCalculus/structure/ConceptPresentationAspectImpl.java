package jetbrains.mps.samples.lambdaCalculus.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_AbstractionVarRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AbstractionVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_AddOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryNumericOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_BinaryStringOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ConcatenateOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DivideOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_FunctionType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LambdaAbstraction = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LambdaApplication = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LambdaExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LambdaType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LetExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LetRef = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_LetVariable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultipleExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MultiplyOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NumberType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NumericConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ParenthesisExpression = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Program = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringConstant = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StringType = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SubtractOperation = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Variable = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableOwner = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_VariableReference = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("7c9e2807-94ad-4afc-adf0-aaee45eb2895"), "jetbrains.mps.samples.lambdaCalculus")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_AbstractionVarRef;
      case 1:
        return props_AbstractionVariable;
      case 2:
        return props_AddOperation;
      case 3:
        return props_BinaryNumericOperation;
      case 4:
        return props_BinaryOperation;
      case 5:
        return props_BinaryStringOperation;
      case 6:
        return props_ConcatenateOperation;
      case 7:
        return props_DivideOperation;
      case 8:
        return props_FunctionType;
      case 9:
        return props_LambdaAbstraction;
      case 10:
        return props_LambdaApplication;
      case 11:
        return props_LambdaExpression;
      case 12:
        return props_LambdaType;
      case 13:
        return props_LetExpression;
      case 14:
        return props_LetRef;
      case 15:
        return props_LetVariable;
      case 16:
        return props_MultipleExpression;
      case 17:
        return props_MultiplyOperation;
      case 18:
        return props_NumberType;
      case 19:
        return props_NumericConstant;
      case 20:
        return props_ParenthesisExpression;
      case 21:
        return props_Program;
      case 22:
        return props_StringConstant;
      case 23:
        return props_StringType;
      case 24:
        return props_SubtractOperation;
      case 25:
        return props_Variable;
      case 26:
        return props_VariableOwner;
      case 27:
        return props_VariableReference;
    }
    throw new IllegalStateException();
  }
}
