package jetbrains.mps.samples.lambdaCalculus.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int AbstractionVarRef = 0;
  public static final int AbstractionVariable = 1;
  public static final int AddOperation = 2;
  public static final int BinaryNumericOperation = 3;
  public static final int BinaryOperation = 4;
  public static final int BinaryStringOperation = 5;
  public static final int ConcatenateOperation = 6;
  public static final int DivideOperation = 7;
  public static final int FunctionType = 8;
  public static final int LambdaAbstraction = 9;
  public static final int LambdaApplication = 10;
  public static final int LambdaExpression = 11;
  public static final int LambdaType = 12;
  public static final int LetExpression = 13;
  public static final int LetRef = 14;
  public static final int LetVariable = 15;
  public static final int MultipleExpression = 16;
  public static final int MultiplyOperation = 17;
  public static final int NumberType = 18;
  public static final int NumericConstant = 19;
  public static final int ParenthesisExpression = 20;
  public static final int Program = 21;
  public static final int StringConstant = 22;
  public static final int StringType = 23;
  public static final int SubtractOperation = 24;
  public static final int Variable = 25;
  public static final int VariableOwner = 26;
  public static final int VariableReference = 27;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x7c9e280794ad4afcL, 0xadf0aaee45eb2895L);
    builder.put(0x37d11ba7d7fe548fL, AbstractionVarRef);
    builder.put(0x37d11ba7d7eccf81L, AbstractionVariable);
    builder.put(0x1ad829a6925a0969L, AddOperation);
    builder.put(0x1a34313bb1413cb4L, BinaryNumericOperation);
    builder.put(0x1ad829a6925a095bL, BinaryOperation);
    builder.put(0x1a34313bb1413cb6L, BinaryStringOperation);
    builder.put(0x1a34313bb1413cb8L, ConcatenateOperation);
    builder.put(0x5c3aaf5269584eeeL, DivideOperation);
    builder.put(0x3ee0e3dd7c1afae8L, FunctionType);
    builder.put(0x37d11ba7d7eccf80L, LambdaAbstraction);
    builder.put(0x37d11ba7d7ee2dddL, LambdaApplication);
    builder.put(0x37d11ba7d7ec98e9L, LambdaExpression);
    builder.put(0x3ee0e3dd7c1afad8L, LambdaType);
    builder.put(0x448ba254edbfc79fL, LetExpression);
    builder.put(0x448ba254edc7216cL, LetRef);
    builder.put(0x74076973acb52e68L, LetVariable);
    builder.put(0x15b75b54f176d1a3L, MultipleExpression);
    builder.put(0x5c3aaf5269584eeaL, MultiplyOperation);
    builder.put(0x3ee0e3dd7c1afadaL, NumberType);
    builder.put(0x37d11ba7d7ee2dd5L, NumericConstant);
    builder.put(0x3735fdad52687b59L, ParenthesisExpression);
    builder.put(0x37d11ba7d7fc0389L, Program);
    builder.put(0x37d11ba7d7ee2dc8L, StringConstant);
    builder.put(0x3ee0e3dd7c1afae1L, StringType);
    builder.put(0x5c3aaf5269584eecL, SubtractOperation);
    builder.put(0x48db75d5dc496b12L, Variable);
    builder.put(0x48db75d5dc496a4fL, VariableOwner);
    builder.put(0x48db75d5dc496b08L, VariableReference);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
