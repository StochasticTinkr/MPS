package MultiTarget.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {

  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(4);
  /*package*/ final ConceptDescriptor myConceptContainer = new ConceptDescriptorBuilder("MultiTarget.structure.Container", MetaIdFactory.conceptId(0x42cb30372cd244e7L, 0x8fe7254f0c50f311L, 0xbd2fe10cbfadf1dL)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept", "jetbrains.mps.lang.core.structure.INamedConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL), MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L)).childDescriptors(new ConceptDescriptorBuilder.Link(0xbd2fe10cbfadf21L, "members", MetaIdFactory.conceptId(0x42cb30372cd244e7L, 0x8fe7254f0c50f311L, 0xbd2fe10cbfadf20L), true, true, false)).children(new String[]{"members"}, new boolean[]{true}).rootable().alias("container", "").sourceNode(new SNodePointer("r:9f12744a-a702-440b-b5fb-61597de1c627(MultiTarget.structure)", "852022627621592861")).create();
  /*package*/ final ConceptDescriptor myConceptMember = new ConceptDescriptorBuilder("MultiTarget.structure.Member", MetaIdFactory.conceptId(0x42cb30372cd244e7L, 0x8fe7254f0c50f311L, 0xbd2fe10cbfadf20L)).super_("jetbrains.mps.lang.core.structure.BaseConcept").version(1).super_(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).parents("jetbrains.mps.lang.core.structure.BaseConcept").parentIds(MetaIdFactory.conceptId(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x10802efe25aL)).abstract_().sourceNode(new SNodePointer("r:9f12744a-a702-440b-b5fb-61597de1c627(MultiTarget.structure)", "852022627621592864")).create();
  /*package*/ final ConceptDescriptor myConceptNumericValue = new ConceptDescriptorBuilder("MultiTarget.structure.NumericValue", MetaIdFactory.conceptId(0x42cb30372cd244e7L, 0x8fe7254f0c50f311L, 0xbd2fe10cbfadf8dL)).super_("MultiTarget.structure.Member").version(1).super_(MetaIdFactory.conceptId(0x42cb30372cd244e7L, 0x8fe7254f0c50f311L, 0xbd2fe10cbfadf20L)).parents("MultiTarget.structure.Member").parentIds(MetaIdFactory.conceptId(0x42cb30372cd244e7L, 0x8fe7254f0c50f311L, 0xbd2fe10cbfadf20L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0xbd2fe10cbfadf8eL, "value")).properties("value").alias("numeric value", "").sourceNode(new SNodePointer("r:9f12744a-a702-440b-b5fb-61597de1c627(MultiTarget.structure)", "852022627621592973")).create();
  /*package*/ final ConceptDescriptor myConceptStringValue = new ConceptDescriptorBuilder("MultiTarget.structure.StringValue", MetaIdFactory.conceptId(0x42cb30372cd244e7L, 0x8fe7254f0c50f311L, 0xbd2fe10cbfadf5fL)).super_("MultiTarget.structure.Member").version(1).super_(MetaIdFactory.conceptId(0x42cb30372cd244e7L, 0x8fe7254f0c50f311L, 0xbd2fe10cbfadf20L)).parents("MultiTarget.structure.Member").parentIds(MetaIdFactory.conceptId(0x42cb30372cd244e7L, 0x8fe7254f0c50f311L, 0xbd2fe10cbfadf20L)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0xbd2fe10cbfadf60L, "value")).properties("value").alias("string value", "").sourceNode(new SNodePointer("r:9f12744a-a702-440b-b5fb-61597de1c627(MultiTarget.structure)", "852022627621592927")).create();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptContainer.getId(), 0);
    myIndexMap.put(myConceptMember.getId(), 1);
    myIndexMap.put(myConceptNumericValue.getId(), 2);
    myIndexMap.put(myConceptStringValue.getId(), 3);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptContainer, myConceptMember, myConceptNumericValue, myConceptStringValue);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptContainer;
      case 1:
        return myConceptMember;
      case 2:
        return myConceptNumericValue;
      case 3:
        return myConceptStringValue;
      default:
        throw new IllegalStateException();
    }
  }
}
