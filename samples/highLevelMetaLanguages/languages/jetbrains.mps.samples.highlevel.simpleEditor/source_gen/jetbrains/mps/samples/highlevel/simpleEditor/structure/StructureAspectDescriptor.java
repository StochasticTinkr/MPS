package jetbrains.mps.samples.highlevel.simpleEditor.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.concept.SConceptAdapterById;
import jetbrains.mps.smodel.adapter.structure.concept.SInterfaceConceptAdapterById;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(3);
  /*package*/ final ConceptDescriptor myConceptEditorAspectDeclaration = createDescriptorForEditorAspectDeclaration();
  /*package*/ final ConceptDescriptor myConceptSimpleEditorDeclaration = createDescriptorForSimpleEditorDeclaration();
  /*package*/ final ConceptDescriptor myConceptSimplePropertyReference = createDescriptorForSimplePropertyReference();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptEditorAspectDeclaration.getId(), 0);
    myIndexMap.put(myConceptSimpleEditorDeclaration.getId(), 1);
    myIndexMap.put(myConceptSimplePropertyReference.getId(), 2);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptEditorAspectDeclaration, myConceptSimpleEditorDeclaration, myConceptSimplePropertyReference);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptEditorAspectDeclaration;
      case 1:
        return myConceptSimpleEditorDeclaration;
      case 2:
        return myConceptSimplePropertyReference;
      default:
        throw new IllegalStateException();
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    Integer res = null;
    if (c instanceof SConceptAdapterById) {
      res = myIndexMap.get(((SConceptAdapterById) c).getId());
    } else if (c instanceof SInterfaceConceptAdapterById) {
      res = myIndexMap.get(((SInterfaceConceptAdapterById) c).getId());
    }
    return (res == null ? -1 : res);
  }

  private static ConceptDescriptor createDescriptorForEditorAspectDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.highlevel.simpleEditor", "EditorAspectDeclaration", 0xc457c5de60274104L, 0xab9ca31c5404ae8bL, 0x346ead2c08cc7fbbL);
    b.class_(false, false, true);
    b.origin("r:64c71df5-2adc-4e3d-8424-aa08c0bc782f(jetbrains.mps.samples.highlevel.simpleEditor.structure)/3778147542048210875");
    b.aggregate("editors", 0x346ead2c08ccf70cL).target(0xc457c5de60274104L, 0xab9ca31c5404ae8bL, 0x346ead2c08ccf6ffL).optional(true).ordered(true).multiple(true).origin("3778147542048241420").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSimpleEditorDeclaration() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.highlevel.simpleEditor", "SimpleEditorDeclaration", 0xc457c5de60274104L, 0xab9ca31c5404ae8bL, 0x346ead2c08ccf6ffL);
    b.class_(false, false, false);
    b.origin("r:64c71df5-2adc-4e3d-8424-aa08c0bc782f(jetbrains.mps.samples.highlevel.simpleEditor.structure)/3778147542048241407");
    b.prop("caption", 0x346ead2c08ccfa54L, "3778147542048242260");
    b.associate("cncpt", 0x346ead2c08ccf9f3L).target(0xbaa9238b36da4ccbL, 0xa76b8ad70e222183L, 0x460f3ddb176b0a3cL).optional(false).origin("3778147542048242163").done();
    b.aggregate("visibleProperties", 0x346ead2c08ccfa0dL).target(0xc457c5de60274104L, 0xab9ca31c5404ae8bL, 0x346ead2c08ccfa10L).optional(true).ordered(true).multiple(true).origin("3778147542048242189").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSimplePropertyReference() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("jetbrains.mps.samples.highlevel.simpleEditor", "SimplePropertyReference", 0xc457c5de60274104L, 0xab9ca31c5404ae8bL, 0x346ead2c08ccfa10L);
    b.class_(false, false, false);
    b.origin("r:64c71df5-2adc-4e3d-8424-aa08c0bc782f(jetbrains.mps.samples.highlevel.simpleEditor.structure)/3778147542048242192");
    b.associate("prop", 0x346ead2c08ccfa1fL).target(0xbaa9238b36da4ccbL, 0xa76b8ad70e222183L, 0x346ead2c08cc7faeL).optional(false).origin("3778147542048242207").done();
    return b.create();
  }
}
