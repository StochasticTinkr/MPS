package jetbrains.mps.samples.secretCompartmentLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Event = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HandleEvent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_State = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StateMachine = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StateMachineTest = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_StateMachineTestMethod = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Transition = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("6986543d-8218-4ebf-a2e9-565e5049c1ce"), "jetbrains.mps.samples.secretCompartmentLanguage")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_Event;
      case 1:
        return props_HandleEvent;
      case 2:
        return props_State;
      case 3:
        return props_StateMachine;
      case 4:
        return props_StateMachineTest;
      case 5:
        return props_StateMachineTestMethod;
      case 6:
        return props_Transition;
    }
    throw new IllegalStateException();
  }
}
