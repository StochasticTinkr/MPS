package jetbrains.mps.samples.heating.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.baseLanguage.editor.BaseLanguageStyle_StyleSheet;
import jetbrains.mps.samples.heating.behavior.Slot__BehaviorDescriptor;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class Slot_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_sjf1bb_a(editorContext, node);
  }
  private EditorCell createCollection_sjf1bb_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_sjf1bb_a");
    editorCell.setBig(true);
    if (renderingCondition_sjf1bb_a0a(node, editorContext)) {
      editorCell.addEditorCell(this.createConstant_sjf1bb_a0(editorContext, node));
    }
    editorCell.addEditorCell(this.createConstant_sjf1bb_b0(editorContext, node));
    editorCell.addEditorCell(this.createProperty_sjf1bb_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_sjf1bb_d0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_sjf1bb_e0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_sjf1bb_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "customizing");
    editorCell.setCellId("Constant_sjf1bb_a0");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_Comment(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private static boolean renderingCondition_sjf1bb_a0a(SNode node, EditorContext editorContext) {
    return (boolean) Slot__BehaviorDescriptor.isCustomizing_idNU25Mr1t4q.invoke(node);
  }
  private EditorCell createConstant_sjf1bb_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "At");
    editorCell.setCellId("Constant_sjf1bb_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createProperty_sjf1bb_c0(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("start");
    provider.setNoTargetText("<no start>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_start");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createConstant_sjf1bb_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "o'clock");
    editorCell.setCellId("Constant_sjf1bb_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_sjf1bb_e0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new Slot_Editor.eventSingleRoleHandler_sjf1bb_e0(node, MetaAdapterFactory.getContainmentLink(0xa7d67633e8d9473bL, 0x98ce995a7aa66941L, 0x4f786d85fe288176L, 0x4f786d85fe289dd1L, "event"), editorContext);
    return provider.createCell();
  }
  private class eventSingleRoleHandler_sjf1bb_e0 extends SingleRoleCellProvider {
    public eventSingleRoleHandler_sjf1bb_e0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("event");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_event");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no event>";
    }
  }
}
