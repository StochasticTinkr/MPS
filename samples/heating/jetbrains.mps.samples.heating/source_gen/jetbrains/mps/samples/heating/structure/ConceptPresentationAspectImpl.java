package jetbrains.mps.samples.heating.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Applicability;
  private ConceptPresentation props_ChangeEvent;
  private ConceptPresentation props_DailyPlan;
  private ConceptPresentation props_DailyPlanReference;
  private ConceptPresentation props_DayRange;
  private ConceptPresentation props_HeatingPlan;
  private ConceptPresentation props_NotSpecified;
  private ConceptPresentation props_Slot;
  private ConceptPresentation props_SpecificDay;
  private ConceptPresentation props_WeekDays;
  private ConceptPresentation props_WeekendDay;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Applicability:
        if (props_Applicability == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Applicability = cpb.create();
        }
        return props_Applicability;
      case LanguageConceptSwitch.ChangeEvent:
        if (props_ChangeEvent == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("ChangeEvent");
          props_ChangeEvent = cpb.create();
        }
        return props_ChangeEvent;
      case LanguageConceptSwitch.DailyPlan:
        if (props_DailyPlan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_DailyPlan = cpb.create();
        }
        return props_DailyPlan;
      case LanguageConceptSwitch.DailyPlanReference:
        if (props_DailyPlanReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0xa7d67633e8d9473bL, 0x98ce995a7aa66941L, 0xcfa085c9af5e830L, 0xcfa085c9af5e831L, "target", "", "");
          props_DailyPlanReference = cpb.create();
        }
        return props_DailyPlanReference;
      case LanguageConceptSwitch.DayRange:
        if (props_DayRange == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("range");
          props_DayRange = cpb.create();
        }
        return props_DayRange;
      case LanguageConceptSwitch.HeatingPlan:
        if (props_HeatingPlan == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_HeatingPlan = cpb.create();
        }
        return props_HeatingPlan;
      case LanguageConceptSwitch.NotSpecified:
        if (props_NotSpecified == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("not specified");
          props_NotSpecified = cpb.create();
        }
        return props_NotSpecified;
      case LanguageConceptSwitch.Slot:
        if (props_Slot == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Slot");
          props_Slot = cpb.create();
        }
        return props_Slot;
      case LanguageConceptSwitch.SpecificDay:
        if (props_SpecificDay == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("specific day");
          props_SpecificDay = cpb.create();
        }
        return props_SpecificDay;
      case LanguageConceptSwitch.WeekDays:
        if (props_WeekDays == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("week days");
          props_WeekDays = cpb.create();
        }
        return props_WeekDays;
      case LanguageConceptSwitch.WeekendDay:
        if (props_WeekendDay == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("weekend day");
          props_WeekendDay = cpb.create();
        }
        return props_WeekendDay;
    }
    return null;
  }
}
