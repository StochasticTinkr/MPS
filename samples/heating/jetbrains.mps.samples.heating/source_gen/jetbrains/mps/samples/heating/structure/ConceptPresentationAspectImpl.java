package jetbrains.mps.samples.heating.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Applicability = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_ChangeEvent = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DailyPlan = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DailyPlanReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_DayRange = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_HeatingPlan = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotSpecified = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Slot = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_SpecificDay = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WeekDays = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_WeekendDay = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Applicability:
        return props_Applicability;
      case LanguageConceptSwitch.ChangeEvent:
        return props_ChangeEvent;
      case LanguageConceptSwitch.DailyPlan:
        return props_DailyPlan;
      case LanguageConceptSwitch.DailyPlanReference:
        return props_DailyPlanReference;
      case LanguageConceptSwitch.DayRange:
        return props_DayRange;
      case LanguageConceptSwitch.HeatingPlan:
        return props_HeatingPlan;
      case LanguageConceptSwitch.NotSpecified:
        return props_NotSpecified;
      case LanguageConceptSwitch.Slot:
        return props_Slot;
      case LanguageConceptSwitch.SpecificDay:
        return props_SpecificDay;
      case LanguageConceptSwitch.WeekDays:
        return props_WeekDays;
      case LanguageConceptSwitch.WeekendDay:
        return props_WeekendDay;
    }
    return null;
  }
}
