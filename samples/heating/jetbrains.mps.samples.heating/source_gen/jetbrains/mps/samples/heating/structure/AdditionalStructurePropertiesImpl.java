package jetbrains.mps.samples.heating.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseAdditionalStructureProperties;
import jetbrains.mps.smodel.runtime.AdditionalConceptProperties;
import jetbrains.mps.smodel.runtime.ConceptPropsBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Map;
import java.util.HashMap;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;

public class AdditionalStructurePropertiesImpl extends BaseAdditionalStructureProperties {
  private final AdditionalConceptProperties props_Applicability = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_ChangeEvent = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DailyPlan = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DailyPlanReference = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_DayRange = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_HeatingPlan = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_NotSpecified = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_Slot = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_SpecificDay = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_WeekDays = new ConceptPropsBuilder().create();
  private final AdditionalConceptProperties props_WeekendDay = new ConceptPropsBuilder().create();

  @Override
  @Nullable
  public AdditionalConceptProperties getDescriptor(SAbstractConcept c) {
    {
      SAbstractConcept cncpt = c;
      Integer preIndex = indices_4qogsf_a0m.get(cncpt);
      int switchIndex = (preIndex == null ? -1 : preIndex);
      switch (switchIndex) {
        case 0:
          if (true) {
            return props_Applicability;
          }
          break;
        case 1:
          if (true) {
            return props_ChangeEvent;
          }
          break;
        case 2:
          if (true) {
            return props_DailyPlan;
          }
          break;
        case 3:
          if (true) {
            return props_DailyPlanReference;
          }
          break;
        case 4:
          if (true) {
            return props_DayRange;
          }
          break;
        case 5:
          if (true) {
            return props_HeatingPlan;
          }
          break;
        case 6:
          if (true) {
            return props_NotSpecified;
          }
          break;
        case 7:
          if (true) {
            return props_Slot;
          }
          break;
        case 8:
          if (true) {
            return props_SpecificDay;
          }
          break;
        case 9:
          if (true) {
            return props_WeekDays;
          }
          break;
        case 10:
          if (true) {
            return props_WeekendDay;
          }
          break;
        default:
      }
    }
    throw new IllegalStateException();
  }
  private static Map<SAbstractConcept, Integer> buildConceptIndices(SAbstractConcept... concepts) {
    HashMap<SAbstractConcept, Integer> res = new HashMap<SAbstractConcept, Integer>();
    int counter = 0;
    for (SAbstractConcept c : concepts) {
      res.put(c, counter++);
    }
    return res;
  }
  private static final Map<SAbstractConcept, Integer> indices_4qogsf_a0m = buildConceptIndices(MetaAdapterFactory.getConcept(0xa7d67633e8d9473bL, 0x98ce995a7aa66941L, 0x40bcae6c0e68643cL, "Applicability"), MetaAdapterFactory.getConcept(0xa7d67633e8d9473bL, 0x98ce995a7aa66941L, 0x4644aa4ce08aec62L, "ChangeEvent"), MetaAdapterFactory.getConcept(0xa7d67633e8d9473bL, 0x98ce995a7aa66941L, 0x4644aa4ce08aec4fL, "DailyPlan"), MetaAdapterFactory.getConcept(0xa7d67633e8d9473bL, 0x98ce995a7aa66941L, 0xcfa085c9af5e830L, "DailyPlanReference"), MetaAdapterFactory.getConcept(0xa7d67633e8d9473bL, 0x98ce995a7aa66941L, 0x40bcae6c0e6bc56bL, "DayRange"), MetaAdapterFactory.getConcept(0xa7d67633e8d9473bL, 0x98ce995a7aa66941L, 0x4644aa4ce08aa3f2L, "HeatingPlan"), MetaAdapterFactory.getConcept(0xa7d67633e8d9473bL, 0x98ce995a7aa66941L, 0x40bcae6c0e68b8b8L, "NotSpecified"), MetaAdapterFactory.getConcept(0xa7d67633e8d9473bL, 0x98ce995a7aa66941L, 0x4f786d85fe288176L, "Slot"), MetaAdapterFactory.getConcept(0xa7d67633e8d9473bL, 0x98ce995a7aa66941L, 0x40bcae6c0e6b4ea6L, "SpecificDay"), MetaAdapterFactory.getConcept(0xa7d67633e8d9473bL, 0x98ce995a7aa66941L, 0x40bcae6c0e6b4ea5L, "WeekDays"), MetaAdapterFactory.getConcept(0xa7d67633e8d9473bL, 0x98ce995a7aa66941L, 0x40bcae6c0e68b8faL, "WeekendDay"));
}
