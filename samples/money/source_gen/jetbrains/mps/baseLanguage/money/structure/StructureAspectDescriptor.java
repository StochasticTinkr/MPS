package jetbrains.mps.baseLanguage.money.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import java.util.Map;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import jetbrains.mps.smodel.runtime.StaticScope;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  private final Map<SConceptId, Integer> myIndexMap = new HashMap<SConceptId, Integer>(7);
  /*package*/ final ConceptDescriptor myConceptMoneyCreator = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.money.structure.MoneyCreator", MetaIdFactory.conceptId(0xf43135f9b8334685L, 0x8d26ffb6c8215f72L, 0x11472ff5968L)).super_("jetbrains.mps.baseLanguage.structure.AbstractCreator").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ab844af9bL)).parents("jetbrains.mps.baseLanguage.structure.AbstractCreator").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10ab844af9bL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x11473383db1L, "amount", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false), new ConceptDescriptorBuilder.Link(0x11473390f4aL, "currency", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"amount", "currency"}, new boolean[]{false, false}).alias("Money", "money type constructor").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895903f7(jetbrains.mps.baseLanguage.money.structure)", "1187340310888")).create();
  /*package*/ final ConceptDescriptor myConceptMoneyGetAmountMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.money.structure.MoneyGetAmountMethodCall", MetaIdFactory.conceptId(0xf43135f9b8334685L, 0x8d26ffb6c8215f72L, 0x114740b5d60L)).super_("jetbrains.mps.baseLanguage.money.structure.MoneyMethodCall").super_(MetaIdFactory.conceptId(0xf43135f9b8334685L, 0x8d26ffb6c8215f72L, 0x114740b1673L)).parents("jetbrains.mps.baseLanguage.money.structure.MoneyMethodCall").parentIds(MetaIdFactory.conceptId(0xf43135f9b8334685L, 0x8d26ffb6c8215f72L, 0x114740b1673L)).alias(". amount", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895903f7(jetbrains.mps.baseLanguage.money.structure)", "1187357875552")).create();
  /*package*/ final ConceptDescriptor myConceptMoneyGetCurrencyMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.money.structure.MoneyGetCurrencyMethodCall", MetaIdFactory.conceptId(0xf43135f9b8334685L, 0x8d26ffb6c8215f72L, 0x114740c6f9bL)).super_("jetbrains.mps.baseLanguage.money.structure.MoneyMethodCall").super_(MetaIdFactory.conceptId(0xf43135f9b8334685L, 0x8d26ffb6c8215f72L, 0x114740b1673L)).parents("jetbrains.mps.baseLanguage.money.structure.MoneyMethodCall").parentIds(MetaIdFactory.conceptId(0xf43135f9b8334685L, 0x8d26ffb6c8215f72L, 0x114740b1673L)).alias(". currency", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895903f7(jetbrains.mps.baseLanguage.money.structure)", "1187357945755")).create();
  /*package*/ final ConceptDescriptor myConceptMoneyIsZeroMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.money.structure.MoneyIsZeroMethodCall", MetaIdFactory.conceptId(0xf43135f9b8334685L, 0x8d26ffb6c8215f72L, 0x11483863450L)).super_("jetbrains.mps.baseLanguage.money.structure.MoneyMethodCall").super_(MetaIdFactory.conceptId(0xf43135f9b8334685L, 0x8d26ffb6c8215f72L, 0x114740b1673L)).parents("jetbrains.mps.baseLanguage.money.structure.MoneyMethodCall").parentIds(MetaIdFactory.conceptId(0xf43135f9b8334685L, 0x8d26ffb6c8215f72L, 0x114740b1673L)).alias(". isZero", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895903f7(jetbrains.mps.baseLanguage.money.structure)", "1187617584208")).create();
  /*package*/ final ConceptDescriptor myConceptMoneyLiteral = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.money.structure.MoneyLiteral", MetaIdFactory.conceptId(0xf43135f9b8334685L, 0x8d26ffb6c8215f72L, 0x1144ae7606aL)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).propertyDescriptors(new ConceptDescriptorBuilder.Prop(0x1144aebdf40L, "currency"), new ConceptDescriptorBuilder.Prop(0x1144aec21fdL, "amount")).properties("currency", "amount").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895903f7(jetbrains.mps.baseLanguage.money.structure)", "1186667651178")).create();
  /*package*/ final ConceptDescriptor myConceptMoneyMethodCall = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.money.structure.MoneyMethodCall", MetaIdFactory.conceptId(0xf43135f9b8334685L, 0x8d26ffb6c8215f72L, 0x114740b1673L)).super_("jetbrains.mps.baseLanguage.structure.Expression").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).parents("jetbrains.mps.baseLanguage.structure.Expression").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL)).childDescriptors(new ConceptDescriptorBuilder.Link(0x114740fc5e3L, "instance", MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506fL), false, false, false)).children(new String[]{"instance"}, new boolean[]{false}).abstract_().staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895903f7(jetbrains.mps.baseLanguage.money.structure)", "1187357857395")).create();
  /*package*/ final ConceptDescriptor myConceptMoneyType = new ConceptDescriptorBuilder("jetbrains.mps.baseLanguage.money.structure.MoneyType", MetaIdFactory.conceptId(0xf43135f9b8334685L, 0x8d26ffb6c8215f72L, 0x1144b05194dL)).super_("jetbrains.mps.baseLanguage.structure.Type").super_(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).parents("jetbrains.mps.baseLanguage.structure.Type").parentIds(MetaIdFactory.conceptId(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c37f506dL)).alias("Money", "").staticScope(StaticScope.NONE).sourceNode(new SNodePointer("r:00000000-0000-4000-0000-011c895903f7(jetbrains.mps.baseLanguage.money.structure)", "1186669599053")).create();

  public StructureAspectDescriptor() {
    myIndexMap.put(myConceptMoneyCreator.getId(), 0);
    myIndexMap.put(myConceptMoneyGetAmountMethodCall.getId(), 1);
    myIndexMap.put(myConceptMoneyGetCurrencyMethodCall.getId(), 2);
    myIndexMap.put(myConceptMoneyIsZeroMethodCall.getId(), 3);
    myIndexMap.put(myConceptMoneyLiteral.getId(), 4);
    myIndexMap.put(myConceptMoneyMethodCall.getId(), 5);
    myIndexMap.put(myConceptMoneyType.getId(), 6);
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptMoneyCreator, myConceptMoneyGetAmountMethodCall, myConceptMoneyGetCurrencyMethodCall, myConceptMoneyIsZeroMethodCall, myConceptMoneyLiteral, myConceptMoneyMethodCall, myConceptMoneyType);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    Integer index = myIndexMap.get(id);
    if (index == null) {
      return null;
    }
    switch (((int) index)) {
      case 0:
        return myConceptMoneyCreator;
      case 1:
        return myConceptMoneyGetAmountMethodCall;
      case 2:
        return myConceptMoneyGetCurrencyMethodCall;
      case 3:
        return myConceptMoneyIsZeroMethodCall;
      case 4:
        return myConceptMoneyLiteral;
      case 5:
        return myConceptMoneyMethodCall;
      case 6:
        return myConceptMoneyType;
      default:
        throw new IllegalStateException();
    }
  }
}
