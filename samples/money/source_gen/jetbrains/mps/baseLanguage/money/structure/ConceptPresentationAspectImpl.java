package jetbrains.mps.baseLanguage.money.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_MoneyCreator;
  private ConceptPresentation props_MoneyGetAmountMethodCall;
  private ConceptPresentation props_MoneyGetCurrencyMethodCall;
  private ConceptPresentation props_MoneyIsZeroMethodCall;
  private ConceptPresentation props_MoneyLiteral;
  private ConceptPresentation props_MoneyMethodCall;
  private ConceptPresentation props_MoneyType;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.MoneyCreator:
        if (props_MoneyCreator == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("money type constructor");
          props_MoneyCreator = cpb.create();
        }
        return props_MoneyCreator;
      case LanguageConceptSwitch.MoneyGetAmountMethodCall:
        if (props_MoneyGetAmountMethodCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MoneyGetAmountMethodCall = cpb.create();
        }
        return props_MoneyGetAmountMethodCall;
      case LanguageConceptSwitch.MoneyGetCurrencyMethodCall:
        if (props_MoneyGetCurrencyMethodCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MoneyGetCurrencyMethodCall = cpb.create();
        }
        return props_MoneyGetCurrencyMethodCall;
      case LanguageConceptSwitch.MoneyIsZeroMethodCall:
        if (props_MoneyIsZeroMethodCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MoneyIsZeroMethodCall = cpb.create();
        }
        return props_MoneyIsZeroMethodCall;
      case LanguageConceptSwitch.MoneyLiteral:
        if (props_MoneyLiteral == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MoneyLiteral = cpb.create();
        }
        return props_MoneyLiteral;
      case LanguageConceptSwitch.MoneyMethodCall:
        if (props_MoneyMethodCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MoneyMethodCall = cpb.create();
        }
        return props_MoneyMethodCall;
      case LanguageConceptSwitch.MoneyType:
        if (props_MoneyType == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_MoneyType = cpb.create();
        }
        return props_MoneyType;
    }
    return null;
  }
}
