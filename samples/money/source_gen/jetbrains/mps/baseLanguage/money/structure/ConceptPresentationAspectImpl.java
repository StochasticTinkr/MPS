package jetbrains.mps.baseLanguage.money.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_MoneyCreator = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoneyGetAmountMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoneyGetCurrencyMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoneyIsZeroMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoneyLiteral = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoneyMethodCall = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_MoneyType = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("f43135f9-b833-4685-8d26-ffb6c8215f72"), "jetbrains.mps.baseLanguage.money")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_MoneyCreator;
      case 1:
        return props_MoneyGetAmountMethodCall;
      case 2:
        return props_MoneyGetCurrencyMethodCall;
      case 3:
        return props_MoneyIsZeroMethodCall;
      case 4:
        return props_MoneyLiteral;
      case 5:
        return props_MoneyMethodCall;
      case 6:
        return props_MoneyType;
    }
    throw new IllegalStateException();
  }
}
