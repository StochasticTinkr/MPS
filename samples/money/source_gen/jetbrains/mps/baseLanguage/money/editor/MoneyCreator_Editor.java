package jetbrains.mps.baseLanguage.money.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.baseLanguage.editor.BaseLanguageStyle_StyleSheet;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.OldNewCompositeSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.SChildSubstituteInfo;
import jetbrains.mps.nodeEditor.cellMenu.OldChildNodeSubstituteInfoHolder;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class MoneyCreator_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_ccfkrk_a(editorContext, node);
  }
  private EditorCell createCollection_ccfkrk_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createIndent2(editorContext, node);
    editorCell.setCellId("Collection_ccfkrk_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_ccfkrk_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ccfkrk_b0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_ccfkrk_c0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ccfkrk_d0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_ccfkrk_e0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_ccfkrk_f0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_ccfkrk_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "Money");
    editorCell.setCellId("Constant_ccfkrk_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createConstant_ccfkrk_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "(");
    editorCell.setCellId("Constant_ccfkrk_b0");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_Matching(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_ccfkrk_c0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new MoneyCreator_Editor.amountSingleRoleHandler_ccfkrk_c0(node, MetaAdapterFactory.getContainmentLink(0xf43135f9b8334685L, 0x8d26ffb6c8215f72L, 0x11472ff5968L, 0x11473383db1L, "amount"), editorContext);
    return provider.createCell();
  }
  private class amountSingleRoleHandler_ccfkrk_c0 extends SingleRoleCellProvider {
    public amountSingleRoleHandler_ccfkrk_c0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new OldNewCompositeSubstituteInfo(myEditorContext, new SChildSubstituteInfo(editorCell), new OldChildNodeSubstituteInfoHolder(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext))));
      if (editorCell.getRole() == null) {
        editorCell.setRole("amount");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_amount");
      installCellInfo(null, editorCell);

      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no amount>";
    }
  }
  private EditorCell createConstant_ccfkrk_d0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ",");
    editorCell.setCellId("Constant_ccfkrk_d0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_ccfkrk_e0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new MoneyCreator_Editor.currencySingleRoleHandler_ccfkrk_e0(node, MetaAdapterFactory.getContainmentLink(0xf43135f9b8334685L, 0x8d26ffb6c8215f72L, 0x11472ff5968L, 0x11473390f4aL, "currency"), editorContext);
    return provider.createCell();
  }
  private class currencySingleRoleHandler_ccfkrk_e0 extends SingleRoleCellProvider {
    public currencySingleRoleHandler_ccfkrk_e0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new OldNewCompositeSubstituteInfo(myEditorContext, new SChildSubstituteInfo(editorCell), new OldChildNodeSubstituteInfoHolder(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext))));
      if (editorCell.getRole() == null) {
        editorCell.setRole("currency");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_currency");
      installCellInfo(null, editorCell);

      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no currency>";
    }
  }
  private EditorCell createConstant_ccfkrk_f0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, ")");
    editorCell.setCellId("Constant_ccfkrk_f0");
    Style style = new StyleImpl();
    BaseLanguageStyle_StyleSheet.apply_Matching(style, editorCell);
    editorCell.getStyle().putAll(style);
    editorCell.setDefaultText("");
    return editorCell;
  }
}
