package jetbrains.mps.samples.notesOrganizer.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.language.LanguageRegistry;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private final ConceptPresentation props_Category = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_CategoryReference = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Note = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NoteMetaInfo = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotePart = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Notes = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_NotesConfiguration = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Priority = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_Status = new ConceptPresentationBuilder().create();
  private final ConceptPresentation props_TextNotePart = new ConceptPresentationBuilder().create();

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) LanguageRegistry.getInstance().getLanguage(MetaAdapterFactory.getLanguage(SLanguageId.deserialize("4b0f115a-8868-4d72-8d61-97071eaaa5f1"), "jetbrains.mps.samples.notesOrganizer")).getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case 0:
        return props_Category;
      case 1:
        return props_CategoryReference;
      case 2:
        return props_Note;
      case 3:
        return props_NoteMetaInfo;
      case 4:
        return props_NotePart;
      case 5:
        return props_Notes;
      case 6:
        return props_NotesConfiguration;
      case 7:
        return props_Priority;
      case 8:
        return props_Status;
      case 9:
        return props_TextNotePart;
    }
    throw new IllegalStateException();
  }
}
