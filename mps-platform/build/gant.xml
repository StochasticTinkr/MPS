<project name="Platform build scripts" default="all">

    <!-- ===================================================== -->
    <!-- Initialize and load properties                        -->
    <!-- ===================================================== -->

    <property name="gant.script" value="${basedir}/mps_build.gant"/>
    <property name="community.folder" value="${basedir}/../community"/>
    <property name="community.out" value="${basedir}/../out/intellij idea"/>
    <property name="mps.folder" value="${basedir}/../.."/>
    <property name="version.properties.file" value="${mps.folder}/build/version.properties"/>

    <!-- ===================================================== -->
    <!-- Help task                                             -->
    <!-- ===================================================== -->

    <target name="usage" description="Shows help">
        <echo message="  Execute 'ant -projecthelp' for build file help."/>
        <echo message="  Execute 'ant -help' for Ant help."/>
        <echo message="${line.separator}"/>
        <echo message="  Use default target 'all' to build platform and install in parent folder with MPS repository"/>
        <echo message="${line.separator}"/>
        <echo message="  You can set required platform branch/commit/tag with property 'idea.commit'. By default it set to 'mps.idea.platform.number' from version.properties"/>
    </target>

    <!-- ===================================================== -->
    <!-- Load idea.commit from property file in MPS sources    -->
    <!-- (Fail safe)                                           -->
    <!-- ===================================================== -->

    <target name="versions-file" description="Util task to check if version.properties.file exists">
        <condition property="version.properties.exists" value="true" else="false">
            <available file="${version.properties.file}"/>
        </condition>
    </target>

    <target name="versions" depends="versions-file" if="${version.properties.exists}"
            description="Try to load properties">
        <loadproperties srcfile="${version.properties.file}"/>
    </target>

    <!-- ===================================================== -->
    <!-- IDEA community repository tasks:                      -->
    <!-- Check existence of repository in community folder     -->
    <!-- Clone, fetch, reset, checkout (if idea.commit is set) -->
    <!-- and pull                                              -->
    <!-- ===================================================== -->

    <target name="check" description="Check if IDEA Community folder exists">
        <condition property="community.need.clone" value="false" else="true">
            <available file="${community.folder}" type="dir"/>
        </condition>
    </target>

    <target name="clone" depends="check" if="${community.need.clone}"
            description="Clone IDEA Community repository to local folder">
        <echo message="IDEA Community folder does not exists. Cloning..."/>
        <exec executable="git" dir="${basedir}/../">
            <arg value="clone"/>
            <arg value="git://git.jetbrains.org/idea/community.git"/>
        </exec>
    </target>

    <target name="fetch" depends="clone" description="Perform git fetch on IDEA Community repository">
        <exec executable="git" dir="${community.folder}">
            <arg value="fetch"/>
            <arg value="-p"/>
        </exec>
    </target>

    <target name="reset" depends="fetch" description="Reset current IDEA Community state to HEAD">
        <echo message="Reset all changes in IDEA Community folder to HEAD state."/>
        <exec executable="git" dir="${community.folder}">
            <arg value="reset"/>
            <arg value="--hard"/>
            <arg value="HEAD"/>
        </exec>
    </target>

    <target name="check-commit" depends="versions" description="Check if idea.commit is set to execute checkout task">
        <condition property="idea.commit.is.set" value="true" else="false">
            <isset property="idea.commit"/>
        </condition>
    </target>

    <target name="checkout" depends="reset,check-commit" if="${idea.commit.is.set}"
            description="Checkout IDEA Community branch/commit/tag set in idea.commit property">
        <echo message="Check out IDEA Community branch/commit/tag: ${idea.commit}"/>
        <exec executable="git" dir="${community.folder}" failonerror="true">
            <arg value="checkout"/>
            <arg value="-f"/>
            <arg value="${idea.commit}"/>
        </exec>
    </target>

    <target name="pull" depends="checkout" description="Update repository">
        <exec executable="git" dir="${community.folder}">
            <arg value="pull"/>
        </exec>
    </target>

    <!-- ===================================================== -->
    <!-- Preparations for build:                               -->
    <!-- Copy list of modules                                  -->
    <!-- Copy list of libraries                                -->
    <!-- Apply MPS patches                                     -->
    <!-- ===================================================== -->

    <target name="modules" description="Copy IDEA Community modules and update paths (add community folder)">
        <echo message="Copy and update IDEA Community modules list"/>
        <delete file="${basedir}/../.idea/modules.xml"/>
        <copy file="${community.folder}/.idea/modules.xml" todir="${basedir}/../.idea"/>
        <replaceregexp file="${basedir}/../.idea/modules.xml" flags="g" byline="true">
            <regexp pattern="(\$PROJECT_DIR\$/)(?!android)"/>
            <substitution expression="\1community/"/>
        </replaceregexp>
        <replaceregexp file="${basedir}/../.idea/modules.xml">
            <regexp pattern="&lt;modules&gt;${line.separator}"/>
            <substitution
                    expression="\0      &lt;module fileurl=&quot;file://$PROJECT_DIR$/mps-platform.iml&quot; filepath=&quot;$PROJECT_DIR$/mps-platform.iml&quot; /&gt;${line.separator}"/>
        </replaceregexp>
    </target>

    <target name="libraries" description="Copy IDEA Community libraries and update paths (add community folder)">
        <echo message="Copy and update IDEA Community libraries"/>
        <delete dir="${basedir}/../.idea/libraries"/>
        <mkdir dir="${basedir}/../.idea/libraries"/>
        <copy todir="${basedir}/../.idea/libraries">
            <fileset dir="${community.folder}/.idea/libraries"/>
        </copy>
        <replaceregexp flags="g" byline="true">
            <regexp pattern="\$PROJECT_DIR\$"/>
            <substitution expression="\0/community"/>
            <fileset dir="${basedir}/../.idea/libraries"/>
        </replaceregexp>
    </target>

    <target name="patch" description="Apply MPS patches to IDEA Community sources">
        <echo message="Applying MPS patches to IDEA Community sources..."/>
        <property name="patchFile"
                  value="${basedir}/patches/Custom_project_settings_store_folder_name_and__project_file_extension_for_MPS_.patch"/>
        <exec executable="git" dir="${community.folder}" failonerror="true">
            <arg value="apply"/>
            <arg value="--check"/>
            <arg value="${patchFile}"/>
        </exec>
        <exec executable="git" dir="${community.folder}">
            <arg value="apply"/>
            <arg value="${patchFile}"/>
        </exec>

        <property name="patchKotlinVersion"
                  value="${basedir}/patches/Use_Kotlin_1_1_50_Release_instead_of_1_2_0_RC.patch"/>
        <exec executable="git" dir="${community.folder}" failonerror="true">
            <arg value="apply"/>
            <arg value="--check"/>
            <arg value="${patchKotlinVersion}"/>
        </exec>
        <exec executable="git" dir="${community.folder}">
            <arg value="apply"/>
            <arg value="${patchKotlinVersion}"/>
        </exec>
    </target>

    <!-- ===================================================== -->
    <!-- Main tasks                                            -->
    <!-- ===================================================== -->

    <!-- Exists as standalone task for TeamCity build -->
    <target name="prepare" depends="patch,modules,libraries" description="Make all build preparation tasks"/>

    <!-- Exists as standalone task for TeamCity build -->
    <target name="compile" description="Runs building script.">
        <ant antfile="${community.folder}/build/gant.xml" target="doGant" inheritall="true" inheritrefs="true"/>
    </target>

    <target name="build" depends="pull,prepare,compile"
            description="Build patched IDEA Community sources to create MPS platform"/>

    <target name="install-check" description="Check that there are build artifacts">
        <condition property="platform.out.exists">
            <and>
                <available file="${basedir}/../out/intellij idea/dist.all"/>
                <available file="${basedir}/../out/intellij idea/artifacts"/>
            </and>
        </condition>
    </target>

    <target name="install" depends="install-check" description="Copy platform libs to MPS">

        <fail message="No platform artifacts found! Run 'build' task first." unless="${platform.out.exists}"/>

        <echo message="Cleaning destination folders in MPS sources..."/>

        <delete dir="${mps.folder}/lib"/>
        <delete dir="${mps.folder}/bin/linux"/>
        <delete dir="${mps.folder}/bin/mac"/>
        <delete dir="${mps.folder}/bin/win"/>
        <delete file="${mps.folder}/build/resources/mps"/>
        <delete dir="${mps.folder}/build/conf"/>
        <delete dir="${mps.folder}/plugins/cvsIntegration/lib"/>
        <delete dir="${mps.folder}/plugins/git4idea/lib"/>
        <delete dir="${mps.folder}/plugins/svn4idea/lib"/>
        <delete dir="${mps.folder}/plugins/terminal"/>

        <mkdir dir="${mps.folder}/lib"/>
        <mkdir dir="${mps.folder}/lib/src"/>
        <mkdir dir="${mps.folder}/bin/linux"/>
        <mkdir dir="${mps.folder}/bin/mac"/>
        <mkdir dir="${mps.folder}/bin/win"/>
        <mkdir dir="${mps.folder}/build/conf"/>
        <mkdir dir="${mps.folder}/plugins/cvsIntegration/lib"/>
        <mkdir dir="${mps.folder}/plugins/git4idea/lib"/>
        <mkdir dir="${mps.folder}/plugins/svn4idea/lib"/>
        <mkdir dir="${mps.folder}/plugins/terminal"/>

        <echo message="Copying platform and zip with platform sources to MPS sources..."/>

        <!--Copy platform libraries to MPS lib folder-->
        <copy todir="${mps.folder}/lib">
            <fileset dir="${community.out}/dist.all/lib"/>
        </copy>

        <!--Copy build.txt to MPS lib folder-->
        <copy file="${community.out}/dist.all/build.txt" todir="${mps.folder}/lib"/>

        <!--Copy platform sources to MPS lib folder-->
        <copy file="${community.out}/artifacts/platform-sources.zip" todir="${mps.folder}/lib/src"/>

        <!--Copy binaries-->
        <copy todir="${mps.folder}/bin/linux">
            <fileset dir="${community.out}/dist.all/bin/linux"/>
        </copy>
        <copy todir="${mps.folder}/bin/mac">
            <fileset dir="${community.out}/dist.all/bin/mac"/>
        </copy>
        <copy todir="${mps.folder}/bin/win">
            <fileset dir="${community.out}/dist.all/bin/win"/>
        </copy>
        <copy file="${community.out}/dist.all/build/resources/mps" todir="${mps.folder}/build/resources"/>
        <copy file="${community.out}/dist.all/build/dependencies/gradle.properties" todir="${mps.folder}/build/dependencies"/>

        <!--Copy plugin libraries to plugin folders-->
        <copy todir="${mps.folder}/plugins/cvsIntegration/lib">
            <fileset dir="${community.out}/dist.all/plugins/cvsIntegration/lib"/>
        </copy>
        <copy todir="${mps.folder}/plugins/git4idea/lib">
            <fileset dir="${community.out}/dist.all/plugins/git4idea/lib"/>
        </copy>
        <copy todir="${mps.folder}/plugins/svn4idea/lib">
            <fileset dir="${community.out}/dist.all/plugins/svn4idea/lib"/>
        </copy>
        <copy todir="${mps.folder}/plugins/terminal">
            <fileset dir="${community.out}/dist.all/plugins/terminal"/>
        </copy>
    </target>

    <target name="all" depends="build,install" description="Build and install MPS platform"/>
</project>
