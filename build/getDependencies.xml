<project name="Get MPS dependencies" default="install" basedir="."
         xmlns:ivy="antlib:org.apache.ivy.ant">

  <!-- ===================================================== -->
  <!-- Initialize and load properties                        -->
  <!-- ===================================================== -->

  <property name="mps.ivy.home" value="${user.home}" description="Property used to set custom path on TeamCity"/>
  <property name="idea.platform.local.build" value="false" description="Set to true if use local platform build"/>
  <property name="ivy.jar.dir" value="${basedir}/ivy"/>
  <property name="ivy.cache.ttl.default" value="eternal"/>

  <loadproperties srcfile="version.properties" description="Load versions of dependencies to download"/>
  <loadproperties srcfile="lib.properties" description="Load destination paths to 3rd party libraries"/>

  <!-- ===================================================== -->
  <!-- Help and ivy load                        -->
  <!-- ===================================================== -->

  <target name="usage" description="Shows help">
    <echo message="  Execute 'ant -projecthelp' for build file help."/>
    <echo message="  Execute 'ant -help' for Ant help."/>
    <echo message="${line.separator}"/>
    <echo message="  Use default target 'install' to get all required dependencies for build MPS"/>
    <echo message="${line.separator}"/>
    <echo message="  If you need to build platform for MPS (based on IDEA Community), than set 'idea.platform.local.build' property to true"/>
    <echo message="  You can set required platform branch/commit/tag with property 'idea.commit'. By default it set to 'mps.idea.platform.number' from version.properties"/>
  </target>

  <target name="install-ivy">
    <path id="ivy.lib.path">
      <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
    </path>
    <typedef resource="org/apache/ivy/ant/antlib.xml"
             uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>

  <!-- ===================================================== -->
  <!-- Check 3rd party libraries download requirement        -->
  <!-- ===================================================== -->

  <target name="check-diffutils" description="Check diffutils libraries availability">
    <condition property="difutill.missing" value="true" else="false">
      <not>
        <and>
          <available file="${diffutils.lib}"/>
          <available file="${diffutils.sources}"/>
          <available file="${diffutils.javadoc}"/>
        </and>
      </not>
    </condition>
  </target>

  <target name="check-testlib" description="Check testlib libraries availability">
    <condition property="testlib.missing" value="true" else="false">
      <not>
        <and>
          <available file="${testlib.lib}"/>
        </and>
      </not>
    </condition>
  </target>

  <target name="check-jetpad" description="Check testlib libraries availability">
    <condition property="jetpad.missing" value="true" else="false">
      <not>
        <and>
          <available file="${jetpad.lib}"/>
        </and>
      </not>
    </condition>
  </target>

  <!-- ===================================================== -->
  <!-- Check platform libraries download requirement         -->
  <!-- ===================================================== -->

  <target name="version-file" description="Util task to check if build.txt exists">
    <condition property="build.txt.exists" value="true" else="false">
      <available file="${basedir}/../lib/build.txt"/>
    </condition>
  </target>

  <target name="version" depends="version-file" description="Load platform version from build.txt to property" if="${build.txt.exists}">
    <loadfile property="current.version" srcfile="${basedir}/../lib/build.txt">
      <filterchain>
        <replacestring from="MPS-" to=""/>
        <striplinebreaks/>
      </filterchain>
    </loadfile>
    <echo message="File build.txt contains build number: ${current.version}"/>
  </target>

  <target name="check-platform" depends="version" description="Check version of currently downloaded platform">
    <!-- If property does not match version in build.txt - assume platform is outdated -->
    <condition property="platform.outdated" value="true" else="false">
      <not>
        <equals arg1="${idea.platform.version}" arg2="${current.version}"/>
      </not>
    </condition>

    <!-- If platform is not need to be build locally and is outdated - platform with idea.platform.version will be downloaded -->
    <condition property="do.platform.download" value="true" else="false">
      <and>
        <isfalse value="${idea.platform.local.build}"/>
        <istrue value="${platform.outdated}"/>
      </and>
    </condition>

    <!-- Check that locally build platform has already been build by checking availability of output folders -->
    <condition property="platform.out.missing" value="true" else="false">
      <not>
        <and>
          <available file="${basedir}/../mps-platform/out/intellij idea/dist.all"/>
          <available file="${basedir}/../mps-platform/out/intellij idea/artifacts"/>
        </and>
      </not>
    </condition>

    <!-- Check if we need copy local platform build -->
    <condition property="do.platform.local.build.install" value="true" else="false">
      <and>
        <istrue value="${idea.platform.local.build}"/>
        <or>
          <not>
            <!-- If build.txt contains snapshot version, we can assume that local platform has already been build and copied, so need to do nothing -->
            <equals arg1="${current.version}" arg2="${idea.platform.snapshot}"/>
          </not>
          <isfalse value="${build.txt.exists}"/>
          <!-- If there is no platform build artifacts, we force to update platform libs -->
          <istrue value="${platform.out.missing}"/>
        </or>
      </and>
    </condition>
  </target>

  <!-- ===================================================== -->
  <!-- Check and call scripts for local platform build       -->
  <!-- ===================================================== -->

  <target name="build-platform" depends="check-platform" if="${platform.out.missing}" description="Start script to build local MPS platform">
    <ant antfile="${basedir}/../mps-platform/build/gant.xml" target="build" usenativebasedir="true" inheritall="true"/>
  </target>

  <target name="copy-platform" depends="check-platform" if="${do.platform.local.build.install}"
          description="Start script to copy libraries from local MPS platform build">
    <ant antfile="${basedir}/../mps-platform/build/gant.xml" target="install" usenativebasedir="true"/>
  </target>

  <target name="install-platform" if="${idea.platform.local.build}"
          description="Run scripts from inner project to build and copy local MPS platform build">
    <antcall target="build-platform" inheritall="true"/>
    <antcall target="copy-platform" inheritall="true"/>
  </target>

  <!-- ===================================================== -->
  <!-- Default target                                        -->
  <!-- Download platform or build local platform if          -->
  <!-- idea.platform.local.build property set to true.       -->
  <!-- Download 3rd party libraries                          -->
  <!-- ===================================================== -->

  <target name="install" depends="download-platform,install-platform,download-3rd-party" description="Download all platform libs and sources"/>

  <!-- ===================================================== -->
  <!-- Download libraries with ivy                           -->
  <!-- ===================================================== -->

  <target name="download-platform" depends="check-platform,install-ivy" if="${do.platform.download}"
          description="Download platform based on IDEA Community from TeamCity">
    <antcall target="clean-platform"/>
    <ivy:resolve file="ivy.xml" showprogress="true"/>
    <ivy:retrieve pattern="${basedir}/../[artifact].[ext]" overwritemode="different"/>

    <unzip src="${basedir}/../mps-platform.zip" dest="${basedir}/../" overwrite="true">
      <!--TODO use license files from IDEA Community-->
      <patternset>
        <exclude name="license/*"/>
        <!-- TODO: Exclude log.xml from platform-->
        <exclude name="bin/log.xml"/>
      </patternset>
    </unzip>

    <!-- Set executable flag to binaries -->
    <chmod file="${basedir}/../bin/mac/fsnotifier" perm="755"/>
    <chmod file="${basedir}/../bin/mac/restarter" perm="755"/>
    <chmod file="${basedir}/../bin/mac/printenv.py" perm="755"/>
    <chmod file="${basedir}/../build/resources/mps" perm="755"/>

    <chmod file="${basedir}/../bin/linux/fsnotifier" perm="755"/>
    <chmod file="${basedir}/../bin/linux/fsnotifier-arm" perm="755"/>
    <chmod file="${basedir}/../bin/linux/fsnotifier64" perm="755"/>
    <chmod file="${basedir}/../bin/linux/printenv.py" perm="755"/>
    <chmod file="${basedir}/../bin/linux/restart.py" perm="755"/>

    <chmod file="${basedir}/../bin/win/fsnotifier.exe" perm="755"/>
    <chmod file="${basedir}/../bin/win/fsnotifier64.exe" perm="755"/>
    <chmod file="${basedir}/../bin/win/restarter.exe" perm="755"/>
    <chmod file="${basedir}/../bin/win/runnerw.exe" perm="755"/>
    <chmod file="${basedir}/../bin/win/vistalauncher.exe" perm="755"/>
    <chmod file="${basedir}/../bin/win/WinProcessListHelper.exe" perm="755"/>
    <chmod file="${basedir}/../bin/win/append.bat" perm="755"/>
  </target>

  <target name="download-diffutils" depends="check-diffutils,install-ivy" if="${difutill.missing}"
          description="Download com.googlecode.java-diff-utils-diffutils library">
    <echo message="DiffUtil library is missing. Downloading..."/>
    <ivy:resolve file="ivyDiffUtils.xml" showprogress="true"/>
    <ivy:retrieve pattern="${basedir}/../lib/ext/[artifact]-[revision](-[classifier]).[ext]" overwritemode="different"/>
  </target>

  <target name="download-testlib" depends="check-testlib,install-ivy" if="${testlib.missing}"
          description="Download jmock and hamcrest libraries">
    <echo message="Test libraries (hamcrest, jmock and jmock-junit) are missing. Downloading..."/>
    <ivy:resolve file="ivyUnitTestLibs.xml" transitive="false" type="source,jar" showprogress="true"/>
    <ivy:retrieve pattern="${basedir}/../languages/baseLanguage/unitTest/lib/[artifact]-[revision](-[classifier]).[ext]" overwritemode="different"/>
  </target>

  <target name="download-jetpad" depends="check-jetpad,install-ivy" if="${jetpad.missing}"
          description="Download JetPad framework libraries">
    <echo message="JetPad libraries are missing. Downloading..."/>
    <ivy:resolve file="./ivyJetPad.xml" validate="false" showprogress="true"/>
    <ivy:retrieve pattern="${basedir}/../plugins/jetpad/lib/[artifact]-[revision](-[classifier]).[ext]" overwritemode="different"/>
  </target>

  <target name="download-3rd-party" depends="download-diffutils,download-testlib,download-jetpad"
          description="Download all non platform related libs"/>

  <!-- ===================================================== -->
  <!-- Clean libraries tasks                                 -->
  <!-- ===================================================== -->

  <target name="clean-platform" description="Delete platform libraries">
    <delete includeemptydirs="true" failonerror="false">
      <fileset dir="${basedir}/../lib">
        <include name="**/*"/>
        <exclude name="**/ext/**"/>
      </fileset>
    </delete>

    <delete dir="${basedir}/../plugins/cvsIntegration/lib" failonerror="false"/>
    <delete dir="${basedir}/../plugins/git4idea/lib" failonerror="false"/>
    <delete dir="${basedir}/../plugins/github" failonerror="false"/>
    <delete dir="${basedir}/../plugins/svn4idea/lib" failonerror="false"/>
    <delete dir="${basedir}/../plugins/terminal" failonerror="false"/>
  </target>

  <target name="clean-diffutils">
    <delete file="${diffutils.lib}" failonerror="false"/>
    <delete file="${diffutils.sources}" failonerror="false"/>
    <delete file="${diffutils.javadoc}" failonerror="false"/>
  </target>

  <target name="clean-testlib">
    <delete dir="${testlib.lib}" includeemptydirs="true" failonerror="false"/>
  </target>

  <target name="clean-jetpad">
    <delete dir="${jetpad.lib}" includeemptydirs="true" failonerror="false"/>
  </target>

  <target name="clean-3rd-party" depends="clean-diffutils,clean-testlib,clean-jetpad" description="Delete 3rd party libraries"/>

  <target name="clean" depends="clean-3rd-party,clean-platform" description="Delete platform files and 3rd party libraries"/>

</project>